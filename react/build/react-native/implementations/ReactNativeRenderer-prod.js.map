{"version":3,"file":"ReactNativeRenderer-prod.js","sources":["../../../packages/shared/invokeGuardedCallbackImpl.js","../../../packages/shared/ReactErrorUtils.js","../../../packages/shared/isArray.js","../../../packages/react-native-renderer/src/legacy-events/EventPluginUtils.js","../../../packages/react-native-renderer/src/legacy-events/SyntheticEvent.js","../../../packages/react-native-renderer/src/legacy-events/ResponderSyntheticEvent.js","../../../packages/react-native-renderer/src/legacy-events/ResponderTopLevelEventTypes.js","../../../packages/react-native-renderer/src/legacy-events/ResponderTouchHistoryStore.js","../../../packages/react-native-renderer/src/legacy-events/accumulate.js","../../../packages/react-native-renderer/src/legacy-events/accumulateInto.js","../../../packages/react-native-renderer/src/legacy-events/forEachAccumulated.js","../../../packages/react-reconciler/src/ReactWorkTags.js","../../../packages/react-native-renderer/src/legacy-events/ResponderEventPlugin.js","../../../packages/react-native-renderer/src/legacy-events/EventPluginRegistry.js","../../../packages/react-native-renderer/src/ReactNativeGetListener.js","../../../packages/react-native-renderer/src/ReactNativeBridgeEventPlugin.js","../../../packages/react-native-renderer/src/ReactNativeEventPluginOrder.js","../../../packages/react-native-renderer/src/ReactNativeInjectionShared.js","../../../packages/react-native-renderer/src/ReactNativeComponentTree.js","../../../packages/react-native-renderer/src/legacy-events/ReactGenericBatching.js","../../../packages/react-native-renderer/src/legacy-events/EventBatching.js","../../../packages/react-native-renderer/src/ReactNativeEventEmitter.js","../../../packages/react-native-renderer/src/ReactNativeGlobalResponderHandler.js","../../../packages/react-native-renderer/src/ReactNativeInjection.js","../../../packages/shared/ReactInstanceMap.js","../../../packages/shared/ReactSharedInternals.js","../../../packages/shared/ReactSymbols.js","../../../packages/shared/getComponentNameFromType.js","../../../packages/react-reconciler/src/getComponentNameFromFiber.js","../../../packages/shared/forks/ReactFeatureFlags.native-oss.js","../../../packages/react-reconciler/src/ReactFiberFlags.js","../../../packages/react-reconciler/src/ReactFiberTreeReflection.js","../../../packages/react-native-renderer/src/ReactNativeAttributePayload.js","../../../packages/react-native-renderer/src/NativeMethodsMixinUtils.js","../../../packages/react-native-renderer/src/ReactNativeFiberHostComponent.js","../../../packages/react-reconciler/src/Scheduler.js","../../../packages/react-reconciler/src/ReactFiberDevToolsHook.old.js","../../../packages/react-reconciler/src/ReactTypeOfMode.js","../../../packages/react-reconciler/src/ReactFiberLane.old.js","../../../packages/react-reconciler/src/ReactEventPriorities.old.js","../../../packages/react-reconciler/src/ReactFiberHostConfigWithNoHydration.js","../../../packages/react-native-renderer/src/ReactNativeHostConfig.js","../../../packages/shared/ReactComponentStackFrame.js","../../../packages/shared/hasOwnProperty.js","../../../packages/shared/checkPropTypes.js","../../../packages/react-reconciler/src/ReactFiberStack.old.js","../../../packages/react-reconciler/src/ReactFiberContext.old.js","../../../packages/react-reconciler/src/ReactRootTags.js","../../../packages/react-reconciler/src/ReactFiberSyncTaskQueue.old.js","../../../packages/shared/ReactVersion.js","../../../packages/react-reconciler/src/ReactFiberTransition.js","../../../packages/shared/objectIs.js","../../../packages/shared/shallowEqual.js","../../../packages/react-reconciler/src/ReactFiberComponentStack.js","../../../packages/react-reconciler/src/ReactCurrentFiber.js","../../../packages/react-reconciler/src/ReactFiberLazyComponent.old.js","../../../packages/react-reconciler/src/ReactFiberNewContext.old.js","../../../packages/react-reconciler/src/ReactFiberInterleavedUpdates.old.js","../../../packages/react-reconciler/src/ReactUpdateQueue.old.js","../../../packages/react-reconciler/src/ReactFiberClassComponent.old.js","../../../packages/react-reconciler/src/ReactChildFiber.old.js","../../../packages/react-reconciler/src/ReactFiberHostContext.old.js","../../../packages/react-reconciler/src/ReactFiberSuspenseContext.old.js","../../../packages/react-reconciler/src/ReactFiberSuspenseComponent.old.js","../../../packages/react-reconciler/src/ReactHookEffectTags.js","../../../packages/react-reconciler/src/ReactFiberHydrationContext.old.js","../../../packages/react-reconciler/src/ReactMutableSource.old.js","../../../packages/react-reconciler/src/ReactFiberCacheComponent.old.js","../../../packages/react-reconciler/src/ReactFiberHooks.old.js","../../../packages/react-reconciler/src/ReactProfilerTimer.old.js","../../../packages/react-reconciler/src/ReactCapturedValue.js","../../../packages/react-reconciler/src/forks/ReactFiberErrorDialog.native.js","../../../packages/react-reconciler/src/ReactFiberErrorLogger.js","../../../packages/react-reconciler/src/ReactFiberThrow.old.js","../../../packages/react-reconciler/src/ReactFiberCompleteWork.old.js","../../../packages/react-reconciler/src/ReactFiberBeginWork.old.js","../../../packages/react-reconciler/src/ReactFiberUnwindWork.old.js","../../../packages/react-reconciler/src/ReactFiberCommitWork.old.js","../../../packages/react-reconciler/src/ReactFiberWorkLoop.old.js","../../../packages/react-reconciler/src/ReactFiber.old.js","../../../packages/react-reconciler/src/ReactFiberRoot.old.js","../../../packages/react-reconciler/src/ReactPortal.js","../../../packages/react-reconciler/src/ReactFiberReconciler.old.js","../../../packages/react-native-renderer/src/ReactNativeFiberInspector.js","../../../packages/react-native-renderer/src/ReactNativeRenderer.js"],"sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport invariant from 'shared/invariant';\n\nfunction invokeGuardedCallbackProd<A, B, C, D, E, F, Context>(\n  name: string | null,\n  func: (a: A, b: B, c: C, d: D, e: E, f: F) => mixed,\n  context: Context,\n  a: A,\n  b: B,\n  c: C,\n  d: D,\n  e: E,\n  f: F,\n) {\n  const funcArgs = Array.prototype.slice.call(arguments, 3);\n  try {\n    func.apply(context, funcArgs);\n  } catch (error) {\n    this.onError(error);\n  }\n}\n\nlet invokeGuardedCallbackImpl = invokeGuardedCallbackProd;\n\nif (__DEV__) {\n  // In DEV mode, we swap out invokeGuardedCallback for a special version\n  // that plays more nicely with the browser's DevTools. The idea is to preserve\n  // \"Pause on exceptions\" behavior. Because React wraps all user-provided\n  // functions in invokeGuardedCallback, and the production version of\n  // invokeGuardedCallback uses a try-catch, all user exceptions are treated\n  // like caught exceptions, and the DevTools won't pause unless the developer\n  // takes the extra step of enabling pause on caught exceptions. This is\n  // unintuitive, though, because even though React has caught the error, from\n  // the developer's perspective, the error is uncaught.\n  //\n  // To preserve the expected \"Pause on exceptions\" behavior, we don't use a\n  // try-catch in DEV. Instead, we synchronously dispatch a fake event to a fake\n  // DOM node, and call the user-provided callback from inside an event handler\n  // for that fake event. If the callback throws, the error is \"captured\" using\n  // a global event handler. But because the error happens in a different\n  // event loop context, it does not interrupt the normal program flow.\n  // Effectively, this gives us try-catch behavior without actually using\n  // try-catch. Neat!\n\n  // Check that the browser supports the APIs we need to implement our special\n  // DEV version of invokeGuardedCallback\n  if (\n    typeof window !== 'undefined' &&\n    typeof window.dispatchEvent === 'function' &&\n    typeof document !== 'undefined' &&\n    typeof document.createEvent === 'function'\n  ) {\n    const fakeNode = document.createElement('react');\n\n    invokeGuardedCallbackImpl = function invokeGuardedCallbackDev<\n      A,\n      B,\n      C,\n      D,\n      E,\n      F,\n      Context,\n    >(\n      name: string | null,\n      func: (a: A, b: B, c: C, d: D, e: E, f: F) => mixed,\n      context: Context,\n      a: A,\n      b: B,\n      c: C,\n      d: D,\n      e: E,\n      f: F,\n    ) {\n      // If document doesn't exist we know for sure we will crash in this method\n      // when we call document.createEvent(). However this can cause confusing\n      // errors: https://github.com/facebook/create-react-app/issues/3482\n      // So we preemptively throw with a better message instead.\n      invariant(\n        typeof document !== 'undefined',\n        'The `document` global was defined when React was initialized, but is not ' +\n          'defined anymore. This can happen in a test environment if a component ' +\n          'schedules an update from an asynchronous callback, but the test has already ' +\n          'finished running. To solve this, you can either unmount the component at ' +\n          'the end of your test (and ensure that any asynchronous operations get ' +\n          'canceled in `componentWillUnmount`), or you can change the test itself ' +\n          'to be asynchronous.',\n      );\n      const evt = document.createEvent('Event');\n\n      let didCall = false;\n      // Keeps track of whether the user-provided callback threw an error. We\n      // set this to true at the beginning, then set it to false right after\n      // calling the function. If the function errors, `didError` will never be\n      // set to false. This strategy works even if the browser is flaky and\n      // fails to call our global error handler, because it doesn't rely on\n      // the error event at all.\n      let didError = true;\n\n      // Keeps track of the value of window.event so that we can reset it\n      // during the callback to let user code access window.event in the\n      // browsers that support it.\n      const windowEvent = window.event;\n\n      // Keeps track of the descriptor of window.event to restore it after event\n      // dispatching: https://github.com/facebook/react/issues/13688\n      const windowEventDescriptor = Object.getOwnPropertyDescriptor(\n        window,\n        'event',\n      );\n\n      function restoreAfterDispatch() {\n        // We immediately remove the callback from event listeners so that\n        // nested `invokeGuardedCallback` calls do not clash. Otherwise, a\n        // nested call would trigger the fake event handlers of any call higher\n        // in the stack.\n        fakeNode.removeEventListener(evtType, callCallback, false);\n\n        // We check for window.hasOwnProperty('event') to prevent the\n        // window.event assignment in both IE <= 10 as they throw an error\n        // \"Member not found\" in strict mode, and in Firefox which does not\n        // support window.event.\n        if (\n          typeof window.event !== 'undefined' &&\n          window.hasOwnProperty('event')\n        ) {\n          window.event = windowEvent;\n        }\n      }\n\n      // Create an event handler for our fake event. We will synchronously\n      // dispatch our fake event using `dispatchEvent`. Inside the handler, we\n      // call the user-provided callback.\n      const funcArgs = Array.prototype.slice.call(arguments, 3);\n      function callCallback() {\n        didCall = true;\n        restoreAfterDispatch();\n        func.apply(context, funcArgs);\n        didError = false;\n      }\n\n      // Create a global error event handler. We use this to capture the value\n      // that was thrown. It's possible that this error handler will fire more\n      // than once; for example, if non-React code also calls `dispatchEvent`\n      // and a handler for that event throws. We should be resilient to most of\n      // those cases. Even if our error event handler fires more than once, the\n      // last error event is always used. If the callback actually does error,\n      // we know that the last error event is the correct one, because it's not\n      // possible for anything else to have happened in between our callback\n      // erroring and the code that follows the `dispatchEvent` call below. If\n      // the callback doesn't error, but the error event was fired, we know to\n      // ignore it because `didError` will be false, as described above.\n      let error;\n      // Use this to track whether the error event is ever called.\n      let didSetError = false;\n      let isCrossOriginError = false;\n\n      function handleWindowError(event) {\n        error = event.error;\n        didSetError = true;\n        if (error === null && event.colno === 0 && event.lineno === 0) {\n          isCrossOriginError = true;\n        }\n        if (event.defaultPrevented) {\n          // Some other error handler has prevented default.\n          // Browsers silence the error report if this happens.\n          // We'll remember this to later decide whether to log it or not.\n          if (error != null && typeof error === 'object') {\n            try {\n              error._suppressLogging = true;\n            } catch (inner) {\n              // Ignore.\n            }\n          }\n        }\n      }\n\n      // Create a fake event type.\n      const evtType = `react-${name ? name : 'invokeguardedcallback'}`;\n\n      // Attach our event handlers\n      window.addEventListener('error', handleWindowError);\n      fakeNode.addEventListener(evtType, callCallback, false);\n\n      // Synchronously dispatch our fake event. If the user-provided function\n      // errors, it will trigger our global error handler.\n      evt.initEvent(evtType, false, false);\n      fakeNode.dispatchEvent(evt);\n\n      if (windowEventDescriptor) {\n        Object.defineProperty(window, 'event', windowEventDescriptor);\n      }\n\n      if (didCall && didError) {\n        if (!didSetError) {\n          // The callback errored, but the error event never fired.\n          error = new Error(\n            'An error was thrown inside one of your components, but React ' +\n              \"doesn't know what it was. This is likely due to browser \" +\n              'flakiness. React does its best to preserve the \"Pause on ' +\n              'exceptions\" behavior of the DevTools, which requires some ' +\n              \"DEV-mode only tricks. It's possible that these don't work in \" +\n              'your browser. Try triggering the error in production mode, ' +\n              'or switching to a modern browser. If you suspect that this is ' +\n              'actually an issue with React, please file an issue.',\n          );\n        } else if (isCrossOriginError) {\n          error = new Error(\n            \"A cross-origin error was thrown. React doesn't have access to \" +\n              'the actual error object in development. ' +\n              'See https://reactjs.org/link/crossorigin-error for more information.',\n          );\n        }\n        this.onError(error);\n      }\n\n      // Remove our event listeners\n      window.removeEventListener('error', handleWindowError);\n\n      if (!didCall) {\n        // Something went really wrong, and our event was not dispatched.\n        // https://github.com/facebook/react/issues/16734\n        // https://github.com/facebook/react/issues/16585\n        // Fall back to the production implementation.\n        restoreAfterDispatch();\n        return invokeGuardedCallbackProd.apply(this, arguments);\n      }\n    };\n  }\n}\n\nexport default invokeGuardedCallbackImpl;\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport invariant from 'shared/invariant';\nimport invokeGuardedCallbackImpl from './invokeGuardedCallbackImpl';\n\n// Used by Fiber to simulate a try-catch.\nlet hasError: boolean = false;\nlet caughtError: mixed = null;\n\n// Used by event system to capture/rethrow the first error.\nlet hasRethrowError: boolean = false;\nlet rethrowError: mixed = null;\n\nconst reporter = {\n  onError(error: mixed) {\n    hasError = true;\n    caughtError = error;\n  },\n};\n\n/**\n * Call a function while guarding against errors that happens within it.\n * Returns an error if it throws, otherwise null.\n *\n * In production, this is implemented using a try-catch. The reason we don't\n * use a try-catch directly is so that we can swap out a different\n * implementation in DEV mode.\n *\n * @param {String} name of the guard to use for logging or debugging\n * @param {Function} func The function to invoke\n * @param {*} context The context to use when calling the function\n * @param {...*} args Arguments for function\n */\nexport function invokeGuardedCallback<A, B, C, D, E, F, Context>(\n  name: string | null,\n  func: (a: A, b: B, c: C, d: D, e: E, f: F) => mixed,\n  context: Context,\n  a: A,\n  b: B,\n  c: C,\n  d: D,\n  e: E,\n  f: F,\n): void {\n  hasError = false;\n  caughtError = null;\n  invokeGuardedCallbackImpl.apply(reporter, arguments);\n}\n\n/**\n * Same as invokeGuardedCallback, but instead of returning an error, it stores\n * it in a global so it can be rethrown by `rethrowCaughtError` later.\n * TODO: See if caughtError and rethrowError can be unified.\n *\n * @param {String} name of the guard to use for logging or debugging\n * @param {Function} func The function to invoke\n * @param {*} context The context to use when calling the function\n * @param {...*} args Arguments for function\n */\nexport function invokeGuardedCallbackAndCatchFirstError<\n  A,\n  B,\n  C,\n  D,\n  E,\n  F,\n  Context,\n>(\n  name: string | null,\n  func: (a: A, b: B, c: C, d: D, e: E, f: F) => void,\n  context: Context,\n  a: A,\n  b: B,\n  c: C,\n  d: D,\n  e: E,\n  f: F,\n): void {\n  invokeGuardedCallback.apply(this, arguments);\n  if (hasError) {\n    const error = clearCaughtError();\n    if (!hasRethrowError) {\n      hasRethrowError = true;\n      rethrowError = error;\n    }\n  }\n}\n\n/**\n * During execution of guarded functions we will capture the first error which\n * we will rethrow to be handled by the top level error handler.\n */\nexport function rethrowCaughtError() {\n  if (hasRethrowError) {\n    const error = rethrowError;\n    hasRethrowError = false;\n    rethrowError = null;\n    throw error;\n  }\n}\n\nexport function hasCaughtError() {\n  return hasError;\n}\n\nexport function clearCaughtError() {\n  if (hasError) {\n    const error = caughtError;\n    hasError = false;\n    caughtError = null;\n    return error;\n  } else {\n    invariant(\n      false,\n      'clearCaughtError was called but no error was captured. This error ' +\n        'is likely caused by a bug in React. Please file an issue.',\n    );\n  }\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\ndeclare function isArray(a: mixed): boolean %checks(Array.isArray(a));\n\nconst isArrayImpl = Array.isArray;\n\n// eslint-disable-next-line no-redeclare\nfunction isArray(a: mixed): boolean {\n  return isArrayImpl(a);\n}\n\nexport default isArray;\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport {invokeGuardedCallbackAndCatchFirstError} from 'shared/ReactErrorUtils';\nimport invariant from 'shared/invariant';\nimport isArray from 'shared/isArray';\n\nexport let getFiberCurrentPropsFromNode = null;\nexport let getInstanceFromNode = null;\nexport let getNodeFromInstance = null;\n\nexport function setComponentTree(\n  getFiberCurrentPropsFromNodeImpl,\n  getInstanceFromNodeImpl,\n  getNodeFromInstanceImpl,\n) {\n  getFiberCurrentPropsFromNode = getFiberCurrentPropsFromNodeImpl;\n  getInstanceFromNode = getInstanceFromNodeImpl;\n  getNodeFromInstance = getNodeFromInstanceImpl;\n  if (__DEV__) {\n    if (!getNodeFromInstance || !getInstanceFromNode) {\n      console.error(\n        'EventPluginUtils.setComponentTree(...): Injected ' +\n          'module is missing getNodeFromInstance or getInstanceFromNode.',\n      );\n    }\n  }\n}\n\nlet validateEventDispatches;\nif (__DEV__) {\n  validateEventDispatches = function(event) {\n    const dispatchListeners = event._dispatchListeners;\n    const dispatchInstances = event._dispatchInstances;\n\n    const listenersIsArr = isArray(dispatchListeners);\n    const listenersLen = listenersIsArr\n      ? dispatchListeners.length\n      : dispatchListeners\n      ? 1\n      : 0;\n\n    const instancesIsArr = isArray(dispatchInstances);\n    const instancesLen = instancesIsArr\n      ? dispatchInstances.length\n      : dispatchInstances\n      ? 1\n      : 0;\n\n    if (instancesIsArr !== listenersIsArr || instancesLen !== listenersLen) {\n      console.error('EventPluginUtils: Invalid `event`.');\n    }\n  };\n}\n\n/**\n * Dispatch the event to the listener.\n * @param {SyntheticEvent} event SyntheticEvent to handle\n * @param {function} listener Application-level callback\n * @param {*} inst Internal component instance\n */\nexport function executeDispatch(event, listener, inst) {\n  const type = event.type || 'unknown-event';\n  event.currentTarget = getNodeFromInstance(inst);\n  invokeGuardedCallbackAndCatchFirstError(type, listener, undefined, event);\n  event.currentTarget = null;\n}\n\n/**\n * Standard/simple iteration through an event's collected dispatches.\n */\nexport function executeDispatchesInOrder(event) {\n  const dispatchListeners = event._dispatchListeners;\n  const dispatchInstances = event._dispatchInstances;\n  if (__DEV__) {\n    validateEventDispatches(event);\n  }\n  if (isArray(dispatchListeners)) {\n    for (let i = 0; i < dispatchListeners.length; i++) {\n      if (event.isPropagationStopped()) {\n        break;\n      }\n      // Listeners and Instances are two parallel arrays that are always in sync.\n      executeDispatch(event, dispatchListeners[i], dispatchInstances[i]);\n    }\n  } else if (dispatchListeners) {\n    executeDispatch(event, dispatchListeners, dispatchInstances);\n  }\n  event._dispatchListeners = null;\n  event._dispatchInstances = null;\n}\n\n/**\n * Standard/simple iteration through an event's collected dispatches, but stops\n * at the first dispatch execution returning true, and returns that id.\n *\n * @return {?string} id of the first dispatch execution who's listener returns\n * true, or null if no listener returned true.\n */\nfunction executeDispatchesInOrderStopAtTrueImpl(event) {\n  const dispatchListeners = event._dispatchListeners;\n  const dispatchInstances = event._dispatchInstances;\n  if (__DEV__) {\n    validateEventDispatches(event);\n  }\n  if (isArray(dispatchListeners)) {\n    for (let i = 0; i < dispatchListeners.length; i++) {\n      if (event.isPropagationStopped()) {\n        break;\n      }\n      // Listeners and Instances are two parallel arrays that are always in sync.\n      if (dispatchListeners[i](event, dispatchInstances[i])) {\n        return dispatchInstances[i];\n      }\n    }\n  } else if (dispatchListeners) {\n    if (dispatchListeners(event, dispatchInstances)) {\n      return dispatchInstances;\n    }\n  }\n  return null;\n}\n\n/**\n * @see executeDispatchesInOrderStopAtTrueImpl\n */\nexport function executeDispatchesInOrderStopAtTrue(event) {\n  const ret = executeDispatchesInOrderStopAtTrueImpl(event);\n  event._dispatchInstances = null;\n  event._dispatchListeners = null;\n  return ret;\n}\n\n/**\n * Execution of a \"direct\" dispatch - there must be at most one dispatch\n * accumulated on the event or it is considered an error. It doesn't really make\n * sense for an event with multiple dispatches (bubbled) to keep track of the\n * return values at each dispatch execution, but it does tend to make sense when\n * dealing with \"direct\" dispatches.\n *\n * @return {*} The return value of executing the single dispatch.\n */\nexport function executeDirectDispatch(event) {\n  if (__DEV__) {\n    validateEventDispatches(event);\n  }\n  const dispatchListener = event._dispatchListeners;\n  const dispatchInstance = event._dispatchInstances;\n  invariant(\n    !isArray(dispatchListener),\n    'executeDirectDispatch(...): Invalid `event`.',\n  );\n  event.currentTarget = dispatchListener\n    ? getNodeFromInstance(dispatchInstance)\n    : null;\n  const res = dispatchListener ? dispatchListener(event) : null;\n  event.currentTarget = null;\n  event._dispatchListeners = null;\n  event._dispatchInstances = null;\n  return res;\n}\n\n/**\n * @param {SyntheticEvent} event\n * @return {boolean} True iff number of dispatches accumulated is greater than 0.\n */\nexport function hasDispatches(event) {\n  return !!event._dispatchListeners;\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n/* eslint valid-typeof: 0 */\n\nimport invariant from 'shared/invariant';\n\nconst EVENT_POOL_SIZE = 10;\n\n/**\n * @interface Event\n * @see http://www.w3.org/TR/DOM-Level-3-Events/\n */\nconst EventInterface = {\n  type: null,\n  target: null,\n  // currentTarget is set when dispatching; no use in copying it here\n  currentTarget: function() {\n    return null;\n  },\n  eventPhase: null,\n  bubbles: null,\n  cancelable: null,\n  timeStamp: function(event) {\n    return event.timeStamp || Date.now();\n  },\n  defaultPrevented: null,\n  isTrusted: null,\n};\n\nfunction functionThatReturnsTrue() {\n  return true;\n}\n\nfunction functionThatReturnsFalse() {\n  return false;\n}\n\n/**\n * Synthetic events are dispatched by event plugins, typically in response to a\n * top-level event delegation handler.\n *\n * These systems should generally use pooling to reduce the frequency of garbage\n * collection. The system should check `isPersistent` to determine whether the\n * event should be released into the pool after being dispatched. Users that\n * need a persisted event should invoke `persist`.\n *\n * Synthetic events (and subclasses) implement the DOM Level 3 Events API by\n * normalizing browser quirks. Subclasses do not necessarily have to implement a\n * DOM interface; custom application-specific events can also subclass this.\n *\n * @param {object} dispatchConfig Configuration used to dispatch this event.\n * @param {*} targetInst Marker identifying the event target.\n * @param {object} nativeEvent Native browser event.\n * @param {DOMEventTarget} nativeEventTarget Target node.\n */\nfunction SyntheticEvent(\n  dispatchConfig,\n  targetInst,\n  nativeEvent,\n  nativeEventTarget,\n) {\n  if (__DEV__) {\n    // these have a getter/setter for warnings\n    delete this.nativeEvent;\n    delete this.preventDefault;\n    delete this.stopPropagation;\n    delete this.isDefaultPrevented;\n    delete this.isPropagationStopped;\n  }\n\n  this.dispatchConfig = dispatchConfig;\n  this._targetInst = targetInst;\n  this.nativeEvent = nativeEvent;\n  this._dispatchListeners = null;\n  this._dispatchInstances = null;\n\n  const Interface = this.constructor.Interface;\n  for (const propName in Interface) {\n    if (!Interface.hasOwnProperty(propName)) {\n      continue;\n    }\n    if (__DEV__) {\n      delete this[propName]; // this has a getter/setter for warnings\n    }\n    const normalize = Interface[propName];\n    if (normalize) {\n      this[propName] = normalize(nativeEvent);\n    } else {\n      if (propName === 'target') {\n        this.target = nativeEventTarget;\n      } else {\n        this[propName] = nativeEvent[propName];\n      }\n    }\n  }\n\n  const defaultPrevented =\n    nativeEvent.defaultPrevented != null\n      ? nativeEvent.defaultPrevented\n      : nativeEvent.returnValue === false;\n  if (defaultPrevented) {\n    this.isDefaultPrevented = functionThatReturnsTrue;\n  } else {\n    this.isDefaultPrevented = functionThatReturnsFalse;\n  }\n  this.isPropagationStopped = functionThatReturnsFalse;\n  return this;\n}\n\nObject.assign(SyntheticEvent.prototype, {\n  preventDefault: function() {\n    this.defaultPrevented = true;\n    const event = this.nativeEvent;\n    if (!event) {\n      return;\n    }\n\n    if (event.preventDefault) {\n      event.preventDefault();\n    } else if (typeof event.returnValue !== 'unknown') {\n      event.returnValue = false;\n    }\n    this.isDefaultPrevented = functionThatReturnsTrue;\n  },\n\n  stopPropagation: function() {\n    const event = this.nativeEvent;\n    if (!event) {\n      return;\n    }\n\n    if (event.stopPropagation) {\n      event.stopPropagation();\n    } else if (typeof event.cancelBubble !== 'unknown') {\n      // The ChangeEventPlugin registers a \"propertychange\" event for\n      // IE. This event does not support bubbling or cancelling, and\n      // any references to cancelBubble throw \"Member not found\".  A\n      // typeof check of \"unknown\" circumvents this issue (and is also\n      // IE specific).\n      event.cancelBubble = true;\n    }\n\n    this.isPropagationStopped = functionThatReturnsTrue;\n  },\n\n  /**\n   * We release all dispatched `SyntheticEvent`s after each event loop, adding\n   * them back into the pool. This allows a way to hold onto a reference that\n   * won't be added back into the pool.\n   */\n  persist: function() {\n    this.isPersistent = functionThatReturnsTrue;\n  },\n\n  /**\n   * Checks if this event should be released back into the pool.\n   *\n   * @return {boolean} True if this should not be released, false otherwise.\n   */\n  isPersistent: functionThatReturnsFalse,\n\n  /**\n   * `PooledClass` looks for `destructor` on each instance it releases.\n   */\n  destructor: function() {\n    const Interface = this.constructor.Interface;\n    for (const propName in Interface) {\n      if (__DEV__) {\n        Object.defineProperty(\n          this,\n          propName,\n          getPooledWarningPropertyDefinition(propName, Interface[propName]),\n        );\n      } else {\n        this[propName] = null;\n      }\n    }\n    this.dispatchConfig = null;\n    this._targetInst = null;\n    this.nativeEvent = null;\n    this.isDefaultPrevented = functionThatReturnsFalse;\n    this.isPropagationStopped = functionThatReturnsFalse;\n    this._dispatchListeners = null;\n    this._dispatchInstances = null;\n    if (__DEV__) {\n      Object.defineProperty(\n        this,\n        'nativeEvent',\n        getPooledWarningPropertyDefinition('nativeEvent', null),\n      );\n      Object.defineProperty(\n        this,\n        'isDefaultPrevented',\n        getPooledWarningPropertyDefinition(\n          'isDefaultPrevented',\n          functionThatReturnsFalse,\n        ),\n      );\n      Object.defineProperty(\n        this,\n        'isPropagationStopped',\n        getPooledWarningPropertyDefinition(\n          'isPropagationStopped',\n          functionThatReturnsFalse,\n        ),\n      );\n      Object.defineProperty(\n        this,\n        'preventDefault',\n        getPooledWarningPropertyDefinition('preventDefault', () => {}),\n      );\n      Object.defineProperty(\n        this,\n        'stopPropagation',\n        getPooledWarningPropertyDefinition('stopPropagation', () => {}),\n      );\n    }\n  },\n});\n\nSyntheticEvent.Interface = EventInterface;\n\n/**\n * Helper to reduce boilerplate when creating subclasses.\n */\nSyntheticEvent.extend = function(Interface) {\n  const Super = this;\n\n  const E = function() {};\n  E.prototype = Super.prototype;\n  const prototype = new E();\n\n  function Class() {\n    return Super.apply(this, arguments);\n  }\n  Object.assign(prototype, Class.prototype);\n  Class.prototype = prototype;\n  Class.prototype.constructor = Class;\n\n  Class.Interface = Object.assign({}, Super.Interface, Interface);\n  Class.extend = Super.extend;\n  addEventPoolingTo(Class);\n\n  return Class;\n};\n\naddEventPoolingTo(SyntheticEvent);\n\n/**\n * Helper to nullify syntheticEvent instance properties when destructing\n *\n * @param {String} propName\n * @param {?object} getVal\n * @return {object} defineProperty object\n */\nfunction getPooledWarningPropertyDefinition(propName, getVal) {\n  function set(val) {\n    const action = isFunction ? 'setting the method' : 'setting the property';\n    warn(action, 'This is effectively a no-op');\n    return val;\n  }\n\n  function get() {\n    const action = isFunction\n      ? 'accessing the method'\n      : 'accessing the property';\n    const result = isFunction\n      ? 'This is a no-op function'\n      : 'This is set to null';\n    warn(action, result);\n    return getVal;\n  }\n\n  function warn(action, result) {\n    if (__DEV__) {\n      console.error(\n        \"This synthetic event is reused for performance reasons. If you're seeing this, \" +\n          \"you're %s `%s` on a released/nullified synthetic event. %s. \" +\n          'If you must keep the original synthetic event around, use event.persist(). ' +\n          'See https://reactjs.org/link/event-pooling for more information.',\n        action,\n        propName,\n        result,\n      );\n    }\n  }\n  const isFunction = typeof getVal === 'function';\n  return {\n    configurable: true,\n    set: set,\n    get: get,\n  };\n}\n\nfunction createOrGetPooledEvent(\n  dispatchConfig,\n  targetInst,\n  nativeEvent,\n  nativeInst,\n) {\n  const EventConstructor = this;\n  if (EventConstructor.eventPool.length) {\n    const instance = EventConstructor.eventPool.pop();\n    EventConstructor.call(\n      instance,\n      dispatchConfig,\n      targetInst,\n      nativeEvent,\n      nativeInst,\n    );\n    return instance;\n  }\n  return new EventConstructor(\n    dispatchConfig,\n    targetInst,\n    nativeEvent,\n    nativeInst,\n  );\n}\n\nfunction releasePooledEvent(event) {\n  const EventConstructor = this;\n  invariant(\n    event instanceof EventConstructor,\n    'Trying to release an event instance into a pool of a different type.',\n  );\n  event.destructor();\n  if (EventConstructor.eventPool.length < EVENT_POOL_SIZE) {\n    EventConstructor.eventPool.push(event);\n  }\n}\n\nfunction addEventPoolingTo(EventConstructor) {\n  EventConstructor.getPooled = createOrGetPooledEvent;\n  EventConstructor.eventPool = [];\n  EventConstructor.release = releasePooledEvent;\n}\n\nexport default SyntheticEvent;\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport SyntheticEvent from './SyntheticEvent';\n\n/**\n * `touchHistory` isn't actually on the native event, but putting it in the\n * interface will ensure that it is cleaned up when pooled/destroyed. The\n * `ResponderEventPlugin` will populate it appropriately.\n */\nconst ResponderSyntheticEvent = SyntheticEvent.extend({\n  touchHistory: function(nativeEvent) {\n    return null; // Actually doesn't even look at the native event.\n  },\n});\n\nexport default ResponderSyntheticEvent;\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nexport const TOP_TOUCH_START = 'topTouchStart';\nexport const TOP_TOUCH_MOVE = 'topTouchMove';\nexport const TOP_TOUCH_END = 'topTouchEnd';\nexport const TOP_TOUCH_CANCEL = 'topTouchCancel';\nexport const TOP_SCROLL = 'topScroll';\nexport const TOP_SELECTION_CHANGE = 'topSelectionChange';\n\nexport function isStartish(topLevelType: mixed): boolean {\n  return topLevelType === TOP_TOUCH_START;\n}\n\nexport function isMoveish(topLevelType: mixed): boolean {\n  return topLevelType === TOP_TOUCH_MOVE;\n}\n\nexport function isEndish(topLevelType: mixed): boolean {\n  return topLevelType === TOP_TOUCH_END || topLevelType === TOP_TOUCH_CANCEL;\n}\n\nexport const startDependencies = [TOP_TOUCH_START];\nexport const moveDependencies = [TOP_TOUCH_MOVE];\nexport const endDependencies = [TOP_TOUCH_CANCEL, TOP_TOUCH_END];\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport invariant from 'shared/invariant';\n\nimport {isStartish, isMoveish, isEndish} from './ResponderTopLevelEventTypes';\n\n/**\n * Tracks the position and time of each active touch by `touch.identifier`. We\n * should typically only see IDs in the range of 1-20 because IDs get recycled\n * when touches end and start again.\n */\ntype TouchRecord = {|\n  touchActive: boolean,\n  startPageX: number,\n  startPageY: number,\n  startTimeStamp: number,\n  currentPageX: number,\n  currentPageY: number,\n  currentTimeStamp: number,\n  previousPageX: number,\n  previousPageY: number,\n  previousTimeStamp: number,\n|};\n\nconst MAX_TOUCH_BANK = 20;\nconst touchBank: Array<TouchRecord> = [];\nconst touchHistory = {\n  touchBank,\n  numberActiveTouches: 0,\n  // If there is only one active touch, we remember its location. This prevents\n  // us having to loop through all of the touches all the time in the most\n  // common case.\n  indexOfSingleActiveTouch: -1,\n  mostRecentTimeStamp: 0,\n};\n\ntype Touch = {\n  identifier: ?number,\n  pageX: number,\n  pageY: number,\n  timestamp: number,\n  ...\n};\ntype TouchEvent = {\n  changedTouches: Array<Touch>,\n  touches: Array<Touch>,\n  ...\n};\n\nfunction timestampForTouch(touch: Touch): number {\n  // The legacy internal implementation provides \"timeStamp\", which has been\n  // renamed to \"timestamp\". Let both work for now while we iron it out\n  // TODO (evv): rename timeStamp to timestamp in internal code\n  return (touch: any).timeStamp || touch.timestamp;\n}\n\n/**\n * TODO: Instead of making gestures recompute filtered velocity, we could\n * include a built in velocity computation that can be reused globally.\n */\nfunction createTouchRecord(touch: Touch): TouchRecord {\n  return {\n    touchActive: true,\n    startPageX: touch.pageX,\n    startPageY: touch.pageY,\n    startTimeStamp: timestampForTouch(touch),\n    currentPageX: touch.pageX,\n    currentPageY: touch.pageY,\n    currentTimeStamp: timestampForTouch(touch),\n    previousPageX: touch.pageX,\n    previousPageY: touch.pageY,\n    previousTimeStamp: timestampForTouch(touch),\n  };\n}\n\nfunction resetTouchRecord(touchRecord: TouchRecord, touch: Touch): void {\n  touchRecord.touchActive = true;\n  touchRecord.startPageX = touch.pageX;\n  touchRecord.startPageY = touch.pageY;\n  touchRecord.startTimeStamp = timestampForTouch(touch);\n  touchRecord.currentPageX = touch.pageX;\n  touchRecord.currentPageY = touch.pageY;\n  touchRecord.currentTimeStamp = timestampForTouch(touch);\n  touchRecord.previousPageX = touch.pageX;\n  touchRecord.previousPageY = touch.pageY;\n  touchRecord.previousTimeStamp = timestampForTouch(touch);\n}\n\nfunction getTouchIdentifier({identifier}: Touch): number {\n  invariant(identifier != null, 'Touch object is missing identifier.');\n  if (__DEV__) {\n    if (identifier > MAX_TOUCH_BANK) {\n      console.error(\n        'Touch identifier %s is greater than maximum supported %s which causes ' +\n          'performance issues backfilling array locations for all of the indices.',\n        identifier,\n        MAX_TOUCH_BANK,\n      );\n    }\n  }\n  return identifier;\n}\n\nfunction recordTouchStart(touch: Touch): void {\n  const identifier = getTouchIdentifier(touch);\n  const touchRecord = touchBank[identifier];\n  if (touchRecord) {\n    resetTouchRecord(touchRecord, touch);\n  } else {\n    touchBank[identifier] = createTouchRecord(touch);\n  }\n  touchHistory.mostRecentTimeStamp = timestampForTouch(touch);\n}\n\nfunction recordTouchMove(touch: Touch): void {\n  const touchRecord = touchBank[getTouchIdentifier(touch)];\n  if (touchRecord) {\n    touchRecord.touchActive = true;\n    touchRecord.previousPageX = touchRecord.currentPageX;\n    touchRecord.previousPageY = touchRecord.currentPageY;\n    touchRecord.previousTimeStamp = touchRecord.currentTimeStamp;\n    touchRecord.currentPageX = touch.pageX;\n    touchRecord.currentPageY = touch.pageY;\n    touchRecord.currentTimeStamp = timestampForTouch(touch);\n    touchHistory.mostRecentTimeStamp = timestampForTouch(touch);\n  } else {\n    if (__DEV__) {\n      console.warn(\n        'Cannot record touch move without a touch start.\\n' +\n          'Touch Move: %s\\n' +\n          'Touch Bank: %s',\n        printTouch(touch),\n        printTouchBank(),\n      );\n    }\n  }\n}\n\nfunction recordTouchEnd(touch: Touch): void {\n  const touchRecord = touchBank[getTouchIdentifier(touch)];\n  if (touchRecord) {\n    touchRecord.touchActive = false;\n    touchRecord.previousPageX = touchRecord.currentPageX;\n    touchRecord.previousPageY = touchRecord.currentPageY;\n    touchRecord.previousTimeStamp = touchRecord.currentTimeStamp;\n    touchRecord.currentPageX = touch.pageX;\n    touchRecord.currentPageY = touch.pageY;\n    touchRecord.currentTimeStamp = timestampForTouch(touch);\n    touchHistory.mostRecentTimeStamp = timestampForTouch(touch);\n  } else {\n    if (__DEV__) {\n      console.warn(\n        'Cannot record touch end without a touch start.\\n' +\n          'Touch End: %s\\n' +\n          'Touch Bank: %s',\n        printTouch(touch),\n        printTouchBank(),\n      );\n    }\n  }\n}\n\nfunction printTouch(touch: Touch): string {\n  return JSON.stringify({\n    identifier: touch.identifier,\n    pageX: touch.pageX,\n    pageY: touch.pageY,\n    timestamp: timestampForTouch(touch),\n  });\n}\n\nfunction printTouchBank(): string {\n  let printed = JSON.stringify(touchBank.slice(0, MAX_TOUCH_BANK));\n  if (touchBank.length > MAX_TOUCH_BANK) {\n    printed += ' (original size: ' + touchBank.length + ')';\n  }\n  return printed;\n}\n\nlet instrumentationCallback: ?(string, TouchEvent) => void;\n\nconst ResponderTouchHistoryStore = {\n  /**\n   * Registers a listener which can be used to instrument every touch event.\n   */\n  instrument(callback: (string, TouchEvent) => void): void {\n    instrumentationCallback = callback;\n  },\n\n  recordTouchTrack(topLevelType: string, nativeEvent: TouchEvent): void {\n    if (instrumentationCallback != null) {\n      instrumentationCallback(topLevelType, nativeEvent);\n    }\n\n    if (isMoveish(topLevelType)) {\n      nativeEvent.changedTouches.forEach(recordTouchMove);\n    } else if (isStartish(topLevelType)) {\n      nativeEvent.changedTouches.forEach(recordTouchStart);\n      touchHistory.numberActiveTouches = nativeEvent.touches.length;\n      if (touchHistory.numberActiveTouches === 1) {\n        touchHistory.indexOfSingleActiveTouch =\n          nativeEvent.touches[0].identifier;\n      }\n    } else if (isEndish(topLevelType)) {\n      nativeEvent.changedTouches.forEach(recordTouchEnd);\n      touchHistory.numberActiveTouches = nativeEvent.touches.length;\n      if (touchHistory.numberActiveTouches === 1) {\n        for (let i = 0; i < touchBank.length; i++) {\n          const touchTrackToCheck = touchBank[i];\n          if (touchTrackToCheck != null && touchTrackToCheck.touchActive) {\n            touchHistory.indexOfSingleActiveTouch = i;\n            break;\n          }\n        }\n        if (__DEV__) {\n          const activeRecord = touchBank[touchHistory.indexOfSingleActiveTouch];\n          if (activeRecord == null || !activeRecord.touchActive) {\n            console.error('Cannot find single active touch.');\n          }\n        }\n      }\n    }\n  },\n\n  touchHistory,\n};\n\nexport default ResponderTouchHistoryStore;\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport invariant from 'shared/invariant';\nimport isArray from 'shared/isArray';\n\n/**\n * Accumulates items that must not be null or undefined.\n *\n * This is used to conserve memory by avoiding array allocations.\n *\n * @return {*|array<*>} An accumulation of items.\n */\nfunction accumulate<T>(\n  current: ?(T | Array<T>),\n  next: T | Array<T>,\n): T | Array<T> {\n  invariant(\n    next != null,\n    'accumulate(...): Accumulated items must not be null or undefined.',\n  );\n\n  if (current == null) {\n    return next;\n  }\n\n  // Both are not empty. Warning: Never call x.concat(y) when you are not\n  // certain that x is an Array (x could be a string with concat method).\n  if (isArray(current)) {\n    return current.concat(next);\n  }\n\n  if (isArray(next)) {\n    return [current].concat(next);\n  }\n\n  return [current, next];\n}\n\nexport default accumulate;\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport invariant from 'shared/invariant';\nimport isArray from 'shared/isArray';\n\n/**\n * Accumulates items that must not be null or undefined into the first one. This\n * is used to conserve memory by avoiding array allocations, and thus sacrifices\n * API cleanness. Since `current` can be null before being passed in and not\n * null after this function, make sure to assign it back to `current`:\n *\n * `a = accumulateInto(a, b);`\n *\n * This API should be sparingly used. Try `accumulate` for something cleaner.\n *\n * @return {*|array<*>} An accumulation of items.\n */\n\nfunction accumulateInto<T>(\n  current: ?(Array<T> | T),\n  next: T | Array<T>,\n): T | Array<T> {\n  invariant(\n    next != null,\n    'accumulateInto(...): Accumulated items must not be null or undefined.',\n  );\n\n  if (current == null) {\n    return next;\n  }\n\n  // Both are not empty. Warning: Never call x.concat(y) when you are not\n  // certain that x is an Array (x could be a string with concat method).\n  if (isArray(current)) {\n    if (isArray(next)) {\n      current.push.apply(current, next);\n      return current;\n    }\n    current.push(next);\n    return current;\n  }\n\n  if (isArray(next)) {\n    // A bit too dangerous to mutate `next`.\n    return [current].concat(next);\n  }\n\n  return [current, next];\n}\n\nexport default accumulateInto;\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\n/**\n * @param {array} arr an \"accumulation\" of items which is either an Array or\n * a single item. Useful when paired with the `accumulate` module. This is a\n * simple utility that allows us to reason about a collection of items, but\n * handling the case when there is exactly one item (and we do not need to\n * allocate an array).\n * @param {function} cb Callback invoked with each element or a collection.\n * @param {?} [scope] Scope used as `this` in a callback.\n */\nfunction forEachAccumulated<T>(\n  arr: ?(Array<T> | T),\n  cb: (elem: T) => void,\n  scope: ?any,\n) {\n  if (Array.isArray(arr)) {\n    arr.forEach(cb, scope);\n  } else if (arr) {\n    cb.call(scope, arr);\n  }\n}\n\nexport default forEachAccumulated;\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nexport type WorkTag =\n  | 0\n  | 1\n  | 2\n  | 3\n  | 4\n  | 5\n  | 6\n  | 7\n  | 8\n  | 9\n  | 10\n  | 11\n  | 12\n  | 13\n  | 14\n  | 15\n  | 16\n  | 17\n  | 18\n  | 19\n  | 20\n  | 21\n  | 22\n  | 23\n  | 24;\n\nexport const FunctionComponent = 0;\nexport const ClassComponent = 1;\nexport const IndeterminateComponent = 2; // Before we know whether it is function or class\nexport const HostRoot = 3; // Root of a host tree. Could be nested inside another node.\nexport const HostPortal = 4; // A subtree. Could be an entry point to a different renderer.\nexport const HostComponent = 5;\nexport const HostText = 6;\nexport const Fragment = 7;\nexport const Mode = 8;\nexport const ContextConsumer = 9;\nexport const ContextProvider = 10;\nexport const ForwardRef = 11;\nexport const Profiler = 12;\nexport const SuspenseComponent = 13;\nexport const MemoComponent = 14;\nexport const SimpleMemoComponent = 15;\nexport const LazyComponent = 16;\nexport const IncompleteClassComponent = 17;\nexport const DehydratedFragment = 18;\nexport const SuspenseListComponent = 19;\nexport const ScopeComponent = 21;\nexport const OffscreenComponent = 22;\nexport const LegacyHiddenComponent = 23;\nexport const CacheComponent = 24;\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport {\n  executeDirectDispatch,\n  hasDispatches,\n  executeDispatchesInOrderStopAtTrue,\n  getInstanceFromNode,\n  getFiberCurrentPropsFromNode,\n} from './EventPluginUtils';\nimport ResponderSyntheticEvent from './ResponderSyntheticEvent';\nimport ResponderTouchHistoryStore from './ResponderTouchHistoryStore';\nimport accumulate from './accumulate';\nimport {\n  TOP_SCROLL,\n  TOP_SELECTION_CHANGE,\n  TOP_TOUCH_CANCEL,\n  isStartish,\n  isMoveish,\n  isEndish,\n  startDependencies,\n  moveDependencies,\n  endDependencies,\n} from './ResponderTopLevelEventTypes';\nimport accumulateInto from './accumulateInto';\nimport forEachAccumulated from './forEachAccumulated';\nimport {HostComponent} from 'react-reconciler/src/ReactWorkTags';\nimport invariant from 'shared/invariant';\n\n/**\n * Instance of element that should respond to touch/move types of interactions,\n * as indicated explicitly by relevant callbacks.\n */\nlet responderInst = null;\n\n/**\n * Count of current touches. A textInput should become responder iff the\n * selection changes while there is a touch on the screen.\n */\nlet trackedTouchCount = 0;\n\nconst changeResponder = function(nextResponderInst, blockHostResponder) {\n  const oldResponderInst = responderInst;\n  responderInst = nextResponderInst;\n  if (ResponderEventPlugin.GlobalResponderHandler !== null) {\n    ResponderEventPlugin.GlobalResponderHandler.onChange(\n      oldResponderInst,\n      nextResponderInst,\n      blockHostResponder,\n    );\n  }\n};\n\nconst eventTypes = {\n  /**\n   * On a `touchStart`/`mouseDown`, is it desired that this element become the\n   * responder?\n   */\n  startShouldSetResponder: {\n    phasedRegistrationNames: {\n      bubbled: 'onStartShouldSetResponder',\n      captured: 'onStartShouldSetResponderCapture',\n    },\n    dependencies: startDependencies,\n  },\n\n  /**\n   * On a `scroll`, is it desired that this element become the responder? This\n   * is usually not needed, but should be used to retroactively infer that a\n   * `touchStart` had occurred during momentum scroll. During a momentum scroll,\n   * a touch start will be immediately followed by a scroll event if the view is\n   * currently scrolling.\n   *\n   * TODO: This shouldn't bubble.\n   */\n  scrollShouldSetResponder: {\n    phasedRegistrationNames: {\n      bubbled: 'onScrollShouldSetResponder',\n      captured: 'onScrollShouldSetResponderCapture',\n    },\n    dependencies: [TOP_SCROLL],\n  },\n\n  /**\n   * On text selection change, should this element become the responder? This\n   * is needed for text inputs or other views with native selection, so the\n   * JS view can claim the responder.\n   *\n   * TODO: This shouldn't bubble.\n   */\n  selectionChangeShouldSetResponder: {\n    phasedRegistrationNames: {\n      bubbled: 'onSelectionChangeShouldSetResponder',\n      captured: 'onSelectionChangeShouldSetResponderCapture',\n    },\n    dependencies: [TOP_SELECTION_CHANGE],\n  },\n\n  /**\n   * On a `touchMove`/`mouseMove`, is it desired that this element become the\n   * responder?\n   */\n  moveShouldSetResponder: {\n    phasedRegistrationNames: {\n      bubbled: 'onMoveShouldSetResponder',\n      captured: 'onMoveShouldSetResponderCapture',\n    },\n    dependencies: moveDependencies,\n  },\n\n  /**\n   * Direct responder events dispatched directly to responder. Do not bubble.\n   */\n  responderStart: {\n    registrationName: 'onResponderStart',\n    dependencies: startDependencies,\n  },\n  responderMove: {\n    registrationName: 'onResponderMove',\n    dependencies: moveDependencies,\n  },\n  responderEnd: {\n    registrationName: 'onResponderEnd',\n    dependencies: endDependencies,\n  },\n  responderRelease: {\n    registrationName: 'onResponderRelease',\n    dependencies: endDependencies,\n  },\n  responderTerminationRequest: {\n    registrationName: 'onResponderTerminationRequest',\n    dependencies: [],\n  },\n  responderGrant: {\n    registrationName: 'onResponderGrant',\n    dependencies: [],\n  },\n  responderReject: {\n    registrationName: 'onResponderReject',\n    dependencies: [],\n  },\n  responderTerminate: {\n    registrationName: 'onResponderTerminate',\n    dependencies: [],\n  },\n};\n\n// Start of inline: the below functions were inlined from\n// EventPropagator.js, as they deviated from ReactDOM's newer\n// implementations.\n\nfunction getParent(inst) {\n  do {\n    inst = inst.return;\n    // TODO: If this is a HostRoot we might want to bail out.\n    // That is depending on if we want nested subtrees (layers) to bubble\n    // events to their parent. We could also go through parentNode on the\n    // host node but that wouldn't work for React Native and doesn't let us\n    // do the portal feature.\n  } while (inst && inst.tag !== HostComponent);\n  if (inst) {\n    return inst;\n  }\n  return null;\n}\n\n/**\n * Return the lowest common ancestor of A and B, or null if they are in\n * different trees.\n */\nexport function getLowestCommonAncestor(instA, instB) {\n  let depthA = 0;\n  for (let tempA = instA; tempA; tempA = getParent(tempA)) {\n    depthA++;\n  }\n  let depthB = 0;\n  for (let tempB = instB; tempB; tempB = getParent(tempB)) {\n    depthB++;\n  }\n\n  // If A is deeper, crawl up.\n  while (depthA - depthB > 0) {\n    instA = getParent(instA);\n    depthA--;\n  }\n\n  // If B is deeper, crawl up.\n  while (depthB - depthA > 0) {\n    instB = getParent(instB);\n    depthB--;\n  }\n\n  // Walk in lockstep until we find a match.\n  let depth = depthA;\n  while (depth--) {\n    if (instA === instB || instA === instB.alternate) {\n      return instA;\n    }\n    instA = getParent(instA);\n    instB = getParent(instB);\n  }\n  return null;\n}\n\n/**\n * Return if A is an ancestor of B.\n */\nfunction isAncestor(instA, instB) {\n  while (instB) {\n    if (instA === instB || instA === instB.alternate) {\n      return true;\n    }\n    instB = getParent(instB);\n  }\n  return false;\n}\n\n/**\n * Simulates the traversal of a two-phase, capture/bubble event dispatch.\n */\nfunction traverseTwoPhase(inst, fn, arg) {\n  const path = [];\n  while (inst) {\n    path.push(inst);\n    inst = getParent(inst);\n  }\n  let i;\n  for (i = path.length; i-- > 0; ) {\n    fn(path[i], 'captured', arg);\n  }\n  for (i = 0; i < path.length; i++) {\n    fn(path[i], 'bubbled', arg);\n  }\n}\n\nfunction getListener(inst, registrationName) {\n  const stateNode = inst.stateNode;\n  if (stateNode === null) {\n    // Work in progress (ex: onload events in incremental mode).\n    return null;\n  }\n  const props = getFiberCurrentPropsFromNode(stateNode);\n  if (props === null) {\n    // Work in progress.\n    return null;\n  }\n  const listener = props[registrationName];\n  invariant(\n    !listener || typeof listener === 'function',\n    'Expected `%s` listener to be a function, instead got a value of `%s` type.',\n    registrationName,\n    typeof listener,\n  );\n  return listener;\n}\n\nfunction listenerAtPhase(inst, event, propagationPhase: PropagationPhases) {\n  const registrationName =\n    event.dispatchConfig.phasedRegistrationNames[propagationPhase];\n  return getListener(inst, registrationName);\n}\n\nfunction accumulateDirectionalDispatches(inst, phase, event) {\n  if (__DEV__) {\n    if (!inst) {\n      console.error('Dispatching inst must not be null');\n    }\n  }\n  const listener = listenerAtPhase(inst, event, phase);\n  if (listener) {\n    event._dispatchListeners = accumulateInto(\n      event._dispatchListeners,\n      listener,\n    );\n    event._dispatchInstances = accumulateInto(event._dispatchInstances, inst);\n  }\n}\n\n/**\n * Accumulates without regard to direction, does not look for phased\n * registration names. Same as `accumulateDirectDispatchesSingle` but without\n * requiring that the `dispatchMarker` be the same as the dispatched ID.\n */\nfunction accumulateDispatches(\n  inst: Object,\n  ignoredDirection: ?boolean,\n  event: Object,\n): void {\n  if (inst && event && event.dispatchConfig.registrationName) {\n    const registrationName = event.dispatchConfig.registrationName;\n    const listener = getListener(inst, registrationName);\n    if (listener) {\n      event._dispatchListeners = accumulateInto(\n        event._dispatchListeners,\n        listener,\n      );\n      event._dispatchInstances = accumulateInto(event._dispatchInstances, inst);\n    }\n  }\n}\n\n/**\n * Accumulates dispatches on an `SyntheticEvent`, but only for the\n * `dispatchMarker`.\n * @param {SyntheticEvent} event\n */\nfunction accumulateDirectDispatchesSingle(event: Object) {\n  if (event && event.dispatchConfig.registrationName) {\n    accumulateDispatches(event._targetInst, null, event);\n  }\n}\n\nfunction accumulateDirectDispatches(events: ?(Array<Object> | Object)) {\n  forEachAccumulated(events, accumulateDirectDispatchesSingle);\n}\n\nfunction accumulateTwoPhaseDispatchesSingleSkipTarget(event) {\n  if (event && event.dispatchConfig.phasedRegistrationNames) {\n    const targetInst = event._targetInst;\n    const parentInst = targetInst ? getParent(targetInst) : null;\n    traverseTwoPhase(parentInst, accumulateDirectionalDispatches, event);\n  }\n}\n\nfunction accumulateTwoPhaseDispatchesSkipTarget(events) {\n  forEachAccumulated(events, accumulateTwoPhaseDispatchesSingleSkipTarget);\n}\n\nfunction accumulateTwoPhaseDispatchesSingle(event) {\n  if (event && event.dispatchConfig.phasedRegistrationNames) {\n    traverseTwoPhase(event._targetInst, accumulateDirectionalDispatches, event);\n  }\n}\n\nfunction accumulateTwoPhaseDispatches(events) {\n  forEachAccumulated(events, accumulateTwoPhaseDispatchesSingle);\n}\n// End of inline\n\n/**\n *\n * Responder System:\n * ----------------\n *\n * - A global, solitary \"interaction lock\" on a view.\n * - If a node becomes the responder, it should convey visual feedback\n *   immediately to indicate so, either by highlighting or moving accordingly.\n * - To be the responder means, that touches are exclusively important to that\n *   responder view, and no other view.\n * - While touches are still occurring, the responder lock can be transferred to\n *   a new view, but only to increasingly \"higher\" views (meaning ancestors of\n *   the current responder).\n *\n * Responder being granted:\n * ------------------------\n *\n * - Touch starts, moves, and scrolls can cause an ID to become the responder.\n * - We capture/bubble `startShouldSetResponder`/`moveShouldSetResponder` to\n *   the \"appropriate place\".\n * - If nothing is currently the responder, the \"appropriate place\" is the\n *   initiating event's `targetID`.\n * - If something *is* already the responder, the \"appropriate place\" is the\n *   first common ancestor of the event target and the current `responderInst`.\n * - Some negotiation happens: See the timing diagram below.\n * - Scrolled views automatically become responder. The reasoning is that a\n *   platform scroll view that isn't built on top of the responder system has\n *   began scrolling, and the active responder must now be notified that the\n *   interaction is no longer locked to it - the system has taken over.\n *\n * - Responder being released:\n *   As soon as no more touches that *started* inside of descendants of the\n *   *current* responderInst, an `onResponderRelease` event is dispatched to the\n *   current responder, and the responder lock is released.\n *\n * TODO:\n * - on \"end\", a callback hook for `onResponderEndShouldRemainResponder` that\n *   determines if the responder lock should remain.\n * - If a view shouldn't \"remain\" the responder, any active touches should by\n *   default be considered \"dead\" and do not influence future negotiations or\n *   bubble paths. It should be as if those touches do not exist.\n * -- For multitouch: Usually a translate-z will choose to \"remain\" responder\n *  after one out of many touches ended. For translate-y, usually the view\n *  doesn't wish to \"remain\" responder after one of many touches end.\n * - Consider building this on top of a `stopPropagation` model similar to\n *   `W3C` events.\n * - Ensure that `onResponderTerminate` is called on touch cancels, whether or\n *   not `onResponderTerminationRequest` returns `true` or `false`.\n *\n */\n\n/*                                             Negotiation Performed\n                                             +-----------------------+\n                                            /                         \\\nProcess low level events to    +     Current Responder      +   wantsResponderID\ndetermine who to perform negot-|   (if any exists at all)   |\niation/transition              | Otherwise just pass through|\n-------------------------------+----------------------------+------------------+\nBubble to find first ID        |                            |\nto return true:wantsResponderID|                            |\n                               |                            |\n     +-------------+           |                            |\n     | onTouchStart|           |                            |\n     +------+------+     none  |                            |\n            |            return|                            |\n+-----------v-------------+true| +------------------------+ |\n|onStartShouldSetResponder|----->|onResponderStart (cur)  |<-----------+\n+-----------+-------------+    | +------------------------+ |          |\n            |                  |                            | +--------+-------+\n            | returned true for|       false:REJECT +-------->|onResponderReject\n            | wantsResponderID |                    |       | +----------------+\n            | (now attempt     | +------------------+-----+ |\n            |  handoff)        | |   onResponder          | |\n            +------------------->|      TerminationRequest| |\n                               | +------------------+-----+ |\n                               |                    |       | +----------------+\n                               |         true:GRANT +-------->|onResponderGrant|\n                               |                            | +--------+-------+\n                               | +------------------------+ |          |\n                               | |   onResponderTerminate |<-----------+\n                               | +------------------+-----+ |\n                               |                    |       | +----------------+\n                               |                    +-------->|onResponderStart|\n                               |                            | +----------------+\nBubble to find first ID        |                            |\nto return true:wantsResponderID|                            |\n                               |                            |\n     +-------------+           |                            |\n     | onTouchMove |           |                            |\n     +------+------+     none  |                            |\n            |            return|                            |\n+-----------v-------------+true| +------------------------+ |\n|onMoveShouldSetResponder |----->|onResponderMove (cur)   |<-----------+\n+-----------+-------------+    | +------------------------+ |          |\n            |                  |                            | +--------+-------+\n            | returned true for|       false:REJECT +-------->|onResponderRejec|\n            | wantsResponderID |                    |       | +----------------+\n            | (now attempt     | +------------------+-----+ |\n            |  handoff)        | |   onResponder          | |\n            +------------------->|      TerminationRequest| |\n                               | +------------------+-----+ |\n                               |                    |       | +----------------+\n                               |         true:GRANT +-------->|onResponderGrant|\n                               |                            | +--------+-------+\n                               | +------------------------+ |          |\n                               | |   onResponderTerminate |<-----------+\n                               | +------------------+-----+ |\n                               |                    |       | +----------------+\n                               |                    +-------->|onResponderMove |\n                               |                            | +----------------+\n                               |                            |\n                               |                            |\n      Some active touch started|                            |\n      inside current responder | +------------------------+ |\n      +------------------------->|      onResponderEnd    | |\n      |                        | +------------------------+ |\n  +---+---------+              |                            |\n  | onTouchEnd  |              |                            |\n  +---+---------+              |                            |\n      |                        | +------------------------+ |\n      +------------------------->|     onResponderEnd     | |\n      No active touches started| +-----------+------------+ |\n      inside current responder |             |              |\n                               |             v              |\n                               | +------------------------+ |\n                               | |    onResponderRelease  | |\n                               | +------------------------+ |\n                               |                            |\n                               +                            + */\n\n/**\n * A note about event ordering in the `EventPluginRegistry`.\n *\n * Suppose plugins are injected in the following order:\n *\n * `[R, S, C]`\n *\n * To help illustrate the example, assume `S` is `SimpleEventPlugin` (for\n * `onClick` etc) and `R` is `ResponderEventPlugin`.\n *\n * \"Deferred-Dispatched Events\":\n *\n * - The current event plugin system will traverse the list of injected plugins,\n *   in order, and extract events by collecting the plugin's return value of\n *   `extractEvents()`.\n * - These events that are returned from `extractEvents` are \"deferred\n *   dispatched events\".\n * - When returned from `extractEvents`, deferred-dispatched events contain an\n *   \"accumulation\" of deferred dispatches.\n * - These deferred dispatches are accumulated/collected before they are\n *   returned, but processed at a later time by the `EventPluginRegistry` (hence the\n *   name deferred).\n *\n * In the process of returning their deferred-dispatched events, event plugins\n * themselves can dispatch events on-demand without returning them from\n * `extractEvents`. Plugins might want to do this, so that they can use event\n * dispatching as a tool that helps them decide which events should be extracted\n * in the first place.\n *\n * \"On-Demand-Dispatched Events\":\n *\n * - On-demand-dispatched events are not returned from `extractEvents`.\n * - On-demand-dispatched events are dispatched during the process of returning\n *   the deferred-dispatched events.\n * - They should not have side effects.\n * - They should be avoided, and/or eventually be replaced with another\n *   abstraction that allows event plugins to perform multiple \"rounds\" of event\n *   extraction.\n *\n * Therefore, the sequence of event dispatches becomes:\n *\n * - `R`s on-demand events (if any)   (dispatched by `R` on-demand)\n * - `S`s on-demand events (if any)   (dispatched by `S` on-demand)\n * - `C`s on-demand events (if any)   (dispatched by `C` on-demand)\n * - `R`s extracted events (if any)   (dispatched by `EventPluginRegistry`)\n * - `S`s extracted events (if any)   (dispatched by `EventPluginRegistry`)\n * - `C`s extracted events (if any)   (dispatched by `EventPluginRegistry`)\n *\n * In the case of `ResponderEventPlugin`: If the `startShouldSetResponder`\n * on-demand dispatch returns `true` (and some other details are satisfied) the\n * `onResponderGrant` deferred dispatched event is returned from\n * `extractEvents`. The sequence of dispatch executions in this case\n * will appear as follows:\n *\n * - `startShouldSetResponder` (`ResponderEventPlugin` dispatches on-demand)\n * - `touchStartCapture`       (`EventPluginRegistry` dispatches as usual)\n * - `touchStart`              (`EventPluginRegistry` dispatches as usual)\n * - `responderGrant/Reject`   (`EventPluginRegistry` dispatches as usual)\n */\n\nfunction setResponderAndExtractTransfer(\n  topLevelType,\n  targetInst,\n  nativeEvent,\n  nativeEventTarget,\n) {\n  const shouldSetEventType = isStartish(topLevelType)\n    ? eventTypes.startShouldSetResponder\n    : isMoveish(topLevelType)\n    ? eventTypes.moveShouldSetResponder\n    : topLevelType === TOP_SELECTION_CHANGE\n    ? eventTypes.selectionChangeShouldSetResponder\n    : eventTypes.scrollShouldSetResponder;\n\n  // TODO: stop one short of the current responder.\n  const bubbleShouldSetFrom = !responderInst\n    ? targetInst\n    : getLowestCommonAncestor(responderInst, targetInst);\n\n  // When capturing/bubbling the \"shouldSet\" event, we want to skip the target\n  // (deepest ID) if it happens to be the current responder. The reasoning:\n  // It's strange to get an `onMoveShouldSetResponder` when you're *already*\n  // the responder.\n  const skipOverBubbleShouldSetFrom = bubbleShouldSetFrom === responderInst;\n  const shouldSetEvent = ResponderSyntheticEvent.getPooled(\n    shouldSetEventType,\n    bubbleShouldSetFrom,\n    nativeEvent,\n    nativeEventTarget,\n  );\n  shouldSetEvent.touchHistory = ResponderTouchHistoryStore.touchHistory;\n  if (skipOverBubbleShouldSetFrom) {\n    accumulateTwoPhaseDispatchesSkipTarget(shouldSetEvent);\n  } else {\n    accumulateTwoPhaseDispatches(shouldSetEvent);\n  }\n  const wantsResponderInst = executeDispatchesInOrderStopAtTrue(shouldSetEvent);\n  if (!shouldSetEvent.isPersistent()) {\n    shouldSetEvent.constructor.release(shouldSetEvent);\n  }\n\n  if (!wantsResponderInst || wantsResponderInst === responderInst) {\n    return null;\n  }\n  let extracted;\n  const grantEvent = ResponderSyntheticEvent.getPooled(\n    eventTypes.responderGrant,\n    wantsResponderInst,\n    nativeEvent,\n    nativeEventTarget,\n  );\n  grantEvent.touchHistory = ResponderTouchHistoryStore.touchHistory;\n\n  accumulateDirectDispatches(grantEvent);\n  const blockHostResponder = executeDirectDispatch(grantEvent) === true;\n  if (responderInst) {\n    const terminationRequestEvent = ResponderSyntheticEvent.getPooled(\n      eventTypes.responderTerminationRequest,\n      responderInst,\n      nativeEvent,\n      nativeEventTarget,\n    );\n    terminationRequestEvent.touchHistory =\n      ResponderTouchHistoryStore.touchHistory;\n    accumulateDirectDispatches(terminationRequestEvent);\n    const shouldSwitch =\n      !hasDispatches(terminationRequestEvent) ||\n      executeDirectDispatch(terminationRequestEvent);\n    if (!terminationRequestEvent.isPersistent()) {\n      terminationRequestEvent.constructor.release(terminationRequestEvent);\n    }\n\n    if (shouldSwitch) {\n      const terminateEvent = ResponderSyntheticEvent.getPooled(\n        eventTypes.responderTerminate,\n        responderInst,\n        nativeEvent,\n        nativeEventTarget,\n      );\n      terminateEvent.touchHistory = ResponderTouchHistoryStore.touchHistory;\n      accumulateDirectDispatches(terminateEvent);\n      extracted = accumulate(extracted, [grantEvent, terminateEvent]);\n      changeResponder(wantsResponderInst, blockHostResponder);\n    } else {\n      const rejectEvent = ResponderSyntheticEvent.getPooled(\n        eventTypes.responderReject,\n        wantsResponderInst,\n        nativeEvent,\n        nativeEventTarget,\n      );\n      rejectEvent.touchHistory = ResponderTouchHistoryStore.touchHistory;\n      accumulateDirectDispatches(rejectEvent);\n      extracted = accumulate(extracted, rejectEvent);\n    }\n  } else {\n    extracted = accumulate(extracted, grantEvent);\n    changeResponder(wantsResponderInst, blockHostResponder);\n  }\n  return extracted;\n}\n\n/**\n * A transfer is a negotiation between a currently set responder and the next\n * element to claim responder status. Any start event could trigger a transfer\n * of responderInst. Any move event could trigger a transfer.\n *\n * @param {string} topLevelType Record from `BrowserEventConstants`.\n * @return {boolean} True if a transfer of responder could possibly occur.\n */\nfunction canTriggerTransfer(topLevelType, topLevelInst, nativeEvent) {\n  return (\n    topLevelInst &&\n    // responderIgnoreScroll: We are trying to migrate away from specifically\n    // tracking native scroll events here and responderIgnoreScroll indicates we\n    // will send topTouchCancel to handle canceling touch events instead\n    ((topLevelType === TOP_SCROLL && !nativeEvent.responderIgnoreScroll) ||\n      (trackedTouchCount > 0 && topLevelType === TOP_SELECTION_CHANGE) ||\n      isStartish(topLevelType) ||\n      isMoveish(topLevelType))\n  );\n}\n\n/**\n * Returns whether or not this touch end event makes it such that there are no\n * longer any touches that started inside of the current `responderInst`.\n *\n * @param {NativeEvent} nativeEvent Native touch end event.\n * @return {boolean} Whether or not this touch end event ends the responder.\n */\nfunction noResponderTouches(nativeEvent) {\n  const touches = nativeEvent.touches;\n  if (!touches || touches.length === 0) {\n    return true;\n  }\n  for (let i = 0; i < touches.length; i++) {\n    const activeTouch = touches[i];\n    const target = activeTouch.target;\n    if (target !== null && target !== undefined && target !== 0) {\n      // Is the original touch location inside of the current responder?\n      const targetInst = getInstanceFromNode(target);\n      if (isAncestor(responderInst, targetInst)) {\n        return false;\n      }\n    }\n  }\n  return true;\n}\n\nconst ResponderEventPlugin = {\n  /* For unit testing only */\n  _getResponder: function() {\n    return responderInst;\n  },\n\n  eventTypes: eventTypes,\n\n  /**\n   * We must be resilient to `targetInst` being `null` on `touchMove` or\n   * `touchEnd`. On certain platforms, this means that a native scroll has\n   * assumed control and the original touch targets are destroyed.\n   */\n  extractEvents: function(\n    topLevelType,\n    targetInst,\n    nativeEvent,\n    nativeEventTarget,\n    eventSystemFlags,\n  ) {\n    if (isStartish(topLevelType)) {\n      trackedTouchCount += 1;\n    } else if (isEndish(topLevelType)) {\n      if (trackedTouchCount >= 0) {\n        trackedTouchCount -= 1;\n      } else {\n        if (__DEV__) {\n          console.warn(\n            'Ended a touch event which was not counted in `trackedTouchCount`.',\n          );\n        }\n        return null;\n      }\n    }\n\n    ResponderTouchHistoryStore.recordTouchTrack(topLevelType, nativeEvent);\n\n    let extracted = canTriggerTransfer(topLevelType, targetInst, nativeEvent)\n      ? setResponderAndExtractTransfer(\n          topLevelType,\n          targetInst,\n          nativeEvent,\n          nativeEventTarget,\n        )\n      : null;\n    // Responder may or may not have transferred on a new touch start/move.\n    // Regardless, whoever is the responder after any potential transfer, we\n    // direct all touch start/move/ends to them in the form of\n    // `onResponderMove/Start/End`. These will be called for *every* additional\n    // finger that move/start/end, dispatched directly to whoever is the\n    // current responder at that moment, until the responder is \"released\".\n    //\n    // These multiple individual change touch events are are always bookended\n    // by `onResponderGrant`, and one of\n    // (`onResponderRelease/onResponderTerminate`).\n    const isResponderTouchStart = responderInst && isStartish(topLevelType);\n    const isResponderTouchMove = responderInst && isMoveish(topLevelType);\n    const isResponderTouchEnd = responderInst && isEndish(topLevelType);\n    const incrementalTouch = isResponderTouchStart\n      ? eventTypes.responderStart\n      : isResponderTouchMove\n      ? eventTypes.responderMove\n      : isResponderTouchEnd\n      ? eventTypes.responderEnd\n      : null;\n\n    if (incrementalTouch) {\n      const gesture = ResponderSyntheticEvent.getPooled(\n        incrementalTouch,\n        responderInst,\n        nativeEvent,\n        nativeEventTarget,\n      );\n      gesture.touchHistory = ResponderTouchHistoryStore.touchHistory;\n      accumulateDirectDispatches(gesture);\n      extracted = accumulate(extracted, gesture);\n    }\n\n    const isResponderTerminate =\n      responderInst && topLevelType === TOP_TOUCH_CANCEL;\n    const isResponderRelease =\n      responderInst &&\n      !isResponderTerminate &&\n      isEndish(topLevelType) &&\n      noResponderTouches(nativeEvent);\n    const finalTouch = isResponderTerminate\n      ? eventTypes.responderTerminate\n      : isResponderRelease\n      ? eventTypes.responderRelease\n      : null;\n    if (finalTouch) {\n      const finalEvent = ResponderSyntheticEvent.getPooled(\n        finalTouch,\n        responderInst,\n        nativeEvent,\n        nativeEventTarget,\n      );\n      finalEvent.touchHistory = ResponderTouchHistoryStore.touchHistory;\n      accumulateDirectDispatches(finalEvent);\n      extracted = accumulate(extracted, finalEvent);\n      changeResponder(null);\n    }\n\n    return extracted;\n  },\n\n  GlobalResponderHandler: null,\n\n  injection: {\n    /**\n     * @param {{onChange: (ReactID, ReactID) => void} GlobalResponderHandler\n     * Object that handles any change in responder. Use this to inject\n     * integration with an existing touch handling system etc.\n     */\n    injectGlobalResponderHandler(GlobalResponderHandler) {\n      ResponderEventPlugin.GlobalResponderHandler = GlobalResponderHandler;\n    },\n  },\n};\n\nexport default ResponderEventPlugin;\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {DispatchConfig} from './ReactSyntheticEventType';\nimport type {\n  AnyNativeEvent,\n  PluginName,\n  LegacyPluginModule,\n} from './PluginModuleType';\n\nimport invariant from 'shared/invariant';\n\ntype NamesToPlugins = {\n  [key: PluginName]: LegacyPluginModule<AnyNativeEvent>,\n  ...,\n};\ntype EventPluginOrder = null | Array<PluginName>;\n\n/**\n * Injectable ordering of event plugins.\n */\nlet eventPluginOrder: EventPluginOrder = null;\n\n/**\n * Injectable mapping from names to event plugin modules.\n */\nconst namesToPlugins: NamesToPlugins = {};\n\n/**\n * Recomputes the plugin list using the injected plugins and plugin ordering.\n *\n * @private\n */\nfunction recomputePluginOrdering(): void {\n  if (!eventPluginOrder) {\n    // Wait until an `eventPluginOrder` is injected.\n    return;\n  }\n  for (const pluginName in namesToPlugins) {\n    const pluginModule = namesToPlugins[pluginName];\n    const pluginIndex = eventPluginOrder.indexOf(pluginName);\n    invariant(\n      pluginIndex > -1,\n      'EventPluginRegistry: Cannot inject event plugins that do not exist in ' +\n        'the plugin ordering, `%s`.',\n      pluginName,\n    );\n    if (plugins[pluginIndex]) {\n      continue;\n    }\n    invariant(\n      pluginModule.extractEvents,\n      'EventPluginRegistry: Event plugins must implement an `extractEvents` ' +\n        'method, but `%s` does not.',\n      pluginName,\n    );\n    plugins[pluginIndex] = pluginModule;\n    const publishedEvents = pluginModule.eventTypes;\n    for (const eventName in publishedEvents) {\n      invariant(\n        publishEventForPlugin(\n          publishedEvents[eventName],\n          pluginModule,\n          eventName,\n        ),\n        'EventPluginRegistry: Failed to publish event `%s` for plugin `%s`.',\n        eventName,\n        pluginName,\n      );\n    }\n  }\n}\n\n/**\n * Publishes an event so that it can be dispatched by the supplied plugin.\n *\n * @param {object} dispatchConfig Dispatch configuration for the event.\n * @param {object} PluginModule Plugin publishing the event.\n * @return {boolean} True if the event was successfully published.\n * @private\n */\nfunction publishEventForPlugin(\n  dispatchConfig: DispatchConfig,\n  pluginModule: LegacyPluginModule<AnyNativeEvent>,\n  eventName: string,\n): boolean {\n  invariant(\n    !eventNameDispatchConfigs.hasOwnProperty(eventName),\n    'EventPluginRegistry: More than one plugin attempted to publish the same ' +\n      'event name, `%s`.',\n    eventName,\n  );\n  eventNameDispatchConfigs[eventName] = dispatchConfig;\n\n  const phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;\n  if (phasedRegistrationNames) {\n    for (const phaseName in phasedRegistrationNames) {\n      if (phasedRegistrationNames.hasOwnProperty(phaseName)) {\n        const phasedRegistrationName = phasedRegistrationNames[phaseName];\n        publishRegistrationName(\n          phasedRegistrationName,\n          pluginModule,\n          eventName,\n        );\n      }\n    }\n    return true;\n  } else if (dispatchConfig.registrationName) {\n    publishRegistrationName(\n      dispatchConfig.registrationName,\n      pluginModule,\n      eventName,\n    );\n    return true;\n  }\n  return false;\n}\n\n/**\n * Publishes a registration name that is used to identify dispatched events.\n *\n * @param {string} registrationName Registration name to add.\n * @param {object} PluginModule Plugin publishing the event.\n * @private\n */\nfunction publishRegistrationName(\n  registrationName: string,\n  pluginModule: LegacyPluginModule<AnyNativeEvent>,\n  eventName: string,\n): void {\n  invariant(\n    !registrationNameModules[registrationName],\n    'EventPluginRegistry: More than one plugin attempted to publish the same ' +\n      'registration name, `%s`.',\n    registrationName,\n  );\n  registrationNameModules[registrationName] = pluginModule;\n  registrationNameDependencies[registrationName] =\n    pluginModule.eventTypes[eventName].dependencies;\n\n  if (__DEV__) {\n    const lowerCasedName = registrationName.toLowerCase();\n    possibleRegistrationNames[lowerCasedName] = registrationName;\n\n    if (registrationName === 'onDoubleClick') {\n      possibleRegistrationNames.ondblclick = registrationName;\n    }\n  }\n}\n\n/**\n * Registers plugins so that they can extract and dispatch events.\n */\n\n/**\n * Ordered list of injected plugins.\n */\nexport const plugins = [];\n\n/**\n * Mapping from event name to dispatch config\n */\nexport const eventNameDispatchConfigs = {};\n\n/**\n * Mapping from registration name to plugin module\n */\nexport const registrationNameModules = {};\n\n/**\n * Mapping from registration name to event name\n */\nexport const registrationNameDependencies = {};\n\n/**\n * Mapping from lowercase registration names to the properly cased version,\n * used to warn in the case of missing event handlers. Available\n * only in __DEV__.\n * @type {Object}\n */\nexport const possibleRegistrationNames = __DEV__ ? {} : (null: any);\n// Trust the developer to only use possibleRegistrationNames in __DEV__\n\n/**\n * Injects an ordering of plugins (by plugin name). This allows the ordering\n * to be decoupled from injection of the actual plugins so that ordering is\n * always deterministic regardless of packaging, on-the-fly injection, etc.\n *\n * @param {array} InjectedEventPluginOrder\n * @internal\n */\nexport function injectEventPluginOrder(\n  injectedEventPluginOrder: EventPluginOrder,\n): void {\n  invariant(\n    !eventPluginOrder,\n    'EventPluginRegistry: Cannot inject event plugin ordering more than ' +\n      'once. You are likely trying to load more than one copy of React.',\n  );\n  // Clone the ordering so it cannot be dynamically mutated.\n  eventPluginOrder = Array.prototype.slice.call(injectedEventPluginOrder);\n  recomputePluginOrdering();\n}\n\n/**\n * Injects plugins to be used by plugin event system. The plugin names must be\n * in the ordering injected by `injectEventPluginOrder`.\n *\n * Plugins can be injected as part of page initialization or on-the-fly.\n *\n * @param {object} injectedNamesToPlugins Map from names to plugin modules.\n * @internal\n */\nexport function injectEventPluginsByName(\n  injectedNamesToPlugins: NamesToPlugins,\n): void {\n  let isOrderingDirty = false;\n  for (const pluginName in injectedNamesToPlugins) {\n    if (!injectedNamesToPlugins.hasOwnProperty(pluginName)) {\n      continue;\n    }\n    const pluginModule = injectedNamesToPlugins[pluginName];\n    if (\n      !namesToPlugins.hasOwnProperty(pluginName) ||\n      namesToPlugins[pluginName] !== pluginModule\n    ) {\n      invariant(\n        !namesToPlugins[pluginName],\n        'EventPluginRegistry: Cannot inject two different event plugins ' +\n          'using the same name, `%s`.',\n        pluginName,\n      );\n      namesToPlugins[pluginName] = pluginModule;\n      isOrderingDirty = true;\n    }\n  }\n  if (isOrderingDirty) {\n    recomputePluginOrdering();\n  }\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n * @flow\n */\n\nimport type {Fiber} from 'react-reconciler/src/ReactInternalTypes';\n\nimport invariant from 'shared/invariant';\nimport {getFiberCurrentPropsFromNode} from './legacy-events/EventPluginUtils';\n\nexport default function getListener(\n  inst: Fiber,\n  registrationName: string,\n): Function | null {\n  const stateNode = inst.stateNode;\n  if (stateNode === null) {\n    // Work in progress (ex: onload events in incremental mode).\n    return null;\n  }\n  const props = getFiberCurrentPropsFromNode(stateNode);\n  if (props === null) {\n    // Work in progress.\n    return null;\n  }\n  const listener = props[registrationName];\n  invariant(\n    !listener || typeof listener === 'function',\n    'Expected `%s` listener to be a function, instead got a value of `%s` type.',\n    registrationName,\n    typeof listener,\n  );\n  return listener;\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {AnyNativeEvent} from './legacy-events/PluginModuleType';\nimport type {TopLevelType} from './legacy-events/TopLevelEventTypes';\nimport SyntheticEvent from './legacy-events/SyntheticEvent';\nimport invariant from 'shared/invariant';\n\n// Module provided by RN:\nimport {ReactNativeViewConfigRegistry} from 'react-native/Libraries/ReactPrivate/ReactNativePrivateInterface';\nimport accumulateInto from './legacy-events/accumulateInto';\nimport getListener from './ReactNativeGetListener';\nimport forEachAccumulated from './legacy-events/forEachAccumulated';\nimport {HostComponent} from 'react-reconciler/src/ReactWorkTags';\n\nconst {\n  customBubblingEventTypes,\n  customDirectEventTypes,\n} = ReactNativeViewConfigRegistry;\n\n// Start of inline: the below functions were inlined from\n// EventPropagator.js, as they deviated from ReactDOM's newer\n// implementations.\nfunction listenerAtPhase(inst, event, propagationPhase: PropagationPhases) {\n  const registrationName =\n    event.dispatchConfig.phasedRegistrationNames[propagationPhase];\n  return getListener(inst, registrationName);\n}\n\nfunction accumulateDirectionalDispatches(inst, phase, event) {\n  if (__DEV__) {\n    if (!inst) {\n      console.error('Dispatching inst must not be null');\n    }\n  }\n  const listener = listenerAtPhase(inst, event, phase);\n  if (listener) {\n    event._dispatchListeners = accumulateInto(\n      event._dispatchListeners,\n      listener,\n    );\n    event._dispatchInstances = accumulateInto(event._dispatchInstances, inst);\n  }\n}\n\nfunction getParent(inst) {\n  do {\n    inst = inst.return;\n    // TODO: If this is a HostRoot we might want to bail out.\n    // That is depending on if we want nested subtrees (layers) to bubble\n    // events to their parent. We could also go through parentNode on the\n    // host node but that wouldn't work for React Native and doesn't let us\n    // do the portal feature.\n  } while (inst && inst.tag !== HostComponent);\n  if (inst) {\n    return inst;\n  }\n  return null;\n}\n\n/**\n * Simulates the traversal of a two-phase, capture/bubble event dispatch.\n */\nexport function traverseTwoPhase(inst: Object, fn: Function, arg: Function) {\n  const path = [];\n  while (inst) {\n    path.push(inst);\n    inst = getParent(inst);\n  }\n  let i;\n  for (i = path.length; i-- > 0; ) {\n    fn(path[i], 'captured', arg);\n  }\n  for (i = 0; i < path.length; i++) {\n    fn(path[i], 'bubbled', arg);\n  }\n}\n\nfunction accumulateTwoPhaseDispatchesSingle(event) {\n  if (event && event.dispatchConfig.phasedRegistrationNames) {\n    traverseTwoPhase(event._targetInst, accumulateDirectionalDispatches, event);\n  }\n}\n\nfunction accumulateTwoPhaseDispatches(events) {\n  forEachAccumulated(events, accumulateTwoPhaseDispatchesSingle);\n}\n\n/**\n * Accumulates without regard to direction, does not look for phased\n * registration names. Same as `accumulateDirectDispatchesSingle` but without\n * requiring that the `dispatchMarker` be the same as the dispatched ID.\n */\nfunction accumulateDispatches(\n  inst: Object,\n  ignoredDirection: ?boolean,\n  event: Object,\n): void {\n  if (inst && event && event.dispatchConfig.registrationName) {\n    const registrationName = event.dispatchConfig.registrationName;\n    const listener = getListener(inst, registrationName);\n    if (listener) {\n      event._dispatchListeners = accumulateInto(\n        event._dispatchListeners,\n        listener,\n      );\n      event._dispatchInstances = accumulateInto(event._dispatchInstances, inst);\n    }\n  }\n}\n\n/**\n * Accumulates dispatches on an `SyntheticEvent`, but only for the\n * `dispatchMarker`.\n * @param {SyntheticEvent} event\n */\nfunction accumulateDirectDispatchesSingle(event: Object) {\n  if (event && event.dispatchConfig.registrationName) {\n    accumulateDispatches(event._targetInst, null, event);\n  }\n}\n\nfunction accumulateDirectDispatches(events: ?(Array<Object> | Object)) {\n  forEachAccumulated(events, accumulateDirectDispatchesSingle);\n}\n\n// End of inline\ntype PropagationPhases = 'bubbled' | 'captured';\n\nconst ReactNativeBridgeEventPlugin = {\n  eventTypes: {},\n\n  extractEvents: function(\n    topLevelType: TopLevelType,\n    targetInst: null | Object,\n    nativeEvent: AnyNativeEvent,\n    nativeEventTarget: null | Object,\n  ): ?Object {\n    if (targetInst == null) {\n      // Probably a node belonging to another renderer's tree.\n      return null;\n    }\n    const bubbleDispatchConfig = customBubblingEventTypes[topLevelType];\n    const directDispatchConfig = customDirectEventTypes[topLevelType];\n    invariant(\n      bubbleDispatchConfig || directDispatchConfig,\n      'Unsupported top level event type \"%s\" dispatched',\n      topLevelType,\n    );\n    const event = SyntheticEvent.getPooled(\n      bubbleDispatchConfig || directDispatchConfig,\n      targetInst,\n      nativeEvent,\n      nativeEventTarget,\n    );\n    if (bubbleDispatchConfig) {\n      accumulateTwoPhaseDispatches(event);\n    } else if (directDispatchConfig) {\n      accumulateDirectDispatches(event);\n    } else {\n      return null;\n    }\n    return event;\n  },\n};\n\nexport default ReactNativeBridgeEventPlugin;\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nconst ReactNativeEventPluginOrder = [\n  'ResponderEventPlugin',\n  'ReactNativeBridgeEventPlugin',\n];\n\nexport default ReactNativeEventPluginOrder;\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\n/**\n * Make sure essential globals are available and are patched correctly. Please don't remove this\n * line. Bundles created by react-packager `require` it before executing any application code. This\n * ensures it exists in the dependency graph and can be `require`d.\n * TODO: require this in packager, not in React #10932517\n */\n// Module provided by RN:\nimport 'react-native/Libraries/ReactPrivate/ReactNativePrivateInitializeCore';\n\nimport ResponderEventPlugin from './legacy-events/ResponderEventPlugin';\nimport {\n  injectEventPluginOrder,\n  injectEventPluginsByName,\n} from './legacy-events/EventPluginRegistry';\n\nimport ReactNativeBridgeEventPlugin from './ReactNativeBridgeEventPlugin';\nimport ReactNativeEventPluginOrder from './ReactNativeEventPluginOrder';\n\n/**\n * Inject module for resolving DOM hierarchy and plugin ordering.\n */\ninjectEventPluginOrder(ReactNativeEventPluginOrder);\n\n/**\n * Some important event plugins included by default (without having to require\n * them).\n */\ninjectEventPluginsByName({\n  ResponderEventPlugin: ResponderEventPlugin,\n  ReactNativeBridgeEventPlugin: ReactNativeBridgeEventPlugin,\n});\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport invariant from 'shared/invariant';\n\nconst instanceCache = new Map();\nconst instanceProps = new Map();\n\nexport function precacheFiberNode(hostInst, tag) {\n  instanceCache.set(tag, hostInst);\n}\n\nexport function uncacheFiberNode(tag) {\n  instanceCache.delete(tag);\n  instanceProps.delete(tag);\n}\n\nfunction getInstanceFromTag(tag) {\n  return instanceCache.get(tag) || null;\n}\n\nfunction getTagFromInstance(inst) {\n  let nativeInstance = inst.stateNode;\n  let tag = nativeInstance._nativeTag;\n  if (tag === undefined) {\n    nativeInstance = nativeInstance.canonical;\n    tag = nativeInstance._nativeTag;\n  }\n  invariant(tag, 'All native instances should have a tag.');\n  return nativeInstance;\n}\n\nexport {\n  getInstanceFromTag as getClosestInstanceFromNode,\n  getInstanceFromTag as getInstanceFromNode,\n  getTagFromInstance as getNodeFromInstance,\n};\n\nexport function getFiberCurrentPropsFromNode(stateNode) {\n  return instanceProps.get(stateNode._nativeTag) || null;\n}\n\nexport function updateFiberProps(tag, props) {\n  instanceProps.set(tag, props);\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n// Used as a way to call batchedUpdates when we don't have a reference to\n// the renderer. Such as when we're dispatching events or if third party\n// libraries need to call batchedUpdates. Eventually, this API will go away when\n// everything is batched by default. We'll then have a similar API to opt-out of\n// scheduled work and instead do synchronous work.\n\n// Defaults\nlet batchedUpdatesImpl = function(fn, bookkeeping) {\n  return fn(bookkeeping);\n};\nlet discreteUpdatesImpl = function(fn, a, b, c, d) {\n  return fn(a, b, c, d);\n};\n\nlet isInsideEventHandler = false;\n\nexport function batchedUpdates(fn, bookkeeping) {\n  if (isInsideEventHandler) {\n    // If we are currently inside another batch, we need to wait until it\n    // fully completes before restoring state.\n    return fn(bookkeeping);\n  }\n  isInsideEventHandler = true;\n  try {\n    return batchedUpdatesImpl(fn, bookkeeping);\n  } finally {\n    isInsideEventHandler = false;\n  }\n}\n\nexport function discreteUpdates(fn, a, b, c, d) {\n  const prevIsInsideEventHandler = isInsideEventHandler;\n  isInsideEventHandler = true;\n  try {\n    return discreteUpdatesImpl(fn, a, b, c, d);\n  } finally {\n    isInsideEventHandler = prevIsInsideEventHandler;\n  }\n}\n\nexport function setBatchingImplementation(\n  _batchedUpdatesImpl,\n  _discreteUpdatesImpl,\n) {\n  batchedUpdatesImpl = _batchedUpdatesImpl;\n  discreteUpdatesImpl = _discreteUpdatesImpl;\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n * @flow\n */\n\nimport invariant from 'shared/invariant';\nimport {rethrowCaughtError} from 'shared/ReactErrorUtils';\n\nimport type {ReactSyntheticEvent} from './ReactSyntheticEventType';\nimport accumulateInto from './accumulateInto';\nimport forEachAccumulated from './forEachAccumulated';\nimport {executeDispatchesInOrder} from './EventPluginUtils';\n\n/**\n * Internal queue of events that have accumulated their dispatches and are\n * waiting to have their dispatches executed.\n */\nlet eventQueue: ?(Array<ReactSyntheticEvent> | ReactSyntheticEvent) = null;\n\n/**\n * Dispatches an event and releases it back into the pool, unless persistent.\n *\n * @param {?object} event Synthetic event to be dispatched.\n * @private\n */\nconst executeDispatchesAndRelease = function(event: ReactSyntheticEvent) {\n  if (event) {\n    executeDispatchesInOrder(event);\n\n    if (!event.isPersistent()) {\n      event.constructor.release(event);\n    }\n  }\n};\nconst executeDispatchesAndReleaseTopLevel = function(e) {\n  return executeDispatchesAndRelease(e);\n};\n\nexport function runEventsInBatch(\n  events: Array<ReactSyntheticEvent> | ReactSyntheticEvent | null,\n) {\n  if (events !== null) {\n    eventQueue = accumulateInto(eventQueue, events);\n  }\n\n  // Set `eventQueue` to null before processing it so that we can tell if more\n  // events get enqueued while processing.\n  const processingEventQueue = eventQueue;\n  eventQueue = null;\n\n  if (!processingEventQueue) {\n    return;\n  }\n\n  forEachAccumulated(processingEventQueue, executeDispatchesAndReleaseTopLevel);\n  invariant(\n    !eventQueue,\n    'processEventQueue(): Additional events were enqueued while processing ' +\n      'an event queue. Support for this has not yet been implemented.',\n  );\n  // This would be a good time to rethrow if any of the event handlers threw.\n  rethrowCaughtError();\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {AnyNativeEvent} from './legacy-events/PluginModuleType';\nimport type {Fiber} from 'react-reconciler/src/ReactInternalTypes';\nimport type {LegacyPluginModule} from './legacy-events/PluginModuleType';\nimport type {ReactSyntheticEvent} from './legacy-events/ReactSyntheticEventType';\nimport type {TopLevelType} from './legacy-events/TopLevelEventTypes';\n\nimport {registrationNameModules} from './legacy-events/EventPluginRegistry';\nimport {batchedUpdates} from './legacy-events/ReactGenericBatching';\nimport {runEventsInBatch} from './legacy-events/EventBatching';\nimport {plugins} from './legacy-events/EventPluginRegistry';\nimport getListener from './ReactNativeGetListener';\nimport accumulateInto from './legacy-events/accumulateInto';\n\nimport {getInstanceFromNode} from './ReactNativeComponentTree';\n\nexport {getListener, registrationNameModules as registrationNames};\n\n/**\n * Version of `ReactBrowserEventEmitter` that works on the receiving side of a\n * serialized worker boundary.\n */\n\n// Shared default empty native event - conserve memory.\nconst EMPTY_NATIVE_EVENT = (({}: any): AnyNativeEvent);\n\n/**\n * Selects a subsequence of `Touch`es, without destroying `touches`.\n *\n * @param {Array<Touch>} touches Deserialized touch objects.\n * @param {Array<number>} indices Indices by which to pull subsequence.\n * @return {Array<Touch>} Subsequence of touch objects.\n */\nconst touchSubsequence = function(touches, indices) {\n  const ret = [];\n  for (let i = 0; i < indices.length; i++) {\n    ret.push(touches[indices[i]]);\n  }\n  return ret;\n};\n\n/**\n * TODO: Pool all of this.\n *\n * Destroys `touches` by removing touch objects at indices `indices`. This is\n * to maintain compatibility with W3C touch \"end\" events, where the active\n * touches don't include the set that has just been \"ended\".\n *\n * @param {Array<Touch>} touches Deserialized touch objects.\n * @param {Array<number>} indices Indices to remove from `touches`.\n * @return {Array<Touch>} Subsequence of removed touch objects.\n */\nconst removeTouchesAtIndices = function(\n  touches: Array<Object>,\n  indices: Array<number>,\n): Array<Object> {\n  const rippedOut = [];\n  // use an unsafe downcast to alias to nullable elements,\n  // so we can delete and then compact.\n  const temp: Array<?Object> = (touches: Array<any>);\n  for (let i = 0; i < indices.length; i++) {\n    const index = indices[i];\n    rippedOut.push(touches[index]);\n    temp[index] = null;\n  }\n  let fillAt = 0;\n  for (let j = 0; j < temp.length; j++) {\n    const cur = temp[j];\n    if (cur !== null) {\n      temp[fillAt++] = cur;\n    }\n  }\n  temp.length = fillAt;\n  return rippedOut;\n};\n\n/**\n * Internal version of `receiveEvent` in terms of normalized (non-tag)\n * `rootNodeID`.\n *\n * @see receiveEvent.\n *\n * @param {rootNodeID} rootNodeID React root node ID that event occurred on.\n * @param {TopLevelType} topLevelType Top level type of event.\n * @param {?object} nativeEventParam Object passed from native.\n */\nfunction _receiveRootNodeIDEvent(\n  rootNodeID: number,\n  topLevelType: TopLevelType,\n  nativeEventParam: ?AnyNativeEvent,\n) {\n  const nativeEvent = nativeEventParam || EMPTY_NATIVE_EVENT;\n  const inst = getInstanceFromNode(rootNodeID);\n\n  let target = null;\n  if (inst != null) {\n    target = inst.stateNode;\n  }\n\n  batchedUpdates(function() {\n    runExtractedPluginEventsInBatch(topLevelType, inst, nativeEvent, target);\n  });\n  // React Native doesn't use ReactControlledComponent but if it did, here's\n  // where it would do it.\n}\n\n/**\n * Allows registered plugins an opportunity to extract events from top-level\n * native browser events.\n *\n * @return {*} An accumulation of synthetic events.\n * @internal\n */\nfunction extractPluginEvents(\n  topLevelType: TopLevelType,\n  targetInst: null | Fiber,\n  nativeEvent: AnyNativeEvent,\n  nativeEventTarget: null | EventTarget,\n): Array<ReactSyntheticEvent> | ReactSyntheticEvent | null {\n  let events = null;\n  const legacyPlugins = ((plugins: any): Array<LegacyPluginModule<Event>>);\n  for (let i = 0; i < legacyPlugins.length; i++) {\n    // Not every plugin in the ordering may be loaded at runtime.\n    const possiblePlugin: LegacyPluginModule<AnyNativeEvent> = legacyPlugins[i];\n    if (possiblePlugin) {\n      const extractedEvents = possiblePlugin.extractEvents(\n        topLevelType,\n        targetInst,\n        nativeEvent,\n        nativeEventTarget,\n      );\n      if (extractedEvents) {\n        events = accumulateInto(events, extractedEvents);\n      }\n    }\n  }\n  return events;\n}\n\nfunction runExtractedPluginEventsInBatch(\n  topLevelType: TopLevelType,\n  targetInst: null | Fiber,\n  nativeEvent: AnyNativeEvent,\n  nativeEventTarget: null | EventTarget,\n) {\n  const events = extractPluginEvents(\n    topLevelType,\n    targetInst,\n    nativeEvent,\n    nativeEventTarget,\n  );\n  runEventsInBatch(events);\n}\n\n/**\n * Publicly exposed method on module for native objc to invoke when a top\n * level event is extracted.\n * @param {rootNodeID} rootNodeID React root node ID that event occurred on.\n * @param {TopLevelType} topLevelType Top level type of event.\n * @param {object} nativeEventParam Object passed from native.\n */\nexport function receiveEvent(\n  rootNodeID: number,\n  topLevelType: TopLevelType,\n  nativeEventParam: AnyNativeEvent,\n) {\n  _receiveRootNodeIDEvent(rootNodeID, topLevelType, nativeEventParam);\n}\n\n/**\n * Simple multi-wrapper around `receiveEvent` that is intended to receive an\n * efficient representation of `Touch` objects, and other information that\n * can be used to construct W3C compliant `Event` and `Touch` lists.\n *\n * This may create dispatch behavior that differs than web touch handling. We\n * loop through each of the changed touches and receive it as a single event.\n * So two `touchStart`/`touchMove`s that occur simultaneously are received as\n * two separate touch event dispatches - when they arguably should be one.\n *\n * This implementation reuses the `Touch` objects themselves as the `Event`s\n * since we dispatch an event for each touch (though that might not be spec\n * compliant). The main purpose of reusing them is to save allocations.\n *\n * TODO: Dispatch multiple changed touches in one event. The bubble path\n * could be the first common ancestor of all the `changedTouches`.\n *\n * One difference between this behavior and W3C spec: cancelled touches will\n * not appear in `.touches`, or in any future `.touches`, though they may\n * still be \"actively touching the surface\".\n *\n * Web desktop polyfills only need to construct a fake touch event with\n * identifier 0, also abandoning traditional click handlers.\n */\nexport function receiveTouches(\n  eventTopLevelType: TopLevelType,\n  touches: Array<Object>,\n  changedIndices: Array<number>,\n) {\n  const changedTouches =\n    eventTopLevelType === 'topTouchEnd' ||\n    eventTopLevelType === 'topTouchCancel'\n      ? removeTouchesAtIndices(touches, changedIndices)\n      : touchSubsequence(touches, changedIndices);\n\n  for (let jj = 0; jj < changedTouches.length; jj++) {\n    const touch = changedTouches[jj];\n    // Touch objects can fulfill the role of `DOM` `Event` objects if we set\n    // the `changedTouches`/`touches`. This saves allocations.\n    touch.changedTouches = changedTouches;\n    touch.touches = touches;\n    const nativeEvent = touch;\n    let rootNodeID = null;\n    const target = nativeEvent.target;\n    if (target !== null && target !== undefined) {\n      if (target < 1) {\n        if (__DEV__) {\n          console.error(\n            'A view is reporting that a touch occurred on tag zero.',\n          );\n        }\n      } else {\n        rootNodeID = target;\n      }\n    }\n    // $FlowFixMe Shouldn't we *not* call it if rootNodeID is null?\n    _receiveRootNodeIDEvent(rootNodeID, eventTopLevelType, nativeEvent);\n  }\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\n// Module provided by RN:\nimport {UIManager} from 'react-native/Libraries/ReactPrivate/ReactNativePrivateInterface';\n\nconst ReactNativeGlobalResponderHandler = {\n  onChange: function(from: any, to: any, blockNativeResponder: boolean) {\n    if (to !== null) {\n      const tag = to.stateNode._nativeTag;\n      UIManager.setJSResponder(tag, blockNativeResponder);\n    } else {\n      UIManager.clearJSResponder();\n    }\n  },\n};\n\nexport default ReactNativeGlobalResponderHandler;\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport './ReactNativeInjectionShared';\n\nimport {\n  getFiberCurrentPropsFromNode,\n  getInstanceFromNode,\n  getNodeFromInstance,\n} from './ReactNativeComponentTree';\nimport {setComponentTree} from './legacy-events/EventPluginUtils';\nimport {receiveEvent, receiveTouches} from './ReactNativeEventEmitter';\nimport ReactNativeGlobalResponderHandler from './ReactNativeGlobalResponderHandler';\nimport ResponderEventPlugin from './legacy-events/ResponderEventPlugin';\n\n// Module provided by RN:\nimport {RCTEventEmitter} from 'react-native/Libraries/ReactPrivate/ReactNativePrivateInterface';\n\n/**\n * Register the event emitter with the native bridge\n */\nRCTEventEmitter.register({\n  receiveEvent,\n  receiveTouches,\n});\n\nsetComponentTree(\n  getFiberCurrentPropsFromNode,\n  getInstanceFromNode,\n  getNodeFromInstance,\n);\n\nResponderEventPlugin.injection.injectGlobalResponderHandler(\n  ReactNativeGlobalResponderHandler,\n);\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n/**\n * `ReactInstanceMap` maintains a mapping from a public facing stateful\n * instance (key) and the internal representation (value). This allows public\n * methods to accept the user facing instance as an argument and map them back\n * to internal methods.\n *\n * Note that this module is currently shared and assumed to be stateless.\n * If this becomes an actual Map, that will break.\n */\n\n/**\n * This API should be called `delete` but we'd have to make sure to always\n * transform these to strings for IE support. When this transform is fully\n * supported we can rename it.\n */\nexport function remove(key) {\n  key._reactInternals = undefined;\n}\n\nexport function get(key) {\n  return key._reactInternals;\n}\n\nexport function has(key) {\n  return key._reactInternals !== undefined;\n}\n\nexport function set(key, value) {\n  key._reactInternals = value;\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport * as React from 'react';\n\nconst ReactSharedInternals =\n  React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;\n\nexport default ReactSharedInternals;\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\n// ATTENTION\n// When adding new symbols to this file,\n// Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'\n\n// The Symbol used to tag the ReactElement-like types. If there is no native Symbol\n// nor polyfill, then a plain number is used for performance.\nexport let REACT_ELEMENT_TYPE = 0xeac7;\nexport let REACT_PORTAL_TYPE = 0xeaca;\nexport let REACT_FRAGMENT_TYPE = 0xeacb;\nexport let REACT_STRICT_MODE_TYPE = 0xeacc;\nexport let REACT_PROFILER_TYPE = 0xead2;\nexport let REACT_PROVIDER_TYPE = 0xeacd;\nexport let REACT_CONTEXT_TYPE = 0xeace;\nexport let REACT_FORWARD_REF_TYPE = 0xead0;\nexport let REACT_SUSPENSE_TYPE = 0xead1;\nexport let REACT_SUSPENSE_LIST_TYPE = 0xead8;\nexport let REACT_MEMO_TYPE = 0xead3;\nexport let REACT_LAZY_TYPE = 0xead4;\nexport let REACT_SCOPE_TYPE = 0xead7;\nexport let REACT_OPAQUE_ID_TYPE = 0xeae0;\nexport let REACT_DEBUG_TRACING_MODE_TYPE = 0xeae1;\nexport let REACT_OFFSCREEN_TYPE = 0xeae2;\nexport let REACT_LEGACY_HIDDEN_TYPE = 0xeae3;\nexport let REACT_CACHE_TYPE = 0xeae4;\n\nif (typeof Symbol === 'function' && Symbol.for) {\n  const symbolFor = Symbol.for;\n  REACT_ELEMENT_TYPE = symbolFor('react.element');\n  REACT_PORTAL_TYPE = symbolFor('react.portal');\n  REACT_FRAGMENT_TYPE = symbolFor('react.fragment');\n  REACT_STRICT_MODE_TYPE = symbolFor('react.strict_mode');\n  REACT_PROFILER_TYPE = symbolFor('react.profiler');\n  REACT_PROVIDER_TYPE = symbolFor('react.provider');\n  REACT_CONTEXT_TYPE = symbolFor('react.context');\n  REACT_FORWARD_REF_TYPE = symbolFor('react.forward_ref');\n  REACT_SUSPENSE_TYPE = symbolFor('react.suspense');\n  REACT_SUSPENSE_LIST_TYPE = symbolFor('react.suspense_list');\n  REACT_MEMO_TYPE = symbolFor('react.memo');\n  REACT_LAZY_TYPE = symbolFor('react.lazy');\n  REACT_SCOPE_TYPE = symbolFor('react.scope');\n  REACT_OPAQUE_ID_TYPE = symbolFor('react.opaque.id');\n  REACT_DEBUG_TRACING_MODE_TYPE = symbolFor('react.debug_trace_mode');\n  REACT_OFFSCREEN_TYPE = symbolFor('react.offscreen');\n  REACT_LEGACY_HIDDEN_TYPE = symbolFor('react.legacy_hidden');\n  REACT_CACHE_TYPE = symbolFor('react.cache');\n}\n\nconst MAYBE_ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;\nconst FAUX_ITERATOR_SYMBOL = '@@iterator';\n\nexport function getIteratorFn(maybeIterable: ?any): ?() => ?Iterator<*> {\n  if (maybeIterable === null || typeof maybeIterable !== 'object') {\n    return null;\n  }\n  const maybeIterator =\n    (MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL]) ||\n    maybeIterable[FAUX_ITERATOR_SYMBOL];\n  if (typeof maybeIterator === 'function') {\n    return maybeIterator;\n  }\n  return null;\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {LazyComponent} from 'react/src/ReactLazy';\nimport type {ReactContext, ReactProviderType} from 'shared/ReactTypes';\n\nimport {\n  REACT_CONTEXT_TYPE,\n  REACT_FORWARD_REF_TYPE,\n  REACT_FRAGMENT_TYPE,\n  REACT_PORTAL_TYPE,\n  REACT_MEMO_TYPE,\n  REACT_PROFILER_TYPE,\n  REACT_PROVIDER_TYPE,\n  REACT_STRICT_MODE_TYPE,\n  REACT_SUSPENSE_TYPE,\n  REACT_SUSPENSE_LIST_TYPE,\n  REACT_LAZY_TYPE,\n  REACT_CACHE_TYPE,\n} from 'shared/ReactSymbols';\n\n// Keep in sync with react-reconciler/getComponentNameFromFiber\nfunction getWrappedName(\n  outerType: mixed,\n  innerType: any,\n  wrapperName: string,\n): string {\n  const displayName = (outerType: any).displayName;\n  if (displayName) {\n    return displayName;\n  }\n  const functionName = innerType.displayName || innerType.name || '';\n  return functionName !== '' ? `${wrapperName}(${functionName})` : wrapperName;\n}\n\n// Keep in sync with react-reconciler/getComponentNameFromFiber\nfunction getContextName(type: ReactContext<any>) {\n  return type.displayName || 'Context';\n}\n\n// Note that the reconciler package should generally prefer to use getComponentNameFromFiber() instead.\nexport default function getComponentNameFromType(type: mixed): string | null {\n  if (type == null) {\n    // Host root, text node or just invalid type.\n    return null;\n  }\n  if (__DEV__) {\n    if (typeof (type: any).tag === 'number') {\n      console.error(\n        'Received an unexpected object in getComponentNameFromType(). ' +\n          'This is likely a bug in React. Please file an issue.',\n      );\n    }\n  }\n  if (typeof type === 'function') {\n    return (type: any).displayName || type.name || null;\n  }\n  if (typeof type === 'string') {\n    return type;\n  }\n  switch (type) {\n    case REACT_FRAGMENT_TYPE:\n      return 'Fragment';\n    case REACT_PORTAL_TYPE:\n      return 'Portal';\n    case REACT_PROFILER_TYPE:\n      return 'Profiler';\n    case REACT_STRICT_MODE_TYPE:\n      return 'StrictMode';\n    case REACT_SUSPENSE_TYPE:\n      return 'Suspense';\n    case REACT_SUSPENSE_LIST_TYPE:\n      return 'SuspenseList';\n    case REACT_CACHE_TYPE:\n      return 'Cache';\n  }\n  if (typeof type === 'object') {\n    switch (type.$$typeof) {\n      case REACT_CONTEXT_TYPE:\n        const context: ReactContext<any> = (type: any);\n        return getContextName(context) + '.Consumer';\n      case REACT_PROVIDER_TYPE:\n        const provider: ReactProviderType<any> = (type: any);\n        return getContextName(provider._context) + '.Provider';\n      case REACT_FORWARD_REF_TYPE:\n        return getWrappedName(type, type.render, 'ForwardRef');\n      case REACT_MEMO_TYPE:\n        const outerName = (type: any).displayName || null;\n        if (outerName !== null) {\n          return outerName;\n        }\n        return getComponentNameFromType(type.type) || 'Memo';\n      case REACT_LAZY_TYPE: {\n        const lazyComponent: LazyComponent<any, any> = (type: any);\n        const payload = lazyComponent._payload;\n        const init = lazyComponent._init;\n        try {\n          return getComponentNameFromType(init(payload));\n        } catch (x) {\n          return null;\n        }\n      }\n    }\n  }\n  return null;\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {ReactContext, ReactProviderType} from 'shared/ReactTypes';\n\nimport {\n  FunctionComponent,\n  ClassComponent,\n  IndeterminateComponent,\n  HostRoot,\n  HostPortal,\n  HostComponent,\n  HostText,\n  Fragment,\n  Mode,\n  ContextConsumer,\n  ContextProvider,\n  ForwardRef,\n  Profiler,\n  SuspenseComponent,\n  MemoComponent,\n  SimpleMemoComponent,\n  LazyComponent,\n  IncompleteClassComponent,\n  DehydratedFragment,\n  SuspenseListComponent,\n  ScopeComponent,\n  OffscreenComponent,\n  LegacyHiddenComponent,\n  CacheComponent,\n} from 'react-reconciler/src/ReactWorkTags';\nimport getComponentNameFromType from 'shared/getComponentNameFromType';\nimport {REACT_STRICT_MODE_TYPE} from 'shared/ReactSymbols';\n\n// Keep in sync with shared/getComponentNameFromType\nfunction getWrappedName(\n  outerType: mixed,\n  innerType: any,\n  wrapperName: string,\n): string {\n  const functionName = innerType.displayName || innerType.name || '';\n  return (\n    (outerType: any).displayName ||\n    (functionName !== '' ? `${wrapperName}(${functionName})` : wrapperName)\n  );\n}\n\n// Keep in sync with shared/getComponentNameFromType\nfunction getContextName(type: ReactContext<any>) {\n  return type.displayName || 'Context';\n}\n\nexport default function getComponentNameFromFiber(fiber: Fiber): string | null {\n  const {tag, type} = fiber;\n  switch (tag) {\n    case CacheComponent:\n      return 'Cache';\n    case ContextConsumer:\n      const context: ReactContext<any> = (type: any);\n      return getContextName(context) + '.Consumer';\n    case ContextProvider:\n      const provider: ReactProviderType<any> = (type: any);\n      return getContextName(provider._context) + '.Provider';\n    case DehydratedFragment:\n      return 'DehydratedFragment';\n    case ForwardRef:\n      return getWrappedName(type, type.render, 'ForwardRef');\n    case Fragment:\n      return 'Fragment';\n    case HostComponent:\n      // Host component type is the display name (e.g. \"div\", \"View\")\n      return type;\n    case HostPortal:\n      return 'Portal';\n    case HostRoot:\n      return 'Root';\n    case HostText:\n      return 'Text';\n    case LazyComponent:\n      // Name comes from the type in this case; we don't have a tag.\n      return getComponentNameFromType(type);\n    case LegacyHiddenComponent:\n      return 'LegacyHidden';\n    case Mode:\n      if (type === REACT_STRICT_MODE_TYPE) {\n        // Don't be less specific than shared/getComponentNameFromType\n        return 'StrictMode';\n      }\n      return 'Mode';\n    case OffscreenComponent:\n      return 'Offscreen';\n    case Profiler:\n      return 'Profiler';\n    case ScopeComponent:\n      return 'Scope';\n    case SuspenseComponent:\n      return 'Suspense';\n    case SuspenseListComponent:\n      return 'SuspenseList';\n\n    // The display name for this tags come from the user-provided type:\n    case ClassComponent:\n    case FunctionComponent:\n    case IncompleteClassComponent:\n    case IndeterminateComponent:\n    case MemoComponent:\n    case SimpleMemoComponent:\n      if (typeof type === 'function') {\n        return (type: any).displayName || type.name || null;\n      }\n      if (typeof type === 'string') {\n        return type;\n      }\n      break;\n  }\n\n  return null;\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport typeof * as FeatureFlagsType from 'shared/ReactFeatureFlags';\nimport typeof * as ExportsType from './ReactFeatureFlags.native-oss';\n\nexport const debugRenderPhaseSideEffectsForStrictMode = false;\nexport const enableDebugTracing = false;\nexport const enableSchedulingProfiler = false;\nexport const replayFailedUnitOfWorkWithInvokeGuardedCallback = __DEV__;\nexport const warnAboutDeprecatedLifecycles = true;\nexport const enableProfilerTimer = __PROFILE__;\nexport const enableProfilerCommitHooks = __PROFILE__;\nexport const enableProfilerNestedUpdatePhase = __PROFILE__;\nexport const enableProfilerNestedUpdateScheduledHook = false;\nexport const enableUpdaterTracking = __PROFILE__;\nexport const enableSuspenseServerRenderer = false;\nexport const enableSelectiveHydration = false;\nexport const enableLazyElements = false;\nexport const enableCache = false;\nexport const disableJavaScriptURLs = false;\nexport const disableInputAttributeSyncing = false;\nexport const enableSchedulerDebugging = false;\nexport const enableScopeAPI = false;\nexport const enableCreateEventHandleAPI = false;\nexport const enableSuspenseCallback = false;\nexport const warnAboutDefaultPropsOnFunctionComponents = false;\nexport const warnAboutStringRefs = false;\nexport const disableLegacyContext = false;\nexport const disableSchedulerTimeoutBasedOnReactExpirationTime = false;\nexport const enableTrustedTypesIntegration = false;\nexport const disableTextareaChildren = false;\nexport const disableModulePatternComponents = false;\nexport const warnUnstableRenderSubtreeIntoContainer = false;\nexport const warnAboutSpreadingKeyToJSX = false;\nexport const warnOnSubscriptionInsideStartTransition = false;\nexport const enableComponentStackLocations = false;\nexport const enableLegacyFBSupport = false;\nexport const enableFilterEmptyStringAttributesDOM = false;\nexport const disableNativeComponentFrames = false;\nexport const skipUnmountedBoundaries = false;\nexport const deletedTreeCleanUpLevel = 3;\nexport const enableSuspenseLayoutEffectSemantics = false;\nexport const enableGetInspectorDataForInstanceInProduction = false;\nexport const enableNewReconciler = false;\nexport const deferRenderPhaseUpdateToNextBatch = false;\n\nexport const enableStrictEffects = false;\nexport const createRootStrictEffectsByDefault = false;\nexport const enableUseRefAccessWarning = false;\n\nexport const enableRecursiveCommitTraversal = false;\nexport const disableSchedulerTimeoutInWorkLoop = false;\nexport const enableLazyContextPropagation = false;\nexport const enableSyncDefaultUpdates = true;\nexport const allowConcurrentByDefault = false;\nexport const enablePersistentOffscreenHostContainer = false;\n\nexport const consoleManagedByDevToolsDuringStrictMode = false;\n\n// Flow magic to verify the exports of this file match the original version.\n// eslint-disable-next-line no-unused-vars\ntype Check<_X, Y: _X, X: Y = _X> = null;\n// eslint-disable-next-line no-unused-expressions\n(null: Check<ExportsType, FeatureFlagsType>);\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport {enableCreateEventHandleAPI} from 'shared/ReactFeatureFlags';\n\nexport type Flags = number;\n\n// Don't change these two values. They're used by React Dev Tools.\nexport const NoFlags = /*                      */ 0b00000000000000000000000;\nexport const PerformedWork = /*                */ 0b00000000000000000000001;\n\n// You can change the rest (and add more).\nexport const Placement = /*                    */ 0b00000000000000000000010;\nexport const Update = /*                       */ 0b00000000000000000000100;\nexport const PlacementAndUpdate = /*           */ Placement | Update;\nexport const Deletion = /*                     */ 0b00000000000000000001000;\nexport const ChildDeletion = /*                */ 0b00000000000000000010000;\nexport const ContentReset = /*                 */ 0b00000000000000000100000;\nexport const Callback = /*                     */ 0b00000000000000001000000;\nexport const DidCapture = /*                   */ 0b00000000000000010000000;\nexport const Ref = /*                          */ 0b00000000000000100000000;\nexport const Snapshot = /*                     */ 0b00000000000001000000000;\nexport const Passive = /*                      */ 0b00000000000010000000000;\nexport const Hydrating = /*                    */ 0b00000000000100000000000;\nexport const HydratingAndUpdate = /*           */ Hydrating | Update;\nexport const Visibility = /*                   */ 0b00000000001000000000000;\n\nexport const LifecycleEffectMask = Passive | Update | Callback | Ref | Snapshot;\n\n// Union of all commit flags (flags with the lifetime of a particular commit)\nexport const HostEffectMask = /*               */ 0b00000000001111111111111;\n\n// These are not really side effects, but we still reuse this field.\nexport const Incomplete = /*                   */ 0b00000000010000000000000;\nexport const ShouldCapture = /*                */ 0b00000000100000000000000;\nexport const ForceUpdateForLegacySuspense = /* */ 0b00000001000000000000000;\nexport const DidPropagateContext = /*          */ 0b00000010000000000000000;\nexport const NeedsPropagation = /*             */ 0b00000100000000000000000;\n\n// Static tags describe aspects of a fiber that are not specific to a render,\n// e.g. a fiber uses a passive effect (even if there are no updates on this particular render).\n// This enables us to defer more work in the unmount case,\n// since we can defer traversing the tree during layout to look for Passive effects,\n// and instead rely on the static flag as a signal that there may be cleanup work.\nexport const RefStatic = /*                    */ 0b00001000000000000000000;\nexport const LayoutStatic = /*                 */ 0b00010000000000000000000;\nexport const PassiveStatic = /*                */ 0b00100000000000000000000;\n\n// These flags allow us to traverse to fibers that have effects on mount\n// without traversing the entire tree after every commit for\n// double invoking\nexport const MountLayoutDev = /*               */ 0b01000000000000000000000;\nexport const MountPassiveDev = /*              */ 0b10000000000000000000000;\n\n// Groups of flags that are used in the commit phase to skip over trees that\n// don't contain effects, by checking subtreeFlags.\n\nexport const BeforeMutationMask =\n  // TODO: Remove Update flag from before mutation phase by re-landing Visibility\n  // flag logic (see #20043)\n  Update |\n  Snapshot |\n  (enableCreateEventHandleAPI\n    ? // createEventHandle needs to visit deleted and hidden trees to\n      // fire beforeblur\n      // TODO: Only need to visit Deletions during BeforeMutation phase if an\n      // element is focused.\n      ChildDeletion | Visibility\n    : 0);\n\nexport const MutationMask =\n  Placement |\n  Update |\n  ChildDeletion |\n  ContentReset |\n  Ref |\n  Hydrating |\n  Visibility;\nexport const LayoutMask = Update | Callback | Ref | Visibility;\n\n// TODO: Split into PassiveMountMask and PassiveUnmountMask\nexport const PassiveMask = Passive | ChildDeletion;\n\n// Union of tags that don't get reset on clones.\n// This allows certain concepts to persist without recalculating them,\n// e.g. whether a subtree contains passive effects or portals.\nexport const StaticMask = LayoutStatic | PassiveStatic | RefStatic;\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Fiber} from './ReactInternalTypes';\nimport type {Container, SuspenseInstance} from './ReactFiberHostConfig';\nimport type {SuspenseState} from './ReactFiberSuspenseComponent.old';\n\nimport invariant from 'shared/invariant';\n\nimport {get as getInstance} from 'shared/ReactInstanceMap';\nimport ReactSharedInternals from 'shared/ReactSharedInternals';\nimport getComponentNameFromFiber from 'react-reconciler/src/getComponentNameFromFiber';\nimport {\n  ClassComponent,\n  HostComponent,\n  HostRoot,\n  HostPortal,\n  HostText,\n  SuspenseComponent,\n} from './ReactWorkTags';\nimport {NoFlags, Placement, Hydrating} from './ReactFiberFlags';\n\nconst ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;\n\nexport function getNearestMountedFiber(fiber: Fiber): null | Fiber {\n  let node = fiber;\n  let nearestMounted = fiber;\n  if (!fiber.alternate) {\n    // If there is no alternate, this might be a new tree that isn't inserted\n    // yet. If it is, then it will have a pending insertion effect on it.\n    let nextNode = node;\n    do {\n      node = nextNode;\n      if ((node.flags & (Placement | Hydrating)) !== NoFlags) {\n        // This is an insertion or in-progress hydration. The nearest possible\n        // mounted fiber is the parent but we need to continue to figure out\n        // if that one is still mounted.\n        nearestMounted = node.return;\n      }\n      nextNode = node.return;\n    } while (nextNode);\n  } else {\n    while (node.return) {\n      node = node.return;\n    }\n  }\n  if (node.tag === HostRoot) {\n    // TODO: Check if this was a nested HostRoot when used with\n    // renderContainerIntoSubtree.\n    return nearestMounted;\n  }\n  // If we didn't hit the root, that means that we're in an disconnected tree\n  // that has been unmounted.\n  return null;\n}\n\nexport function getSuspenseInstanceFromFiber(\n  fiber: Fiber,\n): null | SuspenseInstance {\n  if (fiber.tag === SuspenseComponent) {\n    let suspenseState: SuspenseState | null = fiber.memoizedState;\n    if (suspenseState === null) {\n      const current = fiber.alternate;\n      if (current !== null) {\n        suspenseState = current.memoizedState;\n      }\n    }\n    if (suspenseState !== null) {\n      return suspenseState.dehydrated;\n    }\n  }\n  return null;\n}\n\nexport function getContainerFromFiber(fiber: Fiber): null | Container {\n  return fiber.tag === HostRoot\n    ? (fiber.stateNode.containerInfo: Container)\n    : null;\n}\n\nexport function isFiberMounted(fiber: Fiber): boolean {\n  return getNearestMountedFiber(fiber) === fiber;\n}\n\nexport function isMounted(component: React$Component<any, any>): boolean {\n  if (__DEV__) {\n    const owner = (ReactCurrentOwner.current: any);\n    if (owner !== null && owner.tag === ClassComponent) {\n      const ownerFiber: Fiber = owner;\n      const instance = ownerFiber.stateNode;\n      if (!instance._warnedAboutRefsInRender) {\n        console.error(\n          '%s is accessing isMounted inside its render() function. ' +\n            'render() should be a pure function of props and state. It should ' +\n            'never access something that requires stale data from the previous ' +\n            'render, such as refs. Move this logic to componentDidMount and ' +\n            'componentDidUpdate instead.',\n          getComponentNameFromFiber(ownerFiber) || 'A component',\n        );\n      }\n      instance._warnedAboutRefsInRender = true;\n    }\n  }\n\n  const fiber: ?Fiber = getInstance(component);\n  if (!fiber) {\n    return false;\n  }\n  return getNearestMountedFiber(fiber) === fiber;\n}\n\nfunction assertIsMounted(fiber) {\n  invariant(\n    getNearestMountedFiber(fiber) === fiber,\n    'Unable to find node on an unmounted component.',\n  );\n}\n\nexport function findCurrentFiberUsingSlowPath(fiber: Fiber): Fiber | null {\n  const alternate = fiber.alternate;\n  if (!alternate) {\n    // If there is no alternate, then we only need to check if it is mounted.\n    const nearestMounted = getNearestMountedFiber(fiber);\n    invariant(\n      nearestMounted !== null,\n      'Unable to find node on an unmounted component.',\n    );\n    if (nearestMounted !== fiber) {\n      return null;\n    }\n    return fiber;\n  }\n  // If we have two possible branches, we'll walk backwards up to the root\n  // to see what path the root points to. On the way we may hit one of the\n  // special cases and we'll deal with them.\n  let a: Fiber = fiber;\n  let b: Fiber = alternate;\n  while (true) {\n    const parentA = a.return;\n    if (parentA === null) {\n      // We're at the root.\n      break;\n    }\n    const parentB = parentA.alternate;\n    if (parentB === null) {\n      // There is no alternate. This is an unusual case. Currently, it only\n      // happens when a Suspense component is hidden. An extra fragment fiber\n      // is inserted in between the Suspense fiber and its children. Skip\n      // over this extra fragment fiber and proceed to the next parent.\n      const nextParent = parentA.return;\n      if (nextParent !== null) {\n        a = b = nextParent;\n        continue;\n      }\n      // If there's no parent, we're at the root.\n      break;\n    }\n\n    // If both copies of the parent fiber point to the same child, we can\n    // assume that the child is current. This happens when we bailout on low\n    // priority: the bailed out fiber's child reuses the current child.\n    if (parentA.child === parentB.child) {\n      let child = parentA.child;\n      while (child) {\n        if (child === a) {\n          // We've determined that A is the current branch.\n          assertIsMounted(parentA);\n          return fiber;\n        }\n        if (child === b) {\n          // We've determined that B is the current branch.\n          assertIsMounted(parentA);\n          return alternate;\n        }\n        child = child.sibling;\n      }\n      // We should never have an alternate for any mounting node. So the only\n      // way this could possibly happen is if this was unmounted, if at all.\n      invariant(false, 'Unable to find node on an unmounted component.');\n    }\n\n    if (a.return !== b.return) {\n      // The return pointer of A and the return pointer of B point to different\n      // fibers. We assume that return pointers never criss-cross, so A must\n      // belong to the child set of A.return, and B must belong to the child\n      // set of B.return.\n      a = parentA;\n      b = parentB;\n    } else {\n      // The return pointers point to the same fiber. We'll have to use the\n      // default, slow path: scan the child sets of each parent alternate to see\n      // which child belongs to which set.\n      //\n      // Search parent A's child set\n      let didFindChild = false;\n      let child = parentA.child;\n      while (child) {\n        if (child === a) {\n          didFindChild = true;\n          a = parentA;\n          b = parentB;\n          break;\n        }\n        if (child === b) {\n          didFindChild = true;\n          b = parentA;\n          a = parentB;\n          break;\n        }\n        child = child.sibling;\n      }\n      if (!didFindChild) {\n        // Search parent B's child set\n        child = parentB.child;\n        while (child) {\n          if (child === a) {\n            didFindChild = true;\n            a = parentB;\n            b = parentA;\n            break;\n          }\n          if (child === b) {\n            didFindChild = true;\n            b = parentB;\n            a = parentA;\n            break;\n          }\n          child = child.sibling;\n        }\n        invariant(\n          didFindChild,\n          'Child was not found in either parent set. This indicates a bug ' +\n            'in React related to the return pointer. Please file an issue.',\n        );\n      }\n    }\n\n    invariant(\n      a.alternate === b,\n      \"Return fibers should always be each others' alternates. \" +\n        'This error is likely caused by a bug in React. Please file an issue.',\n    );\n  }\n  // If the root is not a host container, we're in a disconnected tree. I.e.\n  // unmounted.\n  invariant(\n    a.tag === HostRoot,\n    'Unable to find node on an unmounted component.',\n  );\n  if (a.stateNode.current === a) {\n    // We've determined that A is the current branch.\n    return fiber;\n  }\n  // Otherwise B has to be current branch.\n  return alternate;\n}\n\nexport function findCurrentHostFiber(parent: Fiber): Fiber | null {\n  const currentParent = findCurrentFiberUsingSlowPath(parent);\n  return currentParent !== null\n    ? findCurrentHostFiberImpl(currentParent)\n    : null;\n}\n\nfunction findCurrentHostFiberImpl(node: Fiber) {\n  // Next we'll drill down this component to find the first HostComponent/Text.\n  if (node.tag === HostComponent || node.tag === HostText) {\n    return node;\n  }\n\n  let child = node.child;\n  while (child !== null) {\n    const match = findCurrentHostFiberImpl(child);\n    if (match !== null) {\n      return match;\n    }\n    child = child.sibling;\n  }\n\n  return null;\n}\n\nexport function findCurrentHostFiberWithNoPortals(parent: Fiber): Fiber | null {\n  const currentParent = findCurrentFiberUsingSlowPath(parent);\n  return currentParent !== null\n    ? findCurrentHostFiberWithNoPortalsImpl(currentParent)\n    : null;\n}\n\nfunction findCurrentHostFiberWithNoPortalsImpl(node: Fiber) {\n  // Next we'll drill down this component to find the first HostComponent/Text.\n  if (node.tag === HostComponent || node.tag === HostText) {\n    return node;\n  }\n\n  let child = node.child;\n  while (child !== null) {\n    if (child.tag !== HostPortal) {\n      const match = findCurrentHostFiberWithNoPortalsImpl(child);\n      if (match !== null) {\n        return match;\n      }\n    }\n    child = child.sibling;\n  }\n\n  return null;\n}\n\nexport function isFiberSuspenseAndTimedOut(fiber: Fiber): boolean {\n  const memoizedState = fiber.memoizedState;\n  return (\n    fiber.tag === SuspenseComponent &&\n    memoizedState !== null &&\n    memoizedState.dehydrated === null\n  );\n}\n\nexport function doesFiberContain(\n  parentFiber: Fiber,\n  childFiber: Fiber,\n): boolean {\n  let node = childFiber;\n  const parentFiberAlternate = parentFiber.alternate;\n  while (node !== null) {\n    if (node === parentFiber || node === parentFiberAlternate) {\n      return true;\n    }\n    node = node.return;\n  }\n  return false;\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\n// Modules provided by RN:\nimport {\n  deepDiffer,\n  flattenStyle,\n} from 'react-native/Libraries/ReactPrivate/ReactNativePrivateInterface';\nimport isArray from 'shared/isArray';\n\nimport type {AttributeConfiguration} from './ReactNativeTypes';\n\nconst emptyObject = {};\n\n/**\n * Create a payload that contains all the updates between two sets of props.\n *\n * These helpers are all encapsulated into a single module, because they use\n * mutation as a performance optimization which leads to subtle shared\n * dependencies between the code paths. To avoid this mutable state leaking\n * across modules, I've kept them isolated to this module.\n */\n\ntype NestedNode = Array<NestedNode> | Object;\n\n// Tracks removed keys\nlet removedKeys = null;\nlet removedKeyCount = 0;\n\nconst deepDifferOptions = {\n  unsafelyIgnoreFunctions: true,\n};\n\nfunction defaultDiffer(prevProp: mixed, nextProp: mixed): boolean {\n  if (typeof nextProp !== 'object' || nextProp === null) {\n    // Scalars have already been checked for equality\n    return true;\n  } else {\n    // For objects and arrays, the default diffing algorithm is a deep compare\n    return deepDiffer(prevProp, nextProp, deepDifferOptions);\n  }\n}\n\nfunction restoreDeletedValuesInNestedArray(\n  updatePayload: Object,\n  node: NestedNode,\n  validAttributes: AttributeConfiguration,\n) {\n  if (isArray(node)) {\n    let i = node.length;\n    while (i-- && removedKeyCount > 0) {\n      restoreDeletedValuesInNestedArray(\n        updatePayload,\n        node[i],\n        validAttributes,\n      );\n    }\n  } else if (node && removedKeyCount > 0) {\n    const obj = node;\n    for (const propKey in removedKeys) {\n      if (!removedKeys[propKey]) {\n        continue;\n      }\n      let nextProp = obj[propKey];\n      if (nextProp === undefined) {\n        continue;\n      }\n\n      const attributeConfig = validAttributes[propKey];\n      if (!attributeConfig) {\n        continue; // not a valid native prop\n      }\n\n      if (typeof nextProp === 'function') {\n        nextProp = true;\n      }\n      if (typeof nextProp === 'undefined') {\n        nextProp = null;\n      }\n\n      if (typeof attributeConfig !== 'object') {\n        // case: !Object is the default case\n        updatePayload[propKey] = nextProp;\n      } else if (\n        typeof attributeConfig.diff === 'function' ||\n        typeof attributeConfig.process === 'function'\n      ) {\n        // case: CustomAttributeConfiguration\n        const nextValue =\n          typeof attributeConfig.process === 'function'\n            ? attributeConfig.process(nextProp)\n            : nextProp;\n        updatePayload[propKey] = nextValue;\n      }\n      removedKeys[propKey] = false;\n      removedKeyCount--;\n    }\n  }\n}\n\nfunction diffNestedArrayProperty(\n  updatePayload: null | Object,\n  prevArray: Array<NestedNode>,\n  nextArray: Array<NestedNode>,\n  validAttributes: AttributeConfiguration,\n): null | Object {\n  const minLength =\n    prevArray.length < nextArray.length ? prevArray.length : nextArray.length;\n  let i;\n  for (i = 0; i < minLength; i++) {\n    // Diff any items in the array in the forward direction. Repeated keys\n    // will be overwritten by later values.\n    updatePayload = diffNestedProperty(\n      updatePayload,\n      prevArray[i],\n      nextArray[i],\n      validAttributes,\n    );\n  }\n  for (; i < prevArray.length; i++) {\n    // Clear out all remaining properties.\n    updatePayload = clearNestedProperty(\n      updatePayload,\n      prevArray[i],\n      validAttributes,\n    );\n  }\n  for (; i < nextArray.length; i++) {\n    // Add all remaining properties.\n    updatePayload = addNestedProperty(\n      updatePayload,\n      nextArray[i],\n      validAttributes,\n    );\n  }\n  return updatePayload;\n}\n\nfunction diffNestedProperty(\n  updatePayload: null | Object,\n  prevProp: NestedNode,\n  nextProp: NestedNode,\n  validAttributes: AttributeConfiguration,\n): null | Object {\n  if (!updatePayload && prevProp === nextProp) {\n    // If no properties have been added, then we can bail out quickly on object\n    // equality.\n    return updatePayload;\n  }\n\n  if (!prevProp || !nextProp) {\n    if (nextProp) {\n      return addNestedProperty(updatePayload, nextProp, validAttributes);\n    }\n    if (prevProp) {\n      return clearNestedProperty(updatePayload, prevProp, validAttributes);\n    }\n    return updatePayload;\n  }\n\n  if (!isArray(prevProp) && !isArray(nextProp)) {\n    // Both are leaves, we can diff the leaves.\n    return diffProperties(updatePayload, prevProp, nextProp, validAttributes);\n  }\n\n  if (isArray(prevProp) && isArray(nextProp)) {\n    // Both are arrays, we can diff the arrays.\n    return diffNestedArrayProperty(\n      updatePayload,\n      prevProp,\n      nextProp,\n      validAttributes,\n    );\n  }\n\n  if (isArray(prevProp)) {\n    return diffProperties(\n      updatePayload,\n      // $FlowFixMe - We know that this is always an object when the input is.\n      flattenStyle(prevProp),\n      // $FlowFixMe - We know that this isn't an array because of above flow.\n      nextProp,\n      validAttributes,\n    );\n  }\n\n  return diffProperties(\n    updatePayload,\n    prevProp,\n    // $FlowFixMe - We know that this is always an object when the input is.\n    flattenStyle(nextProp),\n    validAttributes,\n  );\n}\n\n/**\n * addNestedProperty takes a single set of props and valid attribute\n * attribute configurations. It processes each prop and adds it to the\n * updatePayload.\n */\nfunction addNestedProperty(\n  updatePayload: null | Object,\n  nextProp: NestedNode,\n  validAttributes: AttributeConfiguration,\n) {\n  if (!nextProp) {\n    return updatePayload;\n  }\n\n  if (!isArray(nextProp)) {\n    // Add each property of the leaf.\n    return addProperties(updatePayload, nextProp, validAttributes);\n  }\n\n  for (let i = 0; i < nextProp.length; i++) {\n    // Add all the properties of the array.\n    updatePayload = addNestedProperty(\n      updatePayload,\n      nextProp[i],\n      validAttributes,\n    );\n  }\n\n  return updatePayload;\n}\n\n/**\n * clearNestedProperty takes a single set of props and valid attributes. It\n * adds a null sentinel to the updatePayload, for each prop key.\n */\nfunction clearNestedProperty(\n  updatePayload: null | Object,\n  prevProp: NestedNode,\n  validAttributes: AttributeConfiguration,\n): null | Object {\n  if (!prevProp) {\n    return updatePayload;\n  }\n\n  if (!isArray(prevProp)) {\n    // Add each property of the leaf.\n    return clearProperties(updatePayload, prevProp, validAttributes);\n  }\n\n  for (let i = 0; i < prevProp.length; i++) {\n    // Add all the properties of the array.\n    updatePayload = clearNestedProperty(\n      updatePayload,\n      prevProp[i],\n      validAttributes,\n    );\n  }\n  return updatePayload;\n}\n\n/**\n * diffProperties takes two sets of props and a set of valid attributes\n * and write to updatePayload the values that changed or were deleted.\n * If no updatePayload is provided, a new one is created and returned if\n * anything changed.\n */\nfunction diffProperties(\n  updatePayload: null | Object,\n  prevProps: Object,\n  nextProps: Object,\n  validAttributes: AttributeConfiguration,\n): null | Object {\n  let attributeConfig;\n  let nextProp;\n  let prevProp;\n\n  for (const propKey in nextProps) {\n    attributeConfig = validAttributes[propKey];\n    if (!attributeConfig) {\n      continue; // not a valid native prop\n    }\n\n    prevProp = prevProps[propKey];\n    nextProp = nextProps[propKey];\n\n    // functions are converted to booleans as markers that the associated\n    // events should be sent from native.\n    if (typeof nextProp === 'function') {\n      nextProp = (true: any);\n      // If nextProp is not a function, then don't bother changing prevProp\n      // since nextProp will win and go into the updatePayload regardless.\n      if (typeof prevProp === 'function') {\n        prevProp = (true: any);\n      }\n    }\n\n    // An explicit value of undefined is treated as a null because it overrides\n    // any other preceding value.\n    if (typeof nextProp === 'undefined') {\n      nextProp = (null: any);\n      if (typeof prevProp === 'undefined') {\n        prevProp = (null: any);\n      }\n    }\n\n    if (removedKeys) {\n      removedKeys[propKey] = false;\n    }\n\n    if (updatePayload && updatePayload[propKey] !== undefined) {\n      // Something else already triggered an update to this key because another\n      // value diffed. Since we're now later in the nested arrays our value is\n      // more important so we need to calculate it and override the existing\n      // value. It doesn't matter if nothing changed, we'll set it anyway.\n\n      // Pattern match on: attributeConfig\n      if (typeof attributeConfig !== 'object') {\n        // case: !Object is the default case\n        updatePayload[propKey] = nextProp;\n      } else if (\n        typeof attributeConfig.diff === 'function' ||\n        typeof attributeConfig.process === 'function'\n      ) {\n        // case: CustomAttributeConfiguration\n        const nextValue =\n          typeof attributeConfig.process === 'function'\n            ? attributeConfig.process(nextProp)\n            : nextProp;\n        updatePayload[propKey] = nextValue;\n      }\n      continue;\n    }\n\n    if (prevProp === nextProp) {\n      continue; // nothing changed\n    }\n\n    // Pattern match on: attributeConfig\n    if (typeof attributeConfig !== 'object') {\n      // case: !Object is the default case\n      if (defaultDiffer(prevProp, nextProp)) {\n        // a normal leaf has changed\n        (updatePayload || (updatePayload = {}))[propKey] = nextProp;\n      }\n    } else if (\n      typeof attributeConfig.diff === 'function' ||\n      typeof attributeConfig.process === 'function'\n    ) {\n      // case: CustomAttributeConfiguration\n      const shouldUpdate =\n        prevProp === undefined ||\n        (typeof attributeConfig.diff === 'function'\n          ? attributeConfig.diff(prevProp, nextProp)\n          : defaultDiffer(prevProp, nextProp));\n      if (shouldUpdate) {\n        const nextValue =\n          typeof attributeConfig.process === 'function'\n            ? attributeConfig.process(nextProp)\n            : nextProp;\n        (updatePayload || (updatePayload = {}))[propKey] = nextValue;\n      }\n    } else {\n      // default: fallthrough case when nested properties are defined\n      removedKeys = null;\n      removedKeyCount = 0;\n      // We think that attributeConfig is not CustomAttributeConfiguration at\n      // this point so we assume it must be AttributeConfiguration.\n      updatePayload = diffNestedProperty(\n        updatePayload,\n        prevProp,\n        nextProp,\n        ((attributeConfig: any): AttributeConfiguration),\n      );\n      if (removedKeyCount > 0 && updatePayload) {\n        restoreDeletedValuesInNestedArray(\n          updatePayload,\n          nextProp,\n          ((attributeConfig: any): AttributeConfiguration),\n        );\n        removedKeys = null;\n      }\n    }\n  }\n\n  // Also iterate through all the previous props to catch any that have been\n  // removed and make sure native gets the signal so it can reset them to the\n  // default.\n  for (const propKey in prevProps) {\n    if (nextProps[propKey] !== undefined) {\n      continue; // we've already covered this key in the previous pass\n    }\n    attributeConfig = validAttributes[propKey];\n    if (!attributeConfig) {\n      continue; // not a valid native prop\n    }\n\n    if (updatePayload && updatePayload[propKey] !== undefined) {\n      // This was already updated to a diff result earlier.\n      continue;\n    }\n\n    prevProp = prevProps[propKey];\n    if (prevProp === undefined) {\n      continue; // was already empty anyway\n    }\n    // Pattern match on: attributeConfig\n    if (\n      typeof attributeConfig !== 'object' ||\n      typeof attributeConfig.diff === 'function' ||\n      typeof attributeConfig.process === 'function'\n    ) {\n      // case: CustomAttributeConfiguration | !Object\n      // Flag the leaf property for removal by sending a sentinel.\n      (updatePayload || (updatePayload = {}))[propKey] = null;\n      if (!removedKeys) {\n        removedKeys = {};\n      }\n      if (!removedKeys[propKey]) {\n        removedKeys[propKey] = true;\n        removedKeyCount++;\n      }\n    } else {\n      // default:\n      // This is a nested attribute configuration where all the properties\n      // were removed so we need to go through and clear out all of them.\n      updatePayload = clearNestedProperty(\n        updatePayload,\n        prevProp,\n        ((attributeConfig: any): AttributeConfiguration),\n      );\n    }\n  }\n  return updatePayload;\n}\n\n/**\n * addProperties adds all the valid props to the payload after being processed.\n */\nfunction addProperties(\n  updatePayload: null | Object,\n  props: Object,\n  validAttributes: AttributeConfiguration,\n): null | Object {\n  // TODO: Fast path\n  return diffProperties(updatePayload, emptyObject, props, validAttributes);\n}\n\n/**\n * clearProperties clears all the previous props by adding a null sentinel\n * to the payload for each valid key.\n */\nfunction clearProperties(\n  updatePayload: null | Object,\n  prevProps: Object,\n  validAttributes: AttributeConfiguration,\n): null | Object {\n  // TODO: Fast path\n  return diffProperties(updatePayload, prevProps, emptyObject, validAttributes);\n}\n\nexport function create(\n  props: Object,\n  validAttributes: AttributeConfiguration,\n): null | Object {\n  return addProperties(\n    null, // updatePayload\n    props,\n    validAttributes,\n  );\n}\n\nexport function diff(\n  prevProps: Object,\n  nextProps: Object,\n  validAttributes: AttributeConfiguration,\n): null | Object {\n  return diffProperties(\n    null, // updatePayload\n    prevProps,\n    nextProps,\n    validAttributes,\n  );\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\n/**\n * In the future, we should cleanup callbacks by cancelling them instead of\n * using this.\n */\nexport function mountSafeCallback_NOT_REALLY_SAFE(\n  context: any,\n  callback: ?Function,\n): any {\n  return function() {\n    if (!callback) {\n      return undefined;\n    }\n    // This protects against createClass() components.\n    // We don't know if there is code depending on it.\n    // We intentionally don't use isMounted() because even accessing\n    // isMounted property on a React ES6 class will trigger a warning.\n    if (typeof context.__isMounted === 'boolean') {\n      if (!context.__isMounted) {\n        return undefined;\n      }\n    }\n\n    // FIXME: there used to be other branches that protected\n    // against unmounted host components. But RN host components don't\n    // define isMounted() anymore, so those checks didn't do anything.\n\n    // They caused false positive warning noise so we removed them:\n    // https://github.com/facebook/react-native/issues/18868#issuecomment-413579095\n\n    // However, this means that the callback is NOT guaranteed to be safe\n    // for host components. The solution we should implement is to make\n    // UIManager.measure() and similar calls truly cancelable. Then we\n    // can change our own code calling them to cancel when something unmounts.\n\n    return callback.apply(context, arguments);\n  };\n}\n\nexport function throwOnStylesProp(component: any, props: any) {\n  if (props.styles !== undefined) {\n    const owner = component._owner || null;\n    const name = component.constructor.displayName;\n    let msg =\n      '`styles` is not a supported property of `' +\n      name +\n      '`, did ' +\n      'you mean `style` (singular)?';\n    if (owner && owner.constructor && owner.constructor.displayName) {\n      msg +=\n        '\\n\\nCheck the `' +\n        owner.constructor.displayName +\n        '` parent ' +\n        ' component.';\n    }\n    throw new Error(msg);\n  }\n}\n\nexport function warnForStyleProps(props: any, validAttributes: any) {\n  if (__DEV__) {\n    for (const key in validAttributes.style) {\n      if (!(validAttributes[key] || props[key] === undefined)) {\n        console.error(\n          'You are setting the style `{ %s' +\n            ': ... }` as a prop. You ' +\n            'should nest it in a style object. ' +\n            'E.g. `{ style: { %s' +\n            ': ... } }`',\n          key,\n          key,\n        );\n      }\n    }\n  }\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {ElementRef} from 'react';\nimport type {\n  HostComponent,\n  MeasureInWindowOnSuccessCallback,\n  MeasureLayoutOnSuccessCallback,\n  MeasureOnSuccessCallback,\n  NativeMethods,\n  ViewConfig,\n} from './ReactNativeTypes';\nimport type {Instance} from './ReactNativeHostConfig';\n\n// Modules provided by RN:\nimport {\n  TextInputState,\n  UIManager,\n} from 'react-native/Libraries/ReactPrivate/ReactNativePrivateInterface';\n\nimport {create} from './ReactNativeAttributePayload';\nimport {\n  mountSafeCallback_NOT_REALLY_SAFE,\n  warnForStyleProps,\n} from './NativeMethodsMixinUtils';\n\nclass ReactNativeFiberHostComponent {\n  _children: Array<Instance | number>;\n  _nativeTag: number;\n  _internalFiberInstanceHandleDEV: Object;\n  viewConfig: ViewConfig;\n\n  constructor(\n    tag: number,\n    viewConfig: ViewConfig,\n    internalInstanceHandleDEV: Object,\n  ) {\n    this._nativeTag = tag;\n    this._children = [];\n    this.viewConfig = viewConfig;\n    if (__DEV__) {\n      this._internalFiberInstanceHandleDEV = internalInstanceHandleDEV;\n    }\n  }\n\n  blur() {\n    TextInputState.blurTextInput(this);\n  }\n\n  focus() {\n    TextInputState.focusTextInput(this);\n  }\n\n  measure(callback: MeasureOnSuccessCallback) {\n    UIManager.measure(\n      this._nativeTag,\n      mountSafeCallback_NOT_REALLY_SAFE(this, callback),\n    );\n  }\n\n  measureInWindow(callback: MeasureInWindowOnSuccessCallback) {\n    UIManager.measureInWindow(\n      this._nativeTag,\n      mountSafeCallback_NOT_REALLY_SAFE(this, callback),\n    );\n  }\n\n  measureLayout(\n    relativeToNativeNode: number | ElementRef<HostComponent<mixed>>,\n    onSuccess: MeasureLayoutOnSuccessCallback,\n    onFail?: () => void /* currently unused */,\n  ) {\n    let relativeNode: ?number;\n\n    if (typeof relativeToNativeNode === 'number') {\n      // Already a node handle\n      relativeNode = relativeToNativeNode;\n    } else {\n      const nativeNode: ReactNativeFiberHostComponent = (relativeToNativeNode: any);\n      if (nativeNode._nativeTag) {\n        relativeNode = nativeNode._nativeTag;\n      }\n    }\n\n    if (relativeNode == null) {\n      if (__DEV__) {\n        console.error(\n          'Warning: ref.measureLayout must be called with a node handle or a ref to a native component.',\n        );\n      }\n\n      return;\n    }\n\n    UIManager.measureLayout(\n      this._nativeTag,\n      relativeNode,\n      mountSafeCallback_NOT_REALLY_SAFE(this, onFail),\n      mountSafeCallback_NOT_REALLY_SAFE(this, onSuccess),\n    );\n  }\n\n  setNativeProps(nativeProps: Object) {\n    if (__DEV__) {\n      warnForStyleProps(nativeProps, this.viewConfig.validAttributes);\n    }\n\n    const updatePayload = create(nativeProps, this.viewConfig.validAttributes);\n\n    // Avoid the overhead of bridge calls if there's no update.\n    // This is an expensive no-op for Android, and causes an unnecessary\n    // view invalidation for certain components (eg RCTTextInput) on iOS.\n    if (updatePayload != null) {\n      UIManager.updateView(\n        this._nativeTag,\n        this.viewConfig.uiViewClassName,\n        updatePayload,\n      );\n    }\n  }\n}\n\n// eslint-disable-next-line no-unused-expressions\n(ReactNativeFiberHostComponent.prototype: $ReadOnly<{...NativeMethods, ...}>);\n\nexport default ReactNativeFiberHostComponent;\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\n// This module only exists as an ESM wrapper around the external CommonJS\n// Scheduler dependency. Notice that we're intentionally not using named imports\n// because Rollup would use dynamic dispatch for CommonJS interop named imports.\n// When we switch to ESM, we can delete this module.\nimport * as Scheduler from 'scheduler';\n\nexport const scheduleCallback = Scheduler.unstable_scheduleCallback;\nexport const cancelCallback = Scheduler.unstable_cancelCallback;\nexport const shouldYield = Scheduler.unstable_shouldYield;\nexport const requestPaint = Scheduler.unstable_requestPaint;\nexport const now = Scheduler.unstable_now;\nexport const getCurrentPriorityLevel =\n  Scheduler.unstable_getCurrentPriorityLevel;\nexport const ImmediatePriority = Scheduler.unstable_ImmediatePriority;\nexport const UserBlockingPriority = Scheduler.unstable_UserBlockingPriority;\nexport const NormalPriority = Scheduler.unstable_NormalPriority;\nexport const LowPriority = Scheduler.unstable_LowPriority;\nexport const IdlePriority = Scheduler.unstable_IdlePriority;\nexport type SchedulerCallback = (isSync: boolean) => SchedulerCallback | null;\n\n// this doesn't actually exist on the scheduler, but it *does*\n// on scheduler/unstable_mock, which we'll need for internal testing\nexport const unstable_yieldValue = Scheduler.unstable_yieldValue;\nexport const unstable_setDisableYieldValue =\n  Scheduler.unstable_setDisableYieldValue;\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport {enableProfilerTimer} from 'shared/ReactFeatureFlags';\n\nimport type {Fiber, FiberRoot} from './ReactInternalTypes';\nimport type {ReactNodeList} from 'shared/ReactTypes';\nimport type {EventPriority} from './ReactEventPriorities.old';\n\nimport {DidCapture} from './ReactFiberFlags';\nimport {\n  DiscreteEventPriority,\n  ContinuousEventPriority,\n  DefaultEventPriority,\n  IdleEventPriority,\n} from './ReactEventPriorities.old';\nimport {\n  ImmediatePriority as ImmediateSchedulerPriority,\n  UserBlockingPriority as UserBlockingSchedulerPriority,\n  NormalPriority as NormalSchedulerPriority,\n  IdlePriority as IdleSchedulerPriority,\n} from './Scheduler';\n\ndeclare var __REACT_DEVTOOLS_GLOBAL_HOOK__: Object | void;\n\nlet rendererID = null;\nlet injectedHook = null;\nlet hasLoggedError = false;\n\nexport const isDevToolsPresent =\n  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined';\n\nexport function injectInternals(internals: Object): boolean {\n  if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined') {\n    // No DevTools\n    return false;\n  }\n  const hook = __REACT_DEVTOOLS_GLOBAL_HOOK__;\n  if (hook.isDisabled) {\n    // This isn't a real property on the hook, but it can be set to opt out\n    // of DevTools integration and associated warnings and logs.\n    // https://github.com/facebook/react/issues/3877\n    return true;\n  }\n  if (!hook.supportsFiber) {\n    if (__DEV__) {\n      console.error(\n        'The installed version of React DevTools is too old and will not work ' +\n          'with the current version of React. Please update React DevTools. ' +\n          'https://reactjs.org/link/react-devtools',\n      );\n    }\n    // DevTools exists, even though it doesn't support Fiber.\n    return true;\n  }\n  try {\n    rendererID = hook.inject(internals);\n    // We have successfully injected, so now it is safe to set up hooks.\n    injectedHook = hook;\n  } catch (err) {\n    // Catch all errors because it is unsafe to throw during initialization.\n    if (__DEV__) {\n      console.error('React instrumentation encountered an error: %s.', err);\n    }\n  }\n  if (hook.checkDCE) {\n    // This is the real DevTools.\n    return true;\n  } else {\n    // This is likely a hook installed by Fast Refresh runtime.\n    return false;\n  }\n}\n\nexport function onScheduleRoot(root: FiberRoot, children: ReactNodeList) {\n  if (__DEV__) {\n    if (\n      injectedHook &&\n      typeof injectedHook.onScheduleFiberRoot === 'function'\n    ) {\n      try {\n        injectedHook.onScheduleFiberRoot(rendererID, root, children);\n      } catch (err) {\n        if (__DEV__ && !hasLoggedError) {\n          hasLoggedError = true;\n          console.error('React instrumentation encountered an error: %s', err);\n        }\n      }\n    }\n  }\n}\n\nexport function onCommitRoot(root: FiberRoot, eventPriority: EventPriority) {\n  if (injectedHook && typeof injectedHook.onCommitFiberRoot === 'function') {\n    try {\n      const didError = (root.current.flags & DidCapture) === DidCapture;\n      if (enableProfilerTimer) {\n        let schedulerPriority;\n        switch (eventPriority) {\n          case DiscreteEventPriority:\n            schedulerPriority = ImmediateSchedulerPriority;\n            break;\n          case ContinuousEventPriority:\n            schedulerPriority = UserBlockingSchedulerPriority;\n            break;\n          case DefaultEventPriority:\n            schedulerPriority = NormalSchedulerPriority;\n            break;\n          case IdleEventPriority:\n            schedulerPriority = IdleSchedulerPriority;\n            break;\n          default:\n            schedulerPriority = NormalSchedulerPriority;\n            break;\n        }\n        injectedHook.onCommitFiberRoot(\n          rendererID,\n          root,\n          schedulerPriority,\n          didError,\n        );\n      } else {\n        injectedHook.onCommitFiberRoot(rendererID, root, undefined, didError);\n      }\n    } catch (err) {\n      if (__DEV__) {\n        if (!hasLoggedError) {\n          hasLoggedError = true;\n          console.error('React instrumentation encountered an error: %s', err);\n        }\n      }\n    }\n  }\n}\n\nexport function onPostCommitRoot(root: FiberRoot) {\n  if (\n    injectedHook &&\n    typeof injectedHook.onPostCommitFiberRoot === 'function'\n  ) {\n    try {\n      injectedHook.onPostCommitFiberRoot(rendererID, root);\n    } catch (err) {\n      if (__DEV__) {\n        if (!hasLoggedError) {\n          hasLoggedError = true;\n          console.error('React instrumentation encountered an error: %s', err);\n        }\n      }\n    }\n  }\n}\n\nexport function onCommitUnmount(fiber: Fiber) {\n  if (injectedHook && typeof injectedHook.onCommitFiberUnmount === 'function') {\n    try {\n      injectedHook.onCommitFiberUnmount(rendererID, fiber);\n    } catch (err) {\n      if (__DEV__) {\n        if (!hasLoggedError) {\n          hasLoggedError = true;\n          console.error('React instrumentation encountered an error: %s', err);\n        }\n      }\n    }\n  }\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nexport type TypeOfMode = number;\n\nexport const NoMode = /*                         */ 0b000000;\n// TODO: Remove ConcurrentMode by reading from the root tag instead\nexport const ConcurrentMode = /*                 */ 0b000001;\nexport const ProfileMode = /*                    */ 0b000010;\nexport const DebugTracingMode = /*               */ 0b000100;\nexport const StrictLegacyMode = /*               */ 0b001000;\nexport const StrictEffectsMode = /*              */ 0b010000;\nexport const ConcurrentUpdatesByDefaultMode = /* */ 0b100000;\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {FiberRoot} from './ReactInternalTypes';\n\n// TODO: Ideally these types would be opaque but that doesn't work well with\n// our reconciler fork infra, since these leak into non-reconciler packages.\n\nexport type Lanes = number;\nexport type Lane = number;\nexport type LaneMap<T> = Array<T>;\n\nimport {\n  enableCache,\n  enableSchedulingProfiler,\n  enableUpdaterTracking,\n  allowConcurrentByDefault,\n} from 'shared/ReactFeatureFlags';\nimport {isDevToolsPresent} from './ReactFiberDevToolsHook.old';\nimport {ConcurrentUpdatesByDefaultMode, NoMode} from './ReactTypeOfMode';\n\n// Lane values below should be kept in sync with getLabelForLane(), used by react-devtools-scheduling-profiler.\n// If those values are changed that package should be rebuilt and redeployed.\n\nexport const TotalLanes = 31;\n\nexport const NoLanes: Lanes = /*                        */ 0b0000000000000000000000000000000;\nexport const NoLane: Lane = /*                          */ 0b0000000000000000000000000000000;\n\nexport const SyncLane: Lane = /*                        */ 0b0000000000000000000000000000001;\n\nexport const InputContinuousHydrationLane: Lane = /*    */ 0b0000000000000000000000000000010;\nexport const InputContinuousLane: Lanes = /*            */ 0b0000000000000000000000000000100;\n\nexport const DefaultHydrationLane: Lane = /*            */ 0b0000000000000000000000000001000;\nexport const DefaultLane: Lanes = /*                    */ 0b0000000000000000000000000010000;\n\nconst TransitionHydrationLane: Lane = /*                */ 0b0000000000000000000000000100000;\nconst TransitionLanes: Lanes = /*                       */ 0b0000000001111111111111111000000;\nconst TransitionLane1: Lane = /*                        */ 0b0000000000000000000000001000000;\nconst TransitionLane2: Lane = /*                        */ 0b0000000000000000000000010000000;\nconst TransitionLane3: Lane = /*                        */ 0b0000000000000000000000100000000;\nconst TransitionLane4: Lane = /*                        */ 0b0000000000000000000001000000000;\nconst TransitionLane5: Lane = /*                        */ 0b0000000000000000000010000000000;\nconst TransitionLane6: Lane = /*                        */ 0b0000000000000000000100000000000;\nconst TransitionLane7: Lane = /*                        */ 0b0000000000000000001000000000000;\nconst TransitionLane8: Lane = /*                        */ 0b0000000000000000010000000000000;\nconst TransitionLane9: Lane = /*                        */ 0b0000000000000000100000000000000;\nconst TransitionLane10: Lane = /*                       */ 0b0000000000000001000000000000000;\nconst TransitionLane11: Lane = /*                       */ 0b0000000000000010000000000000000;\nconst TransitionLane12: Lane = /*                       */ 0b0000000000000100000000000000000;\nconst TransitionLane13: Lane = /*                       */ 0b0000000000001000000000000000000;\nconst TransitionLane14: Lane = /*                       */ 0b0000000000010000000000000000000;\nconst TransitionLane15: Lane = /*                       */ 0b0000000000100000000000000000000;\nconst TransitionLane16: Lane = /*                       */ 0b0000000001000000000000000000000;\n\nconst RetryLanes: Lanes = /*                            */ 0b0000111110000000000000000000000;\nconst RetryLane1: Lane = /*                             */ 0b0000000010000000000000000000000;\nconst RetryLane2: Lane = /*                             */ 0b0000000100000000000000000000000;\nconst RetryLane3: Lane = /*                             */ 0b0000001000000000000000000000000;\nconst RetryLane4: Lane = /*                             */ 0b0000010000000000000000000000000;\nconst RetryLane5: Lane = /*                             */ 0b0000100000000000000000000000000;\n\nexport const SomeRetryLane: Lane = RetryLane1;\n\nexport const SelectiveHydrationLane: Lane = /*          */ 0b0001000000000000000000000000000;\n\nconst NonIdleLanes = /*                                 */ 0b0001111111111111111111111111111;\n\nexport const IdleHydrationLane: Lane = /*               */ 0b0010000000000000000000000000000;\nexport const IdleLane: Lanes = /*                       */ 0b0100000000000000000000000000000;\n\nexport const OffscreenLane: Lane = /*                   */ 0b1000000000000000000000000000000;\n\n// This function is used for the experimental scheduling profiler (react-devtools-scheduling-profiler)\n// It should be kept in sync with the Lanes values above.\nexport function getLabelForLane(lane: Lane): string | void {\n  if (enableSchedulingProfiler) {\n    if (lane & SyncLane) {\n      return 'Sync';\n    }\n    if (lane & InputContinuousHydrationLane) {\n      return 'InputContinuousHydration';\n    }\n    if (lane & InputContinuousLane) {\n      return 'InputContinuous';\n    }\n    if (lane & DefaultHydrationLane) {\n      return 'DefaultHydration';\n    }\n    if (lane & DefaultLane) {\n      return 'Default';\n    }\n    if (lane & TransitionHydrationLane) {\n      return 'TransitionHydration';\n    }\n    if (lane & TransitionLanes) {\n      return 'Transition';\n    }\n    if (lane & RetryLanes) {\n      return 'Retry';\n    }\n    if (lane & SelectiveHydrationLane) {\n      return 'SelectiveHydration';\n    }\n    if (lane & IdleHydrationLane) {\n      return 'IdleHydration';\n    }\n    if (lane & IdleLane) {\n      return 'Idle';\n    }\n    if (lane & OffscreenLane) {\n      return 'Offscreen';\n    }\n  }\n}\n\nexport const NoTimestamp = -1;\n\nlet nextTransitionLane: Lane = TransitionLane1;\nlet nextRetryLane: Lane = RetryLane1;\n\nfunction getHighestPriorityLanes(lanes: Lanes | Lane): Lanes {\n  switch (getHighestPriorityLane(lanes)) {\n    case SyncLane:\n      return SyncLane;\n    case InputContinuousHydrationLane:\n      return InputContinuousHydrationLane;\n    case InputContinuousLane:\n      return InputContinuousLane;\n    case DefaultHydrationLane:\n      return DefaultHydrationLane;\n    case DefaultLane:\n      return DefaultLane;\n    case TransitionHydrationLane:\n      return TransitionHydrationLane;\n    case TransitionLane1:\n    case TransitionLane2:\n    case TransitionLane3:\n    case TransitionLane4:\n    case TransitionLane5:\n    case TransitionLane6:\n    case TransitionLane7:\n    case TransitionLane8:\n    case TransitionLane9:\n    case TransitionLane10:\n    case TransitionLane11:\n    case TransitionLane12:\n    case TransitionLane13:\n    case TransitionLane14:\n    case TransitionLane15:\n    case TransitionLane16:\n      return lanes & TransitionLanes;\n    case RetryLane1:\n    case RetryLane2:\n    case RetryLane3:\n    case RetryLane4:\n    case RetryLane5:\n      return lanes & RetryLanes;\n    case SelectiveHydrationLane:\n      return SelectiveHydrationLane;\n    case IdleHydrationLane:\n      return IdleHydrationLane;\n    case IdleLane:\n      return IdleLane;\n    case OffscreenLane:\n      return OffscreenLane;\n    default:\n      if (__DEV__) {\n        console.error(\n          'Should have found matching lanes. This is a bug in React.',\n        );\n      }\n      // This shouldn't be reachable, but as a fallback, return the entire bitmask.\n      return lanes;\n  }\n}\n\nexport function getNextLanes(root: FiberRoot, wipLanes: Lanes): Lanes {\n  // Early bailout if there's no pending work left.\n  const pendingLanes = root.pendingLanes;\n  if (pendingLanes === NoLanes) {\n    return NoLanes;\n  }\n\n  let nextLanes = NoLanes;\n\n  const suspendedLanes = root.suspendedLanes;\n  const pingedLanes = root.pingedLanes;\n\n  // Do not work on any idle work until all the non-idle work has finished,\n  // even if the work is suspended.\n  const nonIdlePendingLanes = pendingLanes & NonIdleLanes;\n  if (nonIdlePendingLanes !== NoLanes) {\n    const nonIdleUnblockedLanes = nonIdlePendingLanes & ~suspendedLanes;\n    if (nonIdleUnblockedLanes !== NoLanes) {\n      nextLanes = getHighestPriorityLanes(nonIdleUnblockedLanes);\n    } else {\n      const nonIdlePingedLanes = nonIdlePendingLanes & pingedLanes;\n      if (nonIdlePingedLanes !== NoLanes) {\n        nextLanes = getHighestPriorityLanes(nonIdlePingedLanes);\n      }\n    }\n  } else {\n    // The only remaining work is Idle.\n    const unblockedLanes = pendingLanes & ~suspendedLanes;\n    if (unblockedLanes !== NoLanes) {\n      nextLanes = getHighestPriorityLanes(unblockedLanes);\n    } else {\n      if (pingedLanes !== NoLanes) {\n        nextLanes = getHighestPriorityLanes(pingedLanes);\n      }\n    }\n  }\n\n  if (nextLanes === NoLanes) {\n    // This should only be reachable if we're suspended\n    // TODO: Consider warning in this path if a fallback timer is not scheduled.\n    return NoLanes;\n  }\n\n  // If we're already in the middle of a render, switching lanes will interrupt\n  // it and we'll lose our progress. We should only do this if the new lanes are\n  // higher priority.\n  if (\n    wipLanes !== NoLanes &&\n    wipLanes !== nextLanes &&\n    // If we already suspended with a delay, then interrupting is fine. Don't\n    // bother waiting until the root is complete.\n    (wipLanes & suspendedLanes) === NoLanes\n  ) {\n    const nextLane = getHighestPriorityLane(nextLanes);\n    const wipLane = getHighestPriorityLane(wipLanes);\n    if (\n      // Tests whether the next lane is equal or lower priority than the wip\n      // one. This works because the bits decrease in priority as you go left.\n      nextLane >= wipLane ||\n      // Default priority updates should not interrupt transition updates. The\n      // only difference between default updates and transition updates is that\n      // default updates do not support refresh transitions.\n      (nextLane === DefaultLane && (wipLane & TransitionLanes) !== NoLanes)\n    ) {\n      // Keep working on the existing in-progress tree. Do not interrupt.\n      return wipLanes;\n    }\n  }\n\n  if (\n    allowConcurrentByDefault &&\n    (root.current.mode & ConcurrentUpdatesByDefaultMode) !== NoMode\n  ) {\n    // Do nothing, use the lanes as they were assigned.\n  } else if ((nextLanes & InputContinuousLane) !== NoLanes) {\n    // When updates are sync by default, we entangle continuous priority updates\n    // and default updates, so they render in the same batch. The only reason\n    // they use separate lanes is because continuous updates should interrupt\n    // transitions, but default updates should not.\n    nextLanes |= pendingLanes & DefaultLane;\n  }\n\n  // Check for entangled lanes and add them to the batch.\n  //\n  // A lane is said to be entangled with another when it's not allowed to render\n  // in a batch that does not also include the other lane. Typically we do this\n  // when multiple updates have the same source, and we only want to respond to\n  // the most recent event from that source.\n  //\n  // Note that we apply entanglements *after* checking for partial work above.\n  // This means that if a lane is entangled during an interleaved event while\n  // it's already rendering, we won't interrupt it. This is intentional, since\n  // entanglement is usually \"best effort\": we'll try our best to render the\n  // lanes in the same batch, but it's not worth throwing out partially\n  // completed work in order to do it.\n  // TODO: Reconsider this. The counter-argument is that the partial work\n  // represents an intermediate state, which we don't want to show to the user.\n  // And by spending extra time finishing it, we're increasing the amount of\n  // time it takes to show the final state, which is what they are actually\n  // waiting for.\n  //\n  // For those exceptions where entanglement is semantically important, like\n  // useMutableSource, we should ensure that there is no partial work at the\n  // time we apply the entanglement.\n  const entangledLanes = root.entangledLanes;\n  if (entangledLanes !== NoLanes) {\n    const entanglements = root.entanglements;\n    let lanes = nextLanes & entangledLanes;\n    while (lanes > 0) {\n      const index = pickArbitraryLaneIndex(lanes);\n      const lane = 1 << index;\n\n      nextLanes |= entanglements[index];\n\n      lanes &= ~lane;\n    }\n  }\n\n  return nextLanes;\n}\n\nexport function getMostRecentEventTime(root: FiberRoot, lanes: Lanes): number {\n  const eventTimes = root.eventTimes;\n\n  let mostRecentEventTime = NoTimestamp;\n  while (lanes > 0) {\n    const index = pickArbitraryLaneIndex(lanes);\n    const lane = 1 << index;\n\n    const eventTime = eventTimes[index];\n    if (eventTime > mostRecentEventTime) {\n      mostRecentEventTime = eventTime;\n    }\n\n    lanes &= ~lane;\n  }\n\n  return mostRecentEventTime;\n}\n\nfunction computeExpirationTime(lane: Lane, currentTime: number) {\n  switch (lane) {\n    case SyncLane:\n    case InputContinuousHydrationLane:\n    case InputContinuousLane:\n      // User interactions should expire slightly more quickly.\n      //\n      // NOTE: This is set to the corresponding constant as in Scheduler.js.\n      // When we made it larger, a product metric in www regressed, suggesting\n      // there's a user interaction that's being starved by a series of\n      // synchronous updates. If that theory is correct, the proper solution is\n      // to fix the starvation. However, this scenario supports the idea that\n      // expiration times are an important safeguard when starvation\n      // does happen.\n      return currentTime + 250;\n    case DefaultHydrationLane:\n    case DefaultLane:\n    case TransitionHydrationLane:\n    case TransitionLane1:\n    case TransitionLane2:\n    case TransitionLane3:\n    case TransitionLane4:\n    case TransitionLane5:\n    case TransitionLane6:\n    case TransitionLane7:\n    case TransitionLane8:\n    case TransitionLane9:\n    case TransitionLane10:\n    case TransitionLane11:\n    case TransitionLane12:\n    case TransitionLane13:\n    case TransitionLane14:\n    case TransitionLane15:\n    case TransitionLane16:\n      return currentTime + 5000;\n    case RetryLane1:\n    case RetryLane2:\n    case RetryLane3:\n    case RetryLane4:\n    case RetryLane5:\n      // TODO: Retries should be allowed to expire if they are CPU bound for\n      // too long, but when I made this change it caused a spike in browser\n      // crashes. There must be some other underlying bug; not super urgent but\n      // ideally should figure out why and fix it. Unfortunately we don't have\n      // a repro for the crashes, only detected via production metrics.\n      return NoTimestamp;\n    case SelectiveHydrationLane:\n    case IdleHydrationLane:\n    case IdleLane:\n    case OffscreenLane:\n      // Anything idle priority or lower should never expire.\n      return NoTimestamp;\n    default:\n      if (__DEV__) {\n        console.error(\n          'Should have found matching lanes. This is a bug in React.',\n        );\n      }\n      return NoTimestamp;\n  }\n}\n\nexport function markStarvedLanesAsExpired(\n  root: FiberRoot,\n  currentTime: number,\n): void {\n  // TODO: This gets called every time we yield. We can optimize by storing\n  // the earliest expiration time on the root. Then use that to quickly bail out\n  // of this function.\n\n  const pendingLanes = root.pendingLanes;\n  const suspendedLanes = root.suspendedLanes;\n  const pingedLanes = root.pingedLanes;\n  const expirationTimes = root.expirationTimes;\n\n  // Iterate through the pending lanes and check if we've reached their\n  // expiration time. If so, we'll assume the update is being starved and mark\n  // it as expired to force it to finish.\n  let lanes = pendingLanes;\n  while (lanes > 0) {\n    const index = pickArbitraryLaneIndex(lanes);\n    const lane = 1 << index;\n\n    const expirationTime = expirationTimes[index];\n    if (expirationTime === NoTimestamp) {\n      // Found a pending lane with no expiration time. If it's not suspended, or\n      // if it's pinged, assume it's CPU-bound. Compute a new expiration time\n      // using the current time.\n      if (\n        (lane & suspendedLanes) === NoLanes ||\n        (lane & pingedLanes) !== NoLanes\n      ) {\n        // Assumes timestamps are monotonically increasing.\n        expirationTimes[index] = computeExpirationTime(lane, currentTime);\n      }\n    } else if (expirationTime <= currentTime) {\n      // This lane expired\n      root.expiredLanes |= lane;\n    }\n\n    lanes &= ~lane;\n  }\n}\n\n// This returns the highest priority pending lanes regardless of whether they\n// are suspended.\nexport function getHighestPriorityPendingLanes(root: FiberRoot) {\n  return getHighestPriorityLanes(root.pendingLanes);\n}\n\nexport function getLanesToRetrySynchronouslyOnError(root: FiberRoot): Lanes {\n  const everythingButOffscreen = root.pendingLanes & ~OffscreenLane;\n  if (everythingButOffscreen !== NoLanes) {\n    return everythingButOffscreen;\n  }\n  if (everythingButOffscreen & OffscreenLane) {\n    return OffscreenLane;\n  }\n  return NoLanes;\n}\n\nexport function includesNonIdleWork(lanes: Lanes) {\n  return (lanes & NonIdleLanes) !== NoLanes;\n}\nexport function includesOnlyRetries(lanes: Lanes) {\n  return (lanes & RetryLanes) === lanes;\n}\nexport function includesOnlyTransitions(lanes: Lanes) {\n  return (lanes & TransitionLanes) === lanes;\n}\n\nexport function shouldTimeSlice(root: FiberRoot, lanes: Lanes) {\n  if ((lanes & root.expiredLanes) !== NoLanes) {\n    // At least one of these lanes expired. To prevent additional starvation,\n    // finish rendering without yielding execution.\n    return false;\n  }\n\n  if (\n    allowConcurrentByDefault &&\n    (root.current.mode & ConcurrentUpdatesByDefaultMode) !== NoMode\n  ) {\n    // Concurrent updates by default always use time slicing.\n    return true;\n  }\n\n  const SyncDefaultLanes =\n    InputContinuousHydrationLane |\n    InputContinuousLane |\n    DefaultHydrationLane |\n    DefaultLane;\n  return (lanes & SyncDefaultLanes) === NoLanes;\n}\n\nexport function isTransitionLane(lane: Lane) {\n  return (lane & TransitionLanes) !== 0;\n}\n\nexport function claimNextTransitionLane(): Lane {\n  // Cycle through the lanes, assigning each new transition to the next lane.\n  // In most cases, this means every transition gets its own lane, until we\n  // run out of lanes and cycle back to the beginning.\n  const lane = nextTransitionLane;\n  nextTransitionLane <<= 1;\n  if ((nextTransitionLane & TransitionLanes) === 0) {\n    nextTransitionLane = TransitionLane1;\n  }\n  return lane;\n}\n\nexport function claimNextRetryLane(): Lane {\n  const lane = nextRetryLane;\n  nextRetryLane <<= 1;\n  if ((nextRetryLane & RetryLanes) === 0) {\n    nextRetryLane = RetryLane1;\n  }\n  return lane;\n}\n\nexport function getHighestPriorityLane(lanes: Lanes): Lane {\n  return lanes & -lanes;\n}\n\nexport function pickArbitraryLane(lanes: Lanes): Lane {\n  // This wrapper function gets inlined. Only exists so to communicate that it\n  // doesn't matter which bit is selected; you can pick any bit without\n  // affecting the algorithms where its used. Here I'm using\n  // getHighestPriorityLane because it requires the fewest operations.\n  return getHighestPriorityLane(lanes);\n}\n\nfunction pickArbitraryLaneIndex(lanes: Lanes) {\n  return 31 - clz32(lanes);\n}\n\nfunction laneToIndex(lane: Lane) {\n  return pickArbitraryLaneIndex(lane);\n}\n\nexport function includesSomeLane(a: Lanes | Lane, b: Lanes | Lane) {\n  return (a & b) !== NoLanes;\n}\n\nexport function isSubsetOfLanes(set: Lanes, subset: Lanes | Lane) {\n  return (set & subset) === subset;\n}\n\nexport function mergeLanes(a: Lanes | Lane, b: Lanes | Lane): Lanes {\n  return a | b;\n}\n\nexport function removeLanes(set: Lanes, subset: Lanes | Lane): Lanes {\n  return set & ~subset;\n}\n\nexport function intersectLanes(a: Lanes | Lane, b: Lanes | Lane): Lanes {\n  return a & b;\n}\n\n// Seems redundant, but it changes the type from a single lane (used for\n// updates) to a group of lanes (used for flushing work).\nexport function laneToLanes(lane: Lane): Lanes {\n  return lane;\n}\n\nexport function higherPriorityLane(a: Lane, b: Lane) {\n  // This works because the bit ranges decrease in priority as you go left.\n  return a !== NoLane && a < b ? a : b;\n}\n\nexport function createLaneMap<T>(initial: T): LaneMap<T> {\n  // Intentionally pushing one by one.\n  // https://v8.dev/blog/elements-kinds#avoid-creating-holes\n  const laneMap = [];\n  for (let i = 0; i < TotalLanes; i++) {\n    laneMap.push(initial);\n  }\n  return laneMap;\n}\n\nexport function markRootUpdated(\n  root: FiberRoot,\n  updateLane: Lane,\n  eventTime: number,\n) {\n  root.pendingLanes |= updateLane;\n\n  // If there are any suspended transitions, it's possible this new update\n  // could unblock them. Clear the suspended lanes so that we can try rendering\n  // them again.\n  //\n  // TODO: We really only need to unsuspend only lanes that are in the\n  // `subtreeLanes` of the updated fiber, or the update lanes of the return\n  // path. This would exclude suspended updates in an unrelated sibling tree,\n  // since there's no way for this update to unblock it.\n  //\n  // We don't do this if the incoming update is idle, because we never process\n  // idle updates until after all the regular updates have finished; there's no\n  // way it could unblock a transition.\n  if (updateLane !== IdleLane) {\n    root.suspendedLanes = NoLanes;\n    root.pingedLanes = NoLanes;\n  }\n\n  const eventTimes = root.eventTimes;\n  const index = laneToIndex(updateLane);\n  // We can always overwrite an existing timestamp because we prefer the most\n  // recent event, and we assume time is monotonically increasing.\n  eventTimes[index] = eventTime;\n}\n\nexport function markRootSuspended(root: FiberRoot, suspendedLanes: Lanes) {\n  root.suspendedLanes |= suspendedLanes;\n  root.pingedLanes &= ~suspendedLanes;\n\n  // The suspended lanes are no longer CPU-bound. Clear their expiration times.\n  const expirationTimes = root.expirationTimes;\n  let lanes = suspendedLanes;\n  while (lanes > 0) {\n    const index = pickArbitraryLaneIndex(lanes);\n    const lane = 1 << index;\n\n    expirationTimes[index] = NoTimestamp;\n\n    lanes &= ~lane;\n  }\n}\n\nexport function markRootPinged(\n  root: FiberRoot,\n  pingedLanes: Lanes,\n  eventTime: number,\n) {\n  root.pingedLanes |= root.suspendedLanes & pingedLanes;\n}\n\nexport function markRootMutableRead(root: FiberRoot, updateLane: Lane) {\n  root.mutableReadLanes |= updateLane & root.pendingLanes;\n}\n\nexport function markRootFinished(root: FiberRoot, remainingLanes: Lanes) {\n  const noLongerPendingLanes = root.pendingLanes & ~remainingLanes;\n\n  root.pendingLanes = remainingLanes;\n\n  // Let's try everything again\n  root.suspendedLanes = 0;\n  root.pingedLanes = 0;\n\n  root.expiredLanes &= remainingLanes;\n  root.mutableReadLanes &= remainingLanes;\n\n  root.entangledLanes &= remainingLanes;\n\n  if (enableCache) {\n    const pooledCacheLanes = (root.pooledCacheLanes &= remainingLanes);\n    if (pooledCacheLanes === NoLanes) {\n      // None of the remaining work relies on the cache pool. Clear it so\n      // subsequent requests get a new cache.\n      root.pooledCache = null;\n    }\n  }\n\n  const entanglements = root.entanglements;\n  const eventTimes = root.eventTimes;\n  const expirationTimes = root.expirationTimes;\n\n  // Clear the lanes that no longer have pending work\n  let lanes = noLongerPendingLanes;\n  while (lanes > 0) {\n    const index = pickArbitraryLaneIndex(lanes);\n    const lane = 1 << index;\n\n    entanglements[index] = NoLanes;\n    eventTimes[index] = NoTimestamp;\n    expirationTimes[index] = NoTimestamp;\n\n    lanes &= ~lane;\n  }\n}\n\nexport function markRootEntangled(root: FiberRoot, entangledLanes: Lanes) {\n  // In addition to entangling each of the given lanes with each other, we also\n  // have to consider _transitive_ entanglements. For each lane that is already\n  // entangled with *any* of the given lanes, that lane is now transitively\n  // entangled with *all* the given lanes.\n  //\n  // Translated: If C is entangled with A, then entangling A with B also\n  // entangles C with B.\n  //\n  // If this is hard to grasp, it might help to intentionally break this\n  // function and look at the tests that fail in ReactTransition-test.js. Try\n  // commenting out one of the conditions below.\n\n  const rootEntangledLanes = (root.entangledLanes |= entangledLanes);\n  const entanglements = root.entanglements;\n  let lanes = rootEntangledLanes;\n  while (lanes) {\n    const index = pickArbitraryLaneIndex(lanes);\n    const lane = 1 << index;\n    if (\n      // Is this one of the newly entangled lanes?\n      (lane & entangledLanes) |\n      // Is this lane transitively entangled with the newly entangled lanes?\n      (entanglements[index] & entangledLanes)\n    ) {\n      entanglements[index] |= entangledLanes;\n    }\n    lanes &= ~lane;\n  }\n}\n\nexport function getBumpedLaneForHydration(\n  root: FiberRoot,\n  renderLanes: Lanes,\n): Lane {\n  const renderLane = getHighestPriorityLane(renderLanes);\n\n  let lane;\n  switch (renderLane) {\n    case InputContinuousLane:\n      lane = InputContinuousHydrationLane;\n      break;\n    case DefaultLane:\n      lane = DefaultHydrationLane;\n      break;\n    case TransitionLane1:\n    case TransitionLane2:\n    case TransitionLane3:\n    case TransitionLane4:\n    case TransitionLane5:\n    case TransitionLane6:\n    case TransitionLane7:\n    case TransitionLane8:\n    case TransitionLane9:\n    case TransitionLane10:\n    case TransitionLane11:\n    case TransitionLane12:\n    case TransitionLane13:\n    case TransitionLane14:\n    case TransitionLane15:\n    case TransitionLane16:\n    case RetryLane1:\n    case RetryLane2:\n    case RetryLane3:\n    case RetryLane4:\n    case RetryLane5:\n      lane = TransitionHydrationLane;\n      break;\n    case IdleLane:\n      lane = IdleHydrationLane;\n      break;\n    default:\n      // Everything else is already either a hydration lane, or shouldn't\n      // be retried at a hydration lane.\n      lane = NoLane;\n      break;\n  }\n\n  // Check if the lane we chose is suspended. If so, that indicates that we\n  // already attempted and failed to hydrate at that level. Also check if we're\n  // already rendering that lane, which is rare but could happen.\n  if ((lane & (root.suspendedLanes | renderLanes)) !== NoLane) {\n    // Give up trying to hydrate and fall back to client render.\n    return NoLane;\n  }\n\n  return lane;\n}\n\nexport function addFiberToLanesMap(\n  root: FiberRoot,\n  fiber: Fiber,\n  lanes: Lanes | Lane,\n) {\n  if (!enableUpdaterTracking) {\n    return;\n  }\n  if (!isDevToolsPresent) {\n    return;\n  }\n  const pendingUpdatersLaneMap = root.pendingUpdatersLaneMap;\n  while (lanes > 0) {\n    const index = laneToIndex(lanes);\n    const lane = 1 << index;\n\n    const updaters = pendingUpdatersLaneMap[index];\n    updaters.add(fiber);\n\n    lanes &= ~lane;\n  }\n}\n\nexport function movePendingFibersToMemoized(root: FiberRoot, lanes: Lanes) {\n  if (!enableUpdaterTracking) {\n    return;\n  }\n  if (!isDevToolsPresent) {\n    return;\n  }\n  const pendingUpdatersLaneMap = root.pendingUpdatersLaneMap;\n  const memoizedUpdaters = root.memoizedUpdaters;\n  while (lanes > 0) {\n    const index = laneToIndex(lanes);\n    const lane = 1 << index;\n\n    const updaters = pendingUpdatersLaneMap[index];\n    if (updaters.size > 0) {\n      updaters.forEach(fiber => {\n        const alternate = fiber.alternate;\n        if (alternate === null || !memoizedUpdaters.has(alternate)) {\n          memoizedUpdaters.add(fiber);\n        }\n      });\n      updaters.clear();\n    }\n\n    lanes &= ~lane;\n  }\n}\n\nconst clz32 = Math.clz32 ? Math.clz32 : clz32Fallback;\n\n// Count leading zeros. Only used on lanes, so assume input is an integer.\n// Based on:\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/clz32\nconst log = Math.log;\nconst LN2 = Math.LN2;\nfunction clz32Fallback(lanes: Lanes | Lane) {\n  if (lanes === 0) {\n    return 32;\n  }\n  return (31 - ((log(lanes) / LN2) | 0)) | 0;\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Lane, Lanes} from './ReactFiberLane.old';\n\nimport {\n  NoLane,\n  SyncLane,\n  InputContinuousLane,\n  DefaultLane,\n  IdleLane,\n  getHighestPriorityLane,\n  includesNonIdleWork,\n} from './ReactFiberLane.old';\n\nexport opaque type EventPriority = Lane;\n\nexport const DiscreteEventPriority: EventPriority = SyncLane;\nexport const ContinuousEventPriority: EventPriority = InputContinuousLane;\nexport const DefaultEventPriority: EventPriority = DefaultLane;\nexport const IdleEventPriority: EventPriority = IdleLane;\n\nlet currentUpdatePriority: EventPriority = NoLane;\n\nexport function getCurrentUpdatePriority(): EventPriority {\n  return currentUpdatePriority;\n}\n\nexport function setCurrentUpdatePriority(newPriority: EventPriority) {\n  currentUpdatePriority = newPriority;\n}\n\nexport function runWithPriority<T>(priority: EventPriority, fn: () => T): T {\n  const previousPriority = currentUpdatePriority;\n  try {\n    currentUpdatePriority = priority;\n    return fn();\n  } finally {\n    currentUpdatePriority = previousPriority;\n  }\n}\n\nexport function higherEventPriority(\n  a: EventPriority,\n  b: EventPriority,\n): EventPriority {\n  return a !== 0 && a < b ? a : b;\n}\n\nexport function lowerEventPriority(\n  a: EventPriority,\n  b: EventPriority,\n): EventPriority {\n  return a === 0 || a > b ? a : b;\n}\n\nexport function isHigherEventPriority(\n  a: EventPriority,\n  b: EventPriority,\n): boolean {\n  return a !== 0 && a < b;\n}\n\nexport function lanesToEventPriority(lanes: Lanes): EventPriority {\n  const lane = getHighestPriorityLane(lanes);\n  if (!isHigherEventPriority(DiscreteEventPriority, lane)) {\n    return DiscreteEventPriority;\n  }\n  if (!isHigherEventPriority(ContinuousEventPriority, lane)) {\n    return ContinuousEventPriority;\n  }\n  if (includesNonIdleWork(lane)) {\n    return DefaultEventPriority;\n  }\n  return IdleEventPriority;\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport invariant from 'shared/invariant';\n\n// Renderers that don't support hydration\n// can re-export everything from this module.\n\nfunction shim(...args: any) {\n  invariant(\n    false,\n    'The current renderer does not support hydration. ' +\n      'This error is likely caused by a bug in React. ' +\n      'Please file an issue.',\n  );\n}\n\n// Hydration (when unsupported)\nexport type SuspenseInstance = mixed;\nexport const supportsHydration = false;\nexport const canHydrateInstance = shim;\nexport const canHydrateTextInstance = shim;\nexport const canHydrateSuspenseInstance = shim;\nexport const isSuspenseInstancePending = shim;\nexport const isSuspenseInstanceFallback = shim;\nexport const registerSuspenseInstanceRetry = shim;\nexport const getNextHydratableSibling = shim;\nexport const getFirstHydratableChild = shim;\nexport const hydrateInstance = shim;\nexport const hydrateTextInstance = shim;\nexport const hydrateSuspenseInstance = shim;\nexport const getNextHydratableInstanceAfterSuspenseInstance = shim;\nexport const commitHydratedContainer = shim;\nexport const commitHydratedSuspenseInstance = shim;\nexport const clearSuspenseBoundary = shim;\nexport const clearSuspenseBoundaryFromContainer = shim;\nexport const shouldDeleteUnhydratedTailInstances = shim;\nexport const didNotMatchHydratedContainerTextInstance = shim;\nexport const didNotMatchHydratedTextInstance = shim;\nexport const didNotHydrateContainerInstance = shim;\nexport const didNotHydrateInstance = shim;\nexport const didNotFindHydratableContainerInstance = shim;\nexport const didNotFindHydratableContainerTextInstance = shim;\nexport const didNotFindHydratableContainerSuspenseInstance = shim;\nexport const didNotFindHydratableInstance = shim;\nexport const didNotFindHydratableTextInstance = shim;\nexport const didNotFindHydratableSuspenseInstance = shim;\nexport const errorHydratingContainer = shim;\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {TouchedViewDataAtPoint} from './ReactNativeTypes';\n\nimport invariant from 'shared/invariant';\n\n// Modules provided by RN:\nimport {\n  ReactNativeViewConfigRegistry,\n  UIManager,\n  deepFreezeAndThrowOnMutationInDev,\n} from 'react-native/Libraries/ReactPrivate/ReactNativePrivateInterface';\n\nimport {create, diff} from './ReactNativeAttributePayload';\nimport {\n  precacheFiberNode,\n  uncacheFiberNode,\n  updateFiberProps,\n} from './ReactNativeComponentTree';\nimport ReactNativeFiberHostComponent from './ReactNativeFiberHostComponent';\n\nimport {DefaultEventPriority} from 'react-reconciler/src/ReactEventPriorities';\n\nconst {get: getViewConfigForType} = ReactNativeViewConfigRegistry;\n\nexport type Type = string;\nexport type Props = Object;\nexport type Container = number;\nexport type Instance = ReactNativeFiberHostComponent;\nexport type TextInstance = number;\nexport type HydratableInstance = Instance | TextInstance;\nexport type PublicInstance = Instance;\nexport type HostContext = $ReadOnly<{|\n  isInAParentText: boolean,\n|}>;\nexport type UpdatePayload = Object; // Unused\nexport type ChildSet = void; // Unused\n\nexport type TimeoutHandle = TimeoutID;\nexport type NoTimeout = -1;\nexport type OpaqueIDType = void;\n\nexport type RendererInspectionConfig = $ReadOnly<{|\n  // Deprecated. Replaced with getInspectorDataForViewAtPoint.\n  getInspectorDataForViewTag?: (tag: number) => Object,\n  getInspectorDataForViewAtPoint?: (\n    inspectedView: Object,\n    locationX: number,\n    locationY: number,\n    callback: (viewData: TouchedViewDataAtPoint) => mixed,\n  ) => void,\n|}>;\n\nconst UPDATE_SIGNAL = {};\nif (__DEV__) {\n  Object.freeze(UPDATE_SIGNAL);\n}\n\n// Counter for uniquely identifying views.\n// % 10 === 1 means it is a rootTag.\n// % 2 === 0 means it is a Fabric tag.\nlet nextReactTag = 3;\nfunction allocateTag() {\n  let tag = nextReactTag;\n  if (tag % 10 === 1) {\n    tag += 2;\n  }\n  nextReactTag = tag + 2;\n  return tag;\n}\n\nfunction recursivelyUncacheFiberNode(node: Instance | TextInstance) {\n  if (typeof node === 'number') {\n    // Leaf node (eg text)\n    uncacheFiberNode(node);\n  } else {\n    uncacheFiberNode((node: any)._nativeTag);\n\n    (node: any)._children.forEach(recursivelyUncacheFiberNode);\n  }\n}\n\nexport * from 'react-reconciler/src/ReactFiberHostConfigWithNoPersistence';\nexport * from 'react-reconciler/src/ReactFiberHostConfigWithNoHydration';\nexport * from 'react-reconciler/src/ReactFiberHostConfigWithNoScopes';\nexport * from 'react-reconciler/src/ReactFiberHostConfigWithNoTestSelectors';\nexport * from 'react-reconciler/src/ReactFiberHostConfigWithNoMicrotasks';\n\nexport function appendInitialChild(\n  parentInstance: Instance,\n  child: Instance | TextInstance,\n): void {\n  parentInstance._children.push(child);\n}\n\nexport function createInstance(\n  type: string,\n  props: Props,\n  rootContainerInstance: Container,\n  hostContext: HostContext,\n  internalInstanceHandle: Object,\n): Instance {\n  const tag = allocateTag();\n  const viewConfig = getViewConfigForType(type);\n\n  if (__DEV__) {\n    for (const key in viewConfig.validAttributes) {\n      if (props.hasOwnProperty(key)) {\n        deepFreezeAndThrowOnMutationInDev(props[key]);\n      }\n    }\n  }\n\n  const updatePayload = create(props, viewConfig.validAttributes);\n\n  UIManager.createView(\n    tag, // reactTag\n    viewConfig.uiViewClassName, // viewName\n    rootContainerInstance, // rootTag\n    updatePayload, // props\n  );\n\n  const component = new ReactNativeFiberHostComponent(\n    tag,\n    viewConfig,\n    internalInstanceHandle,\n  );\n\n  precacheFiberNode(internalInstanceHandle, tag);\n  updateFiberProps(tag, props);\n\n  // Not sure how to avoid this cast. Flow is okay if the component is defined\n  // in the same file but if it's external it can't see the types.\n  return ((component: any): Instance);\n}\n\nexport function createTextInstance(\n  text: string,\n  rootContainerInstance: Container,\n  hostContext: HostContext,\n  internalInstanceHandle: Object,\n): TextInstance {\n  invariant(\n    hostContext.isInAParentText,\n    'Text strings must be rendered within a <Text> component.',\n  );\n\n  const tag = allocateTag();\n\n  UIManager.createView(\n    tag, // reactTag\n    'RCTRawText', // viewName\n    rootContainerInstance, // rootTag\n    {text: text}, // props\n  );\n\n  precacheFiberNode(internalInstanceHandle, tag);\n\n  return tag;\n}\n\nexport function finalizeInitialChildren(\n  parentInstance: Instance,\n  type: string,\n  props: Props,\n  rootContainerInstance: Container,\n  hostContext: HostContext,\n): boolean {\n  // Don't send a no-op message over the bridge.\n  if (parentInstance._children.length === 0) {\n    return false;\n  }\n\n  // Map from child objects to native tags.\n  // Either way we need to pass a copy of the Array to prevent it from being frozen.\n  const nativeTags = parentInstance._children.map(child =>\n    typeof child === 'number'\n      ? child // Leaf node (eg text)\n      : child._nativeTag,\n  );\n\n  UIManager.setChildren(\n    parentInstance._nativeTag, // containerTag\n    nativeTags, // reactTags\n  );\n\n  return false;\n}\n\nexport function getRootHostContext(\n  rootContainerInstance: Container,\n): HostContext {\n  return {isInAParentText: false};\n}\n\nexport function getChildHostContext(\n  parentHostContext: HostContext,\n  type: string,\n  rootContainerInstance: Container,\n): HostContext {\n  const prevIsInAParentText = parentHostContext.isInAParentText;\n  const isInAParentText =\n    type === 'AndroidTextInput' || // Android\n    type === 'RCTMultilineTextInputView' || // iOS\n    type === 'RCTSinglelineTextInputView' || // iOS\n    type === 'RCTText' ||\n    type === 'RCTVirtualText';\n\n  if (prevIsInAParentText !== isInAParentText) {\n    return {isInAParentText};\n  } else {\n    return parentHostContext;\n  }\n}\n\nexport function getPublicInstance(instance: Instance): * {\n  return instance;\n}\n\nexport function prepareForCommit(containerInfo: Container): null | Object {\n  // Noop\n  return null;\n}\n\nexport function prepareUpdate(\n  instance: Instance,\n  type: string,\n  oldProps: Props,\n  newProps: Props,\n  rootContainerInstance: Container,\n  hostContext: HostContext,\n): null | Object {\n  return UPDATE_SIGNAL;\n}\n\nexport function resetAfterCommit(containerInfo: Container): void {\n  // Noop\n}\n\nexport const isPrimaryRenderer = true;\nexport const warnsIfNotActing = true;\n\nexport const scheduleTimeout = setTimeout;\nexport const cancelTimeout = clearTimeout;\nexport const noTimeout = -1;\n\nexport function shouldSetTextContent(type: string, props: Props): boolean {\n  // TODO (bvaughn) Revisit this decision.\n  // Always returning false simplifies the createInstance() implementation,\n  // But creates an additional child Fiber for raw text children.\n  // No additional native views are created though.\n  // It's not clear to me which is better so I'm deferring for now.\n  // More context @ github.com/facebook/react/pull/8560#discussion_r92111303\n  return false;\n}\n\nexport function getCurrentEventPriority(): * {\n  return DefaultEventPriority;\n}\n\n// -------------------\n//     Mutation\n// -------------------\n\nexport const supportsMutation = true;\n\nexport function appendChild(\n  parentInstance: Instance,\n  child: Instance | TextInstance,\n): void {\n  const childTag = typeof child === 'number' ? child : child._nativeTag;\n  const children = parentInstance._children;\n  const index = children.indexOf(child);\n\n  if (index >= 0) {\n    children.splice(index, 1);\n    children.push(child);\n\n    UIManager.manageChildren(\n      parentInstance._nativeTag, // containerTag\n      [index], // moveFromIndices\n      [children.length - 1], // moveToIndices\n      [], // addChildReactTags\n      [], // addAtIndices\n      [], // removeAtIndices\n    );\n  } else {\n    children.push(child);\n\n    UIManager.manageChildren(\n      parentInstance._nativeTag, // containerTag\n      [], // moveFromIndices\n      [], // moveToIndices\n      [childTag], // addChildReactTags\n      [children.length - 1], // addAtIndices\n      [], // removeAtIndices\n    );\n  }\n}\n\nexport function appendChildToContainer(\n  parentInstance: Container,\n  child: Instance | TextInstance,\n): void {\n  const childTag = typeof child === 'number' ? child : child._nativeTag;\n  UIManager.setChildren(\n    parentInstance, // containerTag\n    [childTag], // reactTags\n  );\n}\n\nexport function commitTextUpdate(\n  textInstance: TextInstance,\n  oldText: string,\n  newText: string,\n): void {\n  UIManager.updateView(\n    textInstance, // reactTag\n    'RCTRawText', // viewName\n    {text: newText}, // props\n  );\n}\n\nexport function commitMount(\n  instance: Instance,\n  type: string,\n  newProps: Props,\n  internalInstanceHandle: Object,\n): void {\n  // Noop\n}\n\nexport function commitUpdate(\n  instance: Instance,\n  updatePayloadTODO: Object,\n  type: string,\n  oldProps: Props,\n  newProps: Props,\n  internalInstanceHandle: Object,\n): void {\n  const viewConfig = instance.viewConfig;\n\n  updateFiberProps(instance._nativeTag, newProps);\n\n  const updatePayload = diff(oldProps, newProps, viewConfig.validAttributes);\n\n  // Avoid the overhead of bridge calls if there's no update.\n  // This is an expensive no-op for Android, and causes an unnecessary\n  // view invalidation for certain components (eg RCTTextInput) on iOS.\n  if (updatePayload != null) {\n    UIManager.updateView(\n      instance._nativeTag, // reactTag\n      viewConfig.uiViewClassName, // viewName\n      updatePayload, // props\n    );\n  }\n}\n\nexport function insertBefore(\n  parentInstance: Instance,\n  child: Instance | TextInstance,\n  beforeChild: Instance | TextInstance,\n): void {\n  const children = (parentInstance: any)._children;\n  const index = children.indexOf(child);\n\n  // Move existing child or add new child?\n  if (index >= 0) {\n    children.splice(index, 1);\n    const beforeChildIndex = children.indexOf(beforeChild);\n    children.splice(beforeChildIndex, 0, child);\n\n    UIManager.manageChildren(\n      (parentInstance: any)._nativeTag, // containerID\n      [index], // moveFromIndices\n      [beforeChildIndex], // moveToIndices\n      [], // addChildReactTags\n      [], // addAtIndices\n      [], // removeAtIndices\n    );\n  } else {\n    const beforeChildIndex = children.indexOf(beforeChild);\n    children.splice(beforeChildIndex, 0, child);\n\n    const childTag = typeof child === 'number' ? child : child._nativeTag;\n\n    UIManager.manageChildren(\n      (parentInstance: any)._nativeTag, // containerID\n      [], // moveFromIndices\n      [], // moveToIndices\n      [childTag], // addChildReactTags\n      [beforeChildIndex], // addAtIndices\n      [], // removeAtIndices\n    );\n  }\n}\n\nexport function insertInContainerBefore(\n  parentInstance: Container,\n  child: Instance | TextInstance,\n  beforeChild: Instance | TextInstance,\n): void {\n  // TODO (bvaughn): Remove this check when...\n  // We create a wrapper object for the container in ReactNative render()\n  // Or we refactor to remove wrapper objects entirely.\n  // For more info on pros/cons see PR #8560 description.\n  invariant(\n    typeof parentInstance !== 'number',\n    'Container does not support insertBefore operation',\n  );\n}\n\nexport function removeChild(\n  parentInstance: Instance,\n  child: Instance | TextInstance,\n): void {\n  recursivelyUncacheFiberNode(child);\n  const children = parentInstance._children;\n  const index = children.indexOf(child);\n\n  children.splice(index, 1);\n\n  UIManager.manageChildren(\n    parentInstance._nativeTag, // containerID\n    [], // moveFromIndices\n    [], // moveToIndices\n    [], // addChildReactTags\n    [], // addAtIndices\n    [index], // removeAtIndices\n  );\n}\n\nexport function removeChildFromContainer(\n  parentInstance: Container,\n  child: Instance | TextInstance,\n): void {\n  recursivelyUncacheFiberNode(child);\n  UIManager.manageChildren(\n    parentInstance, // containerID\n    [], // moveFromIndices\n    [], // moveToIndices\n    [], // addChildReactTags\n    [], // addAtIndices\n    [0], // removeAtIndices\n  );\n}\n\nexport function resetTextContent(instance: Instance): void {\n  // Noop\n}\n\nexport function hideInstance(instance: Instance): void {\n  const viewConfig = instance.viewConfig;\n  const updatePayload = create(\n    {style: {display: 'none'}},\n    viewConfig.validAttributes,\n  );\n  UIManager.updateView(\n    instance._nativeTag,\n    viewConfig.uiViewClassName,\n    updatePayload,\n  );\n}\n\nexport function hideTextInstance(textInstance: TextInstance): void {\n  throw new Error('Not yet implemented.');\n}\n\nexport function unhideInstance(instance: Instance, props: Props): void {\n  const viewConfig = instance.viewConfig;\n  const updatePayload = diff(\n    {...props, style: [props.style, {display: 'none'}]},\n    props,\n    viewConfig.validAttributes,\n  );\n  UIManager.updateView(\n    instance._nativeTag,\n    viewConfig.uiViewClassName,\n    updatePayload,\n  );\n}\n\nexport function clearContainer(container: Container): void {\n  // TODO Implement this for React Native\n  // UIManager does not expose a \"remove all\" type method.\n}\n\nexport function unhideTextInstance(\n  textInstance: TextInstance,\n  text: string,\n): void {\n  throw new Error('Not yet implemented.');\n}\n\nexport function getInstanceFromNode(node: any) {\n  throw new Error('Not yet implemented.');\n}\n\nexport function isOpaqueHydratingObject(value: mixed): boolean {\n  throw new Error('Not yet implemented');\n}\n\nexport function makeOpaqueHydratingObject(\n  attemptToReadValue: () => void,\n): OpaqueIDType {\n  throw new Error('Not yet implemented.');\n}\n\nexport function makeClientId(): OpaqueIDType {\n  throw new Error('Not yet implemented');\n}\n\nexport function makeClientIdInDEV(warnOnAccessInDEV: () => void): OpaqueIDType {\n  throw new Error('Not yet implemented');\n}\n\nexport function beforeActiveInstanceBlur(internalInstanceHandle: Object) {\n  // noop\n}\n\nexport function afterActiveInstanceBlur() {\n  // noop\n}\n\nexport function preparePortalMount(portalInstance: Instance): void {\n  // noop\n}\n\nexport function detachDeletedInstance(node: Instance): void {\n  // noop\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Source} from 'shared/ReactElementType';\nimport type {LazyComponent} from 'react/src/ReactLazy';\n\nimport {\n  enableComponentStackLocations,\n  disableNativeComponentFrames,\n} from 'shared/ReactFeatureFlags';\n\nimport {\n  REACT_SUSPENSE_TYPE,\n  REACT_SUSPENSE_LIST_TYPE,\n  REACT_FORWARD_REF_TYPE,\n  REACT_MEMO_TYPE,\n  REACT_LAZY_TYPE,\n} from 'shared/ReactSymbols';\n\nimport {disableLogs, reenableLogs} from 'shared/ConsolePatchingDev';\n\nimport ReactSharedInternals from 'shared/ReactSharedInternals';\n\nconst {ReactCurrentDispatcher} = ReactSharedInternals;\n\nlet prefix;\nexport function describeBuiltInComponentFrame(\n  name: string,\n  source: void | null | Source,\n  ownerFn: void | null | Function,\n): string {\n  if (enableComponentStackLocations) {\n    if (prefix === undefined) {\n      // Extract the VM specific prefix used by each line.\n      try {\n        throw Error();\n      } catch (x) {\n        const match = x.stack.trim().match(/\\n( *(at )?)/);\n        prefix = (match && match[1]) || '';\n      }\n    }\n    // We use the prefix to ensure our stacks line up with native stack frames.\n    return '\\n' + prefix + name;\n  } else {\n    let ownerName = null;\n    if (__DEV__ && ownerFn) {\n      ownerName = ownerFn.displayName || ownerFn.name || null;\n    }\n    return describeComponentFrame(name, source, ownerName);\n  }\n}\n\nlet reentry = false;\nlet componentFrameCache;\nif (__DEV__) {\n  const PossiblyWeakMap = typeof WeakMap === 'function' ? WeakMap : Map;\n  componentFrameCache = new PossiblyWeakMap();\n}\n\nexport function describeNativeComponentFrame(\n  fn: Function,\n  construct: boolean,\n): string {\n  // If something asked for a stack inside a fake render, it should get ignored.\n  if (disableNativeComponentFrames || !fn || reentry) {\n    return '';\n  }\n\n  if (__DEV__) {\n    const frame = componentFrameCache.get(fn);\n    if (frame !== undefined) {\n      return frame;\n    }\n  }\n\n  let control;\n\n  reentry = true;\n  const previousPrepareStackTrace = Error.prepareStackTrace;\n  // $FlowFixMe It does accept undefined.\n  Error.prepareStackTrace = undefined;\n  let previousDispatcher;\n  if (__DEV__) {\n    previousDispatcher = ReactCurrentDispatcher.current;\n    // Set the dispatcher in DEV because this might be call in the render function\n    // for warnings.\n    ReactCurrentDispatcher.current = null;\n    disableLogs();\n  }\n  try {\n    // This should throw.\n    if (construct) {\n      // Something should be setting the props in the constructor.\n      const Fake = function() {\n        throw Error();\n      };\n      // $FlowFixMe\n      Object.defineProperty(Fake.prototype, 'props', {\n        set: function() {\n          // We use a throwing setter instead of frozen or non-writable props\n          // because that won't throw in a non-strict mode function.\n          throw Error();\n        },\n      });\n      if (typeof Reflect === 'object' && Reflect.construct) {\n        // We construct a different control for this case to include any extra\n        // frames added by the construct call.\n        try {\n          Reflect.construct(Fake, []);\n        } catch (x) {\n          control = x;\n        }\n        Reflect.construct(fn, [], Fake);\n      } else {\n        try {\n          Fake.call();\n        } catch (x) {\n          control = x;\n        }\n        fn.call(Fake.prototype);\n      }\n    } else {\n      try {\n        throw Error();\n      } catch (x) {\n        control = x;\n      }\n      fn();\n    }\n  } catch (sample) {\n    // This is inlined manually because closure doesn't do it for us.\n    if (sample && control && typeof sample.stack === 'string') {\n      // This extracts the first frame from the sample that isn't also in the control.\n      // Skipping one frame that we assume is the frame that calls the two.\n      const sampleLines = sample.stack.split('\\n');\n      const controlLines = control.stack.split('\\n');\n      let s = sampleLines.length - 1;\n      let c = controlLines.length - 1;\n      while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {\n        // We expect at least one stack frame to be shared.\n        // Typically this will be the root most one. However, stack frames may be\n        // cut off due to maximum stack limits. In this case, one maybe cut off\n        // earlier than the other. We assume that the sample is longer or the same\n        // and there for cut off earlier. So we should find the root most frame in\n        // the sample somewhere in the control.\n        c--;\n      }\n      for (; s >= 1 && c >= 0; s--, c--) {\n        // Next we find the first one that isn't the same which should be the\n        // frame that called our sample function and the control.\n        if (sampleLines[s] !== controlLines[c]) {\n          // In V8, the first line is describing the message but other VMs don't.\n          // If we're about to return the first line, and the control is also on the same\n          // line, that's a pretty good indicator that our sample threw at same line as\n          // the control. I.e. before we entered the sample frame. So we ignore this result.\n          // This can happen if you passed a class to function component, or non-function.\n          if (s !== 1 || c !== 1) {\n            do {\n              s--;\n              c--;\n              // We may still have similar intermediate frames from the construct call.\n              // The next one that isn't the same should be our match though.\n              if (c < 0 || sampleLines[s] !== controlLines[c]) {\n                // V8 adds a \"new\" prefix for native classes. Let's remove it to make it prettier.\n                const frame = '\\n' + sampleLines[s].replace(' at new ', ' at ');\n                if (__DEV__) {\n                  if (typeof fn === 'function') {\n                    componentFrameCache.set(fn, frame);\n                  }\n                }\n                // Return the line we found.\n                return frame;\n              }\n            } while (s >= 1 && c >= 0);\n          }\n          break;\n        }\n      }\n    }\n  } finally {\n    reentry = false;\n    if (__DEV__) {\n      ReactCurrentDispatcher.current = previousDispatcher;\n      reenableLogs();\n    }\n    Error.prepareStackTrace = previousPrepareStackTrace;\n  }\n  // Fallback to just using the name if we couldn't make it throw.\n  const name = fn ? fn.displayName || fn.name : '';\n  const syntheticFrame = name ? describeBuiltInComponentFrame(name) : '';\n  if (__DEV__) {\n    if (typeof fn === 'function') {\n      componentFrameCache.set(fn, syntheticFrame);\n    }\n  }\n  return syntheticFrame;\n}\n\nconst BEFORE_SLASH_RE = /^(.*)[\\\\\\/]/;\n\nfunction describeComponentFrame(\n  name: null | string,\n  source: void | null | Source,\n  ownerName: null | string,\n) {\n  let sourceInfo = '';\n  if (__DEV__ && source) {\n    const path = source.fileName;\n    let fileName = path.replace(BEFORE_SLASH_RE, '');\n    // In DEV, include code for a common special case:\n    // prefer \"folder/index.js\" instead of just \"index.js\".\n    if (/^index\\./.test(fileName)) {\n      const match = path.match(BEFORE_SLASH_RE);\n      if (match) {\n        const pathBeforeSlash = match[1];\n        if (pathBeforeSlash) {\n          const folderName = pathBeforeSlash.replace(BEFORE_SLASH_RE, '');\n          fileName = folderName + '/' + fileName;\n        }\n      }\n    }\n    sourceInfo = ' (at ' + fileName + ':' + source.lineNumber + ')';\n  } else if (ownerName) {\n    sourceInfo = ' (created by ' + ownerName + ')';\n  }\n  return '\\n    in ' + (name || 'Unknown') + sourceInfo;\n}\n\nexport function describeClassComponentFrame(\n  ctor: Function,\n  source: void | null | Source,\n  ownerFn: void | null | Function,\n): string {\n  if (enableComponentStackLocations) {\n    return describeNativeComponentFrame(ctor, true);\n  } else {\n    return describeFunctionComponentFrame(ctor, source, ownerFn);\n  }\n}\n\nexport function describeFunctionComponentFrame(\n  fn: Function,\n  source: void | null | Source,\n  ownerFn: void | null | Function,\n): string {\n  if (enableComponentStackLocations) {\n    return describeNativeComponentFrame(fn, false);\n  } else {\n    if (!fn) {\n      return '';\n    }\n    const name = fn.displayName || fn.name || null;\n    let ownerName = null;\n    if (__DEV__ && ownerFn) {\n      ownerName = ownerFn.displayName || ownerFn.name || null;\n    }\n    return describeComponentFrame(name, source, ownerName);\n  }\n}\n\nfunction shouldConstruct(Component: Function) {\n  const prototype = Component.prototype;\n  return !!(prototype && prototype.isReactComponent);\n}\n\nexport function describeUnknownElementTypeFrameInDEV(\n  type: any,\n  source: void | null | Source,\n  ownerFn: void | null | Function,\n): string {\n  if (!__DEV__) {\n    return '';\n  }\n  if (type == null) {\n    return '';\n  }\n  if (typeof type === 'function') {\n    if (enableComponentStackLocations) {\n      return describeNativeComponentFrame(type, shouldConstruct(type));\n    } else {\n      return describeFunctionComponentFrame(type, source, ownerFn);\n    }\n  }\n  if (typeof type === 'string') {\n    return describeBuiltInComponentFrame(type, source, ownerFn);\n  }\n  switch (type) {\n    case REACT_SUSPENSE_TYPE:\n      return describeBuiltInComponentFrame('Suspense', source, ownerFn);\n    case REACT_SUSPENSE_LIST_TYPE:\n      return describeBuiltInComponentFrame('SuspenseList', source, ownerFn);\n  }\n  if (typeof type === 'object') {\n    switch (type.$$typeof) {\n      case REACT_FORWARD_REF_TYPE:\n        return describeFunctionComponentFrame(type.render, source, ownerFn);\n      case REACT_MEMO_TYPE:\n        // Memo may contain any component type so we recursively resolve it.\n        return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);\n      case REACT_LAZY_TYPE: {\n        const lazyComponent: LazyComponent<any, any> = (type: any);\n        const payload = lazyComponent._payload;\n        const init = lazyComponent._init;\n        try {\n          // Lazy may contain any component type so we recursively resolve it.\n          return describeUnknownElementTypeFrameInDEV(\n            init(payload),\n            source,\n            ownerFn,\n          );\n        } catch (x) {}\n      }\n    }\n  }\n  return '';\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nconst hasOwnProperty = Object.prototype.hasOwnProperty;\n\nexport default hasOwnProperty;\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nconst loggedTypeFailures = {};\n\nimport {describeUnknownElementTypeFrameInDEV} from 'shared/ReactComponentStackFrame';\n\nimport ReactSharedInternals from 'shared/ReactSharedInternals';\nimport hasOwnProperty from 'shared/hasOwnProperty';\n\nconst ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;\n\nfunction setCurrentlyValidatingElement(element) {\n  if (__DEV__) {\n    if (element) {\n      const owner = element._owner;\n      const stack = describeUnknownElementTypeFrameInDEV(\n        element.type,\n        element._source,\n        owner ? owner.type : null,\n      );\n      ReactDebugCurrentFrame.setExtraStackFrame(stack);\n    } else {\n      ReactDebugCurrentFrame.setExtraStackFrame(null);\n    }\n  }\n}\n\nexport default function checkPropTypes(\n  typeSpecs: Object,\n  values: Object,\n  location: string,\n  componentName: ?string,\n  element?: any,\n): void {\n  if (__DEV__) {\n    // $FlowFixMe This is okay but Flow doesn't know it.\n    const has = Function.call.bind(hasOwnProperty);\n    for (const typeSpecName in typeSpecs) {\n      if (has(typeSpecs, typeSpecName)) {\n        let error;\n        // Prop type validation may throw. In case they do, we don't want to\n        // fail the render phase where it didn't fail before. So we log it.\n        // After these have been cleaned up, we'll let them throw.\n        try {\n          // This is intentionally an invariant that gets caught. It's the same\n          // behavior as without this statement except with a better message.\n          if (typeof typeSpecs[typeSpecName] !== 'function') {\n            const err = Error(\n              (componentName || 'React class') +\n                ': ' +\n                location +\n                ' type `' +\n                typeSpecName +\n                '` is invalid; ' +\n                'it must be a function, usually from the `prop-types` package, but received `' +\n                typeof typeSpecs[typeSpecName] +\n                '`.' +\n                'This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.',\n            );\n            err.name = 'Invariant Violation';\n            throw err;\n          }\n          error = typeSpecs[typeSpecName](\n            values,\n            typeSpecName,\n            componentName,\n            location,\n            null,\n            'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED',\n          );\n        } catch (ex) {\n          error = ex;\n        }\n        if (error && !(error instanceof Error)) {\n          setCurrentlyValidatingElement(element);\n          console.error(\n            '%s: type specification of %s' +\n              ' `%s` is invalid; the type checker ' +\n              'function must return `null` or an `Error` but returned a %s. ' +\n              'You may have forgotten to pass an argument to the type checker ' +\n              'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' +\n              'shape all require an argument).',\n            componentName || 'React class',\n            location,\n            typeSpecName,\n            typeof error,\n          );\n          setCurrentlyValidatingElement(null);\n        }\n        if (error instanceof Error && !(error.message in loggedTypeFailures)) {\n          // Only monitor this failure once because there tends to be a lot of the\n          // same error.\n          loggedTypeFailures[error.message] = true;\n          setCurrentlyValidatingElement(element);\n          console.error('Failed %s type: %s', location, error.message);\n          setCurrentlyValidatingElement(null);\n        }\n      }\n    }\n  }\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Fiber} from './ReactInternalTypes';\n\nexport type StackCursor<T> = {|current: T|};\n\nconst valueStack: Array<any> = [];\n\nlet fiberStack: Array<Fiber | null>;\n\nif (__DEV__) {\n  fiberStack = [];\n}\n\nlet index = -1;\n\nfunction createCursor<T>(defaultValue: T): StackCursor<T> {\n  return {\n    current: defaultValue,\n  };\n}\n\nfunction isEmpty(): boolean {\n  return index === -1;\n}\n\nfunction pop<T>(cursor: StackCursor<T>, fiber: Fiber): void {\n  if (index < 0) {\n    if (__DEV__) {\n      console.error('Unexpected pop.');\n    }\n    return;\n  }\n\n  if (__DEV__) {\n    if (fiber !== fiberStack[index]) {\n      console.error('Unexpected Fiber popped.');\n    }\n  }\n\n  cursor.current = valueStack[index];\n\n  valueStack[index] = null;\n\n  if (__DEV__) {\n    fiberStack[index] = null;\n  }\n\n  index--;\n}\n\nfunction push<T>(cursor: StackCursor<T>, value: T, fiber: Fiber): void {\n  index++;\n\n  valueStack[index] = cursor.current;\n\n  if (__DEV__) {\n    fiberStack[index] = fiber;\n  }\n\n  cursor.current = value;\n}\n\nfunction checkThatStackIsEmpty() {\n  if (__DEV__) {\n    if (index !== -1) {\n      console.error(\n        'Expected an empty stack. Something was not reset properly.',\n      );\n    }\n  }\n}\n\nfunction resetStackAfterFatalErrorInDev() {\n  if (__DEV__) {\n    index = -1;\n    valueStack.length = 0;\n    fiberStack.length = 0;\n  }\n}\n\nexport {\n  createCursor,\n  isEmpty,\n  pop,\n  push,\n  // DEV only:\n  checkThatStackIsEmpty,\n  resetStackAfterFatalErrorInDev,\n};\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Fiber} from './ReactInternalTypes';\nimport type {StackCursor} from './ReactFiberStack.old';\n\nimport {isFiberMounted} from './ReactFiberTreeReflection';\nimport {disableLegacyContext} from 'shared/ReactFeatureFlags';\nimport {ClassComponent, HostRoot} from './ReactWorkTags';\nimport getComponentNameFromFiber from 'react-reconciler/src/getComponentNameFromFiber';\nimport invariant from 'shared/invariant';\nimport checkPropTypes from 'shared/checkPropTypes';\n\nimport {createCursor, push, pop} from './ReactFiberStack.old';\n\nlet warnedAboutMissingGetChildContext;\n\nif (__DEV__) {\n  warnedAboutMissingGetChildContext = {};\n}\n\nexport const emptyContextObject = {};\nif (__DEV__) {\n  Object.freeze(emptyContextObject);\n}\n\n// A cursor to the current merged context object on the stack.\nconst contextStackCursor: StackCursor<Object> = createCursor(\n  emptyContextObject,\n);\n// A cursor to a boolean indicating whether the context has changed.\nconst didPerformWorkStackCursor: StackCursor<boolean> = createCursor(false);\n// Keep track of the previous context object that was on the stack.\n// We use this to get access to the parent context after we have already\n// pushed the next context provider, and now need to merge their contexts.\nlet previousContext: Object = emptyContextObject;\n\nfunction getUnmaskedContext(\n  workInProgress: Fiber,\n  Component: Function,\n  didPushOwnContextIfProvider: boolean,\n): Object {\n  if (disableLegacyContext) {\n    return emptyContextObject;\n  } else {\n    if (didPushOwnContextIfProvider && isContextProvider(Component)) {\n      // If the fiber is a context provider itself, when we read its context\n      // we may have already pushed its own child context on the stack. A context\n      // provider should not \"see\" its own child context. Therefore we read the\n      // previous (parent) context instead for a context provider.\n      return previousContext;\n    }\n    return contextStackCursor.current;\n  }\n}\n\nfunction cacheContext(\n  workInProgress: Fiber,\n  unmaskedContext: Object,\n  maskedContext: Object,\n): void {\n  if (disableLegacyContext) {\n    return;\n  } else {\n    const instance = workInProgress.stateNode;\n    instance.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext;\n    instance.__reactInternalMemoizedMaskedChildContext = maskedContext;\n  }\n}\n\nfunction getMaskedContext(\n  workInProgress: Fiber,\n  unmaskedContext: Object,\n): Object {\n  if (disableLegacyContext) {\n    return emptyContextObject;\n  } else {\n    const type = workInProgress.type;\n    const contextTypes = type.contextTypes;\n    if (!contextTypes) {\n      return emptyContextObject;\n    }\n\n    // Avoid recreating masked context unless unmasked context has changed.\n    // Failing to do this will result in unnecessary calls to componentWillReceiveProps.\n    // This may trigger infinite loops if componentWillReceiveProps calls setState.\n    const instance = workInProgress.stateNode;\n    if (\n      instance &&\n      instance.__reactInternalMemoizedUnmaskedChildContext === unmaskedContext\n    ) {\n      return instance.__reactInternalMemoizedMaskedChildContext;\n    }\n\n    const context = {};\n    for (const key in contextTypes) {\n      context[key] = unmaskedContext[key];\n    }\n\n    if (__DEV__) {\n      const name = getComponentNameFromFiber(workInProgress) || 'Unknown';\n      checkPropTypes(contextTypes, context, 'context', name);\n    }\n\n    // Cache unmasked context so we can avoid recreating masked context unless necessary.\n    // Context is created before the class component is instantiated so check for instance.\n    if (instance) {\n      cacheContext(workInProgress, unmaskedContext, context);\n    }\n\n    return context;\n  }\n}\n\nfunction hasContextChanged(): boolean {\n  if (disableLegacyContext) {\n    return false;\n  } else {\n    return didPerformWorkStackCursor.current;\n  }\n}\n\nfunction isContextProvider(type: Function): boolean {\n  if (disableLegacyContext) {\n    return false;\n  } else {\n    const childContextTypes = type.childContextTypes;\n    return childContextTypes !== null && childContextTypes !== undefined;\n  }\n}\n\nfunction popContext(fiber: Fiber): void {\n  if (disableLegacyContext) {\n    return;\n  } else {\n    pop(didPerformWorkStackCursor, fiber);\n    pop(contextStackCursor, fiber);\n  }\n}\n\nfunction popTopLevelContextObject(fiber: Fiber): void {\n  if (disableLegacyContext) {\n    return;\n  } else {\n    pop(didPerformWorkStackCursor, fiber);\n    pop(contextStackCursor, fiber);\n  }\n}\n\nfunction pushTopLevelContextObject(\n  fiber: Fiber,\n  context: Object,\n  didChange: boolean,\n): void {\n  if (disableLegacyContext) {\n    return;\n  } else {\n    invariant(\n      contextStackCursor.current === emptyContextObject,\n      'Unexpected context found on stack. ' +\n        'This error is likely caused by a bug in React. Please file an issue.',\n    );\n\n    push(contextStackCursor, context, fiber);\n    push(didPerformWorkStackCursor, didChange, fiber);\n  }\n}\n\nfunction processChildContext(\n  fiber: Fiber,\n  type: any,\n  parentContext: Object,\n): Object {\n  if (disableLegacyContext) {\n    return parentContext;\n  } else {\n    const instance = fiber.stateNode;\n    const childContextTypes = type.childContextTypes;\n\n    // TODO (bvaughn) Replace this behavior with an invariant() in the future.\n    // It has only been added in Fiber to match the (unintentional) behavior in Stack.\n    if (typeof instance.getChildContext !== 'function') {\n      if (__DEV__) {\n        const componentName = getComponentNameFromFiber(fiber) || 'Unknown';\n\n        if (!warnedAboutMissingGetChildContext[componentName]) {\n          warnedAboutMissingGetChildContext[componentName] = true;\n          console.error(\n            '%s.childContextTypes is specified but there is no getChildContext() method ' +\n              'on the instance. You can either define getChildContext() on %s or remove ' +\n              'childContextTypes from it.',\n            componentName,\n            componentName,\n          );\n        }\n      }\n      return parentContext;\n    }\n\n    const childContext = instance.getChildContext();\n    for (const contextKey in childContext) {\n      invariant(\n        contextKey in childContextTypes,\n        '%s.getChildContext(): key \"%s\" is not defined in childContextTypes.',\n        getComponentNameFromFiber(fiber) || 'Unknown',\n        contextKey,\n      );\n    }\n    if (__DEV__) {\n      const name = getComponentNameFromFiber(fiber) || 'Unknown';\n      checkPropTypes(childContextTypes, childContext, 'child context', name);\n    }\n\n    return {...parentContext, ...childContext};\n  }\n}\n\nfunction pushContextProvider(workInProgress: Fiber): boolean {\n  if (disableLegacyContext) {\n    return false;\n  } else {\n    const instance = workInProgress.stateNode;\n    // We push the context as early as possible to ensure stack integrity.\n    // If the instance does not exist yet, we will push null at first,\n    // and replace it on the stack later when invalidating the context.\n    const memoizedMergedChildContext =\n      (instance && instance.__reactInternalMemoizedMergedChildContext) ||\n      emptyContextObject;\n\n    // Remember the parent context so we can merge with it later.\n    // Inherit the parent's did-perform-work value to avoid inadvertently blocking updates.\n    previousContext = contextStackCursor.current;\n    push(contextStackCursor, memoizedMergedChildContext, workInProgress);\n    push(\n      didPerformWorkStackCursor,\n      didPerformWorkStackCursor.current,\n      workInProgress,\n    );\n\n    return true;\n  }\n}\n\nfunction invalidateContextProvider(\n  workInProgress: Fiber,\n  type: any,\n  didChange: boolean,\n): void {\n  if (disableLegacyContext) {\n    return;\n  } else {\n    const instance = workInProgress.stateNode;\n    invariant(\n      instance,\n      'Expected to have an instance by this point. ' +\n        'This error is likely caused by a bug in React. Please file an issue.',\n    );\n\n    if (didChange) {\n      // Merge parent and own context.\n      // Skip this if we're not updating due to sCU.\n      // This avoids unnecessarily recomputing memoized values.\n      const mergedContext = processChildContext(\n        workInProgress,\n        type,\n        previousContext,\n      );\n      instance.__reactInternalMemoizedMergedChildContext = mergedContext;\n\n      // Replace the old (or empty) context with the new one.\n      // It is important to unwind the context in the reverse order.\n      pop(didPerformWorkStackCursor, workInProgress);\n      pop(contextStackCursor, workInProgress);\n      // Now push the new context and mark that it has changed.\n      push(contextStackCursor, mergedContext, workInProgress);\n      push(didPerformWorkStackCursor, didChange, workInProgress);\n    } else {\n      pop(didPerformWorkStackCursor, workInProgress);\n      push(didPerformWorkStackCursor, didChange, workInProgress);\n    }\n  }\n}\n\nfunction findCurrentUnmaskedContext(fiber: Fiber): Object {\n  if (disableLegacyContext) {\n    return emptyContextObject;\n  } else {\n    // Currently this is only used with renderSubtreeIntoContainer; not sure if it\n    // makes sense elsewhere\n    invariant(\n      isFiberMounted(fiber) && fiber.tag === ClassComponent,\n      'Expected subtree parent to be a mounted class component. ' +\n        'This error is likely caused by a bug in React. Please file an issue.',\n    );\n\n    let node = fiber;\n    do {\n      switch (node.tag) {\n        case HostRoot:\n          return node.stateNode.context;\n        case ClassComponent: {\n          const Component = node.type;\n          if (isContextProvider(Component)) {\n            return node.stateNode.__reactInternalMemoizedMergedChildContext;\n          }\n          break;\n        }\n      }\n      node = node.return;\n    } while (node !== null);\n    invariant(\n      false,\n      'Found unexpected detached subtree parent. ' +\n        'This error is likely caused by a bug in React. Please file an issue.',\n    );\n  }\n}\n\nexport {\n  getUnmaskedContext,\n  cacheContext,\n  getMaskedContext,\n  hasContextChanged,\n  popContext,\n  popTopLevelContextObject,\n  pushTopLevelContextObject,\n  processChildContext,\n  isContextProvider,\n  pushContextProvider,\n  invalidateContextProvider,\n  findCurrentUnmaskedContext,\n};\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nexport type RootTag = 0 | 1;\n\nexport const LegacyRoot = 0;\nexport const ConcurrentRoot = 1;\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {SchedulerCallback} from './Scheduler';\n\nimport {\n  DiscreteEventPriority,\n  getCurrentUpdatePriority,\n  setCurrentUpdatePriority,\n} from './ReactEventPriorities.old';\nimport {ImmediatePriority, scheduleCallback} from './Scheduler';\n\nlet syncQueue: Array<SchedulerCallback> | null = null;\nlet includesLegacySyncCallbacks: boolean = false;\nlet isFlushingSyncQueue: boolean = false;\n\nexport function scheduleSyncCallback(callback: SchedulerCallback) {\n  // Push this callback into an internal queue. We'll flush these either in\n  // the next tick, or earlier if something calls `flushSyncCallbackQueue`.\n  if (syncQueue === null) {\n    syncQueue = [callback];\n  } else {\n    // Push onto existing queue. Don't need to schedule a callback because\n    // we already scheduled one when we created the queue.\n    syncQueue.push(callback);\n  }\n}\n\nexport function scheduleLegacySyncCallback(callback: SchedulerCallback) {\n  includesLegacySyncCallbacks = true;\n  scheduleSyncCallback(callback);\n}\n\nexport function flushSyncCallbacksOnlyInLegacyMode() {\n  // Only flushes the queue if there's a legacy sync callback scheduled.\n  // TODO: There's only a single type of callback: performSyncOnWorkOnRoot. So\n  // it might make more sense for the queue to be a list of roots instead of a\n  // list of generic callbacks. Then we can have two: one for legacy roots, one\n  // for concurrent roots. And this method would only flush the legacy ones.\n  if (includesLegacySyncCallbacks) {\n    flushSyncCallbacks();\n  }\n}\n\nexport function flushSyncCallbacks() {\n  if (!isFlushingSyncQueue && syncQueue !== null) {\n    // Prevent re-entrance.\n    isFlushingSyncQueue = true;\n    let i = 0;\n    const previousUpdatePriority = getCurrentUpdatePriority();\n    try {\n      const isSync = true;\n      const queue = syncQueue;\n      // TODO: Is this necessary anymore? The only user code that runs in this\n      // queue is in the render or commit phases.\n      setCurrentUpdatePriority(DiscreteEventPriority);\n      for (; i < queue.length; i++) {\n        let callback = queue[i];\n        do {\n          callback = callback(isSync);\n        } while (callback !== null);\n      }\n      syncQueue = null;\n      includesLegacySyncCallbacks = false;\n    } catch (error) {\n      // If something throws, leave the remaining callbacks on the queue.\n      if (syncQueue !== null) {\n        syncQueue = syncQueue.slice(i + 1);\n      }\n      // Resume flushing in the next tick\n      scheduleCallback(ImmediatePriority, flushSyncCallbacks);\n      throw error;\n    } finally {\n      setCurrentUpdatePriority(previousUpdatePriority);\n      isFlushingSyncQueue = false;\n    }\n  }\n  return null;\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n// TODO: this is special because it gets imported during build.\n//\n// TODO: 17.0.3 has not been released to NPM;\n// It exists as a placeholder so that DevTools can support work tag changes between releases.\n// When we next publish a release (either 17.0.3 or 17.1.0), update the matching TODO in backend/renderer.js\n// TODO: This module is used both by the release scripts and to expose a version\n// at runtime. We should instead inject the version number as part of the build\n// process, and use the ReactVersions.js module as the single source of truth.\nexport default '17.0.3';\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport ReactSharedInternals from 'shared/ReactSharedInternals';\n\nconst {ReactCurrentBatchConfig} = ReactSharedInternals;\n\nexport const NoTransition = 0;\n\nexport function requestCurrentTransition(): number {\n  return ReactCurrentBatchConfig.transition;\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\n/**\n * inlined Object.is polyfill to avoid requiring consumers ship their own\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is\n */\nfunction is(x: any, y: any) {\n  return (\n    (x === y && (x !== 0 || 1 / x === 1 / y)) || (x !== x && y !== y) // eslint-disable-line no-self-compare\n  );\n}\n\nconst objectIs: (x: any, y: any) => boolean =\n  typeof Object.is === 'function' ? Object.is : is;\n\nexport default objectIs;\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport is from './objectIs';\nimport hasOwnProperty from './hasOwnProperty';\n\n/**\n * Performs equality by iterating through keys on an object and returning false\n * when any key has values which are not strictly equal between the arguments.\n * Returns true when the values of all keys are strictly equal.\n */\nfunction shallowEqual(objA: mixed, objB: mixed): boolean {\n  if (is(objA, objB)) {\n    return true;\n  }\n\n  if (\n    typeof objA !== 'object' ||\n    objA === null ||\n    typeof objB !== 'object' ||\n    objB === null\n  ) {\n    return false;\n  }\n\n  const keysA = Object.keys(objA);\n  const keysB = Object.keys(objB);\n\n  if (keysA.length !== keysB.length) {\n    return false;\n  }\n\n  // Test for A's keys different from B.\n  for (let i = 0; i < keysA.length; i++) {\n    if (\n      !hasOwnProperty.call(objB, keysA[i]) ||\n      !is(objA[keysA[i]], objB[keysA[i]])\n    ) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nexport default shallowEqual;\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Fiber} from './ReactInternalTypes';\n\nimport {\n  HostComponent,\n  LazyComponent,\n  SuspenseComponent,\n  SuspenseListComponent,\n  FunctionComponent,\n  IndeterminateComponent,\n  ForwardRef,\n  SimpleMemoComponent,\n  ClassComponent,\n} from './ReactWorkTags';\nimport {\n  describeBuiltInComponentFrame,\n  describeFunctionComponentFrame,\n  describeClassComponentFrame,\n} from 'shared/ReactComponentStackFrame';\n\nfunction describeFiber(fiber: Fiber): string {\n  const owner: null | Function = __DEV__\n    ? fiber._debugOwner\n      ? fiber._debugOwner.type\n      : null\n    : null;\n  const source = __DEV__ ? fiber._debugSource : null;\n  switch (fiber.tag) {\n    case HostComponent:\n      return describeBuiltInComponentFrame(fiber.type, source, owner);\n    case LazyComponent:\n      return describeBuiltInComponentFrame('Lazy', source, owner);\n    case SuspenseComponent:\n      return describeBuiltInComponentFrame('Suspense', source, owner);\n    case SuspenseListComponent:\n      return describeBuiltInComponentFrame('SuspenseList', source, owner);\n    case FunctionComponent:\n    case IndeterminateComponent:\n    case SimpleMemoComponent:\n      return describeFunctionComponentFrame(fiber.type, source, owner);\n    case ForwardRef:\n      return describeFunctionComponentFrame(fiber.type.render, source, owner);\n    case ClassComponent:\n      return describeClassComponentFrame(fiber.type, source, owner);\n    default:\n      return '';\n  }\n}\n\nexport function getStackByFiberInDevAndProd(workInProgress: Fiber): string {\n  try {\n    let info = '';\n    let node = workInProgress;\n    do {\n      info += describeFiber(node);\n      node = node.return;\n    } while (node);\n    return info;\n  } catch (x) {\n    return '\\nError generating stack: ' + x.message + '\\n' + x.stack;\n  }\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Fiber} from './ReactInternalTypes';\n\nimport ReactSharedInternals from 'shared/ReactSharedInternals';\nimport {getStackByFiberInDevAndProd} from './ReactFiberComponentStack';\nimport getComponentNameFromFiber from 'react-reconciler/src/getComponentNameFromFiber';\n\nconst ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;\n\nexport let current: Fiber | null = null;\nexport let isRendering: boolean = false;\n\nexport function getCurrentFiberOwnerNameInDevOrNull(): string | null {\n  if (__DEV__) {\n    if (current === null) {\n      return null;\n    }\n    const owner = current._debugOwner;\n    if (owner !== null && typeof owner !== 'undefined') {\n      return getComponentNameFromFiber(owner);\n    }\n  }\n  return null;\n}\n\nfunction getCurrentFiberStackInDev(): string {\n  if (__DEV__) {\n    if (current === null) {\n      return '';\n    }\n    // Safe because if current fiber exists, we are reconciling,\n    // and it is guaranteed to be the work-in-progress version.\n    return getStackByFiberInDevAndProd(current);\n  }\n  return '';\n}\n\nexport function resetCurrentFiber() {\n  if (__DEV__) {\n    ReactDebugCurrentFrame.getCurrentStack = null;\n    current = null;\n    isRendering = false;\n  }\n}\n\nexport function setCurrentFiber(fiber: Fiber) {\n  if (__DEV__) {\n    ReactDebugCurrentFrame.getCurrentStack = getCurrentFiberStackInDev;\n    current = fiber;\n    isRendering = false;\n  }\n}\n\nexport function setIsRendering(rendering: boolean) {\n  if (__DEV__) {\n    isRendering = rendering;\n  }\n}\n\nexport function getIsRendering() {\n  if (__DEV__) {\n    return isRendering;\n  }\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nexport function resolveDefaultProps(Component: any, baseProps: Object): Object {\n  if (Component && Component.defaultProps) {\n    // Resolve default props. Taken from ReactElement\n    const props = Object.assign({}, baseProps);\n    const defaultProps = Component.defaultProps;\n    for (const propName in defaultProps) {\n      if (props[propName] === undefined) {\n        props[propName] = defaultProps[propName];\n      }\n    }\n    return props;\n  }\n  return baseProps;\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {ReactContext, ReactProviderType} from 'shared/ReactTypes';\nimport type {\n  Fiber,\n  ContextDependency,\n  Dependencies,\n} from './ReactInternalTypes';\nimport type {StackCursor} from './ReactFiberStack.old';\nimport type {Lanes} from './ReactFiberLane.old';\nimport type {SharedQueue} from './ReactUpdateQueue.old';\n\nimport {isPrimaryRenderer} from './ReactFiberHostConfig';\nimport {createCursor, push, pop} from './ReactFiberStack.old';\nimport {\n  ContextProvider,\n  ClassComponent,\n  DehydratedFragment,\n} from './ReactWorkTags';\nimport {\n  NoLanes,\n  NoTimestamp,\n  isSubsetOfLanes,\n  includesSomeLane,\n  mergeLanes,\n  pickArbitraryLane,\n} from './ReactFiberLane.old';\nimport {\n  NoFlags,\n  DidPropagateContext,\n  NeedsPropagation,\n} from './ReactFiberFlags';\n\nimport invariant from 'shared/invariant';\nimport is from 'shared/objectIs';\nimport {createUpdate, ForceUpdate} from './ReactUpdateQueue.old';\nimport {markWorkInProgressReceivedUpdate} from './ReactFiberBeginWork.old';\nimport {\n  enableSuspenseServerRenderer,\n  enableLazyContextPropagation,\n} from 'shared/ReactFeatureFlags';\n\nconst valueCursor: StackCursor<mixed> = createCursor(null);\n\nlet rendererSigil;\nif (__DEV__) {\n  // Use this to detect multiple renderers using the same context\n  rendererSigil = {};\n}\n\nlet currentlyRenderingFiber: Fiber | null = null;\nlet lastContextDependency: ContextDependency<mixed> | null = null;\nlet lastFullyObservedContext: ReactContext<any> | null = null;\n\nlet isDisallowedContextReadInDEV: boolean = false;\n\nexport function resetContextDependencies(): void {\n  // This is called right before React yields execution, to ensure `readContext`\n  // cannot be called outside the render phase.\n  currentlyRenderingFiber = null;\n  lastContextDependency = null;\n  lastFullyObservedContext = null;\n  if (__DEV__) {\n    isDisallowedContextReadInDEV = false;\n  }\n}\n\nexport function enterDisallowedContextReadInDEV(): void {\n  if (__DEV__) {\n    isDisallowedContextReadInDEV = true;\n  }\n}\n\nexport function exitDisallowedContextReadInDEV(): void {\n  if (__DEV__) {\n    isDisallowedContextReadInDEV = false;\n  }\n}\n\nexport function pushProvider<T>(\n  providerFiber: Fiber,\n  context: ReactContext<T>,\n  nextValue: T,\n): void {\n  if (isPrimaryRenderer) {\n    push(valueCursor, context._currentValue, providerFiber);\n\n    context._currentValue = nextValue;\n    if (__DEV__) {\n      if (\n        context._currentRenderer !== undefined &&\n        context._currentRenderer !== null &&\n        context._currentRenderer !== rendererSigil\n      ) {\n        console.error(\n          'Detected multiple renderers concurrently rendering the ' +\n            'same context provider. This is currently unsupported.',\n        );\n      }\n      context._currentRenderer = rendererSigil;\n    }\n  } else {\n    push(valueCursor, context._currentValue2, providerFiber);\n\n    context._currentValue2 = nextValue;\n    if (__DEV__) {\n      if (\n        context._currentRenderer2 !== undefined &&\n        context._currentRenderer2 !== null &&\n        context._currentRenderer2 !== rendererSigil\n      ) {\n        console.error(\n          'Detected multiple renderers concurrently rendering the ' +\n            'same context provider. This is currently unsupported.',\n        );\n      }\n      context._currentRenderer2 = rendererSigil;\n    }\n  }\n}\n\nexport function popProvider(\n  context: ReactContext<any>,\n  providerFiber: Fiber,\n): void {\n  const currentValue = valueCursor.current;\n  pop(valueCursor, providerFiber);\n  if (isPrimaryRenderer) {\n    context._currentValue = currentValue;\n  } else {\n    context._currentValue2 = currentValue;\n  }\n}\n\nexport function scheduleWorkOnParentPath(\n  parent: Fiber | null,\n  renderLanes: Lanes,\n) {\n  // Update the child lanes of all the ancestors, including the alternates.\n  let node = parent;\n  while (node !== null) {\n    const alternate = node.alternate;\n    if (!isSubsetOfLanes(node.childLanes, renderLanes)) {\n      node.childLanes = mergeLanes(node.childLanes, renderLanes);\n      if (alternate !== null) {\n        alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes);\n      }\n    } else if (\n      alternate !== null &&\n      !isSubsetOfLanes(alternate.childLanes, renderLanes)\n    ) {\n      alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes);\n    } else {\n      // Neither alternate was updated, which means the rest of the\n      // ancestor path already has sufficient priority.\n      break;\n    }\n    node = node.return;\n  }\n}\n\nexport function propagateContextChange<T>(\n  workInProgress: Fiber,\n  context: ReactContext<T>,\n  renderLanes: Lanes,\n): void {\n  if (enableLazyContextPropagation) {\n    // TODO: This path is only used by Cache components. Update\n    // lazilyPropagateParentContextChanges to look for Cache components so they\n    // can take advantage of lazy propagation.\n    const forcePropagateEntireTree = true;\n    propagateContextChanges(\n      workInProgress,\n      [context],\n      renderLanes,\n      forcePropagateEntireTree,\n    );\n  } else {\n    propagateContextChange_eager(workInProgress, context, renderLanes);\n  }\n}\n\nfunction propagateContextChange_eager<T>(\n  workInProgress: Fiber,\n  context: ReactContext<T>,\n  renderLanes: Lanes,\n): void {\n  // Only used by eager implementation\n  if (enableLazyContextPropagation) {\n    return;\n  }\n  let fiber = workInProgress.child;\n  if (fiber !== null) {\n    // Set the return pointer of the child to the work-in-progress fiber.\n    fiber.return = workInProgress;\n  }\n  while (fiber !== null) {\n    let nextFiber;\n\n    // Visit this fiber.\n    const list = fiber.dependencies;\n    if (list !== null) {\n      nextFiber = fiber.child;\n\n      let dependency = list.firstContext;\n      while (dependency !== null) {\n        // Check if the context matches.\n        if (dependency.context === context) {\n          // Match! Schedule an update on this fiber.\n          if (fiber.tag === ClassComponent) {\n            // Schedule a force update on the work-in-progress.\n            const lane = pickArbitraryLane(renderLanes);\n            const update = createUpdate(NoTimestamp, lane);\n            update.tag = ForceUpdate;\n            // TODO: Because we don't have a work-in-progress, this will add the\n            // update to the current fiber, too, which means it will persist even if\n            // this render is thrown away. Since it's a race condition, not sure it's\n            // worth fixing.\n\n            // Inlined `enqueueUpdate` to remove interleaved update check\n            const updateQueue = fiber.updateQueue;\n            if (updateQueue === null) {\n              // Only occurs if the fiber has been unmounted.\n            } else {\n              const sharedQueue: SharedQueue<any> = (updateQueue: any).shared;\n              const pending = sharedQueue.pending;\n              if (pending === null) {\n                // This is the first update. Create a circular list.\n                update.next = update;\n              } else {\n                update.next = pending.next;\n                pending.next = update;\n              }\n              sharedQueue.pending = update;\n            }\n          }\n\n          fiber.lanes = mergeLanes(fiber.lanes, renderLanes);\n          const alternate = fiber.alternate;\n          if (alternate !== null) {\n            alternate.lanes = mergeLanes(alternate.lanes, renderLanes);\n          }\n          scheduleWorkOnParentPath(fiber.return, renderLanes);\n\n          // Mark the updated lanes on the list, too.\n          list.lanes = mergeLanes(list.lanes, renderLanes);\n\n          // Since we already found a match, we can stop traversing the\n          // dependency list.\n          break;\n        }\n        dependency = dependency.next;\n      }\n    } else if (fiber.tag === ContextProvider) {\n      // Don't scan deeper if this is a matching provider\n      nextFiber = fiber.type === workInProgress.type ? null : fiber.child;\n    } else if (\n      enableSuspenseServerRenderer &&\n      fiber.tag === DehydratedFragment\n    ) {\n      // If a dehydrated suspense boundary is in this subtree, we don't know\n      // if it will have any context consumers in it. The best we can do is\n      // mark it as having updates.\n      const parentSuspense = fiber.return;\n      invariant(\n        parentSuspense !== null,\n        'We just came from a parent so we must have had a parent. This is a bug in React.',\n      );\n      parentSuspense.lanes = mergeLanes(parentSuspense.lanes, renderLanes);\n      const alternate = parentSuspense.alternate;\n      if (alternate !== null) {\n        alternate.lanes = mergeLanes(alternate.lanes, renderLanes);\n      }\n      // This is intentionally passing this fiber as the parent\n      // because we want to schedule this fiber as having work\n      // on its children. We'll use the childLanes on\n      // this fiber to indicate that a context has changed.\n      scheduleWorkOnParentPath(parentSuspense, renderLanes);\n      nextFiber = fiber.sibling;\n    } else {\n      // Traverse down.\n      nextFiber = fiber.child;\n    }\n\n    if (nextFiber !== null) {\n      // Set the return pointer of the child to the work-in-progress fiber.\n      nextFiber.return = fiber;\n    } else {\n      // No child. Traverse to next sibling.\n      nextFiber = fiber;\n      while (nextFiber !== null) {\n        if (nextFiber === workInProgress) {\n          // We're back to the root of this subtree. Exit.\n          nextFiber = null;\n          break;\n        }\n        const sibling = nextFiber.sibling;\n        if (sibling !== null) {\n          // Set the return pointer of the sibling to the work-in-progress fiber.\n          sibling.return = nextFiber.return;\n          nextFiber = sibling;\n          break;\n        }\n        // No more siblings. Traverse up.\n        nextFiber = nextFiber.return;\n      }\n    }\n    fiber = nextFiber;\n  }\n}\n\nfunction propagateContextChanges<T>(\n  workInProgress: Fiber,\n  contexts: Array<any>,\n  renderLanes: Lanes,\n  forcePropagateEntireTree: boolean,\n): void {\n  // Only used by lazy implementation\n  if (!enableLazyContextPropagation) {\n    return;\n  }\n  let fiber = workInProgress.child;\n  if (fiber !== null) {\n    // Set the return pointer of the child to the work-in-progress fiber.\n    fiber.return = workInProgress;\n  }\n  while (fiber !== null) {\n    let nextFiber;\n\n    // Visit this fiber.\n    const list = fiber.dependencies;\n    if (list !== null) {\n      nextFiber = fiber.child;\n\n      let dep = list.firstContext;\n      findChangedDep: while (dep !== null) {\n        // Assigning these to constants to help Flow\n        const dependency = dep;\n        const consumer = fiber;\n        findContext: for (let i = 0; i < contexts.length; i++) {\n          const context: ReactContext<T> = contexts[i];\n          // Check if the context matches.\n          // TODO: Compare selected values to bail out early.\n          if (dependency.context === context) {\n            // Match! Schedule an update on this fiber.\n\n            // In the lazy implementation, don't mark a dirty flag on the\n            // dependency itself. Not all changes are propagated, so we can't\n            // rely on the propagation function alone to determine whether\n            // something has changed; the consumer will check. In the future, we\n            // could add back a dirty flag as an optimization to avoid double\n            // checking, but until we have selectors it's not really worth\n            // the trouble.\n            consumer.lanes = mergeLanes(consumer.lanes, renderLanes);\n            const alternate = consumer.alternate;\n            if (alternate !== null) {\n              alternate.lanes = mergeLanes(alternate.lanes, renderLanes);\n            }\n            scheduleWorkOnParentPath(consumer.return, renderLanes);\n\n            if (!forcePropagateEntireTree) {\n              // During lazy propagation, when we find a match, we can defer\n              // propagating changes to the children, because we're going to\n              // visit them during render. We should continue propagating the\n              // siblings, though\n              nextFiber = null;\n            }\n\n            // Since we already found a match, we can stop traversing the\n            // dependency list.\n            break findChangedDep;\n          }\n        }\n        dep = dependency.next;\n      }\n    } else if (\n      enableSuspenseServerRenderer &&\n      fiber.tag === DehydratedFragment\n    ) {\n      // If a dehydrated suspense boundary is in this subtree, we don't know\n      // if it will have any context consumers in it. The best we can do is\n      // mark it as having updates.\n      const parentSuspense = fiber.return;\n      invariant(\n        parentSuspense !== null,\n        'We just came from a parent so we must have had a parent. This is a bug in React.',\n      );\n      parentSuspense.lanes = mergeLanes(parentSuspense.lanes, renderLanes);\n      const alternate = parentSuspense.alternate;\n      if (alternate !== null) {\n        alternate.lanes = mergeLanes(alternate.lanes, renderLanes);\n      }\n      // This is intentionally passing this fiber as the parent\n      // because we want to schedule this fiber as having work\n      // on its children. We'll use the childLanes on\n      // this fiber to indicate that a context has changed.\n      scheduleWorkOnParentPath(parentSuspense, renderLanes);\n      nextFiber = null;\n    } else {\n      // Traverse down.\n      nextFiber = fiber.child;\n    }\n\n    if (nextFiber !== null) {\n      // Set the return pointer of the child to the work-in-progress fiber.\n      nextFiber.return = fiber;\n    } else {\n      // No child. Traverse to next sibling.\n      nextFiber = fiber;\n      while (nextFiber !== null) {\n        if (nextFiber === workInProgress) {\n          // We're back to the root of this subtree. Exit.\n          nextFiber = null;\n          break;\n        }\n        const sibling = nextFiber.sibling;\n        if (sibling !== null) {\n          // Set the return pointer of the sibling to the work-in-progress fiber.\n          sibling.return = nextFiber.return;\n          nextFiber = sibling;\n          break;\n        }\n        // No more siblings. Traverse up.\n        nextFiber = nextFiber.return;\n      }\n    }\n    fiber = nextFiber;\n  }\n}\n\nexport function lazilyPropagateParentContextChanges(\n  current: Fiber,\n  workInProgress: Fiber,\n  renderLanes: Lanes,\n) {\n  const forcePropagateEntireTree = false;\n  propagateParentContextChanges(\n    current,\n    workInProgress,\n    renderLanes,\n    forcePropagateEntireTree,\n  );\n}\n\n// Used for propagating a deferred tree (Suspense, Offscreen). We must propagate\n// to the entire subtree, because we won't revisit it until after the current\n// render has completed, at which point we'll have lost track of which providers\n// have changed.\nexport function propagateParentContextChangesToDeferredTree(\n  current: Fiber,\n  workInProgress: Fiber,\n  renderLanes: Lanes,\n) {\n  const forcePropagateEntireTree = true;\n  propagateParentContextChanges(\n    current,\n    workInProgress,\n    renderLanes,\n    forcePropagateEntireTree,\n  );\n}\n\nfunction propagateParentContextChanges(\n  current: Fiber,\n  workInProgress: Fiber,\n  renderLanes: Lanes,\n  forcePropagateEntireTree: boolean,\n) {\n  if (!enableLazyContextPropagation) {\n    return;\n  }\n\n  // Collect all the parent providers that changed. Since this is usually small\n  // number, we use an Array instead of Set.\n  let contexts = null;\n  let parent = workInProgress;\n  let isInsidePropagationBailout = false;\n  while (parent !== null) {\n    if (!isInsidePropagationBailout) {\n      if ((parent.flags & NeedsPropagation) !== NoFlags) {\n        isInsidePropagationBailout = true;\n      } else if ((parent.flags & DidPropagateContext) !== NoFlags) {\n        break;\n      }\n    }\n\n    if (parent.tag === ContextProvider) {\n      const currentParent = parent.alternate;\n      invariant(\n        currentParent !== null,\n        'Should have a current fiber. This is a bug in React.',\n      );\n      const oldProps = currentParent.memoizedProps;\n      if (oldProps !== null) {\n        const providerType: ReactProviderType<any> = parent.type;\n        const context: ReactContext<any> = providerType._context;\n\n        const newProps = parent.pendingProps;\n        const newValue = newProps.value;\n\n        const oldValue = oldProps.value;\n\n        if (!is(newValue, oldValue)) {\n          if (contexts !== null) {\n            contexts.push(context);\n          } else {\n            contexts = [context];\n          }\n        }\n      }\n    }\n    parent = parent.return;\n  }\n\n  if (contexts !== null) {\n    // If there were any changed providers, search through the children and\n    // propagate their changes.\n    propagateContextChanges(\n      workInProgress,\n      contexts,\n      renderLanes,\n      forcePropagateEntireTree,\n    );\n  }\n\n  // This is an optimization so that we only propagate once per subtree. If a\n  // deeply nested child bails out, and it calls this propagation function, it\n  // uses this flag to know that the remaining ancestor providers have already\n  // been propagated.\n  //\n  // NOTE: This optimization is only necessary because we sometimes enter the\n  // begin phase of nodes that don't have any work scheduled on them —\n  // specifically, the siblings of a node that _does_ have scheduled work. The\n  // siblings will bail out and call this function again, even though we already\n  // propagated content changes to it and its subtree. So we use this flag to\n  // mark that the parent providers already propagated.\n  //\n  // Unfortunately, though, we need to ignore this flag when we're inside a\n  // tree whose context propagation was deferred — that's what the\n  // `NeedsPropagation` flag is for.\n  //\n  // If we could instead bail out before entering the siblings' begin phase,\n  // then we could remove both `DidPropagateContext` and `NeedsPropagation`.\n  // Consider this as part of the next refactor to the fiber tree structure.\n  workInProgress.flags |= DidPropagateContext;\n}\n\nexport function checkIfContextChanged(currentDependencies: Dependencies) {\n  if (!enableLazyContextPropagation) {\n    return false;\n  }\n  // Iterate over the current dependencies to see if something changed. This\n  // only gets called if props and state has already bailed out, so it's a\n  // relatively uncommon path, except at the root of a changed subtree.\n  // Alternatively, we could move these comparisons into `readContext`, but\n  // that's a much hotter path, so I think this is an appropriate trade off.\n  let dependency = currentDependencies.firstContext;\n  while (dependency !== null) {\n    const context = dependency.context;\n    const newValue = isPrimaryRenderer\n      ? context._currentValue\n      : context._currentValue2;\n    const oldValue = dependency.memoizedValue;\n    if (!is(newValue, oldValue)) {\n      return true;\n    }\n    dependency = dependency.next;\n  }\n  return false;\n}\n\nexport function prepareToReadContext(\n  workInProgress: Fiber,\n  renderLanes: Lanes,\n): void {\n  currentlyRenderingFiber = workInProgress;\n  lastContextDependency = null;\n  lastFullyObservedContext = null;\n\n  const dependencies = workInProgress.dependencies;\n  if (dependencies !== null) {\n    if (enableLazyContextPropagation) {\n      // Reset the work-in-progress list\n      dependencies.firstContext = null;\n    } else {\n      const firstContext = dependencies.firstContext;\n      if (firstContext !== null) {\n        if (includesSomeLane(dependencies.lanes, renderLanes)) {\n          // Context list has a pending update. Mark that this fiber performed work.\n          markWorkInProgressReceivedUpdate();\n        }\n        // Reset the work-in-progress list\n        dependencies.firstContext = null;\n      }\n    }\n  }\n}\n\nexport function readContext<T>(context: ReactContext<T>): T {\n  if (__DEV__) {\n    // This warning would fire if you read context inside a Hook like useMemo.\n    // Unlike the class check below, it's not enforced in production for perf.\n    if (isDisallowedContextReadInDEV) {\n      console.error(\n        'Context can only be read while React is rendering. ' +\n          'In classes, you can read it in the render method or getDerivedStateFromProps. ' +\n          'In function components, you can read it directly in the function body, but not ' +\n          'inside Hooks like useReducer() or useMemo().',\n      );\n    }\n  }\n\n  const value = isPrimaryRenderer\n    ? context._currentValue\n    : context._currentValue2;\n\n  if (lastFullyObservedContext === context) {\n    // Nothing to do. We already observe everything in this context.\n  } else {\n    const contextItem = {\n      context: ((context: any): ReactContext<mixed>),\n      memoizedValue: value,\n      next: null,\n    };\n\n    if (lastContextDependency === null) {\n      invariant(\n        currentlyRenderingFiber !== null,\n        'Context can only be read while React is rendering. ' +\n          'In classes, you can read it in the render method or getDerivedStateFromProps. ' +\n          'In function components, you can read it directly in the function body, but not ' +\n          'inside Hooks like useReducer() or useMemo().',\n      );\n\n      // This is the first dependency for this component. Create a new list.\n      lastContextDependency = contextItem;\n      currentlyRenderingFiber.dependencies = {\n        lanes: NoLanes,\n        firstContext: contextItem,\n      };\n      if (enableLazyContextPropagation) {\n        currentlyRenderingFiber.flags |= NeedsPropagation;\n      }\n    } else {\n      // Append a new context item.\n      lastContextDependency = lastContextDependency.next = contextItem;\n    }\n  }\n  return value;\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {UpdateQueue as HookQueue} from './ReactFiberHooks.old';\nimport type {SharedQueue as ClassQueue} from './ReactUpdateQueue.old';\n\n// An array of all update queues that received updates during the current\n// render. When this render exits, either because it finishes or because it is\n// interrupted, the interleaved updates will be transferred onto the main part\n// of the queue.\nlet interleavedQueues: Array<\n  HookQueue<any, any> | ClassQueue<any>,\n> | null = null;\n\nexport function pushInterleavedQueue(\n  queue: HookQueue<any, any> | ClassQueue<any>,\n) {\n  if (interleavedQueues === null) {\n    interleavedQueues = [queue];\n  } else {\n    interleavedQueues.push(queue);\n  }\n}\n\nexport function enqueueInterleavedUpdates() {\n  // Transfer the interleaved updates onto the main queue. Each queue has a\n  // `pending` field and an `interleaved` field. When they are not null, they\n  // point to the last node in a circular linked list. We need to append the\n  // interleaved list to the end of the pending list by joining them into a\n  // single, circular list.\n  if (interleavedQueues !== null) {\n    for (let i = 0; i < interleavedQueues.length; i++) {\n      const queue = interleavedQueues[i];\n      const lastInterleavedUpdate = queue.interleaved;\n      if (lastInterleavedUpdate !== null) {\n        queue.interleaved = null;\n        const firstInterleavedUpdate = lastInterleavedUpdate.next;\n        const lastPendingUpdate = queue.pending;\n        if (lastPendingUpdate !== null) {\n          const firstPendingUpdate = lastPendingUpdate.next;\n          lastPendingUpdate.next = (firstInterleavedUpdate: any);\n          lastInterleavedUpdate.next = (firstPendingUpdate: any);\n        }\n        queue.pending = (lastInterleavedUpdate: any);\n      }\n    }\n    interleavedQueues = null;\n  }\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\n// UpdateQueue is a linked list of prioritized updates.\n//\n// Like fibers, update queues come in pairs: a current queue, which represents\n// the visible state of the screen, and a work-in-progress queue, which can be\n// mutated and processed asynchronously before it is committed — a form of\n// double buffering. If a work-in-progress render is discarded before finishing,\n// we create a new work-in-progress by cloning the current queue.\n//\n// Both queues share a persistent, singly-linked list structure. To schedule an\n// update, we append it to the end of both queues. Each queue maintains a\n// pointer to first update in the persistent list that hasn't been processed.\n// The work-in-progress pointer always has a position equal to or greater than\n// the current queue, since we always work on that one. The current queue's\n// pointer is only updated during the commit phase, when we swap in the\n// work-in-progress.\n//\n// For example:\n//\n//   Current pointer:           A - B - C - D - E - F\n//   Work-in-progress pointer:              D - E - F\n//                                          ^\n//                                          The work-in-progress queue has\n//                                          processed more updates than current.\n//\n// The reason we append to both queues is because otherwise we might drop\n// updates without ever processing them. For example, if we only add updates to\n// the work-in-progress queue, some updates could be lost whenever a work-in\n// -progress render restarts by cloning from current. Similarly, if we only add\n// updates to the current queue, the updates will be lost whenever an already\n// in-progress queue commits and swaps with the current queue. However, by\n// adding to both queues, we guarantee that the update will be part of the next\n// work-in-progress. (And because the work-in-progress queue becomes the\n// current queue once it commits, there's no danger of applying the same\n// update twice.)\n//\n// Prioritization\n// --------------\n//\n// Updates are not sorted by priority, but by insertion; new updates are always\n// appended to the end of the list.\n//\n// The priority is still important, though. When processing the update queue\n// during the render phase, only the updates with sufficient priority are\n// included in the result. If we skip an update because it has insufficient\n// priority, it remains in the queue to be processed later, during a lower\n// priority render. Crucially, all updates subsequent to a skipped update also\n// remain in the queue *regardless of their priority*. That means high priority\n// updates are sometimes processed twice, at two separate priorities. We also\n// keep track of a base state, that represents the state before the first\n// update in the queue is applied.\n//\n// For example:\n//\n//   Given a base state of '', and the following queue of updates\n//\n//     A1 - B2 - C1 - D2\n//\n//   where the number indicates the priority, and the update is applied to the\n//   previous state by appending a letter, React will process these updates as\n//   two separate renders, one per distinct priority level:\n//\n//   First render, at priority 1:\n//     Base state: ''\n//     Updates: [A1, C1]\n//     Result state: 'AC'\n//\n//   Second render, at priority 2:\n//     Base state: 'A'            <-  The base state does not include C1,\n//                                    because B2 was skipped.\n//     Updates: [B2, C1, D2]      <-  C1 was rebased on top of B2\n//     Result state: 'ABCD'\n//\n// Because we process updates in insertion order, and rebase high priority\n// updates when preceding updates are skipped, the final result is deterministic\n// regardless of priority. Intermediate state may vary according to system\n// resources, but the final state is always the same.\n\nimport type {Fiber, FiberRoot} from './ReactInternalTypes';\nimport type {Lanes, Lane} from './ReactFiberLane.old';\n\nimport {\n  NoLane,\n  NoLanes,\n  isSubsetOfLanes,\n  mergeLanes,\n  isTransitionLane,\n  intersectLanes,\n  markRootEntangled,\n} from './ReactFiberLane.old';\nimport {\n  enterDisallowedContextReadInDEV,\n  exitDisallowedContextReadInDEV,\n} from './ReactFiberNewContext.old';\nimport {Callback, ShouldCapture, DidCapture} from './ReactFiberFlags';\n\nimport {debugRenderPhaseSideEffectsForStrictMode} from 'shared/ReactFeatureFlags';\n\nimport {StrictLegacyMode} from './ReactTypeOfMode';\nimport {\n  markSkippedUpdateLanes,\n  isInterleavedUpdate,\n} from './ReactFiberWorkLoop.old';\nimport {pushInterleavedQueue} from './ReactFiberInterleavedUpdates.old';\nimport {setIsStrictModeForDevtools} from './ReactFiberReconciler';\n\nimport invariant from 'shared/invariant';\n\nexport type Update<State> = {|\n  // TODO: Temporary field. Will remove this by storing a map of\n  // transition -> event time on the root.\n  eventTime: number,\n  lane: Lane,\n\n  tag: 0 | 1 | 2 | 3,\n  payload: any,\n  callback: (() => mixed) | null,\n\n  next: Update<State> | null,\n|};\n\nexport type SharedQueue<State> = {|\n  pending: Update<State> | null,\n  interleaved: Update<State> | null,\n  lanes: Lanes,\n|};\n\nexport type UpdateQueue<State> = {|\n  baseState: State,\n  firstBaseUpdate: Update<State> | null,\n  lastBaseUpdate: Update<State> | null,\n  shared: SharedQueue<State>,\n  effects: Array<Update<State>> | null,\n|};\n\nexport const UpdateState = 0;\nexport const ReplaceState = 1;\nexport const ForceUpdate = 2;\nexport const CaptureUpdate = 3;\n\n// Global state that is reset at the beginning of calling `processUpdateQueue`.\n// It should only be read right after calling `processUpdateQueue`, via\n// `checkHasForceUpdateAfterProcessing`.\nlet hasForceUpdate = false;\n\nlet didWarnUpdateInsideUpdate;\nlet currentlyProcessingQueue;\nexport let resetCurrentlyProcessingQueue;\nif (__DEV__) {\n  didWarnUpdateInsideUpdate = false;\n  currentlyProcessingQueue = null;\n  resetCurrentlyProcessingQueue = () => {\n    currentlyProcessingQueue = null;\n  };\n}\n\nexport function initializeUpdateQueue<State>(fiber: Fiber): void {\n  const queue: UpdateQueue<State> = {\n    baseState: fiber.memoizedState,\n    firstBaseUpdate: null,\n    lastBaseUpdate: null,\n    shared: {\n      pending: null,\n      interleaved: null,\n      lanes: NoLanes,\n    },\n    effects: null,\n  };\n  fiber.updateQueue = queue;\n}\n\nexport function cloneUpdateQueue<State>(\n  current: Fiber,\n  workInProgress: Fiber,\n): void {\n  // Clone the update queue from current. Unless it's already a clone.\n  const queue: UpdateQueue<State> = (workInProgress.updateQueue: any);\n  const currentQueue: UpdateQueue<State> = (current.updateQueue: any);\n  if (queue === currentQueue) {\n    const clone: UpdateQueue<State> = {\n      baseState: currentQueue.baseState,\n      firstBaseUpdate: currentQueue.firstBaseUpdate,\n      lastBaseUpdate: currentQueue.lastBaseUpdate,\n      shared: currentQueue.shared,\n      effects: currentQueue.effects,\n    };\n    workInProgress.updateQueue = clone;\n  }\n}\n\nexport function createUpdate(eventTime: number, lane: Lane): Update<*> {\n  const update: Update<*> = {\n    eventTime,\n    lane,\n\n    tag: UpdateState,\n    payload: null,\n    callback: null,\n\n    next: null,\n  };\n  return update;\n}\n\nexport function enqueueUpdate<State>(\n  fiber: Fiber,\n  update: Update<State>,\n  lane: Lane,\n) {\n  const updateQueue = fiber.updateQueue;\n  if (updateQueue === null) {\n    // Only occurs if the fiber has been unmounted.\n    return;\n  }\n\n  const sharedQueue: SharedQueue<State> = (updateQueue: any).shared;\n\n  if (isInterleavedUpdate(fiber, lane)) {\n    const interleaved = sharedQueue.interleaved;\n    if (interleaved === null) {\n      // This is the first update. Create a circular list.\n      update.next = update;\n      // At the end of the current render, this queue's interleaved updates will\n      // be transferred to the pending queue.\n      pushInterleavedQueue(sharedQueue);\n    } else {\n      update.next = interleaved.next;\n      interleaved.next = update;\n    }\n    sharedQueue.interleaved = update;\n  } else {\n    const pending = sharedQueue.pending;\n    if (pending === null) {\n      // This is the first update. Create a circular list.\n      update.next = update;\n    } else {\n      update.next = pending.next;\n      pending.next = update;\n    }\n    sharedQueue.pending = update;\n  }\n\n  if (__DEV__) {\n    if (\n      currentlyProcessingQueue === sharedQueue &&\n      !didWarnUpdateInsideUpdate\n    ) {\n      console.error(\n        'An update (setState, replaceState, or forceUpdate) was scheduled ' +\n          'from inside an update function. Update functions should be pure, ' +\n          'with zero side-effects. Consider using componentDidUpdate or a ' +\n          'callback.',\n      );\n      didWarnUpdateInsideUpdate = true;\n    }\n  }\n}\n\nexport function entangleTransitions(root: FiberRoot, fiber: Fiber, lane: Lane) {\n  const updateQueue = fiber.updateQueue;\n  if (updateQueue === null) {\n    // Only occurs if the fiber has been unmounted.\n    return;\n  }\n\n  const sharedQueue: SharedQueue<mixed> = (updateQueue: any).shared;\n  if (isTransitionLane(lane)) {\n    let queueLanes = sharedQueue.lanes;\n\n    // If any entangled lanes are no longer pending on the root, then they must\n    // have finished. We can remove them from the shared queue, which represents\n    // a superset of the actually pending lanes. In some cases we may entangle\n    // more than we need to, but that's OK. In fact it's worse if we *don't*\n    // entangle when we should.\n    queueLanes = intersectLanes(queueLanes, root.pendingLanes);\n\n    // Entangle the new transition lane with the other transition lanes.\n    const newQueueLanes = mergeLanes(queueLanes, lane);\n    sharedQueue.lanes = newQueueLanes;\n    // Even if queue.lanes already include lane, we don't know for certain if\n    // the lane finished since the last time we entangled it. So we need to\n    // entangle it again, just to be sure.\n    markRootEntangled(root, newQueueLanes);\n  }\n}\n\nexport function enqueueCapturedUpdate<State>(\n  workInProgress: Fiber,\n  capturedUpdate: Update<State>,\n) {\n  // Captured updates are updates that are thrown by a child during the render\n  // phase. They should be discarded if the render is aborted. Therefore,\n  // we should only put them on the work-in-progress queue, not the current one.\n  let queue: UpdateQueue<State> = (workInProgress.updateQueue: any);\n\n  // Check if the work-in-progress queue is a clone.\n  const current = workInProgress.alternate;\n  if (current !== null) {\n    const currentQueue: UpdateQueue<State> = (current.updateQueue: any);\n    if (queue === currentQueue) {\n      // The work-in-progress queue is the same as current. This happens when\n      // we bail out on a parent fiber that then captures an error thrown by\n      // a child. Since we want to append the update only to the work-in\n      // -progress queue, we need to clone the updates. We usually clone during\n      // processUpdateQueue, but that didn't happen in this case because we\n      // skipped over the parent when we bailed out.\n      let newFirst = null;\n      let newLast = null;\n      const firstBaseUpdate = queue.firstBaseUpdate;\n      if (firstBaseUpdate !== null) {\n        // Loop through the updates and clone them.\n        let update = firstBaseUpdate;\n        do {\n          const clone: Update<State> = {\n            eventTime: update.eventTime,\n            lane: update.lane,\n\n            tag: update.tag,\n            payload: update.payload,\n            callback: update.callback,\n\n            next: null,\n          };\n          if (newLast === null) {\n            newFirst = newLast = clone;\n          } else {\n            newLast.next = clone;\n            newLast = clone;\n          }\n          update = update.next;\n        } while (update !== null);\n\n        // Append the captured update the end of the cloned list.\n        if (newLast === null) {\n          newFirst = newLast = capturedUpdate;\n        } else {\n          newLast.next = capturedUpdate;\n          newLast = capturedUpdate;\n        }\n      } else {\n        // There are no base updates.\n        newFirst = newLast = capturedUpdate;\n      }\n      queue = {\n        baseState: currentQueue.baseState,\n        firstBaseUpdate: newFirst,\n        lastBaseUpdate: newLast,\n        shared: currentQueue.shared,\n        effects: currentQueue.effects,\n      };\n      workInProgress.updateQueue = queue;\n      return;\n    }\n  }\n\n  // Append the update to the end of the list.\n  const lastBaseUpdate = queue.lastBaseUpdate;\n  if (lastBaseUpdate === null) {\n    queue.firstBaseUpdate = capturedUpdate;\n  } else {\n    lastBaseUpdate.next = capturedUpdate;\n  }\n  queue.lastBaseUpdate = capturedUpdate;\n}\n\nfunction getStateFromUpdate<State>(\n  workInProgress: Fiber,\n  queue: UpdateQueue<State>,\n  update: Update<State>,\n  prevState: State,\n  nextProps: any,\n  instance: any,\n): any {\n  switch (update.tag) {\n    case ReplaceState: {\n      const payload = update.payload;\n      if (typeof payload === 'function') {\n        // Updater function\n        if (__DEV__) {\n          enterDisallowedContextReadInDEV();\n        }\n        const nextState = payload.call(instance, prevState, nextProps);\n        if (__DEV__) {\n          if (\n            debugRenderPhaseSideEffectsForStrictMode &&\n            workInProgress.mode & StrictLegacyMode\n          ) {\n            setIsStrictModeForDevtools(true);\n            try {\n              payload.call(instance, prevState, nextProps);\n            } finally {\n              setIsStrictModeForDevtools(false);\n            }\n          }\n          exitDisallowedContextReadInDEV();\n        }\n        return nextState;\n      }\n      // State object\n      return payload;\n    }\n    case CaptureUpdate: {\n      workInProgress.flags =\n        (workInProgress.flags & ~ShouldCapture) | DidCapture;\n    }\n    // Intentional fallthrough\n    case UpdateState: {\n      const payload = update.payload;\n      let partialState;\n      if (typeof payload === 'function') {\n        // Updater function\n        if (__DEV__) {\n          enterDisallowedContextReadInDEV();\n        }\n        partialState = payload.call(instance, prevState, nextProps);\n        if (__DEV__) {\n          if (\n            debugRenderPhaseSideEffectsForStrictMode &&\n            workInProgress.mode & StrictLegacyMode\n          ) {\n            setIsStrictModeForDevtools(true);\n            try {\n              payload.call(instance, prevState, nextProps);\n            } finally {\n              setIsStrictModeForDevtools(false);\n            }\n          }\n          exitDisallowedContextReadInDEV();\n        }\n      } else {\n        // Partial state object\n        partialState = payload;\n      }\n      if (partialState === null || partialState === undefined) {\n        // Null and undefined are treated as no-ops.\n        return prevState;\n      }\n      // Merge the partial state and the previous state.\n      return Object.assign({}, prevState, partialState);\n    }\n    case ForceUpdate: {\n      hasForceUpdate = true;\n      return prevState;\n    }\n  }\n  return prevState;\n}\n\nexport function processUpdateQueue<State>(\n  workInProgress: Fiber,\n  props: any,\n  instance: any,\n  renderLanes: Lanes,\n): void {\n  // This is always non-null on a ClassComponent or HostRoot\n  const queue: UpdateQueue<State> = (workInProgress.updateQueue: any);\n\n  hasForceUpdate = false;\n\n  if (__DEV__) {\n    currentlyProcessingQueue = queue.shared;\n  }\n\n  let firstBaseUpdate = queue.firstBaseUpdate;\n  let lastBaseUpdate = queue.lastBaseUpdate;\n\n  // Check if there are pending updates. If so, transfer them to the base queue.\n  let pendingQueue = queue.shared.pending;\n  if (pendingQueue !== null) {\n    queue.shared.pending = null;\n\n    // The pending queue is circular. Disconnect the pointer between first\n    // and last so that it's non-circular.\n    const lastPendingUpdate = pendingQueue;\n    const firstPendingUpdate = lastPendingUpdate.next;\n    lastPendingUpdate.next = null;\n    // Append pending updates to base queue\n    if (lastBaseUpdate === null) {\n      firstBaseUpdate = firstPendingUpdate;\n    } else {\n      lastBaseUpdate.next = firstPendingUpdate;\n    }\n    lastBaseUpdate = lastPendingUpdate;\n\n    // If there's a current queue, and it's different from the base queue, then\n    // we need to transfer the updates to that queue, too. Because the base\n    // queue is a singly-linked list with no cycles, we can append to both\n    // lists and take advantage of structural sharing.\n    // TODO: Pass `current` as argument\n    const current = workInProgress.alternate;\n    if (current !== null) {\n      // This is always non-null on a ClassComponent or HostRoot\n      const currentQueue: UpdateQueue<State> = (current.updateQueue: any);\n      const currentLastBaseUpdate = currentQueue.lastBaseUpdate;\n      if (currentLastBaseUpdate !== lastBaseUpdate) {\n        if (currentLastBaseUpdate === null) {\n          currentQueue.firstBaseUpdate = firstPendingUpdate;\n        } else {\n          currentLastBaseUpdate.next = firstPendingUpdate;\n        }\n        currentQueue.lastBaseUpdate = lastPendingUpdate;\n      }\n    }\n  }\n\n  // These values may change as we process the queue.\n  if (firstBaseUpdate !== null) {\n    // Iterate through the list of updates to compute the result.\n    let newState = queue.baseState;\n    // TODO: Don't need to accumulate this. Instead, we can remove renderLanes\n    // from the original lanes.\n    let newLanes = NoLanes;\n\n    let newBaseState = null;\n    let newFirstBaseUpdate = null;\n    let newLastBaseUpdate = null;\n\n    let update = firstBaseUpdate;\n    do {\n      const updateLane = update.lane;\n      const updateEventTime = update.eventTime;\n      if (!isSubsetOfLanes(renderLanes, updateLane)) {\n        // Priority is insufficient. Skip this update. If this is the first\n        // skipped update, the previous update/state is the new base\n        // update/state.\n        const clone: Update<State> = {\n          eventTime: updateEventTime,\n          lane: updateLane,\n\n          tag: update.tag,\n          payload: update.payload,\n          callback: update.callback,\n\n          next: null,\n        };\n        if (newLastBaseUpdate === null) {\n          newFirstBaseUpdate = newLastBaseUpdate = clone;\n          newBaseState = newState;\n        } else {\n          newLastBaseUpdate = newLastBaseUpdate.next = clone;\n        }\n        // Update the remaining priority in the queue.\n        newLanes = mergeLanes(newLanes, updateLane);\n      } else {\n        // This update does have sufficient priority.\n\n        if (newLastBaseUpdate !== null) {\n          const clone: Update<State> = {\n            eventTime: updateEventTime,\n            // This update is going to be committed so we never want uncommit\n            // it. Using NoLane works because 0 is a subset of all bitmasks, so\n            // this will never be skipped by the check above.\n            lane: NoLane,\n\n            tag: update.tag,\n            payload: update.payload,\n            callback: update.callback,\n\n            next: null,\n          };\n          newLastBaseUpdate = newLastBaseUpdate.next = clone;\n        }\n\n        // Process this update.\n        newState = getStateFromUpdate(\n          workInProgress,\n          queue,\n          update,\n          newState,\n          props,\n          instance,\n        );\n        const callback = update.callback;\n        if (\n          callback !== null &&\n          // If the update was already committed, we should not queue its\n          // callback again.\n          update.lane !== NoLane\n        ) {\n          workInProgress.flags |= Callback;\n          const effects = queue.effects;\n          if (effects === null) {\n            queue.effects = [update];\n          } else {\n            effects.push(update);\n          }\n        }\n      }\n      update = update.next;\n      if (update === null) {\n        pendingQueue = queue.shared.pending;\n        if (pendingQueue === null) {\n          break;\n        } else {\n          // An update was scheduled from inside a reducer. Add the new\n          // pending updates to the end of the list and keep processing.\n          const lastPendingUpdate = pendingQueue;\n          // Intentionally unsound. Pending updates form a circular list, but we\n          // unravel them when transferring them to the base queue.\n          const firstPendingUpdate = ((lastPendingUpdate.next: any): Update<State>);\n          lastPendingUpdate.next = null;\n          update = firstPendingUpdate;\n          queue.lastBaseUpdate = lastPendingUpdate;\n          queue.shared.pending = null;\n        }\n      }\n    } while (true);\n\n    if (newLastBaseUpdate === null) {\n      newBaseState = newState;\n    }\n\n    queue.baseState = ((newBaseState: any): State);\n    queue.firstBaseUpdate = newFirstBaseUpdate;\n    queue.lastBaseUpdate = newLastBaseUpdate;\n\n    // Interleaved updates are stored on a separate queue. We aren't going to\n    // process them during this render, but we do need to track which lanes\n    // are remaining.\n    const lastInterleaved = queue.shared.interleaved;\n    if (lastInterleaved !== null) {\n      let interleaved = lastInterleaved;\n      do {\n        newLanes = mergeLanes(newLanes, interleaved.lane);\n        interleaved = ((interleaved: any).next: Update<State>);\n      } while (interleaved !== lastInterleaved);\n    } else if (firstBaseUpdate === null) {\n      // `queue.lanes` is used for entangling transitions. We can set it back to\n      // zero once the queue is empty.\n      queue.shared.lanes = NoLanes;\n    }\n\n    // Set the remaining expiration time to be whatever is remaining in the queue.\n    // This should be fine because the only two other things that contribute to\n    // expiration time are props and context. We're already in the middle of the\n    // begin phase by the time we start processing the queue, so we've already\n    // dealt with the props. Context in components that specify\n    // shouldComponentUpdate is tricky; but we'll have to account for\n    // that regardless.\n    markSkippedUpdateLanes(newLanes);\n    workInProgress.lanes = newLanes;\n    workInProgress.memoizedState = newState;\n  }\n\n  if (__DEV__) {\n    currentlyProcessingQueue = null;\n  }\n}\n\nfunction callCallback(callback, context) {\n  invariant(\n    typeof callback === 'function',\n    'Invalid argument passed as callback. Expected a function. Instead ' +\n      'received: %s',\n    callback,\n  );\n  callback.call(context);\n}\n\nexport function resetHasForceUpdateBeforeProcessing() {\n  hasForceUpdate = false;\n}\n\nexport function checkHasForceUpdateAfterProcessing(): boolean {\n  return hasForceUpdate;\n}\n\nexport function commitUpdateQueue<State>(\n  finishedWork: Fiber,\n  finishedQueue: UpdateQueue<State>,\n  instance: any,\n): void {\n  // Commit the effects\n  const effects = finishedQueue.effects;\n  finishedQueue.effects = null;\n  if (effects !== null) {\n    for (let i = 0; i < effects.length; i++) {\n      const effect = effects[i];\n      const callback = effect.callback;\n      if (callback !== null) {\n        effect.callback = null;\n        callCallback(callback, instance);\n      }\n    }\n  }\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Fiber} from './ReactInternalTypes';\nimport type {Lanes} from './ReactFiberLane.old';\nimport type {UpdateQueue} from './ReactUpdateQueue.old';\nimport type {Flags} from './ReactFiberFlags';\n\nimport * as React from 'react';\nimport {\n  LayoutStatic,\n  MountLayoutDev,\n  Update,\n  Snapshot,\n} from './ReactFiberFlags';\nimport {\n  debugRenderPhaseSideEffectsForStrictMode,\n  disableLegacyContext,\n  enableDebugTracing,\n  enableSchedulingProfiler,\n  warnAboutDeprecatedLifecycles,\n  enableStrictEffects,\n  enableLazyContextPropagation,\n  enableSuspenseLayoutEffectSemantics,\n} from 'shared/ReactFeatureFlags';\nimport ReactStrictModeWarnings from './ReactStrictModeWarnings.old';\nimport {isMounted} from './ReactFiberTreeReflection';\nimport {get as getInstance, set as setInstance} from 'shared/ReactInstanceMap';\nimport shallowEqual from 'shared/shallowEqual';\nimport getComponentNameFromFiber from 'react-reconciler/src/getComponentNameFromFiber';\nimport getComponentNameFromType from 'shared/getComponentNameFromType';\nimport invariant from 'shared/invariant';\nimport isArray from 'shared/isArray';\nimport {REACT_CONTEXT_TYPE, REACT_PROVIDER_TYPE} from 'shared/ReactSymbols';\nimport {setIsStrictModeForDevtools} from './ReactFiberReconciler';\n\nimport {resolveDefaultProps} from './ReactFiberLazyComponent.old';\nimport {\n  DebugTracingMode,\n  NoMode,\n  StrictLegacyMode,\n  StrictEffectsMode,\n} from './ReactTypeOfMode';\n\nimport {\n  enqueueUpdate,\n  entangleTransitions,\n  processUpdateQueue,\n  checkHasForceUpdateAfterProcessing,\n  resetHasForceUpdateBeforeProcessing,\n  createUpdate,\n  ReplaceState,\n  ForceUpdate,\n  initializeUpdateQueue,\n  cloneUpdateQueue,\n} from './ReactUpdateQueue.old';\nimport {NoLanes} from './ReactFiberLane.old';\nimport {\n  cacheContext,\n  getMaskedContext,\n  getUnmaskedContext,\n  hasContextChanged,\n  emptyContextObject,\n} from './ReactFiberContext.old';\nimport {readContext, checkIfContextChanged} from './ReactFiberNewContext.old';\nimport {\n  requestEventTime,\n  requestUpdateLane,\n  scheduleUpdateOnFiber,\n} from './ReactFiberWorkLoop.old';\nimport {logForceUpdateScheduled, logStateUpdateScheduled} from './DebugTracing';\n\nimport {\n  markForceUpdateScheduled,\n  markStateUpdateScheduled,\n} from './SchedulingProfiler';\n\nconst fakeInternalInstance = {};\n\n// React.Component uses a shared frozen object by default.\n// We'll use it to determine whether we need to initialize legacy refs.\nexport const emptyRefsObject = new React.Component().refs;\n\nlet didWarnAboutStateAssignmentForComponent;\nlet didWarnAboutUninitializedState;\nlet didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate;\nlet didWarnAboutLegacyLifecyclesAndDerivedState;\nlet didWarnAboutUndefinedDerivedState;\nlet warnOnUndefinedDerivedState;\nlet warnOnInvalidCallback;\nlet didWarnAboutDirectlyAssigningPropsToState;\nlet didWarnAboutContextTypeAndContextTypes;\nlet didWarnAboutInvalidateContextType;\n\nif (__DEV__) {\n  didWarnAboutStateAssignmentForComponent = new Set();\n  didWarnAboutUninitializedState = new Set();\n  didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = new Set();\n  didWarnAboutLegacyLifecyclesAndDerivedState = new Set();\n  didWarnAboutDirectlyAssigningPropsToState = new Set();\n  didWarnAboutUndefinedDerivedState = new Set();\n  didWarnAboutContextTypeAndContextTypes = new Set();\n  didWarnAboutInvalidateContextType = new Set();\n\n  const didWarnOnInvalidCallback = new Set();\n\n  warnOnInvalidCallback = function(callback: mixed, callerName: string) {\n    if (callback === null || typeof callback === 'function') {\n      return;\n    }\n    const key = callerName + '_' + (callback: any);\n    if (!didWarnOnInvalidCallback.has(key)) {\n      didWarnOnInvalidCallback.add(key);\n      console.error(\n        '%s(...): Expected the last optional `callback` argument to be a ' +\n          'function. Instead received: %s.',\n        callerName,\n        callback,\n      );\n    }\n  };\n\n  warnOnUndefinedDerivedState = function(type, partialState) {\n    if (partialState === undefined) {\n      const componentName = getComponentNameFromType(type) || 'Component';\n      if (!didWarnAboutUndefinedDerivedState.has(componentName)) {\n        didWarnAboutUndefinedDerivedState.add(componentName);\n        console.error(\n          '%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. ' +\n            'You have returned undefined.',\n          componentName,\n        );\n      }\n    }\n  };\n\n  // This is so gross but it's at least non-critical and can be removed if\n  // it causes problems. This is meant to give a nicer error message for\n  // ReactDOM15.unstable_renderSubtreeIntoContainer(reactDOM16Component,\n  // ...)) which otherwise throws a \"_processChildContext is not a function\"\n  // exception.\n  Object.defineProperty(fakeInternalInstance, '_processChildContext', {\n    enumerable: false,\n    value: function() {\n      invariant(\n        false,\n        '_processChildContext is not available in React 16+. This likely ' +\n          'means you have multiple copies of React and are attempting to nest ' +\n          'a React 15 tree inside a React 16 tree using ' +\n          \"unstable_renderSubtreeIntoContainer, which isn't supported. Try \" +\n          'to make sure you have only one copy of React (and ideally, switch ' +\n          'to ReactDOM.createPortal).',\n      );\n    },\n  });\n  Object.freeze(fakeInternalInstance);\n}\n\nfunction applyDerivedStateFromProps(\n  workInProgress: Fiber,\n  ctor: any,\n  getDerivedStateFromProps: (props: any, state: any) => any,\n  nextProps: any,\n) {\n  const prevState = workInProgress.memoizedState;\n  let partialState = getDerivedStateFromProps(nextProps, prevState);\n  if (__DEV__) {\n    if (\n      debugRenderPhaseSideEffectsForStrictMode &&\n      workInProgress.mode & StrictLegacyMode\n    ) {\n      setIsStrictModeForDevtools(true);\n      try {\n        // Invoke the function an extra time to help detect side-effects.\n        partialState = getDerivedStateFromProps(nextProps, prevState);\n      } finally {\n        setIsStrictModeForDevtools(false);\n      }\n    }\n    warnOnUndefinedDerivedState(ctor, partialState);\n  }\n  // Merge the partial state and the previous state.\n  const memoizedState =\n    partialState === null || partialState === undefined\n      ? prevState\n      : Object.assign({}, prevState, partialState);\n  workInProgress.memoizedState = memoizedState;\n\n  // Once the update queue is empty, persist the derived state onto the\n  // base state.\n  if (workInProgress.lanes === NoLanes) {\n    // Queue is always non-null for classes\n    const updateQueue: UpdateQueue<any> = (workInProgress.updateQueue: any);\n    updateQueue.baseState = memoizedState;\n  }\n}\n\nconst classComponentUpdater = {\n  isMounted,\n  enqueueSetState(inst, payload, callback) {\n    const fiber = getInstance(inst);\n    const eventTime = requestEventTime();\n    const lane = requestUpdateLane(fiber);\n\n    const update = createUpdate(eventTime, lane);\n    update.payload = payload;\n    if (callback !== undefined && callback !== null) {\n      if (__DEV__) {\n        warnOnInvalidCallback(callback, 'setState');\n      }\n      update.callback = callback;\n    }\n\n    enqueueUpdate(fiber, update, lane);\n    const root = scheduleUpdateOnFiber(fiber, lane, eventTime);\n    if (root !== null) {\n      entangleTransitions(root, fiber, lane);\n    }\n\n    if (__DEV__) {\n      if (enableDebugTracing) {\n        if (fiber.mode & DebugTracingMode) {\n          const name = getComponentNameFromFiber(fiber) || 'Unknown';\n          logStateUpdateScheduled(name, lane, payload);\n        }\n      }\n    }\n\n    if (enableSchedulingProfiler) {\n      markStateUpdateScheduled(fiber, lane);\n    }\n  },\n  enqueueReplaceState(inst, payload, callback) {\n    const fiber = getInstance(inst);\n    const eventTime = requestEventTime();\n    const lane = requestUpdateLane(fiber);\n\n    const update = createUpdate(eventTime, lane);\n    update.tag = ReplaceState;\n    update.payload = payload;\n\n    if (callback !== undefined && callback !== null) {\n      if (__DEV__) {\n        warnOnInvalidCallback(callback, 'replaceState');\n      }\n      update.callback = callback;\n    }\n\n    enqueueUpdate(fiber, update, lane);\n    const root = scheduleUpdateOnFiber(fiber, lane, eventTime);\n    if (root !== null) {\n      entangleTransitions(root, fiber, lane);\n    }\n\n    if (__DEV__) {\n      if (enableDebugTracing) {\n        if (fiber.mode & DebugTracingMode) {\n          const name = getComponentNameFromFiber(fiber) || 'Unknown';\n          logStateUpdateScheduled(name, lane, payload);\n        }\n      }\n    }\n\n    if (enableSchedulingProfiler) {\n      markStateUpdateScheduled(fiber, lane);\n    }\n  },\n  enqueueForceUpdate(inst, callback) {\n    const fiber = getInstance(inst);\n    const eventTime = requestEventTime();\n    const lane = requestUpdateLane(fiber);\n\n    const update = createUpdate(eventTime, lane);\n    update.tag = ForceUpdate;\n\n    if (callback !== undefined && callback !== null) {\n      if (__DEV__) {\n        warnOnInvalidCallback(callback, 'forceUpdate');\n      }\n      update.callback = callback;\n    }\n\n    enqueueUpdate(fiber, update, lane);\n    const root = scheduleUpdateOnFiber(fiber, lane, eventTime);\n    if (root !== null) {\n      entangleTransitions(root, fiber, lane);\n    }\n\n    if (__DEV__) {\n      if (enableDebugTracing) {\n        if (fiber.mode & DebugTracingMode) {\n          const name = getComponentNameFromFiber(fiber) || 'Unknown';\n          logForceUpdateScheduled(name, lane);\n        }\n      }\n    }\n\n    if (enableSchedulingProfiler) {\n      markForceUpdateScheduled(fiber, lane);\n    }\n  },\n};\n\nfunction checkShouldComponentUpdate(\n  workInProgress,\n  ctor,\n  oldProps,\n  newProps,\n  oldState,\n  newState,\n  nextContext,\n) {\n  const instance = workInProgress.stateNode;\n  if (typeof instance.shouldComponentUpdate === 'function') {\n    let shouldUpdate = instance.shouldComponentUpdate(\n      newProps,\n      newState,\n      nextContext,\n    );\n    if (__DEV__) {\n      if (\n        debugRenderPhaseSideEffectsForStrictMode &&\n        workInProgress.mode & StrictLegacyMode\n      ) {\n        setIsStrictModeForDevtools(true);\n        try {\n          // Invoke the function an extra time to help detect side-effects.\n          shouldUpdate = instance.shouldComponentUpdate(\n            newProps,\n            newState,\n            nextContext,\n          );\n        } finally {\n          setIsStrictModeForDevtools(false);\n        }\n      }\n      if (shouldUpdate === undefined) {\n        console.error(\n          '%s.shouldComponentUpdate(): Returned undefined instead of a ' +\n            'boolean value. Make sure to return true or false.',\n          getComponentNameFromType(ctor) || 'Component',\n        );\n      }\n    }\n\n    return shouldUpdate;\n  }\n\n  if (ctor.prototype && ctor.prototype.isPureReactComponent) {\n    return (\n      !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState)\n    );\n  }\n\n  return true;\n}\n\nfunction checkClassInstance(workInProgress: Fiber, ctor: any, newProps: any) {\n  const instance = workInProgress.stateNode;\n  if (__DEV__) {\n    const name = getComponentNameFromType(ctor) || 'Component';\n    const renderPresent = instance.render;\n\n    if (!renderPresent) {\n      if (ctor.prototype && typeof ctor.prototype.render === 'function') {\n        console.error(\n          '%s(...): No `render` method found on the returned component ' +\n            'instance: did you accidentally return an object from the constructor?',\n          name,\n        );\n      } else {\n        console.error(\n          '%s(...): No `render` method found on the returned component ' +\n            'instance: you may have forgotten to define `render`.',\n          name,\n        );\n      }\n    }\n\n    if (\n      instance.getInitialState &&\n      !instance.getInitialState.isReactClassApproved &&\n      !instance.state\n    ) {\n      console.error(\n        'getInitialState was defined on %s, a plain JavaScript class. ' +\n          'This is only supported for classes created using React.createClass. ' +\n          'Did you mean to define a state property instead?',\n        name,\n      );\n    }\n    if (\n      instance.getDefaultProps &&\n      !instance.getDefaultProps.isReactClassApproved\n    ) {\n      console.error(\n        'getDefaultProps was defined on %s, a plain JavaScript class. ' +\n          'This is only supported for classes created using React.createClass. ' +\n          'Use a static property to define defaultProps instead.',\n        name,\n      );\n    }\n    if (instance.propTypes) {\n      console.error(\n        'propTypes was defined as an instance property on %s. Use a static ' +\n          'property to define propTypes instead.',\n        name,\n      );\n    }\n    if (instance.contextType) {\n      console.error(\n        'contextType was defined as an instance property on %s. Use a static ' +\n          'property to define contextType instead.',\n        name,\n      );\n    }\n\n    if (disableLegacyContext) {\n      if (ctor.childContextTypes) {\n        console.error(\n          '%s uses the legacy childContextTypes API which is no longer supported. ' +\n            'Use React.createContext() instead.',\n          name,\n        );\n      }\n      if (ctor.contextTypes) {\n        console.error(\n          '%s uses the legacy contextTypes API which is no longer supported. ' +\n            'Use React.createContext() with static contextType instead.',\n          name,\n        );\n      }\n    } else {\n      if (instance.contextTypes) {\n        console.error(\n          'contextTypes was defined as an instance property on %s. Use a static ' +\n            'property to define contextTypes instead.',\n          name,\n        );\n      }\n\n      if (\n        ctor.contextType &&\n        ctor.contextTypes &&\n        !didWarnAboutContextTypeAndContextTypes.has(ctor)\n      ) {\n        didWarnAboutContextTypeAndContextTypes.add(ctor);\n        console.error(\n          '%s declares both contextTypes and contextType static properties. ' +\n            'The legacy contextTypes property will be ignored.',\n          name,\n        );\n      }\n    }\n\n    if (typeof instance.componentShouldUpdate === 'function') {\n      console.error(\n        '%s has a method called ' +\n          'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' +\n          'The name is phrased as a question because the function is ' +\n          'expected to return a value.',\n        name,\n      );\n    }\n    if (\n      ctor.prototype &&\n      ctor.prototype.isPureReactComponent &&\n      typeof instance.shouldComponentUpdate !== 'undefined'\n    ) {\n      console.error(\n        '%s has a method called shouldComponentUpdate(). ' +\n          'shouldComponentUpdate should not be used when extending React.PureComponent. ' +\n          'Please extend React.Component if shouldComponentUpdate is used.',\n        getComponentNameFromType(ctor) || 'A pure component',\n      );\n    }\n    if (typeof instance.componentDidUnmount === 'function') {\n      console.error(\n        '%s has a method called ' +\n          'componentDidUnmount(). But there is no such lifecycle method. ' +\n          'Did you mean componentWillUnmount()?',\n        name,\n      );\n    }\n    if (typeof instance.componentDidReceiveProps === 'function') {\n      console.error(\n        '%s has a method called ' +\n          'componentDidReceiveProps(). But there is no such lifecycle method. ' +\n          'If you meant to update the state in response to changing props, ' +\n          'use componentWillReceiveProps(). If you meant to fetch data or ' +\n          'run side-effects or mutations after React has updated the UI, use componentDidUpdate().',\n        name,\n      );\n    }\n    if (typeof instance.componentWillRecieveProps === 'function') {\n      console.error(\n        '%s has a method called ' +\n          'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?',\n        name,\n      );\n    }\n    if (typeof instance.UNSAFE_componentWillRecieveProps === 'function') {\n      console.error(\n        '%s has a method called ' +\n          'UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?',\n        name,\n      );\n    }\n    const hasMutatedProps = instance.props !== newProps;\n    if (instance.props !== undefined && hasMutatedProps) {\n      console.error(\n        '%s(...): When calling super() in `%s`, make sure to pass ' +\n          \"up the same props that your component's constructor was passed.\",\n        name,\n        name,\n      );\n    }\n    if (instance.defaultProps) {\n      console.error(\n        'Setting defaultProps as an instance property on %s is not supported and will be ignored.' +\n          ' Instead, define defaultProps as a static property on %s.',\n        name,\n        name,\n      );\n    }\n\n    if (\n      typeof instance.getSnapshotBeforeUpdate === 'function' &&\n      typeof instance.componentDidUpdate !== 'function' &&\n      !didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(ctor)\n    ) {\n      didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(ctor);\n      console.error(\n        '%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). ' +\n          'This component defines getSnapshotBeforeUpdate() only.',\n        getComponentNameFromType(ctor),\n      );\n    }\n\n    if (typeof instance.getDerivedStateFromProps === 'function') {\n      console.error(\n        '%s: getDerivedStateFromProps() is defined as an instance method ' +\n          'and will be ignored. Instead, declare it as a static method.',\n        name,\n      );\n    }\n    if (typeof instance.getDerivedStateFromError === 'function') {\n      console.error(\n        '%s: getDerivedStateFromError() is defined as an instance method ' +\n          'and will be ignored. Instead, declare it as a static method.',\n        name,\n      );\n    }\n    if (typeof ctor.getSnapshotBeforeUpdate === 'function') {\n      console.error(\n        '%s: getSnapshotBeforeUpdate() is defined as a static method ' +\n          'and will be ignored. Instead, declare it as an instance method.',\n        name,\n      );\n    }\n    const state = instance.state;\n    if (state && (typeof state !== 'object' || isArray(state))) {\n      console.error('%s.state: must be set to an object or null', name);\n    }\n    if (\n      typeof instance.getChildContext === 'function' &&\n      typeof ctor.childContextTypes !== 'object'\n    ) {\n      console.error(\n        '%s.getChildContext(): childContextTypes must be defined in order to ' +\n          'use getChildContext().',\n        name,\n      );\n    }\n  }\n}\n\nfunction adoptClassInstance(workInProgress: Fiber, instance: any): void {\n  instance.updater = classComponentUpdater;\n  workInProgress.stateNode = instance;\n  // The instance needs access to the fiber so that it can schedule updates\n  setInstance(instance, workInProgress);\n  if (__DEV__) {\n    instance._reactInternalInstance = fakeInternalInstance;\n  }\n}\n\nfunction constructClassInstance(\n  workInProgress: Fiber,\n  ctor: any,\n  props: any,\n): any {\n  let isLegacyContextConsumer = false;\n  let unmaskedContext = emptyContextObject;\n  let context = emptyContextObject;\n  const contextType = ctor.contextType;\n\n  if (__DEV__) {\n    if ('contextType' in ctor) {\n      const isValid =\n        // Allow null for conditional declaration\n        contextType === null ||\n        (contextType !== undefined &&\n          contextType.$$typeof === REACT_CONTEXT_TYPE &&\n          contextType._context === undefined); // Not a <Context.Consumer>\n\n      if (!isValid && !didWarnAboutInvalidateContextType.has(ctor)) {\n        didWarnAboutInvalidateContextType.add(ctor);\n\n        let addendum = '';\n        if (contextType === undefined) {\n          addendum =\n            ' However, it is set to undefined. ' +\n            'This can be caused by a typo or by mixing up named and default imports. ' +\n            'This can also happen due to a circular dependency, so ' +\n            'try moving the createContext() call to a separate file.';\n        } else if (typeof contextType !== 'object') {\n          addendum = ' However, it is set to a ' + typeof contextType + '.';\n        } else if (contextType.$$typeof === REACT_PROVIDER_TYPE) {\n          addendum = ' Did you accidentally pass the Context.Provider instead?';\n        } else if (contextType._context !== undefined) {\n          // <Context.Consumer>\n          addendum = ' Did you accidentally pass the Context.Consumer instead?';\n        } else {\n          addendum =\n            ' However, it is set to an object with keys {' +\n            Object.keys(contextType).join(', ') +\n            '}.';\n        }\n        console.error(\n          '%s defines an invalid contextType. ' +\n            'contextType should point to the Context object returned by React.createContext().%s',\n          getComponentNameFromType(ctor) || 'Component',\n          addendum,\n        );\n      }\n    }\n  }\n\n  if (typeof contextType === 'object' && contextType !== null) {\n    context = readContext((contextType: any));\n  } else if (!disableLegacyContext) {\n    unmaskedContext = getUnmaskedContext(workInProgress, ctor, true);\n    const contextTypes = ctor.contextTypes;\n    isLegacyContextConsumer =\n      contextTypes !== null && contextTypes !== undefined;\n    context = isLegacyContextConsumer\n      ? getMaskedContext(workInProgress, unmaskedContext)\n      : emptyContextObject;\n  }\n\n  let instance = new ctor(props, context);\n  // Instantiate twice to help detect side-effects.\n  if (__DEV__) {\n    if (\n      debugRenderPhaseSideEffectsForStrictMode &&\n      workInProgress.mode & StrictLegacyMode\n    ) {\n      setIsStrictModeForDevtools(true);\n      try {\n        instance = new ctor(props, context); // eslint-disable-line no-new\n      } finally {\n        setIsStrictModeForDevtools(false);\n      }\n    }\n  }\n\n  const state = (workInProgress.memoizedState =\n    instance.state !== null && instance.state !== undefined\n      ? instance.state\n      : null);\n  adoptClassInstance(workInProgress, instance);\n\n  if (__DEV__) {\n    if (typeof ctor.getDerivedStateFromProps === 'function' && state === null) {\n      const componentName = getComponentNameFromType(ctor) || 'Component';\n      if (!didWarnAboutUninitializedState.has(componentName)) {\n        didWarnAboutUninitializedState.add(componentName);\n        console.error(\n          '`%s` uses `getDerivedStateFromProps` but its initial state is ' +\n            '%s. This is not recommended. Instead, define the initial state by ' +\n            'assigning an object to `this.state` in the constructor of `%s`. ' +\n            'This ensures that `getDerivedStateFromProps` arguments have a consistent shape.',\n          componentName,\n          instance.state === null ? 'null' : 'undefined',\n          componentName,\n        );\n      }\n    }\n\n    // If new component APIs are defined, \"unsafe\" lifecycles won't be called.\n    // Warn about these lifecycles if they are present.\n    // Don't warn about react-lifecycles-compat polyfilled methods though.\n    if (\n      typeof ctor.getDerivedStateFromProps === 'function' ||\n      typeof instance.getSnapshotBeforeUpdate === 'function'\n    ) {\n      let foundWillMountName = null;\n      let foundWillReceivePropsName = null;\n      let foundWillUpdateName = null;\n      if (\n        typeof instance.componentWillMount === 'function' &&\n        instance.componentWillMount.__suppressDeprecationWarning !== true\n      ) {\n        foundWillMountName = 'componentWillMount';\n      } else if (typeof instance.UNSAFE_componentWillMount === 'function') {\n        foundWillMountName = 'UNSAFE_componentWillMount';\n      }\n      if (\n        typeof instance.componentWillReceiveProps === 'function' &&\n        instance.componentWillReceiveProps.__suppressDeprecationWarning !== true\n      ) {\n        foundWillReceivePropsName = 'componentWillReceiveProps';\n      } else if (\n        typeof instance.UNSAFE_componentWillReceiveProps === 'function'\n      ) {\n        foundWillReceivePropsName = 'UNSAFE_componentWillReceiveProps';\n      }\n      if (\n        typeof instance.componentWillUpdate === 'function' &&\n        instance.componentWillUpdate.__suppressDeprecationWarning !== true\n      ) {\n        foundWillUpdateName = 'componentWillUpdate';\n      } else if (typeof instance.UNSAFE_componentWillUpdate === 'function') {\n        foundWillUpdateName = 'UNSAFE_componentWillUpdate';\n      }\n      if (\n        foundWillMountName !== null ||\n        foundWillReceivePropsName !== null ||\n        foundWillUpdateName !== null\n      ) {\n        const componentName = getComponentNameFromType(ctor) || 'Component';\n        const newApiName =\n          typeof ctor.getDerivedStateFromProps === 'function'\n            ? 'getDerivedStateFromProps()'\n            : 'getSnapshotBeforeUpdate()';\n        if (!didWarnAboutLegacyLifecyclesAndDerivedState.has(componentName)) {\n          didWarnAboutLegacyLifecyclesAndDerivedState.add(componentName);\n          console.error(\n            'Unsafe legacy lifecycles will not be called for components using new component APIs.\\n\\n' +\n              '%s uses %s but also contains the following legacy lifecycles:%s%s%s\\n\\n' +\n              'The above lifecycles should be removed. Learn more about this warning here:\\n' +\n              'https://reactjs.org/link/unsafe-component-lifecycles',\n            componentName,\n            newApiName,\n            foundWillMountName !== null ? `\\n  ${foundWillMountName}` : '',\n            foundWillReceivePropsName !== null\n              ? `\\n  ${foundWillReceivePropsName}`\n              : '',\n            foundWillUpdateName !== null ? `\\n  ${foundWillUpdateName}` : '',\n          );\n        }\n      }\n    }\n  }\n\n  // Cache unmasked context so we can avoid recreating masked context unless necessary.\n  // ReactFiberContext usually updates this cache but can't for newly-created instances.\n  if (isLegacyContextConsumer) {\n    cacheContext(workInProgress, unmaskedContext, context);\n  }\n\n  return instance;\n}\n\nfunction callComponentWillMount(workInProgress, instance) {\n  const oldState = instance.state;\n\n  if (typeof instance.componentWillMount === 'function') {\n    instance.componentWillMount();\n  }\n  if (typeof instance.UNSAFE_componentWillMount === 'function') {\n    instance.UNSAFE_componentWillMount();\n  }\n\n  if (oldState !== instance.state) {\n    if (__DEV__) {\n      console.error(\n        '%s.componentWillMount(): Assigning directly to this.state is ' +\n          \"deprecated (except inside a component's \" +\n          'constructor). Use setState instead.',\n        getComponentNameFromFiber(workInProgress) || 'Component',\n      );\n    }\n    classComponentUpdater.enqueueReplaceState(instance, instance.state, null);\n  }\n}\n\nfunction callComponentWillReceiveProps(\n  workInProgress,\n  instance,\n  newProps,\n  nextContext,\n) {\n  const oldState = instance.state;\n  if (typeof instance.componentWillReceiveProps === 'function') {\n    instance.componentWillReceiveProps(newProps, nextContext);\n  }\n  if (typeof instance.UNSAFE_componentWillReceiveProps === 'function') {\n    instance.UNSAFE_componentWillReceiveProps(newProps, nextContext);\n  }\n\n  if (instance.state !== oldState) {\n    if (__DEV__) {\n      const componentName =\n        getComponentNameFromFiber(workInProgress) || 'Component';\n      if (!didWarnAboutStateAssignmentForComponent.has(componentName)) {\n        didWarnAboutStateAssignmentForComponent.add(componentName);\n        console.error(\n          '%s.componentWillReceiveProps(): Assigning directly to ' +\n            \"this.state is deprecated (except inside a component's \" +\n            'constructor). Use setState instead.',\n          componentName,\n        );\n      }\n    }\n    classComponentUpdater.enqueueReplaceState(instance, instance.state, null);\n  }\n}\n\n// Invokes the mount life-cycles on a previously never rendered instance.\nfunction mountClassInstance(\n  workInProgress: Fiber,\n  ctor: any,\n  newProps: any,\n  renderLanes: Lanes,\n): void {\n  if (__DEV__) {\n    checkClassInstance(workInProgress, ctor, newProps);\n  }\n\n  const instance = workInProgress.stateNode;\n  instance.props = newProps;\n  instance.state = workInProgress.memoizedState;\n  instance.refs = emptyRefsObject;\n\n  initializeUpdateQueue(workInProgress);\n\n  const contextType = ctor.contextType;\n  if (typeof contextType === 'object' && contextType !== null) {\n    instance.context = readContext(contextType);\n  } else if (disableLegacyContext) {\n    instance.context = emptyContextObject;\n  } else {\n    const unmaskedContext = getUnmaskedContext(workInProgress, ctor, true);\n    instance.context = getMaskedContext(workInProgress, unmaskedContext);\n  }\n\n  if (__DEV__) {\n    if (instance.state === newProps) {\n      const componentName = getComponentNameFromType(ctor) || 'Component';\n      if (!didWarnAboutDirectlyAssigningPropsToState.has(componentName)) {\n        didWarnAboutDirectlyAssigningPropsToState.add(componentName);\n        console.error(\n          '%s: It is not recommended to assign props directly to state ' +\n            \"because updates to props won't be reflected in state. \" +\n            'In most cases, it is better to use props directly.',\n          componentName,\n        );\n      }\n    }\n\n    if (workInProgress.mode & StrictLegacyMode) {\n      ReactStrictModeWarnings.recordLegacyContextWarning(\n        workInProgress,\n        instance,\n      );\n    }\n\n    if (warnAboutDeprecatedLifecycles) {\n      ReactStrictModeWarnings.recordUnsafeLifecycleWarnings(\n        workInProgress,\n        instance,\n      );\n    }\n  }\n\n  instance.state = workInProgress.memoizedState;\n\n  const getDerivedStateFromProps = ctor.getDerivedStateFromProps;\n  if (typeof getDerivedStateFromProps === 'function') {\n    applyDerivedStateFromProps(\n      workInProgress,\n      ctor,\n      getDerivedStateFromProps,\n      newProps,\n    );\n    instance.state = workInProgress.memoizedState;\n  }\n\n  // In order to support react-lifecycles-compat polyfilled components,\n  // Unsafe lifecycles should not be invoked for components using the new APIs.\n  if (\n    typeof ctor.getDerivedStateFromProps !== 'function' &&\n    typeof instance.getSnapshotBeforeUpdate !== 'function' &&\n    (typeof instance.UNSAFE_componentWillMount === 'function' ||\n      typeof instance.componentWillMount === 'function')\n  ) {\n    callComponentWillMount(workInProgress, instance);\n    // If we had additional state updates during this life-cycle, let's\n    // process them now.\n    processUpdateQueue(workInProgress, newProps, instance, renderLanes);\n    instance.state = workInProgress.memoizedState;\n  }\n\n  if (typeof instance.componentDidMount === 'function') {\n    let fiberFlags: Flags = Update;\n    if (enableSuspenseLayoutEffectSemantics) {\n      fiberFlags |= LayoutStatic;\n    }\n    if (\n      __DEV__ &&\n      enableStrictEffects &&\n      (workInProgress.mode & StrictEffectsMode) !== NoMode\n    ) {\n      fiberFlags |= MountLayoutDev;\n    }\n    workInProgress.flags |= fiberFlags;\n  }\n}\n\nfunction resumeMountClassInstance(\n  workInProgress: Fiber,\n  ctor: any,\n  newProps: any,\n  renderLanes: Lanes,\n): boolean {\n  const instance = workInProgress.stateNode;\n\n  const oldProps = workInProgress.memoizedProps;\n  instance.props = oldProps;\n\n  const oldContext = instance.context;\n  const contextType = ctor.contextType;\n  let nextContext = emptyContextObject;\n  if (typeof contextType === 'object' && contextType !== null) {\n    nextContext = readContext(contextType);\n  } else if (!disableLegacyContext) {\n    const nextLegacyUnmaskedContext = getUnmaskedContext(\n      workInProgress,\n      ctor,\n      true,\n    );\n    nextContext = getMaskedContext(workInProgress, nextLegacyUnmaskedContext);\n  }\n\n  const getDerivedStateFromProps = ctor.getDerivedStateFromProps;\n  const hasNewLifecycles =\n    typeof getDerivedStateFromProps === 'function' ||\n    typeof instance.getSnapshotBeforeUpdate === 'function';\n\n  // Note: During these life-cycles, instance.props/instance.state are what\n  // ever the previously attempted to render - not the \"current\". However,\n  // during componentDidUpdate we pass the \"current\" props.\n\n  // In order to support react-lifecycles-compat polyfilled components,\n  // Unsafe lifecycles should not be invoked for components using the new APIs.\n  if (\n    !hasNewLifecycles &&\n    (typeof instance.UNSAFE_componentWillReceiveProps === 'function' ||\n      typeof instance.componentWillReceiveProps === 'function')\n  ) {\n    if (oldProps !== newProps || oldContext !== nextContext) {\n      callComponentWillReceiveProps(\n        workInProgress,\n        instance,\n        newProps,\n        nextContext,\n      );\n    }\n  }\n\n  resetHasForceUpdateBeforeProcessing();\n\n  const oldState = workInProgress.memoizedState;\n  let newState = (instance.state = oldState);\n  processUpdateQueue(workInProgress, newProps, instance, renderLanes);\n  newState = workInProgress.memoizedState;\n  if (\n    oldProps === newProps &&\n    oldState === newState &&\n    !hasContextChanged() &&\n    !checkHasForceUpdateAfterProcessing()\n  ) {\n    // If an update was already in progress, we should schedule an Update\n    // effect even though we're bailing out, so that cWU/cDU are called.\n    if (typeof instance.componentDidMount === 'function') {\n      let fiberFlags: Flags = Update;\n      if (enableSuspenseLayoutEffectSemantics) {\n        fiberFlags |= LayoutStatic;\n      }\n      if (\n        __DEV__ &&\n        enableStrictEffects &&\n        (workInProgress.mode & StrictEffectsMode) !== NoMode\n      ) {\n        fiberFlags |= MountLayoutDev;\n      }\n      workInProgress.flags |= fiberFlags;\n    }\n    return false;\n  }\n\n  if (typeof getDerivedStateFromProps === 'function') {\n    applyDerivedStateFromProps(\n      workInProgress,\n      ctor,\n      getDerivedStateFromProps,\n      newProps,\n    );\n    newState = workInProgress.memoizedState;\n  }\n\n  const shouldUpdate =\n    checkHasForceUpdateAfterProcessing() ||\n    checkShouldComponentUpdate(\n      workInProgress,\n      ctor,\n      oldProps,\n      newProps,\n      oldState,\n      newState,\n      nextContext,\n    );\n\n  if (shouldUpdate) {\n    // In order to support react-lifecycles-compat polyfilled components,\n    // Unsafe lifecycles should not be invoked for components using the new APIs.\n    if (\n      !hasNewLifecycles &&\n      (typeof instance.UNSAFE_componentWillMount === 'function' ||\n        typeof instance.componentWillMount === 'function')\n    ) {\n      if (typeof instance.componentWillMount === 'function') {\n        instance.componentWillMount();\n      }\n      if (typeof instance.UNSAFE_componentWillMount === 'function') {\n        instance.UNSAFE_componentWillMount();\n      }\n    }\n    if (typeof instance.componentDidMount === 'function') {\n      let fiberFlags: Flags = Update;\n      if (enableSuspenseLayoutEffectSemantics) {\n        fiberFlags |= LayoutStatic;\n      }\n      if (\n        __DEV__ &&\n        enableStrictEffects &&\n        (workInProgress.mode & StrictEffectsMode) !== NoMode\n      ) {\n        fiberFlags |= MountLayoutDev;\n      }\n      workInProgress.flags |= fiberFlags;\n    }\n  } else {\n    // If an update was already in progress, we should schedule an Update\n    // effect even though we're bailing out, so that cWU/cDU are called.\n    if (typeof instance.componentDidMount === 'function') {\n      let fiberFlags: Flags = Update;\n      if (enableSuspenseLayoutEffectSemantics) {\n        fiberFlags |= LayoutStatic;\n      }\n      if (\n        __DEV__ &&\n        enableStrictEffects &&\n        (workInProgress.mode & StrictEffectsMode) !== NoMode\n      ) {\n        fiberFlags |= MountLayoutDev;\n      }\n      workInProgress.flags |= fiberFlags;\n    }\n\n    // If shouldComponentUpdate returned false, we should still update the\n    // memoized state to indicate that this work can be reused.\n    workInProgress.memoizedProps = newProps;\n    workInProgress.memoizedState = newState;\n  }\n\n  // Update the existing instance's state, props, and context pointers even\n  // if shouldComponentUpdate returns false.\n  instance.props = newProps;\n  instance.state = newState;\n  instance.context = nextContext;\n\n  return shouldUpdate;\n}\n\n// Invokes the update life-cycles and returns false if it shouldn't rerender.\nfunction updateClassInstance(\n  current: Fiber,\n  workInProgress: Fiber,\n  ctor: any,\n  newProps: any,\n  renderLanes: Lanes,\n): boolean {\n  const instance = workInProgress.stateNode;\n\n  cloneUpdateQueue(current, workInProgress);\n\n  const unresolvedOldProps = workInProgress.memoizedProps;\n  const oldProps =\n    workInProgress.type === workInProgress.elementType\n      ? unresolvedOldProps\n      : resolveDefaultProps(workInProgress.type, unresolvedOldProps);\n  instance.props = oldProps;\n  const unresolvedNewProps = workInProgress.pendingProps;\n\n  const oldContext = instance.context;\n  const contextType = ctor.contextType;\n  let nextContext = emptyContextObject;\n  if (typeof contextType === 'object' && contextType !== null) {\n    nextContext = readContext(contextType);\n  } else if (!disableLegacyContext) {\n    const nextUnmaskedContext = getUnmaskedContext(workInProgress, ctor, true);\n    nextContext = getMaskedContext(workInProgress, nextUnmaskedContext);\n  }\n\n  const getDerivedStateFromProps = ctor.getDerivedStateFromProps;\n  const hasNewLifecycles =\n    typeof getDerivedStateFromProps === 'function' ||\n    typeof instance.getSnapshotBeforeUpdate === 'function';\n\n  // Note: During these life-cycles, instance.props/instance.state are what\n  // ever the previously attempted to render - not the \"current\". However,\n  // during componentDidUpdate we pass the \"current\" props.\n\n  // In order to support react-lifecycles-compat polyfilled components,\n  // Unsafe lifecycles should not be invoked for components using the new APIs.\n  if (\n    !hasNewLifecycles &&\n    (typeof instance.UNSAFE_componentWillReceiveProps === 'function' ||\n      typeof instance.componentWillReceiveProps === 'function')\n  ) {\n    if (\n      unresolvedOldProps !== unresolvedNewProps ||\n      oldContext !== nextContext\n    ) {\n      callComponentWillReceiveProps(\n        workInProgress,\n        instance,\n        newProps,\n        nextContext,\n      );\n    }\n  }\n\n  resetHasForceUpdateBeforeProcessing();\n\n  const oldState = workInProgress.memoizedState;\n  let newState = (instance.state = oldState);\n  processUpdateQueue(workInProgress, newProps, instance, renderLanes);\n  newState = workInProgress.memoizedState;\n\n  if (\n    unresolvedOldProps === unresolvedNewProps &&\n    oldState === newState &&\n    !hasContextChanged() &&\n    !checkHasForceUpdateAfterProcessing() &&\n    !(\n      enableLazyContextPropagation &&\n      current !== null &&\n      current.dependencies !== null &&\n      checkIfContextChanged(current.dependencies)\n    )\n  ) {\n    // If an update was already in progress, we should schedule an Update\n    // effect even though we're bailing out, so that cWU/cDU are called.\n    if (typeof instance.componentDidUpdate === 'function') {\n      if (\n        unresolvedOldProps !== current.memoizedProps ||\n        oldState !== current.memoizedState\n      ) {\n        workInProgress.flags |= Update;\n      }\n    }\n    if (typeof instance.getSnapshotBeforeUpdate === 'function') {\n      if (\n        unresolvedOldProps !== current.memoizedProps ||\n        oldState !== current.memoizedState\n      ) {\n        workInProgress.flags |= Snapshot;\n      }\n    }\n    return false;\n  }\n\n  if (typeof getDerivedStateFromProps === 'function') {\n    applyDerivedStateFromProps(\n      workInProgress,\n      ctor,\n      getDerivedStateFromProps,\n      newProps,\n    );\n    newState = workInProgress.memoizedState;\n  }\n\n  const shouldUpdate =\n    checkHasForceUpdateAfterProcessing() ||\n    checkShouldComponentUpdate(\n      workInProgress,\n      ctor,\n      oldProps,\n      newProps,\n      oldState,\n      newState,\n      nextContext,\n    ) ||\n    // TODO: In some cases, we'll end up checking if context has changed twice,\n    // both before and after `shouldComponentUpdate` has been called. Not ideal,\n    // but I'm loath to refactor this function. This only happens for memoized\n    // components so it's not that common.\n    (enableLazyContextPropagation &&\n      current !== null &&\n      current.dependencies !== null &&\n      checkIfContextChanged(current.dependencies));\n\n  if (shouldUpdate) {\n    // In order to support react-lifecycles-compat polyfilled components,\n    // Unsafe lifecycles should not be invoked for components using the new APIs.\n    if (\n      !hasNewLifecycles &&\n      (typeof instance.UNSAFE_componentWillUpdate === 'function' ||\n        typeof instance.componentWillUpdate === 'function')\n    ) {\n      if (typeof instance.componentWillUpdate === 'function') {\n        instance.componentWillUpdate(newProps, newState, nextContext);\n      }\n      if (typeof instance.UNSAFE_componentWillUpdate === 'function') {\n        instance.UNSAFE_componentWillUpdate(newProps, newState, nextContext);\n      }\n    }\n    if (typeof instance.componentDidUpdate === 'function') {\n      workInProgress.flags |= Update;\n    }\n    if (typeof instance.getSnapshotBeforeUpdate === 'function') {\n      workInProgress.flags |= Snapshot;\n    }\n  } else {\n    // If an update was already in progress, we should schedule an Update\n    // effect even though we're bailing out, so that cWU/cDU are called.\n    if (typeof instance.componentDidUpdate === 'function') {\n      if (\n        unresolvedOldProps !== current.memoizedProps ||\n        oldState !== current.memoizedState\n      ) {\n        workInProgress.flags |= Update;\n      }\n    }\n    if (typeof instance.getSnapshotBeforeUpdate === 'function') {\n      if (\n        unresolvedOldProps !== current.memoizedProps ||\n        oldState !== current.memoizedState\n      ) {\n        workInProgress.flags |= Snapshot;\n      }\n    }\n\n    // If shouldComponentUpdate returned false, we should still update the\n    // memoized props/state to indicate that this work can be reused.\n    workInProgress.memoizedProps = newProps;\n    workInProgress.memoizedState = newState;\n  }\n\n  // Update the existing instance's state, props, and context pointers even\n  // if shouldComponentUpdate returns false.\n  instance.props = newProps;\n  instance.state = newState;\n  instance.context = nextContext;\n\n  return shouldUpdate;\n}\n\nexport {\n  adoptClassInstance,\n  constructClassInstance,\n  mountClassInstance,\n  resumeMountClassInstance,\n  updateClassInstance,\n};\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {ReactElement} from 'shared/ReactElementType';\nimport type {ReactPortal} from 'shared/ReactTypes';\nimport type {Fiber} from './ReactInternalTypes';\nimport type {Lanes} from './ReactFiberLane.old';\n\nimport getComponentNameFromFiber from 'react-reconciler/src/getComponentNameFromFiber';\nimport {Placement, ChildDeletion} from './ReactFiberFlags';\nimport {\n  getIteratorFn,\n  REACT_ELEMENT_TYPE,\n  REACT_FRAGMENT_TYPE,\n  REACT_PORTAL_TYPE,\n  REACT_LAZY_TYPE,\n} from 'shared/ReactSymbols';\nimport {ClassComponent, HostText, HostPortal, Fragment} from './ReactWorkTags';\nimport invariant from 'shared/invariant';\nimport isArray from 'shared/isArray';\nimport {\n  warnAboutStringRefs,\n  enableLazyElements,\n} from 'shared/ReactFeatureFlags';\n\nimport {\n  createWorkInProgress,\n  resetWorkInProgress,\n  createFiberFromElement,\n  createFiberFromFragment,\n  createFiberFromText,\n  createFiberFromPortal,\n} from './ReactFiber.old';\nimport {emptyRefsObject} from './ReactFiberClassComponent.old';\nimport {isCompatibleFamilyForHotReloading} from './ReactFiberHotReloading.old';\nimport {StrictLegacyMode} from './ReactTypeOfMode';\n\nlet didWarnAboutMaps;\nlet didWarnAboutGenerators;\nlet didWarnAboutStringRefs;\nlet ownerHasKeyUseWarning;\nlet ownerHasFunctionTypeWarning;\nlet warnForMissingKey = (child: mixed, returnFiber: Fiber) => {};\n\nif (__DEV__) {\n  didWarnAboutMaps = false;\n  didWarnAboutGenerators = false;\n  didWarnAboutStringRefs = {};\n\n  /**\n   * Warn if there's no key explicitly set on dynamic arrays of children or\n   * object keys are not valid. This allows us to keep track of children between\n   * updates.\n   */\n  ownerHasKeyUseWarning = {};\n  ownerHasFunctionTypeWarning = {};\n\n  warnForMissingKey = (child: mixed, returnFiber: Fiber) => {\n    if (child === null || typeof child !== 'object') {\n      return;\n    }\n    if (!child._store || child._store.validated || child.key != null) {\n      return;\n    }\n    invariant(\n      typeof child._store === 'object',\n      'React Component in warnForMissingKey should have a _store. ' +\n        'This error is likely caused by a bug in React. Please file an issue.',\n    );\n    child._store.validated = true;\n\n    const componentName = getComponentNameFromFiber(returnFiber) || 'Component';\n\n    if (ownerHasKeyUseWarning[componentName]) {\n      return;\n    }\n    ownerHasKeyUseWarning[componentName] = true;\n\n    console.error(\n      'Each child in a list should have a unique ' +\n        '\"key\" prop. See https://reactjs.org/link/warning-keys for ' +\n        'more information.',\n    );\n  };\n}\n\nfunction coerceRef(\n  returnFiber: Fiber,\n  current: Fiber | null,\n  element: ReactElement,\n) {\n  const mixedRef = element.ref;\n  if (\n    mixedRef !== null &&\n    typeof mixedRef !== 'function' &&\n    typeof mixedRef !== 'object'\n  ) {\n    if (__DEV__) {\n      // TODO: Clean this up once we turn on the string ref warning for\n      // everyone, because the strict mode case will no longer be relevant\n      if (\n        (returnFiber.mode & StrictLegacyMode || warnAboutStringRefs) &&\n        // We warn in ReactElement.js if owner and self are equal for string refs\n        // because these cannot be automatically converted to an arrow function\n        // using a codemod. Therefore, we don't have to warn about string refs again.\n        !(\n          element._owner &&\n          element._self &&\n          element._owner.stateNode !== element._self\n        )\n      ) {\n        const componentName =\n          getComponentNameFromFiber(returnFiber) || 'Component';\n        if (!didWarnAboutStringRefs[componentName]) {\n          if (warnAboutStringRefs) {\n            console.error(\n              'Component \"%s\" contains the string ref \"%s\". Support for string refs ' +\n                'will be removed in a future major release. We recommend using ' +\n                'useRef() or createRef() instead. ' +\n                'Learn more about using refs safely here: ' +\n                'https://reactjs.org/link/strict-mode-string-ref',\n              componentName,\n              mixedRef,\n            );\n          } else {\n            console.error(\n              'A string ref, \"%s\", has been found within a strict mode tree. ' +\n                'String refs are a source of potential bugs and should be avoided. ' +\n                'We recommend using useRef() or createRef() instead. ' +\n                'Learn more about using refs safely here: ' +\n                'https://reactjs.org/link/strict-mode-string-ref',\n              mixedRef,\n            );\n          }\n          didWarnAboutStringRefs[componentName] = true;\n        }\n      }\n    }\n\n    if (element._owner) {\n      const owner: ?Fiber = (element._owner: any);\n      let inst;\n      if (owner) {\n        const ownerFiber = ((owner: any): Fiber);\n        invariant(\n          ownerFiber.tag === ClassComponent,\n          'Function components cannot have string refs. ' +\n            'We recommend using useRef() instead. ' +\n            'Learn more about using refs safely here: ' +\n            'https://reactjs.org/link/strict-mode-string-ref',\n        );\n        inst = ownerFiber.stateNode;\n      }\n      invariant(\n        inst,\n        'Missing owner for string ref %s. This error is likely caused by a ' +\n          'bug in React. Please file an issue.',\n        mixedRef,\n      );\n      const stringRef = '' + mixedRef;\n      // Check if previous string ref matches new string ref\n      if (\n        current !== null &&\n        current.ref !== null &&\n        typeof current.ref === 'function' &&\n        current.ref._stringRef === stringRef\n      ) {\n        return current.ref;\n      }\n      const ref = function(value) {\n        let refs = inst.refs;\n        if (refs === emptyRefsObject) {\n          // This is a lazy pooled frozen object, so we need to initialize.\n          refs = inst.refs = {};\n        }\n        if (value === null) {\n          delete refs[stringRef];\n        } else {\n          refs[stringRef] = value;\n        }\n      };\n      ref._stringRef = stringRef;\n      return ref;\n    } else {\n      invariant(\n        typeof mixedRef === 'string',\n        'Expected ref to be a function, a string, an object returned by React.createRef(), or null.',\n      );\n      invariant(\n        element._owner,\n        'Element ref was specified as a string (%s) but no owner was set. This could happen for one of' +\n          ' the following reasons:\\n' +\n          '1. You may be adding a ref to a function component\\n' +\n          \"2. You may be adding a ref to a component that was not created inside a component's render method\\n\" +\n          '3. You have multiple copies of React loaded\\n' +\n          'See https://reactjs.org/link/refs-must-have-owner for more information.',\n        mixedRef,\n      );\n    }\n  }\n  return mixedRef;\n}\n\nfunction throwOnInvalidObjectType(returnFiber: Fiber, newChild: Object) {\n  const childString = Object.prototype.toString.call(newChild);\n  invariant(\n    false,\n    'Objects are not valid as a React child (found: %s). ' +\n      'If you meant to render a collection of children, use an array ' +\n      'instead.',\n    childString === '[object Object]'\n      ? 'object with keys {' + Object.keys(newChild).join(', ') + '}'\n      : childString,\n  );\n}\n\nfunction warnOnFunctionType(returnFiber: Fiber) {\n  if (__DEV__) {\n    const componentName = getComponentNameFromFiber(returnFiber) || 'Component';\n\n    if (ownerHasFunctionTypeWarning[componentName]) {\n      return;\n    }\n    ownerHasFunctionTypeWarning[componentName] = true;\n\n    console.error(\n      'Functions are not valid as a React child. This may happen if ' +\n        'you return a Component instead of <Component /> from render. ' +\n        'Or maybe you meant to call this function rather than return it.',\n    );\n  }\n}\n\nfunction resolveLazy(lazyType) {\n  const payload = lazyType._payload;\n  const init = lazyType._init;\n  return init(payload);\n}\n\n// This wrapper function exists because I expect to clone the code in each path\n// to be able to optimize each path individually by branching early. This needs\n// a compiler or we can do it manually. Helpers that don't need this branching\n// live outside of this function.\nfunction ChildReconciler(shouldTrackSideEffects) {\n  function deleteChild(returnFiber: Fiber, childToDelete: Fiber): void {\n    if (!shouldTrackSideEffects) {\n      // Noop.\n      return;\n    }\n    const deletions = returnFiber.deletions;\n    if (deletions === null) {\n      returnFiber.deletions = [childToDelete];\n      returnFiber.flags |= ChildDeletion;\n    } else {\n      deletions.push(childToDelete);\n    }\n  }\n\n  function deleteRemainingChildren(\n    returnFiber: Fiber,\n    currentFirstChild: Fiber | null,\n  ): null {\n    if (!shouldTrackSideEffects) {\n      // Noop.\n      return null;\n    }\n\n    // TODO: For the shouldClone case, this could be micro-optimized a bit by\n    // assuming that after the first child we've already added everything.\n    let childToDelete = currentFirstChild;\n    while (childToDelete !== null) {\n      deleteChild(returnFiber, childToDelete);\n      childToDelete = childToDelete.sibling;\n    }\n    return null;\n  }\n\n  function mapRemainingChildren(\n    returnFiber: Fiber,\n    currentFirstChild: Fiber,\n  ): Map<string | number, Fiber> {\n    // Add the remaining children to a temporary map so that we can find them by\n    // keys quickly. Implicit (null) keys get added to this set with their index\n    // instead.\n    const existingChildren: Map<string | number, Fiber> = new Map();\n\n    let existingChild = currentFirstChild;\n    while (existingChild !== null) {\n      if (existingChild.key !== null) {\n        existingChildren.set(existingChild.key, existingChild);\n      } else {\n        existingChildren.set(existingChild.index, existingChild);\n      }\n      existingChild = existingChild.sibling;\n    }\n    return existingChildren;\n  }\n\n  function useFiber(fiber: Fiber, pendingProps: mixed): Fiber {\n    // We currently set sibling to null and index to 0 here because it is easy\n    // to forget to do before returning it. E.g. for the single child case.\n    const clone = createWorkInProgress(fiber, pendingProps);\n    clone.index = 0;\n    clone.sibling = null;\n    return clone;\n  }\n\n  function placeChild(\n    newFiber: Fiber,\n    lastPlacedIndex: number,\n    newIndex: number,\n  ): number {\n    newFiber.index = newIndex;\n    if (!shouldTrackSideEffects) {\n      // Noop.\n      return lastPlacedIndex;\n    }\n    const current = newFiber.alternate;\n    if (current !== null) {\n      const oldIndex = current.index;\n      if (oldIndex < lastPlacedIndex) {\n        // This is a move.\n        newFiber.flags |= Placement;\n        return lastPlacedIndex;\n      } else {\n        // This item can stay in place.\n        return oldIndex;\n      }\n    } else {\n      // This is an insertion.\n      newFiber.flags |= Placement;\n      return lastPlacedIndex;\n    }\n  }\n\n  function placeSingleChild(newFiber: Fiber): Fiber {\n    // This is simpler for the single child case. We only need to do a\n    // placement for inserting new children.\n    if (shouldTrackSideEffects && newFiber.alternate === null) {\n      newFiber.flags |= Placement;\n    }\n    return newFiber;\n  }\n\n  function updateTextNode(\n    returnFiber: Fiber,\n    current: Fiber | null,\n    textContent: string,\n    lanes: Lanes,\n  ) {\n    if (current === null || current.tag !== HostText) {\n      // Insert\n      const created = createFiberFromText(textContent, returnFiber.mode, lanes);\n      created.return = returnFiber;\n      return created;\n    } else {\n      // Update\n      const existing = useFiber(current, textContent);\n      existing.return = returnFiber;\n      return existing;\n    }\n  }\n\n  function updateElement(\n    returnFiber: Fiber,\n    current: Fiber | null,\n    element: ReactElement,\n    lanes: Lanes,\n  ): Fiber {\n    const elementType = element.type;\n    if (elementType === REACT_FRAGMENT_TYPE) {\n      return updateFragment(\n        returnFiber,\n        current,\n        element.props.children,\n        lanes,\n        element.key,\n      );\n    }\n    if (current !== null) {\n      if (\n        current.elementType === elementType ||\n        // Keep this check inline so it only runs on the false path:\n        (__DEV__\n          ? isCompatibleFamilyForHotReloading(current, element)\n          : false) ||\n        // Lazy types should reconcile their resolved type.\n        // We need to do this after the Hot Reloading check above,\n        // because hot reloading has different semantics than prod because\n        // it doesn't resuspend. So we can't let the call below suspend.\n        (enableLazyElements &&\n          typeof elementType === 'object' &&\n          elementType !== null &&\n          elementType.$$typeof === REACT_LAZY_TYPE &&\n          resolveLazy(elementType) === current.type)\n      ) {\n        // Move based on index\n        const existing = useFiber(current, element.props);\n        existing.ref = coerceRef(returnFiber, current, element);\n        existing.return = returnFiber;\n        if (__DEV__) {\n          existing._debugSource = element._source;\n          existing._debugOwner = element._owner;\n        }\n        return existing;\n      }\n    }\n    // Insert\n    const created = createFiberFromElement(element, returnFiber.mode, lanes);\n    created.ref = coerceRef(returnFiber, current, element);\n    created.return = returnFiber;\n    return created;\n  }\n\n  function updatePortal(\n    returnFiber: Fiber,\n    current: Fiber | null,\n    portal: ReactPortal,\n    lanes: Lanes,\n  ): Fiber {\n    if (\n      current === null ||\n      current.tag !== HostPortal ||\n      current.stateNode.containerInfo !== portal.containerInfo ||\n      current.stateNode.implementation !== portal.implementation\n    ) {\n      // Insert\n      const created = createFiberFromPortal(portal, returnFiber.mode, lanes);\n      created.return = returnFiber;\n      return created;\n    } else {\n      // Update\n      const existing = useFiber(current, portal.children || []);\n      existing.return = returnFiber;\n      return existing;\n    }\n  }\n\n  function updateFragment(\n    returnFiber: Fiber,\n    current: Fiber | null,\n    fragment: Iterable<*>,\n    lanes: Lanes,\n    key: null | string,\n  ): Fiber {\n    if (current === null || current.tag !== Fragment) {\n      // Insert\n      const created = createFiberFromFragment(\n        fragment,\n        returnFiber.mode,\n        lanes,\n        key,\n      );\n      created.return = returnFiber;\n      return created;\n    } else {\n      // Update\n      const existing = useFiber(current, fragment);\n      existing.return = returnFiber;\n      return existing;\n    }\n  }\n\n  function createChild(\n    returnFiber: Fiber,\n    newChild: any,\n    lanes: Lanes,\n  ): Fiber | null {\n    if (typeof newChild === 'string' || typeof newChild === 'number') {\n      // Text nodes don't have keys. If the previous node is implicitly keyed\n      // we can continue to replace it without aborting even if it is not a text\n      // node.\n      const created = createFiberFromText(\n        '' + newChild,\n        returnFiber.mode,\n        lanes,\n      );\n      created.return = returnFiber;\n      return created;\n    }\n\n    if (typeof newChild === 'object' && newChild !== null) {\n      switch (newChild.$$typeof) {\n        case REACT_ELEMENT_TYPE: {\n          const created = createFiberFromElement(\n            newChild,\n            returnFiber.mode,\n            lanes,\n          );\n          created.ref = coerceRef(returnFiber, null, newChild);\n          created.return = returnFiber;\n          return created;\n        }\n        case REACT_PORTAL_TYPE: {\n          const created = createFiberFromPortal(\n            newChild,\n            returnFiber.mode,\n            lanes,\n          );\n          created.return = returnFiber;\n          return created;\n        }\n        case REACT_LAZY_TYPE: {\n          if (enableLazyElements) {\n            const payload = newChild._payload;\n            const init = newChild._init;\n            return createChild(returnFiber, init(payload), lanes);\n          }\n        }\n      }\n\n      if (isArray(newChild) || getIteratorFn(newChild)) {\n        const created = createFiberFromFragment(\n          newChild,\n          returnFiber.mode,\n          lanes,\n          null,\n        );\n        created.return = returnFiber;\n        return created;\n      }\n\n      throwOnInvalidObjectType(returnFiber, newChild);\n    }\n\n    if (__DEV__) {\n      if (typeof newChild === 'function') {\n        warnOnFunctionType(returnFiber);\n      }\n    }\n\n    return null;\n  }\n\n  function updateSlot(\n    returnFiber: Fiber,\n    oldFiber: Fiber | null,\n    newChild: any,\n    lanes: Lanes,\n  ): Fiber | null {\n    // Update the fiber if the keys match, otherwise return null.\n\n    const key = oldFiber !== null ? oldFiber.key : null;\n\n    if (typeof newChild === 'string' || typeof newChild === 'number') {\n      // Text nodes don't have keys. If the previous node is implicitly keyed\n      // we can continue to replace it without aborting even if it is not a text\n      // node.\n      if (key !== null) {\n        return null;\n      }\n      return updateTextNode(returnFiber, oldFiber, '' + newChild, lanes);\n    }\n\n    if (typeof newChild === 'object' && newChild !== null) {\n      switch (newChild.$$typeof) {\n        case REACT_ELEMENT_TYPE: {\n          if (newChild.key === key) {\n            return updateElement(returnFiber, oldFiber, newChild, lanes);\n          } else {\n            return null;\n          }\n        }\n        case REACT_PORTAL_TYPE: {\n          if (newChild.key === key) {\n            return updatePortal(returnFiber, oldFiber, newChild, lanes);\n          } else {\n            return null;\n          }\n        }\n        case REACT_LAZY_TYPE: {\n          if (enableLazyElements) {\n            const payload = newChild._payload;\n            const init = newChild._init;\n            return updateSlot(returnFiber, oldFiber, init(payload), lanes);\n          }\n        }\n      }\n\n      if (isArray(newChild) || getIteratorFn(newChild)) {\n        if (key !== null) {\n          return null;\n        }\n\n        return updateFragment(returnFiber, oldFiber, newChild, lanes, null);\n      }\n\n      throwOnInvalidObjectType(returnFiber, newChild);\n    }\n\n    if (__DEV__) {\n      if (typeof newChild === 'function') {\n        warnOnFunctionType(returnFiber);\n      }\n    }\n\n    return null;\n  }\n\n  function updateFromMap(\n    existingChildren: Map<string | number, Fiber>,\n    returnFiber: Fiber,\n    newIdx: number,\n    newChild: any,\n    lanes: Lanes,\n  ): Fiber | null {\n    if (typeof newChild === 'string' || typeof newChild === 'number') {\n      // Text nodes don't have keys, so we neither have to check the old nor\n      // new node for the key. If both are text nodes, they match.\n      const matchedFiber = existingChildren.get(newIdx) || null;\n      return updateTextNode(returnFiber, matchedFiber, '' + newChild, lanes);\n    }\n\n    if (typeof newChild === 'object' && newChild !== null) {\n      switch (newChild.$$typeof) {\n        case REACT_ELEMENT_TYPE: {\n          const matchedFiber =\n            existingChildren.get(\n              newChild.key === null ? newIdx : newChild.key,\n            ) || null;\n          return updateElement(returnFiber, matchedFiber, newChild, lanes);\n        }\n        case REACT_PORTAL_TYPE: {\n          const matchedFiber =\n            existingChildren.get(\n              newChild.key === null ? newIdx : newChild.key,\n            ) || null;\n          return updatePortal(returnFiber, matchedFiber, newChild, lanes);\n        }\n        case REACT_LAZY_TYPE:\n          if (enableLazyElements) {\n            const payload = newChild._payload;\n            const init = newChild._init;\n            return updateFromMap(\n              existingChildren,\n              returnFiber,\n              newIdx,\n              init(payload),\n              lanes,\n            );\n          }\n      }\n\n      if (isArray(newChild) || getIteratorFn(newChild)) {\n        const matchedFiber = existingChildren.get(newIdx) || null;\n        return updateFragment(returnFiber, matchedFiber, newChild, lanes, null);\n      }\n\n      throwOnInvalidObjectType(returnFiber, newChild);\n    }\n\n    if (__DEV__) {\n      if (typeof newChild === 'function') {\n        warnOnFunctionType(returnFiber);\n      }\n    }\n\n    return null;\n  }\n\n  /**\n   * Warns if there is a duplicate or missing key\n   */\n  function warnOnInvalidKey(\n    child: mixed,\n    knownKeys: Set<string> | null,\n    returnFiber: Fiber,\n  ): Set<string> | null {\n    if (__DEV__) {\n      if (typeof child !== 'object' || child === null) {\n        return knownKeys;\n      }\n      switch (child.$$typeof) {\n        case REACT_ELEMENT_TYPE:\n        case REACT_PORTAL_TYPE:\n          warnForMissingKey(child, returnFiber);\n          const key = child.key;\n          if (typeof key !== 'string') {\n            break;\n          }\n          if (knownKeys === null) {\n            knownKeys = new Set();\n            knownKeys.add(key);\n            break;\n          }\n          if (!knownKeys.has(key)) {\n            knownKeys.add(key);\n            break;\n          }\n          console.error(\n            'Encountered two children with the same key, `%s`. ' +\n              'Keys should be unique so that components maintain their identity ' +\n              'across updates. Non-unique keys may cause children to be ' +\n              'duplicated and/or omitted — the behavior is unsupported and ' +\n              'could change in a future version.',\n            key,\n          );\n          break;\n        case REACT_LAZY_TYPE:\n          if (enableLazyElements) {\n            const payload = child._payload;\n            const init = (child._init: any);\n            warnOnInvalidKey(init(payload), knownKeys, returnFiber);\n            break;\n          }\n        // We intentionally fallthrough here if enableLazyElements is not on.\n        // eslint-disable-next-lined no-fallthrough\n        default:\n          break;\n      }\n    }\n    return knownKeys;\n  }\n\n  function reconcileChildrenArray(\n    returnFiber: Fiber,\n    currentFirstChild: Fiber | null,\n    newChildren: Array<*>,\n    lanes: Lanes,\n  ): Fiber | null {\n    // This algorithm can't optimize by searching from both ends since we\n    // don't have backpointers on fibers. I'm trying to see how far we can get\n    // with that model. If it ends up not being worth the tradeoffs, we can\n    // add it later.\n\n    // Even with a two ended optimization, we'd want to optimize for the case\n    // where there are few changes and brute force the comparison instead of\n    // going for the Map. It'd like to explore hitting that path first in\n    // forward-only mode and only go for the Map once we notice that we need\n    // lots of look ahead. This doesn't handle reversal as well as two ended\n    // search but that's unusual. Besides, for the two ended optimization to\n    // work on Iterables, we'd need to copy the whole set.\n\n    // In this first iteration, we'll just live with hitting the bad case\n    // (adding everything to a Map) in for every insert/move.\n\n    // If you change this code, also update reconcileChildrenIterator() which\n    // uses the same algorithm.\n\n    if (__DEV__) {\n      // First, validate keys.\n      let knownKeys = null;\n      for (let i = 0; i < newChildren.length; i++) {\n        const child = newChildren[i];\n        knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);\n      }\n    }\n\n    let resultingFirstChild: Fiber | null = null;\n    let previousNewFiber: Fiber | null = null;\n\n    let oldFiber = currentFirstChild;\n    let lastPlacedIndex = 0;\n    let newIdx = 0;\n    let nextOldFiber = null;\n    for (; oldFiber !== null && newIdx < newChildren.length; newIdx++) {\n      if (oldFiber.index > newIdx) {\n        nextOldFiber = oldFiber;\n        oldFiber = null;\n      } else {\n        nextOldFiber = oldFiber.sibling;\n      }\n      const newFiber = updateSlot(\n        returnFiber,\n        oldFiber,\n        newChildren[newIdx],\n        lanes,\n      );\n      if (newFiber === null) {\n        // TODO: This breaks on empty slots like null children. That's\n        // unfortunate because it triggers the slow path all the time. We need\n        // a better way to communicate whether this was a miss or null,\n        // boolean, undefined, etc.\n        if (oldFiber === null) {\n          oldFiber = nextOldFiber;\n        }\n        break;\n      }\n      if (shouldTrackSideEffects) {\n        if (oldFiber && newFiber.alternate === null) {\n          // We matched the slot, but we didn't reuse the existing fiber, so we\n          // need to delete the existing child.\n          deleteChild(returnFiber, oldFiber);\n        }\n      }\n      lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);\n      if (previousNewFiber === null) {\n        // TODO: Move out of the loop. This only happens for the first run.\n        resultingFirstChild = newFiber;\n      } else {\n        // TODO: Defer siblings if we're not at the right index for this slot.\n        // I.e. if we had null values before, then we want to defer this\n        // for each null value. However, we also don't want to call updateSlot\n        // with the previous one.\n        previousNewFiber.sibling = newFiber;\n      }\n      previousNewFiber = newFiber;\n      oldFiber = nextOldFiber;\n    }\n\n    if (newIdx === newChildren.length) {\n      // We've reached the end of the new children. We can delete the rest.\n      deleteRemainingChildren(returnFiber, oldFiber);\n      return resultingFirstChild;\n    }\n\n    if (oldFiber === null) {\n      // If we don't have any more existing children we can choose a fast path\n      // since the rest will all be insertions.\n      for (; newIdx < newChildren.length; newIdx++) {\n        const newFiber = createChild(returnFiber, newChildren[newIdx], lanes);\n        if (newFiber === null) {\n          continue;\n        }\n        lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);\n        if (previousNewFiber === null) {\n          // TODO: Move out of the loop. This only happens for the first run.\n          resultingFirstChild = newFiber;\n        } else {\n          previousNewFiber.sibling = newFiber;\n        }\n        previousNewFiber = newFiber;\n      }\n      return resultingFirstChild;\n    }\n\n    // Add all children to a key map for quick lookups.\n    const existingChildren = mapRemainingChildren(returnFiber, oldFiber);\n\n    // Keep scanning and use the map to restore deleted items as moves.\n    for (; newIdx < newChildren.length; newIdx++) {\n      const newFiber = updateFromMap(\n        existingChildren,\n        returnFiber,\n        newIdx,\n        newChildren[newIdx],\n        lanes,\n      );\n      if (newFiber !== null) {\n        if (shouldTrackSideEffects) {\n          if (newFiber.alternate !== null) {\n            // The new fiber is a work in progress, but if there exists a\n            // current, that means that we reused the fiber. We need to delete\n            // it from the child list so that we don't add it to the deletion\n            // list.\n            existingChildren.delete(\n              newFiber.key === null ? newIdx : newFiber.key,\n            );\n          }\n        }\n        lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);\n        if (previousNewFiber === null) {\n          resultingFirstChild = newFiber;\n        } else {\n          previousNewFiber.sibling = newFiber;\n        }\n        previousNewFiber = newFiber;\n      }\n    }\n\n    if (shouldTrackSideEffects) {\n      // Any existing children that weren't consumed above were deleted. We need\n      // to add them to the deletion list.\n      existingChildren.forEach(child => deleteChild(returnFiber, child));\n    }\n\n    return resultingFirstChild;\n  }\n\n  function reconcileChildrenIterator(\n    returnFiber: Fiber,\n    currentFirstChild: Fiber | null,\n    newChildrenIterable: Iterable<*>,\n    lanes: Lanes,\n  ): Fiber | null {\n    // This is the same implementation as reconcileChildrenArray(),\n    // but using the iterator instead.\n\n    const iteratorFn = getIteratorFn(newChildrenIterable);\n    invariant(\n      typeof iteratorFn === 'function',\n      'An object is not an iterable. This error is likely caused by a bug in ' +\n        'React. Please file an issue.',\n    );\n\n    if (__DEV__) {\n      // We don't support rendering Generators because it's a mutation.\n      // See https://github.com/facebook/react/issues/12995\n      if (\n        typeof Symbol === 'function' &&\n        // $FlowFixMe Flow doesn't know about toStringTag\n        newChildrenIterable[Symbol.toStringTag] === 'Generator'\n      ) {\n        if (!didWarnAboutGenerators) {\n          console.error(\n            'Using Generators as children is unsupported and will likely yield ' +\n              'unexpected results because enumerating a generator mutates it. ' +\n              'You may convert it to an array with `Array.from()` or the ' +\n              '`[...spread]` operator before rendering. Keep in mind ' +\n              'you might need to polyfill these features for older browsers.',\n          );\n        }\n        didWarnAboutGenerators = true;\n      }\n\n      // Warn about using Maps as children\n      if ((newChildrenIterable: any).entries === iteratorFn) {\n        if (!didWarnAboutMaps) {\n          console.error(\n            'Using Maps as children is not supported. ' +\n              'Use an array of keyed ReactElements instead.',\n          );\n        }\n        didWarnAboutMaps = true;\n      }\n\n      // First, validate keys.\n      // We'll get a different iterator later for the main pass.\n      const newChildren = iteratorFn.call(newChildrenIterable);\n      if (newChildren) {\n        let knownKeys = null;\n        let step = newChildren.next();\n        for (; !step.done; step = newChildren.next()) {\n          const child = step.value;\n          knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);\n        }\n      }\n    }\n\n    const newChildren = iteratorFn.call(newChildrenIterable);\n    invariant(newChildren != null, 'An iterable object provided no iterator.');\n\n    let resultingFirstChild: Fiber | null = null;\n    let previousNewFiber: Fiber | null = null;\n\n    let oldFiber = currentFirstChild;\n    let lastPlacedIndex = 0;\n    let newIdx = 0;\n    let nextOldFiber = null;\n\n    let step = newChildren.next();\n    for (\n      ;\n      oldFiber !== null && !step.done;\n      newIdx++, step = newChildren.next()\n    ) {\n      if (oldFiber.index > newIdx) {\n        nextOldFiber = oldFiber;\n        oldFiber = null;\n      } else {\n        nextOldFiber = oldFiber.sibling;\n      }\n      const newFiber = updateSlot(returnFiber, oldFiber, step.value, lanes);\n      if (newFiber === null) {\n        // TODO: This breaks on empty slots like null children. That's\n        // unfortunate because it triggers the slow path all the time. We need\n        // a better way to communicate whether this was a miss or null,\n        // boolean, undefined, etc.\n        if (oldFiber === null) {\n          oldFiber = nextOldFiber;\n        }\n        break;\n      }\n      if (shouldTrackSideEffects) {\n        if (oldFiber && newFiber.alternate === null) {\n          // We matched the slot, but we didn't reuse the existing fiber, so we\n          // need to delete the existing child.\n          deleteChild(returnFiber, oldFiber);\n        }\n      }\n      lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);\n      if (previousNewFiber === null) {\n        // TODO: Move out of the loop. This only happens for the first run.\n        resultingFirstChild = newFiber;\n      } else {\n        // TODO: Defer siblings if we're not at the right index for this slot.\n        // I.e. if we had null values before, then we want to defer this\n        // for each null value. However, we also don't want to call updateSlot\n        // with the previous one.\n        previousNewFiber.sibling = newFiber;\n      }\n      previousNewFiber = newFiber;\n      oldFiber = nextOldFiber;\n    }\n\n    if (step.done) {\n      // We've reached the end of the new children. We can delete the rest.\n      deleteRemainingChildren(returnFiber, oldFiber);\n      return resultingFirstChild;\n    }\n\n    if (oldFiber === null) {\n      // If we don't have any more existing children we can choose a fast path\n      // since the rest will all be insertions.\n      for (; !step.done; newIdx++, step = newChildren.next()) {\n        const newFiber = createChild(returnFiber, step.value, lanes);\n        if (newFiber === null) {\n          continue;\n        }\n        lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);\n        if (previousNewFiber === null) {\n          // TODO: Move out of the loop. This only happens for the first run.\n          resultingFirstChild = newFiber;\n        } else {\n          previousNewFiber.sibling = newFiber;\n        }\n        previousNewFiber = newFiber;\n      }\n      return resultingFirstChild;\n    }\n\n    // Add all children to a key map for quick lookups.\n    const existingChildren = mapRemainingChildren(returnFiber, oldFiber);\n\n    // Keep scanning and use the map to restore deleted items as moves.\n    for (; !step.done; newIdx++, step = newChildren.next()) {\n      const newFiber = updateFromMap(\n        existingChildren,\n        returnFiber,\n        newIdx,\n        step.value,\n        lanes,\n      );\n      if (newFiber !== null) {\n        if (shouldTrackSideEffects) {\n          if (newFiber.alternate !== null) {\n            // The new fiber is a work in progress, but if there exists a\n            // current, that means that we reused the fiber. We need to delete\n            // it from the child list so that we don't add it to the deletion\n            // list.\n            existingChildren.delete(\n              newFiber.key === null ? newIdx : newFiber.key,\n            );\n          }\n        }\n        lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);\n        if (previousNewFiber === null) {\n          resultingFirstChild = newFiber;\n        } else {\n          previousNewFiber.sibling = newFiber;\n        }\n        previousNewFiber = newFiber;\n      }\n    }\n\n    if (shouldTrackSideEffects) {\n      // Any existing children that weren't consumed above were deleted. We need\n      // to add them to the deletion list.\n      existingChildren.forEach(child => deleteChild(returnFiber, child));\n    }\n\n    return resultingFirstChild;\n  }\n\n  function reconcileSingleTextNode(\n    returnFiber: Fiber,\n    currentFirstChild: Fiber | null,\n    textContent: string,\n    lanes: Lanes,\n  ): Fiber {\n    // There's no need to check for keys on text nodes since we don't have a\n    // way to define them.\n    if (currentFirstChild !== null && currentFirstChild.tag === HostText) {\n      // We already have an existing node so let's just update it and delete\n      // the rest.\n      deleteRemainingChildren(returnFiber, currentFirstChild.sibling);\n      const existing = useFiber(currentFirstChild, textContent);\n      existing.return = returnFiber;\n      return existing;\n    }\n    // The existing first child is not a text node so we need to create one\n    // and delete the existing ones.\n    deleteRemainingChildren(returnFiber, currentFirstChild);\n    const created = createFiberFromText(textContent, returnFiber.mode, lanes);\n    created.return = returnFiber;\n    return created;\n  }\n\n  function reconcileSingleElement(\n    returnFiber: Fiber,\n    currentFirstChild: Fiber | null,\n    element: ReactElement,\n    lanes: Lanes,\n  ): Fiber {\n    const key = element.key;\n    let child = currentFirstChild;\n    while (child !== null) {\n      // TODO: If key === null and child.key === null, then this only applies to\n      // the first item in the list.\n      if (child.key === key) {\n        const elementType = element.type;\n        if (elementType === REACT_FRAGMENT_TYPE) {\n          if (child.tag === Fragment) {\n            deleteRemainingChildren(returnFiber, child.sibling);\n            const existing = useFiber(child, element.props.children);\n            existing.return = returnFiber;\n            if (__DEV__) {\n              existing._debugSource = element._source;\n              existing._debugOwner = element._owner;\n            }\n            return existing;\n          }\n        } else {\n          if (\n            child.elementType === elementType ||\n            // Keep this check inline so it only runs on the false path:\n            (__DEV__\n              ? isCompatibleFamilyForHotReloading(child, element)\n              : false) ||\n            // Lazy types should reconcile their resolved type.\n            // We need to do this after the Hot Reloading check above,\n            // because hot reloading has different semantics than prod because\n            // it doesn't resuspend. So we can't let the call below suspend.\n            (enableLazyElements &&\n              typeof elementType === 'object' &&\n              elementType !== null &&\n              elementType.$$typeof === REACT_LAZY_TYPE &&\n              resolveLazy(elementType) === child.type)\n          ) {\n            deleteRemainingChildren(returnFiber, child.sibling);\n            const existing = useFiber(child, element.props);\n            existing.ref = coerceRef(returnFiber, child, element);\n            existing.return = returnFiber;\n            if (__DEV__) {\n              existing._debugSource = element._source;\n              existing._debugOwner = element._owner;\n            }\n            return existing;\n          }\n        }\n        // Didn't match.\n        deleteRemainingChildren(returnFiber, child);\n        break;\n      } else {\n        deleteChild(returnFiber, child);\n      }\n      child = child.sibling;\n    }\n\n    if (element.type === REACT_FRAGMENT_TYPE) {\n      const created = createFiberFromFragment(\n        element.props.children,\n        returnFiber.mode,\n        lanes,\n        element.key,\n      );\n      created.return = returnFiber;\n      return created;\n    } else {\n      const created = createFiberFromElement(element, returnFiber.mode, lanes);\n      created.ref = coerceRef(returnFiber, currentFirstChild, element);\n      created.return = returnFiber;\n      return created;\n    }\n  }\n\n  function reconcileSinglePortal(\n    returnFiber: Fiber,\n    currentFirstChild: Fiber | null,\n    portal: ReactPortal,\n    lanes: Lanes,\n  ): Fiber {\n    const key = portal.key;\n    let child = currentFirstChild;\n    while (child !== null) {\n      // TODO: If key === null and child.key === null, then this only applies to\n      // the first item in the list.\n      if (child.key === key) {\n        if (\n          child.tag === HostPortal &&\n          child.stateNode.containerInfo === portal.containerInfo &&\n          child.stateNode.implementation === portal.implementation\n        ) {\n          deleteRemainingChildren(returnFiber, child.sibling);\n          const existing = useFiber(child, portal.children || []);\n          existing.return = returnFiber;\n          return existing;\n        } else {\n          deleteRemainingChildren(returnFiber, child);\n          break;\n        }\n      } else {\n        deleteChild(returnFiber, child);\n      }\n      child = child.sibling;\n    }\n\n    const created = createFiberFromPortal(portal, returnFiber.mode, lanes);\n    created.return = returnFiber;\n    return created;\n  }\n\n  // This API will tag the children with the side-effect of the reconciliation\n  // itself. They will be added to the side-effect list as we pass through the\n  // children and the parent.\n  function reconcileChildFibers(\n    returnFiber: Fiber,\n    currentFirstChild: Fiber | null,\n    newChild: any,\n    lanes: Lanes,\n  ): Fiber | null {\n    // This function is not recursive.\n    // If the top level item is an array, we treat it as a set of children,\n    // not as a fragment. Nested arrays on the other hand will be treated as\n    // fragment nodes. Recursion happens at the normal flow.\n\n    // Handle top level unkeyed fragments as if they were arrays.\n    // This leads to an ambiguity between <>{[...]}</> and <>...</>.\n    // We treat the ambiguous cases above the same.\n    const isUnkeyedTopLevelFragment =\n      typeof newChild === 'object' &&\n      newChild !== null &&\n      newChild.type === REACT_FRAGMENT_TYPE &&\n      newChild.key === null;\n    if (isUnkeyedTopLevelFragment) {\n      newChild = newChild.props.children;\n    }\n\n    // Handle object types\n    if (typeof newChild === 'object' && newChild !== null) {\n      switch (newChild.$$typeof) {\n        case REACT_ELEMENT_TYPE:\n          return placeSingleChild(\n            reconcileSingleElement(\n              returnFiber,\n              currentFirstChild,\n              newChild,\n              lanes,\n            ),\n          );\n        case REACT_PORTAL_TYPE:\n          return placeSingleChild(\n            reconcileSinglePortal(\n              returnFiber,\n              currentFirstChild,\n              newChild,\n              lanes,\n            ),\n          );\n        case REACT_LAZY_TYPE:\n          if (enableLazyElements) {\n            const payload = newChild._payload;\n            const init = newChild._init;\n            // TODO: This function is supposed to be non-recursive.\n            return reconcileChildFibers(\n              returnFiber,\n              currentFirstChild,\n              init(payload),\n              lanes,\n            );\n          }\n      }\n\n      if (isArray(newChild)) {\n        return reconcileChildrenArray(\n          returnFiber,\n          currentFirstChild,\n          newChild,\n          lanes,\n        );\n      }\n\n      if (getIteratorFn(newChild)) {\n        return reconcileChildrenIterator(\n          returnFiber,\n          currentFirstChild,\n          newChild,\n          lanes,\n        );\n      }\n\n      throwOnInvalidObjectType(returnFiber, newChild);\n    }\n\n    if (typeof newChild === 'string' || typeof newChild === 'number') {\n      return placeSingleChild(\n        reconcileSingleTextNode(\n          returnFiber,\n          currentFirstChild,\n          '' + newChild,\n          lanes,\n        ),\n      );\n    }\n\n    if (__DEV__) {\n      if (typeof newChild === 'function') {\n        warnOnFunctionType(returnFiber);\n      }\n    }\n\n    // Remaining cases are all treated as empty.\n    return deleteRemainingChildren(returnFiber, currentFirstChild);\n  }\n\n  return reconcileChildFibers;\n}\n\nexport const reconcileChildFibers = ChildReconciler(true);\nexport const mountChildFibers = ChildReconciler(false);\n\nexport function cloneChildFibers(\n  current: Fiber | null,\n  workInProgress: Fiber,\n): void {\n  invariant(\n    current === null || workInProgress.child === current.child,\n    'Resuming work not yet implemented.',\n  );\n\n  if (workInProgress.child === null) {\n    return;\n  }\n\n  let currentChild = workInProgress.child;\n  let newChild = createWorkInProgress(currentChild, currentChild.pendingProps);\n  workInProgress.child = newChild;\n\n  newChild.return = workInProgress;\n  while (currentChild.sibling !== null) {\n    currentChild = currentChild.sibling;\n    newChild = newChild.sibling = createWorkInProgress(\n      currentChild,\n      currentChild.pendingProps,\n    );\n    newChild.return = workInProgress;\n  }\n  newChild.sibling = null;\n}\n\n// Reset a workInProgress child set to prepare it for a second pass.\nexport function resetChildFibers(workInProgress: Fiber, lanes: Lanes): void {\n  let child = workInProgress.child;\n  while (child !== null) {\n    resetWorkInProgress(child, lanes);\n    child = child.sibling;\n  }\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Fiber} from './ReactInternalTypes';\nimport type {StackCursor} from './ReactFiberStack.old';\nimport type {Container, HostContext} from './ReactFiberHostConfig';\n\nimport invariant from 'shared/invariant';\n\nimport {getChildHostContext, getRootHostContext} from './ReactFiberHostConfig';\nimport {createCursor, push, pop} from './ReactFiberStack.old';\n\ndeclare class NoContextT {}\nconst NO_CONTEXT: NoContextT = ({}: any);\n\nconst contextStackCursor: StackCursor<HostContext | NoContextT> = createCursor(\n  NO_CONTEXT,\n);\nconst contextFiberStackCursor: StackCursor<Fiber | NoContextT> = createCursor(\n  NO_CONTEXT,\n);\nconst rootInstanceStackCursor: StackCursor<\n  Container | NoContextT,\n> = createCursor(NO_CONTEXT);\n\nfunction requiredContext<Value>(c: Value | NoContextT): Value {\n  invariant(\n    c !== NO_CONTEXT,\n    'Expected host context to exist. This error is likely caused by a bug ' +\n      'in React. Please file an issue.',\n  );\n  return (c: any);\n}\n\nfunction getRootHostContainer(): Container {\n  const rootInstance = requiredContext(rootInstanceStackCursor.current);\n  return rootInstance;\n}\n\nfunction pushHostContainer(fiber: Fiber, nextRootInstance: Container) {\n  // Push current root instance onto the stack;\n  // This allows us to reset root when portals are popped.\n  push(rootInstanceStackCursor, nextRootInstance, fiber);\n  // Track the context and the Fiber that provided it.\n  // This enables us to pop only Fibers that provide unique contexts.\n  push(contextFiberStackCursor, fiber, fiber);\n\n  // Finally, we need to push the host context to the stack.\n  // However, we can't just call getRootHostContext() and push it because\n  // we'd have a different number of entries on the stack depending on\n  // whether getRootHostContext() throws somewhere in renderer code or not.\n  // So we push an empty value first. This lets us safely unwind on errors.\n  push(contextStackCursor, NO_CONTEXT, fiber);\n  const nextRootContext = getRootHostContext(nextRootInstance);\n  // Now that we know this function doesn't throw, replace it.\n  pop(contextStackCursor, fiber);\n  push(contextStackCursor, nextRootContext, fiber);\n}\n\nfunction popHostContainer(fiber: Fiber) {\n  pop(contextStackCursor, fiber);\n  pop(contextFiberStackCursor, fiber);\n  pop(rootInstanceStackCursor, fiber);\n}\n\nfunction getHostContext(): HostContext {\n  const context = requiredContext(contextStackCursor.current);\n  return context;\n}\n\nfunction pushHostContext(fiber: Fiber): void {\n  const rootInstance: Container = requiredContext(\n    rootInstanceStackCursor.current,\n  );\n  const context: HostContext = requiredContext(contextStackCursor.current);\n  const nextContext = getChildHostContext(context, fiber.type, rootInstance);\n\n  // Don't push this Fiber's context unless it's unique.\n  if (context === nextContext) {\n    return;\n  }\n\n  // Track the context and the Fiber that provided it.\n  // This enables us to pop only Fibers that provide unique contexts.\n  push(contextFiberStackCursor, fiber, fiber);\n  push(contextStackCursor, nextContext, fiber);\n}\n\nfunction popHostContext(fiber: Fiber): void {\n  // Do not pop unless this Fiber provided the current context.\n  // pushHostContext() only pushes Fibers that provide unique contexts.\n  if (contextFiberStackCursor.current !== fiber) {\n    return;\n  }\n\n  pop(contextStackCursor, fiber);\n  pop(contextFiberStackCursor, fiber);\n}\n\nexport {\n  getHostContext,\n  getRootHostContainer,\n  popHostContainer,\n  popHostContext,\n  pushHostContainer,\n  pushHostContext,\n};\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Fiber} from './ReactInternalTypes';\nimport type {StackCursor} from './ReactFiberStack.old';\n\nimport {createCursor, push, pop} from './ReactFiberStack.old';\n\nexport opaque type SuspenseContext = number;\nexport opaque type SubtreeSuspenseContext: SuspenseContext = number;\nexport opaque type ShallowSuspenseContext: SuspenseContext = number;\n\nconst DefaultSuspenseContext: SuspenseContext = 0b00;\n\n// The Suspense Context is split into two parts. The lower bits is\n// inherited deeply down the subtree. The upper bits only affect\n// this immediate suspense boundary and gets reset each new\n// boundary or suspense list.\nconst SubtreeSuspenseContextMask: SuspenseContext = 0b01;\n\n// Subtree Flags:\n\n// InvisibleParentSuspenseContext indicates that one of our parent Suspense\n// boundaries is not currently showing visible main content.\n// Either because it is already showing a fallback or is not mounted at all.\n// We can use this to determine if it is desirable to trigger a fallback at\n// the parent. If not, then we might need to trigger undesirable boundaries\n// and/or suspend the commit to avoid hiding the parent content.\nexport const InvisibleParentSuspenseContext: SubtreeSuspenseContext = 0b01;\n\n// Shallow Flags:\n\n// ForceSuspenseFallback can be used by SuspenseList to force newly added\n// items into their fallback state during one of the render passes.\nexport const ForceSuspenseFallback: ShallowSuspenseContext = 0b10;\n\nexport const suspenseStackCursor: StackCursor<SuspenseContext> = createCursor(\n  DefaultSuspenseContext,\n);\n\nexport function hasSuspenseContext(\n  parentContext: SuspenseContext,\n  flag: SuspenseContext,\n): boolean {\n  return (parentContext & flag) !== 0;\n}\n\nexport function setDefaultShallowSuspenseContext(\n  parentContext: SuspenseContext,\n): SuspenseContext {\n  return parentContext & SubtreeSuspenseContextMask;\n}\n\nexport function setShallowSuspenseContext(\n  parentContext: SuspenseContext,\n  shallowContext: ShallowSuspenseContext,\n): SuspenseContext {\n  return (parentContext & SubtreeSuspenseContextMask) | shallowContext;\n}\n\nexport function addSubtreeSuspenseContext(\n  parentContext: SuspenseContext,\n  subtreeContext: SubtreeSuspenseContext,\n): SuspenseContext {\n  return parentContext | subtreeContext;\n}\n\nexport function pushSuspenseContext(\n  fiber: Fiber,\n  newContext: SuspenseContext,\n): void {\n  push(suspenseStackCursor, newContext, fiber);\n}\n\nexport function popSuspenseContext(fiber: Fiber): void {\n  pop(suspenseStackCursor, fiber);\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {ReactNodeList, Wakeable} from 'shared/ReactTypes';\nimport type {Fiber} from './ReactInternalTypes';\nimport type {SuspenseInstance} from './ReactFiberHostConfig';\nimport type {Lane} from './ReactFiberLane.old';\nimport {SuspenseComponent, SuspenseListComponent} from './ReactWorkTags';\nimport {NoFlags, DidCapture} from './ReactFiberFlags';\nimport {\n  isSuspenseInstancePending,\n  isSuspenseInstanceFallback,\n} from './ReactFiberHostConfig';\n\nexport type SuspenseProps = {|\n  children?: ReactNodeList,\n  fallback?: ReactNodeList,\n\n  // TODO: Add \"unstable_\" prefix?\n  suspenseCallback?: (Set<Wakeable> | null) => mixed,\n\n  unstable_expectedLoadTime?: number,\n|};\n\n// A null SuspenseState represents an unsuspended normal Suspense boundary.\n// A non-null SuspenseState means that it is blocked for one reason or another.\n// - A non-null dehydrated field means it's blocked pending hydration.\n//   - A non-null dehydrated field can use isSuspenseInstancePending or\n//     isSuspenseInstanceFallback to query the reason for being dehydrated.\n// - A null dehydrated field means it's blocked by something suspending and\n//   we're currently showing a fallback instead.\nexport type SuspenseState = {|\n  // If this boundary is still dehydrated, we store the SuspenseInstance\n  // here to indicate that it is dehydrated (flag) and for quick access\n  // to check things like isSuspenseInstancePending.\n  dehydrated: null | SuspenseInstance,\n  // Represents the lane we should attempt to hydrate a dehydrated boundary at.\n  // OffscreenLane is the default for dehydrated boundaries.\n  // NoLane is the default for normal boundaries, which turns into \"normal\" pri.\n  retryLane: Lane,\n|};\n\nexport type SuspenseListTailMode = 'collapsed' | 'hidden' | void;\n\nexport type SuspenseListRenderState = {|\n  isBackwards: boolean,\n  // The currently rendering tail row.\n  rendering: null | Fiber,\n  // The absolute time when we started rendering the most recent tail row.\n  renderingStartTime: number,\n  // The last of the already rendered children.\n  last: null | Fiber,\n  // Remaining rows on the tail of the list.\n  tail: null | Fiber,\n  // Tail insertions setting.\n  tailMode: SuspenseListTailMode,\n|};\n\nexport function shouldCaptureSuspense(\n  workInProgress: Fiber,\n  hasInvisibleParent: boolean,\n): boolean {\n  // If it was the primary children that just suspended, capture and render the\n  // fallback. Otherwise, don't capture and bubble to the next boundary.\n  const nextState: SuspenseState | null = workInProgress.memoizedState;\n  if (nextState !== null) {\n    if (nextState.dehydrated !== null) {\n      // A dehydrated boundary always captures.\n      return true;\n    }\n    return false;\n  }\n  const props = workInProgress.memoizedProps;\n  // Regular boundaries always capture.\n  if (props.unstable_avoidThisFallback !== true) {\n    return true;\n  }\n  // If it's a boundary we should avoid, then we prefer to bubble up to the\n  // parent boundary if it is currently invisible.\n  if (hasInvisibleParent) {\n    return false;\n  }\n  // If the parent is not able to handle it, we must handle it.\n  return true;\n}\n\nexport function findFirstSuspended(row: Fiber): null | Fiber {\n  let node = row;\n  while (node !== null) {\n    if (node.tag === SuspenseComponent) {\n      const state: SuspenseState | null = node.memoizedState;\n      if (state !== null) {\n        const dehydrated: null | SuspenseInstance = state.dehydrated;\n        if (\n          dehydrated === null ||\n          isSuspenseInstancePending(dehydrated) ||\n          isSuspenseInstanceFallback(dehydrated)\n        ) {\n          return node;\n        }\n      }\n    } else if (\n      node.tag === SuspenseListComponent &&\n      // revealOrder undefined can't be trusted because it don't\n      // keep track of whether it suspended or not.\n      node.memoizedProps.revealOrder !== undefined\n    ) {\n      const didSuspend = (node.flags & DidCapture) !== NoFlags;\n      if (didSuspend) {\n        return node;\n      }\n    } else if (node.child !== null) {\n      node.child.return = node;\n      node = node.child;\n      continue;\n    }\n    if (node === row) {\n      return null;\n    }\n    while (node.sibling === null) {\n      if (node.return === null || node.return === row) {\n        return null;\n      }\n      node = node.return;\n    }\n    node.sibling.return = node.return;\n    node = node.sibling;\n  }\n  return null;\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nexport type HookFlags = number;\n\nexport const NoFlags = /*  */ 0b000;\n\n// Represents whether effect should fire.\nexport const HasEffect = /* */ 0b001;\n\n// Represents the phase in which the effect (not the clean-up) fires.\nexport const Layout = /*    */ 0b010;\nexport const Passive = /*   */ 0b100;\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Fiber} from './ReactInternalTypes';\nimport type {\n  Instance,\n  TextInstance,\n  HydratableInstance,\n  SuspenseInstance,\n  Container,\n  HostContext,\n} from './ReactFiberHostConfig';\nimport type {SuspenseState} from './ReactFiberSuspenseComponent.old';\n\nimport {\n  HostComponent,\n  HostText,\n  HostRoot,\n  SuspenseComponent,\n} from './ReactWorkTags';\nimport {ChildDeletion, Placement, Hydrating} from './ReactFiberFlags';\nimport invariant from 'shared/invariant';\n\nimport {\n  createFiberFromHostInstanceForDeletion,\n  createFiberFromDehydratedFragment,\n} from './ReactFiber.old';\nimport {\n  shouldSetTextContent,\n  supportsHydration,\n  canHydrateInstance,\n  canHydrateTextInstance,\n  canHydrateSuspenseInstance,\n  getNextHydratableSibling,\n  getFirstHydratableChild,\n  hydrateInstance,\n  hydrateTextInstance,\n  hydrateSuspenseInstance,\n  getNextHydratableInstanceAfterSuspenseInstance,\n  shouldDeleteUnhydratedTailInstances,\n  didNotMatchHydratedContainerTextInstance,\n  didNotMatchHydratedTextInstance,\n  didNotHydrateContainerInstance,\n  didNotHydrateInstance,\n  didNotFindHydratableContainerInstance,\n  didNotFindHydratableContainerTextInstance,\n  didNotFindHydratableContainerSuspenseInstance,\n  didNotFindHydratableInstance,\n  didNotFindHydratableTextInstance,\n  didNotFindHydratableSuspenseInstance,\n} from './ReactFiberHostConfig';\nimport {enableSuspenseServerRenderer} from 'shared/ReactFeatureFlags';\nimport {OffscreenLane} from './ReactFiberLane.old';\n\n// The deepest Fiber on the stack involved in a hydration context.\n// This may have been an insertion or a hydration.\nlet hydrationParentFiber: null | Fiber = null;\nlet nextHydratableInstance: null | HydratableInstance = null;\nlet isHydrating: boolean = false;\n\nfunction warnIfHydrating() {\n  if (__DEV__) {\n    if (isHydrating) {\n      console.error(\n        'We should not be hydrating here. This is a bug in React. Please file a bug.',\n      );\n    }\n  }\n}\n\nfunction enterHydrationState(fiber: Fiber): boolean {\n  if (!supportsHydration) {\n    return false;\n  }\n\n  const parentInstance = fiber.stateNode.containerInfo;\n  nextHydratableInstance = getFirstHydratableChild(parentInstance);\n  hydrationParentFiber = fiber;\n  isHydrating = true;\n  return true;\n}\n\nfunction reenterHydrationStateFromDehydratedSuspenseInstance(\n  fiber: Fiber,\n  suspenseInstance: SuspenseInstance,\n): boolean {\n  if (!supportsHydration) {\n    return false;\n  }\n  nextHydratableInstance = getNextHydratableSibling(suspenseInstance);\n  popToNextHostParent(fiber);\n  isHydrating = true;\n  return true;\n}\n\nfunction deleteHydratableInstance(\n  returnFiber: Fiber,\n  instance: HydratableInstance,\n) {\n  if (__DEV__) {\n    switch (returnFiber.tag) {\n      case HostRoot:\n        didNotHydrateContainerInstance(\n          returnFiber.stateNode.containerInfo,\n          instance,\n        );\n        break;\n      case HostComponent:\n        didNotHydrateInstance(\n          returnFiber.type,\n          returnFiber.memoizedProps,\n          returnFiber.stateNode,\n          instance,\n        );\n        break;\n    }\n  }\n\n  const childToDelete = createFiberFromHostInstanceForDeletion();\n  childToDelete.stateNode = instance;\n  childToDelete.return = returnFiber;\n\n  const deletions = returnFiber.deletions;\n  if (deletions === null) {\n    returnFiber.deletions = [childToDelete];\n    returnFiber.flags |= ChildDeletion;\n  } else {\n    deletions.push(childToDelete);\n  }\n}\n\nfunction insertNonHydratedInstance(returnFiber: Fiber, fiber: Fiber) {\n  fiber.flags = (fiber.flags & ~Hydrating) | Placement;\n  if (__DEV__) {\n    switch (returnFiber.tag) {\n      case HostRoot: {\n        const parentContainer = returnFiber.stateNode.containerInfo;\n        switch (fiber.tag) {\n          case HostComponent:\n            const type = fiber.type;\n            const props = fiber.pendingProps;\n            didNotFindHydratableContainerInstance(parentContainer, type, props);\n            break;\n          case HostText:\n            const text = fiber.pendingProps;\n            didNotFindHydratableContainerTextInstance(parentContainer, text);\n            break;\n          case SuspenseComponent:\n            didNotFindHydratableContainerSuspenseInstance(parentContainer);\n            break;\n        }\n        break;\n      }\n      case HostComponent: {\n        const parentType = returnFiber.type;\n        const parentProps = returnFiber.memoizedProps;\n        const parentInstance = returnFiber.stateNode;\n        switch (fiber.tag) {\n          case HostComponent:\n            const type = fiber.type;\n            const props = fiber.pendingProps;\n            didNotFindHydratableInstance(\n              parentType,\n              parentProps,\n              parentInstance,\n              type,\n              props,\n            );\n            break;\n          case HostText:\n            const text = fiber.pendingProps;\n            didNotFindHydratableTextInstance(\n              parentType,\n              parentProps,\n              parentInstance,\n              text,\n            );\n            break;\n          case SuspenseComponent:\n            didNotFindHydratableSuspenseInstance(\n              parentType,\n              parentProps,\n              parentInstance,\n            );\n            break;\n        }\n        break;\n      }\n      default:\n        return;\n    }\n  }\n}\n\nfunction tryHydrate(fiber, nextInstance) {\n  switch (fiber.tag) {\n    case HostComponent: {\n      const type = fiber.type;\n      const props = fiber.pendingProps;\n      const instance = canHydrateInstance(nextInstance, type, props);\n      if (instance !== null) {\n        fiber.stateNode = (instance: Instance);\n        return true;\n      }\n      return false;\n    }\n    case HostText: {\n      const text = fiber.pendingProps;\n      const textInstance = canHydrateTextInstance(nextInstance, text);\n      if (textInstance !== null) {\n        fiber.stateNode = (textInstance: TextInstance);\n        return true;\n      }\n      return false;\n    }\n    case SuspenseComponent: {\n      if (enableSuspenseServerRenderer) {\n        const suspenseInstance: null | SuspenseInstance = canHydrateSuspenseInstance(\n          nextInstance,\n        );\n        if (suspenseInstance !== null) {\n          const suspenseState: SuspenseState = {\n            dehydrated: suspenseInstance,\n            retryLane: OffscreenLane,\n          };\n          fiber.memoizedState = suspenseState;\n          // Store the dehydrated fragment as a child fiber.\n          // This simplifies the code for getHostSibling and deleting nodes,\n          // since it doesn't have to consider all Suspense boundaries and\n          // check if they're dehydrated ones or not.\n          const dehydratedFragment = createFiberFromDehydratedFragment(\n            suspenseInstance,\n          );\n          dehydratedFragment.return = fiber;\n          fiber.child = dehydratedFragment;\n          return true;\n        }\n      }\n      return false;\n    }\n    default:\n      return false;\n  }\n}\n\nfunction tryToClaimNextHydratableInstance(fiber: Fiber): void {\n  if (!isHydrating) {\n    return;\n  }\n  let nextInstance = nextHydratableInstance;\n  if (!nextInstance) {\n    // Nothing to hydrate. Make it an insertion.\n    insertNonHydratedInstance((hydrationParentFiber: any), fiber);\n    isHydrating = false;\n    hydrationParentFiber = fiber;\n    return;\n  }\n  const firstAttemptedInstance = nextInstance;\n  if (!tryHydrate(fiber, nextInstance)) {\n    // If we can't hydrate this instance let's try the next one.\n    // We use this as a heuristic. It's based on intuition and not data so it\n    // might be flawed or unnecessary.\n    nextInstance = getNextHydratableSibling(firstAttemptedInstance);\n    if (!nextInstance || !tryHydrate(fiber, nextInstance)) {\n      // Nothing to hydrate. Make it an insertion.\n      insertNonHydratedInstance((hydrationParentFiber: any), fiber);\n      isHydrating = false;\n      hydrationParentFiber = fiber;\n      return;\n    }\n    // We matched the next one, we'll now assume that the first one was\n    // superfluous and we'll delete it. Since we can't eagerly delete it\n    // we'll have to schedule a deletion. To do that, this node needs a dummy\n    // fiber associated with it.\n    deleteHydratableInstance(\n      (hydrationParentFiber: any),\n      firstAttemptedInstance,\n    );\n  }\n  hydrationParentFiber = fiber;\n  nextHydratableInstance = getFirstHydratableChild((nextInstance: any));\n}\n\nfunction prepareToHydrateHostInstance(\n  fiber: Fiber,\n  rootContainerInstance: Container,\n  hostContext: HostContext,\n): boolean {\n  if (!supportsHydration) {\n    invariant(\n      false,\n      'Expected prepareToHydrateHostInstance() to never be called. ' +\n        'This error is likely caused by a bug in React. Please file an issue.',\n    );\n  }\n\n  const instance: Instance = fiber.stateNode;\n  const updatePayload = hydrateInstance(\n    instance,\n    fiber.type,\n    fiber.memoizedProps,\n    rootContainerInstance,\n    hostContext,\n    fiber,\n  );\n  // TODO: Type this specific to this type of component.\n  fiber.updateQueue = (updatePayload: any);\n  // If the update payload indicates that there is a change or if there\n  // is a new ref we mark this as an update.\n  if (updatePayload !== null) {\n    return true;\n  }\n  return false;\n}\n\nfunction prepareToHydrateHostTextInstance(fiber: Fiber): boolean {\n  if (!supportsHydration) {\n    invariant(\n      false,\n      'Expected prepareToHydrateHostTextInstance() to never be called. ' +\n        'This error is likely caused by a bug in React. Please file an issue.',\n    );\n  }\n\n  const textInstance: TextInstance = fiber.stateNode;\n  const textContent: string = fiber.memoizedProps;\n  const shouldUpdate = hydrateTextInstance(textInstance, textContent, fiber);\n  if (__DEV__) {\n    if (shouldUpdate) {\n      // We assume that prepareToHydrateHostTextInstance is called in a context where the\n      // hydration parent is the parent host component of this host text.\n      const returnFiber = hydrationParentFiber;\n      if (returnFiber !== null) {\n        switch (returnFiber.tag) {\n          case HostRoot: {\n            const parentContainer = returnFiber.stateNode.containerInfo;\n            didNotMatchHydratedContainerTextInstance(\n              parentContainer,\n              textInstance,\n              textContent,\n            );\n            break;\n          }\n          case HostComponent: {\n            const parentType = returnFiber.type;\n            const parentProps = returnFiber.memoizedProps;\n            const parentInstance = returnFiber.stateNode;\n            didNotMatchHydratedTextInstance(\n              parentType,\n              parentProps,\n              parentInstance,\n              textInstance,\n              textContent,\n            );\n            break;\n          }\n        }\n      }\n    }\n  }\n  return shouldUpdate;\n}\n\nfunction prepareToHydrateHostSuspenseInstance(fiber: Fiber): void {\n  if (!supportsHydration) {\n    invariant(\n      false,\n      'Expected prepareToHydrateHostSuspenseInstance() to never be called. ' +\n        'This error is likely caused by a bug in React. Please file an issue.',\n    );\n  }\n\n  const suspenseState: null | SuspenseState = fiber.memoizedState;\n  const suspenseInstance: null | SuspenseInstance =\n    suspenseState !== null ? suspenseState.dehydrated : null;\n  invariant(\n    suspenseInstance,\n    'Expected to have a hydrated suspense instance. ' +\n      'This error is likely caused by a bug in React. Please file an issue.',\n  );\n  hydrateSuspenseInstance(suspenseInstance, fiber);\n}\n\nfunction skipPastDehydratedSuspenseInstance(\n  fiber: Fiber,\n): null | HydratableInstance {\n  if (!supportsHydration) {\n    invariant(\n      false,\n      'Expected skipPastDehydratedSuspenseInstance() to never be called. ' +\n        'This error is likely caused by a bug in React. Please file an issue.',\n    );\n  }\n  const suspenseState: null | SuspenseState = fiber.memoizedState;\n  const suspenseInstance: null | SuspenseInstance =\n    suspenseState !== null ? suspenseState.dehydrated : null;\n  invariant(\n    suspenseInstance,\n    'Expected to have a hydrated suspense instance. ' +\n      'This error is likely caused by a bug in React. Please file an issue.',\n  );\n  return getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance);\n}\n\nfunction popToNextHostParent(fiber: Fiber): void {\n  let parent = fiber.return;\n  while (\n    parent !== null &&\n    parent.tag !== HostComponent &&\n    parent.tag !== HostRoot &&\n    parent.tag !== SuspenseComponent\n  ) {\n    parent = parent.return;\n  }\n  hydrationParentFiber = parent;\n}\n\nfunction popHydrationState(fiber: Fiber): boolean {\n  if (!supportsHydration) {\n    return false;\n  }\n  if (fiber !== hydrationParentFiber) {\n    // We're deeper than the current hydration context, inside an inserted\n    // tree.\n    return false;\n  }\n  if (!isHydrating) {\n    // If we're not currently hydrating but we're in a hydration context, then\n    // we were an insertion and now need to pop up reenter hydration of our\n    // siblings.\n    popToNextHostParent(fiber);\n    isHydrating = true;\n    return false;\n  }\n\n  // If we have any remaining hydratable nodes, we need to delete them now.\n  // We only do this deeper than head and body since they tend to have random\n  // other nodes in them. We also ignore components with pure text content in\n  // side of them. We also don't delete anything inside the root container.\n  if (\n    fiber.tag !== HostRoot &&\n    (fiber.tag !== HostComponent ||\n      (shouldDeleteUnhydratedTailInstances(fiber.type) &&\n        !shouldSetTextContent(fiber.type, fiber.memoizedProps)))\n  ) {\n    let nextInstance = nextHydratableInstance;\n    while (nextInstance) {\n      deleteHydratableInstance(fiber, nextInstance);\n      nextInstance = getNextHydratableSibling(nextInstance);\n    }\n  }\n\n  popToNextHostParent(fiber);\n  if (fiber.tag === SuspenseComponent) {\n    nextHydratableInstance = skipPastDehydratedSuspenseInstance(fiber);\n  } else {\n    nextHydratableInstance = hydrationParentFiber\n      ? getNextHydratableSibling(fiber.stateNode)\n      : null;\n  }\n  return true;\n}\n\nfunction resetHydrationState(): void {\n  if (!supportsHydration) {\n    return;\n  }\n\n  hydrationParentFiber = null;\n  nextHydratableInstance = null;\n  isHydrating = false;\n}\n\nfunction getIsHydrating(): boolean {\n  return isHydrating;\n}\n\nexport {\n  warnIfHydrating,\n  enterHydrationState,\n  getIsHydrating,\n  reenterHydrationStateFromDehydratedSuspenseInstance,\n  resetHydrationState,\n  tryToClaimNextHydratableInstance,\n  prepareToHydrateHostInstance,\n  prepareToHydrateHostTextInstance,\n  prepareToHydrateHostSuspenseInstance,\n  popHydrationState,\n};\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {MutableSource, MutableSourceVersion} from 'shared/ReactTypes';\nimport type {FiberRoot} from './ReactInternalTypes';\n\nimport {isPrimaryRenderer} from './ReactFiberHostConfig';\n\n// Work in progress version numbers only apply to a single render,\n// and should be reset before starting a new render.\n// This tracks which mutable sources need to be reset after a render.\nconst workInProgressSources: Array<MutableSource<any>> = [];\n\nlet rendererSigil;\nif (__DEV__) {\n  // Used to detect multiple renderers using the same mutable source.\n  rendererSigil = {};\n}\n\nexport function markSourceAsDirty(mutableSource: MutableSource<any>): void {\n  workInProgressSources.push(mutableSource);\n}\n\nexport function resetWorkInProgressVersions(): void {\n  for (let i = 0; i < workInProgressSources.length; i++) {\n    const mutableSource = workInProgressSources[i];\n    if (isPrimaryRenderer) {\n      mutableSource._workInProgressVersionPrimary = null;\n    } else {\n      mutableSource._workInProgressVersionSecondary = null;\n    }\n  }\n  workInProgressSources.length = 0;\n}\n\nexport function getWorkInProgressVersion(\n  mutableSource: MutableSource<any>,\n): null | MutableSourceVersion {\n  if (isPrimaryRenderer) {\n    return mutableSource._workInProgressVersionPrimary;\n  } else {\n    return mutableSource._workInProgressVersionSecondary;\n  }\n}\n\nexport function setWorkInProgressVersion(\n  mutableSource: MutableSource<any>,\n  version: MutableSourceVersion,\n): void {\n  if (isPrimaryRenderer) {\n    mutableSource._workInProgressVersionPrimary = version;\n  } else {\n    mutableSource._workInProgressVersionSecondary = version;\n  }\n  workInProgressSources.push(mutableSource);\n}\n\nexport function warnAboutMultipleRenderersDEV(\n  mutableSource: MutableSource<any>,\n): void {\n  if (__DEV__) {\n    if (isPrimaryRenderer) {\n      if (mutableSource._currentPrimaryRenderer == null) {\n        mutableSource._currentPrimaryRenderer = rendererSigil;\n      } else if (mutableSource._currentPrimaryRenderer !== rendererSigil) {\n        console.error(\n          'Detected multiple renderers concurrently rendering the ' +\n            'same mutable source. This is currently unsupported.',\n        );\n      }\n    } else {\n      if (mutableSource._currentSecondaryRenderer == null) {\n        mutableSource._currentSecondaryRenderer = rendererSigil;\n      } else if (mutableSource._currentSecondaryRenderer !== rendererSigil) {\n        console.error(\n          'Detected multiple renderers concurrently rendering the ' +\n            'same mutable source. This is currently unsupported.',\n        );\n      }\n    }\n  }\n}\n\n// Eager reads the version of a mutable source and stores it on the root.\n// This ensures that the version used for server rendering matches the one\n// that is eventually read during hydration.\n// If they don't match there's a potential tear and a full deopt render is required.\nexport function registerMutableSourceForHydration(\n  root: FiberRoot,\n  mutableSource: MutableSource<any>,\n): void {\n  const getVersion = mutableSource._getVersion;\n  const version = getVersion(mutableSource._source);\n\n  // TODO Clear this data once all pending hydration work is finished.\n  // Retaining it forever may interfere with GC.\n  if (root.mutableSourceEagerHydrationData == null) {\n    root.mutableSourceEagerHydrationData = [mutableSource, version];\n  } else {\n    root.mutableSourceEagerHydrationData.push(mutableSource, version);\n  }\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {ReactContext} from 'shared/ReactTypes';\nimport type {FiberRoot} from './ReactInternalTypes';\nimport type {Lanes} from './ReactFiberLane.old';\nimport type {StackCursor} from './ReactFiberStack.old';\n\nimport {enableCache} from 'shared/ReactFeatureFlags';\nimport {REACT_CONTEXT_TYPE} from 'shared/ReactSymbols';\n\nimport {isPrimaryRenderer} from './ReactFiberHostConfig';\nimport {createCursor, push, pop} from './ReactFiberStack.old';\nimport {pushProvider, popProvider} from './ReactFiberNewContext.old';\n\nexport type Cache = Map<() => mixed, mixed>;\n\nexport type CacheComponentState = {|\n  +parent: Cache,\n  +cache: Cache,\n|};\n\nexport type SpawnedCachePool = {|\n  +parent: Cache,\n  +pool: Cache,\n|};\n\nexport const CacheContext: ReactContext<Cache> = enableCache\n  ? {\n      $$typeof: REACT_CONTEXT_TYPE,\n      // We don't use Consumer/Provider for Cache components. So we'll cheat.\n      Consumer: (null: any),\n      Provider: (null: any),\n      // We'll initialize these at the root.\n      _currentValue: (null: any),\n      _currentValue2: (null: any),\n      _threadCount: 0,\n    }\n  : (null: any);\n\nif (__DEV__ && enableCache) {\n  CacheContext._currentRenderer = null;\n  CacheContext._currentRenderer2 = null;\n}\n\n// The cache that newly mounted Cache boundaries should use. It's either\n// retrieved from the cache pool, or the result of a refresh.\nlet pooledCache: Cache | null = null;\n\n// When retrying a Suspense/Offscreen boundary, we override pooledCache with the\n// cache from the render that suspended.\nconst prevFreshCacheOnStack: StackCursor<Cache | null> = createCursor(null);\n\nexport function pushCacheProvider(workInProgress: Fiber, cache: Cache) {\n  if (!enableCache) {\n    return;\n  }\n  pushProvider(workInProgress, CacheContext, cache);\n}\n\nexport function popCacheProvider(workInProgress: Fiber, cache: Cache) {\n  if (!enableCache) {\n    return;\n  }\n  popProvider(CacheContext, workInProgress);\n}\n\nexport function requestCacheFromPool(renderLanes: Lanes): Cache {\n  if (!enableCache) {\n    return (null: any);\n  }\n  if (pooledCache !== null) {\n    return pooledCache;\n  }\n  // Create a fresh cache.\n  pooledCache = new Map();\n  return pooledCache;\n}\n\nexport function pushRootCachePool(root: FiberRoot) {\n  if (!enableCache) {\n    return;\n  }\n  // When we start rendering a tree, read the pooled cache for this render\n  // from `root.pooledCache`. If it's currently `null`, we will lazily\n  // initialize it the first type it's requested. However, we only mutate\n  // the root itself during the complete/unwind phase of the HostRoot.\n  pooledCache = root.pooledCache;\n}\n\nexport function popRootCachePool(root: FiberRoot, renderLanes: Lanes) {\n  if (!enableCache) {\n    return;\n  }\n  // The `pooledCache` variable points to the cache that was used for new\n  // cache boundaries during this render, if any. Stash it on the root so that\n  // parallel transitions may share the same cache. We will clear this field\n  // once all the transitions that depend on it (which we track with\n  // `pooledCacheLanes`) have committed.\n  root.pooledCache = pooledCache;\n  if (pooledCache !== null) {\n    root.pooledCacheLanes |= renderLanes;\n  }\n}\n\nexport function restoreSpawnedCachePool(\n  offscreenWorkInProgress: Fiber,\n  prevCachePool: SpawnedCachePool,\n): SpawnedCachePool | null {\n  if (!enableCache) {\n    return (null: any);\n  }\n  const nextParentCache = isPrimaryRenderer\n    ? CacheContext._currentValue\n    : CacheContext._currentValue2;\n  if (nextParentCache !== prevCachePool.parent) {\n    // There was a refresh. Don't bother restoring anything since the refresh\n    // will override it.\n    return null;\n  } else {\n    // No refresh. Resume with the previous cache. This will override the cache\n    // pool so that any new Cache boundaries in the subtree use this one instead\n    // of requesting a fresh one.\n    push(prevFreshCacheOnStack, pooledCache, offscreenWorkInProgress);\n    pooledCache = prevCachePool.pool;\n\n    // Return the cache pool to signal that we did in fact push it. We will\n    // assign this to the field on the fiber so we know to pop the context.\n    return prevCachePool;\n  }\n}\n\n// Note: Ideally, `popCachePool` would return this value, and then we would pass\n// it to `getSuspendedCachePool`. But factoring reasons, those two functions are\n// in different phases/files. They are always called in sequence, though, so we\n// can stash the value here temporarily.\nlet _suspendedPooledCache: Cache | null = null;\n\nexport function popCachePool(workInProgress: Fiber) {\n  if (!enableCache) {\n    return;\n  }\n  _suspendedPooledCache = pooledCache;\n  pooledCache = prevFreshCacheOnStack.current;\n  pop(prevFreshCacheOnStack, workInProgress);\n}\n\nexport function getSuspendedCachePool(): SpawnedCachePool | null {\n  if (!enableCache) {\n    return null;\n  }\n\n  // We check the cache on the stack first, since that's the one any new Caches\n  // would have accessed.\n  let pool = pooledCache;\n  if (pool === null) {\n    // There's no pooled cache above us in the stack. However, a child in the\n    // suspended tree may have requested a fresh cache pool. If so, we would\n    // have unwound it with `popCachePool`.\n    if (_suspendedPooledCache !== null) {\n      pool = _suspendedPooledCache;\n      _suspendedPooledCache = null;\n    } else {\n      // There's no suspended cache pool.\n      return null;\n    }\n  }\n\n  return {\n    // We must also save the parent, so that when we resume we can detect\n    // a refresh.\n    parent: isPrimaryRenderer\n      ? CacheContext._currentValue\n      : CacheContext._currentValue2,\n    pool,\n  };\n}\n\nexport function getOffscreenDeferredCachePool(): SpawnedCachePool | null {\n  if (!enableCache) {\n    return null;\n  }\n\n  if (pooledCache === null) {\n    // There's no deferred cache pool.\n    return null;\n  }\n\n  return {\n    // We must also store the parent, so that when we resume we can detect\n    // a refresh.\n    parent: isPrimaryRenderer\n      ? CacheContext._currentValue\n      : CacheContext._currentValue2,\n    pool: pooledCache,\n  };\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {\n  MutableSource,\n  MutableSourceGetSnapshotFn,\n  MutableSourceSubscribeFn,\n  ReactContext,\n} from 'shared/ReactTypes';\nimport type {Fiber, Dispatcher, HookType} from './ReactInternalTypes';\nimport type {Lanes, Lane} from './ReactFiberLane.old';\nimport type {HookFlags} from './ReactHookEffectTags';\nimport type {FiberRoot} from './ReactInternalTypes';\nimport type {OpaqueIDType} from './ReactFiberHostConfig';\nimport type {Cache} from './ReactFiberCacheComponent.old';\nimport type {Flags} from './ReactFiberFlags';\n\nimport ReactSharedInternals from 'shared/ReactSharedInternals';\nimport {\n  enableDebugTracing,\n  enableSchedulingProfiler,\n  enableNewReconciler,\n  enableCache,\n  enableUseRefAccessWarning,\n  enableStrictEffects,\n  enableLazyContextPropagation,\n  enableSuspenseLayoutEffectSemantics,\n} from 'shared/ReactFeatureFlags';\n\nimport {\n  NoMode,\n  ConcurrentMode,\n  DebugTracingMode,\n  StrictEffectsMode,\n} from './ReactTypeOfMode';\nimport {\n  NoLane,\n  SyncLane,\n  NoLanes,\n  isSubsetOfLanes,\n  mergeLanes,\n  removeLanes,\n  intersectLanes,\n  isTransitionLane,\n  markRootEntangled,\n  markRootMutableRead,\n  NoTimestamp,\n} from './ReactFiberLane.old';\nimport {\n  ContinuousEventPriority,\n  getCurrentUpdatePriority,\n  setCurrentUpdatePriority,\n  higherEventPriority,\n} from './ReactEventPriorities.old';\nimport {readContext, checkIfContextChanged} from './ReactFiberNewContext.old';\nimport {HostRoot, CacheComponent} from './ReactWorkTags';\nimport {\n  LayoutStatic as LayoutStaticEffect,\n  MountLayoutDev as MountLayoutDevEffect,\n  MountPassiveDev as MountPassiveDevEffect,\n  Passive as PassiveEffect,\n  PassiveStatic as PassiveStaticEffect,\n  StaticMask as StaticMaskEffect,\n  Update as UpdateEffect,\n} from './ReactFiberFlags';\nimport {\n  HasEffect as HookHasEffect,\n  Layout as HookLayout,\n  Passive as HookPassive,\n} from './ReactHookEffectTags';\nimport {\n  getWorkInProgressRoot,\n  scheduleUpdateOnFiber,\n  requestUpdateLane,\n  requestEventTime,\n  warnIfNotCurrentlyActingEffectsInDEV,\n  warnIfNotCurrentlyActingUpdatesInDev,\n  markSkippedUpdateLanes,\n  isInterleavedUpdate,\n} from './ReactFiberWorkLoop.old';\n\nimport invariant from 'shared/invariant';\nimport getComponentNameFromFiber from 'react-reconciler/src/getComponentNameFromFiber';\nimport is from 'shared/objectIs';\nimport isArray from 'shared/isArray';\nimport {\n  markWorkInProgressReceivedUpdate,\n  checkIfWorkInProgressReceivedUpdate,\n} from './ReactFiberBeginWork.old';\nimport {getIsHydrating} from './ReactFiberHydrationContext.old';\nimport {\n  makeClientId,\n  makeClientIdInDEV,\n  makeOpaqueHydratingObject,\n} from './ReactFiberHostConfig';\nimport {\n  getWorkInProgressVersion,\n  markSourceAsDirty,\n  setWorkInProgressVersion,\n  warnAboutMultipleRenderersDEV,\n} from './ReactMutableSource.old';\nimport {getIsRendering} from './ReactCurrentFiber';\nimport {logStateUpdateScheduled} from './DebugTracing';\nimport {markStateUpdateScheduled} from './SchedulingProfiler';\nimport {CacheContext} from './ReactFiberCacheComponent.old';\nimport {\n  createUpdate,\n  enqueueUpdate,\n  entangleTransitions,\n} from './ReactUpdateQueue.old';\nimport {pushInterleavedQueue} from './ReactFiberInterleavedUpdates.old';\nimport {getIsStrictModeForDevtools} from './ReactFiberReconciler.old';\nimport {warnOnSubscriptionInsideStartTransition} from 'shared/ReactFeatureFlags';\n\nconst {ReactCurrentDispatcher, ReactCurrentBatchConfig} = ReactSharedInternals;\n\ntype Update<S, A> = {|\n  lane: Lane,\n  action: A,\n  eagerReducer: ((S, A) => S) | null,\n  eagerState: S | null,\n  next: Update<S, A>,\n|};\n\nexport type UpdateQueue<S, A> = {|\n  pending: Update<S, A> | null,\n  interleaved: Update<S, A> | null,\n  lanes: Lanes,\n  dispatch: (A => mixed) | null,\n  lastRenderedReducer: ((S, A) => S) | null,\n  lastRenderedState: S | null,\n|};\n\nlet didWarnAboutMismatchedHooksForComponent;\nlet didWarnAboutUseOpaqueIdentifier;\nlet didWarnUncachedGetSnapshot;\nif (__DEV__) {\n  didWarnAboutUseOpaqueIdentifier = {};\n  didWarnAboutMismatchedHooksForComponent = new Set();\n}\n\nexport type Hook = {|\n  memoizedState: any,\n  baseState: any,\n  baseQueue: Update<any, any> | null,\n  queue: any,\n  next: Hook | null,\n|};\n\nexport type Effect = {|\n  tag: HookFlags,\n  create: () => (() => void) | void,\n  destroy: (() => void) | void,\n  deps: Array<mixed> | null,\n  next: Effect,\n|};\n\ntype StoreInstance<T> = {|\n  value: T,\n  getSnapshot: () => T,\n|};\n\nexport type FunctionComponentUpdateQueue = {|lastEffect: Effect | null|};\n\ntype BasicStateAction<S> = (S => S) | S;\n\ntype Dispatch<A> = A => void;\n\n// These are set right before calling the component.\nlet renderLanes: Lanes = NoLanes;\n// The work-in-progress fiber. I've named it differently to distinguish it from\n// the work-in-progress hook.\nlet currentlyRenderingFiber: Fiber = (null: any);\n\n// Hooks are stored as a linked list on the fiber's memoizedState field. The\n// current hook list is the list that belongs to the current fiber. The\n// work-in-progress hook list is a new list that will be added to the\n// work-in-progress fiber.\nlet currentHook: Hook | null = null;\nlet workInProgressHook: Hook | null = null;\n\n// Whether an update was scheduled at any point during the render phase. This\n// does not get reset if we do another render pass; only when we're completely\n// finished evaluating this component. This is an optimization so we know\n// whether we need to clear render phase updates after a throw.\nlet didScheduleRenderPhaseUpdate: boolean = false;\n// Where an update was scheduled only during the current render pass. This\n// gets reset after each attempt.\n// TODO: Maybe there's some way to consolidate this with\n// `didScheduleRenderPhaseUpdate`. Or with `numberOfReRenders`.\nlet didScheduleRenderPhaseUpdateDuringThisPass: boolean = false;\n\nconst RE_RENDER_LIMIT = 25;\n\n// In DEV, this is the name of the currently executing primitive hook\nlet currentHookNameInDev: ?HookType = null;\n\n// In DEV, this list ensures that hooks are called in the same order between renders.\n// The list stores the order of hooks used during the initial render (mount).\n// Subsequent renders (updates) reference this list.\nlet hookTypesDev: Array<HookType> | null = null;\nlet hookTypesUpdateIndexDev: number = -1;\n\n// In DEV, this tracks whether currently rendering component needs to ignore\n// the dependencies for Hooks that need them (e.g. useEffect or useMemo).\n// When true, such Hooks will always be \"remounted\". Only used during hot reload.\nlet ignorePreviousDependencies: boolean = false;\n\nfunction mountHookTypesDev() {\n  if (__DEV__) {\n    const hookName = ((currentHookNameInDev: any): HookType);\n\n    if (hookTypesDev === null) {\n      hookTypesDev = [hookName];\n    } else {\n      hookTypesDev.push(hookName);\n    }\n  }\n}\n\nfunction updateHookTypesDev() {\n  if (__DEV__) {\n    const hookName = ((currentHookNameInDev: any): HookType);\n\n    if (hookTypesDev !== null) {\n      hookTypesUpdateIndexDev++;\n      if (hookTypesDev[hookTypesUpdateIndexDev] !== hookName) {\n        warnOnHookMismatchInDev(hookName);\n      }\n    }\n  }\n}\n\nfunction checkDepsAreArrayDev(deps: mixed) {\n  if (__DEV__) {\n    if (deps !== undefined && deps !== null && !isArray(deps)) {\n      // Verify deps, but only on mount to avoid extra checks.\n      // It's unlikely their type would change as usually you define them inline.\n      console.error(\n        '%s received a final argument that is not an array (instead, received `%s`). When ' +\n          'specified, the final argument must be an array.',\n        currentHookNameInDev,\n        typeof deps,\n      );\n    }\n  }\n}\n\nfunction warnOnHookMismatchInDev(currentHookName: HookType) {\n  if (__DEV__) {\n    const componentName = getComponentNameFromFiber(currentlyRenderingFiber);\n    if (!didWarnAboutMismatchedHooksForComponent.has(componentName)) {\n      didWarnAboutMismatchedHooksForComponent.add(componentName);\n\n      if (hookTypesDev !== null) {\n        let table = '';\n\n        const secondColumnStart = 30;\n\n        for (let i = 0; i <= ((hookTypesUpdateIndexDev: any): number); i++) {\n          const oldHookName = hookTypesDev[i];\n          const newHookName =\n            i === ((hookTypesUpdateIndexDev: any): number)\n              ? currentHookName\n              : oldHookName;\n\n          let row = `${i + 1}. ${oldHookName}`;\n\n          // Extra space so second column lines up\n          // lol @ IE not supporting String#repeat\n          while (row.length < secondColumnStart) {\n            row += ' ';\n          }\n\n          row += newHookName + '\\n';\n\n          table += row;\n        }\n\n        console.error(\n          'React has detected a change in the order of Hooks called by %s. ' +\n            'This will lead to bugs and errors if not fixed. ' +\n            'For more information, read the Rules of Hooks: https://reactjs.org/link/rules-of-hooks\\n\\n' +\n            '   Previous render            Next render\\n' +\n            '   ------------------------------------------------------\\n' +\n            '%s' +\n            '   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n',\n          componentName,\n          table,\n        );\n      }\n    }\n  }\n}\n\nfunction throwInvalidHookError() {\n  invariant(\n    false,\n    'Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for' +\n      ' one of the following reasons:\\n' +\n      '1. You might have mismatching versions of React and the renderer (such as React DOM)\\n' +\n      '2. You might be breaking the Rules of Hooks\\n' +\n      '3. You might have more than one copy of React in the same app\\n' +\n      'See https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.',\n  );\n}\n\nfunction areHookInputsEqual(\n  nextDeps: Array<mixed>,\n  prevDeps: Array<mixed> | null,\n) {\n  if (__DEV__) {\n    if (ignorePreviousDependencies) {\n      // Only true when this component is being hot reloaded.\n      return false;\n    }\n  }\n\n  if (prevDeps === null) {\n    if (__DEV__) {\n      console.error(\n        '%s received a final argument during this render, but not during ' +\n          'the previous render. Even though the final argument is optional, ' +\n          'its type cannot change between renders.',\n        currentHookNameInDev,\n      );\n    }\n    return false;\n  }\n\n  if (__DEV__) {\n    // Don't bother comparing lengths in prod because these arrays should be\n    // passed inline.\n    if (nextDeps.length !== prevDeps.length) {\n      console.error(\n        'The final argument passed to %s changed size between renders. The ' +\n          'order and size of this array must remain constant.\\n\\n' +\n          'Previous: %s\\n' +\n          'Incoming: %s',\n        currentHookNameInDev,\n        `[${prevDeps.join(', ')}]`,\n        `[${nextDeps.join(', ')}]`,\n      );\n    }\n  }\n  for (let i = 0; i < prevDeps.length && i < nextDeps.length; i++) {\n    if (is(nextDeps[i], prevDeps[i])) {\n      continue;\n    }\n    return false;\n  }\n  return true;\n}\n\nexport function renderWithHooks<Props, SecondArg>(\n  current: Fiber | null,\n  workInProgress: Fiber,\n  Component: (p: Props, arg: SecondArg) => any,\n  props: Props,\n  secondArg: SecondArg,\n  nextRenderLanes: Lanes,\n): any {\n  renderLanes = nextRenderLanes;\n  currentlyRenderingFiber = workInProgress;\n\n  if (__DEV__) {\n    hookTypesDev =\n      current !== null\n        ? ((current._debugHookTypes: any): Array<HookType>)\n        : null;\n    hookTypesUpdateIndexDev = -1;\n    // Used for hot reloading:\n    ignorePreviousDependencies =\n      current !== null && current.type !== workInProgress.type;\n  }\n\n  workInProgress.memoizedState = null;\n  workInProgress.updateQueue = null;\n  workInProgress.lanes = NoLanes;\n\n  // The following should have already been reset\n  // currentHook = null;\n  // workInProgressHook = null;\n\n  // didScheduleRenderPhaseUpdate = false;\n\n  // TODO Warn if no hooks are used at all during mount, then some are used during update.\n  // Currently we will identify the update render as a mount because memoizedState === null.\n  // This is tricky because it's valid for certain types of components (e.g. React.lazy)\n\n  // Using memoizedState to differentiate between mount/update only works if at least one stateful hook is used.\n  // Non-stateful hooks (e.g. context) don't get added to memoizedState,\n  // so memoizedState would be null during updates and mounts.\n  if (__DEV__) {\n    if (current !== null && current.memoizedState !== null) {\n      ReactCurrentDispatcher.current = HooksDispatcherOnUpdateInDEV;\n    } else if (hookTypesDev !== null) {\n      // This dispatcher handles an edge case where a component is updating,\n      // but no stateful hooks have been used.\n      // We want to match the production code behavior (which will use HooksDispatcherOnMount),\n      // but with the extra DEV validation to ensure hooks ordering hasn't changed.\n      // This dispatcher does that.\n      ReactCurrentDispatcher.current = HooksDispatcherOnMountWithHookTypesInDEV;\n    } else {\n      ReactCurrentDispatcher.current = HooksDispatcherOnMountInDEV;\n    }\n  } else {\n    ReactCurrentDispatcher.current =\n      current === null || current.memoizedState === null\n        ? HooksDispatcherOnMount\n        : HooksDispatcherOnUpdate;\n  }\n\n  let children = Component(props, secondArg);\n\n  // Check if there was a render phase update\n  if (didScheduleRenderPhaseUpdateDuringThisPass) {\n    // Keep rendering in a loop for as long as render phase updates continue to\n    // be scheduled. Use a counter to prevent infinite loops.\n    let numberOfReRenders: number = 0;\n    do {\n      didScheduleRenderPhaseUpdateDuringThisPass = false;\n      invariant(\n        numberOfReRenders < RE_RENDER_LIMIT,\n        'Too many re-renders. React limits the number of renders to prevent ' +\n          'an infinite loop.',\n      );\n\n      numberOfReRenders += 1;\n      if (__DEV__) {\n        // Even when hot reloading, allow dependencies to stabilize\n        // after first render to prevent infinite render phase updates.\n        ignorePreviousDependencies = false;\n      }\n\n      // Start over from the beginning of the list\n      currentHook = null;\n      workInProgressHook = null;\n\n      workInProgress.updateQueue = null;\n\n      if (__DEV__) {\n        // Also validate hook order for cascading updates.\n        hookTypesUpdateIndexDev = -1;\n      }\n\n      ReactCurrentDispatcher.current = __DEV__\n        ? HooksDispatcherOnRerenderInDEV\n        : HooksDispatcherOnRerender;\n\n      children = Component(props, secondArg);\n    } while (didScheduleRenderPhaseUpdateDuringThisPass);\n  }\n\n  // We can assume the previous dispatcher is always this one, since we set it\n  // at the beginning of the render phase and there's no re-entrance.\n  ReactCurrentDispatcher.current = ContextOnlyDispatcher;\n\n  if (__DEV__) {\n    workInProgress._debugHookTypes = hookTypesDev;\n  }\n\n  // This check uses currentHook so that it works the same in DEV and prod bundles.\n  // hookTypesDev could catch more cases (e.g. context) but only in DEV bundles.\n  const didRenderTooFewHooks =\n    currentHook !== null && currentHook.next !== null;\n\n  renderLanes = NoLanes;\n  currentlyRenderingFiber = (null: any);\n\n  currentHook = null;\n  workInProgressHook = null;\n\n  if (__DEV__) {\n    currentHookNameInDev = null;\n    hookTypesDev = null;\n    hookTypesUpdateIndexDev = -1;\n\n    // Confirm that a static flag was not added or removed since the last\n    // render. If this fires, it suggests that we incorrectly reset the static\n    // flags in some other part of the codebase. This has happened before, for\n    // example, in the SuspenseList implementation.\n    if (\n      current !== null &&\n      (current.flags & StaticMaskEffect) !==\n        (workInProgress.flags & StaticMaskEffect) &&\n      // Disable this warning in legacy mode, because legacy Suspense is weird\n      // and creates false positives. To make this work in legacy mode, we'd\n      // need to mark fibers that commit in an incomplete state, somehow. For\n      // now I'll disable the warning that most of the bugs that would trigger\n      // it are either exclusive to concurrent mode or exist in both.\n      (current.mode & ConcurrentMode) !== NoMode\n    ) {\n      console.error(\n        'Internal React error: Expected static flag was missing. Please ' +\n          'notify the React team.',\n      );\n    }\n  }\n\n  didScheduleRenderPhaseUpdate = false;\n\n  invariant(\n    !didRenderTooFewHooks,\n    'Rendered fewer hooks than expected. This may be caused by an accidental ' +\n      'early return statement.',\n  );\n\n  if (enableLazyContextPropagation) {\n    if (current !== null) {\n      if (!checkIfWorkInProgressReceivedUpdate()) {\n        // If there were no changes to props or state, we need to check if there\n        // was a context change. We didn't already do this because there's no\n        // 1:1 correspondence between dependencies and hooks. Although, because\n        // there almost always is in the common case (`readContext` is an\n        // internal API), we could compare in there. OTOH, we only hit this case\n        // if everything else bails out, so on the whole it might be better to\n        // keep the comparison out of the common path.\n        const currentDependencies = current.dependencies;\n        if (\n          currentDependencies !== null &&\n          checkIfContextChanged(currentDependencies)\n        ) {\n          markWorkInProgressReceivedUpdate();\n        }\n      }\n    }\n  }\n\n  return children;\n}\n\nexport function bailoutHooks(\n  current: Fiber,\n  workInProgress: Fiber,\n  lanes: Lanes,\n) {\n  workInProgress.updateQueue = current.updateQueue;\n  // TODO: Don't need to reset the flags here, because they're reset in the\n  // complete phase (bubbleProperties).\n  if (\n    __DEV__ &&\n    enableStrictEffects &&\n    (workInProgress.mode & StrictEffectsMode) !== NoMode\n  ) {\n    workInProgress.flags &= ~(\n      MountPassiveDevEffect |\n      MountLayoutDevEffect |\n      PassiveEffect |\n      UpdateEffect\n    );\n  } else {\n    workInProgress.flags &= ~(PassiveEffect | UpdateEffect);\n  }\n  current.lanes = removeLanes(current.lanes, lanes);\n}\n\nexport function resetHooksAfterThrow(): void {\n  // We can assume the previous dispatcher is always this one, since we set it\n  // at the beginning of the render phase and there's no re-entrance.\n  ReactCurrentDispatcher.current = ContextOnlyDispatcher;\n\n  if (didScheduleRenderPhaseUpdate) {\n    // There were render phase updates. These are only valid for this render\n    // phase, which we are now aborting. Remove the updates from the queues so\n    // they do not persist to the next render. Do not remove updates from hooks\n    // that weren't processed.\n    //\n    // Only reset the updates from the queue if it has a clone. If it does\n    // not have a clone, that means it wasn't processed, and the updates were\n    // scheduled before we entered the render phase.\n    let hook: Hook | null = currentlyRenderingFiber.memoizedState;\n    while (hook !== null) {\n      const queue = hook.queue;\n      if (queue !== null) {\n        queue.pending = null;\n      }\n      hook = hook.next;\n    }\n    didScheduleRenderPhaseUpdate = false;\n  }\n\n  renderLanes = NoLanes;\n  currentlyRenderingFiber = (null: any);\n\n  currentHook = null;\n  workInProgressHook = null;\n\n  if (__DEV__) {\n    hookTypesDev = null;\n    hookTypesUpdateIndexDev = -1;\n\n    currentHookNameInDev = null;\n\n    isUpdatingOpaqueValueInRenderPhase = false;\n  }\n\n  didScheduleRenderPhaseUpdateDuringThisPass = false;\n}\n\nfunction mountWorkInProgressHook(): Hook {\n  const hook: Hook = {\n    memoizedState: null,\n\n    baseState: null,\n    baseQueue: null,\n    queue: null,\n\n    next: null,\n  };\n\n  if (workInProgressHook === null) {\n    // This is the first hook in the list\n    currentlyRenderingFiber.memoizedState = workInProgressHook = hook;\n  } else {\n    // Append to the end of the list\n    workInProgressHook = workInProgressHook.next = hook;\n  }\n  return workInProgressHook;\n}\n\nfunction updateWorkInProgressHook(): Hook {\n  // This function is used both for updates and for re-renders triggered by a\n  // render phase update. It assumes there is either a current hook we can\n  // clone, or a work-in-progress hook from a previous render pass that we can\n  // use as a base. When we reach the end of the base list, we must switch to\n  // the dispatcher used for mounts.\n  let nextCurrentHook: null | Hook;\n  if (currentHook === null) {\n    const current = currentlyRenderingFiber.alternate;\n    if (current !== null) {\n      nextCurrentHook = current.memoizedState;\n    } else {\n      nextCurrentHook = null;\n    }\n  } else {\n    nextCurrentHook = currentHook.next;\n  }\n\n  let nextWorkInProgressHook: null | Hook;\n  if (workInProgressHook === null) {\n    nextWorkInProgressHook = currentlyRenderingFiber.memoizedState;\n  } else {\n    nextWorkInProgressHook = workInProgressHook.next;\n  }\n\n  if (nextWorkInProgressHook !== null) {\n    // There's already a work-in-progress. Reuse it.\n    workInProgressHook = nextWorkInProgressHook;\n    nextWorkInProgressHook = workInProgressHook.next;\n\n    currentHook = nextCurrentHook;\n  } else {\n    // Clone from the current hook.\n\n    invariant(\n      nextCurrentHook !== null,\n      'Rendered more hooks than during the previous render.',\n    );\n    currentHook = nextCurrentHook;\n\n    const newHook: Hook = {\n      memoizedState: currentHook.memoizedState,\n\n      baseState: currentHook.baseState,\n      baseQueue: currentHook.baseQueue,\n      queue: currentHook.queue,\n\n      next: null,\n    };\n\n    if (workInProgressHook === null) {\n      // This is the first hook in the list.\n      currentlyRenderingFiber.memoizedState = workInProgressHook = newHook;\n    } else {\n      // Append to the end of the list.\n      workInProgressHook = workInProgressHook.next = newHook;\n    }\n  }\n  return workInProgressHook;\n}\n\nfunction createFunctionComponentUpdateQueue(): FunctionComponentUpdateQueue {\n  return {\n    lastEffect: null,\n  };\n}\n\nfunction basicStateReducer<S>(state: S, action: BasicStateAction<S>): S {\n  // $FlowFixMe: Flow doesn't like mixed types\n  return typeof action === 'function' ? action(state) : action;\n}\n\nfunction mountReducer<S, I, A>(\n  reducer: (S, A) => S,\n  initialArg: I,\n  init?: I => S,\n): [S, Dispatch<A>] {\n  const hook = mountWorkInProgressHook();\n  let initialState;\n  if (init !== undefined) {\n    initialState = init(initialArg);\n  } else {\n    initialState = ((initialArg: any): S);\n  }\n  hook.memoizedState = hook.baseState = initialState;\n  const queue: UpdateQueue<S, A> = {\n    pending: null,\n    interleaved: null,\n    lanes: NoLanes,\n    dispatch: null,\n    lastRenderedReducer: reducer,\n    lastRenderedState: (initialState: any),\n  };\n  hook.queue = queue;\n  const dispatch: Dispatch<A> = (queue.dispatch = (dispatchAction.bind(\n    null,\n    currentlyRenderingFiber,\n    queue,\n  ): any));\n  return [hook.memoizedState, dispatch];\n}\n\nfunction updateReducer<S, I, A>(\n  reducer: (S, A) => S,\n  initialArg: I,\n  init?: I => S,\n): [S, Dispatch<A>] {\n  const hook = updateWorkInProgressHook();\n  const queue = hook.queue;\n  invariant(\n    queue !== null,\n    'Should have a queue. This is likely a bug in React. Please file an issue.',\n  );\n\n  queue.lastRenderedReducer = reducer;\n\n  const current: Hook = (currentHook: any);\n\n  // The last rebase update that is NOT part of the base state.\n  let baseQueue = current.baseQueue;\n\n  // The last pending update that hasn't been processed yet.\n  const pendingQueue = queue.pending;\n  if (pendingQueue !== null) {\n    // We have new updates that haven't been processed yet.\n    // We'll add them to the base queue.\n    if (baseQueue !== null) {\n      // Merge the pending queue and the base queue.\n      const baseFirst = baseQueue.next;\n      const pendingFirst = pendingQueue.next;\n      baseQueue.next = pendingFirst;\n      pendingQueue.next = baseFirst;\n    }\n    if (__DEV__) {\n      if (current.baseQueue !== baseQueue) {\n        // Internal invariant that should never happen, but feasibly could in\n        // the future if we implement resuming, or some form of that.\n        console.error(\n          'Internal error: Expected work-in-progress queue to be a clone. ' +\n            'This is a bug in React.',\n        );\n      }\n    }\n    current.baseQueue = baseQueue = pendingQueue;\n    queue.pending = null;\n  }\n\n  if (baseQueue !== null) {\n    // We have a queue to process.\n    const first = baseQueue.next;\n    let newState = current.baseState;\n\n    let newBaseState = null;\n    let newBaseQueueFirst = null;\n    let newBaseQueueLast = null;\n    let update = first;\n    do {\n      const updateLane = update.lane;\n      if (!isSubsetOfLanes(renderLanes, updateLane)) {\n        // Priority is insufficient. Skip this update. If this is the first\n        // skipped update, the previous update/state is the new base\n        // update/state.\n        const clone: Update<S, A> = {\n          lane: updateLane,\n          action: update.action,\n          eagerReducer: update.eagerReducer,\n          eagerState: update.eagerState,\n          next: (null: any),\n        };\n        if (newBaseQueueLast === null) {\n          newBaseQueueFirst = newBaseQueueLast = clone;\n          newBaseState = newState;\n        } else {\n          newBaseQueueLast = newBaseQueueLast.next = clone;\n        }\n        // Update the remaining priority in the queue.\n        // TODO: Don't need to accumulate this. Instead, we can remove\n        // renderLanes from the original lanes.\n        currentlyRenderingFiber.lanes = mergeLanes(\n          currentlyRenderingFiber.lanes,\n          updateLane,\n        );\n        markSkippedUpdateLanes(updateLane);\n      } else {\n        // This update does have sufficient priority.\n\n        if (newBaseQueueLast !== null) {\n          const clone: Update<S, A> = {\n            // This update is going to be committed so we never want uncommit\n            // it. Using NoLane works because 0 is a subset of all bitmasks, so\n            // this will never be skipped by the check above.\n            lane: NoLane,\n            action: update.action,\n            eagerReducer: update.eagerReducer,\n            eagerState: update.eagerState,\n            next: (null: any),\n          };\n          newBaseQueueLast = newBaseQueueLast.next = clone;\n        }\n\n        // Process this update.\n        if (update.eagerReducer === reducer) {\n          // If this update was processed eagerly, and its reducer matches the\n          // current reducer, we can use the eagerly computed state.\n          newState = ((update.eagerState: any): S);\n        } else {\n          const action = update.action;\n          newState = reducer(newState, action);\n        }\n      }\n      update = update.next;\n    } while (update !== null && update !== first);\n\n    if (newBaseQueueLast === null) {\n      newBaseState = newState;\n    } else {\n      newBaseQueueLast.next = (newBaseQueueFirst: any);\n    }\n\n    // Mark that the fiber performed work, but only if the new state is\n    // different from the current state.\n    if (!is(newState, hook.memoizedState)) {\n      markWorkInProgressReceivedUpdate();\n    }\n\n    hook.memoizedState = newState;\n    hook.baseState = newBaseState;\n    hook.baseQueue = newBaseQueueLast;\n\n    queue.lastRenderedState = newState;\n  }\n\n  // Interleaved updates are stored on a separate queue. We aren't going to\n  // process them during this render, but we do need to track which lanes\n  // are remaining.\n  const lastInterleaved = queue.interleaved;\n  if (lastInterleaved !== null) {\n    let interleaved = lastInterleaved;\n    do {\n      const interleavedLane = interleaved.lane;\n      currentlyRenderingFiber.lanes = mergeLanes(\n        currentlyRenderingFiber.lanes,\n        interleavedLane,\n      );\n      markSkippedUpdateLanes(interleavedLane);\n      interleaved = ((interleaved: any).next: Update<S, A>);\n    } while (interleaved !== lastInterleaved);\n  } else if (baseQueue === null) {\n    // `queue.lanes` is used for entangling transitions. We can set it back to\n    // zero once the queue is empty.\n    queue.lanes = NoLanes;\n  }\n\n  const dispatch: Dispatch<A> = (queue.dispatch: any);\n  return [hook.memoizedState, dispatch];\n}\n\nfunction rerenderReducer<S, I, A>(\n  reducer: (S, A) => S,\n  initialArg: I,\n  init?: I => S,\n): [S, Dispatch<A>] {\n  const hook = updateWorkInProgressHook();\n  const queue = hook.queue;\n  invariant(\n    queue !== null,\n    'Should have a queue. This is likely a bug in React. Please file an issue.',\n  );\n\n  queue.lastRenderedReducer = reducer;\n\n  // This is a re-render. Apply the new render phase updates to the previous\n  // work-in-progress hook.\n  const dispatch: Dispatch<A> = (queue.dispatch: any);\n  const lastRenderPhaseUpdate = queue.pending;\n  let newState = hook.memoizedState;\n  if (lastRenderPhaseUpdate !== null) {\n    // The queue doesn't persist past this render pass.\n    queue.pending = null;\n\n    const firstRenderPhaseUpdate = lastRenderPhaseUpdate.next;\n    let update = firstRenderPhaseUpdate;\n    do {\n      // Process this render phase update. We don't have to check the\n      // priority because it will always be the same as the current\n      // render's.\n      const action = update.action;\n      newState = reducer(newState, action);\n      update = update.next;\n    } while (update !== firstRenderPhaseUpdate);\n\n    // Mark that the fiber performed work, but only if the new state is\n    // different from the current state.\n    if (!is(newState, hook.memoizedState)) {\n      markWorkInProgressReceivedUpdate();\n    }\n\n    hook.memoizedState = newState;\n    // Don't persist the state accumulated from the render phase updates to\n    // the base state unless the queue is empty.\n    // TODO: Not sure if this is the desired semantics, but it's what we\n    // do for gDSFP. I can't remember why.\n    if (hook.baseQueue === null) {\n      hook.baseState = newState;\n    }\n\n    queue.lastRenderedState = newState;\n  }\n  return [newState, dispatch];\n}\n\ntype MutableSourceMemoizedState<Source, Snapshot> = {|\n  refs: {\n    getSnapshot: MutableSourceGetSnapshotFn<Source, Snapshot>,\n    setSnapshot: Snapshot => void,\n  },\n  source: MutableSource<any>,\n  subscribe: MutableSourceSubscribeFn<Source, Snapshot>,\n|};\n\nfunction readFromUnsubscribedMutableSource<Source, Snapshot>(\n  root: FiberRoot,\n  source: MutableSource<Source>,\n  getSnapshot: MutableSourceGetSnapshotFn<Source, Snapshot>,\n): Snapshot {\n  if (__DEV__) {\n    warnAboutMultipleRenderersDEV(source);\n  }\n\n  const getVersion = source._getVersion;\n  const version = getVersion(source._source);\n\n  // Is it safe for this component to read from this source during the current render?\n  let isSafeToReadFromSource = false;\n\n  // Check the version first.\n  // If this render has already been started with a specific version,\n  // we can use it alone to determine if we can safely read from the source.\n  const currentRenderVersion = getWorkInProgressVersion(source);\n  if (currentRenderVersion !== null) {\n    // It's safe to read if the store hasn't been mutated since the last time\n    // we read something.\n    isSafeToReadFromSource = currentRenderVersion === version;\n  } else {\n    // If there's no version, then this is the first time we've read from the\n    // source during the current render pass, so we need to do a bit more work.\n    // What we need to determine is if there are any hooks that already\n    // subscribed to the source, and if so, whether there are any pending\n    // mutations that haven't been synchronized yet.\n    //\n    // If there are no pending mutations, then `root.mutableReadLanes` will be\n    // empty, and we know we can safely read.\n    //\n    // If there *are* pending mutations, we may still be able to safely read\n    // if the currently rendering lanes are inclusive of the pending mutation\n    // lanes, since that guarantees that the value we're about to read from\n    // the source is consistent with the values that we read during the most\n    // recent mutation.\n    isSafeToReadFromSource = isSubsetOfLanes(\n      renderLanes,\n      root.mutableReadLanes,\n    );\n\n    if (isSafeToReadFromSource) {\n      // If it's safe to read from this source during the current render,\n      // store the version in case other components read from it.\n      // A changed version number will let those components know to throw and restart the render.\n      setWorkInProgressVersion(source, version);\n    }\n  }\n\n  if (isSafeToReadFromSource) {\n    const snapshot = getSnapshot(source._source);\n    if (__DEV__) {\n      if (typeof snapshot === 'function') {\n        console.error(\n          'Mutable source should not return a function as the snapshot value. ' +\n            'Functions may close over mutable values and cause tearing.',\n        );\n      }\n    }\n    return snapshot;\n  } else {\n    // This handles the special case of a mutable source being shared between renderers.\n    // In that case, if the source is mutated between the first and second renderer,\n    // The second renderer don't know that it needs to reset the WIP version during unwind,\n    // (because the hook only marks sources as dirty if it's written to their WIP version).\n    // That would cause this tear check to throw again and eventually be visible to the user.\n    // We can avoid this infinite loop by explicitly marking the source as dirty.\n    //\n    // This can lead to tearing in the first renderer when it resumes,\n    // but there's nothing we can do about that (short of throwing here and refusing to continue the render).\n    markSourceAsDirty(source);\n\n    // Intentioally throw an error to force React to retry synchronously. During\n    // the synchronous retry, it will block interleaved mutations, so we should\n    // get a consistent read. Therefore, the following error should never be\n    // visible to the user.\n    //\n    // If it were to become visible to the user, it suggests one of two things:\n    // a bug in React, or (more likely), a mutation during the render phase that\n    // caused the second re-render attempt to be different from the first.\n    //\n    // We know it's the second case if the logs are currently disabled. So in\n    // dev, we can present a more accurate error message.\n    if (__DEV__) {\n      // eslint-disable-next-line react-internal/no-production-logging\n      if (getIsStrictModeForDevtools()) {\n        // If getIsStrictModeForDevtools is true, this is the dev-only double render\n        // This is only reachable if there was a mutation during render. Show a helpful\n        // error message.\n        //\n        // Something interesting to note: because we only double render in\n        // development, this error will never happen during production. This is\n        // actually true of all errors that occur during a double render,\n        // because if the first render had thrown, we would have exited the\n        // begin phase without double rendering. We should consider suppressing\n        // any error from a double render (with a warning) to more closely match\n        // the production behavior.\n        const componentName = getComponentNameFromFiber(\n          currentlyRenderingFiber,\n        );\n        invariant(\n          false,\n          'A mutable source was mutated while the %s component was rendering. ' +\n            'This is not supported. Move any mutations into event handlers ' +\n            'or effects.',\n          componentName,\n        );\n      }\n    }\n\n    // We expect this error not to be thrown during the synchronous retry,\n    // because we blocked interleaved mutations.\n    invariant(\n      false,\n      'Cannot read from mutable source during the current render without tearing. This may be a bug in React. Please file an issue.',\n    );\n  }\n}\n\nfunction useMutableSource<Source, Snapshot>(\n  hook: Hook,\n  source: MutableSource<Source>,\n  getSnapshot: MutableSourceGetSnapshotFn<Source, Snapshot>,\n  subscribe: MutableSourceSubscribeFn<Source, Snapshot>,\n): Snapshot {\n  const root = ((getWorkInProgressRoot(): any): FiberRoot);\n  invariant(\n    root !== null,\n    'Expected a work-in-progress root. This is a bug in React. Please file an issue.',\n  );\n\n  const getVersion = source._getVersion;\n  const version = getVersion(source._source);\n\n  const dispatcher = ReactCurrentDispatcher.current;\n\n  // eslint-disable-next-line prefer-const\n  let [currentSnapshot, setSnapshot] = dispatcher.useState(() =>\n    readFromUnsubscribedMutableSource(root, source, getSnapshot),\n  );\n  let snapshot = currentSnapshot;\n\n  // Grab a handle to the state hook as well.\n  // We use it to clear the pending update queue if we have a new source.\n  const stateHook = ((workInProgressHook: any): Hook);\n\n  const memoizedState = ((hook.memoizedState: any): MutableSourceMemoizedState<\n    Source,\n    Snapshot,\n  >);\n  const refs = memoizedState.refs;\n  const prevGetSnapshot = refs.getSnapshot;\n  const prevSource = memoizedState.source;\n  const prevSubscribe = memoizedState.subscribe;\n\n  const fiber = currentlyRenderingFiber;\n\n  hook.memoizedState = ({\n    refs,\n    source,\n    subscribe,\n  }: MutableSourceMemoizedState<Source, Snapshot>);\n\n  // Sync the values needed by our subscription handler after each commit.\n  dispatcher.useEffect(() => {\n    refs.getSnapshot = getSnapshot;\n\n    // Normally the dispatch function for a state hook never changes,\n    // but this hook recreates the queue in certain cases  to avoid updates from stale sources.\n    // handleChange() below needs to reference the dispatch function without re-subscribing,\n    // so we use a ref to ensure that it always has the latest version.\n    refs.setSnapshot = setSnapshot;\n\n    // Check for a possible change between when we last rendered now.\n    const maybeNewVersion = getVersion(source._source);\n    if (!is(version, maybeNewVersion)) {\n      const maybeNewSnapshot = getSnapshot(source._source);\n      if (__DEV__) {\n        if (typeof maybeNewSnapshot === 'function') {\n          console.error(\n            'Mutable source should not return a function as the snapshot value. ' +\n              'Functions may close over mutable values and cause tearing.',\n          );\n        }\n      }\n\n      if (!is(snapshot, maybeNewSnapshot)) {\n        setSnapshot(maybeNewSnapshot);\n\n        const lane = requestUpdateLane(fiber);\n        markRootMutableRead(root, lane);\n      }\n      // If the source mutated between render and now,\n      // there may be state updates already scheduled from the old source.\n      // Entangle the updates so that they render in the same batch.\n      markRootEntangled(root, root.mutableReadLanes);\n    }\n  }, [getSnapshot, source, subscribe]);\n\n  // If we got a new source or subscribe function, re-subscribe in a passive effect.\n  dispatcher.useEffect(() => {\n    const handleChange = () => {\n      const latestGetSnapshot = refs.getSnapshot;\n      const latestSetSnapshot = refs.setSnapshot;\n\n      try {\n        latestSetSnapshot(latestGetSnapshot(source._source));\n\n        // Record a pending mutable source update with the same expiration time.\n        const lane = requestUpdateLane(fiber);\n\n        markRootMutableRead(root, lane);\n      } catch (error) {\n        // A selector might throw after a source mutation.\n        // e.g. it might try to read from a part of the store that no longer exists.\n        // In this case we should still schedule an update with React.\n        // Worst case the selector will throw again and then an error boundary will handle it.\n        latestSetSnapshot(\n          (() => {\n            throw error;\n          }: any),\n        );\n      }\n    };\n\n    const unsubscribe = subscribe(source._source, handleChange);\n    if (__DEV__) {\n      if (typeof unsubscribe !== 'function') {\n        console.error(\n          'Mutable source subscribe function must return an unsubscribe function.',\n        );\n      }\n    }\n\n    return unsubscribe;\n  }, [source, subscribe]);\n\n  // If any of the inputs to useMutableSource change, reading is potentially unsafe.\n  //\n  // If either the source or the subscription have changed we can't can't trust the update queue.\n  // Maybe the source changed in a way that the old subscription ignored but the new one depends on.\n  //\n  // If the getSnapshot function changed, we also shouldn't rely on the update queue.\n  // It's possible that the underlying source was mutated between the when the last \"change\" event fired,\n  // and when the current render (with the new getSnapshot function) is processed.\n  //\n  // In both cases, we need to throw away pending updates (since they are no longer relevant)\n  // and treat reading from the source as we do in the mount case.\n  if (\n    !is(prevGetSnapshot, getSnapshot) ||\n    !is(prevSource, source) ||\n    !is(prevSubscribe, subscribe)\n  ) {\n    // Create a new queue and setState method,\n    // So if there are interleaved updates, they get pushed to the older queue.\n    // When this becomes current, the previous queue and dispatch method will be discarded,\n    // including any interleaving updates that occur.\n    const newQueue: UpdateQueue<Snapshot, BasicStateAction<Snapshot>> = {\n      pending: null,\n      interleaved: null,\n      lanes: NoLanes,\n      dispatch: null,\n      lastRenderedReducer: basicStateReducer,\n      lastRenderedState: snapshot,\n    };\n    newQueue.dispatch = setSnapshot = (dispatchAction.bind(\n      null,\n      currentlyRenderingFiber,\n      newQueue,\n    ): any);\n    stateHook.queue = newQueue;\n    stateHook.baseQueue = null;\n    snapshot = readFromUnsubscribedMutableSource(root, source, getSnapshot);\n    stateHook.memoizedState = stateHook.baseState = snapshot;\n  }\n\n  return snapshot;\n}\n\nfunction mountMutableSource<Source, Snapshot>(\n  source: MutableSource<Source>,\n  getSnapshot: MutableSourceGetSnapshotFn<Source, Snapshot>,\n  subscribe: MutableSourceSubscribeFn<Source, Snapshot>,\n): Snapshot {\n  const hook = mountWorkInProgressHook();\n  hook.memoizedState = ({\n    refs: {\n      getSnapshot,\n      setSnapshot: (null: any),\n    },\n    source,\n    subscribe,\n  }: MutableSourceMemoizedState<Source, Snapshot>);\n  return useMutableSource(hook, source, getSnapshot, subscribe);\n}\n\nfunction updateMutableSource<Source, Snapshot>(\n  source: MutableSource<Source>,\n  getSnapshot: MutableSourceGetSnapshotFn<Source, Snapshot>,\n  subscribe: MutableSourceSubscribeFn<Source, Snapshot>,\n): Snapshot {\n  const hook = updateWorkInProgressHook();\n  return useMutableSource(hook, source, getSnapshot, subscribe);\n}\n\nfunction mountSyncExternalStore<T>(\n  subscribe: (() => void) => () => void,\n  getSnapshot: () => T,\n): T {\n  const hook = mountWorkInProgressHook();\n  // Read the current snapshot from the store on every render. This breaks the\n  // normal rules of React, and only works because store updates are\n  // always synchronous.\n  const nextSnapshot = getSnapshot();\n  if (__DEV__) {\n    if (!didWarnUncachedGetSnapshot) {\n      if (nextSnapshot !== getSnapshot()) {\n        console.error(\n          'The result of getSnapshot should be cached to avoid an infinite loop',\n        );\n        didWarnUncachedGetSnapshot = true;\n      }\n    }\n  }\n  hook.memoizedState = nextSnapshot;\n  const inst: StoreInstance<T> = {\n    value: nextSnapshot,\n    getSnapshot,\n  };\n  hook.queue = inst;\n  return useSyncExternalStore(hook, inst, subscribe, getSnapshot, nextSnapshot);\n}\n\nfunction updateSyncExternalStore<T>(\n  subscribe: (() => void) => () => void,\n  getSnapshot: () => T,\n): T {\n  const hook = updateWorkInProgressHook();\n  // Read the current snapshot from the store on every render. This breaks the\n  // normal rules of React, and only works because store updates are\n  // always synchronous.\n  const nextSnapshot = getSnapshot();\n  if (__DEV__) {\n    if (!didWarnUncachedGetSnapshot) {\n      if (nextSnapshot !== getSnapshot()) {\n        console.error(\n          'The result of getSnapshot should be cached to avoid an infinite loop',\n        );\n        didWarnUncachedGetSnapshot = true;\n      }\n    }\n  }\n  const prevSnapshot = hook.memoizedState;\n  if (!is(prevSnapshot, nextSnapshot)) {\n    hook.memoizedState = nextSnapshot;\n    markWorkInProgressReceivedUpdate();\n  }\n  const inst = hook.queue;\n  return useSyncExternalStore(hook, inst, subscribe, getSnapshot, nextSnapshot);\n}\n\nfunction useSyncExternalStore<T>(\n  hook: Hook,\n  inst: StoreInstance<T>,\n  subscribe: (() => void) => () => void,\n  getSnapshot: () => T,\n  nextSnapshot: T,\n): T {\n  const fiber = currentlyRenderingFiber;\n  const dispatcher = ReactCurrentDispatcher.current;\n\n  // Track the latest getSnapshot function with a ref. This needs to be updated\n  // in the layout phase so we can access it during the tearing check that\n  // happens on subscribe.\n  // TODO: Circumvent SSR warning\n  dispatcher.useLayoutEffect(() => {\n    inst.value = nextSnapshot;\n    inst.getSnapshot = getSnapshot;\n\n    // Whenever getSnapshot or subscribe changes, we need to check in the\n    // commit phase if there was an interleaved mutation. In concurrent mode\n    // this can happen all the time, but even in synchronous mode, an earlier\n    // effect may have mutated the store.\n    // TODO: Move the tearing checks to an earlier, pre-commit phase so that the\n    // layout effects always observe a consistent tree.\n    if (checkIfSnapshotChanged(inst)) {\n      // Force a re-render.\n      forceStoreRerender(fiber);\n    }\n  }, [subscribe, nextSnapshot, getSnapshot]);\n\n  dispatcher.useEffect(() => {\n    const handleStoreChange = () => {\n      // TODO: Because there is no cross-renderer API for batching updates, it's\n      // up to the consumer of this library to wrap their subscription event\n      // with unstable_batchedUpdates. Should we try to detect when this isn't\n      // the case and print a warning in development?\n\n      // The store changed. Check if the snapshot changed since the last time we\n      // read from the store.\n      if (checkIfSnapshotChanged(inst)) {\n        // Force a re-render.\n        forceStoreRerender(fiber);\n      }\n    };\n    // Check for changes right before subscribing. Subsequent changes will be\n    // detected in the subscription handler.\n    handleStoreChange();\n    // Subscribe to the store and return a clean-up function.\n    return subscribe(handleStoreChange);\n  }, [subscribe]);\n\n  return nextSnapshot;\n}\n\nfunction checkIfSnapshotChanged(inst) {\n  const latestGetSnapshot = inst.getSnapshot;\n  const prevValue = inst.value;\n  try {\n    const nextValue = latestGetSnapshot();\n    return !is(prevValue, nextValue);\n  } catch (error) {\n    return true;\n  }\n}\n\nfunction forceStoreRerender(fiber) {\n  scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);\n}\n\nfunction mountState<S>(\n  initialState: (() => S) | S,\n): [S, Dispatch<BasicStateAction<S>>] {\n  const hook = mountWorkInProgressHook();\n  if (typeof initialState === 'function') {\n    // $FlowFixMe: Flow doesn't like mixed types\n    initialState = initialState();\n  }\n  hook.memoizedState = hook.baseState = initialState;\n  const queue: UpdateQueue<S, BasicStateAction<S>> = {\n    pending: null,\n    interleaved: null,\n    lanes: NoLanes,\n    dispatch: null,\n    lastRenderedReducer: basicStateReducer,\n    lastRenderedState: (initialState: any),\n  };\n  hook.queue = queue;\n  const dispatch: Dispatch<\n    BasicStateAction<S>,\n  > = (queue.dispatch = (dispatchAction.bind(\n    null,\n    currentlyRenderingFiber,\n    queue,\n  ): any));\n  return [hook.memoizedState, dispatch];\n}\n\nfunction updateState<S>(\n  initialState: (() => S) | S,\n): [S, Dispatch<BasicStateAction<S>>] {\n  return updateReducer(basicStateReducer, (initialState: any));\n}\n\nfunction rerenderState<S>(\n  initialState: (() => S) | S,\n): [S, Dispatch<BasicStateAction<S>>] {\n  return rerenderReducer(basicStateReducer, (initialState: any));\n}\n\nfunction pushEffect(tag, create, destroy, deps) {\n  const effect: Effect = {\n    tag,\n    create,\n    destroy,\n    deps,\n    // Circular\n    next: (null: any),\n  };\n  let componentUpdateQueue: null | FunctionComponentUpdateQueue = (currentlyRenderingFiber.updateQueue: any);\n  if (componentUpdateQueue === null) {\n    componentUpdateQueue = createFunctionComponentUpdateQueue();\n    currentlyRenderingFiber.updateQueue = (componentUpdateQueue: any);\n    componentUpdateQueue.lastEffect = effect.next = effect;\n  } else {\n    const lastEffect = componentUpdateQueue.lastEffect;\n    if (lastEffect === null) {\n      componentUpdateQueue.lastEffect = effect.next = effect;\n    } else {\n      const firstEffect = lastEffect.next;\n      lastEffect.next = effect;\n      effect.next = firstEffect;\n      componentUpdateQueue.lastEffect = effect;\n    }\n  }\n  return effect;\n}\n\nlet stackContainsErrorMessage: boolean | null = null;\n\nfunction getCallerStackFrame(): string {\n  const stackFrames = new Error('Error message').stack.split('\\n');\n\n  // Some browsers (e.g. Chrome) include the error message in the stack\n  // but others (e.g. Firefox) do not.\n  if (stackContainsErrorMessage === null) {\n    stackContainsErrorMessage = stackFrames[0].includes('Error message');\n  }\n\n  return stackContainsErrorMessage\n    ? stackFrames.slice(3, 4).join('\\n')\n    : stackFrames.slice(2, 3).join('\\n');\n}\n\nfunction mountRef<T>(initialValue: T): {|current: T|} {\n  const hook = mountWorkInProgressHook();\n  if (enableUseRefAccessWarning) {\n    if (__DEV__) {\n      // Support lazy initialization pattern shown in docs.\n      // We need to store the caller stack frame so that we don't warn on subsequent renders.\n      let hasBeenInitialized = initialValue != null;\n      let lazyInitGetterStack = null;\n      let didCheckForLazyInit = false;\n\n      // Only warn once per component+hook.\n      let didWarnAboutRead = false;\n      let didWarnAboutWrite = false;\n\n      let current = initialValue;\n      const ref = {\n        get current() {\n          if (!hasBeenInitialized) {\n            didCheckForLazyInit = true;\n            lazyInitGetterStack = getCallerStackFrame();\n          } else if (currentlyRenderingFiber !== null && !didWarnAboutRead) {\n            if (\n              lazyInitGetterStack === null ||\n              lazyInitGetterStack !== getCallerStackFrame()\n            ) {\n              didWarnAboutRead = true;\n              console.warn(\n                '%s: Unsafe read of a mutable value during render.\\n\\n' +\n                  'Reading from a ref during render is only safe if:\\n' +\n                  '1. The ref value has not been updated, or\\n' +\n                  '2. The ref holds a lazily-initialized value that is only set once.\\n',\n                getComponentNameFromFiber(currentlyRenderingFiber) || 'Unknown',\n              );\n            }\n          }\n          return current;\n        },\n        set current(value) {\n          if (currentlyRenderingFiber !== null && !didWarnAboutWrite) {\n            if (\n              hasBeenInitialized ||\n              (!hasBeenInitialized && !didCheckForLazyInit)\n            ) {\n              didWarnAboutWrite = true;\n              console.warn(\n                '%s: Unsafe write of a mutable value during render.\\n\\n' +\n                  'Writing to a ref during render is only safe if the ref holds ' +\n                  'a lazily-initialized value that is only set once.\\n',\n                getComponentNameFromFiber(currentlyRenderingFiber) || 'Unknown',\n              );\n            }\n          }\n\n          hasBeenInitialized = true;\n          current = value;\n        },\n      };\n      Object.seal(ref);\n      hook.memoizedState = ref;\n      return ref;\n    } else {\n      const ref = {current: initialValue};\n      hook.memoizedState = ref;\n      return ref;\n    }\n  } else {\n    const ref = {current: initialValue};\n    hook.memoizedState = ref;\n    return ref;\n  }\n}\n\nfunction updateRef<T>(initialValue: T): {|current: T|} {\n  const hook = updateWorkInProgressHook();\n  return hook.memoizedState;\n}\n\nfunction mountEffectImpl(fiberFlags, hookFlags, create, deps): void {\n  const hook = mountWorkInProgressHook();\n  const nextDeps = deps === undefined ? null : deps;\n  currentlyRenderingFiber.flags |= fiberFlags;\n  hook.memoizedState = pushEffect(\n    HookHasEffect | hookFlags,\n    create,\n    undefined,\n    nextDeps,\n  );\n}\n\nfunction updateEffectImpl(fiberFlags, hookFlags, create, deps): void {\n  const hook = updateWorkInProgressHook();\n  const nextDeps = deps === undefined ? null : deps;\n  let destroy = undefined;\n\n  if (currentHook !== null) {\n    const prevEffect = currentHook.memoizedState;\n    destroy = prevEffect.destroy;\n    if (nextDeps !== null) {\n      const prevDeps = prevEffect.deps;\n      if (areHookInputsEqual(nextDeps, prevDeps)) {\n        hook.memoizedState = pushEffect(hookFlags, create, destroy, nextDeps);\n        return;\n      }\n    }\n  }\n\n  currentlyRenderingFiber.flags |= fiberFlags;\n\n  hook.memoizedState = pushEffect(\n    HookHasEffect | hookFlags,\n    create,\n    destroy,\n    nextDeps,\n  );\n}\n\nfunction mountEffect(\n  create: () => (() => void) | void,\n  deps: Array<mixed> | void | null,\n): void {\n  if (__DEV__) {\n    // $FlowExpectedError - jest isn't a global, and isn't recognized outside of tests\n    if ('undefined' !== typeof jest) {\n      warnIfNotCurrentlyActingEffectsInDEV(currentlyRenderingFiber);\n    }\n  }\n  if (\n    __DEV__ &&\n    enableStrictEffects &&\n    (currentlyRenderingFiber.mode & StrictEffectsMode) !== NoMode\n  ) {\n    return mountEffectImpl(\n      MountPassiveDevEffect | PassiveEffect | PassiveStaticEffect,\n      HookPassive,\n      create,\n      deps,\n    );\n  } else {\n    return mountEffectImpl(\n      PassiveEffect | PassiveStaticEffect,\n      HookPassive,\n      create,\n      deps,\n    );\n  }\n}\n\nfunction updateEffect(\n  create: () => (() => void) | void,\n  deps: Array<mixed> | void | null,\n): void {\n  if (__DEV__) {\n    // $FlowExpectedError - jest isn't a global, and isn't recognized outside of tests\n    if ('undefined' !== typeof jest) {\n      warnIfNotCurrentlyActingEffectsInDEV(currentlyRenderingFiber);\n    }\n  }\n  return updateEffectImpl(PassiveEffect, HookPassive, create, deps);\n}\n\nfunction mountLayoutEffect(\n  create: () => (() => void) | void,\n  deps: Array<mixed> | void | null,\n): void {\n  let fiberFlags: Flags = UpdateEffect;\n  if (enableSuspenseLayoutEffectSemantics) {\n    fiberFlags |= LayoutStaticEffect;\n  }\n  if (\n    __DEV__ &&\n    enableStrictEffects &&\n    (currentlyRenderingFiber.mode & StrictEffectsMode) !== NoMode\n  ) {\n    fiberFlags |= MountLayoutDevEffect;\n  }\n  return mountEffectImpl(fiberFlags, HookLayout, create, deps);\n}\n\nfunction updateLayoutEffect(\n  create: () => (() => void) | void,\n  deps: Array<mixed> | void | null,\n): void {\n  return updateEffectImpl(UpdateEffect, HookLayout, create, deps);\n}\n\nfunction imperativeHandleEffect<T>(\n  create: () => T,\n  ref: {|current: T | null|} | ((inst: T | null) => mixed) | null | void,\n) {\n  if (typeof ref === 'function') {\n    const refCallback = ref;\n    const inst = create();\n    refCallback(inst);\n    return () => {\n      refCallback(null);\n    };\n  } else if (ref !== null && ref !== undefined) {\n    const refObject = ref;\n    if (__DEV__) {\n      if (!refObject.hasOwnProperty('current')) {\n        console.error(\n          'Expected useImperativeHandle() first argument to either be a ' +\n            'ref callback or React.createRef() object. Instead received: %s.',\n          'an object with keys {' + Object.keys(refObject).join(', ') + '}',\n        );\n      }\n    }\n    const inst = create();\n    refObject.current = inst;\n    return () => {\n      refObject.current = null;\n    };\n  }\n}\n\nfunction mountImperativeHandle<T>(\n  ref: {|current: T | null|} | ((inst: T | null) => mixed) | null | void,\n  create: () => T,\n  deps: Array<mixed> | void | null,\n): void {\n  if (__DEV__) {\n    if (typeof create !== 'function') {\n      console.error(\n        'Expected useImperativeHandle() second argument to be a function ' +\n          'that creates a handle. Instead received: %s.',\n        create !== null ? typeof create : 'null',\n      );\n    }\n  }\n\n  // TODO: If deps are provided, should we skip comparing the ref itself?\n  const effectDeps =\n    deps !== null && deps !== undefined ? deps.concat([ref]) : null;\n\n  let fiberFlags: Flags = UpdateEffect;\n  if (enableSuspenseLayoutEffectSemantics) {\n    fiberFlags |= LayoutStaticEffect;\n  }\n  if (\n    __DEV__ &&\n    enableStrictEffects &&\n    (currentlyRenderingFiber.mode & StrictEffectsMode) !== NoMode\n  ) {\n    fiberFlags |= MountLayoutDevEffect;\n  }\n  return mountEffectImpl(\n    fiberFlags,\n    HookLayout,\n    imperativeHandleEffect.bind(null, create, ref),\n    effectDeps,\n  );\n}\n\nfunction updateImperativeHandle<T>(\n  ref: {|current: T | null|} | ((inst: T | null) => mixed) | null | void,\n  create: () => T,\n  deps: Array<mixed> | void | null,\n): void {\n  if (__DEV__) {\n    if (typeof create !== 'function') {\n      console.error(\n        'Expected useImperativeHandle() second argument to be a function ' +\n          'that creates a handle. Instead received: %s.',\n        create !== null ? typeof create : 'null',\n      );\n    }\n  }\n\n  // TODO: If deps are provided, should we skip comparing the ref itself?\n  const effectDeps =\n    deps !== null && deps !== undefined ? deps.concat([ref]) : null;\n\n  return updateEffectImpl(\n    UpdateEffect,\n    HookLayout,\n    imperativeHandleEffect.bind(null, create, ref),\n    effectDeps,\n  );\n}\n\nfunction mountDebugValue<T>(value: T, formatterFn: ?(value: T) => mixed): void {\n  // This hook is normally a no-op.\n  // The react-debug-hooks package injects its own implementation\n  // so that e.g. DevTools can display custom hook values.\n}\n\nconst updateDebugValue = mountDebugValue;\n\nfunction mountCallback<T>(callback: T, deps: Array<mixed> | void | null): T {\n  const hook = mountWorkInProgressHook();\n  const nextDeps = deps === undefined ? null : deps;\n  hook.memoizedState = [callback, nextDeps];\n  return callback;\n}\n\nfunction updateCallback<T>(callback: T, deps: Array<mixed> | void | null): T {\n  const hook = updateWorkInProgressHook();\n  const nextDeps = deps === undefined ? null : deps;\n  const prevState = hook.memoizedState;\n  if (prevState !== null) {\n    if (nextDeps !== null) {\n      const prevDeps: Array<mixed> | null = prevState[1];\n      if (areHookInputsEqual(nextDeps, prevDeps)) {\n        return prevState[0];\n      }\n    }\n  }\n  hook.memoizedState = [callback, nextDeps];\n  return callback;\n}\n\nfunction mountMemo<T>(\n  nextCreate: () => T,\n  deps: Array<mixed> | void | null,\n): T {\n  const hook = mountWorkInProgressHook();\n  const nextDeps = deps === undefined ? null : deps;\n  const nextValue = nextCreate();\n  hook.memoizedState = [nextValue, nextDeps];\n  return nextValue;\n}\n\nfunction updateMemo<T>(\n  nextCreate: () => T,\n  deps: Array<mixed> | void | null,\n): T {\n  const hook = updateWorkInProgressHook();\n  const nextDeps = deps === undefined ? null : deps;\n  const prevState = hook.memoizedState;\n  if (prevState !== null) {\n    // Assume these are defined. If they're not, areHookInputsEqual will warn.\n    if (nextDeps !== null) {\n      const prevDeps: Array<mixed> | null = prevState[1];\n      if (areHookInputsEqual(nextDeps, prevDeps)) {\n        return prevState[0];\n      }\n    }\n  }\n  const nextValue = nextCreate();\n  hook.memoizedState = [nextValue, nextDeps];\n  return nextValue;\n}\n\nfunction mountDeferredValue<T>(value: T): T {\n  const [prevValue, setValue] = mountState(value);\n  mountEffect(() => {\n    const prevTransition = ReactCurrentBatchConfig.transition;\n    ReactCurrentBatchConfig.transition = 1;\n    try {\n      setValue(value);\n    } finally {\n      ReactCurrentBatchConfig.transition = prevTransition;\n    }\n  }, [value]);\n  return prevValue;\n}\n\nfunction updateDeferredValue<T>(value: T): T {\n  const [prevValue, setValue] = updateState(value);\n  updateEffect(() => {\n    const prevTransition = ReactCurrentBatchConfig.transition;\n    ReactCurrentBatchConfig.transition = 1;\n    try {\n      setValue(value);\n    } finally {\n      ReactCurrentBatchConfig.transition = prevTransition;\n    }\n  }, [value]);\n  return prevValue;\n}\n\nfunction rerenderDeferredValue<T>(value: T): T {\n  const [prevValue, setValue] = rerenderState(value);\n  updateEffect(() => {\n    const prevTransition = ReactCurrentBatchConfig.transition;\n    ReactCurrentBatchConfig.transition = 1;\n    try {\n      setValue(value);\n    } finally {\n      ReactCurrentBatchConfig.transition = prevTransition;\n    }\n  }, [value]);\n  return prevValue;\n}\n\nfunction startTransition(setPending, callback) {\n  const previousPriority = getCurrentUpdatePriority();\n  setCurrentUpdatePriority(\n    higherEventPriority(previousPriority, ContinuousEventPriority),\n  );\n\n  setPending(true);\n\n  const prevTransition = ReactCurrentBatchConfig.transition;\n  ReactCurrentBatchConfig.transition = 1;\n  try {\n    setPending(false);\n    callback();\n  } finally {\n    setCurrentUpdatePriority(previousPriority);\n    ReactCurrentBatchConfig.transition = prevTransition;\n    if (__DEV__) {\n      if (\n        prevTransition !== 1 &&\n        warnOnSubscriptionInsideStartTransition &&\n        ReactCurrentBatchConfig._updatedFibers\n      ) {\n        const updatedFibersCount = ReactCurrentBatchConfig._updatedFibers.size;\n        if (updatedFibersCount > 10) {\n          console.warn(\n            'Detected a large number of updates inside startTransition. ' +\n              'If this is due to a subscription please re-write it to use React provided hooks. ' +\n              'Otherwise concurrent mode guarantees are off the table.',\n          );\n        }\n        ReactCurrentBatchConfig._updatedFibers.clear();\n      }\n    }\n  }\n}\n\nfunction mountTransition(): [boolean, (() => void) => void] {\n  const [isPending, setPending] = mountState(false);\n  // The `start` method never changes.\n  const start = startTransition.bind(null, setPending);\n  const hook = mountWorkInProgressHook();\n  hook.memoizedState = start;\n  return [isPending, start];\n}\n\nfunction updateTransition(): [boolean, (() => void) => void] {\n  const [isPending] = updateState(false);\n  const hook = updateWorkInProgressHook();\n  const start = hook.memoizedState;\n  return [isPending, start];\n}\n\nfunction rerenderTransition(): [boolean, (() => void) => void] {\n  const [isPending] = rerenderState(false);\n  const hook = updateWorkInProgressHook();\n  const start = hook.memoizedState;\n  return [isPending, start];\n}\n\nlet isUpdatingOpaqueValueInRenderPhase = false;\nexport function getIsUpdatingOpaqueValueInRenderPhaseInDEV(): boolean | void {\n  if (__DEV__) {\n    return isUpdatingOpaqueValueInRenderPhase;\n  }\n}\n\nfunction warnOnOpaqueIdentifierAccessInDEV(fiber) {\n  if (__DEV__) {\n    // TODO: Should warn in effects and callbacks, too\n    const name = getComponentNameFromFiber(fiber) || 'Unknown';\n    if (getIsRendering() && !didWarnAboutUseOpaqueIdentifier[name]) {\n      console.error(\n        'The object passed back from useOpaqueIdentifier is meant to be ' +\n          'passed through to attributes only. Do not read the ' +\n          'value directly.',\n      );\n      didWarnAboutUseOpaqueIdentifier[name] = true;\n    }\n  }\n}\n\nfunction mountOpaqueIdentifier(): OpaqueIDType | void {\n  const makeId = __DEV__\n    ? makeClientIdInDEV.bind(\n        null,\n        warnOnOpaqueIdentifierAccessInDEV.bind(null, currentlyRenderingFiber),\n      )\n    : makeClientId;\n\n  if (getIsHydrating()) {\n    let didUpgrade = false;\n    const fiber = currentlyRenderingFiber;\n    const readValue = () => {\n      if (!didUpgrade) {\n        // Only upgrade once. This works even inside the render phase because\n        // the update is added to a shared queue, which outlasts the\n        // in-progress render.\n        didUpgrade = true;\n        if (__DEV__) {\n          isUpdatingOpaqueValueInRenderPhase = true;\n          setId(makeId());\n          isUpdatingOpaqueValueInRenderPhase = false;\n          warnOnOpaqueIdentifierAccessInDEV(fiber);\n        } else {\n          setId(makeId());\n        }\n      }\n      invariant(\n        false,\n        'The object passed back from useOpaqueIdentifier is meant to be ' +\n          'passed through to attributes only. Do not read the value directly.',\n      );\n    };\n    const id = makeOpaqueHydratingObject(readValue);\n\n    const setId = mountState(id)[1];\n\n    if ((currentlyRenderingFiber.mode & ConcurrentMode) === NoMode) {\n      if (\n        __DEV__ &&\n        enableStrictEffects &&\n        (currentlyRenderingFiber.mode & StrictEffectsMode) === NoMode\n      ) {\n        currentlyRenderingFiber.flags |= MountPassiveDevEffect | PassiveEffect;\n      } else {\n        currentlyRenderingFiber.flags |= PassiveEffect;\n      }\n      pushEffect(\n        HookHasEffect | HookPassive,\n        () => {\n          setId(makeId());\n        },\n        undefined,\n        null,\n      );\n    }\n    return id;\n  } else {\n    const id = makeId();\n    mountState(id);\n    return id;\n  }\n}\n\nfunction updateOpaqueIdentifier(): OpaqueIDType | void {\n  const id = updateState(undefined)[0];\n  return id;\n}\n\nfunction rerenderOpaqueIdentifier(): OpaqueIDType | void {\n  const id = rerenderState(undefined)[0];\n  return id;\n}\n\nfunction mountRefresh() {\n  const hook = mountWorkInProgressHook();\n  const refresh = (hook.memoizedState = refreshCache.bind(\n    null,\n    currentlyRenderingFiber,\n  ));\n  return refresh;\n}\n\nfunction updateRefresh() {\n  const hook = updateWorkInProgressHook();\n  return hook.memoizedState;\n}\n\nfunction refreshCache<T>(fiber: Fiber, seedKey: ?() => T, seedValue: T) {\n  // TODO: Does Cache work in legacy mode? Should decide and write a test.\n  // TODO: Consider warning if the refresh is at discrete priority, or if we\n  // otherwise suspect that it wasn't batched properly.\n  let provider = fiber.return;\n  while (provider !== null) {\n    switch (provider.tag) {\n      case CacheComponent:\n      case HostRoot: {\n        const lane = requestUpdateLane(provider);\n        const eventTime = requestEventTime();\n        const root = scheduleUpdateOnFiber(provider, lane, eventTime);\n        if (root !== null) {\n          entangleTransitions(root, provider, lane);\n        }\n\n        const seededCache = new Map();\n        if (seedKey !== null && seedKey !== undefined && root !== null) {\n          // Seed the cache with the value passed by the caller. This could be\n          // from a server mutation, or it could be a streaming response.\n          seededCache.set(seedKey, seedValue);\n        }\n\n        // Schedule an update on the cache boundary to trigger a refresh.\n        const refreshUpdate = createUpdate(eventTime, lane);\n        const payload = {\n          cache: seededCache,\n        };\n        refreshUpdate.payload = payload;\n        enqueueUpdate(provider, refreshUpdate, lane);\n        return;\n      }\n    }\n    provider = provider.return;\n  }\n  // TODO: Warn if unmounted?\n}\n\nfunction dispatchAction<S, A>(\n  fiber: Fiber,\n  queue: UpdateQueue<S, A>,\n  action: A,\n) {\n  if (__DEV__) {\n    if (typeof arguments[3] === 'function') {\n      console.error(\n        \"State updates from the useState() and useReducer() Hooks don't support the \" +\n          'second callback argument. To execute a side effect after ' +\n          'rendering, declare it in the component body with useEffect().',\n      );\n    }\n  }\n\n  const eventTime = requestEventTime();\n  const lane = requestUpdateLane(fiber);\n\n  const update: Update<S, A> = {\n    lane,\n    action,\n    eagerReducer: null,\n    eagerState: null,\n    next: (null: any),\n  };\n\n  const alternate = fiber.alternate;\n  if (\n    fiber === currentlyRenderingFiber ||\n    (alternate !== null && alternate === currentlyRenderingFiber)\n  ) {\n    // This is a render phase update. Stash it in a lazily-created map of\n    // queue -> linked list of updates. After this render pass, we'll restart\n    // and apply the stashed updates on top of the work-in-progress hook.\n    didScheduleRenderPhaseUpdateDuringThisPass = didScheduleRenderPhaseUpdate = true;\n    const pending = queue.pending;\n    if (pending === null) {\n      // This is the first update. Create a circular list.\n      update.next = update;\n    } else {\n      update.next = pending.next;\n      pending.next = update;\n    }\n    queue.pending = update;\n  } else {\n    if (isInterleavedUpdate(fiber, lane)) {\n      const interleaved = queue.interleaved;\n      if (interleaved === null) {\n        // This is the first update. Create a circular list.\n        update.next = update;\n        // At the end of the current render, this queue's interleaved updates will\n        // be transferred to the pending queue.\n        pushInterleavedQueue(queue);\n      } else {\n        update.next = interleaved.next;\n        interleaved.next = update;\n      }\n      queue.interleaved = update;\n    } else {\n      const pending = queue.pending;\n      if (pending === null) {\n        // This is the first update. Create a circular list.\n        update.next = update;\n      } else {\n        update.next = pending.next;\n        pending.next = update;\n      }\n      queue.pending = update;\n    }\n\n    if (\n      fiber.lanes === NoLanes &&\n      (alternate === null || alternate.lanes === NoLanes)\n    ) {\n      // The queue is currently empty, which means we can eagerly compute the\n      // next state before entering the render phase. If the new state is the\n      // same as the current state, we may be able to bail out entirely.\n      const lastRenderedReducer = queue.lastRenderedReducer;\n      if (lastRenderedReducer !== null) {\n        let prevDispatcher;\n        if (__DEV__) {\n          prevDispatcher = ReactCurrentDispatcher.current;\n          ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\n        }\n        try {\n          const currentState: S = (queue.lastRenderedState: any);\n          const eagerState = lastRenderedReducer(currentState, action);\n          // Stash the eagerly computed state, and the reducer used to compute\n          // it, on the update object. If the reducer hasn't changed by the\n          // time we enter the render phase, then the eager state can be used\n          // without calling the reducer again.\n          update.eagerReducer = lastRenderedReducer;\n          update.eagerState = eagerState;\n          if (is(eagerState, currentState)) {\n            // Fast path. We can bail out without scheduling React to re-render.\n            // It's still possible that we'll need to rebase this update later,\n            // if the component re-renders for a different reason and by that\n            // time the reducer has changed.\n            return;\n          }\n        } catch (error) {\n          // Suppress the error. It will throw again in the render phase.\n        } finally {\n          if (__DEV__) {\n            ReactCurrentDispatcher.current = prevDispatcher;\n          }\n        }\n      }\n    }\n    if (__DEV__) {\n      // $FlowExpectedError - jest isn't a global, and isn't recognized outside of tests\n      if ('undefined' !== typeof jest) {\n        warnIfNotCurrentlyActingUpdatesInDev(fiber);\n      }\n    }\n    const root = scheduleUpdateOnFiber(fiber, lane, eventTime);\n\n    if (isTransitionLane(lane) && root !== null) {\n      let queueLanes = queue.lanes;\n\n      // If any entangled lanes are no longer pending on the root, then they\n      // must have finished. We can remove them from the shared queue, which\n      // represents a superset of the actually pending lanes. In some cases we\n      // may entangle more than we need to, but that's OK. In fact it's worse if\n      // we *don't* entangle when we should.\n      queueLanes = intersectLanes(queueLanes, root.pendingLanes);\n\n      // Entangle the new transition lane with the other transition lanes.\n      const newQueueLanes = mergeLanes(queueLanes, lane);\n      queue.lanes = newQueueLanes;\n      // Even if queue.lanes already include lane, we don't know for certain if\n      // the lane finished since the last time we entangled it. So we need to\n      // entangle it again, just to be sure.\n      markRootEntangled(root, newQueueLanes);\n    }\n  }\n\n  if (__DEV__) {\n    if (enableDebugTracing) {\n      if (fiber.mode & DebugTracingMode) {\n        const name = getComponentNameFromFiber(fiber) || 'Unknown';\n        logStateUpdateScheduled(name, lane, action);\n      }\n    }\n  }\n\n  if (enableSchedulingProfiler) {\n    markStateUpdateScheduled(fiber, lane);\n  }\n}\n\nfunction getCacheForType<T>(resourceType: () => T): T {\n  if (!enableCache) {\n    invariant(false, 'Not implemented.');\n  }\n  const cache: Cache = readContext(CacheContext);\n  let cacheForType: T | void = (cache.get(resourceType): any);\n  if (cacheForType === undefined) {\n    cacheForType = resourceType();\n    cache.set(resourceType, cacheForType);\n  }\n  return cacheForType;\n}\n\nexport const ContextOnlyDispatcher: Dispatcher = {\n  readContext,\n\n  useCallback: throwInvalidHookError,\n  useContext: throwInvalidHookError,\n  useEffect: throwInvalidHookError,\n  useImperativeHandle: throwInvalidHookError,\n  useLayoutEffect: throwInvalidHookError,\n  useMemo: throwInvalidHookError,\n  useReducer: throwInvalidHookError,\n  useRef: throwInvalidHookError,\n  useState: throwInvalidHookError,\n  useDebugValue: throwInvalidHookError,\n  useDeferredValue: throwInvalidHookError,\n  useTransition: throwInvalidHookError,\n  useMutableSource: throwInvalidHookError,\n  useSyncExternalStore: throwInvalidHookError,\n  useOpaqueIdentifier: throwInvalidHookError,\n\n  unstable_isNewReconciler: enableNewReconciler,\n};\nif (enableCache) {\n  (ContextOnlyDispatcher: Dispatcher).getCacheForType = getCacheForType;\n  (ContextOnlyDispatcher: Dispatcher).useCacheRefresh = throwInvalidHookError;\n}\n\nconst HooksDispatcherOnMount: Dispatcher = {\n  readContext,\n\n  useCallback: mountCallback,\n  useContext: readContext,\n  useEffect: mountEffect,\n  useImperativeHandle: mountImperativeHandle,\n  useLayoutEffect: mountLayoutEffect,\n  useMemo: mountMemo,\n  useReducer: mountReducer,\n  useRef: mountRef,\n  useState: mountState,\n  useDebugValue: mountDebugValue,\n  useDeferredValue: mountDeferredValue,\n  useTransition: mountTransition,\n  useMutableSource: mountMutableSource,\n  useSyncExternalStore: mountSyncExternalStore,\n  useOpaqueIdentifier: mountOpaqueIdentifier,\n\n  unstable_isNewReconciler: enableNewReconciler,\n};\nif (enableCache) {\n  (HooksDispatcherOnMount: Dispatcher).getCacheForType = getCacheForType;\n  (HooksDispatcherOnMount: Dispatcher).useCacheRefresh = mountRefresh;\n}\n\nconst HooksDispatcherOnUpdate: Dispatcher = {\n  readContext,\n\n  useCallback: updateCallback,\n  useContext: readContext,\n  useEffect: updateEffect,\n  useImperativeHandle: updateImperativeHandle,\n  useLayoutEffect: updateLayoutEffect,\n  useMemo: updateMemo,\n  useReducer: updateReducer,\n  useRef: updateRef,\n  useState: updateState,\n  useDebugValue: updateDebugValue,\n  useDeferredValue: updateDeferredValue,\n  useTransition: updateTransition,\n  useMutableSource: updateMutableSource,\n  useSyncExternalStore: updateSyncExternalStore,\n  useOpaqueIdentifier: updateOpaqueIdentifier,\n\n  unstable_isNewReconciler: enableNewReconciler,\n};\nif (enableCache) {\n  (HooksDispatcherOnUpdate: Dispatcher).getCacheForType = getCacheForType;\n  (HooksDispatcherOnUpdate: Dispatcher).useCacheRefresh = updateRefresh;\n}\n\nconst HooksDispatcherOnRerender: Dispatcher = {\n  readContext,\n\n  useCallback: updateCallback,\n  useContext: readContext,\n  useEffect: updateEffect,\n  useImperativeHandle: updateImperativeHandle,\n  useLayoutEffect: updateLayoutEffect,\n  useMemo: updateMemo,\n  useReducer: rerenderReducer,\n  useRef: updateRef,\n  useState: rerenderState,\n  useDebugValue: updateDebugValue,\n  useDeferredValue: rerenderDeferredValue,\n  useTransition: rerenderTransition,\n  useMutableSource: updateMutableSource,\n  useSyncExternalStore: mountSyncExternalStore,\n  useOpaqueIdentifier: rerenderOpaqueIdentifier,\n\n  unstable_isNewReconciler: enableNewReconciler,\n};\nif (enableCache) {\n  (HooksDispatcherOnRerender: Dispatcher).getCacheForType = getCacheForType;\n  (HooksDispatcherOnRerender: Dispatcher).useCacheRefresh = updateRefresh;\n}\n\nlet HooksDispatcherOnMountInDEV: Dispatcher | null = null;\nlet HooksDispatcherOnMountWithHookTypesInDEV: Dispatcher | null = null;\nlet HooksDispatcherOnUpdateInDEV: Dispatcher | null = null;\nlet HooksDispatcherOnRerenderInDEV: Dispatcher | null = null;\nlet InvalidNestedHooksDispatcherOnMountInDEV: Dispatcher | null = null;\nlet InvalidNestedHooksDispatcherOnUpdateInDEV: Dispatcher | null = null;\nlet InvalidNestedHooksDispatcherOnRerenderInDEV: Dispatcher | null = null;\n\nif (__DEV__) {\n  const warnInvalidContextAccess = () => {\n    console.error(\n      'Context can only be read while React is rendering. ' +\n        'In classes, you can read it in the render method or getDerivedStateFromProps. ' +\n        'In function components, you can read it directly in the function body, but not ' +\n        'inside Hooks like useReducer() or useMemo().',\n    );\n  };\n\n  const warnInvalidHookAccess = () => {\n    console.error(\n      'Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. ' +\n        'You can only call Hooks at the top level of your React function. ' +\n        'For more information, see ' +\n        'https://reactjs.org/link/rules-of-hooks',\n    );\n  };\n\n  HooksDispatcherOnMountInDEV = {\n    readContext<T>(context: ReactContext<T>): T {\n      return readContext(context);\n    },\n    useCallback<T>(callback: T, deps: Array<mixed> | void | null): T {\n      currentHookNameInDev = 'useCallback';\n      mountHookTypesDev();\n      checkDepsAreArrayDev(deps);\n      return mountCallback(callback, deps);\n    },\n    useContext<T>(context: ReactContext<T>): T {\n      currentHookNameInDev = 'useContext';\n      mountHookTypesDev();\n      return readContext(context);\n    },\n    useEffect(\n      create: () => (() => void) | void,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useEffect';\n      mountHookTypesDev();\n      checkDepsAreArrayDev(deps);\n      return mountEffect(create, deps);\n    },\n    useImperativeHandle<T>(\n      ref: {|current: T | null|} | ((inst: T | null) => mixed) | null | void,\n      create: () => T,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useImperativeHandle';\n      mountHookTypesDev();\n      checkDepsAreArrayDev(deps);\n      return mountImperativeHandle(ref, create, deps);\n    },\n    useLayoutEffect(\n      create: () => (() => void) | void,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useLayoutEffect';\n      mountHookTypesDev();\n      checkDepsAreArrayDev(deps);\n      return mountLayoutEffect(create, deps);\n    },\n    useMemo<T>(create: () => T, deps: Array<mixed> | void | null): T {\n      currentHookNameInDev = 'useMemo';\n      mountHookTypesDev();\n      checkDepsAreArrayDev(deps);\n      const prevDispatcher = ReactCurrentDispatcher.current;\n      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;\n      try {\n        return mountMemo(create, deps);\n      } finally {\n        ReactCurrentDispatcher.current = prevDispatcher;\n      }\n    },\n    useReducer<S, I, A>(\n      reducer: (S, A) => S,\n      initialArg: I,\n      init?: I => S,\n    ): [S, Dispatch<A>] {\n      currentHookNameInDev = 'useReducer';\n      mountHookTypesDev();\n      const prevDispatcher = ReactCurrentDispatcher.current;\n      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;\n      try {\n        return mountReducer(reducer, initialArg, init);\n      } finally {\n        ReactCurrentDispatcher.current = prevDispatcher;\n      }\n    },\n    useRef<T>(initialValue: T): {|current: T|} {\n      currentHookNameInDev = 'useRef';\n      mountHookTypesDev();\n      return mountRef(initialValue);\n    },\n    useState<S>(\n      initialState: (() => S) | S,\n    ): [S, Dispatch<BasicStateAction<S>>] {\n      currentHookNameInDev = 'useState';\n      mountHookTypesDev();\n      const prevDispatcher = ReactCurrentDispatcher.current;\n      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;\n      try {\n        return mountState(initialState);\n      } finally {\n        ReactCurrentDispatcher.current = prevDispatcher;\n      }\n    },\n    useDebugValue<T>(value: T, formatterFn: ?(value: T) => mixed): void {\n      currentHookNameInDev = 'useDebugValue';\n      mountHookTypesDev();\n      return mountDebugValue(value, formatterFn);\n    },\n    useDeferredValue<T>(value: T): T {\n      currentHookNameInDev = 'useDeferredValue';\n      mountHookTypesDev();\n      return mountDeferredValue(value);\n    },\n    useTransition(): [boolean, (() => void) => void] {\n      currentHookNameInDev = 'useTransition';\n      mountHookTypesDev();\n      return mountTransition();\n    },\n    useMutableSource<Source, Snapshot>(\n      source: MutableSource<Source>,\n      getSnapshot: MutableSourceGetSnapshotFn<Source, Snapshot>,\n      subscribe: MutableSourceSubscribeFn<Source, Snapshot>,\n    ): Snapshot {\n      currentHookNameInDev = 'useMutableSource';\n      mountHookTypesDev();\n      return mountMutableSource(source, getSnapshot, subscribe);\n    },\n    useSyncExternalStore<T>(\n      subscribe: (() => void) => () => void,\n      getSnapshot: () => T,\n    ): T {\n      currentHookNameInDev = 'useSyncExternalStore';\n      mountHookTypesDev();\n      return mountSyncExternalStore(subscribe, getSnapshot);\n    },\n    useOpaqueIdentifier(): OpaqueIDType | void {\n      currentHookNameInDev = 'useOpaqueIdentifier';\n      mountHookTypesDev();\n      return mountOpaqueIdentifier();\n    },\n\n    unstable_isNewReconciler: enableNewReconciler,\n  };\n  if (enableCache) {\n    (HooksDispatcherOnMountInDEV: Dispatcher).getCacheForType = getCacheForType;\n    (HooksDispatcherOnMountInDEV: Dispatcher).useCacheRefresh = function useCacheRefresh() {\n      currentHookNameInDev = 'useCacheRefresh';\n      mountHookTypesDev();\n      return mountRefresh();\n    };\n  }\n\n  HooksDispatcherOnMountWithHookTypesInDEV = {\n    readContext<T>(context: ReactContext<T>): T {\n      return readContext(context);\n    },\n    useCallback<T>(callback: T, deps: Array<mixed> | void | null): T {\n      currentHookNameInDev = 'useCallback';\n      updateHookTypesDev();\n      return mountCallback(callback, deps);\n    },\n    useContext<T>(context: ReactContext<T>): T {\n      currentHookNameInDev = 'useContext';\n      updateHookTypesDev();\n      return readContext(context);\n    },\n    useEffect(\n      create: () => (() => void) | void,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useEffect';\n      updateHookTypesDev();\n      return mountEffect(create, deps);\n    },\n    useImperativeHandle<T>(\n      ref: {|current: T | null|} | ((inst: T | null) => mixed) | null | void,\n      create: () => T,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useImperativeHandle';\n      updateHookTypesDev();\n      return mountImperativeHandle(ref, create, deps);\n    },\n    useLayoutEffect(\n      create: () => (() => void) | void,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useLayoutEffect';\n      updateHookTypesDev();\n      return mountLayoutEffect(create, deps);\n    },\n    useMemo<T>(create: () => T, deps: Array<mixed> | void | null): T {\n      currentHookNameInDev = 'useMemo';\n      updateHookTypesDev();\n      const prevDispatcher = ReactCurrentDispatcher.current;\n      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;\n      try {\n        return mountMemo(create, deps);\n      } finally {\n        ReactCurrentDispatcher.current = prevDispatcher;\n      }\n    },\n    useReducer<S, I, A>(\n      reducer: (S, A) => S,\n      initialArg: I,\n      init?: I => S,\n    ): [S, Dispatch<A>] {\n      currentHookNameInDev = 'useReducer';\n      updateHookTypesDev();\n      const prevDispatcher = ReactCurrentDispatcher.current;\n      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;\n      try {\n        return mountReducer(reducer, initialArg, init);\n      } finally {\n        ReactCurrentDispatcher.current = prevDispatcher;\n      }\n    },\n    useRef<T>(initialValue: T): {|current: T|} {\n      currentHookNameInDev = 'useRef';\n      updateHookTypesDev();\n      return mountRef(initialValue);\n    },\n    useState<S>(\n      initialState: (() => S) | S,\n    ): [S, Dispatch<BasicStateAction<S>>] {\n      currentHookNameInDev = 'useState';\n      updateHookTypesDev();\n      const prevDispatcher = ReactCurrentDispatcher.current;\n      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;\n      try {\n        return mountState(initialState);\n      } finally {\n        ReactCurrentDispatcher.current = prevDispatcher;\n      }\n    },\n    useDebugValue<T>(value: T, formatterFn: ?(value: T) => mixed): void {\n      currentHookNameInDev = 'useDebugValue';\n      updateHookTypesDev();\n      return mountDebugValue(value, formatterFn);\n    },\n    useDeferredValue<T>(value: T): T {\n      currentHookNameInDev = 'useDeferredValue';\n      updateHookTypesDev();\n      return mountDeferredValue(value);\n    },\n    useTransition(): [boolean, (() => void) => void] {\n      currentHookNameInDev = 'useTransition';\n      updateHookTypesDev();\n      return mountTransition();\n    },\n    useMutableSource<Source, Snapshot>(\n      source: MutableSource<Source>,\n      getSnapshot: MutableSourceGetSnapshotFn<Source, Snapshot>,\n      subscribe: MutableSourceSubscribeFn<Source, Snapshot>,\n    ): Snapshot {\n      currentHookNameInDev = 'useMutableSource';\n      updateHookTypesDev();\n      return mountMutableSource(source, getSnapshot, subscribe);\n    },\n    useSyncExternalStore<T>(\n      subscribe: (() => void) => () => void,\n      getSnapshot: () => T,\n    ): T {\n      currentHookNameInDev = 'useSyncExternalStore';\n      updateHookTypesDev();\n      return mountSyncExternalStore(subscribe, getSnapshot);\n    },\n    useOpaqueIdentifier(): OpaqueIDType | void {\n      currentHookNameInDev = 'useOpaqueIdentifier';\n      updateHookTypesDev();\n      return mountOpaqueIdentifier();\n    },\n\n    unstable_isNewReconciler: enableNewReconciler,\n  };\n  if (enableCache) {\n    (HooksDispatcherOnMountWithHookTypesInDEV: Dispatcher).getCacheForType = getCacheForType;\n    (HooksDispatcherOnMountWithHookTypesInDEV: Dispatcher).useCacheRefresh = function useCacheRefresh() {\n      currentHookNameInDev = 'useCacheRefresh';\n      updateHookTypesDev();\n      return mountRefresh();\n    };\n  }\n\n  HooksDispatcherOnUpdateInDEV = {\n    readContext<T>(context: ReactContext<T>): T {\n      return readContext(context);\n    },\n    useCallback<T>(callback: T, deps: Array<mixed> | void | null): T {\n      currentHookNameInDev = 'useCallback';\n      updateHookTypesDev();\n      return updateCallback(callback, deps);\n    },\n    useContext<T>(context: ReactContext<T>): T {\n      currentHookNameInDev = 'useContext';\n      updateHookTypesDev();\n      return readContext(context);\n    },\n    useEffect(\n      create: () => (() => void) | void,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useEffect';\n      updateHookTypesDev();\n      return updateEffect(create, deps);\n    },\n    useImperativeHandle<T>(\n      ref: {|current: T | null|} | ((inst: T | null) => mixed) | null | void,\n      create: () => T,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useImperativeHandle';\n      updateHookTypesDev();\n      return updateImperativeHandle(ref, create, deps);\n    },\n    useLayoutEffect(\n      create: () => (() => void) | void,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useLayoutEffect';\n      updateHookTypesDev();\n      return updateLayoutEffect(create, deps);\n    },\n    useMemo<T>(create: () => T, deps: Array<mixed> | void | null): T {\n      currentHookNameInDev = 'useMemo';\n      updateHookTypesDev();\n      const prevDispatcher = ReactCurrentDispatcher.current;\n      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\n      try {\n        return updateMemo(create, deps);\n      } finally {\n        ReactCurrentDispatcher.current = prevDispatcher;\n      }\n    },\n    useReducer<S, I, A>(\n      reducer: (S, A) => S,\n      initialArg: I,\n      init?: I => S,\n    ): [S, Dispatch<A>] {\n      currentHookNameInDev = 'useReducer';\n      updateHookTypesDev();\n      const prevDispatcher = ReactCurrentDispatcher.current;\n      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\n      try {\n        return updateReducer(reducer, initialArg, init);\n      } finally {\n        ReactCurrentDispatcher.current = prevDispatcher;\n      }\n    },\n    useRef<T>(initialValue: T): {|current: T|} {\n      currentHookNameInDev = 'useRef';\n      updateHookTypesDev();\n      return updateRef(initialValue);\n    },\n    useState<S>(\n      initialState: (() => S) | S,\n    ): [S, Dispatch<BasicStateAction<S>>] {\n      currentHookNameInDev = 'useState';\n      updateHookTypesDev();\n      const prevDispatcher = ReactCurrentDispatcher.current;\n      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\n      try {\n        return updateState(initialState);\n      } finally {\n        ReactCurrentDispatcher.current = prevDispatcher;\n      }\n    },\n    useDebugValue<T>(value: T, formatterFn: ?(value: T) => mixed): void {\n      currentHookNameInDev = 'useDebugValue';\n      updateHookTypesDev();\n      return updateDebugValue(value, formatterFn);\n    },\n    useDeferredValue<T>(value: T): T {\n      currentHookNameInDev = 'useDeferredValue';\n      updateHookTypesDev();\n      return updateDeferredValue(value);\n    },\n    useTransition(): [boolean, (() => void) => void] {\n      currentHookNameInDev = 'useTransition';\n      updateHookTypesDev();\n      return updateTransition();\n    },\n    useMutableSource<Source, Snapshot>(\n      source: MutableSource<Source>,\n      getSnapshot: MutableSourceGetSnapshotFn<Source, Snapshot>,\n      subscribe: MutableSourceSubscribeFn<Source, Snapshot>,\n    ): Snapshot {\n      currentHookNameInDev = 'useMutableSource';\n      updateHookTypesDev();\n      return updateMutableSource(source, getSnapshot, subscribe);\n    },\n    useSyncExternalStore<T>(\n      subscribe: (() => void) => () => void,\n      getSnapshot: () => T,\n    ): T {\n      currentHookNameInDev = 'useSyncExternalStore';\n      updateHookTypesDev();\n      return updateSyncExternalStore(subscribe, getSnapshot);\n    },\n    useOpaqueIdentifier(): OpaqueIDType | void {\n      currentHookNameInDev = 'useOpaqueIdentifier';\n      updateHookTypesDev();\n      return updateOpaqueIdentifier();\n    },\n\n    unstable_isNewReconciler: enableNewReconciler,\n  };\n  if (enableCache) {\n    (HooksDispatcherOnUpdateInDEV: Dispatcher).getCacheForType = getCacheForType;\n    (HooksDispatcherOnUpdateInDEV: Dispatcher).useCacheRefresh = function useCacheRefresh() {\n      currentHookNameInDev = 'useCacheRefresh';\n      updateHookTypesDev();\n      return updateRefresh();\n    };\n  }\n\n  HooksDispatcherOnRerenderInDEV = {\n    readContext<T>(context: ReactContext<T>): T {\n      return readContext(context);\n    },\n\n    useCallback<T>(callback: T, deps: Array<mixed> | void | null): T {\n      currentHookNameInDev = 'useCallback';\n      updateHookTypesDev();\n      return updateCallback(callback, deps);\n    },\n    useContext<T>(context: ReactContext<T>): T {\n      currentHookNameInDev = 'useContext';\n      updateHookTypesDev();\n      return readContext(context);\n    },\n    useEffect(\n      create: () => (() => void) | void,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useEffect';\n      updateHookTypesDev();\n      return updateEffect(create, deps);\n    },\n    useImperativeHandle<T>(\n      ref: {|current: T | null|} | ((inst: T | null) => mixed) | null | void,\n      create: () => T,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useImperativeHandle';\n      updateHookTypesDev();\n      return updateImperativeHandle(ref, create, deps);\n    },\n    useLayoutEffect(\n      create: () => (() => void) | void,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useLayoutEffect';\n      updateHookTypesDev();\n      return updateLayoutEffect(create, deps);\n    },\n    useMemo<T>(create: () => T, deps: Array<mixed> | void | null): T {\n      currentHookNameInDev = 'useMemo';\n      updateHookTypesDev();\n      const prevDispatcher = ReactCurrentDispatcher.current;\n      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnRerenderInDEV;\n      try {\n        return updateMemo(create, deps);\n      } finally {\n        ReactCurrentDispatcher.current = prevDispatcher;\n      }\n    },\n    useReducer<S, I, A>(\n      reducer: (S, A) => S,\n      initialArg: I,\n      init?: I => S,\n    ): [S, Dispatch<A>] {\n      currentHookNameInDev = 'useReducer';\n      updateHookTypesDev();\n      const prevDispatcher = ReactCurrentDispatcher.current;\n      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnRerenderInDEV;\n      try {\n        return rerenderReducer(reducer, initialArg, init);\n      } finally {\n        ReactCurrentDispatcher.current = prevDispatcher;\n      }\n    },\n    useRef<T>(initialValue: T): {|current: T|} {\n      currentHookNameInDev = 'useRef';\n      updateHookTypesDev();\n      return updateRef(initialValue);\n    },\n    useState<S>(\n      initialState: (() => S) | S,\n    ): [S, Dispatch<BasicStateAction<S>>] {\n      currentHookNameInDev = 'useState';\n      updateHookTypesDev();\n      const prevDispatcher = ReactCurrentDispatcher.current;\n      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnRerenderInDEV;\n      try {\n        return rerenderState(initialState);\n      } finally {\n        ReactCurrentDispatcher.current = prevDispatcher;\n      }\n    },\n    useDebugValue<T>(value: T, formatterFn: ?(value: T) => mixed): void {\n      currentHookNameInDev = 'useDebugValue';\n      updateHookTypesDev();\n      return updateDebugValue(value, formatterFn);\n    },\n    useDeferredValue<T>(value: T): T {\n      currentHookNameInDev = 'useDeferredValue';\n      updateHookTypesDev();\n      return rerenderDeferredValue(value);\n    },\n    useTransition(): [boolean, (() => void) => void] {\n      currentHookNameInDev = 'useTransition';\n      updateHookTypesDev();\n      return rerenderTransition();\n    },\n    useMutableSource<Source, Snapshot>(\n      source: MutableSource<Source>,\n      getSnapshot: MutableSourceGetSnapshotFn<Source, Snapshot>,\n      subscribe: MutableSourceSubscribeFn<Source, Snapshot>,\n    ): Snapshot {\n      currentHookNameInDev = 'useMutableSource';\n      updateHookTypesDev();\n      return updateMutableSource(source, getSnapshot, subscribe);\n    },\n    useSyncExternalStore<T>(\n      subscribe: (() => void) => () => void,\n      getSnapshot: () => T,\n    ): T {\n      currentHookNameInDev = 'useSyncExternalStore';\n      updateHookTypesDev();\n      return updateSyncExternalStore(subscribe, getSnapshot);\n    },\n    useOpaqueIdentifier(): OpaqueIDType | void {\n      currentHookNameInDev = 'useOpaqueIdentifier';\n      updateHookTypesDev();\n      return rerenderOpaqueIdentifier();\n    },\n\n    unstable_isNewReconciler: enableNewReconciler,\n  };\n  if (enableCache) {\n    (HooksDispatcherOnRerenderInDEV: Dispatcher).getCacheForType = getCacheForType;\n    (HooksDispatcherOnRerenderInDEV: Dispatcher).useCacheRefresh = function useCacheRefresh() {\n      currentHookNameInDev = 'useCacheRefresh';\n      updateHookTypesDev();\n      return updateRefresh();\n    };\n  }\n\n  InvalidNestedHooksDispatcherOnMountInDEV = {\n    readContext<T>(context: ReactContext<T>): T {\n      warnInvalidContextAccess();\n      return readContext(context);\n    },\n    useCallback<T>(callback: T, deps: Array<mixed> | void | null): T {\n      currentHookNameInDev = 'useCallback';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      return mountCallback(callback, deps);\n    },\n    useContext<T>(context: ReactContext<T>): T {\n      currentHookNameInDev = 'useContext';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      return readContext(context);\n    },\n    useEffect(\n      create: () => (() => void) | void,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useEffect';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      return mountEffect(create, deps);\n    },\n    useImperativeHandle<T>(\n      ref: {|current: T | null|} | ((inst: T | null) => mixed) | null | void,\n      create: () => T,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useImperativeHandle';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      return mountImperativeHandle(ref, create, deps);\n    },\n    useLayoutEffect(\n      create: () => (() => void) | void,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useLayoutEffect';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      return mountLayoutEffect(create, deps);\n    },\n    useMemo<T>(create: () => T, deps: Array<mixed> | void | null): T {\n      currentHookNameInDev = 'useMemo';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      const prevDispatcher = ReactCurrentDispatcher.current;\n      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;\n      try {\n        return mountMemo(create, deps);\n      } finally {\n        ReactCurrentDispatcher.current = prevDispatcher;\n      }\n    },\n    useReducer<S, I, A>(\n      reducer: (S, A) => S,\n      initialArg: I,\n      init?: I => S,\n    ): [S, Dispatch<A>] {\n      currentHookNameInDev = 'useReducer';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      const prevDispatcher = ReactCurrentDispatcher.current;\n      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;\n      try {\n        return mountReducer(reducer, initialArg, init);\n      } finally {\n        ReactCurrentDispatcher.current = prevDispatcher;\n      }\n    },\n    useRef<T>(initialValue: T): {|current: T|} {\n      currentHookNameInDev = 'useRef';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      return mountRef(initialValue);\n    },\n    useState<S>(\n      initialState: (() => S) | S,\n    ): [S, Dispatch<BasicStateAction<S>>] {\n      currentHookNameInDev = 'useState';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      const prevDispatcher = ReactCurrentDispatcher.current;\n      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;\n      try {\n        return mountState(initialState);\n      } finally {\n        ReactCurrentDispatcher.current = prevDispatcher;\n      }\n    },\n    useDebugValue<T>(value: T, formatterFn: ?(value: T) => mixed): void {\n      currentHookNameInDev = 'useDebugValue';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      return mountDebugValue(value, formatterFn);\n    },\n    useDeferredValue<T>(value: T): T {\n      currentHookNameInDev = 'useDeferredValue';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      return mountDeferredValue(value);\n    },\n    useTransition(): [boolean, (() => void) => void] {\n      currentHookNameInDev = 'useTransition';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      return mountTransition();\n    },\n    useMutableSource<Source, Snapshot>(\n      source: MutableSource<Source>,\n      getSnapshot: MutableSourceGetSnapshotFn<Source, Snapshot>,\n      subscribe: MutableSourceSubscribeFn<Source, Snapshot>,\n    ): Snapshot {\n      currentHookNameInDev = 'useMutableSource';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      return mountMutableSource(source, getSnapshot, subscribe);\n    },\n    useSyncExternalStore<T>(\n      subscribe: (() => void) => () => void,\n      getSnapshot: () => T,\n    ): T {\n      currentHookNameInDev = 'useSyncExternalStore';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      return mountSyncExternalStore(subscribe, getSnapshot);\n    },\n    useOpaqueIdentifier(): OpaqueIDType | void {\n      currentHookNameInDev = 'useOpaqueIdentifier';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      return mountOpaqueIdentifier();\n    },\n\n    unstable_isNewReconciler: enableNewReconciler,\n  };\n  if (enableCache) {\n    (InvalidNestedHooksDispatcherOnMountInDEV: Dispatcher).getCacheForType = getCacheForType;\n    (InvalidNestedHooksDispatcherOnMountInDEV: Dispatcher).useCacheRefresh = function useCacheRefresh() {\n      currentHookNameInDev = 'useCacheRefresh';\n      updateHookTypesDev();\n      return mountRefresh();\n    };\n  }\n\n  InvalidNestedHooksDispatcherOnUpdateInDEV = {\n    readContext<T>(context: ReactContext<T>): T {\n      warnInvalidContextAccess();\n      return readContext(context);\n    },\n    useCallback<T>(callback: T, deps: Array<mixed> | void | null): T {\n      currentHookNameInDev = 'useCallback';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateCallback(callback, deps);\n    },\n    useContext<T>(context: ReactContext<T>): T {\n      currentHookNameInDev = 'useContext';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return readContext(context);\n    },\n    useEffect(\n      create: () => (() => void) | void,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useEffect';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateEffect(create, deps);\n    },\n    useImperativeHandle<T>(\n      ref: {|current: T | null|} | ((inst: T | null) => mixed) | null | void,\n      create: () => T,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useImperativeHandle';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateImperativeHandle(ref, create, deps);\n    },\n    useLayoutEffect(\n      create: () => (() => void) | void,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useLayoutEffect';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateLayoutEffect(create, deps);\n    },\n    useMemo<T>(create: () => T, deps: Array<mixed> | void | null): T {\n      currentHookNameInDev = 'useMemo';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      const prevDispatcher = ReactCurrentDispatcher.current;\n      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\n      try {\n        return updateMemo(create, deps);\n      } finally {\n        ReactCurrentDispatcher.current = prevDispatcher;\n      }\n    },\n    useReducer<S, I, A>(\n      reducer: (S, A) => S,\n      initialArg: I,\n      init?: I => S,\n    ): [S, Dispatch<A>] {\n      currentHookNameInDev = 'useReducer';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      const prevDispatcher = ReactCurrentDispatcher.current;\n      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\n      try {\n        return updateReducer(reducer, initialArg, init);\n      } finally {\n        ReactCurrentDispatcher.current = prevDispatcher;\n      }\n    },\n    useRef<T>(initialValue: T): {|current: T|} {\n      currentHookNameInDev = 'useRef';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateRef(initialValue);\n    },\n    useState<S>(\n      initialState: (() => S) | S,\n    ): [S, Dispatch<BasicStateAction<S>>] {\n      currentHookNameInDev = 'useState';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      const prevDispatcher = ReactCurrentDispatcher.current;\n      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\n      try {\n        return updateState(initialState);\n      } finally {\n        ReactCurrentDispatcher.current = prevDispatcher;\n      }\n    },\n    useDebugValue<T>(value: T, formatterFn: ?(value: T) => mixed): void {\n      currentHookNameInDev = 'useDebugValue';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateDebugValue(value, formatterFn);\n    },\n    useDeferredValue<T>(value: T): T {\n      currentHookNameInDev = 'useDeferredValue';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateDeferredValue(value);\n    },\n    useTransition(): [boolean, (() => void) => void] {\n      currentHookNameInDev = 'useTransition';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateTransition();\n    },\n    useMutableSource<Source, Snapshot>(\n      source: MutableSource<Source>,\n      getSnapshot: MutableSourceGetSnapshotFn<Source, Snapshot>,\n      subscribe: MutableSourceSubscribeFn<Source, Snapshot>,\n    ): Snapshot {\n      currentHookNameInDev = 'useMutableSource';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateMutableSource(source, getSnapshot, subscribe);\n    },\n    useSyncExternalStore<T>(\n      subscribe: (() => void) => () => void,\n      getSnapshot: () => T,\n    ): T {\n      currentHookNameInDev = 'useSyncExternalStore';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateSyncExternalStore(subscribe, getSnapshot);\n    },\n    useOpaqueIdentifier(): OpaqueIDType | void {\n      currentHookNameInDev = 'useOpaqueIdentifier';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateOpaqueIdentifier();\n    },\n\n    unstable_isNewReconciler: enableNewReconciler,\n  };\n  if (enableCache) {\n    (InvalidNestedHooksDispatcherOnUpdateInDEV: Dispatcher).getCacheForType = getCacheForType;\n    (InvalidNestedHooksDispatcherOnUpdateInDEV: Dispatcher).useCacheRefresh = function useCacheRefresh() {\n      currentHookNameInDev = 'useCacheRefresh';\n      updateHookTypesDev();\n      return updateRefresh();\n    };\n  }\n\n  InvalidNestedHooksDispatcherOnRerenderInDEV = {\n    readContext<T>(context: ReactContext<T>): T {\n      warnInvalidContextAccess();\n      return readContext(context);\n    },\n\n    useCallback<T>(callback: T, deps: Array<mixed> | void | null): T {\n      currentHookNameInDev = 'useCallback';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateCallback(callback, deps);\n    },\n    useContext<T>(context: ReactContext<T>): T {\n      currentHookNameInDev = 'useContext';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return readContext(context);\n    },\n    useEffect(\n      create: () => (() => void) | void,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useEffect';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateEffect(create, deps);\n    },\n    useImperativeHandle<T>(\n      ref: {|current: T | null|} | ((inst: T | null) => mixed) | null | void,\n      create: () => T,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useImperativeHandle';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateImperativeHandle(ref, create, deps);\n    },\n    useLayoutEffect(\n      create: () => (() => void) | void,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useLayoutEffect';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateLayoutEffect(create, deps);\n    },\n    useMemo<T>(create: () => T, deps: Array<mixed> | void | null): T {\n      currentHookNameInDev = 'useMemo';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      const prevDispatcher = ReactCurrentDispatcher.current;\n      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\n      try {\n        return updateMemo(create, deps);\n      } finally {\n        ReactCurrentDispatcher.current = prevDispatcher;\n      }\n    },\n    useReducer<S, I, A>(\n      reducer: (S, A) => S,\n      initialArg: I,\n      init?: I => S,\n    ): [S, Dispatch<A>] {\n      currentHookNameInDev = 'useReducer';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      const prevDispatcher = ReactCurrentDispatcher.current;\n      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\n      try {\n        return rerenderReducer(reducer, initialArg, init);\n      } finally {\n        ReactCurrentDispatcher.current = prevDispatcher;\n      }\n    },\n    useRef<T>(initialValue: T): {|current: T|} {\n      currentHookNameInDev = 'useRef';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateRef(initialValue);\n    },\n    useState<S>(\n      initialState: (() => S) | S,\n    ): [S, Dispatch<BasicStateAction<S>>] {\n      currentHookNameInDev = 'useState';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      const prevDispatcher = ReactCurrentDispatcher.current;\n      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\n      try {\n        return rerenderState(initialState);\n      } finally {\n        ReactCurrentDispatcher.current = prevDispatcher;\n      }\n    },\n    useDebugValue<T>(value: T, formatterFn: ?(value: T) => mixed): void {\n      currentHookNameInDev = 'useDebugValue';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateDebugValue(value, formatterFn);\n    },\n    useDeferredValue<T>(value: T): T {\n      currentHookNameInDev = 'useDeferredValue';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return rerenderDeferredValue(value);\n    },\n    useTransition(): [boolean, (() => void) => void] {\n      currentHookNameInDev = 'useTransition';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return rerenderTransition();\n    },\n    useMutableSource<Source, Snapshot>(\n      source: MutableSource<Source>,\n      getSnapshot: MutableSourceGetSnapshotFn<Source, Snapshot>,\n      subscribe: MutableSourceSubscribeFn<Source, Snapshot>,\n    ): Snapshot {\n      currentHookNameInDev = 'useMutableSource';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateMutableSource(source, getSnapshot, subscribe);\n    },\n    useSyncExternalStore<T>(\n      subscribe: (() => void) => () => void,\n      getSnapshot: () => T,\n    ): T {\n      currentHookNameInDev = 'useSyncExternalStore';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateSyncExternalStore(subscribe, getSnapshot);\n    },\n    useOpaqueIdentifier(): OpaqueIDType | void {\n      currentHookNameInDev = 'useOpaqueIdentifier';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return rerenderOpaqueIdentifier();\n    },\n\n    unstable_isNewReconciler: enableNewReconciler,\n  };\n  if (enableCache) {\n    (InvalidNestedHooksDispatcherOnRerenderInDEV: Dispatcher).getCacheForType = getCacheForType;\n    (InvalidNestedHooksDispatcherOnRerenderInDEV: Dispatcher).useCacheRefresh = function useCacheRefresh() {\n      currentHookNameInDev = 'useCacheRefresh';\n      updateHookTypesDev();\n      return updateRefresh();\n    };\n  }\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Fiber} from './ReactInternalTypes';\n\nimport {\n  enableProfilerCommitHooks,\n  enableProfilerNestedUpdatePhase,\n  enableProfilerTimer,\n} from 'shared/ReactFeatureFlags';\nimport {HostRoot, Profiler} from './ReactWorkTags';\n\n// Intentionally not named imports because Rollup would use dynamic dispatch for\n// CommonJS interop named imports.\nimport * as Scheduler from 'scheduler';\n\nconst {unstable_now: now} = Scheduler;\n\nexport type ProfilerTimer = {\n  getCommitTime(): number,\n  isCurrentUpdateNested(): boolean,\n  markNestedUpdateScheduled(): void,\n  recordCommitTime(): void,\n  startProfilerTimer(fiber: Fiber): void,\n  stopProfilerTimerIfRunning(fiber: Fiber): void,\n  stopProfilerTimerIfRunningAndRecordDelta(fiber: Fiber): void,\n  syncNestedUpdateFlag(): void,\n  ...\n};\n\nlet commitTime: number = 0;\nlet layoutEffectStartTime: number = -1;\nlet profilerStartTime: number = -1;\nlet passiveEffectStartTime: number = -1;\n\n/**\n * Tracks whether the current update was a nested/cascading update (scheduled from a layout effect).\n *\n * The overall sequence is:\n *   1. render\n *   2. commit (and call `onRender`, `onCommit`)\n *   3. check for nested updates\n *   4. flush passive effects (and call `onPostCommit`)\n *\n * Nested updates are identified in step 3 above,\n * but step 4 still applies to the work that was just committed.\n * We use two flags to track nested updates then:\n * one tracks whether the upcoming update is a nested update,\n * and the other tracks whether the current update was a nested update.\n * The first value gets synced to the second at the start of the render phase.\n */\nlet currentUpdateIsNested: boolean = false;\nlet nestedUpdateScheduled: boolean = false;\n\nfunction isCurrentUpdateNested(): boolean {\n  return currentUpdateIsNested;\n}\n\nfunction markNestedUpdateScheduled(): void {\n  if (enableProfilerNestedUpdatePhase) {\n    nestedUpdateScheduled = true;\n  }\n}\n\nfunction resetNestedUpdateFlag(): void {\n  if (enableProfilerNestedUpdatePhase) {\n    currentUpdateIsNested = false;\n    nestedUpdateScheduled = false;\n  }\n}\n\nfunction syncNestedUpdateFlag(): void {\n  if (enableProfilerNestedUpdatePhase) {\n    currentUpdateIsNested = nestedUpdateScheduled;\n    nestedUpdateScheduled = false;\n  }\n}\n\nfunction getCommitTime(): number {\n  return commitTime;\n}\n\nfunction recordCommitTime(): void {\n  if (!enableProfilerTimer) {\n    return;\n  }\n  commitTime = now();\n}\n\nfunction startProfilerTimer(fiber: Fiber): void {\n  if (!enableProfilerTimer) {\n    return;\n  }\n\n  profilerStartTime = now();\n\n  if (((fiber.actualStartTime: any): number) < 0) {\n    fiber.actualStartTime = now();\n  }\n}\n\nfunction stopProfilerTimerIfRunning(fiber: Fiber): void {\n  if (!enableProfilerTimer) {\n    return;\n  }\n  profilerStartTime = -1;\n}\n\nfunction stopProfilerTimerIfRunningAndRecordDelta(\n  fiber: Fiber,\n  overrideBaseTime: boolean,\n): void {\n  if (!enableProfilerTimer) {\n    return;\n  }\n\n  if (profilerStartTime >= 0) {\n    const elapsedTime = now() - profilerStartTime;\n    fiber.actualDuration += elapsedTime;\n    if (overrideBaseTime) {\n      fiber.selfBaseDuration = elapsedTime;\n    }\n    profilerStartTime = -1;\n  }\n}\n\nfunction recordLayoutEffectDuration(fiber: Fiber): void {\n  if (!enableProfilerTimer || !enableProfilerCommitHooks) {\n    return;\n  }\n\n  if (layoutEffectStartTime >= 0) {\n    const elapsedTime = now() - layoutEffectStartTime;\n\n    layoutEffectStartTime = -1;\n\n    // Store duration on the next nearest Profiler ancestor\n    // Or the root (for the DevTools Profiler to read)\n    let parentFiber = fiber.return;\n    while (parentFiber !== null) {\n      switch (parentFiber.tag) {\n        case HostRoot:\n          const root = parentFiber.stateNode;\n          root.effectDuration += elapsedTime;\n          return;\n        case Profiler:\n          const parentStateNode = parentFiber.stateNode;\n          parentStateNode.effectDuration += elapsedTime;\n          return;\n      }\n      parentFiber = parentFiber.return;\n    }\n  }\n}\n\nfunction recordPassiveEffectDuration(fiber: Fiber): void {\n  if (!enableProfilerTimer || !enableProfilerCommitHooks) {\n    return;\n  }\n\n  if (passiveEffectStartTime >= 0) {\n    const elapsedTime = now() - passiveEffectStartTime;\n\n    passiveEffectStartTime = -1;\n\n    // Store duration on the next nearest Profiler ancestor\n    // Or the root (for the DevTools Profiler to read)\n    let parentFiber = fiber.return;\n    while (parentFiber !== null) {\n      switch (parentFiber.tag) {\n        case HostRoot:\n          const root = parentFiber.stateNode;\n          if (root !== null) {\n            root.passiveEffectDuration += elapsedTime;\n          }\n          return;\n        case Profiler:\n          const parentStateNode = parentFiber.stateNode;\n          if (parentStateNode !== null) {\n            // Detached fibers have their state node cleared out.\n            // In this case, the return pointer is also cleared out,\n            // so we won't be able to report the time spent in this Profiler's subtree.\n            parentStateNode.passiveEffectDuration += elapsedTime;\n          }\n          return;\n      }\n      parentFiber = parentFiber.return;\n    }\n  }\n}\n\nfunction startLayoutEffectTimer(): void {\n  if (!enableProfilerTimer || !enableProfilerCommitHooks) {\n    return;\n  }\n  layoutEffectStartTime = now();\n}\n\nfunction startPassiveEffectTimer(): void {\n  if (!enableProfilerTimer || !enableProfilerCommitHooks) {\n    return;\n  }\n  passiveEffectStartTime = now();\n}\n\nfunction transferActualDuration(fiber: Fiber): void {\n  // Transfer time spent rendering these children so we don't lose it\n  // after we rerender. This is used as a helper in special cases\n  // where we should count the work of multiple passes.\n  let child = fiber.child;\n  while (child) {\n    fiber.actualDuration += child.actualDuration;\n    child = child.sibling;\n  }\n}\n\nexport {\n  getCommitTime,\n  isCurrentUpdateNested,\n  markNestedUpdateScheduled,\n  recordCommitTime,\n  recordLayoutEffectDuration,\n  recordPassiveEffectDuration,\n  resetNestedUpdateFlag,\n  startLayoutEffectTimer,\n  startPassiveEffectTimer,\n  startProfilerTimer,\n  stopProfilerTimerIfRunning,\n  stopProfilerTimerIfRunningAndRecordDelta,\n  syncNestedUpdateFlag,\n  transferActualDuration,\n};\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Fiber} from './ReactInternalTypes';\n\nimport {getStackByFiberInDevAndProd} from './ReactFiberComponentStack';\n\nexport type CapturedValue<T> = {|\n  value: T,\n  source: Fiber | null,\n  stack: string | null,\n|};\n\nexport function createCapturedValue<T>(\n  value: T,\n  source: Fiber,\n): CapturedValue<T> {\n  // If the value is an error, call this function immediately after it is thrown\n  // so the stack is accurate.\n  return {\n    value,\n    source,\n    stack: getStackByFiberInDevAndProd(source),\n  };\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Fiber} from '../ReactFiber.old';\nimport type {CapturedValue} from '../ReactCapturedValue';\n\nimport {ClassComponent} from '../ReactWorkTags';\n\n// Module provided by RN:\nimport {ReactFiberErrorDialog as RNImpl} from 'react-native/Libraries/ReactPrivate/ReactNativePrivateInterface';\n\nimport invariant from 'shared/invariant';\n\ninvariant(\n  typeof RNImpl.showErrorDialog === 'function',\n  'Expected ReactFiberErrorDialog.showErrorDialog to be a function.',\n);\n\nexport function showErrorDialog(\n  boundary: Fiber,\n  errorInfo: CapturedValue<mixed>,\n): boolean {\n  const capturedError = {\n    componentStack: errorInfo.stack !== null ? errorInfo.stack : '',\n    error: errorInfo.value,\n    errorBoundary:\n      boundary !== null && boundary.tag === ClassComponent\n        ? boundary.stateNode\n        : null,\n  };\n  return RNImpl.showErrorDialog(capturedError);\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Fiber} from './ReactInternalTypes';\nimport type {CapturedValue} from './ReactCapturedValue';\n\nimport {showErrorDialog} from './ReactFiberErrorDialog';\nimport {ClassComponent} from './ReactWorkTags';\nimport getComponentNameFromFiber from 'react-reconciler/src/getComponentNameFromFiber';\nimport {HostRoot} from 'react-reconciler/src/ReactWorkTags';\n\nexport function logCapturedError(\n  boundary: Fiber,\n  errorInfo: CapturedValue<mixed>,\n): void {\n  try {\n    const logError = showErrorDialog(boundary, errorInfo);\n\n    // Allow injected showErrorDialog() to prevent default console.error logging.\n    // This enables renderers like ReactNative to better manage redbox behavior.\n    if (logError === false) {\n      return;\n    }\n\n    const error = (errorInfo.value: any);\n    if (__DEV__) {\n      const source = errorInfo.source;\n      const stack = errorInfo.stack;\n      const componentStack = stack !== null ? stack : '';\n      // Browsers support silencing uncaught errors by calling\n      // `preventDefault()` in window `error` handler.\n      // We record this information as an expando on the error.\n      if (error != null && error._suppressLogging) {\n        if (boundary.tag === ClassComponent) {\n          // The error is recoverable and was silenced.\n          // Ignore it and don't print the stack addendum.\n          // This is handy for testing error boundaries without noise.\n          return;\n        }\n        // The error is fatal. Since the silencing might have\n        // been accidental, we'll surface it anyway.\n        // However, the browser would have silenced the original error\n        // so we'll print it first, and then print the stack addendum.\n        console['error'](error); // Don't transform to our wrapper\n        // For a more detailed description of this block, see:\n        // https://github.com/facebook/react/pull/13384\n      }\n\n      const componentName = source ? getComponentNameFromFiber(source) : null;\n      const componentNameMessage = componentName\n        ? `The above error occurred in the <${componentName}> component:`\n        : 'The above error occurred in one of your React components:';\n\n      let errorBoundaryMessage;\n      if (boundary.tag === HostRoot) {\n        errorBoundaryMessage =\n          'Consider adding an error boundary to your tree to customize error handling behavior.\\n' +\n          'Visit https://reactjs.org/link/error-boundaries to learn more about error boundaries.';\n      } else {\n        const errorBoundaryName =\n          getComponentNameFromFiber(boundary) || 'Anonymous';\n        errorBoundaryMessage =\n          `React will try to recreate this component tree from scratch ` +\n          `using the error boundary you provided, ${errorBoundaryName}.`;\n      }\n      const combinedMessage =\n        `${componentNameMessage}\\n${componentStack}\\n\\n` +\n        `${errorBoundaryMessage}`;\n\n      // In development, we provide our own message with just the component stack.\n      // We don't include the original error message and JS stack because the browser\n      // has already printed it. Even if the application swallows the error, it is still\n      // displayed by the browser thanks to the DEV-only fake event trick in ReactErrorUtils.\n      console['error'](combinedMessage); // Don't transform to our wrapper\n    } else {\n      // In production, we print the error directly.\n      // This will include the message, the JS stack, and anything the browser wants to show.\n      // We pass the error object instead of custom message so that the browser displays the error natively.\n      console['error'](error); // Don't transform to our wrapper\n    }\n  } catch (e) {\n    // This method must not throw, or React internal state will get messed up.\n    // If console.error is overridden, or logCapturedError() shows a dialog that throws,\n    // we want to report this error outside of the normal stack as a last resort.\n    // https://github.com/facebook/react/issues/13188\n    setTimeout(() => {\n      throw e;\n    });\n  }\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Fiber} from './ReactInternalTypes';\nimport type {FiberRoot} from './ReactInternalTypes';\nimport type {Lane, Lanes} from './ReactFiberLane.old';\nimport type {CapturedValue} from './ReactCapturedValue';\nimport type {Update} from './ReactUpdateQueue.old';\nimport type {Wakeable} from 'shared/ReactTypes';\nimport type {SuspenseContext} from './ReactFiberSuspenseContext.old';\n\nimport getComponentNameFromFiber from 'react-reconciler/src/getComponentNameFromFiber';\nimport {\n  ClassComponent,\n  HostRoot,\n  SuspenseComponent,\n  IncompleteClassComponent,\n  FunctionComponent,\n  ForwardRef,\n  SimpleMemoComponent,\n} from './ReactWorkTags';\nimport {\n  DidCapture,\n  Incomplete,\n  NoFlags,\n  ShouldCapture,\n  LifecycleEffectMask,\n  ForceUpdateForLegacySuspense,\n} from './ReactFiberFlags';\nimport {\n  supportsPersistence,\n  getOffscreenContainerProps,\n} from './ReactFiberHostConfig';\nimport {shouldCaptureSuspense} from './ReactFiberSuspenseComponent.old';\nimport {NoMode, ConcurrentMode, DebugTracingMode} from './ReactTypeOfMode';\nimport {\n  enableDebugTracing,\n  enableSchedulingProfiler,\n  enableLazyContextPropagation,\n  enableUpdaterTracking,\n  enablePersistentOffscreenHostContainer,\n} from 'shared/ReactFeatureFlags';\nimport {createCapturedValue} from './ReactCapturedValue';\nimport {\n  enqueueCapturedUpdate,\n  createUpdate,\n  CaptureUpdate,\n  ForceUpdate,\n  enqueueUpdate,\n} from './ReactUpdateQueue.old';\nimport {markFailedErrorBoundaryForHotReloading} from './ReactFiberHotReloading.old';\nimport {\n  suspenseStackCursor,\n  InvisibleParentSuspenseContext,\n  hasSuspenseContext,\n} from './ReactFiberSuspenseContext.old';\nimport {\n  renderDidError,\n  onUncaughtError,\n  markLegacyErrorBoundaryAsFailed,\n  isAlreadyFailedLegacyErrorBoundary,\n  pingSuspendedRoot,\n  restorePendingUpdaters,\n} from './ReactFiberWorkLoop.old';\nimport {propagateParentContextChangesToDeferredTree} from './ReactFiberNewContext.old';\nimport {logCapturedError} from './ReactFiberErrorLogger';\nimport {logComponentSuspended} from './DebugTracing';\nimport {\n  markComponentRenderStopped,\n  markComponentSuspended,\n} from './SchedulingProfiler';\nimport {isDevToolsPresent} from './ReactFiberDevToolsHook.old';\nimport {\n  SyncLane,\n  NoTimestamp,\n  includesSomeLane,\n  mergeLanes,\n  pickArbitraryLane,\n} from './ReactFiberLane.old';\n\nconst PossiblyWeakMap = typeof WeakMap === 'function' ? WeakMap : Map;\n\nfunction createRootErrorUpdate(\n  fiber: Fiber,\n  errorInfo: CapturedValue<mixed>,\n  lane: Lane,\n): Update<mixed> {\n  const update = createUpdate(NoTimestamp, lane);\n  // Unmount the root by rendering null.\n  update.tag = CaptureUpdate;\n  // Caution: React DevTools currently depends on this property\n  // being called \"element\".\n  update.payload = {element: null};\n  const error = errorInfo.value;\n  update.callback = () => {\n    onUncaughtError(error);\n    logCapturedError(fiber, errorInfo);\n  };\n  return update;\n}\n\nfunction createClassErrorUpdate(\n  fiber: Fiber,\n  errorInfo: CapturedValue<mixed>,\n  lane: Lane,\n): Update<mixed> {\n  const update = createUpdate(NoTimestamp, lane);\n  update.tag = CaptureUpdate;\n  const getDerivedStateFromError = fiber.type.getDerivedStateFromError;\n  if (typeof getDerivedStateFromError === 'function') {\n    const error = errorInfo.value;\n    update.payload = () => {\n      return getDerivedStateFromError(error);\n    };\n    update.callback = () => {\n      if (__DEV__) {\n        markFailedErrorBoundaryForHotReloading(fiber);\n      }\n      logCapturedError(fiber, errorInfo);\n    };\n  }\n\n  const inst = fiber.stateNode;\n  if (inst !== null && typeof inst.componentDidCatch === 'function') {\n    update.callback = function callback() {\n      if (__DEV__) {\n        markFailedErrorBoundaryForHotReloading(fiber);\n      }\n      logCapturedError(fiber, errorInfo);\n      if (typeof getDerivedStateFromError !== 'function') {\n        // To preserve the preexisting retry behavior of error boundaries,\n        // we keep track of which ones already failed during this batch.\n        // This gets reset before we yield back to the browser.\n        // TODO: Warn in strict mode if getDerivedStateFromError is\n        // not defined.\n        markLegacyErrorBoundaryAsFailed(this);\n      }\n      const error = errorInfo.value;\n      const stack = errorInfo.stack;\n      this.componentDidCatch(error, {\n        componentStack: stack !== null ? stack : '',\n      });\n      if (__DEV__) {\n        if (typeof getDerivedStateFromError !== 'function') {\n          // If componentDidCatch is the only error boundary method defined,\n          // then it needs to call setState to recover from errors.\n          // If no state update is scheduled then the boundary will swallow the error.\n          if (!includesSomeLane(fiber.lanes, (SyncLane: Lane))) {\n            console.error(\n              '%s: Error boundaries should implement getDerivedStateFromError(). ' +\n                'In that method, return a state update to display an error message or fallback UI.',\n              getComponentNameFromFiber(fiber) || 'Unknown',\n            );\n          }\n        }\n      }\n    };\n  }\n  return update;\n}\n\nfunction attachPingListener(root: FiberRoot, wakeable: Wakeable, lanes: Lanes) {\n  // Attach a listener to the promise to \"ping\" the root and retry. But only if\n  // one does not already exist for the lanes we're currently rendering (which\n  // acts like a \"thread ID\" here).\n  let pingCache = root.pingCache;\n  let threadIDs;\n  if (pingCache === null) {\n    pingCache = root.pingCache = new PossiblyWeakMap();\n    threadIDs = new Set();\n    pingCache.set(wakeable, threadIDs);\n  } else {\n    threadIDs = pingCache.get(wakeable);\n    if (threadIDs === undefined) {\n      threadIDs = new Set();\n      pingCache.set(wakeable, threadIDs);\n    }\n  }\n  if (!threadIDs.has(lanes)) {\n    // Memoize using the thread ID to prevent redundant listeners.\n    threadIDs.add(lanes);\n    const ping = pingSuspendedRoot.bind(null, root, wakeable, lanes);\n    if (enableUpdaterTracking) {\n      if (isDevToolsPresent) {\n        // If we have pending work still, restore the original updaters\n        restorePendingUpdaters(root, lanes);\n      }\n    }\n    wakeable.then(ping, ping);\n  }\n}\n\nfunction throwException(\n  root: FiberRoot,\n  returnFiber: Fiber,\n  sourceFiber: Fiber,\n  value: mixed,\n  rootRenderLanes: Lanes,\n) {\n  // The source fiber did not complete.\n  sourceFiber.flags |= Incomplete;\n\n  if (enableUpdaterTracking) {\n    if (isDevToolsPresent) {\n      // If we have pending work still, restore the original updaters\n      restorePendingUpdaters(root, rootRenderLanes);\n    }\n  }\n\n  if (\n    value !== null &&\n    typeof value === 'object' &&\n    typeof value.then === 'function'\n  ) {\n    if (enableLazyContextPropagation) {\n      const currentSourceFiber = sourceFiber.alternate;\n      if (currentSourceFiber !== null) {\n        // Since we never visited the children of the suspended component, we\n        // need to propagate the context change now, to ensure that we visit\n        // them during the retry.\n        //\n        // We don't have to do this for errors because we retry errors without\n        // committing in between. So this is specific to Suspense.\n        propagateParentContextChangesToDeferredTree(\n          currentSourceFiber,\n          sourceFiber,\n          rootRenderLanes,\n        );\n      }\n    }\n\n    // This is a wakeable.\n    const wakeable: Wakeable = (value: any);\n\n    if (__DEV__) {\n      if (enableDebugTracing) {\n        if (sourceFiber.mode & DebugTracingMode) {\n          const name = getComponentNameFromFiber(sourceFiber) || 'Unknown';\n          logComponentSuspended(name, wakeable);\n        }\n      }\n    }\n\n    if (enableSchedulingProfiler) {\n      markComponentRenderStopped();\n      markComponentSuspended(sourceFiber, wakeable, rootRenderLanes);\n    }\n\n    // Reset the memoizedState to what it was before we attempted to render it.\n    // A legacy mode Suspense quirk, only relevant to hook components.\n    const tag = sourceFiber.tag;\n    if (\n      (sourceFiber.mode & ConcurrentMode) === NoMode &&\n      (tag === FunctionComponent ||\n        tag === ForwardRef ||\n        tag === SimpleMemoComponent)\n    ) {\n      const currentSource = sourceFiber.alternate;\n      if (currentSource) {\n        sourceFiber.updateQueue = currentSource.updateQueue;\n        sourceFiber.memoizedState = currentSource.memoizedState;\n        sourceFiber.lanes = currentSource.lanes;\n      } else {\n        sourceFiber.updateQueue = null;\n        sourceFiber.memoizedState = null;\n      }\n    }\n\n    const hasInvisibleParentBoundary = hasSuspenseContext(\n      suspenseStackCursor.current,\n      (InvisibleParentSuspenseContext: SuspenseContext),\n    );\n\n    // Schedule the nearest Suspense to re-render the timed out view.\n    let workInProgress = returnFiber;\n    do {\n      if (\n        workInProgress.tag === SuspenseComponent &&\n        shouldCaptureSuspense(workInProgress, hasInvisibleParentBoundary)\n      ) {\n        // Found the nearest boundary.\n\n        // Stash the promise on the boundary fiber. If the boundary times out, we'll\n        // attach another listener to flip the boundary back to its normal state.\n        const wakeables: Set<Wakeable> = (workInProgress.updateQueue: any);\n        if (wakeables === null) {\n          const updateQueue = (new Set(): any);\n          updateQueue.add(wakeable);\n          workInProgress.updateQueue = updateQueue;\n        } else {\n          wakeables.add(wakeable);\n        }\n\n        // If the boundary is in legacy mode, we should *not*\n        // suspend the commit. Pretend as if the suspended component rendered\n        // null and keep rendering. In the commit phase, we'll schedule a\n        // subsequent synchronous update to re-render the Suspense.\n        //\n        // Note: It doesn't matter whether the component that suspended was\n        // inside a concurrent mode tree. If the Suspense is outside of it, we\n        // should *not* suspend the commit.\n        //\n        // If the suspense boundary suspended itself suspended, we don't have to\n        // do this trick because nothing was partially started. We can just\n        // directly do a second pass over the fallback in this render and\n        // pretend we meant to render that directly.\n        if (\n          (workInProgress.mode & ConcurrentMode) === NoMode &&\n          workInProgress !== returnFiber\n        ) {\n          workInProgress.flags |= DidCapture;\n          sourceFiber.flags |= ForceUpdateForLegacySuspense;\n\n          // We're going to commit this fiber even though it didn't complete.\n          // But we shouldn't call any lifecycle methods or callbacks. Remove\n          // all lifecycle effect tags.\n          sourceFiber.flags &= ~(LifecycleEffectMask | Incomplete);\n\n          if (supportsPersistence && enablePersistentOffscreenHostContainer) {\n            // Another legacy Suspense quirk. In persistent mode, if this is the\n            // initial mount, override the props of the host container to hide\n            // its contents.\n            const currentSuspenseBoundary = workInProgress.alternate;\n            if (currentSuspenseBoundary === null) {\n              const offscreenFiber: Fiber = (workInProgress.child: any);\n              const offscreenContainer = offscreenFiber.child;\n              if (offscreenContainer !== null) {\n                const children = offscreenContainer.memoizedProps.children;\n                const containerProps = getOffscreenContainerProps(\n                  'hidden',\n                  children,\n                );\n                offscreenContainer.pendingProps = containerProps;\n                offscreenContainer.memoizedProps = containerProps;\n              }\n            }\n          }\n\n          if (sourceFiber.tag === ClassComponent) {\n            const currentSourceFiber = sourceFiber.alternate;\n            if (currentSourceFiber === null) {\n              // This is a new mount. Change the tag so it's not mistaken for a\n              // completed class component. For example, we should not call\n              // componentWillUnmount if it is deleted.\n              sourceFiber.tag = IncompleteClassComponent;\n            } else {\n              // When we try rendering again, we should not reuse the current fiber,\n              // since it's known to be in an inconsistent state. Use a force update to\n              // prevent a bail out.\n              const update = createUpdate(NoTimestamp, SyncLane);\n              update.tag = ForceUpdate;\n              enqueueUpdate(sourceFiber, update, SyncLane);\n            }\n          }\n\n          // The source fiber did not complete. Mark it with Sync priority to\n          // indicate that it still has pending work.\n          sourceFiber.lanes = mergeLanes(sourceFiber.lanes, SyncLane);\n\n          // Exit without suspending.\n          return;\n        }\n\n        // Confirmed that the boundary is in a concurrent mode tree. Continue\n        // with the normal suspend path.\n        //\n        // After this we'll use a set of heuristics to determine whether this\n        // render pass will run to completion or restart or \"suspend\" the commit.\n        // The actual logic for this is spread out in different places.\n        //\n        // This first principle is that if we're going to suspend when we complete\n        // a root, then we should also restart if we get an update or ping that\n        // might unsuspend it, and vice versa. The only reason to suspend is\n        // because you think you might want to restart before committing. However,\n        // it doesn't make sense to restart only while in the period we're suspended.\n        //\n        // Restarting too aggressively is also not good because it starves out any\n        // intermediate loading state. So we use heuristics to determine when.\n\n        // Suspense Heuristics\n        //\n        // If nothing threw a Promise or all the same fallbacks are already showing,\n        // then don't suspend/restart.\n        //\n        // If this is an initial render of a new tree of Suspense boundaries and\n        // those trigger a fallback, then don't suspend/restart. We want to ensure\n        // that we can show the initial loading state as quickly as possible.\n        //\n        // If we hit a \"Delayed\" case, such as when we'd switch from content back into\n        // a fallback, then we should always suspend/restart. Transitions apply\n        // to this case. If none is defined, JND is used instead.\n        //\n        // If we're already showing a fallback and it gets \"retried\", allowing us to show\n        // another level, but there's still an inner boundary that would show a fallback,\n        // then we suspend/restart for 500ms since the last time we showed a fallback\n        // anywhere in the tree. This effectively throttles progressive loading into a\n        // consistent train of commits. This also gives us an opportunity to restart to\n        // get to the completed state slightly earlier.\n        //\n        // If there's ambiguity due to batching it's resolved in preference of:\n        // 1) \"delayed\", 2) \"initial render\", 3) \"retry\".\n        //\n        // We want to ensure that a \"busy\" state doesn't get force committed. We want to\n        // ensure that new initial loading states can commit as soon as possible.\n\n        attachPingListener(root, wakeable, rootRenderLanes);\n\n        workInProgress.flags |= ShouldCapture;\n        // TODO: I think we can remove this, since we now use `DidCapture` in\n        // the begin phase to prevent an early bailout.\n        workInProgress.lanes = rootRenderLanes;\n\n        return;\n      }\n      // This boundary already captured during this render. Continue to the next\n      // boundary.\n      workInProgress = workInProgress.return;\n    } while (workInProgress !== null);\n    // No boundary was found. Fallthrough to error mode.\n    // TODO: Use invariant so the message is stripped in prod?\n    value = new Error(\n      (getComponentNameFromFiber(sourceFiber) || 'A React component') +\n        ' suspended while rendering, but no fallback UI was specified.\\n' +\n        '\\n' +\n        'Add a <Suspense fallback=...> component higher in the tree to ' +\n        'provide a loading indicator or placeholder to display.',\n    );\n  }\n\n  // We didn't find a boundary that could handle this type of exception. Start\n  // over and traverse parent path again, this time treating the exception\n  // as an error.\n  renderDidError();\n\n  value = createCapturedValue(value, sourceFiber);\n  let workInProgress = returnFiber;\n  do {\n    switch (workInProgress.tag) {\n      case HostRoot: {\n        const errorInfo = value;\n        workInProgress.flags |= ShouldCapture;\n        const lane = pickArbitraryLane(rootRenderLanes);\n        workInProgress.lanes = mergeLanes(workInProgress.lanes, lane);\n        const update = createRootErrorUpdate(workInProgress, errorInfo, lane);\n        enqueueCapturedUpdate(workInProgress, update);\n        return;\n      }\n      case ClassComponent:\n        // Capture and retry\n        const errorInfo = value;\n        const ctor = workInProgress.type;\n        const instance = workInProgress.stateNode;\n        if (\n          (workInProgress.flags & DidCapture) === NoFlags &&\n          (typeof ctor.getDerivedStateFromError === 'function' ||\n            (instance !== null &&\n              typeof instance.componentDidCatch === 'function' &&\n              !isAlreadyFailedLegacyErrorBoundary(instance)))\n        ) {\n          workInProgress.flags |= ShouldCapture;\n          const lane = pickArbitraryLane(rootRenderLanes);\n          workInProgress.lanes = mergeLanes(workInProgress.lanes, lane);\n          // Schedule the error boundary to re-render using updated state\n          const update = createClassErrorUpdate(\n            workInProgress,\n            errorInfo,\n            lane,\n          );\n          enqueueCapturedUpdate(workInProgress, update);\n          return;\n        }\n        break;\n      default:\n        break;\n    }\n    workInProgress = workInProgress.return;\n  } while (workInProgress !== null);\n}\n\nexport {throwException, createRootErrorUpdate, createClassErrorUpdate};\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Fiber} from './ReactInternalTypes';\nimport type {Lanes, Lane} from './ReactFiberLane.old';\nimport type {\n  ReactScopeInstance,\n  ReactContext,\n  Wakeable,\n} from 'shared/ReactTypes';\nimport type {FiberRoot} from './ReactInternalTypes';\nimport type {\n  Instance,\n  Type,\n  Props,\n  Container,\n  ChildSet,\n} from './ReactFiberHostConfig';\nimport type {\n  SuspenseState,\n  SuspenseListRenderState,\n} from './ReactFiberSuspenseComponent.old';\nimport type {SuspenseContext} from './ReactFiberSuspenseContext.old';\nimport type {OffscreenState} from './ReactFiberOffscreenComponent';\nimport type {Cache, SpawnedCachePool} from './ReactFiberCacheComponent.old';\n\nimport {resetWorkInProgressVersions as resetMutableSourceWorkInProgressVersions} from './ReactMutableSource.old';\n\nimport {now} from './Scheduler';\n\nimport {\n  IndeterminateComponent,\n  FunctionComponent,\n  ClassComponent,\n  HostRoot,\n  HostComponent,\n  HostText,\n  HostPortal,\n  ContextProvider,\n  ContextConsumer,\n  ForwardRef,\n  Fragment,\n  Mode,\n  Profiler,\n  SuspenseComponent,\n  SuspenseListComponent,\n  MemoComponent,\n  SimpleMemoComponent,\n  LazyComponent,\n  IncompleteClassComponent,\n  ScopeComponent,\n  OffscreenComponent,\n  LegacyHiddenComponent,\n  CacheComponent,\n} from './ReactWorkTags';\nimport {NoMode, ConcurrentMode, ProfileMode} from './ReactTypeOfMode';\nimport {\n  Ref,\n  RefStatic,\n  Placement,\n  Update,\n  Visibility,\n  NoFlags,\n  DidCapture,\n  Snapshot,\n  ChildDeletion,\n  StaticMask,\n  MutationMask,\n} from './ReactFiberFlags';\nimport invariant from 'shared/invariant';\n\nimport {\n  createInstance,\n  createTextInstance,\n  appendInitialChild,\n  finalizeInitialChildren,\n  prepareUpdate,\n  supportsMutation,\n  supportsPersistence,\n  cloneInstance,\n  cloneHiddenInstance,\n  cloneHiddenTextInstance,\n  createContainerChildSet,\n  appendChildToContainerChildSet,\n  finalizeContainerChildren,\n  preparePortalMount,\n  prepareScopeUpdate,\n} from './ReactFiberHostConfig';\nimport {\n  getRootHostContainer,\n  popHostContext,\n  getHostContext,\n  popHostContainer,\n} from './ReactFiberHostContext.old';\nimport {\n  suspenseStackCursor,\n  InvisibleParentSuspenseContext,\n  hasSuspenseContext,\n  popSuspenseContext,\n  pushSuspenseContext,\n  setShallowSuspenseContext,\n  ForceSuspenseFallback,\n  setDefaultShallowSuspenseContext,\n} from './ReactFiberSuspenseContext.old';\nimport {findFirstSuspended} from './ReactFiberSuspenseComponent.old';\nimport {\n  isContextProvider as isLegacyContextProvider,\n  popContext as popLegacyContext,\n  popTopLevelContextObject as popTopLevelLegacyContextObject,\n} from './ReactFiberContext.old';\nimport {popProvider} from './ReactFiberNewContext.old';\nimport {\n  prepareToHydrateHostInstance,\n  prepareToHydrateHostTextInstance,\n  prepareToHydrateHostSuspenseInstance,\n  popHydrationState,\n  resetHydrationState,\n  getIsHydrating,\n} from './ReactFiberHydrationContext.old';\nimport {\n  enableSuspenseCallback,\n  enableSuspenseServerRenderer,\n  enableScopeAPI,\n  enableProfilerTimer,\n  enableCache,\n  enableSuspenseLayoutEffectSemantics,\n  enablePersistentOffscreenHostContainer,\n} from 'shared/ReactFeatureFlags';\nimport {\n  renderDidSuspend,\n  renderDidSuspendDelayIfPossible,\n  renderHasNotSuspendedYet,\n  popRenderLanes,\n  getRenderTargetTime,\n  subtreeRenderLanes,\n} from './ReactFiberWorkLoop.old';\nimport {\n  OffscreenLane,\n  SomeRetryLane,\n  NoLanes,\n  includesSomeLane,\n  mergeLanes,\n} from './ReactFiberLane.old';\nimport {resetChildFibers} from './ReactChildFiber.old';\nimport {createScopeInstance} from './ReactFiberScope.old';\nimport {transferActualDuration} from './ReactProfilerTimer.old';\nimport {\n  popCacheProvider,\n  popRootCachePool,\n  popCachePool,\n} from './ReactFiberCacheComponent.old';\n\nfunction markUpdate(workInProgress: Fiber) {\n  // Tag the fiber with an update effect. This turns a Placement into\n  // a PlacementAndUpdate.\n  workInProgress.flags |= Update;\n}\n\nfunction markRef(workInProgress: Fiber) {\n  workInProgress.flags |= Ref;\n  if (enableSuspenseLayoutEffectSemantics) {\n    workInProgress.flags |= RefStatic;\n  }\n}\n\nfunction hadNoMutationsEffects(current: null | Fiber, completedWork: Fiber) {\n  const didBailout = current !== null && current.child === completedWork.child;\n  if (didBailout) {\n    return true;\n  }\n\n  if ((completedWork.flags & ChildDeletion) !== NoFlags) {\n    return false;\n  }\n\n  // TODO: If we move the `hadNoMutationsEffects` call after `bubbleProperties`\n  // then we only have to check the `completedWork.subtreeFlags`.\n  let child = completedWork.child;\n  while (child !== null) {\n    if (\n      (child.flags & MutationMask) !== NoFlags ||\n      (child.subtreeFlags & MutationMask) !== NoFlags\n    ) {\n      return false;\n    }\n    child = child.sibling;\n  }\n  return true;\n}\n\nlet appendAllChildren;\nlet updateHostContainer;\nlet updateHostComponent;\nlet updateHostText;\nif (supportsMutation) {\n  // Mutation mode\n\n  appendAllChildren = function(\n    parent: Instance,\n    workInProgress: Fiber,\n    needsVisibilityToggle: boolean,\n    isHidden: boolean,\n  ) {\n    // We only have the top Fiber that was created but we need recurse down its\n    // children to find all the terminal nodes.\n    let node = workInProgress.child;\n    while (node !== null) {\n      if (node.tag === HostComponent || node.tag === HostText) {\n        appendInitialChild(parent, node.stateNode);\n      } else if (node.tag === HostPortal) {\n        // If we have a portal child, then we don't want to traverse\n        // down its children. Instead, we'll get insertions from each child in\n        // the portal directly.\n      } else if (node.child !== null) {\n        node.child.return = node;\n        node = node.child;\n        continue;\n      }\n      if (node === workInProgress) {\n        return;\n      }\n      while (node.sibling === null) {\n        if (node.return === null || node.return === workInProgress) {\n          return;\n        }\n        node = node.return;\n      }\n      node.sibling.return = node.return;\n      node = node.sibling;\n    }\n  };\n\n  updateHostContainer = function(current: null | Fiber, workInProgress: Fiber) {\n    // Noop\n  };\n  updateHostComponent = function(\n    current: Fiber,\n    workInProgress: Fiber,\n    type: Type,\n    newProps: Props,\n    rootContainerInstance: Container,\n  ) {\n    // If we have an alternate, that means this is an update and we need to\n    // schedule a side-effect to do the updates.\n    const oldProps = current.memoizedProps;\n    if (oldProps === newProps) {\n      // In mutation mode, this is sufficient for a bailout because\n      // we won't touch this node even if children changed.\n      return;\n    }\n\n    // If we get updated because one of our children updated, we don't\n    // have newProps so we'll have to reuse them.\n    // TODO: Split the update API as separate for the props vs. children.\n    // Even better would be if children weren't special cased at all tho.\n    const instance: Instance = workInProgress.stateNode;\n    const currentHostContext = getHostContext();\n    // TODO: Experiencing an error where oldProps is null. Suggests a host\n    // component is hitting the resume path. Figure out why. Possibly\n    // related to `hidden`.\n    const updatePayload = prepareUpdate(\n      instance,\n      type,\n      oldProps,\n      newProps,\n      rootContainerInstance,\n      currentHostContext,\n    );\n    // TODO: Type this specific to this type of component.\n    workInProgress.updateQueue = (updatePayload: any);\n    // If the update payload indicates that there is a change or if there\n    // is a new ref we mark this as an update. All the work is done in commitWork.\n    if (updatePayload) {\n      markUpdate(workInProgress);\n    }\n  };\n  updateHostText = function(\n    current: Fiber,\n    workInProgress: Fiber,\n    oldText: string,\n    newText: string,\n  ) {\n    // If the text differs, mark it as an update. All the work in done in commitWork.\n    if (oldText !== newText) {\n      markUpdate(workInProgress);\n    }\n  };\n} else if (supportsPersistence) {\n  // Persistent host tree mode\n\n  appendAllChildren = function(\n    parent: Instance,\n    workInProgress: Fiber,\n    needsVisibilityToggle: boolean,\n    isHidden: boolean,\n  ) {\n    // We only have the top Fiber that was created but we need recurse down its\n    // children to find all the terminal nodes.\n    let node = workInProgress.child;\n    while (node !== null) {\n      // eslint-disable-next-line no-labels\n      branches: if (node.tag === HostComponent) {\n        let instance = node.stateNode;\n        if (needsVisibilityToggle && isHidden) {\n          // This child is inside a timed out tree. Hide it.\n          const props = node.memoizedProps;\n          const type = node.type;\n          instance = cloneHiddenInstance(instance, type, props, node);\n        }\n        appendInitialChild(parent, instance);\n      } else if (node.tag === HostText) {\n        let instance = node.stateNode;\n        if (needsVisibilityToggle && isHidden) {\n          // This child is inside a timed out tree. Hide it.\n          const text = node.memoizedProps;\n          instance = cloneHiddenTextInstance(instance, text, node);\n        }\n        appendInitialChild(parent, instance);\n      } else if (node.tag === HostPortal) {\n        // If we have a portal child, then we don't want to traverse\n        // down its children. Instead, we'll get insertions from each child in\n        // the portal directly.\n      } else if (\n        node.tag === OffscreenComponent &&\n        node.memoizedState !== null\n      ) {\n        // The children in this boundary are hidden. Toggle their visibility\n        // before appending.\n        const child = node.child;\n        if (child !== null) {\n          child.return = node;\n        }\n        if (enablePersistentOffscreenHostContainer) {\n          appendAllChildren(parent, node, false, false);\n        } else {\n          appendAllChildren(parent, node, true, true);\n        }\n      } else if (node.child !== null) {\n        node.child.return = node;\n        node = node.child;\n        continue;\n      }\n      // $FlowFixMe This is correct but Flow is confused by the labeled break.\n      node = (node: Fiber);\n      if (node === workInProgress) {\n        return;\n      }\n      while (node.sibling === null) {\n        if (node.return === null || node.return === workInProgress) {\n          return;\n        }\n        node = node.return;\n      }\n      node.sibling.return = node.return;\n      node = node.sibling;\n    }\n  };\n\n  // An unfortunate fork of appendAllChildren because we have two different parent types.\n  const appendAllChildrenToContainer = function(\n    containerChildSet: ChildSet,\n    workInProgress: Fiber,\n    needsVisibilityToggle: boolean,\n    isHidden: boolean,\n  ) {\n    // We only have the top Fiber that was created but we need recurse down its\n    // children to find all the terminal nodes.\n    let node = workInProgress.child;\n    while (node !== null) {\n      // eslint-disable-next-line no-labels\n      branches: if (node.tag === HostComponent) {\n        let instance = node.stateNode;\n        if (needsVisibilityToggle && isHidden) {\n          // This child is inside a timed out tree. Hide it.\n          const props = node.memoizedProps;\n          const type = node.type;\n          instance = cloneHiddenInstance(instance, type, props, node);\n        }\n        appendChildToContainerChildSet(containerChildSet, instance);\n      } else if (node.tag === HostText) {\n        let instance = node.stateNode;\n        if (needsVisibilityToggle && isHidden) {\n          // This child is inside a timed out tree. Hide it.\n          const text = node.memoizedProps;\n          instance = cloneHiddenTextInstance(instance, text, node);\n        }\n        appendChildToContainerChildSet(containerChildSet, instance);\n      } else if (node.tag === HostPortal) {\n        // If we have a portal child, then we don't want to traverse\n        // down its children. Instead, we'll get insertions from each child in\n        // the portal directly.\n      } else if (\n        node.tag === OffscreenComponent &&\n        node.memoizedState !== null\n      ) {\n        // The children in this boundary are hidden. Toggle their visibility\n        // before appending.\n        const child = node.child;\n        if (child !== null) {\n          child.return = node;\n        }\n        if (enablePersistentOffscreenHostContainer) {\n          appendAllChildrenToContainer(containerChildSet, node, false, false);\n        } else {\n          appendAllChildrenToContainer(containerChildSet, node, true, true);\n        }\n      } else if (node.child !== null) {\n        node.child.return = node;\n        node = node.child;\n        continue;\n      }\n      // $FlowFixMe This is correct but Flow is confused by the labeled break.\n      node = (node: Fiber);\n      if (node === workInProgress) {\n        return;\n      }\n      while (node.sibling === null) {\n        if (node.return === null || node.return === workInProgress) {\n          return;\n        }\n        node = node.return;\n      }\n      node.sibling.return = node.return;\n      node = node.sibling;\n    }\n  };\n  updateHostContainer = function(current: null | Fiber, workInProgress: Fiber) {\n    const portalOrRoot: {\n      containerInfo: Container,\n      pendingChildren: ChildSet,\n      ...\n    } = workInProgress.stateNode;\n    const childrenUnchanged = hadNoMutationsEffects(current, workInProgress);\n    if (childrenUnchanged) {\n      // No changes, just reuse the existing instance.\n    } else {\n      const container = portalOrRoot.containerInfo;\n      const newChildSet = createContainerChildSet(container);\n      // If children might have changed, we have to add them all to the set.\n      appendAllChildrenToContainer(newChildSet, workInProgress, false, false);\n      portalOrRoot.pendingChildren = newChildSet;\n      // Schedule an update on the container to swap out the container.\n      markUpdate(workInProgress);\n      finalizeContainerChildren(container, newChildSet);\n    }\n  };\n  updateHostComponent = function(\n    current: Fiber,\n    workInProgress: Fiber,\n    type: Type,\n    newProps: Props,\n    rootContainerInstance: Container,\n  ) {\n    const currentInstance = current.stateNode;\n    const oldProps = current.memoizedProps;\n    // If there are no effects associated with this node, then none of our children had any updates.\n    // This guarantees that we can reuse all of them.\n    const childrenUnchanged = hadNoMutationsEffects(current, workInProgress);\n    if (childrenUnchanged && oldProps === newProps) {\n      // No changes, just reuse the existing instance.\n      // Note that this might release a previous clone.\n      workInProgress.stateNode = currentInstance;\n      return;\n    }\n    const recyclableInstance: Instance = workInProgress.stateNode;\n    const currentHostContext = getHostContext();\n    let updatePayload = null;\n    if (oldProps !== newProps) {\n      updatePayload = prepareUpdate(\n        recyclableInstance,\n        type,\n        oldProps,\n        newProps,\n        rootContainerInstance,\n        currentHostContext,\n      );\n    }\n    if (childrenUnchanged && updatePayload === null) {\n      // No changes, just reuse the existing instance.\n      // Note that this might release a previous clone.\n      workInProgress.stateNode = currentInstance;\n      return;\n    }\n    const newInstance = cloneInstance(\n      currentInstance,\n      updatePayload,\n      type,\n      oldProps,\n      newProps,\n      workInProgress,\n      childrenUnchanged,\n      recyclableInstance,\n    );\n    if (\n      finalizeInitialChildren(\n        newInstance,\n        type,\n        newProps,\n        rootContainerInstance,\n        currentHostContext,\n      )\n    ) {\n      markUpdate(workInProgress);\n    }\n    workInProgress.stateNode = newInstance;\n    if (childrenUnchanged) {\n      // If there are no other effects in this tree, we need to flag this node as having one.\n      // Even though we're not going to use it for anything.\n      // Otherwise parents won't know that there are new children to propagate upwards.\n      markUpdate(workInProgress);\n    } else {\n      // If children might have changed, we have to add them all to the set.\n      appendAllChildren(newInstance, workInProgress, false, false);\n    }\n  };\n  updateHostText = function(\n    current: Fiber,\n    workInProgress: Fiber,\n    oldText: string,\n    newText: string,\n  ) {\n    if (oldText !== newText) {\n      // If the text content differs, we'll create a new text instance for it.\n      const rootContainerInstance = getRootHostContainer();\n      const currentHostContext = getHostContext();\n      workInProgress.stateNode = createTextInstance(\n        newText,\n        rootContainerInstance,\n        currentHostContext,\n        workInProgress,\n      );\n      // We'll have to mark it as having an effect, even though we won't use the effect for anything.\n      // This lets the parents know that at least one of their children has changed.\n      markUpdate(workInProgress);\n    } else {\n      workInProgress.stateNode = current.stateNode;\n    }\n  };\n} else {\n  // No host operations\n  updateHostContainer = function(current: null | Fiber, workInProgress: Fiber) {\n    // Noop\n  };\n  updateHostComponent = function(\n    current: Fiber,\n    workInProgress: Fiber,\n    type: Type,\n    newProps: Props,\n    rootContainerInstance: Container,\n  ) {\n    // Noop\n  };\n  updateHostText = function(\n    current: Fiber,\n    workInProgress: Fiber,\n    oldText: string,\n    newText: string,\n  ) {\n    // Noop\n  };\n}\n\nfunction cutOffTailIfNeeded(\n  renderState: SuspenseListRenderState,\n  hasRenderedATailFallback: boolean,\n) {\n  if (getIsHydrating()) {\n    // If we're hydrating, we should consume as many items as we can\n    // so we don't leave any behind.\n    return;\n  }\n  switch (renderState.tailMode) {\n    case 'hidden': {\n      // Any insertions at the end of the tail list after this point\n      // should be invisible. If there are already mounted boundaries\n      // anything before them are not considered for collapsing.\n      // Therefore we need to go through the whole tail to find if\n      // there are any.\n      let tailNode = renderState.tail;\n      let lastTailNode = null;\n      while (tailNode !== null) {\n        if (tailNode.alternate !== null) {\n          lastTailNode = tailNode;\n        }\n        tailNode = tailNode.sibling;\n      }\n      // Next we're simply going to delete all insertions after the\n      // last rendered item.\n      if (lastTailNode === null) {\n        // All remaining items in the tail are insertions.\n        renderState.tail = null;\n      } else {\n        // Detach the insertion after the last node that was already\n        // inserted.\n        lastTailNode.sibling = null;\n      }\n      break;\n    }\n    case 'collapsed': {\n      // Any insertions at the end of the tail list after this point\n      // should be invisible. If there are already mounted boundaries\n      // anything before them are not considered for collapsing.\n      // Therefore we need to go through the whole tail to find if\n      // there are any.\n      let tailNode = renderState.tail;\n      let lastTailNode = null;\n      while (tailNode !== null) {\n        if (tailNode.alternate !== null) {\n          lastTailNode = tailNode;\n        }\n        tailNode = tailNode.sibling;\n      }\n      // Next we're simply going to delete all insertions after the\n      // last rendered item.\n      if (lastTailNode === null) {\n        // All remaining items in the tail are insertions.\n        if (!hasRenderedATailFallback && renderState.tail !== null) {\n          // We suspended during the head. We want to show at least one\n          // row at the tail. So we'll keep on and cut off the rest.\n          renderState.tail.sibling = null;\n        } else {\n          renderState.tail = null;\n        }\n      } else {\n        // Detach the insertion after the last node that was already\n        // inserted.\n        lastTailNode.sibling = null;\n      }\n      break;\n    }\n  }\n}\n\nfunction bubbleProperties(completedWork: Fiber) {\n  const didBailout =\n    completedWork.alternate !== null &&\n    completedWork.alternate.child === completedWork.child;\n\n  let newChildLanes = NoLanes;\n  let subtreeFlags = NoFlags;\n\n  if (!didBailout) {\n    // Bubble up the earliest expiration time.\n    if (enableProfilerTimer && (completedWork.mode & ProfileMode) !== NoMode) {\n      // In profiling mode, resetChildExpirationTime is also used to reset\n      // profiler durations.\n      let actualDuration = completedWork.actualDuration;\n      let treeBaseDuration = ((completedWork.selfBaseDuration: any): number);\n\n      let child = completedWork.child;\n      while (child !== null) {\n        newChildLanes = mergeLanes(\n          newChildLanes,\n          mergeLanes(child.lanes, child.childLanes),\n        );\n\n        subtreeFlags |= child.subtreeFlags;\n        subtreeFlags |= child.flags;\n\n        // When a fiber is cloned, its actualDuration is reset to 0. This value will\n        // only be updated if work is done on the fiber (i.e. it doesn't bailout).\n        // When work is done, it should bubble to the parent's actualDuration. If\n        // the fiber has not been cloned though, (meaning no work was done), then\n        // this value will reflect the amount of time spent working on a previous\n        // render. In that case it should not bubble. We determine whether it was\n        // cloned by comparing the child pointer.\n        actualDuration += child.actualDuration;\n\n        treeBaseDuration += child.treeBaseDuration;\n        child = child.sibling;\n      }\n\n      completedWork.actualDuration = actualDuration;\n      completedWork.treeBaseDuration = treeBaseDuration;\n    } else {\n      let child = completedWork.child;\n      while (child !== null) {\n        newChildLanes = mergeLanes(\n          newChildLanes,\n          mergeLanes(child.lanes, child.childLanes),\n        );\n\n        subtreeFlags |= child.subtreeFlags;\n        subtreeFlags |= child.flags;\n\n        // Update the return pointer so the tree is consistent. This is a code\n        // smell because it assumes the commit phase is never concurrent with\n        // the render phase. Will address during refactor to alternate model.\n        child.return = completedWork;\n\n        child = child.sibling;\n      }\n    }\n\n    completedWork.subtreeFlags |= subtreeFlags;\n  } else {\n    // Bubble up the earliest expiration time.\n    if (enableProfilerTimer && (completedWork.mode & ProfileMode) !== NoMode) {\n      // In profiling mode, resetChildExpirationTime is also used to reset\n      // profiler durations.\n      let treeBaseDuration = ((completedWork.selfBaseDuration: any): number);\n\n      let child = completedWork.child;\n      while (child !== null) {\n        newChildLanes = mergeLanes(\n          newChildLanes,\n          mergeLanes(child.lanes, child.childLanes),\n        );\n\n        // \"Static\" flags share the lifetime of the fiber/hook they belong to,\n        // so we should bubble those up even during a bailout. All the other\n        // flags have a lifetime only of a single render + commit, so we should\n        // ignore them.\n        subtreeFlags |= child.subtreeFlags & StaticMask;\n        subtreeFlags |= child.flags & StaticMask;\n\n        treeBaseDuration += child.treeBaseDuration;\n        child = child.sibling;\n      }\n\n      completedWork.treeBaseDuration = treeBaseDuration;\n    } else {\n      let child = completedWork.child;\n      while (child !== null) {\n        newChildLanes = mergeLanes(\n          newChildLanes,\n          mergeLanes(child.lanes, child.childLanes),\n        );\n\n        // \"Static\" flags share the lifetime of the fiber/hook they belong to,\n        // so we should bubble those up even during a bailout. All the other\n        // flags have a lifetime only of a single render + commit, so we should\n        // ignore them.\n        subtreeFlags |= child.subtreeFlags & StaticMask;\n        subtreeFlags |= child.flags & StaticMask;\n\n        // Update the return pointer so the tree is consistent. This is a code\n        // smell because it assumes the commit phase is never concurrent with\n        // the render phase. Will address during refactor to alternate model.\n        child.return = completedWork;\n\n        child = child.sibling;\n      }\n    }\n\n    completedWork.subtreeFlags |= subtreeFlags;\n  }\n\n  completedWork.childLanes = newChildLanes;\n\n  return didBailout;\n}\n\nexport function completeSuspendedOffscreenHostContainer(\n  current: Fiber | null,\n  workInProgress: Fiber,\n) {\n  // This is a fork of the complete phase for HostComponent. We use it when\n  // a suspense tree is in its fallback state, because in that case the primary\n  // tree that includes the offscreen boundary is skipped over without a\n  // regular complete phase.\n  //\n  // We can optimize this path further by inlining the update logic for\n  // offscreen instances specifically, i.e. skipping the `prepareUpdate` call.\n  const rootContainerInstance = getRootHostContainer();\n  const type = workInProgress.type;\n  const newProps = workInProgress.memoizedProps;\n  if (current !== null) {\n    updateHostComponent(\n      current,\n      workInProgress,\n      type,\n      newProps,\n      rootContainerInstance,\n    );\n  } else {\n    const currentHostContext = getHostContext();\n    const instance = createInstance(\n      type,\n      newProps,\n      rootContainerInstance,\n      currentHostContext,\n      workInProgress,\n    );\n\n    appendAllChildren(instance, workInProgress, false, false);\n\n    workInProgress.stateNode = instance;\n\n    // Certain renderers require commit-time effects for initial mount.\n    // (eg DOM renderer supports auto-focus for certain elements).\n    // Make sure such renderers get scheduled for later work.\n    if (\n      finalizeInitialChildren(\n        instance,\n        type,\n        newProps,\n        rootContainerInstance,\n        currentHostContext,\n      )\n    ) {\n      markUpdate(workInProgress);\n    }\n\n    if (workInProgress.ref !== null) {\n      // If there is a ref on a host node we need to schedule a callback\n      markRef(workInProgress);\n    }\n  }\n  bubbleProperties(workInProgress);\n}\n\nfunction completeWork(\n  current: Fiber | null,\n  workInProgress: Fiber,\n  renderLanes: Lanes,\n): Fiber | null {\n  const newProps = workInProgress.pendingProps;\n\n  switch (workInProgress.tag) {\n    case IndeterminateComponent:\n    case LazyComponent:\n    case SimpleMemoComponent:\n    case FunctionComponent:\n    case ForwardRef:\n    case Fragment:\n    case Mode:\n    case Profiler:\n    case ContextConsumer:\n    case MemoComponent:\n      bubbleProperties(workInProgress);\n      return null;\n    case ClassComponent: {\n      const Component = workInProgress.type;\n      if (isLegacyContextProvider(Component)) {\n        popLegacyContext(workInProgress);\n      }\n      bubbleProperties(workInProgress);\n      return null;\n    }\n    case HostRoot: {\n      const fiberRoot = (workInProgress.stateNode: FiberRoot);\n      if (enableCache) {\n        popRootCachePool(fiberRoot, renderLanes);\n\n        const cache: Cache = workInProgress.memoizedState.cache;\n        popCacheProvider(workInProgress, cache);\n      }\n      popHostContainer(workInProgress);\n      popTopLevelLegacyContextObject(workInProgress);\n      resetMutableSourceWorkInProgressVersions();\n      if (fiberRoot.pendingContext) {\n        fiberRoot.context = fiberRoot.pendingContext;\n        fiberRoot.pendingContext = null;\n      }\n      if (current === null || current.child === null) {\n        // If we hydrated, pop so that we can delete any remaining children\n        // that weren't hydrated.\n        const wasHydrated = popHydrationState(workInProgress);\n        if (wasHydrated) {\n          // If we hydrated, then we'll need to schedule an update for\n          // the commit side-effects on the root.\n          markUpdate(workInProgress);\n        } else if (!fiberRoot.hydrate) {\n          // Schedule an effect to clear this container at the start of the next commit.\n          // This handles the case of React rendering into a container with previous children.\n          // It's also safe to do for updates too, because current.child would only be null\n          // if the previous render was null (so the the container would already be empty).\n          workInProgress.flags |= Snapshot;\n        }\n      }\n      updateHostContainer(current, workInProgress);\n      bubbleProperties(workInProgress);\n      return null;\n    }\n    case HostComponent: {\n      popHostContext(workInProgress);\n      const rootContainerInstance = getRootHostContainer();\n      const type = workInProgress.type;\n      if (current !== null && workInProgress.stateNode != null) {\n        updateHostComponent(\n          current,\n          workInProgress,\n          type,\n          newProps,\n          rootContainerInstance,\n        );\n\n        if (current.ref !== workInProgress.ref) {\n          markRef(workInProgress);\n        }\n      } else {\n        if (!newProps) {\n          invariant(\n            workInProgress.stateNode !== null,\n            'We must have new props for new mounts. This error is likely ' +\n              'caused by a bug in React. Please file an issue.',\n          );\n          // This can happen when we abort work.\n          bubbleProperties(workInProgress);\n          return null;\n        }\n\n        const currentHostContext = getHostContext();\n        // TODO: Move createInstance to beginWork and keep it on a context\n        // \"stack\" as the parent. Then append children as we go in beginWork\n        // or completeWork depending on whether we want to add them top->down or\n        // bottom->up. Top->down is faster in IE11.\n        const wasHydrated = popHydrationState(workInProgress);\n        if (wasHydrated) {\n          // TODO: Move this and createInstance step into the beginPhase\n          // to consolidate.\n          if (\n            prepareToHydrateHostInstance(\n              workInProgress,\n              rootContainerInstance,\n              currentHostContext,\n            )\n          ) {\n            // If changes to the hydrated node need to be applied at the\n            // commit-phase we mark this as such.\n            markUpdate(workInProgress);\n          }\n        } else {\n          const instance = createInstance(\n            type,\n            newProps,\n            rootContainerInstance,\n            currentHostContext,\n            workInProgress,\n          );\n\n          appendAllChildren(instance, workInProgress, false, false);\n\n          workInProgress.stateNode = instance;\n\n          // Certain renderers require commit-time effects for initial mount.\n          // (eg DOM renderer supports auto-focus for certain elements).\n          // Make sure such renderers get scheduled for later work.\n          if (\n            finalizeInitialChildren(\n              instance,\n              type,\n              newProps,\n              rootContainerInstance,\n              currentHostContext,\n            )\n          ) {\n            markUpdate(workInProgress);\n          }\n        }\n\n        if (workInProgress.ref !== null) {\n          // If there is a ref on a host node we need to schedule a callback\n          markRef(workInProgress);\n        }\n      }\n      bubbleProperties(workInProgress);\n      return null;\n    }\n    case HostText: {\n      const newText = newProps;\n      if (current && workInProgress.stateNode != null) {\n        const oldText = current.memoizedProps;\n        // If we have an alternate, that means this is an update and we need\n        // to schedule a side-effect to do the updates.\n        updateHostText(current, workInProgress, oldText, newText);\n      } else {\n        if (typeof newText !== 'string') {\n          invariant(\n            workInProgress.stateNode !== null,\n            'We must have new props for new mounts. This error is likely ' +\n              'caused by a bug in React. Please file an issue.',\n          );\n          // This can happen when we abort work.\n        }\n        const rootContainerInstance = getRootHostContainer();\n        const currentHostContext = getHostContext();\n        const wasHydrated = popHydrationState(workInProgress);\n        if (wasHydrated) {\n          if (prepareToHydrateHostTextInstance(workInProgress)) {\n            markUpdate(workInProgress);\n          }\n        } else {\n          workInProgress.stateNode = createTextInstance(\n            newText,\n            rootContainerInstance,\n            currentHostContext,\n            workInProgress,\n          );\n        }\n      }\n      bubbleProperties(workInProgress);\n      return null;\n    }\n    case SuspenseComponent: {\n      popSuspenseContext(workInProgress);\n      const nextState: null | SuspenseState = workInProgress.memoizedState;\n\n      if (enableSuspenseServerRenderer) {\n        if (nextState !== null && nextState.dehydrated !== null) {\n          if (current === null) {\n            const wasHydrated = popHydrationState(workInProgress);\n            invariant(\n              wasHydrated,\n              'A dehydrated suspense component was completed without a hydrated node. ' +\n                'This is probably a bug in React.',\n            );\n            prepareToHydrateHostSuspenseInstance(workInProgress);\n            bubbleProperties(workInProgress);\n            if (enableProfilerTimer) {\n              if ((workInProgress.mode & ProfileMode) !== NoMode) {\n                const isTimedOutSuspense = nextState !== null;\n                if (isTimedOutSuspense) {\n                  // Don't count time spent in a timed out Suspense subtree as part of the base duration.\n                  const primaryChildFragment = workInProgress.child;\n                  if (primaryChildFragment !== null) {\n                    // $FlowFixMe Flow doesn't support type casting in combination with the -= operator\n                    workInProgress.treeBaseDuration -= ((primaryChildFragment.treeBaseDuration: any): number);\n                  }\n                }\n              }\n            }\n            return null;\n          } else {\n            // We should never have been in a hydration state if we didn't have a current.\n            // However, in some of those paths, we might have reentered a hydration state\n            // and then we might be inside a hydration state. In that case, we'll need to exit out of it.\n            resetHydrationState();\n            if ((workInProgress.flags & DidCapture) === NoFlags) {\n              // This boundary did not suspend so it's now hydrated and unsuspended.\n              workInProgress.memoizedState = null;\n            }\n            // If nothing suspended, we need to schedule an effect to mark this boundary\n            // as having hydrated so events know that they're free to be invoked.\n            // It's also a signal to replay events and the suspense callback.\n            // If something suspended, schedule an effect to attach retry listeners.\n            // So we might as well always mark this.\n            workInProgress.flags |= Update;\n            bubbleProperties(workInProgress);\n            if (enableProfilerTimer) {\n              if ((workInProgress.mode & ProfileMode) !== NoMode) {\n                const isTimedOutSuspense = nextState !== null;\n                if (isTimedOutSuspense) {\n                  // Don't count time spent in a timed out Suspense subtree as part of the base duration.\n                  const primaryChildFragment = workInProgress.child;\n                  if (primaryChildFragment !== null) {\n                    // $FlowFixMe Flow doesn't support type casting in combination with the -= operator\n                    workInProgress.treeBaseDuration -= ((primaryChildFragment.treeBaseDuration: any): number);\n                  }\n                }\n              }\n            }\n            return null;\n          }\n        }\n      }\n\n      if ((workInProgress.flags & DidCapture) !== NoFlags) {\n        // Something suspended. Re-render with the fallback children.\n        workInProgress.lanes = renderLanes;\n        // Do not reset the effect list.\n        if (\n          enableProfilerTimer &&\n          (workInProgress.mode & ProfileMode) !== NoMode\n        ) {\n          transferActualDuration(workInProgress);\n        }\n        // Don't bubble properties in this case.\n        return workInProgress;\n      }\n\n      const nextDidTimeout = nextState !== null;\n      let prevDidTimeout = false;\n      if (current === null) {\n        popHydrationState(workInProgress);\n      } else {\n        const prevState: null | SuspenseState = current.memoizedState;\n        prevDidTimeout = prevState !== null;\n      }\n\n      // If the suspended state of the boundary changes, we need to schedule\n      // an effect to toggle the subtree's visibility. When we switch from\n      // fallback -> primary, the inner Offscreen fiber schedules this effect\n      // as part of its normal complete phase. But when we switch from\n      // primary -> fallback, the inner Offscreen fiber does not have a complete\n      // phase. So we need to schedule its effect here.\n      //\n      // We also use this flag to connect/disconnect the effects, but the same\n      // logic applies: when re-connecting, the Offscreen fiber's complete\n      // phase will handle scheduling the effect. It's only when the fallback\n      // is active that we have to do anything special.\n      if (nextDidTimeout && !prevDidTimeout) {\n        const offscreenFiber: Fiber = (workInProgress.child: any);\n        offscreenFiber.flags |= Visibility;\n\n        // TODO: This will still suspend a synchronous tree if anything\n        // in the concurrent tree already suspended during this render.\n        // This is a known bug.\n        if ((workInProgress.mode & ConcurrentMode) !== NoMode) {\n          // TODO: Move this back to throwException because this is too late\n          // if this is a large tree which is common for initial loads. We\n          // don't know if we should restart a render or not until we get\n          // this marker, and this is too late.\n          // If this render already had a ping or lower pri updates,\n          // and this is the first time we know we're going to suspend we\n          // should be able to immediately restart from within throwException.\n          const hasInvisibleChildContext =\n            current === null &&\n            workInProgress.memoizedProps.unstable_avoidThisFallback !== true;\n          if (\n            hasInvisibleChildContext ||\n            hasSuspenseContext(\n              suspenseStackCursor.current,\n              (InvisibleParentSuspenseContext: SuspenseContext),\n            )\n          ) {\n            // If this was in an invisible tree or a new render, then showing\n            // this boundary is ok.\n            renderDidSuspend();\n          } else {\n            // Otherwise, we're going to have to hide content so we should\n            // suspend for longer if possible.\n            renderDidSuspendDelayIfPossible();\n          }\n        }\n      }\n\n      const wakeables: Set<Wakeable> | null = (workInProgress.updateQueue: any);\n      if (wakeables !== null) {\n        // Schedule an effect to attach a retry listener to the promise.\n        // TODO: Move to passive phase\n        workInProgress.flags |= Update;\n      }\n\n      if (\n        enableSuspenseCallback &&\n        workInProgress.updateQueue !== null &&\n        workInProgress.memoizedProps.suspenseCallback != null\n      ) {\n        // Always notify the callback\n        // TODO: Move to passive phase\n        workInProgress.flags |= Update;\n      }\n      bubbleProperties(workInProgress);\n      if (enableProfilerTimer) {\n        if ((workInProgress.mode & ProfileMode) !== NoMode) {\n          if (nextDidTimeout) {\n            // Don't count time spent in a timed out Suspense subtree as part of the base duration.\n            const primaryChildFragment = workInProgress.child;\n            if (primaryChildFragment !== null) {\n              // $FlowFixMe Flow doesn't support type casting in combination with the -= operator\n              workInProgress.treeBaseDuration -= ((primaryChildFragment.treeBaseDuration: any): number);\n            }\n          }\n        }\n      }\n      return null;\n    }\n    case HostPortal:\n      popHostContainer(workInProgress);\n      updateHostContainer(current, workInProgress);\n      if (current === null) {\n        preparePortalMount(workInProgress.stateNode.containerInfo);\n      }\n      bubbleProperties(workInProgress);\n      return null;\n    case ContextProvider:\n      // Pop provider fiber\n      const context: ReactContext<any> = workInProgress.type._context;\n      popProvider(context, workInProgress);\n      bubbleProperties(workInProgress);\n      return null;\n    case IncompleteClassComponent: {\n      // Same as class component case. I put it down here so that the tags are\n      // sequential to ensure this switch is compiled to a jump table.\n      const Component = workInProgress.type;\n      if (isLegacyContextProvider(Component)) {\n        popLegacyContext(workInProgress);\n      }\n      bubbleProperties(workInProgress);\n      return null;\n    }\n    case SuspenseListComponent: {\n      popSuspenseContext(workInProgress);\n\n      const renderState: null | SuspenseListRenderState =\n        workInProgress.memoizedState;\n\n      if (renderState === null) {\n        // We're running in the default, \"independent\" mode.\n        // We don't do anything in this mode.\n        bubbleProperties(workInProgress);\n        return null;\n      }\n\n      let didSuspendAlready = (workInProgress.flags & DidCapture) !== NoFlags;\n\n      const renderedTail = renderState.rendering;\n      if (renderedTail === null) {\n        // We just rendered the head.\n        if (!didSuspendAlready) {\n          // This is the first pass. We need to figure out if anything is still\n          // suspended in the rendered set.\n\n          // If new content unsuspended, but there's still some content that\n          // didn't. Then we need to do a second pass that forces everything\n          // to keep showing their fallbacks.\n\n          // We might be suspended if something in this render pass suspended, or\n          // something in the previous committed pass suspended. Otherwise,\n          // there's no chance so we can skip the expensive call to\n          // findFirstSuspended.\n          const cannotBeSuspended =\n            renderHasNotSuspendedYet() &&\n            (current === null || (current.flags & DidCapture) === NoFlags);\n          if (!cannotBeSuspended) {\n            let row = workInProgress.child;\n            while (row !== null) {\n              const suspended = findFirstSuspended(row);\n              if (suspended !== null) {\n                didSuspendAlready = true;\n                workInProgress.flags |= DidCapture;\n                cutOffTailIfNeeded(renderState, false);\n\n                // If this is a newly suspended tree, it might not get committed as\n                // part of the second pass. In that case nothing will subscribe to\n                // its thenables. Instead, we'll transfer its thenables to the\n                // SuspenseList so that it can retry if they resolve.\n                // There might be multiple of these in the list but since we're\n                // going to wait for all of them anyway, it doesn't really matter\n                // which ones gets to ping. In theory we could get clever and keep\n                // track of how many dependencies remain but it gets tricky because\n                // in the meantime, we can add/remove/change items and dependencies.\n                // We might bail out of the loop before finding any but that\n                // doesn't matter since that means that the other boundaries that\n                // we did find already has their listeners attached.\n                const newThenables = suspended.updateQueue;\n                if (newThenables !== null) {\n                  workInProgress.updateQueue = newThenables;\n                  workInProgress.flags |= Update;\n                }\n\n                // Rerender the whole list, but this time, we'll force fallbacks\n                // to stay in place.\n                // Reset the effect flags before doing the second pass since that's now invalid.\n                // Reset the child fibers to their original state.\n                workInProgress.subtreeFlags = NoFlags;\n                resetChildFibers(workInProgress, renderLanes);\n\n                // Set up the Suspense Context to force suspense and immediately\n                // rerender the children.\n                pushSuspenseContext(\n                  workInProgress,\n                  setShallowSuspenseContext(\n                    suspenseStackCursor.current,\n                    ForceSuspenseFallback,\n                  ),\n                );\n                // Don't bubble properties in this case.\n                return workInProgress.child;\n              }\n              row = row.sibling;\n            }\n          }\n\n          if (renderState.tail !== null && now() > getRenderTargetTime()) {\n            // We have already passed our CPU deadline but we still have rows\n            // left in the tail. We'll just give up further attempts to render\n            // the main content and only render fallbacks.\n            workInProgress.flags |= DidCapture;\n            didSuspendAlready = true;\n\n            cutOffTailIfNeeded(renderState, false);\n\n            // Since nothing actually suspended, there will nothing to ping this\n            // to get it started back up to attempt the next item. While in terms\n            // of priority this work has the same priority as this current render,\n            // it's not part of the same transition once the transition has\n            // committed. If it's sync, we still want to yield so that it can be\n            // painted. Conceptually, this is really the same as pinging.\n            // We can use any RetryLane even if it's the one currently rendering\n            // since we're leaving it behind on this node.\n            workInProgress.lanes = SomeRetryLane;\n          }\n        } else {\n          cutOffTailIfNeeded(renderState, false);\n        }\n        // Next we're going to render the tail.\n      } else {\n        // Append the rendered row to the child list.\n        if (!didSuspendAlready) {\n          const suspended = findFirstSuspended(renderedTail);\n          if (suspended !== null) {\n            workInProgress.flags |= DidCapture;\n            didSuspendAlready = true;\n\n            // Ensure we transfer the update queue to the parent so that it doesn't\n            // get lost if this row ends up dropped during a second pass.\n            const newThenables = suspended.updateQueue;\n            if (newThenables !== null) {\n              workInProgress.updateQueue = newThenables;\n              workInProgress.flags |= Update;\n            }\n\n            cutOffTailIfNeeded(renderState, true);\n            // This might have been modified.\n            if (\n              renderState.tail === null &&\n              renderState.tailMode === 'hidden' &&\n              !renderedTail.alternate &&\n              !getIsHydrating() // We don't cut it if we're hydrating.\n            ) {\n              // We're done.\n              bubbleProperties(workInProgress);\n              return null;\n            }\n          } else if (\n            // The time it took to render last row is greater than the remaining\n            // time we have to render. So rendering one more row would likely\n            // exceed it.\n            now() * 2 - renderState.renderingStartTime >\n              getRenderTargetTime() &&\n            renderLanes !== OffscreenLane\n          ) {\n            // We have now passed our CPU deadline and we'll just give up further\n            // attempts to render the main content and only render fallbacks.\n            // The assumption is that this is usually faster.\n            workInProgress.flags |= DidCapture;\n            didSuspendAlready = true;\n\n            cutOffTailIfNeeded(renderState, false);\n\n            // Since nothing actually suspended, there will nothing to ping this\n            // to get it started back up to attempt the next item. While in terms\n            // of priority this work has the same priority as this current render,\n            // it's not part of the same transition once the transition has\n            // committed. If it's sync, we still want to yield so that it can be\n            // painted. Conceptually, this is really the same as pinging.\n            // We can use any RetryLane even if it's the one currently rendering\n            // since we're leaving it behind on this node.\n            workInProgress.lanes = SomeRetryLane;\n          }\n        }\n        if (renderState.isBackwards) {\n          // The effect list of the backwards tail will have been added\n          // to the end. This breaks the guarantee that life-cycles fire in\n          // sibling order but that isn't a strong guarantee promised by React.\n          // Especially since these might also just pop in during future commits.\n          // Append to the beginning of the list.\n          renderedTail.sibling = workInProgress.child;\n          workInProgress.child = renderedTail;\n        } else {\n          const previousSibling = renderState.last;\n          if (previousSibling !== null) {\n            previousSibling.sibling = renderedTail;\n          } else {\n            workInProgress.child = renderedTail;\n          }\n          renderState.last = renderedTail;\n        }\n      }\n\n      if (renderState.tail !== null) {\n        // We still have tail rows to render.\n        // Pop a row.\n        const next = renderState.tail;\n        renderState.rendering = next;\n        renderState.tail = next.sibling;\n        renderState.renderingStartTime = now();\n        next.sibling = null;\n\n        // Restore the context.\n        // TODO: We can probably just avoid popping it instead and only\n        // setting it the first time we go from not suspended to suspended.\n        let suspenseContext = suspenseStackCursor.current;\n        if (didSuspendAlready) {\n          suspenseContext = setShallowSuspenseContext(\n            suspenseContext,\n            ForceSuspenseFallback,\n          );\n        } else {\n          suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);\n        }\n        pushSuspenseContext(workInProgress, suspenseContext);\n        // Do a pass over the next row.\n        // Don't bubble properties in this case.\n        return next;\n      }\n      bubbleProperties(workInProgress);\n      return null;\n    }\n    case ScopeComponent: {\n      if (enableScopeAPI) {\n        if (current === null) {\n          const scopeInstance: ReactScopeInstance = createScopeInstance();\n          workInProgress.stateNode = scopeInstance;\n          prepareScopeUpdate(scopeInstance, workInProgress);\n          if (workInProgress.ref !== null) {\n            markRef(workInProgress);\n            markUpdate(workInProgress);\n          }\n        } else {\n          if (workInProgress.ref !== null) {\n            markUpdate(workInProgress);\n          }\n          if (current.ref !== workInProgress.ref) {\n            markRef(workInProgress);\n          }\n        }\n        bubbleProperties(workInProgress);\n        return null;\n      }\n      break;\n    }\n    case OffscreenComponent:\n    case LegacyHiddenComponent: {\n      popRenderLanes(workInProgress);\n      const nextState: OffscreenState | null = workInProgress.memoizedState;\n      const nextIsHidden = nextState !== null;\n\n      if (current !== null) {\n        const prevState: OffscreenState | null = current.memoizedState;\n        const prevIsHidden = prevState !== null;\n        if (\n          prevIsHidden !== nextIsHidden &&\n          newProps.mode !== 'unstable-defer-without-hiding' &&\n          // LegacyHidden doesn't do any hiding — it only pre-renders.\n          workInProgress.tag !== LegacyHiddenComponent\n        ) {\n          workInProgress.flags |= Visibility;\n        }\n      }\n\n      if (!nextIsHidden || (workInProgress.mode & ConcurrentMode) === NoMode) {\n        bubbleProperties(workInProgress);\n      } else {\n        // Don't bubble properties for hidden children unless we're rendering\n        // at offscreen priority.\n        if (includesSomeLane(subtreeRenderLanes, (OffscreenLane: Lane))) {\n          bubbleProperties(workInProgress);\n          if (supportsMutation) {\n            // Check if there was an insertion or update in the hidden subtree.\n            // If so, we need to hide those nodes in the commit phase, so\n            // schedule a visibility effect.\n            if (\n              workInProgress.tag !== LegacyHiddenComponent &&\n              workInProgress.subtreeFlags & (Placement | Update) &&\n              newProps.mode !== 'unstable-defer-without-hiding'\n            ) {\n              workInProgress.flags |= Visibility;\n            }\n          }\n        }\n      }\n\n      if (enableCache) {\n        const spawnedCachePool: SpawnedCachePool | null = (workInProgress.updateQueue: any);\n        if (spawnedCachePool !== null) {\n          popCachePool(workInProgress);\n        }\n      }\n\n      return null;\n    }\n    case CacheComponent: {\n      if (enableCache) {\n        const cache: Cache = workInProgress.memoizedState.cache;\n        popCacheProvider(workInProgress, cache);\n        bubbleProperties(workInProgress);\n        return null;\n      }\n    }\n  }\n  invariant(\n    false,\n    'Unknown unit of work tag (%s). This error is likely caused by a bug in ' +\n      'React. Please file an issue.',\n    workInProgress.tag,\n  );\n}\n\nexport {completeWork};\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {ReactProviderType, ReactContext} from 'shared/ReactTypes';\nimport type {LazyComponent as LazyComponentType} from 'react/src/ReactLazy';\nimport type {Fiber, FiberRoot} from './ReactInternalTypes';\nimport type {TypeOfMode} from './ReactTypeOfMode';\nimport type {Lanes, Lane} from './ReactFiberLane.old';\nimport type {MutableSource} from 'shared/ReactTypes';\nimport type {\n  SuspenseState,\n  SuspenseListRenderState,\n  SuspenseListTailMode,\n} from './ReactFiberSuspenseComponent.old';\nimport type {SuspenseContext} from './ReactFiberSuspenseContext.old';\nimport type {\n  OffscreenProps,\n  OffscreenState,\n} from './ReactFiberOffscreenComponent';\nimport type {\n  Cache,\n  CacheComponentState,\n  SpawnedCachePool,\n} from './ReactFiberCacheComponent.old';\nimport type {UpdateQueue} from './ReactUpdateQueue.old';\n\nimport checkPropTypes from 'shared/checkPropTypes';\nimport {\n  markComponentRenderStarted,\n  markComponentRenderStopped,\n} from './SchedulingProfiler';\nimport {\n  IndeterminateComponent,\n  FunctionComponent,\n  ClassComponent,\n  HostRoot,\n  HostComponent,\n  HostText,\n  HostPortal,\n  ForwardRef,\n  Fragment,\n  Mode,\n  ContextProvider,\n  ContextConsumer,\n  Profiler,\n  SuspenseComponent,\n  SuspenseListComponent,\n  MemoComponent,\n  SimpleMemoComponent,\n  LazyComponent,\n  IncompleteClassComponent,\n  ScopeComponent,\n  OffscreenComponent,\n  LegacyHiddenComponent,\n  CacheComponent,\n} from './ReactWorkTags';\nimport {\n  NoFlags,\n  PerformedWork,\n  Placement,\n  Hydrating,\n  ContentReset,\n  DidCapture,\n  Update,\n  Ref,\n  RefStatic,\n  ChildDeletion,\n  ForceUpdateForLegacySuspense,\n  StaticMask,\n  ShouldCapture,\n} from './ReactFiberFlags';\nimport ReactSharedInternals from 'shared/ReactSharedInternals';\nimport {\n  debugRenderPhaseSideEffectsForStrictMode,\n  disableLegacyContext,\n  disableModulePatternComponents,\n  enableProfilerCommitHooks,\n  enableProfilerTimer,\n  enableSuspenseServerRenderer,\n  warnAboutDefaultPropsOnFunctionComponents,\n  enableScopeAPI,\n  enableCache,\n  enableLazyContextPropagation,\n  enableSuspenseLayoutEffectSemantics,\n  enableSchedulingProfiler,\n  enablePersistentOffscreenHostContainer,\n} from 'shared/ReactFeatureFlags';\nimport invariant from 'shared/invariant';\nimport isArray from 'shared/isArray';\nimport shallowEqual from 'shared/shallowEqual';\nimport getComponentNameFromFiber from 'react-reconciler/src/getComponentNameFromFiber';\nimport getComponentNameFromType from 'shared/getComponentNameFromType';\nimport ReactStrictModeWarnings from './ReactStrictModeWarnings.old';\nimport {REACT_LAZY_TYPE, getIteratorFn} from 'shared/ReactSymbols';\nimport {\n  getCurrentFiberOwnerNameInDevOrNull,\n  setIsRendering,\n} from './ReactCurrentFiber';\nimport {\n  resolveFunctionForHotReloading,\n  resolveForwardRefForHotReloading,\n  resolveClassForHotReloading,\n} from './ReactFiberHotReloading.old';\n\nimport {\n  mountChildFibers,\n  reconcileChildFibers,\n  cloneChildFibers,\n} from './ReactChildFiber.old';\nimport {\n  processUpdateQueue,\n  cloneUpdateQueue,\n  initializeUpdateQueue,\n  enqueueCapturedUpdate,\n} from './ReactUpdateQueue.old';\nimport {\n  NoLane,\n  NoLanes,\n  SyncLane,\n  OffscreenLane,\n  DefaultHydrationLane,\n  SomeRetryLane,\n  NoTimestamp,\n  includesSomeLane,\n  laneToLanes,\n  removeLanes,\n  mergeLanes,\n  getBumpedLaneForHydration,\n  pickArbitraryLane,\n} from './ReactFiberLane.old';\nimport {\n  ConcurrentMode,\n  NoMode,\n  ProfileMode,\n  StrictLegacyMode,\n} from './ReactTypeOfMode';\nimport {\n  shouldSetTextContent,\n  isSuspenseInstancePending,\n  isSuspenseInstanceFallback,\n  registerSuspenseInstanceRetry,\n  supportsHydration,\n  isPrimaryRenderer,\n  supportsPersistence,\n  getOffscreenContainerProps,\n} from './ReactFiberHostConfig';\nimport type {SuspenseInstance} from './ReactFiberHostConfig';\nimport {\n  shouldError,\n  shouldSuspend,\n  setIsStrictModeForDevtools,\n} from './ReactFiberReconciler';\nimport {pushHostContext, pushHostContainer} from './ReactFiberHostContext.old';\nimport {\n  suspenseStackCursor,\n  pushSuspenseContext,\n  InvisibleParentSuspenseContext,\n  ForceSuspenseFallback,\n  hasSuspenseContext,\n  setDefaultShallowSuspenseContext,\n  addSubtreeSuspenseContext,\n  setShallowSuspenseContext,\n} from './ReactFiberSuspenseContext.old';\nimport {findFirstSuspended} from './ReactFiberSuspenseComponent.old';\nimport {\n  pushProvider,\n  propagateContextChange,\n  lazilyPropagateParentContextChanges,\n  propagateParentContextChangesToDeferredTree,\n  checkIfContextChanged,\n  readContext,\n  prepareToReadContext,\n  scheduleWorkOnParentPath,\n} from './ReactFiberNewContext.old';\nimport {renderWithHooks, bailoutHooks} from './ReactFiberHooks.old';\nimport {stopProfilerTimerIfRunning} from './ReactProfilerTimer.old';\nimport {\n  getMaskedContext,\n  getUnmaskedContext,\n  hasContextChanged as hasLegacyContextChanged,\n  pushContextProvider as pushLegacyContextProvider,\n  isContextProvider as isLegacyContextProvider,\n  pushTopLevelContextObject,\n  invalidateContextProvider,\n} from './ReactFiberContext.old';\nimport {\n  enterHydrationState,\n  reenterHydrationStateFromDehydratedSuspenseInstance,\n  resetHydrationState,\n  tryToClaimNextHydratableInstance,\n  warnIfHydrating,\n} from './ReactFiberHydrationContext.old';\nimport {\n  adoptClassInstance,\n  constructClassInstance,\n  mountClassInstance,\n  resumeMountClassInstance,\n  updateClassInstance,\n} from './ReactFiberClassComponent.old';\nimport {resolveDefaultProps} from './ReactFiberLazyComponent.old';\nimport {\n  resolveLazyComponentTag,\n  createFiberFromTypeAndProps,\n  createFiberFromFragment,\n  createFiberFromOffscreen,\n  createWorkInProgress,\n  createOffscreenHostContainerFiber,\n  isSimpleFunctionComponent,\n} from './ReactFiber.old';\nimport {\n  retryDehydratedSuspenseBoundary,\n  scheduleUpdateOnFiber,\n  renderDidSuspendDelayIfPossible,\n  markSkippedUpdateLanes,\n  getWorkInProgressRoot,\n  pushRenderLanes,\n  getExecutionContext,\n  RetryAfterError,\n  NoContext,\n} from './ReactFiberWorkLoop.old';\nimport {setWorkInProgressVersion} from './ReactMutableSource.old';\nimport {\n  requestCacheFromPool,\n  pushCacheProvider,\n  pushRootCachePool,\n  CacheContext,\n  getSuspendedCachePool,\n  restoreSpawnedCachePool,\n  getOffscreenDeferredCachePool,\n} from './ReactFiberCacheComponent.old';\nimport {createCapturedValue} from './ReactCapturedValue';\nimport {createClassErrorUpdate} from './ReactFiberThrow.old';\nimport {completeSuspendedOffscreenHostContainer} from './ReactFiberCompleteWork.old';\nimport is from 'shared/objectIs';\n\nconst ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;\n\nlet didReceiveUpdate: boolean = false;\n\nlet didWarnAboutBadClass;\nlet didWarnAboutModulePatternComponent;\nlet didWarnAboutContextTypeOnFunctionComponent;\nlet didWarnAboutGetDerivedStateOnFunctionComponent;\nlet didWarnAboutFunctionRefs;\nexport let didWarnAboutReassigningProps;\nlet didWarnAboutRevealOrder;\nlet didWarnAboutTailOptions;\nlet didWarnAboutDefaultPropsOnFunctionComponent;\n\nif (__DEV__) {\n  didWarnAboutBadClass = {};\n  didWarnAboutModulePatternComponent = {};\n  didWarnAboutContextTypeOnFunctionComponent = {};\n  didWarnAboutGetDerivedStateOnFunctionComponent = {};\n  didWarnAboutFunctionRefs = {};\n  didWarnAboutReassigningProps = false;\n  didWarnAboutRevealOrder = {};\n  didWarnAboutTailOptions = {};\n  didWarnAboutDefaultPropsOnFunctionComponent = {};\n}\n\nexport function reconcileChildren(\n  current: Fiber | null,\n  workInProgress: Fiber,\n  nextChildren: any,\n  renderLanes: Lanes,\n) {\n  if (current === null) {\n    // If this is a fresh new component that hasn't been rendered yet, we\n    // won't update its child set by applying minimal side-effects. Instead,\n    // we will add them all to the child before it gets rendered. That means\n    // we can optimize this reconciliation pass by not tracking side-effects.\n    workInProgress.child = mountChildFibers(\n      workInProgress,\n      null,\n      nextChildren,\n      renderLanes,\n    );\n  } else {\n    // If the current child is the same as the work in progress, it means that\n    // we haven't yet started any work on these children. Therefore, we use\n    // the clone algorithm to create a copy of all the current children.\n\n    // If we had any progressed work already, that is invalid at this point so\n    // let's throw it out.\n    workInProgress.child = reconcileChildFibers(\n      workInProgress,\n      current.child,\n      nextChildren,\n      renderLanes,\n    );\n  }\n}\n\nfunction forceUnmountCurrentAndReconcile(\n  current: Fiber,\n  workInProgress: Fiber,\n  nextChildren: any,\n  renderLanes: Lanes,\n) {\n  // This function is fork of reconcileChildren. It's used in cases where we\n  // want to reconcile without matching against the existing set. This has the\n  // effect of all current children being unmounted; even if the type and key\n  // are the same, the old child is unmounted and a new child is created.\n  //\n  // To do this, we're going to go through the reconcile algorithm twice. In\n  // the first pass, we schedule a deletion for all the current children by\n  // passing null.\n  workInProgress.child = reconcileChildFibers(\n    workInProgress,\n    current.child,\n    null,\n    renderLanes,\n  );\n  // In the second pass, we mount the new children. The trick here is that we\n  // pass null in place of where we usually pass the current child set. This has\n  // the effect of remounting all children regardless of whether their\n  // identities match.\n  workInProgress.child = reconcileChildFibers(\n    workInProgress,\n    null,\n    nextChildren,\n    renderLanes,\n  );\n}\n\nfunction updateForwardRef(\n  current: Fiber | null,\n  workInProgress: Fiber,\n  Component: any,\n  nextProps: any,\n  renderLanes: Lanes,\n) {\n  // TODO: current can be non-null here even if the component\n  // hasn't yet mounted. This happens after the first render suspends.\n  // We'll need to figure out if this is fine or can cause issues.\n\n  if (__DEV__) {\n    if (workInProgress.type !== workInProgress.elementType) {\n      // Lazy component props can't be validated in createElement\n      // because they're only guaranteed to be resolved here.\n      const innerPropTypes = Component.propTypes;\n      if (innerPropTypes) {\n        checkPropTypes(\n          innerPropTypes,\n          nextProps, // Resolved props\n          'prop',\n          getComponentNameFromType(Component),\n        );\n      }\n    }\n  }\n\n  const render = Component.render;\n  const ref = workInProgress.ref;\n\n  // The rest is a fork of updateFunctionComponent\n  let nextChildren;\n  prepareToReadContext(workInProgress, renderLanes);\n  if (enableSchedulingProfiler) {\n    markComponentRenderStarted(workInProgress);\n  }\n  if (__DEV__) {\n    ReactCurrentOwner.current = workInProgress;\n    setIsRendering(true);\n    nextChildren = renderWithHooks(\n      current,\n      workInProgress,\n      render,\n      nextProps,\n      ref,\n      renderLanes,\n    );\n    if (\n      debugRenderPhaseSideEffectsForStrictMode &&\n      workInProgress.mode & StrictLegacyMode\n    ) {\n      setIsStrictModeForDevtools(true);\n      try {\n        nextChildren = renderWithHooks(\n          current,\n          workInProgress,\n          render,\n          nextProps,\n          ref,\n          renderLanes,\n        );\n      } finally {\n        setIsStrictModeForDevtools(false);\n      }\n    }\n    setIsRendering(false);\n  } else {\n    nextChildren = renderWithHooks(\n      current,\n      workInProgress,\n      render,\n      nextProps,\n      ref,\n      renderLanes,\n    );\n  }\n  if (enableSchedulingProfiler) {\n    markComponentRenderStopped();\n  }\n\n  if (current !== null && !didReceiveUpdate) {\n    bailoutHooks(current, workInProgress, renderLanes);\n    return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);\n  }\n\n  // React DevTools reads this flag.\n  workInProgress.flags |= PerformedWork;\n  reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n  return workInProgress.child;\n}\n\nfunction updateMemoComponent(\n  current: Fiber | null,\n  workInProgress: Fiber,\n  Component: any,\n  nextProps: any,\n  renderLanes: Lanes,\n): null | Fiber {\n  if (current === null) {\n    const type = Component.type;\n    if (\n      isSimpleFunctionComponent(type) &&\n      Component.compare === null &&\n      // SimpleMemoComponent codepath doesn't resolve outer props either.\n      Component.defaultProps === undefined\n    ) {\n      let resolvedType = type;\n      if (__DEV__) {\n        resolvedType = resolveFunctionForHotReloading(type);\n      }\n      // If this is a plain function component without default props,\n      // and with only the default shallow comparison, we upgrade it\n      // to a SimpleMemoComponent to allow fast path updates.\n      workInProgress.tag = SimpleMemoComponent;\n      workInProgress.type = resolvedType;\n      if (__DEV__) {\n        validateFunctionComponentInDev(workInProgress, type);\n      }\n      return updateSimpleMemoComponent(\n        current,\n        workInProgress,\n        resolvedType,\n        nextProps,\n        renderLanes,\n      );\n    }\n    if (__DEV__) {\n      const innerPropTypes = type.propTypes;\n      if (innerPropTypes) {\n        // Inner memo component props aren't currently validated in createElement.\n        // We could move it there, but we'd still need this for lazy code path.\n        checkPropTypes(\n          innerPropTypes,\n          nextProps, // Resolved props\n          'prop',\n          getComponentNameFromType(type),\n        );\n      }\n    }\n    const child = createFiberFromTypeAndProps(\n      Component.type,\n      null,\n      nextProps,\n      workInProgress,\n      workInProgress.mode,\n      renderLanes,\n    );\n    child.ref = workInProgress.ref;\n    child.return = workInProgress;\n    workInProgress.child = child;\n    return child;\n  }\n  if (__DEV__) {\n    const type = Component.type;\n    const innerPropTypes = type.propTypes;\n    if (innerPropTypes) {\n      // Inner memo component props aren't currently validated in createElement.\n      // We could move it there, but we'd still need this for lazy code path.\n      checkPropTypes(\n        innerPropTypes,\n        nextProps, // Resolved props\n        'prop',\n        getComponentNameFromType(type),\n      );\n    }\n  }\n  const currentChild = ((current.child: any): Fiber); // This is always exactly one child\n  const hasScheduledUpdateOrContext = checkScheduledUpdateOrContext(\n    current,\n    renderLanes,\n  );\n  if (!hasScheduledUpdateOrContext) {\n    // This will be the props with resolved defaultProps,\n    // unlike current.memoizedProps which will be the unresolved ones.\n    const prevProps = currentChild.memoizedProps;\n    // Default to shallow comparison\n    let compare = Component.compare;\n    compare = compare !== null ? compare : shallowEqual;\n    if (compare(prevProps, nextProps) && current.ref === workInProgress.ref) {\n      return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);\n    }\n  }\n  // React DevTools reads this flag.\n  workInProgress.flags |= PerformedWork;\n  const newChild = createWorkInProgress(currentChild, nextProps);\n  newChild.ref = workInProgress.ref;\n  newChild.return = workInProgress;\n  workInProgress.child = newChild;\n  return newChild;\n}\n\nfunction updateSimpleMemoComponent(\n  current: Fiber | null,\n  workInProgress: Fiber,\n  Component: any,\n  nextProps: any,\n  renderLanes: Lanes,\n): null | Fiber {\n  // TODO: current can be non-null here even if the component\n  // hasn't yet mounted. This happens when the inner render suspends.\n  // We'll need to figure out if this is fine or can cause issues.\n\n  if (__DEV__) {\n    if (workInProgress.type !== workInProgress.elementType) {\n      // Lazy component props can't be validated in createElement\n      // because they're only guaranteed to be resolved here.\n      let outerMemoType = workInProgress.elementType;\n      if (outerMemoType.$$typeof === REACT_LAZY_TYPE) {\n        // We warn when you define propTypes on lazy()\n        // so let's just skip over it to find memo() outer wrapper.\n        // Inner props for memo are validated later.\n        const lazyComponent: LazyComponentType<any, any> = outerMemoType;\n        const payload = lazyComponent._payload;\n        const init = lazyComponent._init;\n        try {\n          outerMemoType = init(payload);\n        } catch (x) {\n          outerMemoType = null;\n        }\n        // Inner propTypes will be validated in the function component path.\n        const outerPropTypes = outerMemoType && (outerMemoType: any).propTypes;\n        if (outerPropTypes) {\n          checkPropTypes(\n            outerPropTypes,\n            nextProps, // Resolved (SimpleMemoComponent has no defaultProps)\n            'prop',\n            getComponentNameFromType(outerMemoType),\n          );\n        }\n      }\n    }\n  }\n  if (current !== null) {\n    const prevProps = current.memoizedProps;\n    if (\n      shallowEqual(prevProps, nextProps) &&\n      current.ref === workInProgress.ref &&\n      // Prevent bailout if the implementation changed due to hot reload.\n      (__DEV__ ? workInProgress.type === current.type : true)\n    ) {\n      didReceiveUpdate = false;\n      if (!checkScheduledUpdateOrContext(current, renderLanes)) {\n        // The pending lanes were cleared at the beginning of beginWork. We're\n        // about to bail out, but there might be other lanes that weren't\n        // included in the current render. Usually, the priority level of the\n        // remaining updates is accumulated during the evaluation of the\n        // component (i.e. when processing the update queue). But since since\n        // we're bailing out early *without* evaluating the component, we need\n        // to account for it here, too. Reset to the value of the current fiber.\n        // NOTE: This only applies to SimpleMemoComponent, not MemoComponent,\n        // because a MemoComponent fiber does not have hooks or an update queue;\n        // rather, it wraps around an inner component, which may or may not\n        // contains hooks.\n        // TODO: Move the reset at in beginWork out of the common path so that\n        // this is no longer necessary.\n        workInProgress.lanes = current.lanes;\n        return bailoutOnAlreadyFinishedWork(\n          current,\n          workInProgress,\n          renderLanes,\n        );\n      } else if ((current.flags & ForceUpdateForLegacySuspense) !== NoFlags) {\n        // This is a special case that only exists for legacy mode.\n        // See https://github.com/facebook/react/pull/19216.\n        didReceiveUpdate = true;\n      }\n    }\n  }\n  return updateFunctionComponent(\n    current,\n    workInProgress,\n    Component,\n    nextProps,\n    renderLanes,\n  );\n}\n\nfunction updateOffscreenComponent(\n  current: Fiber | null,\n  workInProgress: Fiber,\n  renderLanes: Lanes,\n) {\n  const nextProps: OffscreenProps = workInProgress.pendingProps;\n  const nextChildren = nextProps.children;\n\n  const prevState: OffscreenState | null =\n    current !== null ? current.memoizedState : null;\n\n  // If this is not null, this is a cache pool that was carried over from the\n  // previous render. We will push this to the cache pool context so that we can\n  // resume in-flight requests.\n  let spawnedCachePool: SpawnedCachePool | null = null;\n\n  if (\n    nextProps.mode === 'hidden' ||\n    nextProps.mode === 'unstable-defer-without-hiding'\n  ) {\n    // Rendering a hidden tree.\n    if ((workInProgress.mode & ConcurrentMode) === NoMode) {\n      // In legacy sync mode, don't defer the subtree. Render it now.\n      const nextState: OffscreenState = {\n        baseLanes: NoLanes,\n        cachePool: null,\n      };\n      workInProgress.memoizedState = nextState;\n      pushRenderLanes(workInProgress, renderLanes);\n    } else if (!includesSomeLane(renderLanes, (OffscreenLane: Lane))) {\n      // We're hidden, and we're not rendering at Offscreen. We will bail out\n      // and resume this tree later.\n      let nextBaseLanes;\n      if (prevState !== null) {\n        const prevBaseLanes = prevState.baseLanes;\n        nextBaseLanes = mergeLanes(prevBaseLanes, renderLanes);\n        if (enableCache) {\n          // Save the cache pool so we can resume later.\n          spawnedCachePool = getOffscreenDeferredCachePool();\n          // We don't need to push to the cache pool because we're about to\n          // bail out. There won't be a context mismatch because we only pop\n          // the cache pool if `updateQueue` is non-null.\n        }\n      } else {\n        nextBaseLanes = renderLanes;\n      }\n\n      // Schedule this fiber to re-render at offscreen priority. Then bailout.\n      workInProgress.lanes = workInProgress.childLanes = laneToLanes(\n        OffscreenLane,\n      );\n      const nextState: OffscreenState = {\n        baseLanes: nextBaseLanes,\n        cachePool: spawnedCachePool,\n      };\n      workInProgress.memoizedState = nextState;\n      workInProgress.updateQueue = null;\n      // We're about to bail out, but we need to push this to the stack anyway\n      // to avoid a push/pop misalignment.\n      pushRenderLanes(workInProgress, nextBaseLanes);\n\n      if (enableLazyContextPropagation && current !== null) {\n        // Since this tree will resume rendering in a separate render, we need\n        // to propagate parent contexts now so we don't lose track of which\n        // ones changed.\n        propagateParentContextChangesToDeferredTree(\n          current,\n          workInProgress,\n          renderLanes,\n        );\n      }\n\n      return null;\n    } else {\n      // This is the second render. The surrounding visible content has already\n      // committed. Now we resume rendering the hidden tree.\n\n      if (enableCache && prevState !== null) {\n        // If the render that spawned this one accessed the cache pool, resume\n        // using the same cache. Unless the parent changed, since that means\n        // there was a refresh.\n        const prevCachePool = prevState.cachePool;\n        if (prevCachePool !== null) {\n          spawnedCachePool = restoreSpawnedCachePool(\n            workInProgress,\n            prevCachePool,\n          );\n        }\n      }\n\n      // Rendering at offscreen, so we can clear the base lanes.\n      const nextState: OffscreenState = {\n        baseLanes: NoLanes,\n        cachePool: null,\n      };\n      workInProgress.memoizedState = nextState;\n      // Push the lanes that were skipped when we bailed out.\n      const subtreeRenderLanes =\n        prevState !== null ? prevState.baseLanes : renderLanes;\n      pushRenderLanes(workInProgress, subtreeRenderLanes);\n    }\n  } else {\n    // Rendering a visible tree.\n    let subtreeRenderLanes;\n    if (prevState !== null) {\n      // We're going from hidden -> visible.\n\n      subtreeRenderLanes = mergeLanes(prevState.baseLanes, renderLanes);\n\n      if (enableCache) {\n        // If the render that spawned this one accessed the cache pool, resume\n        // using the same cache. Unless the parent changed, since that means\n        // there was a refresh.\n        const prevCachePool = prevState.cachePool;\n        if (prevCachePool !== null) {\n          spawnedCachePool = restoreSpawnedCachePool(\n            workInProgress,\n            prevCachePool,\n          );\n        }\n      }\n\n      // Since we're not hidden anymore, reset the state\n      workInProgress.memoizedState = null;\n    } else {\n      // We weren't previously hidden, and we still aren't, so there's nothing\n      // special to do. Need to push to the stack regardless, though, to avoid\n      // a push/pop misalignment.\n      subtreeRenderLanes = renderLanes;\n    }\n    pushRenderLanes(workInProgress, subtreeRenderLanes);\n  }\n\n  if (enableCache) {\n    // If we have a cache pool from a previous render attempt, then this will be\n    // non-null. We use this to infer whether to push/pop the cache context.\n    workInProgress.updateQueue = spawnedCachePool;\n  }\n\n  if (enablePersistentOffscreenHostContainer && supportsPersistence) {\n    // In persistent mode, the offscreen children are wrapped in a host node.\n    // TODO: Optimize this to use the OffscreenComponent fiber instead of\n    // an extra HostComponent fiber. Need to make sure this doesn't break Fabric\n    // or some other infra that expects a HostComponent.\n    const isHidden =\n      nextProps.mode === 'hidden' &&\n      workInProgress.tag !== LegacyHiddenComponent;\n    const offscreenContainer = reconcileOffscreenHostContainer(\n      current,\n      workInProgress,\n      isHidden,\n      nextChildren,\n      renderLanes,\n    );\n    return offscreenContainer;\n  } else {\n    reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n    return workInProgress.child;\n  }\n}\n\nfunction reconcileOffscreenHostContainer(\n  currentOffscreen: Fiber | null,\n  offscreen: Fiber,\n  isHidden: boolean,\n  children: any,\n  renderLanes: Lanes,\n) {\n  const containerProps = getOffscreenContainerProps(\n    isHidden ? 'hidden' : 'visible',\n    children,\n  );\n  let hostContainer;\n  if (currentOffscreen === null) {\n    hostContainer = createOffscreenHostContainerFiber(\n      containerProps,\n      offscreen.mode,\n      renderLanes,\n      null,\n    );\n  } else {\n    const currentHostContainer = currentOffscreen.child;\n    if (currentHostContainer === null) {\n      hostContainer = createOffscreenHostContainerFiber(\n        containerProps,\n        offscreen.mode,\n        renderLanes,\n        null,\n      );\n      hostContainer.flags |= Placement;\n    } else {\n      hostContainer = createWorkInProgress(\n        currentHostContainer,\n        containerProps,\n      );\n    }\n  }\n  hostContainer.return = offscreen;\n  offscreen.child = hostContainer;\n  return hostContainer;\n}\n\n// Note: These happen to have identical begin phases, for now. We shouldn't hold\n// ourselves to this constraint, though. If the behavior diverges, we should\n// fork the function.\nconst updateLegacyHiddenComponent = updateOffscreenComponent;\n\nfunction updateCacheComponent(\n  current: Fiber | null,\n  workInProgress: Fiber,\n  renderLanes: Lanes,\n) {\n  if (!enableCache) {\n    return null;\n  }\n\n  prepareToReadContext(workInProgress, renderLanes);\n  const parentCache = readContext(CacheContext);\n\n  if (current === null) {\n    // Initial mount. Request a fresh cache from the pool.\n    const freshCache = requestCacheFromPool(renderLanes);\n    const initialState: CacheComponentState = {\n      parent: parentCache,\n      cache: freshCache,\n    };\n    workInProgress.memoizedState = initialState;\n    initializeUpdateQueue(workInProgress);\n    pushCacheProvider(workInProgress, freshCache);\n  } else {\n    // Check for updates\n    if (includesSomeLane(current.lanes, renderLanes)) {\n      cloneUpdateQueue(current, workInProgress);\n      processUpdateQueue(workInProgress, null, null, renderLanes);\n    }\n    const prevState: CacheComponentState = current.memoizedState;\n    const nextState: CacheComponentState = workInProgress.memoizedState;\n\n    // Compare the new parent cache to the previous to see detect there was\n    // a refresh.\n    if (prevState.parent !== parentCache) {\n      // Refresh in parent. Update the parent.\n      const derivedState: CacheComponentState = {\n        parent: parentCache,\n        cache: parentCache,\n      };\n\n      // Copied from getDerivedStateFromProps implementation. Once the update\n      // queue is empty, persist the derived state onto the base state.\n      workInProgress.memoizedState = derivedState;\n      if (workInProgress.lanes === NoLanes) {\n        const updateQueue: UpdateQueue<any> = (workInProgress.updateQueue: any);\n        workInProgress.memoizedState = updateQueue.baseState = derivedState;\n      }\n\n      pushCacheProvider(workInProgress, parentCache);\n      // No need to propagate a context change because the refreshed parent\n      // already did.\n    } else {\n      // The parent didn't refresh. Now check if this cache did.\n      const nextCache = nextState.cache;\n      pushCacheProvider(workInProgress, nextCache);\n      if (nextCache !== prevState.cache) {\n        // This cache refreshed. Propagate a context change.\n        propagateContextChange(workInProgress, CacheContext, renderLanes);\n      }\n    }\n  }\n\n  const nextChildren = workInProgress.pendingProps.children;\n  reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n  return workInProgress.child;\n}\n\nfunction updateFragment(\n  current: Fiber | null,\n  workInProgress: Fiber,\n  renderLanes: Lanes,\n) {\n  const nextChildren = workInProgress.pendingProps;\n  reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n  return workInProgress.child;\n}\n\nfunction updateMode(\n  current: Fiber | null,\n  workInProgress: Fiber,\n  renderLanes: Lanes,\n) {\n  const nextChildren = workInProgress.pendingProps.children;\n  reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n  return workInProgress.child;\n}\n\nfunction updateProfiler(\n  current: Fiber | null,\n  workInProgress: Fiber,\n  renderLanes: Lanes,\n) {\n  if (enableProfilerTimer) {\n    workInProgress.flags |= Update;\n\n    if (enableProfilerCommitHooks) {\n      // Reset effect durations for the next eventual effect phase.\n      // These are reset during render to allow the DevTools commit hook a chance to read them,\n      const stateNode = workInProgress.stateNode;\n      stateNode.effectDuration = 0;\n      stateNode.passiveEffectDuration = 0;\n    }\n  }\n  const nextProps = workInProgress.pendingProps;\n  const nextChildren = nextProps.children;\n  reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n  return workInProgress.child;\n}\n\nfunction markRef(current: Fiber | null, workInProgress: Fiber) {\n  const ref = workInProgress.ref;\n  if (\n    (current === null && ref !== null) ||\n    (current !== null && current.ref !== ref)\n  ) {\n    // Schedule a Ref effect\n    workInProgress.flags |= Ref;\n    if (enableSuspenseLayoutEffectSemantics) {\n      workInProgress.flags |= RefStatic;\n    }\n  }\n}\n\nfunction updateFunctionComponent(\n  current,\n  workInProgress,\n  Component,\n  nextProps: any,\n  renderLanes,\n) {\n  if (__DEV__) {\n    if (workInProgress.type !== workInProgress.elementType) {\n      // Lazy component props can't be validated in createElement\n      // because they're only guaranteed to be resolved here.\n      const innerPropTypes = Component.propTypes;\n      if (innerPropTypes) {\n        checkPropTypes(\n          innerPropTypes,\n          nextProps, // Resolved props\n          'prop',\n          getComponentNameFromType(Component),\n        );\n      }\n    }\n  }\n\n  let context;\n  if (!disableLegacyContext) {\n    const unmaskedContext = getUnmaskedContext(workInProgress, Component, true);\n    context = getMaskedContext(workInProgress, unmaskedContext);\n  }\n\n  let nextChildren;\n  prepareToReadContext(workInProgress, renderLanes);\n  if (enableSchedulingProfiler) {\n    markComponentRenderStarted(workInProgress);\n  }\n  if (__DEV__) {\n    ReactCurrentOwner.current = workInProgress;\n    setIsRendering(true);\n    nextChildren = renderWithHooks(\n      current,\n      workInProgress,\n      Component,\n      nextProps,\n      context,\n      renderLanes,\n    );\n    if (\n      debugRenderPhaseSideEffectsForStrictMode &&\n      workInProgress.mode & StrictLegacyMode\n    ) {\n      setIsStrictModeForDevtools(true);\n      try {\n        nextChildren = renderWithHooks(\n          current,\n          workInProgress,\n          Component,\n          nextProps,\n          context,\n          renderLanes,\n        );\n      } finally {\n        setIsStrictModeForDevtools(false);\n      }\n    }\n    setIsRendering(false);\n  } else {\n    nextChildren = renderWithHooks(\n      current,\n      workInProgress,\n      Component,\n      nextProps,\n      context,\n      renderLanes,\n    );\n  }\n  if (enableSchedulingProfiler) {\n    markComponentRenderStopped();\n  }\n\n  if (current !== null && !didReceiveUpdate) {\n    bailoutHooks(current, workInProgress, renderLanes);\n    return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);\n  }\n\n  // React DevTools reads this flag.\n  workInProgress.flags |= PerformedWork;\n  reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n  return workInProgress.child;\n}\n\nfunction updateClassComponent(\n  current: Fiber | null,\n  workInProgress: Fiber,\n  Component: any,\n  nextProps: any,\n  renderLanes: Lanes,\n) {\n  if (__DEV__) {\n    // This is used by DevTools to force a boundary to error.\n    switch (shouldError(workInProgress)) {\n      case false: {\n        const instance = workInProgress.stateNode;\n        const ctor = workInProgress.type;\n        // TODO This way of resetting the error boundary state is a hack.\n        // Is there a better way to do this?\n        const tempInstance = new ctor(\n          workInProgress.memoizedProps,\n          instance.context,\n        );\n        const state = tempInstance.state;\n        instance.updater.enqueueSetState(instance, state, null);\n        break;\n      }\n      case true: {\n        workInProgress.flags |= DidCapture;\n        workInProgress.flags |= ShouldCapture;\n        const error = new Error('Simulated error coming from DevTools');\n        const lane = pickArbitraryLane(renderLanes);\n        workInProgress.lanes = mergeLanes(workInProgress.lanes, lane);\n        // Schedule the error boundary to re-render using updated state\n        const update = createClassErrorUpdate(\n          workInProgress,\n          createCapturedValue(error, workInProgress),\n          lane,\n        );\n        enqueueCapturedUpdate(workInProgress, update);\n        break;\n      }\n    }\n\n    if (workInProgress.type !== workInProgress.elementType) {\n      // Lazy component props can't be validated in createElement\n      // because they're only guaranteed to be resolved here.\n      const innerPropTypes = Component.propTypes;\n      if (innerPropTypes) {\n        checkPropTypes(\n          innerPropTypes,\n          nextProps, // Resolved props\n          'prop',\n          getComponentNameFromType(Component),\n        );\n      }\n    }\n  }\n\n  // Push context providers early to prevent context stack mismatches.\n  // During mounting we don't know the child context yet as the instance doesn't exist.\n  // We will invalidate the child context in finishClassComponent() right after rendering.\n  let hasContext;\n  if (isLegacyContextProvider(Component)) {\n    hasContext = true;\n    pushLegacyContextProvider(workInProgress);\n  } else {\n    hasContext = false;\n  }\n  prepareToReadContext(workInProgress, renderLanes);\n\n  const instance = workInProgress.stateNode;\n  let shouldUpdate;\n  if (instance === null) {\n    if (current !== null) {\n      // A class component without an instance only mounts if it suspended\n      // inside a non-concurrent tree, in an inconsistent state. We want to\n      // treat it like a new mount, even though an empty version of it already\n      // committed. Disconnect the alternate pointers.\n      current.alternate = null;\n      workInProgress.alternate = null;\n      // Since this is conceptually a new fiber, schedule a Placement effect\n      workInProgress.flags |= Placement;\n    }\n    // In the initial pass we might need to construct the instance.\n    constructClassInstance(workInProgress, Component, nextProps);\n    mountClassInstance(workInProgress, Component, nextProps, renderLanes);\n    shouldUpdate = true;\n  } else if (current === null) {\n    // In a resume, we'll already have an instance we can reuse.\n    shouldUpdate = resumeMountClassInstance(\n      workInProgress,\n      Component,\n      nextProps,\n      renderLanes,\n    );\n  } else {\n    shouldUpdate = updateClassInstance(\n      current,\n      workInProgress,\n      Component,\n      nextProps,\n      renderLanes,\n    );\n  }\n  const nextUnitOfWork = finishClassComponent(\n    current,\n    workInProgress,\n    Component,\n    shouldUpdate,\n    hasContext,\n    renderLanes,\n  );\n  if (__DEV__) {\n    const inst = workInProgress.stateNode;\n    if (shouldUpdate && inst.props !== nextProps) {\n      if (!didWarnAboutReassigningProps) {\n        console.error(\n          'It looks like %s is reassigning its own `this.props` while rendering. ' +\n            'This is not supported and can lead to confusing bugs.',\n          getComponentNameFromFiber(workInProgress) || 'a component',\n        );\n      }\n      didWarnAboutReassigningProps = true;\n    }\n  }\n  return nextUnitOfWork;\n}\n\nfunction finishClassComponent(\n  current: Fiber | null,\n  workInProgress: Fiber,\n  Component: any,\n  shouldUpdate: boolean,\n  hasContext: boolean,\n  renderLanes: Lanes,\n) {\n  // Refs should update even if shouldComponentUpdate returns false\n  markRef(current, workInProgress);\n\n  const didCaptureError = (workInProgress.flags & DidCapture) !== NoFlags;\n\n  if (!shouldUpdate && !didCaptureError) {\n    // Context providers should defer to sCU for rendering\n    if (hasContext) {\n      invalidateContextProvider(workInProgress, Component, false);\n    }\n\n    return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);\n  }\n\n  const instance = workInProgress.stateNode;\n\n  // Rerender\n  ReactCurrentOwner.current = workInProgress;\n  let nextChildren;\n  if (\n    didCaptureError &&\n    typeof Component.getDerivedStateFromError !== 'function'\n  ) {\n    // If we captured an error, but getDerivedStateFromError is not defined,\n    // unmount all the children. componentDidCatch will schedule an update to\n    // re-render a fallback. This is temporary until we migrate everyone to\n    // the new API.\n    // TODO: Warn in a future release.\n    nextChildren = null;\n\n    if (enableProfilerTimer) {\n      stopProfilerTimerIfRunning(workInProgress);\n    }\n  } else {\n    if (enableSchedulingProfiler) {\n      markComponentRenderStarted(workInProgress);\n    }\n    if (__DEV__) {\n      setIsRendering(true);\n      nextChildren = instance.render();\n      if (\n        debugRenderPhaseSideEffectsForStrictMode &&\n        workInProgress.mode & StrictLegacyMode\n      ) {\n        setIsStrictModeForDevtools(true);\n        try {\n          instance.render();\n        } finally {\n          setIsStrictModeForDevtools(false);\n        }\n      }\n      setIsRendering(false);\n    } else {\n      nextChildren = instance.render();\n    }\n    if (enableSchedulingProfiler) {\n      markComponentRenderStopped();\n    }\n  }\n\n  // React DevTools reads this flag.\n  workInProgress.flags |= PerformedWork;\n  if (current !== null && didCaptureError) {\n    // If we're recovering from an error, reconcile without reusing any of\n    // the existing children. Conceptually, the normal children and the children\n    // that are shown on error are two different sets, so we shouldn't reuse\n    // normal children even if their identities match.\n    forceUnmountCurrentAndReconcile(\n      current,\n      workInProgress,\n      nextChildren,\n      renderLanes,\n    );\n  } else {\n    reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n  }\n\n  // Memoize state using the values we just used to render.\n  // TODO: Restructure so we never read values from the instance.\n  workInProgress.memoizedState = instance.state;\n\n  // The context might have changed so we need to recalculate it.\n  if (hasContext) {\n    invalidateContextProvider(workInProgress, Component, true);\n  }\n\n  return workInProgress.child;\n}\n\nfunction pushHostRootContext(workInProgress) {\n  const root = (workInProgress.stateNode: FiberRoot);\n  if (root.pendingContext) {\n    pushTopLevelContextObject(\n      workInProgress,\n      root.pendingContext,\n      root.pendingContext !== root.context,\n    );\n  } else if (root.context) {\n    // Should always be set\n    pushTopLevelContextObject(workInProgress, root.context, false);\n  }\n  pushHostContainer(workInProgress, root.containerInfo);\n}\n\nfunction updateHostRoot(current, workInProgress, renderLanes) {\n  pushHostRootContext(workInProgress);\n  const updateQueue = workInProgress.updateQueue;\n  invariant(\n    current !== null && updateQueue !== null,\n    'If the root does not have an updateQueue, we should have already ' +\n      'bailed out. This error is likely caused by a bug in React. Please ' +\n      'file an issue.',\n  );\n  const nextProps = workInProgress.pendingProps;\n  const prevState = workInProgress.memoizedState;\n  const prevChildren = prevState.element;\n  cloneUpdateQueue(current, workInProgress);\n  processUpdateQueue(workInProgress, nextProps, null, renderLanes);\n  const nextState = workInProgress.memoizedState;\n\n  const root: FiberRoot = workInProgress.stateNode;\n\n  if (enableCache) {\n    const nextCache: Cache = nextState.cache;\n    pushRootCachePool(root);\n    pushCacheProvider(workInProgress, nextCache);\n    if (nextCache !== prevState.cache) {\n      // The root cache refreshed.\n      propagateContextChange(workInProgress, CacheContext, renderLanes);\n    }\n  }\n\n  // Caution: React DevTools currently depends on this property\n  // being called \"element\".\n  const nextChildren = nextState.element;\n  if (nextChildren === prevChildren) {\n    resetHydrationState();\n    return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);\n  }\n  if (root.hydrate && enterHydrationState(workInProgress)) {\n    // If we don't have any current children this might be the first pass.\n    // We always try to hydrate. If this isn't a hydration pass there won't\n    // be any children to hydrate which is effectively the same thing as\n    // not hydrating.\n\n    if (supportsHydration) {\n      const mutableSourceEagerHydrationData =\n        root.mutableSourceEagerHydrationData;\n      if (mutableSourceEagerHydrationData != null) {\n        for (let i = 0; i < mutableSourceEagerHydrationData.length; i += 2) {\n          const mutableSource = ((mutableSourceEagerHydrationData[\n            i\n          ]: any): MutableSource<any>);\n          const version = mutableSourceEagerHydrationData[i + 1];\n          setWorkInProgressVersion(mutableSource, version);\n        }\n      }\n    }\n\n    const child = mountChildFibers(\n      workInProgress,\n      null,\n      nextChildren,\n      renderLanes,\n    );\n    workInProgress.child = child;\n\n    let node = child;\n    while (node) {\n      // Mark each child as hydrating. This is a fast path to know whether this\n      // tree is part of a hydrating tree. This is used to determine if a child\n      // node has fully mounted yet, and for scheduling event replaying.\n      // Conceptually this is similar to Placement in that a new subtree is\n      // inserted into the React tree here. It just happens to not need DOM\n      // mutations because it already exists.\n      node.flags = (node.flags & ~Placement) | Hydrating;\n      node = node.sibling;\n    }\n  } else {\n    // Otherwise reset hydration state in case we aborted and resumed another\n    // root.\n    reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n    resetHydrationState();\n  }\n  return workInProgress.child;\n}\n\nfunction updateHostComponent(\n  current: Fiber | null,\n  workInProgress: Fiber,\n  renderLanes: Lanes,\n) {\n  pushHostContext(workInProgress);\n\n  if (current === null) {\n    tryToClaimNextHydratableInstance(workInProgress);\n  }\n\n  const type = workInProgress.type;\n  const nextProps = workInProgress.pendingProps;\n  const prevProps = current !== null ? current.memoizedProps : null;\n\n  let nextChildren = nextProps.children;\n  const isDirectTextChild = shouldSetTextContent(type, nextProps);\n\n  if (isDirectTextChild) {\n    // We special case a direct text child of a host node. This is a common\n    // case. We won't handle it as a reified child. We will instead handle\n    // this in the host environment that also has access to this prop. That\n    // avoids allocating another HostText fiber and traversing it.\n    nextChildren = null;\n  } else if (prevProps !== null && shouldSetTextContent(type, prevProps)) {\n    // If we're switching from a direct text child to a normal child, or to\n    // empty, we need to schedule the text content to be reset.\n    workInProgress.flags |= ContentReset;\n  }\n\n  markRef(current, workInProgress);\n  reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n  return workInProgress.child;\n}\n\nfunction updateHostText(current, workInProgress) {\n  if (current === null) {\n    tryToClaimNextHydratableInstance(workInProgress);\n  }\n  // Nothing to do here. This is terminal. We'll do the completion step\n  // immediately after.\n  return null;\n}\n\nfunction mountLazyComponent(\n  _current,\n  workInProgress,\n  elementType,\n  renderLanes,\n) {\n  if (_current !== null) {\n    // A lazy component only mounts if it suspended inside a non-\n    // concurrent tree, in an inconsistent state. We want to treat it like\n    // a new mount, even though an empty version of it already committed.\n    // Disconnect the alternate pointers.\n    _current.alternate = null;\n    workInProgress.alternate = null;\n    // Since this is conceptually a new fiber, schedule a Placement effect\n    workInProgress.flags |= Placement;\n  }\n\n  const props = workInProgress.pendingProps;\n  const lazyComponent: LazyComponentType<any, any> = elementType;\n  const payload = lazyComponent._payload;\n  const init = lazyComponent._init;\n  let Component = init(payload);\n  // Store the unwrapped component in the type.\n  workInProgress.type = Component;\n  const resolvedTag = (workInProgress.tag = resolveLazyComponentTag(Component));\n  const resolvedProps = resolveDefaultProps(Component, props);\n  let child;\n  switch (resolvedTag) {\n    case FunctionComponent: {\n      if (__DEV__) {\n        validateFunctionComponentInDev(workInProgress, Component);\n        workInProgress.type = Component = resolveFunctionForHotReloading(\n          Component,\n        );\n      }\n      child = updateFunctionComponent(\n        null,\n        workInProgress,\n        Component,\n        resolvedProps,\n        renderLanes,\n      );\n      return child;\n    }\n    case ClassComponent: {\n      if (__DEV__) {\n        workInProgress.type = Component = resolveClassForHotReloading(\n          Component,\n        );\n      }\n      child = updateClassComponent(\n        null,\n        workInProgress,\n        Component,\n        resolvedProps,\n        renderLanes,\n      );\n      return child;\n    }\n    case ForwardRef: {\n      if (__DEV__) {\n        workInProgress.type = Component = resolveForwardRefForHotReloading(\n          Component,\n        );\n      }\n      child = updateForwardRef(\n        null,\n        workInProgress,\n        Component,\n        resolvedProps,\n        renderLanes,\n      );\n      return child;\n    }\n    case MemoComponent: {\n      if (__DEV__) {\n        if (workInProgress.type !== workInProgress.elementType) {\n          const outerPropTypes = Component.propTypes;\n          if (outerPropTypes) {\n            checkPropTypes(\n              outerPropTypes,\n              resolvedProps, // Resolved for outer only\n              'prop',\n              getComponentNameFromType(Component),\n            );\n          }\n        }\n      }\n      child = updateMemoComponent(\n        null,\n        workInProgress,\n        Component,\n        resolveDefaultProps(Component.type, resolvedProps), // The inner type can have defaults too\n        renderLanes,\n      );\n      return child;\n    }\n  }\n  let hint = '';\n  if (__DEV__) {\n    if (\n      Component !== null &&\n      typeof Component === 'object' &&\n      Component.$$typeof === REACT_LAZY_TYPE\n    ) {\n      hint = ' Did you wrap a component in React.lazy() more than once?';\n    }\n  }\n  // This message intentionally doesn't mention ForwardRef or MemoComponent\n  // because the fact that it's a separate type of work is an\n  // implementation detail.\n  invariant(\n    false,\n    'Element type is invalid. Received a promise that resolves to: %s. ' +\n      'Lazy element type must resolve to a class or function.%s',\n    Component,\n    hint,\n  );\n}\n\nfunction mountIncompleteClassComponent(\n  _current,\n  workInProgress,\n  Component,\n  nextProps,\n  renderLanes,\n) {\n  if (_current !== null) {\n    // An incomplete component only mounts if it suspended inside a non-\n    // concurrent tree, in an inconsistent state. We want to treat it like\n    // a new mount, even though an empty version of it already committed.\n    // Disconnect the alternate pointers.\n    _current.alternate = null;\n    workInProgress.alternate = null;\n    // Since this is conceptually a new fiber, schedule a Placement effect\n    workInProgress.flags |= Placement;\n  }\n\n  // Promote the fiber to a class and try rendering again.\n  workInProgress.tag = ClassComponent;\n\n  // The rest of this function is a fork of `updateClassComponent`\n\n  // Push context providers early to prevent context stack mismatches.\n  // During mounting we don't know the child context yet as the instance doesn't exist.\n  // We will invalidate the child context in finishClassComponent() right after rendering.\n  let hasContext;\n  if (isLegacyContextProvider(Component)) {\n    hasContext = true;\n    pushLegacyContextProvider(workInProgress);\n  } else {\n    hasContext = false;\n  }\n  prepareToReadContext(workInProgress, renderLanes);\n\n  constructClassInstance(workInProgress, Component, nextProps);\n  mountClassInstance(workInProgress, Component, nextProps, renderLanes);\n\n  return finishClassComponent(\n    null,\n    workInProgress,\n    Component,\n    true,\n    hasContext,\n    renderLanes,\n  );\n}\n\nfunction mountIndeterminateComponent(\n  _current,\n  workInProgress,\n  Component,\n  renderLanes,\n) {\n  if (_current !== null) {\n    // An indeterminate component only mounts if it suspended inside a non-\n    // concurrent tree, in an inconsistent state. We want to treat it like\n    // a new mount, even though an empty version of it already committed.\n    // Disconnect the alternate pointers.\n    _current.alternate = null;\n    workInProgress.alternate = null;\n    // Since this is conceptually a new fiber, schedule a Placement effect\n    workInProgress.flags |= Placement;\n  }\n\n  const props = workInProgress.pendingProps;\n  let context;\n  if (!disableLegacyContext) {\n    const unmaskedContext = getUnmaskedContext(\n      workInProgress,\n      Component,\n      false,\n    );\n    context = getMaskedContext(workInProgress, unmaskedContext);\n  }\n\n  prepareToReadContext(workInProgress, renderLanes);\n  let value;\n\n  if (enableSchedulingProfiler) {\n    markComponentRenderStarted(workInProgress);\n  }\n  if (__DEV__) {\n    if (\n      Component.prototype &&\n      typeof Component.prototype.render === 'function'\n    ) {\n      const componentName = getComponentNameFromType(Component) || 'Unknown';\n\n      if (!didWarnAboutBadClass[componentName]) {\n        console.error(\n          \"The <%s /> component appears to have a render method, but doesn't extend React.Component. \" +\n            'This is likely to cause errors. Change %s to extend React.Component instead.',\n          componentName,\n          componentName,\n        );\n        didWarnAboutBadClass[componentName] = true;\n      }\n    }\n\n    if (workInProgress.mode & StrictLegacyMode) {\n      ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress, null);\n    }\n\n    setIsRendering(true);\n    ReactCurrentOwner.current = workInProgress;\n    value = renderWithHooks(\n      null,\n      workInProgress,\n      Component,\n      props,\n      context,\n      renderLanes,\n    );\n    setIsRendering(false);\n  } else {\n    value = renderWithHooks(\n      null,\n      workInProgress,\n      Component,\n      props,\n      context,\n      renderLanes,\n    );\n  }\n  if (enableSchedulingProfiler) {\n    markComponentRenderStopped();\n  }\n\n  // React DevTools reads this flag.\n  workInProgress.flags |= PerformedWork;\n\n  if (__DEV__) {\n    // Support for module components is deprecated and is removed behind a flag.\n    // Whether or not it would crash later, we want to show a good message in DEV first.\n    if (\n      typeof value === 'object' &&\n      value !== null &&\n      typeof value.render === 'function' &&\n      value.$$typeof === undefined\n    ) {\n      const componentName = getComponentNameFromType(Component) || 'Unknown';\n      if (!didWarnAboutModulePatternComponent[componentName]) {\n        console.error(\n          'The <%s /> component appears to be a function component that returns a class instance. ' +\n            'Change %s to a class that extends React.Component instead. ' +\n            \"If you can't use a class try assigning the prototype on the function as a workaround. \" +\n            \"`%s.prototype = React.Component.prototype`. Don't use an arrow function since it \" +\n            'cannot be called with `new` by React.',\n          componentName,\n          componentName,\n          componentName,\n        );\n        didWarnAboutModulePatternComponent[componentName] = true;\n      }\n    }\n  }\n\n  if (\n    // Run these checks in production only if the flag is off.\n    // Eventually we'll delete this branch altogether.\n    !disableModulePatternComponents &&\n    typeof value === 'object' &&\n    value !== null &&\n    typeof value.render === 'function' &&\n    value.$$typeof === undefined\n  ) {\n    if (__DEV__) {\n      const componentName = getComponentNameFromType(Component) || 'Unknown';\n      if (!didWarnAboutModulePatternComponent[componentName]) {\n        console.error(\n          'The <%s /> component appears to be a function component that returns a class instance. ' +\n            'Change %s to a class that extends React.Component instead. ' +\n            \"If you can't use a class try assigning the prototype on the function as a workaround. \" +\n            \"`%s.prototype = React.Component.prototype`. Don't use an arrow function since it \" +\n            'cannot be called with `new` by React.',\n          componentName,\n          componentName,\n          componentName,\n        );\n        didWarnAboutModulePatternComponent[componentName] = true;\n      }\n    }\n\n    // Proceed under the assumption that this is a class instance\n    workInProgress.tag = ClassComponent;\n\n    // Throw out any hooks that were used.\n    workInProgress.memoizedState = null;\n    workInProgress.updateQueue = null;\n\n    // Push context providers early to prevent context stack mismatches.\n    // During mounting we don't know the child context yet as the instance doesn't exist.\n    // We will invalidate the child context in finishClassComponent() right after rendering.\n    let hasContext = false;\n    if (isLegacyContextProvider(Component)) {\n      hasContext = true;\n      pushLegacyContextProvider(workInProgress);\n    } else {\n      hasContext = false;\n    }\n\n    workInProgress.memoizedState =\n      value.state !== null && value.state !== undefined ? value.state : null;\n\n    initializeUpdateQueue(workInProgress);\n\n    adoptClassInstance(workInProgress, value);\n    mountClassInstance(workInProgress, Component, props, renderLanes);\n    return finishClassComponent(\n      null,\n      workInProgress,\n      Component,\n      true,\n      hasContext,\n      renderLanes,\n    );\n  } else {\n    // Proceed under the assumption that this is a function component\n    workInProgress.tag = FunctionComponent;\n    if (__DEV__) {\n      if (disableLegacyContext && Component.contextTypes) {\n        console.error(\n          '%s uses the legacy contextTypes API which is no longer supported. ' +\n            'Use React.createContext() with React.useContext() instead.',\n          getComponentNameFromType(Component) || 'Unknown',\n        );\n      }\n\n      if (\n        debugRenderPhaseSideEffectsForStrictMode &&\n        workInProgress.mode & StrictLegacyMode\n      ) {\n        setIsStrictModeForDevtools(true);\n        try {\n          value = renderWithHooks(\n            null,\n            workInProgress,\n            Component,\n            props,\n            context,\n            renderLanes,\n          );\n        } finally {\n          setIsStrictModeForDevtools(false);\n        }\n      }\n    }\n    reconcileChildren(null, workInProgress, value, renderLanes);\n    if (__DEV__) {\n      validateFunctionComponentInDev(workInProgress, Component);\n    }\n    return workInProgress.child;\n  }\n}\n\nfunction validateFunctionComponentInDev(workInProgress: Fiber, Component: any) {\n  if (__DEV__) {\n    if (Component) {\n      if (Component.childContextTypes) {\n        console.error(\n          '%s(...): childContextTypes cannot be defined on a function component.',\n          Component.displayName || Component.name || 'Component',\n        );\n      }\n    }\n    if (workInProgress.ref !== null) {\n      let info = '';\n      const ownerName = getCurrentFiberOwnerNameInDevOrNull();\n      if (ownerName) {\n        info += '\\n\\nCheck the render method of `' + ownerName + '`.';\n      }\n\n      let warningKey = ownerName || '';\n      const debugSource = workInProgress._debugSource;\n      if (debugSource) {\n        warningKey = debugSource.fileName + ':' + debugSource.lineNumber;\n      }\n      if (!didWarnAboutFunctionRefs[warningKey]) {\n        didWarnAboutFunctionRefs[warningKey] = true;\n        console.error(\n          'Function components cannot be given refs. ' +\n            'Attempts to access this ref will fail. ' +\n            'Did you mean to use React.forwardRef()?%s',\n          info,\n        );\n      }\n    }\n\n    if (\n      warnAboutDefaultPropsOnFunctionComponents &&\n      Component.defaultProps !== undefined\n    ) {\n      const componentName = getComponentNameFromType(Component) || 'Unknown';\n\n      if (!didWarnAboutDefaultPropsOnFunctionComponent[componentName]) {\n        console.error(\n          '%s: Support for defaultProps will be removed from function components ' +\n            'in a future major release. Use JavaScript default parameters instead.',\n          componentName,\n        );\n        didWarnAboutDefaultPropsOnFunctionComponent[componentName] = true;\n      }\n    }\n\n    if (typeof Component.getDerivedStateFromProps === 'function') {\n      const componentName = getComponentNameFromType(Component) || 'Unknown';\n\n      if (!didWarnAboutGetDerivedStateOnFunctionComponent[componentName]) {\n        console.error(\n          '%s: Function components do not support getDerivedStateFromProps.',\n          componentName,\n        );\n        didWarnAboutGetDerivedStateOnFunctionComponent[componentName] = true;\n      }\n    }\n\n    if (\n      typeof Component.contextType === 'object' &&\n      Component.contextType !== null\n    ) {\n      const componentName = getComponentNameFromType(Component) || 'Unknown';\n\n      if (!didWarnAboutContextTypeOnFunctionComponent[componentName]) {\n        console.error(\n          '%s: Function components do not support contextType.',\n          componentName,\n        );\n        didWarnAboutContextTypeOnFunctionComponent[componentName] = true;\n      }\n    }\n  }\n}\n\nconst SUSPENDED_MARKER: SuspenseState = {\n  dehydrated: null,\n  retryLane: NoLane,\n};\n\nfunction mountSuspenseOffscreenState(renderLanes: Lanes): OffscreenState {\n  return {\n    baseLanes: renderLanes,\n    cachePool: getSuspendedCachePool(),\n  };\n}\n\nfunction updateSuspenseOffscreenState(\n  prevOffscreenState: OffscreenState,\n  renderLanes: Lanes,\n): OffscreenState {\n  let cachePool: SpawnedCachePool | null = null;\n  if (enableCache) {\n    const prevCachePool: SpawnedCachePool | null = prevOffscreenState.cachePool;\n    if (prevCachePool !== null) {\n      const parentCache = isPrimaryRenderer\n        ? CacheContext._currentValue\n        : CacheContext._currentValue2;\n      if (prevCachePool.parent !== parentCache) {\n        // Detected a refresh in the parent. This overrides any previously\n        // suspended cache.\n        cachePool = {\n          parent: parentCache,\n          pool: parentCache,\n        };\n      } else {\n        // We can reuse the cache from last time. The only thing that would have\n        // overridden it is a parent refresh, which we checked for above.\n        cachePool = prevCachePool;\n      }\n    } else {\n      // If there's no previous cache pool, grab the current one.\n      cachePool = getSuspendedCachePool();\n    }\n  }\n  return {\n    baseLanes: mergeLanes(prevOffscreenState.baseLanes, renderLanes),\n    cachePool,\n  };\n}\n\n// TODO: Probably should inline this back\nfunction shouldRemainOnFallback(\n  suspenseContext: SuspenseContext,\n  current: null | Fiber,\n  workInProgress: Fiber,\n  renderLanes: Lanes,\n) {\n  // If we're already showing a fallback, there are cases where we need to\n  // remain on that fallback regardless of whether the content has resolved.\n  // For example, SuspenseList coordinates when nested content appears.\n  if (current !== null) {\n    const suspenseState: SuspenseState = current.memoizedState;\n    if (suspenseState === null) {\n      // Currently showing content. Don't hide it, even if ForceSuspenseFallback\n      // is true. More precise name might be \"ForceRemainSuspenseFallback\".\n      // Note: This is a factoring smell. Can't remain on a fallback if there's\n      // no fallback to remain on.\n      return false;\n    }\n  }\n\n  // Not currently showing content. Consult the Suspense context.\n  return hasSuspenseContext(\n    suspenseContext,\n    (ForceSuspenseFallback: SuspenseContext),\n  );\n}\n\nfunction getRemainingWorkInPrimaryTree(current: Fiber, renderLanes) {\n  // TODO: Should not remove render lanes that were pinged during this render\n  return removeLanes(current.childLanes, renderLanes);\n}\n\nfunction updateSuspenseComponent(current, workInProgress, renderLanes) {\n  const nextProps = workInProgress.pendingProps;\n\n  // This is used by DevTools to force a boundary to suspend.\n  if (__DEV__) {\n    if (shouldSuspend(workInProgress)) {\n      workInProgress.flags |= DidCapture;\n    }\n  }\n\n  let suspenseContext: SuspenseContext = suspenseStackCursor.current;\n\n  let showFallback = false;\n  const didSuspend = (workInProgress.flags & DidCapture) !== NoFlags;\n\n  if (\n    didSuspend ||\n    shouldRemainOnFallback(\n      suspenseContext,\n      current,\n      workInProgress,\n      renderLanes,\n    )\n  ) {\n    // Something in this boundary's subtree already suspended. Switch to\n    // rendering the fallback children.\n    showFallback = true;\n    workInProgress.flags &= ~DidCapture;\n  } else {\n    // Attempting the main content\n    if (\n      current === null ||\n      (current.memoizedState: null | SuspenseState) !== null\n    ) {\n      // This is a new mount or this boundary is already showing a fallback state.\n      // Mark this subtree context as having at least one invisible parent that could\n      // handle the fallback state.\n      // Avoided boundaries are not considered since they cannot handle preferred fallback states.\n      if (nextProps.unstable_avoidThisFallback !== true) {\n        suspenseContext = addSubtreeSuspenseContext(\n          suspenseContext,\n          InvisibleParentSuspenseContext,\n        );\n      }\n    }\n  }\n\n  suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);\n\n  pushSuspenseContext(workInProgress, suspenseContext);\n\n  // OK, the next part is confusing. We're about to reconcile the Suspense\n  // boundary's children. This involves some custom reconciliation logic. Two\n  // main reasons this is so complicated.\n  //\n  // First, Legacy Mode has different semantics for backwards compatibility. The\n  // primary tree will commit in an inconsistent state, so when we do the\n  // second pass to render the fallback, we do some exceedingly, uh, clever\n  // hacks to make that not totally break. Like transferring effects and\n  // deletions from hidden tree. In Concurrent Mode, it's much simpler,\n  // because we bailout on the primary tree completely and leave it in its old\n  // state, no effects. Same as what we do for Offscreen (except that\n  // Offscreen doesn't have the first render pass).\n  //\n  // Second is hydration. During hydration, the Suspense fiber has a slightly\n  // different layout, where the child points to a dehydrated fragment, which\n  // contains the DOM rendered by the server.\n  //\n  // Third, even if you set all that aside, Suspense is like error boundaries in\n  // that we first we try to render one tree, and if that fails, we render again\n  // and switch to a different tree. Like a try/catch block. So we have to track\n  // which branch we're currently rendering. Ideally we would model this using\n  // a stack.\n  if (current === null) {\n    // Initial mount\n    // If we're currently hydrating, try to hydrate this boundary.\n    tryToClaimNextHydratableInstance(workInProgress);\n    // This could've been a dehydrated suspense component.\n    if (enableSuspenseServerRenderer) {\n      const suspenseState: null | SuspenseState = workInProgress.memoizedState;\n      if (suspenseState !== null) {\n        const dehydrated = suspenseState.dehydrated;\n        if (dehydrated !== null) {\n          return mountDehydratedSuspenseComponent(\n            workInProgress,\n            dehydrated,\n            renderLanes,\n          );\n        }\n      }\n    }\n\n    const nextPrimaryChildren = nextProps.children;\n    const nextFallbackChildren = nextProps.fallback;\n    if (showFallback) {\n      const fallbackFragment = mountSuspenseFallbackChildren(\n        workInProgress,\n        nextPrimaryChildren,\n        nextFallbackChildren,\n        renderLanes,\n      );\n      const primaryChildFragment: Fiber = (workInProgress.child: any);\n      primaryChildFragment.memoizedState = mountSuspenseOffscreenState(\n        renderLanes,\n      );\n      workInProgress.memoizedState = SUSPENDED_MARKER;\n      return fallbackFragment;\n    } else if (typeof nextProps.unstable_expectedLoadTime === 'number') {\n      // This is a CPU-bound tree. Skip this tree and show a placeholder to\n      // unblock the surrounding content. Then immediately retry after the\n      // initial commit.\n      const fallbackFragment = mountSuspenseFallbackChildren(\n        workInProgress,\n        nextPrimaryChildren,\n        nextFallbackChildren,\n        renderLanes,\n      );\n      const primaryChildFragment: Fiber = (workInProgress.child: any);\n      primaryChildFragment.memoizedState = mountSuspenseOffscreenState(\n        renderLanes,\n      );\n      workInProgress.memoizedState = SUSPENDED_MARKER;\n\n      // Since nothing actually suspended, there will nothing to ping this to\n      // get it started back up to attempt the next item. While in terms of\n      // priority this work has the same priority as this current render, it's\n      // not part of the same transition once the transition has committed. If\n      // it's sync, we still want to yield so that it can be painted.\n      // Conceptually, this is really the same as pinging. We can use any\n      // RetryLane even if it's the one currently rendering since we're leaving\n      // it behind on this node.\n      workInProgress.lanes = SomeRetryLane;\n      return fallbackFragment;\n    } else {\n      return mountSuspensePrimaryChildren(\n        workInProgress,\n        nextPrimaryChildren,\n        renderLanes,\n      );\n    }\n  } else {\n    // This is an update.\n\n    // If the current fiber has a SuspenseState, that means it's already showing\n    // a fallback.\n    const prevState: null | SuspenseState = current.memoizedState;\n    if (prevState !== null) {\n      // The current tree is already showing a fallback\n\n      // Special path for hydration\n      if (enableSuspenseServerRenderer) {\n        const dehydrated = prevState.dehydrated;\n        if (dehydrated !== null) {\n          if (!didSuspend) {\n            return updateDehydratedSuspenseComponent(\n              current,\n              workInProgress,\n              dehydrated,\n              prevState,\n              renderLanes,\n            );\n          } else if (\n            (workInProgress.memoizedState: null | SuspenseState) !== null\n          ) {\n            // Something suspended and we should still be in dehydrated mode.\n            // Leave the existing child in place.\n            workInProgress.child = current.child;\n            // The dehydrated completion pass expects this flag to be there\n            // but the normal suspense pass doesn't.\n            workInProgress.flags |= DidCapture;\n            return null;\n          } else {\n            // Suspended but we should no longer be in dehydrated mode.\n            // Therefore we now have to render the fallback.\n            const nextPrimaryChildren = nextProps.children;\n            const nextFallbackChildren = nextProps.fallback;\n            const fallbackChildFragment = mountSuspenseFallbackAfterRetryWithoutHydrating(\n              current,\n              workInProgress,\n              nextPrimaryChildren,\n              nextFallbackChildren,\n              renderLanes,\n            );\n            const primaryChildFragment: Fiber = (workInProgress.child: any);\n            primaryChildFragment.memoizedState = mountSuspenseOffscreenState(\n              renderLanes,\n            );\n            workInProgress.memoizedState = SUSPENDED_MARKER;\n            return fallbackChildFragment;\n          }\n        }\n      }\n\n      if (showFallback) {\n        const nextFallbackChildren = nextProps.fallback;\n        const nextPrimaryChildren = nextProps.children;\n        const fallbackChildFragment = updateSuspenseFallbackChildren(\n          current,\n          workInProgress,\n          nextPrimaryChildren,\n          nextFallbackChildren,\n          renderLanes,\n        );\n        const primaryChildFragment: Fiber = (workInProgress.child: any);\n        const prevOffscreenState: OffscreenState | null = (current.child: any)\n          .memoizedState;\n        primaryChildFragment.memoizedState =\n          prevOffscreenState === null\n            ? mountSuspenseOffscreenState(renderLanes)\n            : updateSuspenseOffscreenState(prevOffscreenState, renderLanes);\n        primaryChildFragment.childLanes = getRemainingWorkInPrimaryTree(\n          current,\n          renderLanes,\n        );\n        workInProgress.memoizedState = SUSPENDED_MARKER;\n        return fallbackChildFragment;\n      } else {\n        const nextPrimaryChildren = nextProps.children;\n        const primaryChildFragment = updateSuspensePrimaryChildren(\n          current,\n          workInProgress,\n          nextPrimaryChildren,\n          renderLanes,\n        );\n        workInProgress.memoizedState = null;\n        return primaryChildFragment;\n      }\n    } else {\n      // The current tree is not already showing a fallback.\n      if (showFallback) {\n        // Timed out.\n        const nextFallbackChildren = nextProps.fallback;\n        const nextPrimaryChildren = nextProps.children;\n        const fallbackChildFragment = updateSuspenseFallbackChildren(\n          current,\n          workInProgress,\n          nextPrimaryChildren,\n          nextFallbackChildren,\n          renderLanes,\n        );\n        const primaryChildFragment: Fiber = (workInProgress.child: any);\n        const prevOffscreenState: OffscreenState | null = (current.child: any)\n          .memoizedState;\n        primaryChildFragment.memoizedState =\n          prevOffscreenState === null\n            ? mountSuspenseOffscreenState(renderLanes)\n            : updateSuspenseOffscreenState(prevOffscreenState, renderLanes);\n        primaryChildFragment.childLanes = getRemainingWorkInPrimaryTree(\n          current,\n          renderLanes,\n        );\n        // Skip the primary children, and continue working on the\n        // fallback children.\n        workInProgress.memoizedState = SUSPENDED_MARKER;\n        return fallbackChildFragment;\n      } else {\n        // Still haven't timed out. Continue rendering the children, like we\n        // normally do.\n        const nextPrimaryChildren = nextProps.children;\n        const primaryChildFragment = updateSuspensePrimaryChildren(\n          current,\n          workInProgress,\n          nextPrimaryChildren,\n          renderLanes,\n        );\n        workInProgress.memoizedState = null;\n        return primaryChildFragment;\n      }\n    }\n  }\n}\n\nfunction mountSuspensePrimaryChildren(\n  workInProgress,\n  primaryChildren,\n  renderLanes,\n) {\n  const mode = workInProgress.mode;\n  const primaryChildProps: OffscreenProps = {\n    mode: 'visible',\n    children: primaryChildren,\n  };\n  const primaryChildFragment = mountWorkInProgressOffscreenFiber(\n    primaryChildProps,\n    mode,\n    renderLanes,\n  );\n  primaryChildFragment.return = workInProgress;\n  workInProgress.child = primaryChildFragment;\n  return primaryChildFragment;\n}\n\nfunction mountSuspenseFallbackChildren(\n  workInProgress,\n  primaryChildren,\n  fallbackChildren,\n  renderLanes,\n) {\n  const mode = workInProgress.mode;\n  const progressedPrimaryFragment: Fiber | null = workInProgress.child;\n\n  const primaryChildProps: OffscreenProps = {\n    mode: 'hidden',\n    children: primaryChildren,\n  };\n\n  let primaryChildFragment;\n  let fallbackChildFragment;\n  if (\n    (mode & ConcurrentMode) === NoMode &&\n    progressedPrimaryFragment !== null\n  ) {\n    // In legacy mode, we commit the primary tree as if it successfully\n    // completed, even though it's in an inconsistent state.\n    primaryChildFragment = progressedPrimaryFragment;\n    primaryChildFragment.childLanes = NoLanes;\n    primaryChildFragment.pendingProps = primaryChildProps;\n\n    if (enableProfilerTimer && workInProgress.mode & ProfileMode) {\n      // Reset the durations from the first pass so they aren't included in the\n      // final amounts. This seems counterintuitive, since we're intentionally\n      // not measuring part of the render phase, but this makes it match what we\n      // do in Concurrent Mode.\n      primaryChildFragment.actualDuration = 0;\n      primaryChildFragment.actualStartTime = -1;\n      primaryChildFragment.selfBaseDuration = 0;\n      primaryChildFragment.treeBaseDuration = 0;\n    }\n\n    fallbackChildFragment = createFiberFromFragment(\n      fallbackChildren,\n      mode,\n      renderLanes,\n      null,\n    );\n  } else {\n    primaryChildFragment = mountWorkInProgressOffscreenFiber(\n      primaryChildProps,\n      mode,\n      NoLanes,\n    );\n    fallbackChildFragment = createFiberFromFragment(\n      fallbackChildren,\n      mode,\n      renderLanes,\n      null,\n    );\n  }\n\n  primaryChildFragment.return = workInProgress;\n  fallbackChildFragment.return = workInProgress;\n  primaryChildFragment.sibling = fallbackChildFragment;\n  workInProgress.child = primaryChildFragment;\n  return fallbackChildFragment;\n}\n\nfunction mountWorkInProgressOffscreenFiber(\n  offscreenProps: OffscreenProps,\n  mode: TypeOfMode,\n  renderLanes: Lanes,\n) {\n  // The props argument to `createFiberFromOffscreen` is `any` typed, so we use\n  // this wrapper function to constrain it.\n  return createFiberFromOffscreen(offscreenProps, mode, NoLanes, null);\n}\n\nfunction updateWorkInProgressOffscreenFiber(\n  current: Fiber,\n  offscreenProps: OffscreenProps,\n) {\n  // The props argument to `createWorkInProgress` is `any` typed, so we use this\n  // wrapper function to constrain it.\n  return createWorkInProgress(current, offscreenProps);\n}\n\nfunction updateSuspensePrimaryChildren(\n  current,\n  workInProgress,\n  primaryChildren,\n  renderLanes,\n) {\n  const currentPrimaryChildFragment: Fiber = (current.child: any);\n  const currentFallbackChildFragment: Fiber | null =\n    currentPrimaryChildFragment.sibling;\n\n  const primaryChildFragment = updateWorkInProgressOffscreenFiber(\n    currentPrimaryChildFragment,\n    {\n      mode: 'visible',\n      children: primaryChildren,\n    },\n  );\n  if ((workInProgress.mode & ConcurrentMode) === NoMode) {\n    primaryChildFragment.lanes = renderLanes;\n  }\n  primaryChildFragment.return = workInProgress;\n  primaryChildFragment.sibling = null;\n  if (currentFallbackChildFragment !== null) {\n    // Delete the fallback child fragment\n    const deletions = workInProgress.deletions;\n    if (deletions === null) {\n      workInProgress.deletions = [currentFallbackChildFragment];\n      workInProgress.flags |= ChildDeletion;\n    } else {\n      deletions.push(currentFallbackChildFragment);\n    }\n  }\n\n  workInProgress.child = primaryChildFragment;\n  return primaryChildFragment;\n}\n\nfunction updateSuspenseFallbackChildren(\n  current,\n  workInProgress,\n  primaryChildren,\n  fallbackChildren,\n  renderLanes,\n) {\n  const mode = workInProgress.mode;\n  const currentPrimaryChildFragment: Fiber = (current.child: any);\n  const currentFallbackChildFragment: Fiber | null =\n    currentPrimaryChildFragment.sibling;\n\n  const primaryChildProps: OffscreenProps = {\n    mode: 'hidden',\n    children: primaryChildren,\n  };\n\n  let primaryChildFragment;\n  if (\n    // In legacy mode, we commit the primary tree as if it successfully\n    // completed, even though it's in an inconsistent state.\n    (mode & ConcurrentMode) === NoMode &&\n    // Make sure we're on the second pass, i.e. the primary child fragment was\n    // already cloned. In legacy mode, the only case where this isn't true is\n    // when DevTools forces us to display a fallback; we skip the first render\n    // pass entirely and go straight to rendering the fallback. (In Concurrent\n    // Mode, SuspenseList can also trigger this scenario, but this is a legacy-\n    // only codepath.)\n    workInProgress.child !== currentPrimaryChildFragment\n  ) {\n    const progressedPrimaryFragment: Fiber = (workInProgress.child: any);\n    primaryChildFragment = progressedPrimaryFragment;\n    primaryChildFragment.childLanes = NoLanes;\n    primaryChildFragment.pendingProps = primaryChildProps;\n\n    if (enableProfilerTimer && workInProgress.mode & ProfileMode) {\n      // Reset the durations from the first pass so they aren't included in the\n      // final amounts. This seems counterintuitive, since we're intentionally\n      // not measuring part of the render phase, but this makes it match what we\n      // do in Concurrent Mode.\n      primaryChildFragment.actualDuration = 0;\n      primaryChildFragment.actualStartTime = -1;\n      primaryChildFragment.selfBaseDuration =\n        currentPrimaryChildFragment.selfBaseDuration;\n      primaryChildFragment.treeBaseDuration =\n        currentPrimaryChildFragment.treeBaseDuration;\n    }\n\n    if (enablePersistentOffscreenHostContainer && supportsPersistence) {\n      // In persistent mode, the offscreen children are wrapped in a host node.\n      // We need to complete it now, because we're going to skip over its normal\n      // complete phase and go straight to rendering the fallback.\n      const currentOffscreenContainer = currentPrimaryChildFragment.child;\n      const offscreenContainer: Fiber = (primaryChildFragment.child: any);\n      const containerProps = getOffscreenContainerProps(\n        'hidden',\n        primaryChildren,\n      );\n      offscreenContainer.pendingProps = containerProps;\n      offscreenContainer.memoizedProps = containerProps;\n      completeSuspendedOffscreenHostContainer(\n        currentOffscreenContainer,\n        offscreenContainer,\n      );\n    }\n\n    // The fallback fiber was added as a deletion during the first pass.\n    // However, since we're going to remain on the fallback, we no longer want\n    // to delete it.\n    workInProgress.deletions = null;\n  } else {\n    primaryChildFragment = updateWorkInProgressOffscreenFiber(\n      currentPrimaryChildFragment,\n      primaryChildProps,\n    );\n\n    if (enablePersistentOffscreenHostContainer && supportsPersistence) {\n      // In persistent mode, the offscreen children are wrapped in a host node.\n      // We need to complete it now, because we're going to skip over its normal\n      // complete phase and go straight to rendering the fallback.\n      const currentOffscreenContainer = currentPrimaryChildFragment.child;\n      if (currentOffscreenContainer !== null) {\n        const isHidden = true;\n        const offscreenContainer = reconcileOffscreenHostContainer(\n          currentPrimaryChildFragment,\n          primaryChildFragment,\n          isHidden,\n          primaryChildren,\n          renderLanes,\n        );\n        offscreenContainer.memoizedProps = offscreenContainer.pendingProps;\n        completeSuspendedOffscreenHostContainer(\n          currentOffscreenContainer,\n          offscreenContainer,\n        );\n      }\n    }\n\n    // Since we're reusing a current tree, we need to reuse the flags, too.\n    // (We don't do this in legacy mode, because in legacy mode we don't re-use\n    // the current tree; see previous branch.)\n    primaryChildFragment.subtreeFlags =\n      currentPrimaryChildFragment.subtreeFlags & StaticMask;\n  }\n  let fallbackChildFragment;\n  if (currentFallbackChildFragment !== null) {\n    fallbackChildFragment = createWorkInProgress(\n      currentFallbackChildFragment,\n      fallbackChildren,\n    );\n  } else {\n    fallbackChildFragment = createFiberFromFragment(\n      fallbackChildren,\n      mode,\n      renderLanes,\n      null,\n    );\n    // Needs a placement effect because the parent (the Suspense boundary) already\n    // mounted but this is a new fiber.\n    fallbackChildFragment.flags |= Placement;\n  }\n\n  fallbackChildFragment.return = workInProgress;\n  primaryChildFragment.return = workInProgress;\n  primaryChildFragment.sibling = fallbackChildFragment;\n  workInProgress.child = primaryChildFragment;\n\n  return fallbackChildFragment;\n}\n\nfunction retrySuspenseComponentWithoutHydrating(\n  current: Fiber,\n  workInProgress: Fiber,\n  renderLanes: Lanes,\n) {\n  // This will add the old fiber to the deletion list\n  reconcileChildFibers(workInProgress, current.child, null, renderLanes);\n\n  // We're now not suspended nor dehydrated.\n  const nextProps = workInProgress.pendingProps;\n  const primaryChildren = nextProps.children;\n  const primaryChildFragment = mountSuspensePrimaryChildren(\n    workInProgress,\n    primaryChildren,\n    renderLanes,\n  );\n  // Needs a placement effect because the parent (the Suspense boundary) already\n  // mounted but this is a new fiber.\n  primaryChildFragment.flags |= Placement;\n  workInProgress.memoizedState = null;\n\n  return primaryChildFragment;\n}\n\nfunction mountSuspenseFallbackAfterRetryWithoutHydrating(\n  current,\n  workInProgress,\n  primaryChildren,\n  fallbackChildren,\n  renderLanes,\n) {\n  const fiberMode = workInProgress.mode;\n  const primaryChildProps: OffscreenProps = {\n    mode: 'visible',\n    children: primaryChildren,\n  };\n  const primaryChildFragment = mountWorkInProgressOffscreenFiber(\n    primaryChildProps,\n    fiberMode,\n    NoLanes,\n  );\n  const fallbackChildFragment = createFiberFromFragment(\n    fallbackChildren,\n    fiberMode,\n    renderLanes,\n    null,\n  );\n  // Needs a placement effect because the parent (the Suspense\n  // boundary) already mounted but this is a new fiber.\n  fallbackChildFragment.flags |= Placement;\n\n  primaryChildFragment.return = workInProgress;\n  fallbackChildFragment.return = workInProgress;\n  primaryChildFragment.sibling = fallbackChildFragment;\n  workInProgress.child = primaryChildFragment;\n\n  if ((workInProgress.mode & ConcurrentMode) !== NoMode) {\n    // We will have dropped the effect list which contains the\n    // deletion. We need to reconcile to delete the current child.\n    reconcileChildFibers(workInProgress, current.child, null, renderLanes);\n  }\n\n  return fallbackChildFragment;\n}\n\nfunction mountDehydratedSuspenseComponent(\n  workInProgress: Fiber,\n  suspenseInstance: SuspenseInstance,\n  renderLanes: Lanes,\n): null | Fiber {\n  // During the first pass, we'll bail out and not drill into the children.\n  // Instead, we'll leave the content in place and try to hydrate it later.\n  if ((workInProgress.mode & ConcurrentMode) === NoMode) {\n    if (__DEV__) {\n      console.error(\n        'Cannot hydrate Suspense in legacy mode. Switch from ' +\n          'ReactDOM.hydrate(element, container) to ' +\n          'ReactDOM.createRoot(container, { hydrate: true })' +\n          '.render(element) or remove the Suspense components from ' +\n          'the server rendered components.',\n      );\n    }\n    workInProgress.lanes = laneToLanes(SyncLane);\n  } else if (isSuspenseInstanceFallback(suspenseInstance)) {\n    // This is a client-only boundary. Since we won't get any content from the server\n    // for this, we need to schedule that at a higher priority based on when it would\n    // have timed out. In theory we could render it in this pass but it would have the\n    // wrong priority associated with it and will prevent hydration of parent path.\n    // Instead, we'll leave work left on it to render it in a separate commit.\n\n    // TODO This time should be the time at which the server rendered response that is\n    // a parent to this boundary was displayed. However, since we currently don't have\n    // a protocol to transfer that time, we'll just estimate it by using the current\n    // time. This will mean that Suspense timeouts are slightly shifted to later than\n    // they should be.\n    // Schedule a normal pri update to render this content.\n    workInProgress.lanes = laneToLanes(DefaultHydrationLane);\n  } else {\n    // We'll continue hydrating the rest at offscreen priority since we'll already\n    // be showing the right content coming from the server, it is no rush.\n    workInProgress.lanes = laneToLanes(OffscreenLane);\n  }\n  return null;\n}\n\nfunction updateDehydratedSuspenseComponent(\n  current: Fiber,\n  workInProgress: Fiber,\n  suspenseInstance: SuspenseInstance,\n  suspenseState: SuspenseState,\n  renderLanes: Lanes,\n): null | Fiber {\n  // We should never be hydrating at this point because it is the first pass,\n  // but after we've already committed once.\n  warnIfHydrating();\n\n  if ((getExecutionContext() & RetryAfterError) !== NoContext) {\n    return retrySuspenseComponentWithoutHydrating(\n      current,\n      workInProgress,\n      renderLanes,\n    );\n  }\n\n  if ((workInProgress.mode & ConcurrentMode) === NoMode) {\n    return retrySuspenseComponentWithoutHydrating(\n      current,\n      workInProgress,\n      renderLanes,\n    );\n  }\n\n  if (isSuspenseInstanceFallback(suspenseInstance)) {\n    // This boundary is in a permanent fallback state. In this case, we'll never\n    // get an update and we'll never be able to hydrate the final content. Let's just try the\n    // client side render instead.\n    return retrySuspenseComponentWithoutHydrating(\n      current,\n      workInProgress,\n      renderLanes,\n    );\n  }\n\n  if (\n    enableLazyContextPropagation &&\n    // TODO: Factoring is a little weird, since we check this right below, too.\n    // But don't want to re-arrange the if-else chain until/unless this\n    // feature lands.\n    !didReceiveUpdate\n  ) {\n    // We need to check if any children have context before we decide to bail\n    // out, so propagate the changes now.\n    lazilyPropagateParentContextChanges(current, workInProgress, renderLanes);\n  }\n\n  // We use lanes to indicate that a child might depend on context, so if\n  // any context has changed, we need to treat is as if the input might have changed.\n  const hasContextChanged = includesSomeLane(renderLanes, current.childLanes);\n  if (didReceiveUpdate || hasContextChanged) {\n    // This boundary has changed since the first render. This means that we are now unable to\n    // hydrate it. We might still be able to hydrate it using a higher priority lane.\n    const root = getWorkInProgressRoot();\n    if (root !== null) {\n      const attemptHydrationAtLane = getBumpedLaneForHydration(\n        root,\n        renderLanes,\n      );\n      if (\n        attemptHydrationAtLane !== NoLane &&\n        attemptHydrationAtLane !== suspenseState.retryLane\n      ) {\n        // Intentionally mutating since this render will get interrupted. This\n        // is one of the very rare times where we mutate the current tree\n        // during the render phase.\n        suspenseState.retryLane = attemptHydrationAtLane;\n        // TODO: Ideally this would inherit the event time of the current render\n        const eventTime = NoTimestamp;\n        scheduleUpdateOnFiber(current, attemptHydrationAtLane, eventTime);\n      } else {\n        // We have already tried to ping at a higher priority than we're rendering with\n        // so if we got here, we must have failed to hydrate at those levels. We must\n        // now give up. Instead, we're going to delete the whole subtree and instead inject\n        // a new real Suspense boundary to take its place, which may render content\n        // or fallback. This might suspend for a while and if it does we might still have\n        // an opportunity to hydrate before this pass commits.\n      }\n    }\n\n    // If we have scheduled higher pri work above, this will probably just abort the render\n    // since we now have higher priority work, but in case it doesn't, we need to prepare to\n    // render something, if we time out. Even if that requires us to delete everything and\n    // skip hydration.\n    // Delay having to do this as long as the suspense timeout allows us.\n    renderDidSuspendDelayIfPossible();\n    return retrySuspenseComponentWithoutHydrating(\n      current,\n      workInProgress,\n      renderLanes,\n    );\n  } else if (isSuspenseInstancePending(suspenseInstance)) {\n    // This component is still pending more data from the server, so we can't hydrate its\n    // content. We treat it as if this component suspended itself. It might seem as if\n    // we could just try to render it client-side instead. However, this will perform a\n    // lot of unnecessary work and is unlikely to complete since it often will suspend\n    // on missing data anyway. Additionally, the server might be able to render more\n    // than we can on the client yet. In that case we'd end up with more fallback states\n    // on the client than if we just leave it alone. If the server times out or errors\n    // these should update this boundary to the permanent Fallback state instead.\n    // Mark it as having captured (i.e. suspended).\n    workInProgress.flags |= DidCapture;\n    // Leave the child in place. I.e. the dehydrated fragment.\n    workInProgress.child = current.child;\n    // Register a callback to retry this boundary once the server has sent the result.\n    const retry = retryDehydratedSuspenseBoundary.bind(null, current);\n    registerSuspenseInstanceRetry(suspenseInstance, retry);\n    return null;\n  } else {\n    // This is the first attempt.\n    reenterHydrationStateFromDehydratedSuspenseInstance(\n      workInProgress,\n      suspenseInstance,\n    );\n    const nextProps = workInProgress.pendingProps;\n    const primaryChildren = nextProps.children;\n    const primaryChildFragment = mountSuspensePrimaryChildren(\n      workInProgress,\n      primaryChildren,\n      renderLanes,\n    );\n    // Mark the children as hydrating. This is a fast path to know whether this\n    // tree is part of a hydrating tree. This is used to determine if a child\n    // node has fully mounted yet, and for scheduling event replaying.\n    // Conceptually this is similar to Placement in that a new subtree is\n    // inserted into the React tree here. It just happens to not need DOM\n    // mutations because it already exists.\n    primaryChildFragment.flags |= Hydrating;\n    return primaryChildFragment;\n  }\n}\n\nfunction scheduleWorkOnFiber(fiber: Fiber, renderLanes: Lanes) {\n  fiber.lanes = mergeLanes(fiber.lanes, renderLanes);\n  const alternate = fiber.alternate;\n  if (alternate !== null) {\n    alternate.lanes = mergeLanes(alternate.lanes, renderLanes);\n  }\n  scheduleWorkOnParentPath(fiber.return, renderLanes);\n}\n\nfunction propagateSuspenseContextChange(\n  workInProgress: Fiber,\n  firstChild: null | Fiber,\n  renderLanes: Lanes,\n): void {\n  // Mark any Suspense boundaries with fallbacks as having work to do.\n  // If they were previously forced into fallbacks, they may now be able\n  // to unblock.\n  let node = firstChild;\n  while (node !== null) {\n    if (node.tag === SuspenseComponent) {\n      const state: SuspenseState | null = node.memoizedState;\n      if (state !== null) {\n        scheduleWorkOnFiber(node, renderLanes);\n      }\n    } else if (node.tag === SuspenseListComponent) {\n      // If the tail is hidden there might not be an Suspense boundaries\n      // to schedule work on. In this case we have to schedule it on the\n      // list itself.\n      // We don't have to traverse to the children of the list since\n      // the list will propagate the change when it rerenders.\n      scheduleWorkOnFiber(node, renderLanes);\n    } else if (node.child !== null) {\n      node.child.return = node;\n      node = node.child;\n      continue;\n    }\n    if (node === workInProgress) {\n      return;\n    }\n    while (node.sibling === null) {\n      if (node.return === null || node.return === workInProgress) {\n        return;\n      }\n      node = node.return;\n    }\n    node.sibling.return = node.return;\n    node = node.sibling;\n  }\n}\n\nfunction findLastContentRow(firstChild: null | Fiber): null | Fiber {\n  // This is going to find the last row among these children that is already\n  // showing content on the screen, as opposed to being in fallback state or\n  // new. If a row has multiple Suspense boundaries, any of them being in the\n  // fallback state, counts as the whole row being in a fallback state.\n  // Note that the \"rows\" will be workInProgress, but any nested children\n  // will still be current since we haven't rendered them yet. The mounted\n  // order may not be the same as the new order. We use the new order.\n  let row = firstChild;\n  let lastContentRow: null | Fiber = null;\n  while (row !== null) {\n    const currentRow = row.alternate;\n    // New rows can't be content rows.\n    if (currentRow !== null && findFirstSuspended(currentRow) === null) {\n      lastContentRow = row;\n    }\n    row = row.sibling;\n  }\n  return lastContentRow;\n}\n\ntype SuspenseListRevealOrder = 'forwards' | 'backwards' | 'together' | void;\n\nfunction validateRevealOrder(revealOrder: SuspenseListRevealOrder) {\n  if (__DEV__) {\n    if (\n      revealOrder !== undefined &&\n      revealOrder !== 'forwards' &&\n      revealOrder !== 'backwards' &&\n      revealOrder !== 'together' &&\n      !didWarnAboutRevealOrder[revealOrder]\n    ) {\n      didWarnAboutRevealOrder[revealOrder] = true;\n      if (typeof revealOrder === 'string') {\n        switch (revealOrder.toLowerCase()) {\n          case 'together':\n          case 'forwards':\n          case 'backwards': {\n            console.error(\n              '\"%s\" is not a valid value for revealOrder on <SuspenseList />. ' +\n                'Use lowercase \"%s\" instead.',\n              revealOrder,\n              revealOrder.toLowerCase(),\n            );\n            break;\n          }\n          case 'forward':\n          case 'backward': {\n            console.error(\n              '\"%s\" is not a valid value for revealOrder on <SuspenseList />. ' +\n                'React uses the -s suffix in the spelling. Use \"%ss\" instead.',\n              revealOrder,\n              revealOrder.toLowerCase(),\n            );\n            break;\n          }\n          default:\n            console.error(\n              '\"%s\" is not a supported revealOrder on <SuspenseList />. ' +\n                'Did you mean \"together\", \"forwards\" or \"backwards\"?',\n              revealOrder,\n            );\n            break;\n        }\n      } else {\n        console.error(\n          '%s is not a supported value for revealOrder on <SuspenseList />. ' +\n            'Did you mean \"together\", \"forwards\" or \"backwards\"?',\n          revealOrder,\n        );\n      }\n    }\n  }\n}\n\nfunction validateTailOptions(\n  tailMode: SuspenseListTailMode,\n  revealOrder: SuspenseListRevealOrder,\n) {\n  if (__DEV__) {\n    if (tailMode !== undefined && !didWarnAboutTailOptions[tailMode]) {\n      if (tailMode !== 'collapsed' && tailMode !== 'hidden') {\n        didWarnAboutTailOptions[tailMode] = true;\n        console.error(\n          '\"%s\" is not a supported value for tail on <SuspenseList />. ' +\n            'Did you mean \"collapsed\" or \"hidden\"?',\n          tailMode,\n        );\n      } else if (revealOrder !== 'forwards' && revealOrder !== 'backwards') {\n        didWarnAboutTailOptions[tailMode] = true;\n        console.error(\n          '<SuspenseList tail=\"%s\" /> is only valid if revealOrder is ' +\n            '\"forwards\" or \"backwards\". ' +\n            'Did you mean to specify revealOrder=\"forwards\"?',\n          tailMode,\n        );\n      }\n    }\n  }\n}\n\nfunction validateSuspenseListNestedChild(childSlot: mixed, index: number) {\n  if (__DEV__) {\n    const isAnArray = isArray(childSlot);\n    const isIterable =\n      !isAnArray && typeof getIteratorFn(childSlot) === 'function';\n    if (isAnArray || isIterable) {\n      const type = isAnArray ? 'array' : 'iterable';\n      console.error(\n        'A nested %s was passed to row #%s in <SuspenseList />. Wrap it in ' +\n          'an additional SuspenseList to configure its revealOrder: ' +\n          '<SuspenseList revealOrder=...> ... ' +\n          '<SuspenseList revealOrder=...>{%s}</SuspenseList> ... ' +\n          '</SuspenseList>',\n        type,\n        index,\n        type,\n      );\n      return false;\n    }\n  }\n  return true;\n}\n\nfunction validateSuspenseListChildren(\n  children: mixed,\n  revealOrder: SuspenseListRevealOrder,\n) {\n  if (__DEV__) {\n    if (\n      (revealOrder === 'forwards' || revealOrder === 'backwards') &&\n      children !== undefined &&\n      children !== null &&\n      children !== false\n    ) {\n      if (isArray(children)) {\n        for (let i = 0; i < children.length; i++) {\n          if (!validateSuspenseListNestedChild(children[i], i)) {\n            return;\n          }\n        }\n      } else {\n        const iteratorFn = getIteratorFn(children);\n        if (typeof iteratorFn === 'function') {\n          const childrenIterator = iteratorFn.call(children);\n          if (childrenIterator) {\n            let step = childrenIterator.next();\n            let i = 0;\n            for (; !step.done; step = childrenIterator.next()) {\n              if (!validateSuspenseListNestedChild(step.value, i)) {\n                return;\n              }\n              i++;\n            }\n          }\n        } else {\n          console.error(\n            'A single row was passed to a <SuspenseList revealOrder=\"%s\" />. ' +\n              'This is not useful since it needs multiple rows. ' +\n              'Did you mean to pass multiple children or an array?',\n            revealOrder,\n          );\n        }\n      }\n    }\n  }\n}\n\nfunction initSuspenseListRenderState(\n  workInProgress: Fiber,\n  isBackwards: boolean,\n  tail: null | Fiber,\n  lastContentRow: null | Fiber,\n  tailMode: SuspenseListTailMode,\n): void {\n  const renderState: null | SuspenseListRenderState =\n    workInProgress.memoizedState;\n  if (renderState === null) {\n    workInProgress.memoizedState = ({\n      isBackwards: isBackwards,\n      rendering: null,\n      renderingStartTime: 0,\n      last: lastContentRow,\n      tail: tail,\n      tailMode: tailMode,\n    }: SuspenseListRenderState);\n  } else {\n    // We can reuse the existing object from previous renders.\n    renderState.isBackwards = isBackwards;\n    renderState.rendering = null;\n    renderState.renderingStartTime = 0;\n    renderState.last = lastContentRow;\n    renderState.tail = tail;\n    renderState.tailMode = tailMode;\n  }\n}\n\n// This can end up rendering this component multiple passes.\n// The first pass splits the children fibers into two sets. A head and tail.\n// We first render the head. If anything is in fallback state, we do another\n// pass through beginWork to rerender all children (including the tail) with\n// the force suspend context. If the first render didn't have anything in\n// in fallback state. Then we render each row in the tail one-by-one.\n// That happens in the completeWork phase without going back to beginWork.\nfunction updateSuspenseListComponent(\n  current: Fiber | null,\n  workInProgress: Fiber,\n  renderLanes: Lanes,\n) {\n  const nextProps = workInProgress.pendingProps;\n  const revealOrder: SuspenseListRevealOrder = nextProps.revealOrder;\n  const tailMode: SuspenseListTailMode = nextProps.tail;\n  const newChildren = nextProps.children;\n\n  validateRevealOrder(revealOrder);\n  validateTailOptions(tailMode, revealOrder);\n  validateSuspenseListChildren(newChildren, revealOrder);\n\n  reconcileChildren(current, workInProgress, newChildren, renderLanes);\n\n  let suspenseContext: SuspenseContext = suspenseStackCursor.current;\n\n  const shouldForceFallback = hasSuspenseContext(\n    suspenseContext,\n    (ForceSuspenseFallback: SuspenseContext),\n  );\n  if (shouldForceFallback) {\n    suspenseContext = setShallowSuspenseContext(\n      suspenseContext,\n      ForceSuspenseFallback,\n    );\n    workInProgress.flags |= DidCapture;\n  } else {\n    const didSuspendBefore =\n      current !== null && (current.flags & DidCapture) !== NoFlags;\n    if (didSuspendBefore) {\n      // If we previously forced a fallback, we need to schedule work\n      // on any nested boundaries to let them know to try to render\n      // again. This is the same as context updating.\n      propagateSuspenseContextChange(\n        workInProgress,\n        workInProgress.child,\n        renderLanes,\n      );\n    }\n    suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);\n  }\n  pushSuspenseContext(workInProgress, suspenseContext);\n\n  if ((workInProgress.mode & ConcurrentMode) === NoMode) {\n    // In legacy mode, SuspenseList doesn't work so we just\n    // use make it a noop by treating it as the default revealOrder.\n    workInProgress.memoizedState = null;\n  } else {\n    switch (revealOrder) {\n      case 'forwards': {\n        const lastContentRow = findLastContentRow(workInProgress.child);\n        let tail;\n        if (lastContentRow === null) {\n          // The whole list is part of the tail.\n          // TODO: We could fast path by just rendering the tail now.\n          tail = workInProgress.child;\n          workInProgress.child = null;\n        } else {\n          // Disconnect the tail rows after the content row.\n          // We're going to render them separately later.\n          tail = lastContentRow.sibling;\n          lastContentRow.sibling = null;\n        }\n        initSuspenseListRenderState(\n          workInProgress,\n          false, // isBackwards\n          tail,\n          lastContentRow,\n          tailMode,\n        );\n        break;\n      }\n      case 'backwards': {\n        // We're going to find the first row that has existing content.\n        // At the same time we're going to reverse the list of everything\n        // we pass in the meantime. That's going to be our tail in reverse\n        // order.\n        let tail = null;\n        let row = workInProgress.child;\n        workInProgress.child = null;\n        while (row !== null) {\n          const currentRow = row.alternate;\n          // New rows can't be content rows.\n          if (currentRow !== null && findFirstSuspended(currentRow) === null) {\n            // This is the beginning of the main content.\n            workInProgress.child = row;\n            break;\n          }\n          const nextRow = row.sibling;\n          row.sibling = tail;\n          tail = row;\n          row = nextRow;\n        }\n        // TODO: If workInProgress.child is null, we can continue on the tail immediately.\n        initSuspenseListRenderState(\n          workInProgress,\n          true, // isBackwards\n          tail,\n          null, // last\n          tailMode,\n        );\n        break;\n      }\n      case 'together': {\n        initSuspenseListRenderState(\n          workInProgress,\n          false, // isBackwards\n          null, // tail\n          null, // last\n          undefined,\n        );\n        break;\n      }\n      default: {\n        // The default reveal order is the same as not having\n        // a boundary.\n        workInProgress.memoizedState = null;\n      }\n    }\n  }\n  return workInProgress.child;\n}\n\nfunction updatePortalComponent(\n  current: Fiber | null,\n  workInProgress: Fiber,\n  renderLanes: Lanes,\n) {\n  pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);\n  const nextChildren = workInProgress.pendingProps;\n  if (current === null) {\n    // Portals are special because we don't append the children during mount\n    // but at commit. Therefore we need to track insertions which the normal\n    // flow doesn't do during mount. This doesn't happen at the root because\n    // the root always starts with a \"current\" with a null child.\n    // TODO: Consider unifying this with how the root works.\n    workInProgress.child = reconcileChildFibers(\n      workInProgress,\n      null,\n      nextChildren,\n      renderLanes,\n    );\n  } else {\n    reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n  }\n  return workInProgress.child;\n}\n\nlet hasWarnedAboutUsingNoValuePropOnContextProvider = false;\n\nfunction updateContextProvider(\n  current: Fiber | null,\n  workInProgress: Fiber,\n  renderLanes: Lanes,\n) {\n  const providerType: ReactProviderType<any> = workInProgress.type;\n  const context: ReactContext<any> = providerType._context;\n\n  const newProps = workInProgress.pendingProps;\n  const oldProps = workInProgress.memoizedProps;\n\n  const newValue = newProps.value;\n\n  if (__DEV__) {\n    if (!('value' in newProps)) {\n      if (!hasWarnedAboutUsingNoValuePropOnContextProvider) {\n        hasWarnedAboutUsingNoValuePropOnContextProvider = true;\n        console.error(\n          'The `value` prop is required for the `<Context.Provider>`. Did you misspell it or forget to pass it?',\n        );\n      }\n    }\n    const providerPropTypes = workInProgress.type.propTypes;\n\n    if (providerPropTypes) {\n      checkPropTypes(providerPropTypes, newProps, 'prop', 'Context.Provider');\n    }\n  }\n\n  pushProvider(workInProgress, context, newValue);\n\n  if (enableLazyContextPropagation) {\n    // In the lazy propagation implementation, we don't scan for matching\n    // consumers until something bails out, because until something bails out\n    // we're going to visit those nodes, anyway. The trade-off is that it shifts\n    // responsibility to the consumer to track whether something has changed.\n  } else {\n    if (oldProps !== null) {\n      const oldValue = oldProps.value;\n      if (is(oldValue, newValue)) {\n        // No change. Bailout early if children are the same.\n        if (\n          oldProps.children === newProps.children &&\n          !hasLegacyContextChanged()\n        ) {\n          return bailoutOnAlreadyFinishedWork(\n            current,\n            workInProgress,\n            renderLanes,\n          );\n        }\n      } else {\n        // The context value changed. Search for matching consumers and schedule\n        // them to update.\n        propagateContextChange(workInProgress, context, renderLanes);\n      }\n    }\n  }\n\n  const newChildren = newProps.children;\n  reconcileChildren(current, workInProgress, newChildren, renderLanes);\n  return workInProgress.child;\n}\n\nlet hasWarnedAboutUsingContextAsConsumer = false;\n\nfunction updateContextConsumer(\n  current: Fiber | null,\n  workInProgress: Fiber,\n  renderLanes: Lanes,\n) {\n  let context: ReactContext<any> = workInProgress.type;\n  // The logic below for Context differs depending on PROD or DEV mode. In\n  // DEV mode, we create a separate object for Context.Consumer that acts\n  // like a proxy to Context. This proxy object adds unnecessary code in PROD\n  // so we use the old behaviour (Context.Consumer references Context) to\n  // reduce size and overhead. The separate object references context via\n  // a property called \"_context\", which also gives us the ability to check\n  // in DEV mode if this property exists or not and warn if it does not.\n  if (__DEV__) {\n    if ((context: any)._context === undefined) {\n      // This may be because it's a Context (rather than a Consumer).\n      // Or it may be because it's older React where they're the same thing.\n      // We only want to warn if we're sure it's a new React.\n      if (context !== context.Consumer) {\n        if (!hasWarnedAboutUsingContextAsConsumer) {\n          hasWarnedAboutUsingContextAsConsumer = true;\n          console.error(\n            'Rendering <Context> directly is not supported and will be removed in ' +\n              'a future major release. Did you mean to render <Context.Consumer> instead?',\n          );\n        }\n      }\n    } else {\n      context = (context: any)._context;\n    }\n  }\n  const newProps = workInProgress.pendingProps;\n  const render = newProps.children;\n\n  if (__DEV__) {\n    if (typeof render !== 'function') {\n      console.error(\n        'A context consumer was rendered with multiple children, or a child ' +\n          \"that isn't a function. A context consumer expects a single child \" +\n          'that is a function. If you did pass a function, make sure there ' +\n          'is no trailing or leading whitespace around it.',\n      );\n    }\n  }\n\n  prepareToReadContext(workInProgress, renderLanes);\n  const newValue = readContext(context);\n  if (enableSchedulingProfiler) {\n    markComponentRenderStarted(workInProgress);\n  }\n  let newChildren;\n  if (__DEV__) {\n    ReactCurrentOwner.current = workInProgress;\n    setIsRendering(true);\n    newChildren = render(newValue);\n    setIsRendering(false);\n  } else {\n    newChildren = render(newValue);\n  }\n  if (enableSchedulingProfiler) {\n    markComponentRenderStopped();\n  }\n\n  // React DevTools reads this flag.\n  workInProgress.flags |= PerformedWork;\n  reconcileChildren(current, workInProgress, newChildren, renderLanes);\n  return workInProgress.child;\n}\n\nfunction updateScopeComponent(current, workInProgress, renderLanes) {\n  const nextProps = workInProgress.pendingProps;\n  const nextChildren = nextProps.children;\n\n  reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n  return workInProgress.child;\n}\n\nexport function markWorkInProgressReceivedUpdate() {\n  didReceiveUpdate = true;\n}\n\nexport function checkIfWorkInProgressReceivedUpdate() {\n  return didReceiveUpdate;\n}\n\nfunction bailoutOnAlreadyFinishedWork(\n  current: Fiber | null,\n  workInProgress: Fiber,\n  renderLanes: Lanes,\n): Fiber | null {\n  if (current !== null) {\n    // Reuse previous dependencies\n    workInProgress.dependencies = current.dependencies;\n  }\n\n  if (enableProfilerTimer) {\n    // Don't update \"base\" render times for bailouts.\n    stopProfilerTimerIfRunning(workInProgress);\n  }\n\n  markSkippedUpdateLanes(workInProgress.lanes);\n\n  // Check if the children have any pending work.\n  if (!includesSomeLane(renderLanes, workInProgress.childLanes)) {\n    // The children don't have any work either. We can skip them.\n    // TODO: Once we add back resuming, we should check if the children are\n    // a work-in-progress set. If so, we need to transfer their effects.\n\n    if (enableLazyContextPropagation && current !== null) {\n      // Before bailing out, check if there are any context changes in\n      // the children.\n      lazilyPropagateParentContextChanges(current, workInProgress, renderLanes);\n      if (!includesSomeLane(renderLanes, workInProgress.childLanes)) {\n        return null;\n      }\n    } else {\n      return null;\n    }\n  }\n\n  // This fiber doesn't have work, but its subtree does. Clone the child\n  // fibers and continue.\n  cloneChildFibers(current, workInProgress);\n  return workInProgress.child;\n}\n\nfunction remountFiber(\n  current: Fiber,\n  oldWorkInProgress: Fiber,\n  newWorkInProgress: Fiber,\n): Fiber | null {\n  if (__DEV__) {\n    const returnFiber = oldWorkInProgress.return;\n    if (returnFiber === null) {\n      throw new Error('Cannot swap the root fiber.');\n    }\n\n    // Disconnect from the old current.\n    // It will get deleted.\n    current.alternate = null;\n    oldWorkInProgress.alternate = null;\n\n    // Connect to the new tree.\n    newWorkInProgress.index = oldWorkInProgress.index;\n    newWorkInProgress.sibling = oldWorkInProgress.sibling;\n    newWorkInProgress.return = oldWorkInProgress.return;\n    newWorkInProgress.ref = oldWorkInProgress.ref;\n\n    // Replace the child/sibling pointers above it.\n    if (oldWorkInProgress === returnFiber.child) {\n      returnFiber.child = newWorkInProgress;\n    } else {\n      let prevSibling = returnFiber.child;\n      if (prevSibling === null) {\n        throw new Error('Expected parent to have a child.');\n      }\n      while (prevSibling.sibling !== oldWorkInProgress) {\n        prevSibling = prevSibling.sibling;\n        if (prevSibling === null) {\n          throw new Error('Expected to find the previous sibling.');\n        }\n      }\n      prevSibling.sibling = newWorkInProgress;\n    }\n\n    // Delete the old fiber and place the new one.\n    // Since the old fiber is disconnected, we have to schedule it manually.\n    const deletions = returnFiber.deletions;\n    if (deletions === null) {\n      returnFiber.deletions = [current];\n      returnFiber.flags |= ChildDeletion;\n    } else {\n      deletions.push(current);\n    }\n\n    newWorkInProgress.flags |= Placement;\n\n    // Restart work from the new fiber.\n    return newWorkInProgress;\n  } else {\n    throw new Error(\n      'Did not expect this call in production. ' +\n        'This is a bug in React. Please file an issue.',\n    );\n  }\n}\n\nfunction checkScheduledUpdateOrContext(\n  current: Fiber,\n  renderLanes: Lanes,\n): boolean {\n  // Before performing an early bailout, we must check if there are pending\n  // updates or context.\n  const updateLanes = current.lanes;\n  if (includesSomeLane(updateLanes, renderLanes)) {\n    return true;\n  }\n  // No pending update, but because context is propagated lazily, we need\n  // to check for a context change before we bail out.\n  if (enableLazyContextPropagation) {\n    const dependencies = current.dependencies;\n    if (dependencies !== null && checkIfContextChanged(dependencies)) {\n      return true;\n    }\n  }\n  return false;\n}\n\nfunction attemptEarlyBailoutIfNoScheduledUpdate(\n  current: Fiber,\n  workInProgress: Fiber,\n  renderLanes: Lanes,\n) {\n  // This fiber does not have any pending work. Bailout without entering\n  // the begin phase. There's still some bookkeeping we that needs to be done\n  // in this optimized path, mostly pushing stuff onto the stack.\n  switch (workInProgress.tag) {\n    case HostRoot:\n      pushHostRootContext(workInProgress);\n      if (enableCache) {\n        const root: FiberRoot = workInProgress.stateNode;\n        const cache: Cache = current.memoizedState.cache;\n        pushCacheProvider(workInProgress, cache);\n        pushRootCachePool(root);\n      }\n      resetHydrationState();\n      break;\n    case HostComponent:\n      pushHostContext(workInProgress);\n      break;\n    case ClassComponent: {\n      const Component = workInProgress.type;\n      if (isLegacyContextProvider(Component)) {\n        pushLegacyContextProvider(workInProgress);\n      }\n      break;\n    }\n    case HostPortal:\n      pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);\n      break;\n    case ContextProvider: {\n      const newValue = workInProgress.memoizedProps.value;\n      const context: ReactContext<any> = workInProgress.type._context;\n      pushProvider(workInProgress, context, newValue);\n      break;\n    }\n    case Profiler:\n      if (enableProfilerTimer) {\n        // Profiler should only call onRender when one of its descendants actually rendered.\n        const hasChildWork = includesSomeLane(\n          renderLanes,\n          workInProgress.childLanes,\n        );\n        if (hasChildWork) {\n          workInProgress.flags |= Update;\n        }\n\n        if (enableProfilerCommitHooks) {\n          // Reset effect durations for the next eventual effect phase.\n          // These are reset during render to allow the DevTools commit hook a chance to read them,\n          const stateNode = workInProgress.stateNode;\n          stateNode.effectDuration = 0;\n          stateNode.passiveEffectDuration = 0;\n        }\n      }\n      break;\n    case SuspenseComponent: {\n      const state: SuspenseState | null = workInProgress.memoizedState;\n      if (state !== null) {\n        if (enableSuspenseServerRenderer) {\n          if (state.dehydrated !== null) {\n            pushSuspenseContext(\n              workInProgress,\n              setDefaultShallowSuspenseContext(suspenseStackCursor.current),\n            );\n            // We know that this component will suspend again because if it has\n            // been unsuspended it has committed as a resolved Suspense component.\n            // If it needs to be retried, it should have work scheduled on it.\n            workInProgress.flags |= DidCapture;\n            // We should never render the children of a dehydrated boundary until we\n            // upgrade it. We return null instead of bailoutOnAlreadyFinishedWork.\n            return null;\n          }\n        }\n\n        // If this boundary is currently timed out, we need to decide\n        // whether to retry the primary children, or to skip over it and\n        // go straight to the fallback. Check the priority of the primary\n        // child fragment.\n        const primaryChildFragment: Fiber = (workInProgress.child: any);\n        const primaryChildLanes = primaryChildFragment.childLanes;\n        if (includesSomeLane(renderLanes, primaryChildLanes)) {\n          // The primary children have pending work. Use the normal path\n          // to attempt to render the primary children again.\n          return updateSuspenseComponent(current, workInProgress, renderLanes);\n        } else {\n          // The primary child fragment does not have pending work marked\n          // on it\n          pushSuspenseContext(\n            workInProgress,\n            setDefaultShallowSuspenseContext(suspenseStackCursor.current),\n          );\n          // The primary children do not have pending work with sufficient\n          // priority. Bailout.\n          const child = bailoutOnAlreadyFinishedWork(\n            current,\n            workInProgress,\n            renderLanes,\n          );\n          if (child !== null) {\n            // The fallback children have pending work. Skip over the\n            // primary children and work on the fallback.\n            return child.sibling;\n          } else {\n            // Note: We can return `null` here because we already checked\n            // whether there were nested context consumers, via the call to\n            // `bailoutOnAlreadyFinishedWork` above.\n            return null;\n          }\n        }\n      } else {\n        pushSuspenseContext(\n          workInProgress,\n          setDefaultShallowSuspenseContext(suspenseStackCursor.current),\n        );\n      }\n      break;\n    }\n    case SuspenseListComponent: {\n      const didSuspendBefore = (current.flags & DidCapture) !== NoFlags;\n\n      let hasChildWork = includesSomeLane(\n        renderLanes,\n        workInProgress.childLanes,\n      );\n\n      if (enableLazyContextPropagation && !hasChildWork) {\n        // Context changes may not have been propagated yet. We need to do\n        // that now, before we can decide whether to bail out.\n        // TODO: We use `childLanes` as a heuristic for whether there is\n        // remaining work in a few places, including\n        // `bailoutOnAlreadyFinishedWork` and\n        // `updateDehydratedSuspenseComponent`. We should maybe extract this\n        // into a dedicated function.\n        lazilyPropagateParentContextChanges(\n          current,\n          workInProgress,\n          renderLanes,\n        );\n        hasChildWork = includesSomeLane(renderLanes, workInProgress.childLanes);\n      }\n\n      if (didSuspendBefore) {\n        if (hasChildWork) {\n          // If something was in fallback state last time, and we have all the\n          // same children then we're still in progressive loading state.\n          // Something might get unblocked by state updates or retries in the\n          // tree which will affect the tail. So we need to use the normal\n          // path to compute the correct tail.\n          return updateSuspenseListComponent(\n            current,\n            workInProgress,\n            renderLanes,\n          );\n        }\n        // If none of the children had any work, that means that none of\n        // them got retried so they'll still be blocked in the same way\n        // as before. We can fast bail out.\n        workInProgress.flags |= DidCapture;\n      }\n\n      // If nothing suspended before and we're rendering the same children,\n      // then the tail doesn't matter. Anything new that suspends will work\n      // in the \"together\" mode, so we can continue from the state we had.\n      const renderState = workInProgress.memoizedState;\n      if (renderState !== null) {\n        // Reset to the \"together\" mode in case we've started a different\n        // update in the past but didn't complete it.\n        renderState.rendering = null;\n        renderState.tail = null;\n        renderState.lastEffect = null;\n      }\n      pushSuspenseContext(workInProgress, suspenseStackCursor.current);\n\n      if (hasChildWork) {\n        break;\n      } else {\n        // If none of the children had any work, that means that none of\n        // them got retried so they'll still be blocked in the same way\n        // as before. We can fast bail out.\n        return null;\n      }\n    }\n    case OffscreenComponent:\n    case LegacyHiddenComponent: {\n      // Need to check if the tree still needs to be deferred. This is\n      // almost identical to the logic used in the normal update path,\n      // so we'll just enter that. The only difference is we'll bail out\n      // at the next level instead of this one, because the child props\n      // have not changed. Which is fine.\n      // TODO: Probably should refactor `beginWork` to split the bailout\n      // path from the normal path. I'm tempted to do a labeled break here\n      // but I won't :)\n      workInProgress.lanes = NoLanes;\n      return updateOffscreenComponent(current, workInProgress, renderLanes);\n    }\n    case CacheComponent: {\n      if (enableCache) {\n        const cache: Cache = current.memoizedState.cache;\n        pushCacheProvider(workInProgress, cache);\n      }\n      break;\n    }\n  }\n  return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);\n}\n\nfunction beginWork(\n  current: Fiber | null,\n  workInProgress: Fiber,\n  renderLanes: Lanes,\n): Fiber | null {\n  if (__DEV__) {\n    if (workInProgress._debugNeedsRemount && current !== null) {\n      // This will restart the begin phase with a new fiber.\n      return remountFiber(\n        current,\n        workInProgress,\n        createFiberFromTypeAndProps(\n          workInProgress.type,\n          workInProgress.key,\n          workInProgress.pendingProps,\n          workInProgress._debugOwner || null,\n          workInProgress.mode,\n          workInProgress.lanes,\n        ),\n      );\n    }\n  }\n\n  if (current !== null) {\n    const oldProps = current.memoizedProps;\n    const newProps = workInProgress.pendingProps;\n\n    if (\n      oldProps !== newProps ||\n      hasLegacyContextChanged() ||\n      // Force a re-render if the implementation changed due to hot reload:\n      (__DEV__ ? workInProgress.type !== current.type : false)\n    ) {\n      // If props or context changed, mark the fiber as having performed work.\n      // This may be unset if the props are determined to be equal later (memo).\n      didReceiveUpdate = true;\n    } else {\n      // Neither props nor legacy context changes. Check if there's a pending\n      // update or context change.\n      const hasScheduledUpdateOrContext = checkScheduledUpdateOrContext(\n        current,\n        renderLanes,\n      );\n      if (\n        !hasScheduledUpdateOrContext &&\n        // If this is the second pass of an error or suspense boundary, there\n        // may not be work scheduled on `current`, so we check for this flag.\n        (workInProgress.flags & DidCapture) === NoFlags\n      ) {\n        // No pending updates or context. Bail out now.\n        didReceiveUpdate = false;\n        return attemptEarlyBailoutIfNoScheduledUpdate(\n          current,\n          workInProgress,\n          renderLanes,\n        );\n      }\n      if ((current.flags & ForceUpdateForLegacySuspense) !== NoFlags) {\n        // This is a special case that only exists for legacy mode.\n        // See https://github.com/facebook/react/pull/19216.\n        didReceiveUpdate = true;\n      } else {\n        // An update was scheduled on this fiber, but there are no new props\n        // nor legacy context. Set this to false. If an update queue or context\n        // consumer produces a changed value, it will set this to true. Otherwise,\n        // the component will assume the children have not changed and bail out.\n        didReceiveUpdate = false;\n      }\n    }\n  } else {\n    didReceiveUpdate = false;\n  }\n\n  // Before entering the begin phase, clear pending update priority.\n  // TODO: This assumes that we're about to evaluate the component and process\n  // the update queue. However, there's an exception: SimpleMemoComponent\n  // sometimes bails out later in the begin phase. This indicates that we should\n  // move this assignment out of the common path and into each branch.\n  workInProgress.lanes = NoLanes;\n\n  switch (workInProgress.tag) {\n    case IndeterminateComponent: {\n      return mountIndeterminateComponent(\n        current,\n        workInProgress,\n        workInProgress.type,\n        renderLanes,\n      );\n    }\n    case LazyComponent: {\n      const elementType = workInProgress.elementType;\n      return mountLazyComponent(\n        current,\n        workInProgress,\n        elementType,\n        renderLanes,\n      );\n    }\n    case FunctionComponent: {\n      const Component = workInProgress.type;\n      const unresolvedProps = workInProgress.pendingProps;\n      const resolvedProps =\n        workInProgress.elementType === Component\n          ? unresolvedProps\n          : resolveDefaultProps(Component, unresolvedProps);\n      return updateFunctionComponent(\n        current,\n        workInProgress,\n        Component,\n        resolvedProps,\n        renderLanes,\n      );\n    }\n    case ClassComponent: {\n      const Component = workInProgress.type;\n      const unresolvedProps = workInProgress.pendingProps;\n      const resolvedProps =\n        workInProgress.elementType === Component\n          ? unresolvedProps\n          : resolveDefaultProps(Component, unresolvedProps);\n      return updateClassComponent(\n        current,\n        workInProgress,\n        Component,\n        resolvedProps,\n        renderLanes,\n      );\n    }\n    case HostRoot:\n      return updateHostRoot(current, workInProgress, renderLanes);\n    case HostComponent:\n      return updateHostComponent(current, workInProgress, renderLanes);\n    case HostText:\n      return updateHostText(current, workInProgress);\n    case SuspenseComponent:\n      return updateSuspenseComponent(current, workInProgress, renderLanes);\n    case HostPortal:\n      return updatePortalComponent(current, workInProgress, renderLanes);\n    case ForwardRef: {\n      const type = workInProgress.type;\n      const unresolvedProps = workInProgress.pendingProps;\n      const resolvedProps =\n        workInProgress.elementType === type\n          ? unresolvedProps\n          : resolveDefaultProps(type, unresolvedProps);\n      return updateForwardRef(\n        current,\n        workInProgress,\n        type,\n        resolvedProps,\n        renderLanes,\n      );\n    }\n    case Fragment:\n      return updateFragment(current, workInProgress, renderLanes);\n    case Mode:\n      return updateMode(current, workInProgress, renderLanes);\n    case Profiler:\n      return updateProfiler(current, workInProgress, renderLanes);\n    case ContextProvider:\n      return updateContextProvider(current, workInProgress, renderLanes);\n    case ContextConsumer:\n      return updateContextConsumer(current, workInProgress, renderLanes);\n    case MemoComponent: {\n      const type = workInProgress.type;\n      const unresolvedProps = workInProgress.pendingProps;\n      // Resolve outer props first, then resolve inner props.\n      let resolvedProps = resolveDefaultProps(type, unresolvedProps);\n      if (__DEV__) {\n        if (workInProgress.type !== workInProgress.elementType) {\n          const outerPropTypes = type.propTypes;\n          if (outerPropTypes) {\n            checkPropTypes(\n              outerPropTypes,\n              resolvedProps, // Resolved for outer only\n              'prop',\n              getComponentNameFromType(type),\n            );\n          }\n        }\n      }\n      resolvedProps = resolveDefaultProps(type.type, resolvedProps);\n      return updateMemoComponent(\n        current,\n        workInProgress,\n        type,\n        resolvedProps,\n        renderLanes,\n      );\n    }\n    case SimpleMemoComponent: {\n      return updateSimpleMemoComponent(\n        current,\n        workInProgress,\n        workInProgress.type,\n        workInProgress.pendingProps,\n        renderLanes,\n      );\n    }\n    case IncompleteClassComponent: {\n      const Component = workInProgress.type;\n      const unresolvedProps = workInProgress.pendingProps;\n      const resolvedProps =\n        workInProgress.elementType === Component\n          ? unresolvedProps\n          : resolveDefaultProps(Component, unresolvedProps);\n      return mountIncompleteClassComponent(\n        current,\n        workInProgress,\n        Component,\n        resolvedProps,\n        renderLanes,\n      );\n    }\n    case SuspenseListComponent: {\n      return updateSuspenseListComponent(current, workInProgress, renderLanes);\n    }\n    case ScopeComponent: {\n      if (enableScopeAPI) {\n        return updateScopeComponent(current, workInProgress, renderLanes);\n      }\n      break;\n    }\n    case OffscreenComponent: {\n      return updateOffscreenComponent(current, workInProgress, renderLanes);\n    }\n    case LegacyHiddenComponent: {\n      return updateLegacyHiddenComponent(current, workInProgress, renderLanes);\n    }\n    case CacheComponent: {\n      if (enableCache) {\n        return updateCacheComponent(current, workInProgress, renderLanes);\n      }\n      break;\n    }\n  }\n  invariant(\n    false,\n    'Unknown unit of work tag (%s). This error is likely caused by a bug in ' +\n      'React. Please file an issue.',\n    workInProgress.tag,\n  );\n}\n\nexport {beginWork};\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {ReactContext} from 'shared/ReactTypes';\nimport type {Fiber, FiberRoot} from './ReactInternalTypes';\nimport type {Lanes} from './ReactFiberLane.old';\nimport type {SuspenseState} from './ReactFiberSuspenseComponent.old';\nimport type {Cache, SpawnedCachePool} from './ReactFiberCacheComponent.old';\n\nimport {resetWorkInProgressVersions as resetMutableSourceWorkInProgressVersions} from './ReactMutableSource.old';\nimport {\n  ClassComponent,\n  HostRoot,\n  HostComponent,\n  HostPortal,\n  ContextProvider,\n  SuspenseComponent,\n  SuspenseListComponent,\n  OffscreenComponent,\n  LegacyHiddenComponent,\n  CacheComponent,\n} from './ReactWorkTags';\nimport {DidCapture, NoFlags, ShouldCapture} from './ReactFiberFlags';\nimport {NoMode, ProfileMode} from './ReactTypeOfMode';\nimport {\n  enableSuspenseServerRenderer,\n  enableProfilerTimer,\n  enableCache,\n} from 'shared/ReactFeatureFlags';\n\nimport {popHostContainer, popHostContext} from './ReactFiberHostContext.old';\nimport {popSuspenseContext} from './ReactFiberSuspenseContext.old';\nimport {resetHydrationState} from './ReactFiberHydrationContext.old';\nimport {\n  isContextProvider as isLegacyContextProvider,\n  popContext as popLegacyContext,\n  popTopLevelContextObject as popTopLevelLegacyContextObject,\n} from './ReactFiberContext.old';\nimport {popProvider} from './ReactFiberNewContext.old';\nimport {popRenderLanes} from './ReactFiberWorkLoop.old';\nimport {\n  popCacheProvider,\n  popRootCachePool,\n  popCachePool,\n} from './ReactFiberCacheComponent.old';\nimport {transferActualDuration} from './ReactProfilerTimer.old';\n\nimport invariant from 'shared/invariant';\n\nfunction unwindWork(workInProgress: Fiber, renderLanes: Lanes) {\n  switch (workInProgress.tag) {\n    case ClassComponent: {\n      const Component = workInProgress.type;\n      if (isLegacyContextProvider(Component)) {\n        popLegacyContext(workInProgress);\n      }\n      const flags = workInProgress.flags;\n      if (flags & ShouldCapture) {\n        workInProgress.flags = (flags & ~ShouldCapture) | DidCapture;\n        if (\n          enableProfilerTimer &&\n          (workInProgress.mode & ProfileMode) !== NoMode\n        ) {\n          transferActualDuration(workInProgress);\n        }\n        return workInProgress;\n      }\n      return null;\n    }\n    case HostRoot: {\n      if (enableCache) {\n        const root: FiberRoot = workInProgress.stateNode;\n        popRootCachePool(root, renderLanes);\n\n        const cache: Cache = workInProgress.memoizedState.cache;\n        popCacheProvider(workInProgress, cache);\n      }\n      popHostContainer(workInProgress);\n      popTopLevelLegacyContextObject(workInProgress);\n      resetMutableSourceWorkInProgressVersions();\n      const flags = workInProgress.flags;\n      invariant(\n        (flags & DidCapture) === NoFlags,\n        'The root failed to unmount after an error. This is likely a bug in ' +\n          'React. Please file an issue.',\n      );\n      workInProgress.flags = (flags & ~ShouldCapture) | DidCapture;\n      return workInProgress;\n    }\n    case HostComponent: {\n      // TODO: popHydrationState\n      popHostContext(workInProgress);\n      return null;\n    }\n    case SuspenseComponent: {\n      popSuspenseContext(workInProgress);\n      if (enableSuspenseServerRenderer) {\n        const suspenseState: null | SuspenseState =\n          workInProgress.memoizedState;\n        if (suspenseState !== null && suspenseState.dehydrated !== null) {\n          invariant(\n            workInProgress.alternate !== null,\n            'Threw in newly mounted dehydrated component. This is likely a bug in ' +\n              'React. Please file an issue.',\n          );\n          resetHydrationState();\n        }\n      }\n      const flags = workInProgress.flags;\n      if (flags & ShouldCapture) {\n        workInProgress.flags = (flags & ~ShouldCapture) | DidCapture;\n        // Captured a suspense effect. Re-render the boundary.\n        if (\n          enableProfilerTimer &&\n          (workInProgress.mode & ProfileMode) !== NoMode\n        ) {\n          transferActualDuration(workInProgress);\n        }\n        return workInProgress;\n      }\n      return null;\n    }\n    case SuspenseListComponent: {\n      popSuspenseContext(workInProgress);\n      // SuspenseList doesn't actually catch anything. It should've been\n      // caught by a nested boundary. If not, it should bubble through.\n      return null;\n    }\n    case HostPortal:\n      popHostContainer(workInProgress);\n      return null;\n    case ContextProvider:\n      const context: ReactContext<any> = workInProgress.type._context;\n      popProvider(context, workInProgress);\n      return null;\n    case OffscreenComponent:\n    case LegacyHiddenComponent:\n      popRenderLanes(workInProgress);\n      if (enableCache) {\n        const spawnedCachePool: SpawnedCachePool | null = (workInProgress.updateQueue: any);\n        if (spawnedCachePool !== null) {\n          popCachePool(workInProgress);\n        }\n      }\n      return null;\n    case CacheComponent:\n      if (enableCache) {\n        const cache: Cache = workInProgress.memoizedState.cache;\n        popCacheProvider(workInProgress, cache);\n      }\n      return null;\n    default:\n      return null;\n  }\n}\n\nfunction unwindInterruptedWork(interruptedWork: Fiber, renderLanes: Lanes) {\n  switch (interruptedWork.tag) {\n    case ClassComponent: {\n      const childContextTypes = interruptedWork.type.childContextTypes;\n      if (childContextTypes !== null && childContextTypes !== undefined) {\n        popLegacyContext(interruptedWork);\n      }\n      break;\n    }\n    case HostRoot: {\n      if (enableCache) {\n        const root: FiberRoot = interruptedWork.stateNode;\n        popRootCachePool(root, renderLanes);\n\n        const cache: Cache = interruptedWork.memoizedState.cache;\n        popCacheProvider(interruptedWork, cache);\n      }\n      popHostContainer(interruptedWork);\n      popTopLevelLegacyContextObject(interruptedWork);\n      resetMutableSourceWorkInProgressVersions();\n      break;\n    }\n    case HostComponent: {\n      popHostContext(interruptedWork);\n      break;\n    }\n    case HostPortal:\n      popHostContainer(interruptedWork);\n      break;\n    case SuspenseComponent:\n      popSuspenseContext(interruptedWork);\n      break;\n    case SuspenseListComponent:\n      popSuspenseContext(interruptedWork);\n      break;\n    case ContextProvider:\n      const context: ReactContext<any> = interruptedWork.type._context;\n      popProvider(context, interruptedWork);\n      break;\n    case OffscreenComponent:\n    case LegacyHiddenComponent:\n      popRenderLanes(interruptedWork);\n      if (enableCache) {\n        const spawnedCachePool: SpawnedCachePool | null = (interruptedWork.updateQueue: any);\n        if (spawnedCachePool !== null) {\n          popCachePool(interruptedWork);\n        }\n      }\n\n      break;\n    case CacheComponent:\n      if (enableCache) {\n        const cache: Cache = interruptedWork.memoizedState.cache;\n        popCacheProvider(interruptedWork, cache);\n      }\n      break;\n    default:\n      break;\n  }\n}\n\nexport {unwindWork, unwindInterruptedWork};\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {\n  Instance,\n  TextInstance,\n  SuspenseInstance,\n  Container,\n  ChildSet,\n  UpdatePayload,\n} from './ReactFiberHostConfig';\nimport type {Fiber} from './ReactInternalTypes';\nimport type {FiberRoot} from './ReactInternalTypes';\nimport type {Lanes} from './ReactFiberLane.old';\nimport type {SuspenseState} from './ReactFiberSuspenseComponent.old';\nimport type {UpdateQueue} from './ReactUpdateQueue.old';\nimport type {FunctionComponentUpdateQueue} from './ReactFiberHooks.old';\nimport type {Wakeable} from 'shared/ReactTypes';\nimport type {OffscreenState} from './ReactFiberOffscreenComponent';\nimport type {HookFlags} from './ReactHookEffectTags';\n\nimport {\n  enableCreateEventHandleAPI,\n  enableProfilerTimer,\n  enableProfilerCommitHooks,\n  enableProfilerNestedUpdatePhase,\n  enableSuspenseServerRenderer,\n  enableSuspenseCallback,\n  enableScopeAPI,\n  enableStrictEffects,\n  deletedTreeCleanUpLevel,\n  enableSuspenseLayoutEffectSemantics,\n  enableUpdaterTracking,\n} from 'shared/ReactFeatureFlags';\nimport {\n  FunctionComponent,\n  ForwardRef,\n  ClassComponent,\n  HostRoot,\n  HostComponent,\n  HostText,\n  HostPortal,\n  Profiler,\n  SuspenseComponent,\n  DehydratedFragment,\n  IncompleteClassComponent,\n  MemoComponent,\n  SimpleMemoComponent,\n  SuspenseListComponent,\n  ScopeComponent,\n  OffscreenComponent,\n  LegacyHiddenComponent,\n} from './ReactWorkTags';\nimport {detachDeletedInstance} from './ReactFiberHostConfig';\nimport {\n  NoFlags,\n  ContentReset,\n  Placement,\n  PlacementAndUpdate,\n  ChildDeletion,\n  Snapshot,\n  Update,\n  Ref,\n  Hydrating,\n  HydratingAndUpdate,\n  Passive,\n  BeforeMutationMask,\n  MutationMask,\n  LayoutMask,\n  PassiveMask,\n  Visibility,\n} from './ReactFiberFlags';\nimport getComponentNameFromFiber from 'react-reconciler/src/getComponentNameFromFiber';\nimport invariant from 'shared/invariant';\nimport {\n  resetCurrentFiber as resetCurrentDebugFiberInDEV,\n  setCurrentFiber as setCurrentDebugFiberInDEV,\n} from './ReactCurrentFiber';\nimport {isDevToolsPresent} from './ReactFiberDevToolsHook.old';\nimport {onCommitUnmount} from './ReactFiberDevToolsHook.old';\nimport {resolveDefaultProps} from './ReactFiberLazyComponent.old';\nimport {\n  isCurrentUpdateNested,\n  getCommitTime,\n  recordLayoutEffectDuration,\n  startLayoutEffectTimer,\n  recordPassiveEffectDuration,\n  startPassiveEffectTimer,\n} from './ReactProfilerTimer.old';\nimport {ConcurrentMode, NoMode, ProfileMode} from './ReactTypeOfMode';\nimport {commitUpdateQueue} from './ReactUpdateQueue.old';\nimport {\n  getPublicInstance,\n  supportsMutation,\n  supportsPersistence,\n  supportsHydration,\n  commitMount,\n  commitUpdate,\n  resetTextContent,\n  commitTextUpdate,\n  appendChild,\n  appendChildToContainer,\n  insertBefore,\n  insertInContainerBefore,\n  removeChild,\n  removeChildFromContainer,\n  clearSuspenseBoundary,\n  clearSuspenseBoundaryFromContainer,\n  replaceContainerChildren,\n  createContainerChildSet,\n  hideInstance,\n  hideTextInstance,\n  unhideInstance,\n  unhideTextInstance,\n  commitHydratedContainer,\n  commitHydratedSuspenseInstance,\n  clearContainer,\n  prepareScopeUpdate,\n  prepareForCommit,\n  beforeActiveInstanceBlur,\n} from './ReactFiberHostConfig';\nimport {\n  captureCommitPhaseError,\n  resolveRetryWakeable,\n  markCommitTimeOfFallback,\n  enqueuePendingPassiveProfilerEffect,\n  restorePendingUpdaters,\n} from './ReactFiberWorkLoop.old';\nimport {\n  NoFlags as NoHookEffect,\n  HasEffect as HookHasEffect,\n  Layout as HookLayout,\n  Passive as HookPassive,\n} from './ReactHookEffectTags';\nimport {didWarnAboutReassigningProps} from './ReactFiberBeginWork.old';\nimport {doesFiberContain} from './ReactFiberTreeReflection';\nimport {invokeGuardedCallback, clearCaughtError} from 'shared/ReactErrorUtils';\n\nlet didWarnAboutUndefinedSnapshotBeforeUpdate: Set<mixed> | null = null;\nif (__DEV__) {\n  didWarnAboutUndefinedSnapshotBeforeUpdate = new Set();\n}\n\n// Used during the commit phase to track the state of the Offscreen component stack.\n// Allows us to avoid traversing the return path to find the nearest Offscreen ancestor.\n// Only used when enableSuspenseLayoutEffectSemantics is enabled.\nlet offscreenSubtreeIsHidden: boolean = false;\nlet offscreenSubtreeWasHidden: boolean = false;\n\nconst PossiblyWeakSet = typeof WeakSet === 'function' ? WeakSet : Set;\n\nlet nextEffect: Fiber | null = null;\n\n// Used for Profiling builds to track updaters.\nlet inProgressLanes: Lanes | null = null;\nlet inProgressRoot: FiberRoot | null = null;\n\nfunction reportUncaughtErrorInDEV(error) {\n  // Wrapping each small part of the commit phase into a guarded\n  // callback is a bit too slow (https://github.com/facebook/react/pull/21666).\n  // But we rely on it to surface errors to DEV tools like overlays\n  // (https://github.com/facebook/react/issues/21712).\n  // As a compromise, rethrow only caught errors in a guard.\n  if (__DEV__) {\n    invokeGuardedCallback(null, () => {\n      throw error;\n    });\n    clearCaughtError();\n  }\n}\n\nconst callComponentWillUnmountWithTimer = function(current, instance) {\n  instance.props = current.memoizedProps;\n  instance.state = current.memoizedState;\n  if (\n    enableProfilerTimer &&\n    enableProfilerCommitHooks &&\n    current.mode & ProfileMode\n  ) {\n    try {\n      startLayoutEffectTimer();\n      instance.componentWillUnmount();\n    } finally {\n      recordLayoutEffectDuration(current);\n    }\n  } else {\n    instance.componentWillUnmount();\n  }\n};\n\n// Capture errors so they don't interrupt mounting.\nfunction safelyCallCommitHookLayoutEffectListMount(\n  current: Fiber,\n  nearestMountedAncestor: Fiber | null,\n) {\n  try {\n    commitHookEffectListMount(HookLayout, current);\n  } catch (error) {\n    reportUncaughtErrorInDEV(error);\n    captureCommitPhaseError(current, nearestMountedAncestor, error);\n  }\n}\n\n// Capture errors so they don't interrupt unmounting.\nfunction safelyCallComponentWillUnmount(\n  current: Fiber,\n  nearestMountedAncestor: Fiber | null,\n  instance: any,\n) {\n  try {\n    callComponentWillUnmountWithTimer(current, instance);\n  } catch (error) {\n    reportUncaughtErrorInDEV(error);\n    captureCommitPhaseError(current, nearestMountedAncestor, error);\n  }\n}\n\n// Capture errors so they don't interrupt mounting.\nfunction safelyCallComponentDidMount(\n  current: Fiber,\n  nearestMountedAncestor: Fiber | null,\n  instance: any,\n) {\n  try {\n    instance.componentDidMount();\n  } catch (error) {\n    reportUncaughtErrorInDEV(error);\n    captureCommitPhaseError(current, nearestMountedAncestor, error);\n  }\n}\n\n// Capture errors so they don't interrupt mounting.\nfunction safelyAttachRef(current: Fiber, nearestMountedAncestor: Fiber | null) {\n  try {\n    commitAttachRef(current);\n  } catch (error) {\n    reportUncaughtErrorInDEV(error);\n    captureCommitPhaseError(current, nearestMountedAncestor, error);\n  }\n}\n\nfunction safelyDetachRef(current: Fiber, nearestMountedAncestor: Fiber | null) {\n  const ref = current.ref;\n  if (ref !== null) {\n    if (typeof ref === 'function') {\n      try {\n        if (\n          enableProfilerTimer &&\n          enableProfilerCommitHooks &&\n          current.mode & ProfileMode\n        ) {\n          try {\n            startLayoutEffectTimer();\n            ref(null);\n          } finally {\n            recordLayoutEffectDuration(current);\n          }\n        } else {\n          ref(null);\n        }\n      } catch (error) {\n        reportUncaughtErrorInDEV(error);\n        captureCommitPhaseError(current, nearestMountedAncestor, error);\n      }\n    } else {\n      ref.current = null;\n    }\n  }\n}\n\nfunction safelyCallDestroy(\n  current: Fiber,\n  nearestMountedAncestor: Fiber | null,\n  destroy: () => void,\n) {\n  try {\n    destroy();\n  } catch (error) {\n    reportUncaughtErrorInDEV(error);\n    captureCommitPhaseError(current, nearestMountedAncestor, error);\n  }\n}\n\nlet focusedInstanceHandle: null | Fiber = null;\nlet shouldFireAfterActiveInstanceBlur: boolean = false;\n\nexport function commitBeforeMutationEffects(\n  root: FiberRoot,\n  firstChild: Fiber,\n) {\n  focusedInstanceHandle = prepareForCommit(root.containerInfo);\n\n  nextEffect = firstChild;\n  commitBeforeMutationEffects_begin();\n\n  // We no longer need to track the active instance fiber\n  const shouldFire = shouldFireAfterActiveInstanceBlur;\n  shouldFireAfterActiveInstanceBlur = false;\n  focusedInstanceHandle = null;\n\n  return shouldFire;\n}\n\nfunction commitBeforeMutationEffects_begin() {\n  while (nextEffect !== null) {\n    const fiber = nextEffect;\n\n    // This phase is only used for beforeActiveInstanceBlur.\n    // Let's skip the whole loop if it's off.\n    if (enableCreateEventHandleAPI) {\n      // TODO: Should wrap this in flags check, too, as optimization\n      const deletions = fiber.deletions;\n      if (deletions !== null) {\n        for (let i = 0; i < deletions.length; i++) {\n          const deletion = deletions[i];\n          commitBeforeMutationEffectsDeletion(deletion);\n        }\n      }\n    }\n\n    const child = fiber.child;\n    if (\n      (fiber.subtreeFlags & BeforeMutationMask) !== NoFlags &&\n      child !== null\n    ) {\n      ensureCorrectReturnPointer(child, fiber);\n      nextEffect = child;\n    } else {\n      commitBeforeMutationEffects_complete();\n    }\n  }\n}\n\nfunction commitBeforeMutationEffects_complete() {\n  while (nextEffect !== null) {\n    const fiber = nextEffect;\n    setCurrentDebugFiberInDEV(fiber);\n    try {\n      commitBeforeMutationEffectsOnFiber(fiber);\n    } catch (error) {\n      reportUncaughtErrorInDEV(error);\n      captureCommitPhaseError(fiber, fiber.return, error);\n    }\n    resetCurrentDebugFiberInDEV();\n\n    const sibling = fiber.sibling;\n    if (sibling !== null) {\n      ensureCorrectReturnPointer(sibling, fiber.return);\n      nextEffect = sibling;\n      return;\n    }\n\n    nextEffect = fiber.return;\n  }\n}\n\nfunction commitBeforeMutationEffectsOnFiber(finishedWork: Fiber) {\n  const current = finishedWork.alternate;\n  const flags = finishedWork.flags;\n\n  if (enableCreateEventHandleAPI) {\n    if (!shouldFireAfterActiveInstanceBlur && focusedInstanceHandle !== null) {\n      // Check to see if the focused element was inside of a hidden (Suspense) subtree.\n      // TODO: Move this out of the hot path using a dedicated effect tag.\n      if (\n        finishedWork.tag === SuspenseComponent &&\n        isSuspenseBoundaryBeingHidden(current, finishedWork) &&\n        doesFiberContain(finishedWork, focusedInstanceHandle)\n      ) {\n        shouldFireAfterActiveInstanceBlur = true;\n        beforeActiveInstanceBlur(finishedWork);\n      }\n    }\n  }\n\n  if ((flags & Snapshot) !== NoFlags) {\n    setCurrentDebugFiberInDEV(finishedWork);\n\n    switch (finishedWork.tag) {\n      case FunctionComponent:\n      case ForwardRef:\n      case SimpleMemoComponent: {\n        break;\n      }\n      case ClassComponent: {\n        if (current !== null) {\n          const prevProps = current.memoizedProps;\n          const prevState = current.memoizedState;\n          const instance = finishedWork.stateNode;\n          // We could update instance props and state here,\n          // but instead we rely on them being set during last render.\n          // TODO: revisit this when we implement resuming.\n          if (__DEV__) {\n            if (\n              finishedWork.type === finishedWork.elementType &&\n              !didWarnAboutReassigningProps\n            ) {\n              if (instance.props !== finishedWork.memoizedProps) {\n                console.error(\n                  'Expected %s props to match memoized props before ' +\n                    'getSnapshotBeforeUpdate. ' +\n                    'This might either be because of a bug in React, or because ' +\n                    'a component reassigns its own `this.props`. ' +\n                    'Please file an issue.',\n                  getComponentNameFromFiber(finishedWork) || 'instance',\n                );\n              }\n              if (instance.state !== finishedWork.memoizedState) {\n                console.error(\n                  'Expected %s state to match memoized state before ' +\n                    'getSnapshotBeforeUpdate. ' +\n                    'This might either be because of a bug in React, or because ' +\n                    'a component reassigns its own `this.state`. ' +\n                    'Please file an issue.',\n                  getComponentNameFromFiber(finishedWork) || 'instance',\n                );\n              }\n            }\n          }\n          const snapshot = instance.getSnapshotBeforeUpdate(\n            finishedWork.elementType === finishedWork.type\n              ? prevProps\n              : resolveDefaultProps(finishedWork.type, prevProps),\n            prevState,\n          );\n          if (__DEV__) {\n            const didWarnSet = ((didWarnAboutUndefinedSnapshotBeforeUpdate: any): Set<mixed>);\n            if (snapshot === undefined && !didWarnSet.has(finishedWork.type)) {\n              didWarnSet.add(finishedWork.type);\n              console.error(\n                '%s.getSnapshotBeforeUpdate(): A snapshot value (or null) ' +\n                  'must be returned. You have returned undefined.',\n                getComponentNameFromFiber(finishedWork),\n              );\n            }\n          }\n          instance.__reactInternalSnapshotBeforeUpdate = snapshot;\n        }\n        break;\n      }\n      case HostRoot: {\n        if (supportsMutation) {\n          const root = finishedWork.stateNode;\n          clearContainer(root.containerInfo);\n        }\n        break;\n      }\n      case HostComponent:\n      case HostText:\n      case HostPortal:\n      case IncompleteClassComponent:\n        // Nothing to do for these component types\n        break;\n      default: {\n        invariant(\n          false,\n          'This unit of work tag should not have side-effects. This error is ' +\n            'likely caused by a bug in React. Please file an issue.',\n        );\n      }\n    }\n\n    resetCurrentDebugFiberInDEV();\n  }\n}\n\nfunction commitBeforeMutationEffectsDeletion(deletion: Fiber) {\n  if (enableCreateEventHandleAPI) {\n    // TODO (effects) It would be nice to avoid calling doesFiberContain()\n    // Maybe we can repurpose one of the subtreeFlags positions for this instead?\n    // Use it to store which part of the tree the focused instance is in?\n    // This assumes we can safely determine that instance during the \"render\" phase.\n    if (doesFiberContain(deletion, ((focusedInstanceHandle: any): Fiber))) {\n      shouldFireAfterActiveInstanceBlur = true;\n      beforeActiveInstanceBlur(deletion);\n    }\n  }\n}\n\nfunction commitHookEffectListUnmount(\n  flags: HookFlags,\n  finishedWork: Fiber,\n  nearestMountedAncestor: Fiber | null,\n) {\n  const updateQueue: FunctionComponentUpdateQueue | null = (finishedWork.updateQueue: any);\n  const lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;\n  if (lastEffect !== null) {\n    const firstEffect = lastEffect.next;\n    let effect = firstEffect;\n    do {\n      if ((effect.tag & flags) === flags) {\n        // Unmount\n        const destroy = effect.destroy;\n        effect.destroy = undefined;\n        if (destroy !== undefined) {\n          safelyCallDestroy(finishedWork, nearestMountedAncestor, destroy);\n        }\n      }\n      effect = effect.next;\n    } while (effect !== firstEffect);\n  }\n}\n\nfunction commitHookEffectListMount(tag: number, finishedWork: Fiber) {\n  const updateQueue: FunctionComponentUpdateQueue | null = (finishedWork.updateQueue: any);\n  const lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;\n  if (lastEffect !== null) {\n    const firstEffect = lastEffect.next;\n    let effect = firstEffect;\n    do {\n      if ((effect.tag & tag) === tag) {\n        // Mount\n        const create = effect.create;\n        effect.destroy = create();\n\n        if (__DEV__) {\n          const destroy = effect.destroy;\n          if (destroy !== undefined && typeof destroy !== 'function') {\n            let addendum;\n            if (destroy === null) {\n              addendum =\n                ' You returned null. If your effect does not require clean ' +\n                'up, return undefined (or nothing).';\n            } else if (typeof destroy.then === 'function') {\n              addendum =\n                '\\n\\nIt looks like you wrote useEffect(async () => ...) or returned a Promise. ' +\n                'Instead, write the async function inside your effect ' +\n                'and call it immediately:\\n\\n' +\n                'useEffect(() => {\\n' +\n                '  async function fetchData() {\\n' +\n                '    // You can await here\\n' +\n                '    const response = await MyAPI.getData(someId);\\n' +\n                '    // ...\\n' +\n                '  }\\n' +\n                '  fetchData();\\n' +\n                `}, [someId]); // Or [] if effect doesn't need props or state\\n\\n` +\n                'Learn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching';\n            } else {\n              addendum = ' You returned: ' + destroy;\n            }\n            console.error(\n              'An effect function must not return anything besides a function, ' +\n                'which is used for clean-up.%s',\n              addendum,\n            );\n          }\n        }\n      }\n      effect = effect.next;\n    } while (effect !== firstEffect);\n  }\n}\n\nexport function commitPassiveEffectDurations(\n  finishedRoot: FiberRoot,\n  finishedWork: Fiber,\n): void {\n  if (enableProfilerTimer && enableProfilerCommitHooks) {\n    // Only Profilers with work in their subtree will have an Update effect scheduled.\n    if ((finishedWork.flags & Update) !== NoFlags) {\n      switch (finishedWork.tag) {\n        case Profiler: {\n          const {passiveEffectDuration} = finishedWork.stateNode;\n          const {id, onPostCommit} = finishedWork.memoizedProps;\n\n          // This value will still reflect the previous commit phase.\n          // It does not get reset until the start of the next commit phase.\n          const commitTime = getCommitTime();\n\n          let phase = finishedWork.alternate === null ? 'mount' : 'update';\n          if (enableProfilerNestedUpdatePhase) {\n            if (isCurrentUpdateNested()) {\n              phase = 'nested-update';\n            }\n          }\n\n          if (typeof onPostCommit === 'function') {\n            onPostCommit(id, phase, passiveEffectDuration, commitTime);\n          }\n\n          // Bubble times to the next nearest ancestor Profiler.\n          // After we process that Profiler, we'll bubble further up.\n          let parentFiber = finishedWork.return;\n          outer: while (parentFiber !== null) {\n            switch (parentFiber.tag) {\n              case HostRoot:\n                const root = parentFiber.stateNode;\n                root.passiveEffectDuration += passiveEffectDuration;\n                break outer;\n              case Profiler:\n                const parentStateNode = parentFiber.stateNode;\n                parentStateNode.passiveEffectDuration += passiveEffectDuration;\n                break outer;\n            }\n            parentFiber = parentFiber.return;\n          }\n          break;\n        }\n        default:\n          break;\n      }\n    }\n  }\n}\n\nfunction commitLayoutEffectOnFiber(\n  finishedRoot: FiberRoot,\n  current: Fiber | null,\n  finishedWork: Fiber,\n  committedLanes: Lanes,\n): void {\n  if ((finishedWork.flags & LayoutMask) !== NoFlags) {\n    switch (finishedWork.tag) {\n      case FunctionComponent:\n      case ForwardRef:\n      case SimpleMemoComponent: {\n        if (\n          !enableSuspenseLayoutEffectSemantics ||\n          !offscreenSubtreeWasHidden\n        ) {\n          // At this point layout effects have already been destroyed (during mutation phase).\n          // This is done to prevent sibling component effects from interfering with each other,\n          // e.g. a destroy function in one component should never override a ref set\n          // by a create function in another component during the same commit.\n          if (\n            enableProfilerTimer &&\n            enableProfilerCommitHooks &&\n            finishedWork.mode & ProfileMode\n          ) {\n            try {\n              startLayoutEffectTimer();\n              commitHookEffectListMount(\n                HookLayout | HookHasEffect,\n                finishedWork,\n              );\n            } finally {\n              recordLayoutEffectDuration(finishedWork);\n            }\n          } else {\n            commitHookEffectListMount(HookLayout | HookHasEffect, finishedWork);\n          }\n        }\n        break;\n      }\n      case ClassComponent: {\n        const instance = finishedWork.stateNode;\n        if (finishedWork.flags & Update) {\n          if (!offscreenSubtreeWasHidden) {\n            if (current === null) {\n              // We could update instance props and state here,\n              // but instead we rely on them being set during last render.\n              // TODO: revisit this when we implement resuming.\n              if (__DEV__) {\n                if (\n                  finishedWork.type === finishedWork.elementType &&\n                  !didWarnAboutReassigningProps\n                ) {\n                  if (instance.props !== finishedWork.memoizedProps) {\n                    console.error(\n                      'Expected %s props to match memoized props before ' +\n                        'componentDidMount. ' +\n                        'This might either be because of a bug in React, or because ' +\n                        'a component reassigns its own `this.props`. ' +\n                        'Please file an issue.',\n                      getComponentNameFromFiber(finishedWork) || 'instance',\n                    );\n                  }\n                  if (instance.state !== finishedWork.memoizedState) {\n                    console.error(\n                      'Expected %s state to match memoized state before ' +\n                        'componentDidMount. ' +\n                        'This might either be because of a bug in React, or because ' +\n                        'a component reassigns its own `this.state`. ' +\n                        'Please file an issue.',\n                      getComponentNameFromFiber(finishedWork) || 'instance',\n                    );\n                  }\n                }\n              }\n              if (\n                enableProfilerTimer &&\n                enableProfilerCommitHooks &&\n                finishedWork.mode & ProfileMode\n              ) {\n                try {\n                  startLayoutEffectTimer();\n                  instance.componentDidMount();\n                } finally {\n                  recordLayoutEffectDuration(finishedWork);\n                }\n              } else {\n                instance.componentDidMount();\n              }\n            } else {\n              const prevProps =\n                finishedWork.elementType === finishedWork.type\n                  ? current.memoizedProps\n                  : resolveDefaultProps(\n                      finishedWork.type,\n                      current.memoizedProps,\n                    );\n              const prevState = current.memoizedState;\n              // We could update instance props and state here,\n              // but instead we rely on them being set during last render.\n              // TODO: revisit this when we implement resuming.\n              if (__DEV__) {\n                if (\n                  finishedWork.type === finishedWork.elementType &&\n                  !didWarnAboutReassigningProps\n                ) {\n                  if (instance.props !== finishedWork.memoizedProps) {\n                    console.error(\n                      'Expected %s props to match memoized props before ' +\n                        'componentDidUpdate. ' +\n                        'This might either be because of a bug in React, or because ' +\n                        'a component reassigns its own `this.props`. ' +\n                        'Please file an issue.',\n                      getComponentNameFromFiber(finishedWork) || 'instance',\n                    );\n                  }\n                  if (instance.state !== finishedWork.memoizedState) {\n                    console.error(\n                      'Expected %s state to match memoized state before ' +\n                        'componentDidUpdate. ' +\n                        'This might either be because of a bug in React, or because ' +\n                        'a component reassigns its own `this.state`. ' +\n                        'Please file an issue.',\n                      getComponentNameFromFiber(finishedWork) || 'instance',\n                    );\n                  }\n                }\n              }\n              if (\n                enableProfilerTimer &&\n                enableProfilerCommitHooks &&\n                finishedWork.mode & ProfileMode\n              ) {\n                try {\n                  startLayoutEffectTimer();\n                  instance.componentDidUpdate(\n                    prevProps,\n                    prevState,\n                    instance.__reactInternalSnapshotBeforeUpdate,\n                  );\n                } finally {\n                  recordLayoutEffectDuration(finishedWork);\n                }\n              } else {\n                instance.componentDidUpdate(\n                  prevProps,\n                  prevState,\n                  instance.__reactInternalSnapshotBeforeUpdate,\n                );\n              }\n            }\n          }\n        }\n\n        // TODO: I think this is now always non-null by the time it reaches the\n        // commit phase. Consider removing the type check.\n        const updateQueue: UpdateQueue<\n          *,\n        > | null = (finishedWork.updateQueue: any);\n        if (updateQueue !== null) {\n          if (__DEV__) {\n            if (\n              finishedWork.type === finishedWork.elementType &&\n              !didWarnAboutReassigningProps\n            ) {\n              if (instance.props !== finishedWork.memoizedProps) {\n                console.error(\n                  'Expected %s props to match memoized props before ' +\n                    'processing the update queue. ' +\n                    'This might either be because of a bug in React, or because ' +\n                    'a component reassigns its own `this.props`. ' +\n                    'Please file an issue.',\n                  getComponentNameFromFiber(finishedWork) || 'instance',\n                );\n              }\n              if (instance.state !== finishedWork.memoizedState) {\n                console.error(\n                  'Expected %s state to match memoized state before ' +\n                    'processing the update queue. ' +\n                    'This might either be because of a bug in React, or because ' +\n                    'a component reassigns its own `this.state`. ' +\n                    'Please file an issue.',\n                  getComponentNameFromFiber(finishedWork) || 'instance',\n                );\n              }\n            }\n          }\n          // We could update instance props and state here,\n          // but instead we rely on them being set during last render.\n          // TODO: revisit this when we implement resuming.\n          commitUpdateQueue(finishedWork, updateQueue, instance);\n        }\n        break;\n      }\n      case HostRoot: {\n        // TODO: I think this is now always non-null by the time it reaches the\n        // commit phase. Consider removing the type check.\n        const updateQueue: UpdateQueue<\n          *,\n        > | null = (finishedWork.updateQueue: any);\n        if (updateQueue !== null) {\n          let instance = null;\n          if (finishedWork.child !== null) {\n            switch (finishedWork.child.tag) {\n              case HostComponent:\n                instance = getPublicInstance(finishedWork.child.stateNode);\n                break;\n              case ClassComponent:\n                instance = finishedWork.child.stateNode;\n                break;\n            }\n          }\n          commitUpdateQueue(finishedWork, updateQueue, instance);\n        }\n        break;\n      }\n      case HostComponent: {\n        const instance: Instance = finishedWork.stateNode;\n\n        // Renderers may schedule work to be done after host components are mounted\n        // (eg DOM renderer may schedule auto-focus for inputs and form controls).\n        // These effects should only be committed when components are first mounted,\n        // aka when there is no current/alternate.\n        if (current === null && finishedWork.flags & Update) {\n          const type = finishedWork.type;\n          const props = finishedWork.memoizedProps;\n          commitMount(instance, type, props, finishedWork);\n        }\n\n        break;\n      }\n      case HostText: {\n        // We have no life-cycles associated with text.\n        break;\n      }\n      case HostPortal: {\n        // We have no life-cycles associated with portals.\n        break;\n      }\n      case Profiler: {\n        if (enableProfilerTimer) {\n          const {onCommit, onRender} = finishedWork.memoizedProps;\n          const {effectDuration} = finishedWork.stateNode;\n\n          const commitTime = getCommitTime();\n\n          let phase = current === null ? 'mount' : 'update';\n          if (enableProfilerNestedUpdatePhase) {\n            if (isCurrentUpdateNested()) {\n              phase = 'nested-update';\n            }\n          }\n\n          if (typeof onRender === 'function') {\n            onRender(\n              finishedWork.memoizedProps.id,\n              phase,\n              finishedWork.actualDuration,\n              finishedWork.treeBaseDuration,\n              finishedWork.actualStartTime,\n              commitTime,\n            );\n          }\n\n          if (enableProfilerCommitHooks) {\n            if (typeof onCommit === 'function') {\n              onCommit(\n                finishedWork.memoizedProps.id,\n                phase,\n                effectDuration,\n                commitTime,\n              );\n            }\n\n            // Schedule a passive effect for this Profiler to call onPostCommit hooks.\n            // This effect should be scheduled even if there is no onPostCommit callback for this Profiler,\n            // because the effect is also where times bubble to parent Profilers.\n            enqueuePendingPassiveProfilerEffect(finishedWork);\n\n            // Propagate layout effect durations to the next nearest Profiler ancestor.\n            // Do not reset these values until the next render so DevTools has a chance to read them first.\n            let parentFiber = finishedWork.return;\n            outer: while (parentFiber !== null) {\n              switch (parentFiber.tag) {\n                case HostRoot:\n                  const root = parentFiber.stateNode;\n                  root.effectDuration += effectDuration;\n                  break outer;\n                case Profiler:\n                  const parentStateNode = parentFiber.stateNode;\n                  parentStateNode.effectDuration += effectDuration;\n                  break outer;\n              }\n              parentFiber = parentFiber.return;\n            }\n          }\n        }\n        break;\n      }\n      case SuspenseComponent: {\n        commitSuspenseHydrationCallbacks(finishedRoot, finishedWork);\n        break;\n      }\n      case SuspenseListComponent:\n      case IncompleteClassComponent:\n      case ScopeComponent:\n      case OffscreenComponent:\n      case LegacyHiddenComponent:\n        break;\n      default:\n        invariant(\n          false,\n          'This unit of work tag should not have side-effects. This error is ' +\n            'likely caused by a bug in React. Please file an issue.',\n        );\n    }\n  }\n\n  if (!enableSuspenseLayoutEffectSemantics || !offscreenSubtreeWasHidden) {\n    if (enableScopeAPI) {\n      // TODO: This is a temporary solution that allowed us to transition away\n      // from React Flare on www.\n      if (finishedWork.flags & Ref && finishedWork.tag !== ScopeComponent) {\n        commitAttachRef(finishedWork);\n      }\n    } else {\n      if (finishedWork.flags & Ref) {\n        commitAttachRef(finishedWork);\n      }\n    }\n  }\n}\n\nfunction reappearLayoutEffectsOnFiber(node: Fiber) {\n  // Turn on layout effects in a tree that previously disappeared.\n  // TODO (Offscreen) Check: flags & LayoutStatic\n  switch (node.tag) {\n    case FunctionComponent:\n    case ForwardRef:\n    case SimpleMemoComponent: {\n      if (\n        enableProfilerTimer &&\n        enableProfilerCommitHooks &&\n        node.mode & ProfileMode\n      ) {\n        try {\n          startLayoutEffectTimer();\n          safelyCallCommitHookLayoutEffectListMount(node, node.return);\n        } finally {\n          recordLayoutEffectDuration(node);\n        }\n      } else {\n        safelyCallCommitHookLayoutEffectListMount(node, node.return);\n      }\n      break;\n    }\n    case ClassComponent: {\n      const instance = node.stateNode;\n      if (typeof instance.componentDidMount === 'function') {\n        safelyCallComponentDidMount(node, node.return, instance);\n      }\n      safelyAttachRef(node, node.return);\n      break;\n    }\n    case HostComponent: {\n      safelyAttachRef(node, node.return);\n      break;\n    }\n  }\n}\n\nfunction hideOrUnhideAllChildren(finishedWork, isHidden) {\n  // Only hide or unhide the top-most host nodes.\n  let hostSubtreeRoot = null;\n\n  if (supportsMutation) {\n    // We only have the top Fiber that was inserted but we need to recurse down its\n    // children to find all the terminal nodes.\n    let node: Fiber = finishedWork;\n    while (true) {\n      if (node.tag === HostComponent) {\n        if (hostSubtreeRoot === null) {\n          hostSubtreeRoot = node;\n\n          const instance = node.stateNode;\n          if (isHidden) {\n            hideInstance(instance);\n          } else {\n            unhideInstance(node.stateNode, node.memoizedProps);\n          }\n        }\n      } else if (node.tag === HostText) {\n        if (hostSubtreeRoot === null) {\n          const instance = node.stateNode;\n          if (isHidden) {\n            hideTextInstance(instance);\n          } else {\n            unhideTextInstance(instance, node.memoizedProps);\n          }\n        }\n      } else if (\n        (node.tag === OffscreenComponent ||\n          node.tag === LegacyHiddenComponent) &&\n        (node.memoizedState: OffscreenState) !== null &&\n        node !== finishedWork\n      ) {\n        // Found a nested Offscreen component that is hidden.\n        // Don't search any deeper. This tree should remain hidden.\n      } else if (node.child !== null) {\n        node.child.return = node;\n        node = node.child;\n        continue;\n      }\n\n      if (node === finishedWork) {\n        return;\n      }\n      while (node.sibling === null) {\n        if (node.return === null || node.return === finishedWork) {\n          return;\n        }\n\n        if (hostSubtreeRoot === node) {\n          hostSubtreeRoot = null;\n        }\n\n        node = node.return;\n      }\n\n      if (hostSubtreeRoot === node) {\n        hostSubtreeRoot = null;\n      }\n\n      node.sibling.return = node.return;\n      node = node.sibling;\n    }\n  }\n}\n\nfunction commitAttachRef(finishedWork: Fiber) {\n  const ref = finishedWork.ref;\n  if (ref !== null) {\n    const instance = finishedWork.stateNode;\n    let instanceToUse;\n    switch (finishedWork.tag) {\n      case HostComponent:\n        instanceToUse = getPublicInstance(instance);\n        break;\n      default:\n        instanceToUse = instance;\n    }\n    // Moved outside to ensure DCE works with this flag\n    if (enableScopeAPI && finishedWork.tag === ScopeComponent) {\n      instanceToUse = instance;\n    }\n    if (typeof ref === 'function') {\n      if (\n        enableProfilerTimer &&\n        enableProfilerCommitHooks &&\n        finishedWork.mode & ProfileMode\n      ) {\n        try {\n          startLayoutEffectTimer();\n          ref(instanceToUse);\n        } finally {\n          recordLayoutEffectDuration(finishedWork);\n        }\n      } else {\n        ref(instanceToUse);\n      }\n    } else {\n      if (__DEV__) {\n        if (!ref.hasOwnProperty('current')) {\n          console.error(\n            'Unexpected ref object provided for %s. ' +\n              'Use either a ref-setter function or React.createRef().',\n            getComponentNameFromFiber(finishedWork),\n          );\n        }\n      }\n\n      ref.current = instanceToUse;\n    }\n  }\n}\n\nfunction commitDetachRef(current: Fiber) {\n  const currentRef = current.ref;\n  if (currentRef !== null) {\n    if (typeof currentRef === 'function') {\n      if (\n        enableProfilerTimer &&\n        enableProfilerCommitHooks &&\n        current.mode & ProfileMode\n      ) {\n        try {\n          startLayoutEffectTimer();\n          currentRef(null);\n        } finally {\n          recordLayoutEffectDuration(current);\n        }\n      } else {\n        currentRef(null);\n      }\n    } else {\n      currentRef.current = null;\n    }\n  }\n}\n\n// User-originating errors (lifecycles and refs) should not interrupt\n// deletion, so don't let them throw. Host-originating errors should\n// interrupt deletion, so it's okay\nfunction commitUnmount(\n  finishedRoot: FiberRoot,\n  current: Fiber,\n  nearestMountedAncestor: Fiber,\n): void {\n  onCommitUnmount(current);\n\n  switch (current.tag) {\n    case FunctionComponent:\n    case ForwardRef:\n    case MemoComponent:\n    case SimpleMemoComponent: {\n      const updateQueue: FunctionComponentUpdateQueue | null = (current.updateQueue: any);\n      if (updateQueue !== null) {\n        const lastEffect = updateQueue.lastEffect;\n        if (lastEffect !== null) {\n          const firstEffect = lastEffect.next;\n\n          let effect = firstEffect;\n          do {\n            const {destroy, tag} = effect;\n            if (destroy !== undefined) {\n              if ((tag & HookLayout) !== NoHookEffect) {\n                if (\n                  enableProfilerTimer &&\n                  enableProfilerCommitHooks &&\n                  current.mode & ProfileMode\n                ) {\n                  startLayoutEffectTimer();\n                  safelyCallDestroy(current, nearestMountedAncestor, destroy);\n                  recordLayoutEffectDuration(current);\n                } else {\n                  safelyCallDestroy(current, nearestMountedAncestor, destroy);\n                }\n              }\n            }\n            effect = effect.next;\n          } while (effect !== firstEffect);\n        }\n      }\n      return;\n    }\n    case ClassComponent: {\n      safelyDetachRef(current, nearestMountedAncestor);\n      const instance = current.stateNode;\n      if (typeof instance.componentWillUnmount === 'function') {\n        safelyCallComponentWillUnmount(\n          current,\n          nearestMountedAncestor,\n          instance,\n        );\n      }\n      return;\n    }\n    case HostComponent: {\n      safelyDetachRef(current, nearestMountedAncestor);\n      return;\n    }\n    case HostPortal: {\n      // TODO: this is recursive.\n      // We are also not using this parent because\n      // the portal will get pushed immediately.\n      if (supportsMutation) {\n        unmountHostComponents(finishedRoot, current, nearestMountedAncestor);\n      } else if (supportsPersistence) {\n        emptyPortalContainer(current);\n      }\n      return;\n    }\n    case DehydratedFragment: {\n      if (enableSuspenseCallback) {\n        const hydrationCallbacks = finishedRoot.hydrationCallbacks;\n        if (hydrationCallbacks !== null) {\n          const onDeleted = hydrationCallbacks.onDeleted;\n          if (onDeleted) {\n            onDeleted((current.stateNode: SuspenseInstance));\n          }\n        }\n      }\n      return;\n    }\n    case ScopeComponent: {\n      if (enableScopeAPI) {\n        safelyDetachRef(current, nearestMountedAncestor);\n      }\n      return;\n    }\n  }\n}\n\nfunction commitNestedUnmounts(\n  finishedRoot: FiberRoot,\n  root: Fiber,\n  nearestMountedAncestor: Fiber,\n): void {\n  // While we're inside a removed host node we don't want to call\n  // removeChild on the inner nodes because they're removed by the top\n  // call anyway. We also want to call componentWillUnmount on all\n  // composites before this host node is removed from the tree. Therefore\n  // we do an inner loop while we're still inside the host node.\n  let node: Fiber = root;\n  while (true) {\n    commitUnmount(finishedRoot, node, nearestMountedAncestor);\n    // Visit children because they may contain more composite or host nodes.\n    // Skip portals because commitUnmount() currently visits them recursively.\n    if (\n      node.child !== null &&\n      // If we use mutation we drill down into portals using commitUnmount above.\n      // If we don't use mutation we drill down into portals here instead.\n      (!supportsMutation || node.tag !== HostPortal)\n    ) {\n      node.child.return = node;\n      node = node.child;\n      continue;\n    }\n    if (node === root) {\n      return;\n    }\n    while (node.sibling === null) {\n      if (node.return === null || node.return === root) {\n        return;\n      }\n      node = node.return;\n    }\n    node.sibling.return = node.return;\n    node = node.sibling;\n  }\n}\n\nfunction detachFiberMutation(fiber: Fiber) {\n  // Cut off the return pointer to disconnect it from the tree.\n  // This enables us to detect and warn against state updates on an unmounted component.\n  // It also prevents events from bubbling from within disconnected components.\n  //\n  // Ideally, we should also clear the child pointer of the parent alternate to let this\n  // get GC:ed but we don't know which for sure which parent is the current\n  // one so we'll settle for GC:ing the subtree of this child.\n  // This child itself will be GC:ed when the parent updates the next time.\n  //\n  // Note that we can't clear child or sibling pointers yet.\n  // They're needed for passive effects and for findDOMNode.\n  // We defer those fields, and all other cleanup, to the passive phase (see detachFiberAfterEffects).\n  //\n  // Don't reset the alternate yet, either. We need that so we can detach the\n  // alternate's fields in the passive phase. Clearing the return pointer is\n  // sufficient for findDOMNode semantics.\n  const alternate = fiber.alternate;\n  if (alternate !== null) {\n    alternate.return = null;\n  }\n  fiber.return = null;\n}\n\nfunction detachFiberAfterEffects(fiber: Fiber) {\n  const alternate = fiber.alternate;\n  if (alternate !== null) {\n    fiber.alternate = null;\n    detachFiberAfterEffects(alternate);\n  }\n\n  // Note: Defensively using negation instead of < in case\n  // `deletedTreeCleanUpLevel` is undefined.\n  if (!(deletedTreeCleanUpLevel >= 2)) {\n    // This is the default branch (level 0).\n    fiber.child = null;\n    fiber.deletions = null;\n    fiber.dependencies = null;\n    fiber.memoizedProps = null;\n    fiber.memoizedState = null;\n    fiber.pendingProps = null;\n    fiber.sibling = null;\n    fiber.stateNode = null;\n    fiber.updateQueue = null;\n\n    if (__DEV__) {\n      fiber._debugOwner = null;\n    }\n  } else {\n    // Clear cyclical Fiber fields. This level alone is designed to roughly\n    // approximate the planned Fiber refactor. In that world, `setState` will be\n    // bound to a special \"instance\" object instead of a Fiber. The Instance\n    // object will not have any of these fields. It will only be connected to\n    // the fiber tree via a single link at the root. So if this level alone is\n    // sufficient to fix memory issues, that bodes well for our plans.\n    fiber.child = null;\n    fiber.deletions = null;\n    fiber.sibling = null;\n\n    // The `stateNode` is cyclical because on host nodes it points to the host\n    // tree, which has its own pointers to children, parents, and siblings.\n    // The other host nodes also point back to fibers, so we should detach that\n    // one, too.\n    if (fiber.tag === HostComponent) {\n      const hostInstance: Instance = fiber.stateNode;\n      if (hostInstance !== null) {\n        detachDeletedInstance(hostInstance);\n      }\n    }\n    fiber.stateNode = null;\n\n    // I'm intentionally not clearing the `return` field in this level. We\n    // already disconnect the `return` pointer at the root of the deleted\n    // subtree (in `detachFiberMutation`). Besides, `return` by itself is not\n    // cyclical — it's only cyclical when combined with `child`, `sibling`, and\n    // `alternate`. But we'll clear it in the next level anyway, just in case.\n\n    if (__DEV__) {\n      fiber._debugOwner = null;\n    }\n\n    if (deletedTreeCleanUpLevel >= 3) {\n      // Theoretically, nothing in here should be necessary, because we already\n      // disconnected the fiber from the tree. So even if something leaks this\n      // particular fiber, it won't leak anything else\n      //\n      // The purpose of this branch is to be super aggressive so we can measure\n      // if there's any difference in memory impact. If there is, that could\n      // indicate a React leak we don't know about.\n      fiber.return = null;\n      fiber.dependencies = null;\n      fiber.memoizedProps = null;\n      fiber.memoizedState = null;\n      fiber.pendingProps = null;\n      fiber.stateNode = null;\n      // TODO: Move to `commitPassiveUnmountInsideDeletedTreeOnFiber` instead.\n      fiber.updateQueue = null;\n    }\n  }\n}\n\nfunction emptyPortalContainer(current: Fiber) {\n  if (!supportsPersistence) {\n    return;\n  }\n\n  const portal: {\n    containerInfo: Container,\n    pendingChildren: ChildSet,\n    ...\n  } = current.stateNode;\n  const {containerInfo} = portal;\n  const emptyChildSet = createContainerChildSet(containerInfo);\n  replaceContainerChildren(containerInfo, emptyChildSet);\n}\n\nfunction commitContainer(finishedWork: Fiber) {\n  if (!supportsPersistence) {\n    return;\n  }\n\n  switch (finishedWork.tag) {\n    case ClassComponent:\n    case HostComponent:\n    case HostText: {\n      return;\n    }\n    case HostRoot:\n    case HostPortal: {\n      const portalOrRoot: {\n        containerInfo: Container,\n        pendingChildren: ChildSet,\n        ...\n      } = finishedWork.stateNode;\n      const {containerInfo, pendingChildren} = portalOrRoot;\n      replaceContainerChildren(containerInfo, pendingChildren);\n      return;\n    }\n  }\n  invariant(\n    false,\n    'This unit of work tag should not have side-effects. This error is ' +\n      'likely caused by a bug in React. Please file an issue.',\n  );\n}\n\nfunction getHostParentFiber(fiber: Fiber): Fiber {\n  let parent = fiber.return;\n  while (parent !== null) {\n    if (isHostParent(parent)) {\n      return parent;\n    }\n    parent = parent.return;\n  }\n  invariant(\n    false,\n    'Expected to find a host parent. This error is likely caused by a bug ' +\n      'in React. Please file an issue.',\n  );\n}\n\nfunction isHostParent(fiber: Fiber): boolean {\n  return (\n    fiber.tag === HostComponent ||\n    fiber.tag === HostRoot ||\n    fiber.tag === HostPortal\n  );\n}\n\nfunction getHostSibling(fiber: Fiber): ?Instance {\n  // We're going to search forward into the tree until we find a sibling host\n  // node. Unfortunately, if multiple insertions are done in a row we have to\n  // search past them. This leads to exponential search for the next sibling.\n  // TODO: Find a more efficient way to do this.\n  let node: Fiber = fiber;\n  siblings: while (true) {\n    // If we didn't find anything, let's try the next sibling.\n    while (node.sibling === null) {\n      if (node.return === null || isHostParent(node.return)) {\n        // If we pop out of the root or hit the parent the fiber we are the\n        // last sibling.\n        return null;\n      }\n      node = node.return;\n    }\n    node.sibling.return = node.return;\n    node = node.sibling;\n    while (\n      node.tag !== HostComponent &&\n      node.tag !== HostText &&\n      node.tag !== DehydratedFragment\n    ) {\n      // If it is not host node and, we might have a host node inside it.\n      // Try to search down until we find one.\n      if (node.flags & Placement) {\n        // If we don't have a child, try the siblings instead.\n        continue siblings;\n      }\n      // If we don't have a child, try the siblings instead.\n      // We also skip portals because they are not part of this host tree.\n      if (node.child === null || node.tag === HostPortal) {\n        continue siblings;\n      } else {\n        node.child.return = node;\n        node = node.child;\n      }\n    }\n    // Check if this host node is stable or about to be placed.\n    if (!(node.flags & Placement)) {\n      // Found it!\n      return node.stateNode;\n    }\n  }\n}\n\nfunction commitPlacement(finishedWork: Fiber): void {\n  if (!supportsMutation) {\n    return;\n  }\n\n  // Recursively insert all host nodes into the parent.\n  const parentFiber = getHostParentFiber(finishedWork);\n\n  // Note: these two variables *must* always be updated together.\n  let parent;\n  let isContainer;\n  const parentStateNode = parentFiber.stateNode;\n  switch (parentFiber.tag) {\n    case HostComponent:\n      parent = parentStateNode;\n      isContainer = false;\n      break;\n    case HostRoot:\n      parent = parentStateNode.containerInfo;\n      isContainer = true;\n      break;\n    case HostPortal:\n      parent = parentStateNode.containerInfo;\n      isContainer = true;\n      break;\n    // eslint-disable-next-line-no-fallthrough\n    default:\n      invariant(\n        false,\n        'Invalid host parent fiber. This error is likely caused by a bug ' +\n          'in React. Please file an issue.',\n      );\n  }\n  if (parentFiber.flags & ContentReset) {\n    // Reset the text content of the parent before doing any insertions\n    resetTextContent(parent);\n    // Clear ContentReset from the effect tag\n    parentFiber.flags &= ~ContentReset;\n  }\n\n  const before = getHostSibling(finishedWork);\n  // We only have the top Fiber that was inserted but we need to recurse down its\n  // children to find all the terminal nodes.\n  if (isContainer) {\n    insertOrAppendPlacementNodeIntoContainer(finishedWork, before, parent);\n  } else {\n    insertOrAppendPlacementNode(finishedWork, before, parent);\n  }\n}\n\nfunction insertOrAppendPlacementNodeIntoContainer(\n  node: Fiber,\n  before: ?Instance,\n  parent: Container,\n): void {\n  const {tag} = node;\n  const isHost = tag === HostComponent || tag === HostText;\n  if (isHost) {\n    const stateNode = node.stateNode;\n    if (before) {\n      insertInContainerBefore(parent, stateNode, before);\n    } else {\n      appendChildToContainer(parent, stateNode);\n    }\n  } else if (tag === HostPortal) {\n    // If the insertion itself is a portal, then we don't want to traverse\n    // down its children. Instead, we'll get insertions from each child in\n    // the portal directly.\n  } else {\n    const child = node.child;\n    if (child !== null) {\n      insertOrAppendPlacementNodeIntoContainer(child, before, parent);\n      let sibling = child.sibling;\n      while (sibling !== null) {\n        insertOrAppendPlacementNodeIntoContainer(sibling, before, parent);\n        sibling = sibling.sibling;\n      }\n    }\n  }\n}\n\nfunction insertOrAppendPlacementNode(\n  node: Fiber,\n  before: ?Instance,\n  parent: Instance,\n): void {\n  const {tag} = node;\n  const isHost = tag === HostComponent || tag === HostText;\n  if (isHost) {\n    const stateNode = node.stateNode;\n    if (before) {\n      insertBefore(parent, stateNode, before);\n    } else {\n      appendChild(parent, stateNode);\n    }\n  } else if (tag === HostPortal) {\n    // If the insertion itself is a portal, then we don't want to traverse\n    // down its children. Instead, we'll get insertions from each child in\n    // the portal directly.\n  } else {\n    const child = node.child;\n    if (child !== null) {\n      insertOrAppendPlacementNode(child, before, parent);\n      let sibling = child.sibling;\n      while (sibling !== null) {\n        insertOrAppendPlacementNode(sibling, before, parent);\n        sibling = sibling.sibling;\n      }\n    }\n  }\n}\n\nfunction unmountHostComponents(\n  finishedRoot: FiberRoot,\n  current: Fiber,\n  nearestMountedAncestor: Fiber,\n): void {\n  // We only have the top Fiber that was deleted but we need to recurse down its\n  // children to find all the terminal nodes.\n  let node: Fiber = current;\n\n  // Each iteration, currentParent is populated with node's host parent if not\n  // currentParentIsValid.\n  let currentParentIsValid = false;\n\n  // Note: these two variables *must* always be updated together.\n  let currentParent;\n  let currentParentIsContainer;\n\n  while (true) {\n    if (!currentParentIsValid) {\n      let parent = node.return;\n      findParent: while (true) {\n        invariant(\n          parent !== null,\n          'Expected to find a host parent. This error is likely caused by ' +\n            'a bug in React. Please file an issue.',\n        );\n        const parentStateNode = parent.stateNode;\n        switch (parent.tag) {\n          case HostComponent:\n            currentParent = parentStateNode;\n            currentParentIsContainer = false;\n            break findParent;\n          case HostRoot:\n            currentParent = parentStateNode.containerInfo;\n            currentParentIsContainer = true;\n            break findParent;\n          case HostPortal:\n            currentParent = parentStateNode.containerInfo;\n            currentParentIsContainer = true;\n            break findParent;\n        }\n        parent = parent.return;\n      }\n      currentParentIsValid = true;\n    }\n\n    if (node.tag === HostComponent || node.tag === HostText) {\n      commitNestedUnmounts(finishedRoot, node, nearestMountedAncestor);\n      // After all the children have unmounted, it is now safe to remove the\n      // node from the tree.\n      if (currentParentIsContainer) {\n        removeChildFromContainer(\n          ((currentParent: any): Container),\n          (node.stateNode: Instance | TextInstance),\n        );\n      } else {\n        removeChild(\n          ((currentParent: any): Instance),\n          (node.stateNode: Instance | TextInstance),\n        );\n      }\n      // Don't visit children because we already visited them.\n    } else if (\n      enableSuspenseServerRenderer &&\n      node.tag === DehydratedFragment\n    ) {\n      if (enableSuspenseCallback) {\n        const hydrationCallbacks = finishedRoot.hydrationCallbacks;\n        if (hydrationCallbacks !== null) {\n          const onDeleted = hydrationCallbacks.onDeleted;\n          if (onDeleted) {\n            onDeleted((node.stateNode: SuspenseInstance));\n          }\n        }\n      }\n\n      // Delete the dehydrated suspense boundary and all of its content.\n      if (currentParentIsContainer) {\n        clearSuspenseBoundaryFromContainer(\n          ((currentParent: any): Container),\n          (node.stateNode: SuspenseInstance),\n        );\n      } else {\n        clearSuspenseBoundary(\n          ((currentParent: any): Instance),\n          (node.stateNode: SuspenseInstance),\n        );\n      }\n    } else if (node.tag === HostPortal) {\n      if (node.child !== null) {\n        // When we go into a portal, it becomes the parent to remove from.\n        // We will reassign it back when we pop the portal on the way up.\n        currentParent = node.stateNode.containerInfo;\n        currentParentIsContainer = true;\n        // Visit children because portals might contain host components.\n        node.child.return = node;\n        node = node.child;\n        continue;\n      }\n    } else {\n      commitUnmount(finishedRoot, node, nearestMountedAncestor);\n      // Visit children because we may find more host components below.\n      if (node.child !== null) {\n        node.child.return = node;\n        node = node.child;\n        continue;\n      }\n    }\n    if (node === current) {\n      return;\n    }\n    while (node.sibling === null) {\n      if (node.return === null || node.return === current) {\n        return;\n      }\n      node = node.return;\n      if (node.tag === HostPortal) {\n        // When we go out of the portal, we need to restore the parent.\n        // Since we don't keep a stack of them, we will search for it.\n        currentParentIsValid = false;\n      }\n    }\n    node.sibling.return = node.return;\n    node = node.sibling;\n  }\n}\n\nfunction commitDeletion(\n  finishedRoot: FiberRoot,\n  current: Fiber,\n  nearestMountedAncestor: Fiber,\n): void {\n  if (supportsMutation) {\n    // Recursively delete all host nodes from the parent.\n    // Detach refs and call componentWillUnmount() on the whole subtree.\n    unmountHostComponents(finishedRoot, current, nearestMountedAncestor);\n  } else {\n    // Detach refs and call componentWillUnmount() on the whole subtree.\n    commitNestedUnmounts(finishedRoot, current, nearestMountedAncestor);\n  }\n\n  detachFiberMutation(current);\n}\n\nfunction commitWork(current: Fiber | null, finishedWork: Fiber): void {\n  if (!supportsMutation) {\n    switch (finishedWork.tag) {\n      case FunctionComponent:\n      case ForwardRef:\n      case MemoComponent:\n      case SimpleMemoComponent: {\n        // Layout effects are destroyed during the mutation phase so that all\n        // destroy functions for all fibers are called before any create functions.\n        // This prevents sibling component effects from interfering with each other,\n        // e.g. a destroy function in one component should never override a ref set\n        // by a create function in another component during the same commit.\n        // TODO: Check if we're inside an Offscreen subtree that disappeared\n        // during this commit. If so, we would have already unmounted its\n        // layout hooks. (However, since we null out the `destroy` function\n        // right before calling it, the behavior is already correct, so this\n        // would mostly be for modeling purposes.)\n        if (\n          enableProfilerTimer &&\n          enableProfilerCommitHooks &&\n          finishedWork.mode & ProfileMode\n        ) {\n          try {\n            startLayoutEffectTimer();\n            commitHookEffectListUnmount(\n              HookLayout | HookHasEffect,\n              finishedWork,\n              finishedWork.return,\n            );\n          } finally {\n            recordLayoutEffectDuration(finishedWork);\n          }\n        } else {\n          commitHookEffectListUnmount(\n            HookLayout | HookHasEffect,\n            finishedWork,\n            finishedWork.return,\n          );\n        }\n        return;\n      }\n      case Profiler: {\n        return;\n      }\n      case SuspenseComponent: {\n        commitSuspenseCallback(finishedWork);\n        attachSuspenseRetryListeners(finishedWork);\n        return;\n      }\n      case SuspenseListComponent: {\n        attachSuspenseRetryListeners(finishedWork);\n        return;\n      }\n      case HostRoot: {\n        if (supportsHydration) {\n          const root: FiberRoot = finishedWork.stateNode;\n          if (root.hydrate) {\n            // We've just hydrated. No need to hydrate again.\n            root.hydrate = false;\n            commitHydratedContainer(root.containerInfo);\n          }\n        }\n        break;\n      }\n      case OffscreenComponent:\n      case LegacyHiddenComponent: {\n        return;\n      }\n    }\n\n    commitContainer(finishedWork);\n    return;\n  }\n\n  switch (finishedWork.tag) {\n    case FunctionComponent:\n    case ForwardRef:\n    case MemoComponent:\n    case SimpleMemoComponent: {\n      // Layout effects are destroyed during the mutation phase so that all\n      // destroy functions for all fibers are called before any create functions.\n      // This prevents sibling component effects from interfering with each other,\n      // e.g. a destroy function in one component should never override a ref set\n      // by a create function in another component during the same commit.\n      if (\n        enableProfilerTimer &&\n        enableProfilerCommitHooks &&\n        finishedWork.mode & ProfileMode\n      ) {\n        try {\n          startLayoutEffectTimer();\n          commitHookEffectListUnmount(\n            HookLayout | HookHasEffect,\n            finishedWork,\n            finishedWork.return,\n          );\n        } finally {\n          recordLayoutEffectDuration(finishedWork);\n        }\n      } else {\n        commitHookEffectListUnmount(\n          HookLayout | HookHasEffect,\n          finishedWork,\n          finishedWork.return,\n        );\n      }\n      return;\n    }\n    case ClassComponent: {\n      return;\n    }\n    case HostComponent: {\n      const instance: Instance = finishedWork.stateNode;\n      if (instance != null) {\n        // Commit the work prepared earlier.\n        const newProps = finishedWork.memoizedProps;\n        // For hydration we reuse the update path but we treat the oldProps\n        // as the newProps. The updatePayload will contain the real change in\n        // this case.\n        const oldProps = current !== null ? current.memoizedProps : newProps;\n        const type = finishedWork.type;\n        // TODO: Type the updateQueue to be specific to host components.\n        const updatePayload: null | UpdatePayload = (finishedWork.updateQueue: any);\n        finishedWork.updateQueue = null;\n        if (updatePayload !== null) {\n          commitUpdate(\n            instance,\n            updatePayload,\n            type,\n            oldProps,\n            newProps,\n            finishedWork,\n          );\n        }\n      }\n      return;\n    }\n    case HostText: {\n      invariant(\n        finishedWork.stateNode !== null,\n        'This should have a text node initialized. This error is likely ' +\n          'caused by a bug in React. Please file an issue.',\n      );\n      const textInstance: TextInstance = finishedWork.stateNode;\n      const newText: string = finishedWork.memoizedProps;\n      // For hydration we reuse the update path but we treat the oldProps\n      // as the newProps. The updatePayload will contain the real change in\n      // this case.\n      const oldText: string =\n        current !== null ? current.memoizedProps : newText;\n      commitTextUpdate(textInstance, oldText, newText);\n      return;\n    }\n    case HostRoot: {\n      if (supportsHydration) {\n        const root: FiberRoot = finishedWork.stateNode;\n        if (root.hydrate) {\n          // We've just hydrated. No need to hydrate again.\n          root.hydrate = false;\n          commitHydratedContainer(root.containerInfo);\n        }\n      }\n      return;\n    }\n    case Profiler: {\n      return;\n    }\n    case SuspenseComponent: {\n      commitSuspenseCallback(finishedWork);\n      attachSuspenseRetryListeners(finishedWork);\n      return;\n    }\n    case SuspenseListComponent: {\n      attachSuspenseRetryListeners(finishedWork);\n      return;\n    }\n    case IncompleteClassComponent: {\n      return;\n    }\n    case ScopeComponent: {\n      if (enableScopeAPI) {\n        const scopeInstance = finishedWork.stateNode;\n        prepareScopeUpdate(scopeInstance, finishedWork);\n        return;\n      }\n      break;\n    }\n  }\n  invariant(\n    false,\n    'This unit of work tag should not have side-effects. This error is ' +\n      'likely caused by a bug in React. Please file an issue.',\n  );\n}\n\nfunction commitSuspenseCallback(finishedWork: Fiber) {\n  // TODO: Move this to passive phase\n  const newState: SuspenseState | null = finishedWork.memoizedState;\n  if (enableSuspenseCallback && newState !== null) {\n    const suspenseCallback = finishedWork.memoizedProps.suspenseCallback;\n    if (typeof suspenseCallback === 'function') {\n      const wakeables: Set<Wakeable> | null = (finishedWork.updateQueue: any);\n      if (wakeables !== null) {\n        suspenseCallback(new Set(wakeables));\n      }\n    } else if (__DEV__) {\n      if (suspenseCallback !== undefined) {\n        console.error('Unexpected type for suspenseCallback.');\n      }\n    }\n  }\n}\n\nfunction commitSuspenseHydrationCallbacks(\n  finishedRoot: FiberRoot,\n  finishedWork: Fiber,\n) {\n  if (!supportsHydration) {\n    return;\n  }\n  const newState: SuspenseState | null = finishedWork.memoizedState;\n  if (newState === null) {\n    const current = finishedWork.alternate;\n    if (current !== null) {\n      const prevState: SuspenseState | null = current.memoizedState;\n      if (prevState !== null) {\n        const suspenseInstance = prevState.dehydrated;\n        if (suspenseInstance !== null) {\n          commitHydratedSuspenseInstance(suspenseInstance);\n          if (enableSuspenseCallback) {\n            const hydrationCallbacks = finishedRoot.hydrationCallbacks;\n            if (hydrationCallbacks !== null) {\n              const onHydrated = hydrationCallbacks.onHydrated;\n              if (onHydrated) {\n                onHydrated(suspenseInstance);\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n\nfunction attachSuspenseRetryListeners(finishedWork: Fiber) {\n  // If this boundary just timed out, then it will have a set of wakeables.\n  // For each wakeable, attach a listener so that when it resolves, React\n  // attempts to re-render the boundary in the primary (pre-timeout) state.\n  const wakeables: Set<Wakeable> | null = (finishedWork.updateQueue: any);\n  if (wakeables !== null) {\n    finishedWork.updateQueue = null;\n    let retryCache = finishedWork.stateNode;\n    if (retryCache === null) {\n      retryCache = finishedWork.stateNode = new PossiblyWeakSet();\n    }\n    wakeables.forEach(wakeable => {\n      // Memoize using the boundary fiber to prevent redundant listeners.\n      const retry = resolveRetryWakeable.bind(null, finishedWork, wakeable);\n      if (!retryCache.has(wakeable)) {\n        retryCache.add(wakeable);\n\n        if (enableUpdaterTracking) {\n          if (isDevToolsPresent) {\n            if (inProgressLanes !== null && inProgressRoot !== null) {\n              // If we have pending work still, associate the original updaters with it.\n              restorePendingUpdaters(inProgressRoot, inProgressLanes);\n            } else {\n              throw Error(\n                'Expected finished root and lanes to be set. This is a bug in React.',\n              );\n            }\n          }\n        }\n\n        wakeable.then(retry, retry);\n      }\n    });\n  }\n}\n\n// This function detects when a Suspense boundary goes from visible to hidden.\n// It returns false if the boundary is already hidden.\n// TODO: Use an effect tag.\nexport function isSuspenseBoundaryBeingHidden(\n  current: Fiber | null,\n  finishedWork: Fiber,\n): boolean {\n  if (current !== null) {\n    const oldState: SuspenseState | null = current.memoizedState;\n    if (oldState === null || oldState.dehydrated !== null) {\n      const newState: SuspenseState | null = finishedWork.memoizedState;\n      return newState !== null && newState.dehydrated === null;\n    }\n  }\n  return false;\n}\n\nfunction commitResetTextContent(current: Fiber) {\n  if (!supportsMutation) {\n    return;\n  }\n  resetTextContent(current.stateNode);\n}\n\nexport function commitMutationEffects(\n  root: FiberRoot,\n  firstChild: Fiber,\n  committedLanes: Lanes,\n) {\n  inProgressLanes = committedLanes;\n  inProgressRoot = root;\n  nextEffect = firstChild;\n\n  commitMutationEffects_begin(root);\n\n  inProgressLanes = null;\n  inProgressRoot = null;\n}\n\nfunction commitMutationEffects_begin(root: FiberRoot) {\n  while (nextEffect !== null) {\n    const fiber = nextEffect;\n\n    // TODO: Should wrap this in flags check, too, as optimization\n    const deletions = fiber.deletions;\n    if (deletions !== null) {\n      for (let i = 0; i < deletions.length; i++) {\n        const childToDelete = deletions[i];\n        try {\n          commitDeletion(root, childToDelete, fiber);\n        } catch (error) {\n          reportUncaughtErrorInDEV(error);\n          captureCommitPhaseError(childToDelete, fiber, error);\n        }\n      }\n    }\n\n    const child = fiber.child;\n    if ((fiber.subtreeFlags & MutationMask) !== NoFlags && child !== null) {\n      ensureCorrectReturnPointer(child, fiber);\n      nextEffect = child;\n    } else {\n      commitMutationEffects_complete(root);\n    }\n  }\n}\n\nfunction commitMutationEffects_complete(root: FiberRoot) {\n  while (nextEffect !== null) {\n    const fiber = nextEffect;\n    setCurrentDebugFiberInDEV(fiber);\n    try {\n      commitMutationEffectsOnFiber(fiber, root);\n    } catch (error) {\n      reportUncaughtErrorInDEV(error);\n      captureCommitPhaseError(fiber, fiber.return, error);\n    }\n    resetCurrentDebugFiberInDEV();\n\n    const sibling = fiber.sibling;\n    if (sibling !== null) {\n      ensureCorrectReturnPointer(sibling, fiber.return);\n      nextEffect = sibling;\n      return;\n    }\n\n    nextEffect = fiber.return;\n  }\n}\n\nfunction commitMutationEffectsOnFiber(finishedWork: Fiber, root: FiberRoot) {\n  // TODO: The factoring of this phase could probably be improved. Consider\n  // switching on the type of work before checking the flags. That's what\n  // we do in all the other phases. I think this one is only different\n  // because of the shared reconciliation logic below.\n  const flags = finishedWork.flags;\n\n  if (flags & ContentReset) {\n    commitResetTextContent(finishedWork);\n  }\n\n  if (flags & Ref) {\n    const current = finishedWork.alternate;\n    if (current !== null) {\n      commitDetachRef(current);\n    }\n    if (enableScopeAPI) {\n      // TODO: This is a temporary solution that allowed us to transition away\n      // from React Flare on www.\n      if (finishedWork.tag === ScopeComponent) {\n        commitAttachRef(finishedWork);\n      }\n    }\n  }\n\n  if (flags & Visibility) {\n    switch (finishedWork.tag) {\n      case SuspenseComponent: {\n        const newState: OffscreenState | null = finishedWork.memoizedState;\n        const isHidden = newState !== null;\n        if (isHidden) {\n          const current = finishedWork.alternate;\n          const wasHidden = current !== null && current.memoizedState !== null;\n          if (!wasHidden) {\n            // TODO: Move to passive phase\n            markCommitTimeOfFallback();\n          }\n        }\n        break;\n      }\n      case OffscreenComponent: {\n        const newState: OffscreenState | null = finishedWork.memoizedState;\n        const isHidden = newState !== null;\n        const current = finishedWork.alternate;\n        const wasHidden = current !== null && current.memoizedState !== null;\n        const offscreenBoundary: Fiber = finishedWork;\n\n        if (supportsMutation) {\n          // TODO: This needs to run whenever there's an insertion or update\n          // inside a hidden Offscreen tree.\n          hideOrUnhideAllChildren(offscreenBoundary, isHidden);\n        }\n\n        if (enableSuspenseLayoutEffectSemantics) {\n          if (isHidden) {\n            if (!wasHidden) {\n              if ((offscreenBoundary.mode & ConcurrentMode) !== NoMode) {\n                nextEffect = offscreenBoundary;\n                let offscreenChild = offscreenBoundary.child;\n                while (offscreenChild !== null) {\n                  nextEffect = offscreenChild;\n                  disappearLayoutEffects_begin(offscreenChild);\n                  offscreenChild = offscreenChild.sibling;\n                }\n              }\n            }\n          } else {\n            if (wasHidden) {\n              // TODO: Move re-appear call here for symmetry?\n            }\n          }\n          break;\n        }\n      }\n    }\n  }\n\n  // The following switch statement is only concerned about placement,\n  // updates, and deletions. To avoid needing to add a case for every possible\n  // bitmap value, we remove the secondary effects from the effect tag and\n  // switch on that value.\n  const primaryFlags = flags & (Placement | Update | Hydrating);\n  outer: switch (primaryFlags) {\n    case Placement: {\n      commitPlacement(finishedWork);\n      // Clear the \"placement\" from effect tag so that we know that this is\n      // inserted, before any life-cycles like componentDidMount gets called.\n      // TODO: findDOMNode doesn't rely on this any more but isMounted does\n      // and isMounted is deprecated anyway so we should be able to kill this.\n      finishedWork.flags &= ~Placement;\n      break;\n    }\n    case PlacementAndUpdate: {\n      // Placement\n      commitPlacement(finishedWork);\n      // Clear the \"placement\" from effect tag so that we know that this is\n      // inserted, before any life-cycles like componentDidMount gets called.\n      finishedWork.flags &= ~Placement;\n\n      // Update\n      const current = finishedWork.alternate;\n      commitWork(current, finishedWork);\n      break;\n    }\n    case Hydrating: {\n      finishedWork.flags &= ~Hydrating;\n      break;\n    }\n    case HydratingAndUpdate: {\n      finishedWork.flags &= ~Hydrating;\n\n      // Update\n      const current = finishedWork.alternate;\n      commitWork(current, finishedWork);\n      break;\n    }\n    case Update: {\n      const current = finishedWork.alternate;\n      commitWork(current, finishedWork);\n      break;\n    }\n  }\n}\n\nexport function commitLayoutEffects(\n  finishedWork: Fiber,\n  root: FiberRoot,\n  committedLanes: Lanes,\n): void {\n  inProgressLanes = committedLanes;\n  inProgressRoot = root;\n  nextEffect = finishedWork;\n\n  commitLayoutEffects_begin(finishedWork, root, committedLanes);\n\n  inProgressLanes = null;\n  inProgressRoot = null;\n}\n\nfunction commitLayoutEffects_begin(\n  subtreeRoot: Fiber,\n  root: FiberRoot,\n  committedLanes: Lanes,\n) {\n  // Suspense layout effects semantics don't change for legacy roots.\n  const isModernRoot = (subtreeRoot.mode & ConcurrentMode) !== NoMode;\n\n  while (nextEffect !== null) {\n    const fiber = nextEffect;\n    const firstChild = fiber.child;\n\n    if (\n      enableSuspenseLayoutEffectSemantics &&\n      fiber.tag === OffscreenComponent &&\n      isModernRoot\n    ) {\n      // Keep track of the current Offscreen stack's state.\n      const isHidden = fiber.memoizedState !== null;\n      const newOffscreenSubtreeIsHidden = isHidden || offscreenSubtreeIsHidden;\n      if (newOffscreenSubtreeIsHidden) {\n        // The Offscreen tree is hidden. Skip over its layout effects.\n        commitLayoutMountEffects_complete(subtreeRoot, root, committedLanes);\n        continue;\n      } else {\n        // TODO (Offscreen) Also check: subtreeFlags & LayoutMask\n        const current = fiber.alternate;\n        const wasHidden = current !== null && current.memoizedState !== null;\n        const newOffscreenSubtreeWasHidden =\n          wasHidden || offscreenSubtreeWasHidden;\n        const prevOffscreenSubtreeIsHidden = offscreenSubtreeIsHidden;\n        const prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;\n\n        // Traverse the Offscreen subtree with the current Offscreen as the root.\n        offscreenSubtreeIsHidden = newOffscreenSubtreeIsHidden;\n        offscreenSubtreeWasHidden = newOffscreenSubtreeWasHidden;\n\n        if (offscreenSubtreeWasHidden && !prevOffscreenSubtreeWasHidden) {\n          // This is the root of a reappearing boundary. Turn its layout effects\n          // back on.\n          nextEffect = fiber;\n          reappearLayoutEffects_begin(fiber);\n        }\n\n        let child = firstChild;\n        while (child !== null) {\n          nextEffect = child;\n          commitLayoutEffects_begin(\n            child, // New root; bubble back up to here and stop.\n            root,\n            committedLanes,\n          );\n          child = child.sibling;\n        }\n\n        // Restore Offscreen state and resume in our-progress traversal.\n        nextEffect = fiber;\n        offscreenSubtreeIsHidden = prevOffscreenSubtreeIsHidden;\n        offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;\n        commitLayoutMountEffects_complete(subtreeRoot, root, committedLanes);\n\n        continue;\n      }\n    }\n\n    if ((fiber.subtreeFlags & LayoutMask) !== NoFlags && firstChild !== null) {\n      ensureCorrectReturnPointer(firstChild, fiber);\n      nextEffect = firstChild;\n    } else {\n      commitLayoutMountEffects_complete(subtreeRoot, root, committedLanes);\n    }\n  }\n}\n\nfunction commitLayoutMountEffects_complete(\n  subtreeRoot: Fiber,\n  root: FiberRoot,\n  committedLanes: Lanes,\n) {\n  while (nextEffect !== null) {\n    const fiber = nextEffect;\n    if ((fiber.flags & LayoutMask) !== NoFlags) {\n      const current = fiber.alternate;\n      setCurrentDebugFiberInDEV(fiber);\n      try {\n        commitLayoutEffectOnFiber(root, current, fiber, committedLanes);\n      } catch (error) {\n        reportUncaughtErrorInDEV(error);\n        captureCommitPhaseError(fiber, fiber.return, error);\n      }\n      resetCurrentDebugFiberInDEV();\n    }\n\n    if (fiber === subtreeRoot) {\n      nextEffect = null;\n      return;\n    }\n\n    const sibling = fiber.sibling;\n    if (sibling !== null) {\n      ensureCorrectReturnPointer(sibling, fiber.return);\n      nextEffect = sibling;\n      return;\n    }\n\n    nextEffect = fiber.return;\n  }\n}\n\nfunction disappearLayoutEffects_begin(subtreeRoot: Fiber) {\n  while (nextEffect !== null) {\n    const fiber = nextEffect;\n    const firstChild = fiber.child;\n\n    // TODO (Offscreen) Check: flags & (RefStatic | LayoutStatic)\n    switch (fiber.tag) {\n      case FunctionComponent:\n      case ForwardRef:\n      case MemoComponent:\n      case SimpleMemoComponent: {\n        if (\n          enableProfilerTimer &&\n          enableProfilerCommitHooks &&\n          fiber.mode & ProfileMode\n        ) {\n          try {\n            startLayoutEffectTimer();\n            commitHookEffectListUnmount(HookLayout, fiber, fiber.return);\n          } finally {\n            recordLayoutEffectDuration(fiber);\n          }\n        } else {\n          commitHookEffectListUnmount(HookLayout, fiber, fiber.return);\n        }\n        break;\n      }\n      case ClassComponent: {\n        // TODO (Offscreen) Check: flags & RefStatic\n        safelyDetachRef(fiber, fiber.return);\n\n        const instance = fiber.stateNode;\n        if (typeof instance.componentWillUnmount === 'function') {\n          safelyCallComponentWillUnmount(fiber, fiber.return, instance);\n        }\n        break;\n      }\n      case HostComponent: {\n        safelyDetachRef(fiber, fiber.return);\n        break;\n      }\n      case OffscreenComponent: {\n        // Check if this is a\n        const isHidden = fiber.memoizedState !== null;\n        if (isHidden) {\n          // Nested Offscreen tree is already hidden. Don't disappear\n          // its effects.\n          disappearLayoutEffects_complete(subtreeRoot);\n          continue;\n        }\n        break;\n      }\n    }\n\n    // TODO (Offscreen) Check: subtreeFlags & LayoutStatic\n    if (firstChild !== null) {\n      firstChild.return = fiber;\n      nextEffect = firstChild;\n    } else {\n      disappearLayoutEffects_complete(subtreeRoot);\n    }\n  }\n}\n\nfunction disappearLayoutEffects_complete(subtreeRoot: Fiber) {\n  while (nextEffect !== null) {\n    const fiber = nextEffect;\n\n    if (fiber === subtreeRoot) {\n      nextEffect = null;\n      return;\n    }\n\n    const sibling = fiber.sibling;\n    if (sibling !== null) {\n      sibling.return = fiber.return;\n      nextEffect = sibling;\n      return;\n    }\n\n    nextEffect = fiber.return;\n  }\n}\n\nfunction reappearLayoutEffects_begin(subtreeRoot: Fiber) {\n  while (nextEffect !== null) {\n    const fiber = nextEffect;\n    const firstChild = fiber.child;\n\n    if (fiber.tag === OffscreenComponent) {\n      const isHidden = fiber.memoizedState !== null;\n      if (isHidden) {\n        // Nested Offscreen tree is still hidden. Don't re-appear its effects.\n        reappearLayoutEffects_complete(subtreeRoot);\n        continue;\n      }\n    }\n\n    // TODO (Offscreen) Check: subtreeFlags & LayoutStatic\n    if (firstChild !== null) {\n      // This node may have been reused from a previous render, so we can't\n      // assume its return pointer is correct.\n      firstChild.return = fiber;\n      nextEffect = firstChild;\n    } else {\n      reappearLayoutEffects_complete(subtreeRoot);\n    }\n  }\n}\n\nfunction reappearLayoutEffects_complete(subtreeRoot: Fiber) {\n  while (nextEffect !== null) {\n    const fiber = nextEffect;\n\n    // TODO (Offscreen) Check: flags & LayoutStatic\n    setCurrentDebugFiberInDEV(fiber);\n    try {\n      reappearLayoutEffectsOnFiber(fiber);\n    } catch (error) {\n      reportUncaughtErrorInDEV(error);\n      captureCommitPhaseError(fiber, fiber.return, error);\n    }\n    resetCurrentDebugFiberInDEV();\n\n    if (fiber === subtreeRoot) {\n      nextEffect = null;\n      return;\n    }\n\n    const sibling = fiber.sibling;\n    if (sibling !== null) {\n      // This node may have been reused from a previous render, so we can't\n      // assume its return pointer is correct.\n      sibling.return = fiber.return;\n      nextEffect = sibling;\n      return;\n    }\n\n    nextEffect = fiber.return;\n  }\n}\n\nexport function commitPassiveMountEffects(\n  root: FiberRoot,\n  finishedWork: Fiber,\n): void {\n  nextEffect = finishedWork;\n  commitPassiveMountEffects_begin(finishedWork, root);\n}\n\nfunction commitPassiveMountEffects_begin(subtreeRoot: Fiber, root: FiberRoot) {\n  while (nextEffect !== null) {\n    const fiber = nextEffect;\n    const firstChild = fiber.child;\n    if ((fiber.subtreeFlags & PassiveMask) !== NoFlags && firstChild !== null) {\n      ensureCorrectReturnPointer(firstChild, fiber);\n      nextEffect = firstChild;\n    } else {\n      commitPassiveMountEffects_complete(subtreeRoot, root);\n    }\n  }\n}\n\nfunction commitPassiveMountEffects_complete(\n  subtreeRoot: Fiber,\n  root: FiberRoot,\n) {\n  while (nextEffect !== null) {\n    const fiber = nextEffect;\n    if ((fiber.flags & Passive) !== NoFlags) {\n      setCurrentDebugFiberInDEV(fiber);\n      try {\n        commitPassiveMountOnFiber(root, fiber);\n      } catch (error) {\n        reportUncaughtErrorInDEV(error);\n        captureCommitPhaseError(fiber, fiber.return, error);\n      }\n      resetCurrentDebugFiberInDEV();\n    }\n\n    if (fiber === subtreeRoot) {\n      nextEffect = null;\n      return;\n    }\n\n    const sibling = fiber.sibling;\n    if (sibling !== null) {\n      ensureCorrectReturnPointer(sibling, fiber.return);\n      nextEffect = sibling;\n      return;\n    }\n\n    nextEffect = fiber.return;\n  }\n}\n\nfunction commitPassiveMountOnFiber(\n  finishedRoot: FiberRoot,\n  finishedWork: Fiber,\n): void {\n  switch (finishedWork.tag) {\n    case FunctionComponent:\n    case ForwardRef:\n    case SimpleMemoComponent: {\n      if (\n        enableProfilerTimer &&\n        enableProfilerCommitHooks &&\n        finishedWork.mode & ProfileMode\n      ) {\n        startPassiveEffectTimer();\n        try {\n          commitHookEffectListMount(HookPassive | HookHasEffect, finishedWork);\n        } finally {\n          recordPassiveEffectDuration(finishedWork);\n        }\n      } else {\n        commitHookEffectListMount(HookPassive | HookHasEffect, finishedWork);\n      }\n      break;\n    }\n  }\n}\n\nexport function commitPassiveUnmountEffects(firstChild: Fiber): void {\n  nextEffect = firstChild;\n  commitPassiveUnmountEffects_begin();\n}\n\nfunction commitPassiveUnmountEffects_begin() {\n  while (nextEffect !== null) {\n    const fiber = nextEffect;\n    const child = fiber.child;\n\n    if ((nextEffect.flags & ChildDeletion) !== NoFlags) {\n      const deletions = fiber.deletions;\n      if (deletions !== null) {\n        for (let i = 0; i < deletions.length; i++) {\n          const fiberToDelete = deletions[i];\n          nextEffect = fiberToDelete;\n          commitPassiveUnmountEffectsInsideOfDeletedTree_begin(\n            fiberToDelete,\n            fiber,\n          );\n        }\n\n        if (deletedTreeCleanUpLevel >= 1) {\n          // A fiber was deleted from this parent fiber, but it's still part of\n          // the previous (alternate) parent fiber's list of children. Because\n          // children are a linked list, an earlier sibling that's still alive\n          // will be connected to the deleted fiber via its `alternate`:\n          //\n          //   live fiber\n          //   --alternate--> previous live fiber\n          //   --sibling--> deleted fiber\n          //\n          // We can't disconnect `alternate` on nodes that haven't been deleted\n          // yet, but we can disconnect the `sibling` and `child` pointers.\n          const previousFiber = fiber.alternate;\n          if (previousFiber !== null) {\n            let detachedChild = previousFiber.child;\n            if (detachedChild !== null) {\n              previousFiber.child = null;\n              do {\n                const detachedSibling = detachedChild.sibling;\n                detachedChild.sibling = null;\n                detachedChild = detachedSibling;\n              } while (detachedChild !== null);\n            }\n          }\n        }\n\n        nextEffect = fiber;\n      }\n    }\n\n    if ((fiber.subtreeFlags & PassiveMask) !== NoFlags && child !== null) {\n      ensureCorrectReturnPointer(child, fiber);\n      nextEffect = child;\n    } else {\n      commitPassiveUnmountEffects_complete();\n    }\n  }\n}\n\nfunction commitPassiveUnmountEffects_complete() {\n  while (nextEffect !== null) {\n    const fiber = nextEffect;\n    if ((fiber.flags & Passive) !== NoFlags) {\n      setCurrentDebugFiberInDEV(fiber);\n      commitPassiveUnmountOnFiber(fiber);\n      resetCurrentDebugFiberInDEV();\n    }\n\n    const sibling = fiber.sibling;\n    if (sibling !== null) {\n      ensureCorrectReturnPointer(sibling, fiber.return);\n      nextEffect = sibling;\n      return;\n    }\n\n    nextEffect = fiber.return;\n  }\n}\n\nfunction commitPassiveUnmountOnFiber(finishedWork: Fiber): void {\n  switch (finishedWork.tag) {\n    case FunctionComponent:\n    case ForwardRef:\n    case SimpleMemoComponent: {\n      if (\n        enableProfilerTimer &&\n        enableProfilerCommitHooks &&\n        finishedWork.mode & ProfileMode\n      ) {\n        startPassiveEffectTimer();\n        commitHookEffectListUnmount(\n          HookPassive | HookHasEffect,\n          finishedWork,\n          finishedWork.return,\n        );\n        recordPassiveEffectDuration(finishedWork);\n      } else {\n        commitHookEffectListUnmount(\n          HookPassive | HookHasEffect,\n          finishedWork,\n          finishedWork.return,\n        );\n      }\n      break;\n    }\n  }\n}\n\nfunction commitPassiveUnmountEffectsInsideOfDeletedTree_begin(\n  deletedSubtreeRoot: Fiber,\n  nearestMountedAncestor: Fiber | null,\n) {\n  while (nextEffect !== null) {\n    const fiber = nextEffect;\n\n    // Deletion effects fire in parent -> child order\n    // TODO: Check if fiber has a PassiveStatic flag\n    setCurrentDebugFiberInDEV(fiber);\n    commitPassiveUnmountInsideDeletedTreeOnFiber(fiber, nearestMountedAncestor);\n    resetCurrentDebugFiberInDEV();\n\n    const child = fiber.child;\n    // TODO: Only traverse subtree if it has a PassiveStatic flag. (But, if we\n    // do this, still need to handle `deletedTreeCleanUpLevel` correctly.)\n    if (child !== null) {\n      ensureCorrectReturnPointer(child, fiber);\n      nextEffect = child;\n    } else {\n      commitPassiveUnmountEffectsInsideOfDeletedTree_complete(\n        deletedSubtreeRoot,\n      );\n    }\n  }\n}\n\nfunction commitPassiveUnmountEffectsInsideOfDeletedTree_complete(\n  deletedSubtreeRoot: Fiber,\n) {\n  while (nextEffect !== null) {\n    const fiber = nextEffect;\n    const sibling = fiber.sibling;\n    const returnFiber = fiber.return;\n\n    if (deletedTreeCleanUpLevel >= 2) {\n      // Recursively traverse the entire deleted tree and clean up fiber fields.\n      // This is more aggressive than ideal, and the long term goal is to only\n      // have to detach the deleted tree at the root.\n      detachFiberAfterEffects(fiber);\n      if (fiber === deletedSubtreeRoot) {\n        nextEffect = null;\n        return;\n      }\n    } else {\n      // This is the default branch (level 0). We do not recursively clear all\n      // the fiber fields. Only the root of the deleted subtree.\n      if (fiber === deletedSubtreeRoot) {\n        detachFiberAfterEffects(fiber);\n        nextEffect = null;\n        return;\n      }\n    }\n\n    if (sibling !== null) {\n      ensureCorrectReturnPointer(sibling, returnFiber);\n      nextEffect = sibling;\n      return;\n    }\n\n    nextEffect = returnFiber;\n  }\n}\n\nfunction commitPassiveUnmountInsideDeletedTreeOnFiber(\n  current: Fiber,\n  nearestMountedAncestor: Fiber | null,\n): void {\n  switch (current.tag) {\n    case FunctionComponent:\n    case ForwardRef:\n    case SimpleMemoComponent: {\n      if (\n        enableProfilerTimer &&\n        enableProfilerCommitHooks &&\n        current.mode & ProfileMode\n      ) {\n        startPassiveEffectTimer();\n        commitHookEffectListUnmount(\n          HookPassive,\n          current,\n          nearestMountedAncestor,\n        );\n        recordPassiveEffectDuration(current);\n      } else {\n        commitHookEffectListUnmount(\n          HookPassive,\n          current,\n          nearestMountedAncestor,\n        );\n      }\n      break;\n    }\n  }\n}\n\nlet didWarnWrongReturnPointer = false;\nfunction ensureCorrectReturnPointer(fiber, expectedReturnFiber) {\n  if (__DEV__) {\n    if (!didWarnWrongReturnPointer && fiber.return !== expectedReturnFiber) {\n      didWarnWrongReturnPointer = true;\n      console.error(\n        'Internal React error: Return pointer is inconsistent ' +\n          'with parent.',\n      );\n    }\n  }\n\n  // TODO: Remove this assignment once we're confident that it won't break\n  // anything, by checking the warning logs for the above invariant\n  fiber.return = expectedReturnFiber;\n}\n\n// TODO: Reuse reappearLayoutEffects traversal here?\nfunction invokeLayoutEffectMountInDEV(fiber: Fiber): void {\n  if (__DEV__ && enableStrictEffects) {\n    // We don't need to re-check StrictEffectsMode here.\n    // This function is only called if that check has already passed.\n    switch (fiber.tag) {\n      case FunctionComponent:\n      case ForwardRef:\n      case SimpleMemoComponent: {\n        try {\n          commitHookEffectListMount(HookLayout | HookHasEffect, fiber);\n        } catch (error) {\n          reportUncaughtErrorInDEV(error);\n          captureCommitPhaseError(fiber, fiber.return, error);\n        }\n        break;\n      }\n      case ClassComponent: {\n        const instance = fiber.stateNode;\n        try {\n          instance.componentDidMount();\n        } catch (error) {\n          reportUncaughtErrorInDEV(error);\n          captureCommitPhaseError(fiber, fiber.return, error);\n        }\n        break;\n      }\n    }\n  }\n}\n\nfunction invokePassiveEffectMountInDEV(fiber: Fiber): void {\n  if (__DEV__ && enableStrictEffects) {\n    // We don't need to re-check StrictEffectsMode here.\n    // This function is only called if that check has already passed.\n    switch (fiber.tag) {\n      case FunctionComponent:\n      case ForwardRef:\n      case SimpleMemoComponent: {\n        try {\n          commitHookEffectListMount(HookPassive | HookHasEffect, fiber);\n        } catch (error) {\n          reportUncaughtErrorInDEV(error);\n          captureCommitPhaseError(fiber, fiber.return, error);\n        }\n        break;\n      }\n    }\n  }\n}\n\nfunction invokeLayoutEffectUnmountInDEV(fiber: Fiber): void {\n  if (__DEV__ && enableStrictEffects) {\n    // We don't need to re-check StrictEffectsMode here.\n    // This function is only called if that check has already passed.\n    switch (fiber.tag) {\n      case FunctionComponent:\n      case ForwardRef:\n      case SimpleMemoComponent: {\n        try {\n          commitHookEffectListUnmount(\n            HookLayout | HookHasEffect,\n            fiber,\n            fiber.return,\n          );\n        } catch (error) {\n          reportUncaughtErrorInDEV(error);\n          captureCommitPhaseError(fiber, fiber.return, error);\n        }\n        break;\n      }\n      case ClassComponent: {\n        const instance = fiber.stateNode;\n        if (typeof instance.componentWillUnmount === 'function') {\n          safelyCallComponentWillUnmount(fiber, fiber.return, instance);\n        }\n        break;\n      }\n    }\n  }\n}\n\nfunction invokePassiveEffectUnmountInDEV(fiber: Fiber): void {\n  if (__DEV__ && enableStrictEffects) {\n    // We don't need to re-check StrictEffectsMode here.\n    // This function is only called if that check has already passed.\n    switch (fiber.tag) {\n      case FunctionComponent:\n      case ForwardRef:\n      case SimpleMemoComponent: {\n        try {\n          commitHookEffectListUnmount(\n            HookPassive | HookHasEffect,\n            fiber,\n            fiber.return,\n          );\n        } catch (error) {\n          reportUncaughtErrorInDEV(error);\n          captureCommitPhaseError(fiber, fiber.return, error);\n        }\n      }\n    }\n  }\n}\n\nexport {\n  commitResetTextContent,\n  commitPlacement,\n  commitDeletion,\n  commitWork,\n  commitAttachRef,\n  commitDetachRef,\n  invokeLayoutEffectMountInDEV,\n  invokeLayoutEffectUnmountInDEV,\n  invokePassiveEffectMountInDEV,\n  invokePassiveEffectUnmountInDEV,\n};\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Wakeable} from 'shared/ReactTypes';\nimport type {Fiber, FiberRoot} from './ReactInternalTypes';\nimport type {Lanes, Lane} from './ReactFiberLane.old';\nimport type {SuspenseState} from './ReactFiberSuspenseComponent.old';\nimport type {StackCursor} from './ReactFiberStack.old';\nimport type {Flags} from './ReactFiberFlags';\n\nimport {\n  warnAboutDeprecatedLifecycles,\n  enableSuspenseServerRenderer,\n  replayFailedUnitOfWorkWithInvokeGuardedCallback,\n  enableCreateEventHandleAPI,\n  enableProfilerTimer,\n  enableProfilerCommitHooks,\n  enableProfilerNestedUpdatePhase,\n  enableProfilerNestedUpdateScheduledHook,\n  deferRenderPhaseUpdateToNextBatch,\n  enableDebugTracing,\n  enableSchedulingProfiler,\n  disableSchedulerTimeoutInWorkLoop,\n  enableStrictEffects,\n  skipUnmountedBoundaries,\n  enableUpdaterTracking,\n  warnOnSubscriptionInsideStartTransition,\n} from 'shared/ReactFeatureFlags';\nimport ReactSharedInternals from 'shared/ReactSharedInternals';\nimport invariant from 'shared/invariant';\n\nimport {\n  // Aliased because `act` will override and push to an internal queue\n  scheduleCallback as Scheduler_scheduleCallback,\n  cancelCallback as Scheduler_cancelCallback,\n  shouldYield,\n  requestPaint,\n  now,\n  ImmediatePriority as ImmediateSchedulerPriority,\n  UserBlockingPriority as UserBlockingSchedulerPriority,\n  NormalPriority as NormalSchedulerPriority,\n  IdlePriority as IdleSchedulerPriority,\n} from './Scheduler';\nimport {\n  flushSyncCallbacks,\n  flushSyncCallbacksOnlyInLegacyMode,\n  scheduleSyncCallback,\n  scheduleLegacySyncCallback,\n} from './ReactFiberSyncTaskQueue.old';\nimport {\n  logCommitStarted,\n  logCommitStopped,\n  logLayoutEffectsStarted,\n  logLayoutEffectsStopped,\n  logPassiveEffectsStarted,\n  logPassiveEffectsStopped,\n  logRenderStarted,\n  logRenderStopped,\n} from './DebugTracing';\nimport {\n  markCommitStarted,\n  markCommitStopped,\n  markLayoutEffectsStarted,\n  markLayoutEffectsStopped,\n  markPassiveEffectsStarted,\n  markPassiveEffectsStopped,\n  markRenderStarted,\n  markRenderYielded,\n  markRenderStopped,\n} from './SchedulingProfiler';\n\nimport {\n  resetAfterCommit,\n  scheduleTimeout,\n  cancelTimeout,\n  noTimeout,\n  warnsIfNotActing,\n  afterActiveInstanceBlur,\n  clearContainer,\n  getCurrentEventPriority,\n  supportsMicrotasks,\n  errorHydratingContainer,\n  scheduleMicrotask,\n} from './ReactFiberHostConfig';\n\nimport {\n  createWorkInProgress,\n  assignFiberPropertiesInDEV,\n} from './ReactFiber.old';\nimport {\n  NoMode,\n  StrictLegacyMode,\n  ProfileMode,\n  ConcurrentMode,\n} from './ReactTypeOfMode';\nimport {\n  HostRoot,\n  IndeterminateComponent,\n  ClassComponent,\n  SuspenseComponent,\n  SuspenseListComponent,\n  FunctionComponent,\n  ForwardRef,\n  MemoComponent,\n  SimpleMemoComponent,\n  Profiler,\n} from './ReactWorkTags';\nimport {LegacyRoot} from './ReactRootTags';\nimport {\n  NoFlags,\n  Placement,\n  Incomplete,\n  HostEffectMask,\n  Hydrating,\n  BeforeMutationMask,\n  MutationMask,\n  LayoutMask,\n  PassiveMask,\n  MountPassiveDev,\n  MountLayoutDev,\n} from './ReactFiberFlags';\nimport {\n  NoLanes,\n  NoLane,\n  SyncLane,\n  NoTimestamp,\n  claimNextTransitionLane,\n  claimNextRetryLane,\n  includesSomeLane,\n  isSubsetOfLanes,\n  mergeLanes,\n  removeLanes,\n  pickArbitraryLane,\n  includesNonIdleWork,\n  includesOnlyRetries,\n  includesOnlyTransitions,\n  shouldTimeSlice,\n  getNextLanes,\n  markStarvedLanesAsExpired,\n  getLanesToRetrySynchronouslyOnError,\n  getMostRecentEventTime,\n  markRootUpdated,\n  markRootSuspended as markRootSuspended_dontCallThisOneDirectly,\n  markRootPinged,\n  markRootEntangled,\n  markRootFinished,\n  getHighestPriorityLane,\n  addFiberToLanesMap,\n  movePendingFibersToMemoized,\n} from './ReactFiberLane.old';\nimport {\n  DiscreteEventPriority,\n  ContinuousEventPriority,\n  DefaultEventPriority,\n  IdleEventPriority,\n  getCurrentUpdatePriority,\n  setCurrentUpdatePriority,\n  lowerEventPriority,\n  lanesToEventPriority,\n} from './ReactEventPriorities.old';\nimport {requestCurrentTransition, NoTransition} from './ReactFiberTransition';\nimport {beginWork as originalBeginWork} from './ReactFiberBeginWork.old';\nimport {completeWork} from './ReactFiberCompleteWork.old';\nimport {unwindWork, unwindInterruptedWork} from './ReactFiberUnwindWork.old';\nimport {\n  throwException,\n  createRootErrorUpdate,\n  createClassErrorUpdate,\n} from './ReactFiberThrow.old';\nimport {\n  commitBeforeMutationEffects,\n  commitLayoutEffects,\n  commitMutationEffects,\n  commitPassiveEffectDurations,\n  commitPassiveMountEffects,\n  commitPassiveUnmountEffects,\n  invokeLayoutEffectMountInDEV,\n  invokePassiveEffectMountInDEV,\n  invokeLayoutEffectUnmountInDEV,\n  invokePassiveEffectUnmountInDEV,\n} from './ReactFiberCommitWork.old';\nimport {enqueueUpdate} from './ReactUpdateQueue.old';\nimport {resetContextDependencies} from './ReactFiberNewContext.old';\nimport {\n  resetHooksAfterThrow,\n  ContextOnlyDispatcher,\n  getIsUpdatingOpaqueValueInRenderPhaseInDEV,\n} from './ReactFiberHooks.old';\nimport {createCapturedValue} from './ReactCapturedValue';\nimport {\n  push as pushToStack,\n  pop as popFromStack,\n  createCursor,\n} from './ReactFiberStack.old';\nimport {enqueueInterleavedUpdates} from './ReactFiberInterleavedUpdates.old';\n\nimport {\n  markNestedUpdateScheduled,\n  recordCommitTime,\n  resetNestedUpdateFlag,\n  startProfilerTimer,\n  stopProfilerTimerIfRunningAndRecordDelta,\n  syncNestedUpdateFlag,\n} from './ReactProfilerTimer.old';\n\n// DEV stuff\nimport getComponentNameFromFiber from 'react-reconciler/src/getComponentNameFromFiber';\nimport ReactStrictModeWarnings from './ReactStrictModeWarnings.old';\nimport {\n  isRendering as ReactCurrentDebugFiberIsRenderingInDEV,\n  current as ReactCurrentFiberCurrent,\n  resetCurrentFiber as resetCurrentDebugFiberInDEV,\n  setCurrentFiber as setCurrentDebugFiberInDEV,\n} from './ReactCurrentFiber';\nimport {\n  invokeGuardedCallback,\n  hasCaughtError,\n  clearCaughtError,\n} from 'shared/ReactErrorUtils';\nimport {\n  onCommitRoot as onCommitRootDevTools,\n  onPostCommitRoot as onPostCommitRootDevTools,\n  isDevToolsPresent,\n} from './ReactFiberDevToolsHook.old';\nimport {onCommitRoot as onCommitRootTestSelector} from './ReactTestSelectors';\n\nconst ceil = Math.ceil;\n\nconst {\n  ReactCurrentDispatcher,\n  ReactCurrentOwner,\n  ReactCurrentBatchConfig,\n  ReactCurrentActQueue,\n} = ReactSharedInternals;\n\ntype ExecutionContext = number;\n\nexport const NoContext = /*             */ 0b0000;\nconst BatchedContext = /*               */ 0b0001;\nconst RenderContext = /*                */ 0b0010;\nconst CommitContext = /*                */ 0b0100;\nexport const RetryAfterError = /*       */ 0b1000;\n\ntype RootExitStatus = 0 | 1 | 2 | 3 | 4 | 5;\nconst RootIncomplete = 0;\nconst RootFatalErrored = 1;\nconst RootErrored = 2;\nconst RootSuspended = 3;\nconst RootSuspendedWithDelay = 4;\nconst RootCompleted = 5;\n\n// Describes where we are in the React execution stack\nlet executionContext: ExecutionContext = NoContext;\n// The root we're working on\nlet workInProgressRoot: FiberRoot | null = null;\n// The fiber we're working on\nlet workInProgress: Fiber | null = null;\n// The lanes we're rendering\nlet workInProgressRootRenderLanes: Lanes = NoLanes;\n\n// Stack that allows components to change the render lanes for its subtree\n// This is a superset of the lanes we started working on at the root. The only\n// case where it's different from `workInProgressRootRenderLanes` is when we\n// enter a subtree that is hidden and needs to be unhidden: Suspense and\n// Offscreen component.\n//\n// Most things in the work loop should deal with workInProgressRootRenderLanes.\n// Most things in begin/complete phases should deal with subtreeRenderLanes.\nexport let subtreeRenderLanes: Lanes = NoLanes;\nconst subtreeRenderLanesCursor: StackCursor<Lanes> = createCursor(NoLanes);\n\n// Whether to root completed, errored, suspended, etc.\nlet workInProgressRootExitStatus: RootExitStatus = RootIncomplete;\n// A fatal error, if one is thrown\nlet workInProgressRootFatalError: mixed = null;\n// \"Included\" lanes refer to lanes that were worked on during this render. It's\n// slightly different than `renderLanes` because `renderLanes` can change as you\n// enter and exit an Offscreen tree. This value is the combination of all render\n// lanes for the entire render phase.\nlet workInProgressRootIncludedLanes: Lanes = NoLanes;\n// The work left over by components that were visited during this render. Only\n// includes unprocessed updates, not work in bailed out children.\nlet workInProgressRootSkippedLanes: Lanes = NoLanes;\n// Lanes that were updated (in an interleaved event) during this render.\nlet workInProgressRootUpdatedLanes: Lanes = NoLanes;\n// Lanes that were pinged (in an interleaved event) during this render.\nlet workInProgressRootPingedLanes: Lanes = NoLanes;\n\n// The most recent time we committed a fallback. This lets us ensure a train\n// model where we don't commit new loading states in too quick succession.\nlet globalMostRecentFallbackTime: number = 0;\nconst FALLBACK_THROTTLE_MS: number = 500;\n\n// The absolute time for when we should start giving up on rendering\n// more and prefer CPU suspense heuristics instead.\nlet workInProgressRootRenderTargetTime: number = Infinity;\n// How long a render is supposed to take before we start following CPU\n// suspense heuristics and opt out of rendering more content.\nconst RENDER_TIMEOUT_MS = 500;\n\nfunction resetRenderTimer() {\n  workInProgressRootRenderTargetTime = now() + RENDER_TIMEOUT_MS;\n}\n\nexport function getRenderTargetTime(): number {\n  return workInProgressRootRenderTargetTime;\n}\n\nlet hasUncaughtError = false;\nlet firstUncaughtError = null;\nlet legacyErrorBoundariesThatAlreadyFailed: Set<mixed> | null = null;\n\n// Only used when enableProfilerNestedUpdateScheduledHook is true;\n// to track which root is currently committing layout effects.\nlet rootCommittingMutationOrLayoutEffects: FiberRoot | null = null;\n\nlet rootDoesHavePassiveEffects: boolean = false;\nlet rootWithPendingPassiveEffects: FiberRoot | null = null;\nlet pendingPassiveEffectsLanes: Lanes = NoLanes;\nlet pendingPassiveProfilerEffects: Array<Fiber> = [];\n\n// Use these to prevent an infinite loop of nested updates\nconst NESTED_UPDATE_LIMIT = 50;\nlet nestedUpdateCount: number = 0;\nlet rootWithNestedUpdates: FiberRoot | null = null;\n\nconst NESTED_PASSIVE_UPDATE_LIMIT = 50;\nlet nestedPassiveUpdateCount: number = 0;\n\n// If two updates are scheduled within the same event, we should treat their\n// event times as simultaneous, even if the actual clock time has advanced\n// between the first and second call.\nlet currentEventTime: number = NoTimestamp;\nlet currentEventTransitionLane: Lanes = NoLanes;\n\nexport function getWorkInProgressRoot(): FiberRoot | null {\n  return workInProgressRoot;\n}\n\nexport function requestEventTime() {\n  if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {\n    // We're inside React, so it's fine to read the actual time.\n    return now();\n  }\n  // We're not inside React, so we may be in the middle of a browser event.\n  if (currentEventTime !== NoTimestamp) {\n    // Use the same start time for all updates until we enter React again.\n    return currentEventTime;\n  }\n  // This is the first update since React yielded. Compute a new start time.\n  currentEventTime = now();\n  return currentEventTime;\n}\n\nexport function getCurrentTime() {\n  return now();\n}\n\nexport function requestUpdateLane(fiber: Fiber): Lane {\n  // Special cases\n  const mode = fiber.mode;\n  if ((mode & ConcurrentMode) === NoMode) {\n    return (SyncLane: Lane);\n  } else if (\n    !deferRenderPhaseUpdateToNextBatch &&\n    (executionContext & RenderContext) !== NoContext &&\n    workInProgressRootRenderLanes !== NoLanes\n  ) {\n    // This is a render phase update. These are not officially supported. The\n    // old behavior is to give this the same \"thread\" (lanes) as\n    // whatever is currently rendering. So if you call `setState` on a component\n    // that happens later in the same render, it will flush. Ideally, we want to\n    // remove the special case and treat them as if they came from an\n    // interleaved event. Regardless, this pattern is not officially supported.\n    // This behavior is only a fallback. The flag only exists until we can roll\n    // out the setState warning, since existing code might accidentally rely on\n    // the current behavior.\n    return pickArbitraryLane(workInProgressRootRenderLanes);\n  }\n\n  const isTransition = requestCurrentTransition() !== NoTransition;\n  if (isTransition) {\n    if (\n      __DEV__ &&\n      warnOnSubscriptionInsideStartTransition &&\n      ReactCurrentBatchConfig._updatedFibers\n    ) {\n      ReactCurrentBatchConfig._updatedFibers.add(fiber);\n    }\n    // The algorithm for assigning an update to a lane should be stable for all\n    // updates at the same priority within the same event. To do this, the\n    // inputs to the algorithm must be the same.\n    //\n    // The trick we use is to cache the first of each of these inputs within an\n    // event. Then reset the cached values once we can be sure the event is\n    // over. Our heuristic for that is whenever we enter a concurrent work loop.\n    if (currentEventTransitionLane === NoLane) {\n      // All transitions within the same event are assigned the same lane.\n      currentEventTransitionLane = claimNextTransitionLane();\n    }\n    return currentEventTransitionLane;\n  }\n\n  // Updates originating inside certain React methods, like flushSync, have\n  // their priority set by tracking it with a context variable.\n  //\n  // The opaque type returned by the host config is internally a lane, so we can\n  // use that directly.\n  // TODO: Move this type conversion to the event priority module.\n  const updateLane: Lane = (getCurrentUpdatePriority(): any);\n  if (updateLane !== NoLane) {\n    return updateLane;\n  }\n\n  // This update originated outside React. Ask the host environment for an\n  // appropriate priority, based on the type of event.\n  //\n  // The opaque type returned by the host config is internally a lane, so we can\n  // use that directly.\n  // TODO: Move this type conversion to the event priority module.\n  const eventLane: Lane = (getCurrentEventPriority(): any);\n  return eventLane;\n}\n\nfunction requestRetryLane(fiber: Fiber) {\n  // This is a fork of `requestUpdateLane` designed specifically for Suspense\n  // \"retries\" — a special update that attempts to flip a Suspense boundary\n  // from its placeholder state to its primary/resolved state.\n\n  // Special cases\n  const mode = fiber.mode;\n  if ((mode & ConcurrentMode) === NoMode) {\n    return (SyncLane: Lane);\n  }\n\n  return claimNextRetryLane();\n}\n\nexport function scheduleUpdateOnFiber(\n  fiber: Fiber,\n  lane: Lane,\n  eventTime: number,\n): FiberRoot | null {\n  checkForNestedUpdates();\n  warnAboutRenderPhaseUpdatesInDEV(fiber);\n\n  const root = markUpdateLaneFromFiberToRoot(fiber, lane);\n  if (root === null) {\n    return null;\n  }\n\n  if (enableUpdaterTracking) {\n    if (isDevToolsPresent) {\n      addFiberToLanesMap(root, fiber, lane);\n    }\n  }\n\n  // Mark that the root has a pending update.\n  markRootUpdated(root, lane, eventTime);\n\n  if (enableProfilerTimer && enableProfilerNestedUpdateScheduledHook) {\n    if (\n      (executionContext & CommitContext) !== NoContext &&\n      root === rootCommittingMutationOrLayoutEffects\n    ) {\n      if (fiber.mode & ProfileMode) {\n        let current = fiber;\n        while (current !== null) {\n          if (current.tag === Profiler) {\n            const {id, onNestedUpdateScheduled} = current.memoizedProps;\n            if (typeof onNestedUpdateScheduled === 'function') {\n              onNestedUpdateScheduled(id);\n            }\n          }\n          current = current.return;\n        }\n      }\n    }\n  }\n\n  // TODO: Consolidate with `isInterleavedUpdate` check\n  if (root === workInProgressRoot) {\n    // Received an update to a tree that's in the middle of rendering. Mark\n    // that there was an interleaved update work on this root. Unless the\n    // `deferRenderPhaseUpdateToNextBatch` flag is off and this is a render\n    // phase update. In that case, we don't treat render phase updates as if\n    // they were interleaved, for backwards compat reasons.\n    if (\n      deferRenderPhaseUpdateToNextBatch ||\n      (executionContext & RenderContext) === NoContext\n    ) {\n      workInProgressRootUpdatedLanes = mergeLanes(\n        workInProgressRootUpdatedLanes,\n        lane,\n      );\n    }\n    if (workInProgressRootExitStatus === RootSuspendedWithDelay) {\n      // The root already suspended with a delay, which means this render\n      // definitely won't finish. Since we have a new update, let's mark it as\n      // suspended now, right before marking the incoming update. This has the\n      // effect of interrupting the current render and switching to the update.\n      // TODO: Make sure this doesn't override pings that happen while we've\n      // already started rendering.\n      markRootSuspended(root, workInProgressRootRenderLanes);\n    }\n  }\n\n  ensureRootIsScheduled(root, eventTime);\n  if (\n    lane === SyncLane &&\n    executionContext === NoContext &&\n    (fiber.mode & ConcurrentMode) === NoMode &&\n    // Treat `act` as if it's inside `batchedUpdates`, even in legacy mode.\n    !(__DEV__ && ReactCurrentActQueue.isBatchingLegacy)\n  ) {\n    // Flush the synchronous work now, unless we're already working or inside\n    // a batch. This is intentionally inside scheduleUpdateOnFiber instead of\n    // scheduleCallbackForFiber to preserve the ability to schedule a callback\n    // without immediately flushing it. We only do this for user-initiated\n    // updates, to preserve historical behavior of legacy mode.\n    resetRenderTimer();\n    flushSyncCallbacksOnlyInLegacyMode();\n  }\n\n  return root;\n}\n\n// This is split into a separate function so we can mark a fiber with pending\n// work without treating it as a typical update that originates from an event;\n// e.g. retrying a Suspense boundary isn't an update, but it does schedule work\n// on a fiber.\nfunction markUpdateLaneFromFiberToRoot(\n  sourceFiber: Fiber,\n  lane: Lane,\n): FiberRoot | null {\n  // Update the source fiber's lanes\n  sourceFiber.lanes = mergeLanes(sourceFiber.lanes, lane);\n  let alternate = sourceFiber.alternate;\n  if (alternate !== null) {\n    alternate.lanes = mergeLanes(alternate.lanes, lane);\n  }\n  if (__DEV__) {\n    if (\n      alternate === null &&\n      (sourceFiber.flags & (Placement | Hydrating)) !== NoFlags\n    ) {\n      warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);\n    }\n  }\n  // Walk the parent path to the root and update the child lanes.\n  let node = sourceFiber;\n  let parent = sourceFiber.return;\n  while (parent !== null) {\n    parent.childLanes = mergeLanes(parent.childLanes, lane);\n    alternate = parent.alternate;\n    if (alternate !== null) {\n      alternate.childLanes = mergeLanes(alternate.childLanes, lane);\n    } else {\n      if (__DEV__) {\n        if ((parent.flags & (Placement | Hydrating)) !== NoFlags) {\n          warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);\n        }\n      }\n    }\n    node = parent;\n    parent = parent.return;\n  }\n  if (node.tag === HostRoot) {\n    const root: FiberRoot = node.stateNode;\n    return root;\n  } else {\n    return null;\n  }\n}\n\nexport function isInterleavedUpdate(fiber: Fiber, lane: Lane) {\n  return (\n    // TODO: Optimize slightly by comparing to root that fiber belongs to.\n    // Requires some refactoring. Not a big deal though since it's rare for\n    // concurrent apps to have more than a single root.\n    workInProgressRoot !== null &&\n    (fiber.mode & ConcurrentMode) !== NoMode &&\n    // If this is a render phase update (i.e. UNSAFE_componentWillReceiveProps),\n    // then don't treat this as an interleaved update. This pattern is\n    // accompanied by a warning but we haven't fully deprecated it yet. We can\n    // remove once the deferRenderPhaseUpdateToNextBatch flag is enabled.\n    (deferRenderPhaseUpdateToNextBatch ||\n      (executionContext & RenderContext) === NoContext)\n  );\n}\n\n// Use this function to schedule a task for a root. There's only one task per\n// root; if a task was already scheduled, we'll check to make sure the priority\n// of the existing task is the same as the priority of the next level that the\n// root has work on. This function is called on every update, and right before\n// exiting a task.\nfunction ensureRootIsScheduled(root: FiberRoot, currentTime: number) {\n  const existingCallbackNode = root.callbackNode;\n\n  // Check if any lanes are being starved by other work. If so, mark them as\n  // expired so we know to work on those next.\n  markStarvedLanesAsExpired(root, currentTime);\n\n  // Determine the next lanes to work on, and their priority.\n  const nextLanes = getNextLanes(\n    root,\n    root === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes,\n  );\n\n  if (nextLanes === NoLanes) {\n    // Special case: There's nothing to work on.\n    if (existingCallbackNode !== null) {\n      cancelCallback(existingCallbackNode);\n    }\n    root.callbackNode = null;\n    root.callbackPriority = NoLane;\n    return;\n  }\n\n  // We use the highest priority lane to represent the priority of the callback.\n  const newCallbackPriority = getHighestPriorityLane(nextLanes);\n\n  // Check if there's an existing task. We may be able to reuse it.\n  const existingCallbackPriority = root.callbackPriority;\n  if (\n    existingCallbackPriority === newCallbackPriority &&\n    // Special case related to `act`. If the currently scheduled task is a\n    // Scheduler task, rather than an `act` task, cancel it and re-scheduled\n    // on the `act` queue.\n    !(\n      __DEV__ &&\n      ReactCurrentActQueue.current !== null &&\n      existingCallbackNode !== fakeActCallbackNode\n    )\n  ) {\n    if (__DEV__) {\n      // If we're going to re-use an existing task, it needs to exist.\n      // Assume that discrete update microtasks are non-cancellable and null.\n      // TODO: Temporary until we confirm this warning is not fired.\n      if (\n        existingCallbackNode == null &&\n        existingCallbackPriority !== SyncLane\n      ) {\n        console.error(\n          'Expected scheduled callback to exist. This error is likely caused by a bug in React. Please file an issue.',\n        );\n      }\n    }\n    // The priority hasn't changed. We can reuse the existing task. Exit.\n    return;\n  }\n\n  if (existingCallbackNode != null) {\n    // Cancel the existing callback. We'll schedule a new one below.\n    cancelCallback(existingCallbackNode);\n  }\n\n  // Schedule a new callback.\n  let newCallbackNode;\n  if (newCallbackPriority === SyncLane) {\n    // Special case: Sync React callbacks are scheduled on a special\n    // internal queue\n    if (root.tag === LegacyRoot) {\n      if (__DEV__ && ReactCurrentActQueue.isBatchingLegacy !== null) {\n        ReactCurrentActQueue.didScheduleLegacyUpdate = true;\n      }\n      scheduleLegacySyncCallback(performSyncWorkOnRoot.bind(null, root));\n    } else {\n      scheduleSyncCallback(performSyncWorkOnRoot.bind(null, root));\n    }\n    if (supportsMicrotasks) {\n      // Flush the queue in a microtask.\n      if (__DEV__ && ReactCurrentActQueue.current !== null) {\n        // Inside `act`, use our internal `act` queue so that these get flushed\n        // at the end of the current scope even when using the sync version\n        // of `act`.\n        ReactCurrentActQueue.current.push(flushSyncCallbacks);\n      } else {\n        scheduleMicrotask(flushSyncCallbacks);\n      }\n    } else {\n      // Flush the queue in an Immediate task.\n      scheduleCallback(ImmediateSchedulerPriority, flushSyncCallbacks);\n    }\n    newCallbackNode = null;\n  } else {\n    let schedulerPriorityLevel;\n    switch (lanesToEventPriority(nextLanes)) {\n      case DiscreteEventPriority:\n        schedulerPriorityLevel = ImmediateSchedulerPriority;\n        break;\n      case ContinuousEventPriority:\n        schedulerPriorityLevel = UserBlockingSchedulerPriority;\n        break;\n      case DefaultEventPriority:\n        schedulerPriorityLevel = NormalSchedulerPriority;\n        break;\n      case IdleEventPriority:\n        schedulerPriorityLevel = IdleSchedulerPriority;\n        break;\n      default:\n        schedulerPriorityLevel = NormalSchedulerPriority;\n        break;\n    }\n    newCallbackNode = scheduleCallback(\n      schedulerPriorityLevel,\n      performConcurrentWorkOnRoot.bind(null, root),\n    );\n  }\n\n  root.callbackPriority = newCallbackPriority;\n  root.callbackNode = newCallbackNode;\n}\n\n// This is the entry point for every concurrent task, i.e. anything that\n// goes through Scheduler.\nfunction performConcurrentWorkOnRoot(root, didTimeout) {\n  if (enableProfilerTimer && enableProfilerNestedUpdatePhase) {\n    resetNestedUpdateFlag();\n  }\n\n  // Since we know we're in a React event, we can clear the current\n  // event time. The next update will compute a new event time.\n  currentEventTime = NoTimestamp;\n  currentEventTransitionLane = NoLanes;\n\n  invariant(\n    (executionContext & (RenderContext | CommitContext)) === NoContext,\n    'Should not already be working.',\n  );\n\n  // Flush any pending passive effects before deciding which lanes to work on,\n  // in case they schedule additional work.\n  const originalCallbackNode = root.callbackNode;\n  const didFlushPassiveEffects = flushPassiveEffects();\n  if (didFlushPassiveEffects) {\n    // Something in the passive effect phase may have canceled the current task.\n    // Check if the task node for this root was changed.\n    if (root.callbackNode !== originalCallbackNode) {\n      // The current task was canceled. Exit. We don't need to call\n      // `ensureRootIsScheduled` because the check above implies either that\n      // there's a new task, or that there's no remaining work on this root.\n      return null;\n    } else {\n      // Current task was not canceled. Continue.\n    }\n  }\n\n  // Determine the next lanes to work on, using the fields stored\n  // on the root.\n  let lanes = getNextLanes(\n    root,\n    root === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes,\n  );\n  if (lanes === NoLanes) {\n    // Defensive coding. This is never expected to happen.\n    return null;\n  }\n\n  // We disable time-slicing in some cases: if the work has been CPU-bound\n  // for too long (\"expired\" work, to prevent starvation), or we're in\n  // sync-updates-by-default mode.\n  // TODO: We only check `didTimeout` defensively, to account for a Scheduler\n  // bug we're still investigating. Once the bug in Scheduler is fixed,\n  // we can remove this, since we track expiration ourselves.\n  let exitStatus =\n    shouldTimeSlice(root, lanes) &&\n    (disableSchedulerTimeoutInWorkLoop || !didTimeout)\n      ? renderRootConcurrent(root, lanes)\n      : renderRootSync(root, lanes);\n  if (exitStatus !== RootIncomplete) {\n    if (exitStatus === RootErrored) {\n      const prevExecutionContext = executionContext;\n      executionContext |= RetryAfterError;\n\n      // If an error occurred during hydration,\n      // discard server response and fall back to client side render.\n      if (root.hydrate) {\n        root.hydrate = false;\n        if (__DEV__) {\n          errorHydratingContainer(root.containerInfo);\n        }\n        clearContainer(root.containerInfo);\n      }\n\n      // If something threw an error, try rendering one more time. We'll render\n      // synchronously to block concurrent data mutations, and we'll includes\n      // all pending updates are included. If it still fails after the second\n      // attempt, we'll give up and commit the resulting tree.\n      const errorRetryLanes = getLanesToRetrySynchronouslyOnError(root);\n      if (errorRetryLanes !== NoLanes) {\n        lanes = errorRetryLanes;\n        exitStatus = renderRootSync(root, errorRetryLanes);\n      }\n\n      executionContext = prevExecutionContext;\n    }\n\n    if (exitStatus === RootFatalErrored) {\n      const fatalError = workInProgressRootFatalError;\n      prepareFreshStack(root, NoLanes);\n      markRootSuspended(root, lanes);\n      ensureRootIsScheduled(root, now());\n      throw fatalError;\n    }\n\n    // We now have a consistent tree. The next step is either to commit it,\n    // or, if something suspended, wait to commit it after a timeout.\n    const finishedWork: Fiber = (root.current.alternate: any);\n    root.finishedWork = finishedWork;\n    root.finishedLanes = lanes;\n    finishConcurrentRender(root, exitStatus, lanes);\n  }\n\n  ensureRootIsScheduled(root, now());\n  if (root.callbackNode === originalCallbackNode) {\n    // The task node scheduled for this root is the same one that's\n    // currently executed. Need to return a continuation.\n    return performConcurrentWorkOnRoot.bind(null, root);\n  }\n  return null;\n}\n\nfunction finishConcurrentRender(root, exitStatus, lanes) {\n  switch (exitStatus) {\n    case RootIncomplete:\n    case RootFatalErrored: {\n      invariant(false, 'Root did not complete. This is a bug in React.');\n    }\n    // Flow knows about invariant, so it complains if I add a break\n    // statement, but eslint doesn't know about invariant, so it complains\n    // if I do. eslint-disable-next-line no-fallthrough\n    case RootErrored: {\n      // We should have already attempted to retry this tree. If we reached\n      // this point, it errored again. Commit it.\n      commitRoot(root);\n      break;\n    }\n    case RootSuspended: {\n      markRootSuspended(root, lanes);\n\n      // We have an acceptable loading state. We need to figure out if we\n      // should immediately commit it or wait a bit.\n\n      if (\n        includesOnlyRetries(lanes) &&\n        // do not delay if we're inside an act() scope\n        !shouldForceFlushFallbacksInDEV()\n      ) {\n        // This render only included retries, no updates. Throttle committing\n        // retries so that we don't show too many loading states too quickly.\n        const msUntilTimeout =\n          globalMostRecentFallbackTime + FALLBACK_THROTTLE_MS - now();\n        // Don't bother with a very short suspense time.\n        if (msUntilTimeout > 10) {\n          const nextLanes = getNextLanes(root, NoLanes);\n          if (nextLanes !== NoLanes) {\n            // There's additional work on this root.\n            break;\n          }\n          const suspendedLanes = root.suspendedLanes;\n          if (!isSubsetOfLanes(suspendedLanes, lanes)) {\n            // We should prefer to render the fallback of at the last\n            // suspended level. Ping the last suspended level to try\n            // rendering it again.\n            // FIXME: What if the suspended lanes are Idle? Should not restart.\n            const eventTime = requestEventTime();\n            markRootPinged(root, suspendedLanes, eventTime);\n            break;\n          }\n\n          // The render is suspended, it hasn't timed out, and there's no\n          // lower priority work to do. Instead of committing the fallback\n          // immediately, wait for more data to arrive.\n          root.timeoutHandle = scheduleTimeout(\n            commitRoot.bind(null, root),\n            msUntilTimeout,\n          );\n          break;\n        }\n      }\n      // The work expired. Commit immediately.\n      commitRoot(root);\n      break;\n    }\n    case RootSuspendedWithDelay: {\n      markRootSuspended(root, lanes);\n\n      if (includesOnlyTransitions(lanes)) {\n        // This is a transition, so we should exit without committing a\n        // placeholder and without scheduling a timeout. Delay indefinitely\n        // until we receive more data.\n        break;\n      }\n\n      if (!shouldForceFlushFallbacksInDEV()) {\n        // This is not a transition, but we did trigger an avoided state.\n        // Schedule a placeholder to display after a short delay, using the Just\n        // Noticeable Difference.\n        // TODO: Is the JND optimization worth the added complexity? If this is\n        // the only reason we track the event time, then probably not.\n        // Consider removing.\n\n        const mostRecentEventTime = getMostRecentEventTime(root, lanes);\n        const eventTimeMs = mostRecentEventTime;\n        const timeElapsedMs = now() - eventTimeMs;\n        const msUntilTimeout = jnd(timeElapsedMs) - timeElapsedMs;\n\n        // Don't bother with a very short suspense time.\n        if (msUntilTimeout > 10) {\n          // Instead of committing the fallback immediately, wait for more data\n          // to arrive.\n          root.timeoutHandle = scheduleTimeout(\n            commitRoot.bind(null, root),\n            msUntilTimeout,\n          );\n          break;\n        }\n      }\n\n      // Commit the placeholder.\n      commitRoot(root);\n      break;\n    }\n    case RootCompleted: {\n      // The work completed. Ready to commit.\n      commitRoot(root);\n      break;\n    }\n    default: {\n      invariant(false, 'Unknown root exit status.');\n    }\n  }\n}\n\nfunction markRootSuspended(root, suspendedLanes) {\n  // When suspending, we should always exclude lanes that were pinged or (more\n  // rarely, since we try to avoid it) updated during the render phase.\n  // TODO: Lol maybe there's a better way to factor this besides this\n  // obnoxiously named function :)\n  suspendedLanes = removeLanes(suspendedLanes, workInProgressRootPingedLanes);\n  suspendedLanes = removeLanes(suspendedLanes, workInProgressRootUpdatedLanes);\n  markRootSuspended_dontCallThisOneDirectly(root, suspendedLanes);\n}\n\n// This is the entry point for synchronous tasks that don't go\n// through Scheduler\nfunction performSyncWorkOnRoot(root) {\n  if (enableProfilerTimer && enableProfilerNestedUpdatePhase) {\n    syncNestedUpdateFlag();\n  }\n\n  invariant(\n    (executionContext & (RenderContext | CommitContext)) === NoContext,\n    'Should not already be working.',\n  );\n\n  flushPassiveEffects();\n\n  let lanes = getNextLanes(root, NoLanes);\n  if (!includesSomeLane(lanes, SyncLane)) {\n    // There's no remaining sync work left.\n    ensureRootIsScheduled(root, now());\n    return null;\n  }\n\n  let exitStatus = renderRootSync(root, lanes);\n  if (root.tag !== LegacyRoot && exitStatus === RootErrored) {\n    const prevExecutionContext = executionContext;\n    executionContext |= RetryAfterError;\n\n    // If an error occurred during hydration,\n    // discard server response and fall back to client side render.\n    if (root.hydrate) {\n      root.hydrate = false;\n      if (__DEV__) {\n        errorHydratingContainer(root.containerInfo);\n      }\n      clearContainer(root.containerInfo);\n    }\n\n    // If something threw an error, try rendering one more time. We'll render\n    // synchronously to block concurrent data mutations, and we'll includes\n    // all pending updates are included. If it still fails after the second\n    // attempt, we'll give up and commit the resulting tree.\n    const errorRetryLanes = getLanesToRetrySynchronouslyOnError(root);\n    if (errorRetryLanes !== NoLanes) {\n      lanes = errorRetryLanes;\n      exitStatus = renderRootSync(root, lanes);\n    }\n\n    executionContext = prevExecutionContext;\n  }\n\n  if (exitStatus === RootFatalErrored) {\n    const fatalError = workInProgressRootFatalError;\n    prepareFreshStack(root, NoLanes);\n    markRootSuspended(root, lanes);\n    ensureRootIsScheduled(root, now());\n    throw fatalError;\n  }\n\n  // We now have a consistent tree. Because this is a sync render, we\n  // will commit it even if something suspended.\n  const finishedWork: Fiber = (root.current.alternate: any);\n  root.finishedWork = finishedWork;\n  root.finishedLanes = lanes;\n  commitRoot(root);\n\n  // Before exiting, make sure there's a callback scheduled for the next\n  // pending level.\n  ensureRootIsScheduled(root, now());\n\n  return null;\n}\n\nexport function flushRoot(root: FiberRoot, lanes: Lanes) {\n  if (lanes !== NoLanes) {\n    markRootEntangled(root, mergeLanes(lanes, SyncLane));\n    ensureRootIsScheduled(root, now());\n    if ((executionContext & (RenderContext | CommitContext)) === NoContext) {\n      resetRenderTimer();\n      flushSyncCallbacks();\n    }\n  }\n}\n\nexport function getExecutionContext(): ExecutionContext {\n  return executionContext;\n}\n\nexport function deferredUpdates<A>(fn: () => A): A {\n  const previousPriority = getCurrentUpdatePriority();\n  const prevTransition = ReactCurrentBatchConfig.transition;\n  try {\n    ReactCurrentBatchConfig.transition = 0;\n    setCurrentUpdatePriority(DefaultEventPriority);\n    return fn();\n  } finally {\n    setCurrentUpdatePriority(previousPriority);\n    ReactCurrentBatchConfig.transition = prevTransition;\n  }\n}\n\nexport function batchedUpdates<A, R>(fn: A => R, a: A): R {\n  const prevExecutionContext = executionContext;\n  executionContext |= BatchedContext;\n  try {\n    return fn(a);\n  } finally {\n    executionContext = prevExecutionContext;\n    // If there were legacy sync updates, flush them at the end of the outer\n    // most batchedUpdates-like method.\n    if (\n      executionContext === NoContext &&\n      // Treat `act` as if it's inside `batchedUpdates`, even in legacy mode.\n      !(__DEV__ && ReactCurrentActQueue.isBatchingLegacy)\n    ) {\n      resetRenderTimer();\n      flushSyncCallbacksOnlyInLegacyMode();\n    }\n  }\n}\n\nexport function discreteUpdates<A, B, C, D, R>(\n  fn: (A, B, C, D) => R,\n  a: A,\n  b: B,\n  c: C,\n  d: D,\n): R {\n  const previousPriority = getCurrentUpdatePriority();\n  const prevTransition = ReactCurrentBatchConfig.transition;\n  try {\n    ReactCurrentBatchConfig.transition = 0;\n    setCurrentUpdatePriority(DiscreteEventPriority);\n    return fn(a, b, c, d);\n  } finally {\n    setCurrentUpdatePriority(previousPriority);\n    ReactCurrentBatchConfig.transition = prevTransition;\n    if (executionContext === NoContext) {\n      resetRenderTimer();\n    }\n  }\n}\n\n// Overload the definition to the two valid signatures.\n// Warning, this opts-out of checking the function body.\ndeclare function flushSyncWithoutWarningIfAlreadyRendering<R>(fn: () => R): R;\n// eslint-disable-next-line no-redeclare\ndeclare function flushSyncWithoutWarningIfAlreadyRendering(): void;\n// eslint-disable-next-line no-redeclare\nexport function flushSyncWithoutWarningIfAlreadyRendering(fn) {\n  // In legacy mode, we flush pending passive effects at the beginning of the\n  // next event, not at the end of the previous one.\n  if (\n    rootWithPendingPassiveEffects !== null &&\n    rootWithPendingPassiveEffects.tag === LegacyRoot &&\n    (executionContext & (RenderContext | CommitContext)) === NoContext\n  ) {\n    flushPassiveEffects();\n  }\n\n  const prevExecutionContext = executionContext;\n  executionContext |= BatchedContext;\n\n  const prevTransition = ReactCurrentBatchConfig.transition;\n  const previousPriority = getCurrentUpdatePriority();\n  try {\n    ReactCurrentBatchConfig.transition = 0;\n    setCurrentUpdatePriority(DiscreteEventPriority);\n    if (fn) {\n      return fn();\n    } else {\n      return undefined;\n    }\n  } finally {\n    setCurrentUpdatePriority(previousPriority);\n    ReactCurrentBatchConfig.transition = prevTransition;\n    executionContext = prevExecutionContext;\n    // Flush the immediate callbacks that were scheduled during this batch.\n    // Note that this will happen even if batchedUpdates is higher up\n    // the stack.\n    if ((executionContext & (RenderContext | CommitContext)) === NoContext) {\n      flushSyncCallbacks();\n    }\n  }\n}\n\n// Overload the definition to the two valid signatures.\n// Warning, this opts-out of checking the function body.\ndeclare function flushSync<R>(fn: () => R): R;\n// eslint-disable-next-line no-redeclare\ndeclare function flushSync(): void;\n// eslint-disable-next-line no-redeclare\nexport function flushSync(fn) {\n  if (__DEV__) {\n    if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {\n      console.error(\n        'flushSync was called from inside a lifecycle method. React cannot ' +\n          'flush when React is already rendering. Consider moving this call to ' +\n          'a scheduler task or micro task.',\n      );\n    }\n  }\n  return flushSyncWithoutWarningIfAlreadyRendering(fn);\n}\n\nexport function flushControlled(fn: () => mixed): void {\n  const prevExecutionContext = executionContext;\n  executionContext |= BatchedContext;\n  const prevTransition = ReactCurrentBatchConfig.transition;\n  const previousPriority = getCurrentUpdatePriority();\n  try {\n    ReactCurrentBatchConfig.transition = 0;\n    setCurrentUpdatePriority(DiscreteEventPriority);\n    fn();\n  } finally {\n    setCurrentUpdatePriority(previousPriority);\n    ReactCurrentBatchConfig.transition = prevTransition;\n\n    executionContext = prevExecutionContext;\n    if (executionContext === NoContext) {\n      // Flush the immediate callbacks that were scheduled during this batch\n      resetRenderTimer();\n      flushSyncCallbacks();\n    }\n  }\n}\n\nexport function pushRenderLanes(fiber: Fiber, lanes: Lanes) {\n  pushToStack(subtreeRenderLanesCursor, subtreeRenderLanes, fiber);\n  subtreeRenderLanes = mergeLanes(subtreeRenderLanes, lanes);\n  workInProgressRootIncludedLanes = mergeLanes(\n    workInProgressRootIncludedLanes,\n    lanes,\n  );\n}\n\nexport function popRenderLanes(fiber: Fiber) {\n  subtreeRenderLanes = subtreeRenderLanesCursor.current;\n  popFromStack(subtreeRenderLanesCursor, fiber);\n}\n\nfunction prepareFreshStack(root: FiberRoot, lanes: Lanes) {\n  root.finishedWork = null;\n  root.finishedLanes = NoLanes;\n\n  const timeoutHandle = root.timeoutHandle;\n  if (timeoutHandle !== noTimeout) {\n    // The root previous suspended and scheduled a timeout to commit a fallback\n    // state. Now that we have additional work, cancel the timeout.\n    root.timeoutHandle = noTimeout;\n    // $FlowFixMe Complains noTimeout is not a TimeoutID, despite the check above\n    cancelTimeout(timeoutHandle);\n  }\n\n  if (workInProgress !== null) {\n    let interruptedWork = workInProgress.return;\n    while (interruptedWork !== null) {\n      unwindInterruptedWork(interruptedWork, workInProgressRootRenderLanes);\n      interruptedWork = interruptedWork.return;\n    }\n  }\n  workInProgressRoot = root;\n  workInProgress = createWorkInProgress(root.current, null);\n  workInProgressRootRenderLanes = subtreeRenderLanes = workInProgressRootIncludedLanes = lanes;\n  workInProgressRootExitStatus = RootIncomplete;\n  workInProgressRootFatalError = null;\n  workInProgressRootSkippedLanes = NoLanes;\n  workInProgressRootUpdatedLanes = NoLanes;\n  workInProgressRootPingedLanes = NoLanes;\n\n  enqueueInterleavedUpdates();\n\n  if (__DEV__) {\n    ReactStrictModeWarnings.discardPendingWarnings();\n  }\n}\n\nfunction handleError(root, thrownValue): void {\n  do {\n    let erroredWork = workInProgress;\n    try {\n      // Reset module-level state that was set during the render phase.\n      resetContextDependencies();\n      resetHooksAfterThrow();\n      resetCurrentDebugFiberInDEV();\n      // TODO: I found and added this missing line while investigating a\n      // separate issue. Write a regression test using string refs.\n      ReactCurrentOwner.current = null;\n\n      if (erroredWork === null || erroredWork.return === null) {\n        // Expected to be working on a non-root fiber. This is a fatal error\n        // because there's no ancestor that can handle it; the root is\n        // supposed to capture all errors that weren't caught by an error\n        // boundary.\n        workInProgressRootExitStatus = RootFatalErrored;\n        workInProgressRootFatalError = thrownValue;\n        // Set `workInProgress` to null. This represents advancing to the next\n        // sibling, or the parent if there are no siblings. But since the root\n        // has no siblings nor a parent, we set it to null. Usually this is\n        // handled by `completeUnitOfWork` or `unwindWork`, but since we're\n        // intentionally not calling those, we need set it here.\n        // TODO: Consider calling `unwindWork` to pop the contexts.\n        workInProgress = null;\n        return;\n      }\n\n      if (enableProfilerTimer && erroredWork.mode & ProfileMode) {\n        // Record the time spent rendering before an error was thrown. This\n        // avoids inaccurate Profiler durations in the case of a\n        // suspended render.\n        stopProfilerTimerIfRunningAndRecordDelta(erroredWork, true);\n      }\n\n      throwException(\n        root,\n        erroredWork.return,\n        erroredWork,\n        thrownValue,\n        workInProgressRootRenderLanes,\n      );\n      completeUnitOfWork(erroredWork);\n    } catch (yetAnotherThrownValue) {\n      // Something in the return path also threw.\n      thrownValue = yetAnotherThrownValue;\n      if (workInProgress === erroredWork && erroredWork !== null) {\n        // If this boundary has already errored, then we had trouble processing\n        // the error. Bubble it to the next boundary.\n        erroredWork = erroredWork.return;\n        workInProgress = erroredWork;\n      } else {\n        erroredWork = workInProgress;\n      }\n      continue;\n    }\n    // Return to the normal work loop.\n    return;\n  } while (true);\n}\n\nfunction pushDispatcher() {\n  const prevDispatcher = ReactCurrentDispatcher.current;\n  ReactCurrentDispatcher.current = ContextOnlyDispatcher;\n  if (prevDispatcher === null) {\n    // The React isomorphic package does not include a default dispatcher.\n    // Instead the first renderer will lazily attach one, in order to give\n    // nicer error messages.\n    return ContextOnlyDispatcher;\n  } else {\n    return prevDispatcher;\n  }\n}\n\nfunction popDispatcher(prevDispatcher) {\n  ReactCurrentDispatcher.current = prevDispatcher;\n}\n\nexport function markCommitTimeOfFallback() {\n  globalMostRecentFallbackTime = now();\n}\n\nexport function markSkippedUpdateLanes(lane: Lane | Lanes): void {\n  workInProgressRootSkippedLanes = mergeLanes(\n    lane,\n    workInProgressRootSkippedLanes,\n  );\n}\n\nexport function renderDidSuspend(): void {\n  if (workInProgressRootExitStatus === RootIncomplete) {\n    workInProgressRootExitStatus = RootSuspended;\n  }\n}\n\nexport function renderDidSuspendDelayIfPossible(): void {\n  if (\n    workInProgressRootExitStatus === RootIncomplete ||\n    workInProgressRootExitStatus === RootSuspended\n  ) {\n    workInProgressRootExitStatus = RootSuspendedWithDelay;\n  }\n\n  // Check if there are updates that we skipped tree that might have unblocked\n  // this render.\n  if (\n    workInProgressRoot !== null &&\n    (includesNonIdleWork(workInProgressRootSkippedLanes) ||\n      includesNonIdleWork(workInProgressRootUpdatedLanes))\n  ) {\n    // Mark the current render as suspended so that we switch to working on\n    // the updates that were skipped. Usually we only suspend at the end of\n    // the render phase.\n    // TODO: We should probably always mark the root as suspended immediately\n    // (inside this function), since by suspending at the end of the render\n    // phase introduces a potential mistake where we suspend lanes that were\n    // pinged or updated while we were rendering.\n    markRootSuspended(workInProgressRoot, workInProgressRootRenderLanes);\n  }\n}\n\nexport function renderDidError() {\n  if (workInProgressRootExitStatus !== RootCompleted) {\n    workInProgressRootExitStatus = RootErrored;\n  }\n}\n\n// Called during render to determine if anything has suspended.\n// Returns false if we're not sure.\nexport function renderHasNotSuspendedYet(): boolean {\n  // If something errored or completed, we can't really be sure,\n  // so those are false.\n  return workInProgressRootExitStatus === RootIncomplete;\n}\n\nfunction renderRootSync(root: FiberRoot, lanes: Lanes) {\n  const prevExecutionContext = executionContext;\n  executionContext |= RenderContext;\n  const prevDispatcher = pushDispatcher();\n\n  // If the root or lanes have changed, throw out the existing stack\n  // and prepare a fresh one. Otherwise we'll continue where we left off.\n  if (workInProgressRoot !== root || workInProgressRootRenderLanes !== lanes) {\n    if (enableUpdaterTracking) {\n      if (isDevToolsPresent) {\n        const memoizedUpdaters = root.memoizedUpdaters;\n        if (memoizedUpdaters.size > 0) {\n          restorePendingUpdaters(root, workInProgressRootRenderLanes);\n          memoizedUpdaters.clear();\n        }\n\n        // At this point, move Fibers that scheduled the upcoming work from the Map to the Set.\n        // If we bailout on this work, we'll move them back (like above).\n        // It's important to move them now in case the work spawns more work at the same priority with different updaters.\n        // That way we can keep the current update and future updates separate.\n        movePendingFibersToMemoized(root, lanes);\n      }\n    }\n\n    prepareFreshStack(root, lanes);\n  }\n\n  if (__DEV__) {\n    if (enableDebugTracing) {\n      logRenderStarted(lanes);\n    }\n  }\n\n  if (enableSchedulingProfiler) {\n    markRenderStarted(lanes);\n  }\n\n  do {\n    try {\n      workLoopSync();\n      break;\n    } catch (thrownValue) {\n      handleError(root, thrownValue);\n    }\n  } while (true);\n  resetContextDependencies();\n\n  executionContext = prevExecutionContext;\n  popDispatcher(prevDispatcher);\n\n  if (workInProgress !== null) {\n    // This is a sync render, so we should have finished the whole tree.\n    invariant(\n      false,\n      'Cannot commit an incomplete root. This error is likely caused by a ' +\n        'bug in React. Please file an issue.',\n    );\n  }\n\n  if (__DEV__) {\n    if (enableDebugTracing) {\n      logRenderStopped();\n    }\n  }\n\n  if (enableSchedulingProfiler) {\n    markRenderStopped();\n  }\n\n  // Set this to null to indicate there's no in-progress render.\n  workInProgressRoot = null;\n  workInProgressRootRenderLanes = NoLanes;\n\n  return workInProgressRootExitStatus;\n}\n\n// The work loop is an extremely hot path. Tell Closure not to inline it.\n/** @noinline */\nfunction workLoopSync() {\n  // Already timed out, so perform work without checking if we need to yield.\n  while (workInProgress !== null) {\n    performUnitOfWork(workInProgress);\n  }\n}\n\nfunction renderRootConcurrent(root: FiberRoot, lanes: Lanes) {\n  const prevExecutionContext = executionContext;\n  executionContext |= RenderContext;\n  const prevDispatcher = pushDispatcher();\n\n  // If the root or lanes have changed, throw out the existing stack\n  // and prepare a fresh one. Otherwise we'll continue where we left off.\n  if (workInProgressRoot !== root || workInProgressRootRenderLanes !== lanes) {\n    if (enableUpdaterTracking) {\n      if (isDevToolsPresent) {\n        const memoizedUpdaters = root.memoizedUpdaters;\n        if (memoizedUpdaters.size > 0) {\n          restorePendingUpdaters(root, workInProgressRootRenderLanes);\n          memoizedUpdaters.clear();\n        }\n\n        // At this point, move Fibers that scheduled the upcoming work from the Map to the Set.\n        // If we bailout on this work, we'll move them back (like above).\n        // It's important to move them now in case the work spawns more work at the same priority with different updaters.\n        // That way we can keep the current update and future updates separate.\n        movePendingFibersToMemoized(root, lanes);\n      }\n    }\n\n    resetRenderTimer();\n    prepareFreshStack(root, lanes);\n  }\n\n  if (__DEV__) {\n    if (enableDebugTracing) {\n      logRenderStarted(lanes);\n    }\n  }\n\n  if (enableSchedulingProfiler) {\n    markRenderStarted(lanes);\n  }\n\n  do {\n    try {\n      workLoopConcurrent();\n      break;\n    } catch (thrownValue) {\n      handleError(root, thrownValue);\n    }\n  } while (true);\n  resetContextDependencies();\n\n  popDispatcher(prevDispatcher);\n  executionContext = prevExecutionContext;\n\n  if (__DEV__) {\n    if (enableDebugTracing) {\n      logRenderStopped();\n    }\n  }\n\n  // Check if the tree has completed.\n  if (workInProgress !== null) {\n    // Still work remaining.\n    if (enableSchedulingProfiler) {\n      markRenderYielded();\n    }\n    return RootIncomplete;\n  } else {\n    // Completed the tree.\n    if (enableSchedulingProfiler) {\n      markRenderStopped();\n    }\n\n    // Set this to null to indicate there's no in-progress render.\n    workInProgressRoot = null;\n    workInProgressRootRenderLanes = NoLanes;\n\n    // Return the final exit status.\n    return workInProgressRootExitStatus;\n  }\n}\n\n/** @noinline */\nfunction workLoopConcurrent() {\n  // Perform work until Scheduler asks us to yield\n  while (workInProgress !== null && !shouldYield()) {\n    performUnitOfWork(workInProgress);\n  }\n}\n\nfunction performUnitOfWork(unitOfWork: Fiber): void {\n  // The current, flushed, state of this fiber is the alternate. Ideally\n  // nothing should rely on this, but relying on it here means that we don't\n  // need an additional field on the work in progress.\n  const current = unitOfWork.alternate;\n  setCurrentDebugFiberInDEV(unitOfWork);\n\n  let next;\n  if (enableProfilerTimer && (unitOfWork.mode & ProfileMode) !== NoMode) {\n    startProfilerTimer(unitOfWork);\n    next = beginWork(current, unitOfWork, subtreeRenderLanes);\n    stopProfilerTimerIfRunningAndRecordDelta(unitOfWork, true);\n  } else {\n    next = beginWork(current, unitOfWork, subtreeRenderLanes);\n  }\n\n  resetCurrentDebugFiberInDEV();\n  unitOfWork.memoizedProps = unitOfWork.pendingProps;\n  if (next === null) {\n    // If this doesn't spawn new work, complete the current work.\n    completeUnitOfWork(unitOfWork);\n  } else {\n    workInProgress = next;\n  }\n\n  ReactCurrentOwner.current = null;\n}\n\nfunction completeUnitOfWork(unitOfWork: Fiber): void {\n  // Attempt to complete the current unit of work, then move to the next\n  // sibling. If there are no more siblings, return to the parent fiber.\n  let completedWork = unitOfWork;\n  do {\n    // The current, flushed, state of this fiber is the alternate. Ideally\n    // nothing should rely on this, but relying on it here means that we don't\n    // need an additional field on the work in progress.\n    const current = completedWork.alternate;\n    const returnFiber = completedWork.return;\n\n    // Check if the work completed or if something threw.\n    if ((completedWork.flags & Incomplete) === NoFlags) {\n      setCurrentDebugFiberInDEV(completedWork);\n      let next;\n      if (\n        !enableProfilerTimer ||\n        (completedWork.mode & ProfileMode) === NoMode\n      ) {\n        next = completeWork(current, completedWork, subtreeRenderLanes);\n      } else {\n        startProfilerTimer(completedWork);\n        next = completeWork(current, completedWork, subtreeRenderLanes);\n        // Update render duration assuming we didn't error.\n        stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);\n      }\n      resetCurrentDebugFiberInDEV();\n\n      if (next !== null) {\n        // Completing this fiber spawned new work. Work on that next.\n        workInProgress = next;\n        return;\n      }\n    } else {\n      // This fiber did not complete because something threw. Pop values off\n      // the stack without entering the complete phase. If this is a boundary,\n      // capture values if possible.\n      const next = unwindWork(completedWork, subtreeRenderLanes);\n\n      // Because this fiber did not complete, don't reset its lanes.\n\n      if (next !== null) {\n        // If completing this work spawned new work, do that next. We'll come\n        // back here again.\n        // Since we're restarting, remove anything that is not a host effect\n        // from the effect tag.\n        next.flags &= HostEffectMask;\n        workInProgress = next;\n        return;\n      }\n\n      if (\n        enableProfilerTimer &&\n        (completedWork.mode & ProfileMode) !== NoMode\n      ) {\n        // Record the render duration for the fiber that errored.\n        stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);\n\n        // Include the time spent working on failed children before continuing.\n        let actualDuration = completedWork.actualDuration;\n        let child = completedWork.child;\n        while (child !== null) {\n          actualDuration += child.actualDuration;\n          child = child.sibling;\n        }\n        completedWork.actualDuration = actualDuration;\n      }\n\n      if (returnFiber !== null) {\n        // Mark the parent fiber as incomplete and clear its subtree flags.\n        returnFiber.flags |= Incomplete;\n        returnFiber.subtreeFlags = NoFlags;\n        returnFiber.deletions = null;\n      }\n    }\n\n    const siblingFiber = completedWork.sibling;\n    if (siblingFiber !== null) {\n      // If there is more work to do in this returnFiber, do that next.\n      workInProgress = siblingFiber;\n      return;\n    }\n    // Otherwise, return to the parent\n    completedWork = returnFiber;\n    // Update the next thing we're working on in case something throws.\n    workInProgress = completedWork;\n  } while (completedWork !== null);\n\n  // We've reached the root.\n  if (workInProgressRootExitStatus === RootIncomplete) {\n    workInProgressRootExitStatus = RootCompleted;\n  }\n}\n\nfunction commitRoot(root) {\n  // TODO: This no longer makes any sense. We already wrap the mutation and\n  // layout phases. Should be able to remove.\n  const previousUpdateLanePriority = getCurrentUpdatePriority();\n  const prevTransition = ReactCurrentBatchConfig.transition;\n  try {\n    ReactCurrentBatchConfig.transition = 0;\n    setCurrentUpdatePriority(DiscreteEventPriority);\n    commitRootImpl(root, previousUpdateLanePriority);\n  } finally {\n    ReactCurrentBatchConfig.transition = prevTransition;\n    setCurrentUpdatePriority(previousUpdateLanePriority);\n  }\n\n  return null;\n}\n\nfunction commitRootImpl(root, renderPriorityLevel) {\n  do {\n    // `flushPassiveEffects` will call `flushSyncUpdateQueue` at the end, which\n    // means `flushPassiveEffects` will sometimes result in additional\n    // passive effects. So we need to keep flushing in a loop until there are\n    // no more pending effects.\n    // TODO: Might be better if `flushPassiveEffects` did not automatically\n    // flush synchronous work at the end, to avoid factoring hazards like this.\n    flushPassiveEffects();\n  } while (rootWithPendingPassiveEffects !== null);\n  flushRenderPhaseStrictModeWarningsInDEV();\n\n  invariant(\n    (executionContext & (RenderContext | CommitContext)) === NoContext,\n    'Should not already be working.',\n  );\n\n  const finishedWork = root.finishedWork;\n  const lanes = root.finishedLanes;\n\n  if (__DEV__) {\n    if (enableDebugTracing) {\n      logCommitStarted(lanes);\n    }\n  }\n\n  if (enableSchedulingProfiler) {\n    markCommitStarted(lanes);\n  }\n\n  if (finishedWork === null) {\n    if (__DEV__) {\n      if (enableDebugTracing) {\n        logCommitStopped();\n      }\n    }\n\n    if (enableSchedulingProfiler) {\n      markCommitStopped();\n    }\n\n    return null;\n  } else {\n    if (__DEV__) {\n      if (lanes === NoLanes) {\n        console.error(\n          'root.finishedLanes should not be empty during a commit. This is a ' +\n            'bug in React.',\n        );\n      }\n    }\n  }\n  root.finishedWork = null;\n  root.finishedLanes = NoLanes;\n\n  invariant(\n    finishedWork !== root.current,\n    'Cannot commit the same tree as before. This error is likely caused by ' +\n      'a bug in React. Please file an issue.',\n  );\n\n  // commitRoot never returns a continuation; it always finishes synchronously.\n  // So we can clear these now to allow a new callback to be scheduled.\n  root.callbackNode = null;\n  root.callbackPriority = NoLane;\n\n  // Update the first and last pending times on this root. The new first\n  // pending time is whatever is left on the root fiber.\n  let remainingLanes = mergeLanes(finishedWork.lanes, finishedWork.childLanes);\n  markRootFinished(root, remainingLanes);\n\n  if (root === workInProgressRoot) {\n    // We can reset these now that they are finished.\n    workInProgressRoot = null;\n    workInProgress = null;\n    workInProgressRootRenderLanes = NoLanes;\n  } else {\n    // This indicates that the last root we worked on is not the same one that\n    // we're committing now. This most commonly happens when a suspended root\n    // times out.\n  }\n\n  // If there are pending passive effects, schedule a callback to process them.\n  // Do this as early as possible, so it is queued before anything else that\n  // might get scheduled in the commit phase. (See #16714.)\n  // TODO: Delete all other places that schedule the passive effect callback\n  // They're redundant.\n  if (\n    (finishedWork.subtreeFlags & PassiveMask) !== NoFlags ||\n    (finishedWork.flags & PassiveMask) !== NoFlags\n  ) {\n    if (!rootDoesHavePassiveEffects) {\n      rootDoesHavePassiveEffects = true;\n      scheduleCallback(NormalSchedulerPriority, () => {\n        flushPassiveEffects();\n        return null;\n      });\n    }\n  }\n\n  // Check if there are any effects in the whole tree.\n  // TODO: This is left over from the effect list implementation, where we had\n  // to check for the existence of `firstEffect` to satisfy Flow. I think the\n  // only other reason this optimization exists is because it affects profiling.\n  // Reconsider whether this is necessary.\n  const subtreeHasEffects =\n    (finishedWork.subtreeFlags &\n      (BeforeMutationMask | MutationMask | LayoutMask | PassiveMask)) !==\n    NoFlags;\n  const rootHasEffect =\n    (finishedWork.flags &\n      (BeforeMutationMask | MutationMask | LayoutMask | PassiveMask)) !==\n    NoFlags;\n\n  if (subtreeHasEffects || rootHasEffect) {\n    const prevTransition = ReactCurrentBatchConfig.transition;\n    ReactCurrentBatchConfig.transition = 0;\n    const previousPriority = getCurrentUpdatePriority();\n    setCurrentUpdatePriority(DiscreteEventPriority);\n\n    const prevExecutionContext = executionContext;\n    executionContext |= CommitContext;\n\n    // Reset this to null before calling lifecycles\n    ReactCurrentOwner.current = null;\n\n    // The commit phase is broken into several sub-phases. We do a separate pass\n    // of the effect list for each phase: all mutation effects come before all\n    // layout effects, and so on.\n\n    // The first phase a \"before mutation\" phase. We use this phase to read the\n    // state of the host tree right before we mutate it. This is where\n    // getSnapshotBeforeUpdate is called.\n    const shouldFireAfterActiveInstanceBlur = commitBeforeMutationEffects(\n      root,\n      finishedWork,\n    );\n\n    if (enableProfilerTimer) {\n      // Mark the current commit time to be shared by all Profilers in this\n      // batch. This enables them to be grouped later.\n      recordCommitTime();\n    }\n\n    if (enableProfilerTimer && enableProfilerNestedUpdateScheduledHook) {\n      // Track the root here, rather than in commitLayoutEffects(), because of ref setters.\n      // Updates scheduled during ref detachment should also be flagged.\n      rootCommittingMutationOrLayoutEffects = root;\n    }\n\n    // The next phase is the mutation phase, where we mutate the host tree.\n    commitMutationEffects(root, finishedWork, lanes);\n\n    if (enableCreateEventHandleAPI) {\n      if (shouldFireAfterActiveInstanceBlur) {\n        afterActiveInstanceBlur();\n      }\n    }\n    resetAfterCommit(root.containerInfo);\n\n    // The work-in-progress tree is now the current tree. This must come after\n    // the mutation phase, so that the previous tree is still current during\n    // componentWillUnmount, but before the layout phase, so that the finished\n    // work is current during componentDidMount/Update.\n    root.current = finishedWork;\n\n    // The next phase is the layout phase, where we call effects that read\n    // the host tree after it's been mutated. The idiomatic use case for this is\n    // layout, but class component lifecycles also fire here for legacy reasons.\n    if (__DEV__) {\n      if (enableDebugTracing) {\n        logLayoutEffectsStarted(lanes);\n      }\n    }\n    if (enableSchedulingProfiler) {\n      markLayoutEffectsStarted(lanes);\n    }\n    commitLayoutEffects(finishedWork, root, lanes);\n    if (__DEV__) {\n      if (enableDebugTracing) {\n        logLayoutEffectsStopped();\n      }\n    }\n\n    if (enableSchedulingProfiler) {\n      markLayoutEffectsStopped();\n    }\n\n    if (enableProfilerTimer && enableProfilerNestedUpdateScheduledHook) {\n      rootCommittingMutationOrLayoutEffects = null;\n    }\n\n    // Tell Scheduler to yield at the end of the frame, so the browser has an\n    // opportunity to paint.\n    requestPaint();\n\n    executionContext = prevExecutionContext;\n\n    // Reset the priority to the previous non-sync value.\n    setCurrentUpdatePriority(previousPriority);\n    ReactCurrentBatchConfig.transition = prevTransition;\n  } else {\n    // No effects.\n    root.current = finishedWork;\n    // Measure these anyway so the flamegraph explicitly shows that there were\n    // no effects.\n    // TODO: Maybe there's a better way to report this.\n    if (enableProfilerTimer) {\n      recordCommitTime();\n    }\n  }\n\n  const rootDidHavePassiveEffects = rootDoesHavePassiveEffects;\n\n  if (rootDoesHavePassiveEffects) {\n    // This commit has passive effects. Stash a reference to them. But don't\n    // schedule a callback until after flushing layout work.\n    rootDoesHavePassiveEffects = false;\n    rootWithPendingPassiveEffects = root;\n    pendingPassiveEffectsLanes = lanes;\n  }\n\n  // Read this again, since an effect might have updated it\n  remainingLanes = root.pendingLanes;\n\n  // Check if there's remaining work on this root\n  // TODO: This is part of the `componentDidCatch` implementation. Its purpose\n  // is to detect whether something might have called setState inside\n  // `componentDidCatch`. The mechanism is known to be flawed because `setState`\n  // inside `componentDidCatch` is itself flawed — that's why we recommend\n  // `getDerivedStateFromError` instead. However, it could be improved by\n  // checking if remainingLanes includes Sync work, instead of whether there's\n  // any work remaining at all (which would also include stuff like Suspense\n  // retries or transitions). It's been like this for a while, though, so fixing\n  // it probably isn't that urgent.\n  if (remainingLanes === NoLanes) {\n    // If there's no remaining work, we can clear the set of already failed\n    // error boundaries.\n    legacyErrorBoundariesThatAlreadyFailed = null;\n  }\n\n  if (__DEV__ && enableStrictEffects) {\n    if (!rootDidHavePassiveEffects) {\n      commitDoubleInvokeEffectsInDEV(root.current, false);\n    }\n  }\n\n  onCommitRootDevTools(finishedWork.stateNode, renderPriorityLevel);\n\n  if (enableUpdaterTracking) {\n    if (isDevToolsPresent) {\n      root.memoizedUpdaters.clear();\n    }\n  }\n\n  if (__DEV__) {\n    onCommitRootTestSelector();\n  }\n\n  // Always call this before exiting `commitRoot`, to ensure that any\n  // additional work on this root is scheduled.\n  ensureRootIsScheduled(root, now());\n\n  if (hasUncaughtError) {\n    hasUncaughtError = false;\n    const error = firstUncaughtError;\n    firstUncaughtError = null;\n    throw error;\n  }\n\n  // If the passive effects are the result of a discrete render, flush them\n  // synchronously at the end of the current task so that the result is\n  // immediately observable. Otherwise, we assume that they are not\n  // order-dependent and do not need to be observed by external systems, so we\n  // can wait until after paint.\n  // TODO: We can optimize this by not scheduling the callback earlier. Since we\n  // currently schedule the callback in multiple places, will wait until those\n  // are consolidated.\n  if (\n    includesSomeLane(pendingPassiveEffectsLanes, SyncLane) &&\n    root.tag !== LegacyRoot\n  ) {\n    flushPassiveEffects();\n  }\n\n  // Read this again, since a passive effect might have updated it\n  remainingLanes = root.pendingLanes;\n  if (includesSomeLane(remainingLanes, (SyncLane: Lane))) {\n    if (enableProfilerTimer && enableProfilerNestedUpdatePhase) {\n      markNestedUpdateScheduled();\n    }\n\n    // Count the number of times the root synchronously re-renders without\n    // finishing. If there are too many, it indicates an infinite update loop.\n    if (root === rootWithNestedUpdates) {\n      nestedUpdateCount++;\n    } else {\n      nestedUpdateCount = 0;\n      rootWithNestedUpdates = root;\n    }\n  } else {\n    nestedUpdateCount = 0;\n  }\n\n  // If layout work was scheduled, flush it now.\n  flushSyncCallbacks();\n\n  if (__DEV__) {\n    if (enableDebugTracing) {\n      logCommitStopped();\n    }\n  }\n\n  if (enableSchedulingProfiler) {\n    markCommitStopped();\n  }\n\n  return null;\n}\n\nexport function flushPassiveEffects(): boolean {\n  // Returns whether passive effects were flushed.\n  // TODO: Combine this check with the one in flushPassiveEFfectsImpl. We should\n  // probably just combine the two functions. I believe they were only separate\n  // in the first place because we used to wrap it with\n  // `Scheduler.runWithPriority`, which accepts a function. But now we track the\n  // priority within React itself, so we can mutate the variable directly.\n  if (rootWithPendingPassiveEffects !== null) {\n    const renderPriority = lanesToEventPriority(pendingPassiveEffectsLanes);\n    const priority = lowerEventPriority(DefaultEventPriority, renderPriority);\n    const prevTransition = ReactCurrentBatchConfig.transition;\n    const previousPriority = getCurrentUpdatePriority();\n    try {\n      ReactCurrentBatchConfig.transition = 0;\n      setCurrentUpdatePriority(priority);\n      return flushPassiveEffectsImpl();\n    } finally {\n      setCurrentUpdatePriority(previousPriority);\n      ReactCurrentBatchConfig.transition = prevTransition;\n    }\n  }\n  return false;\n}\n\nexport function enqueuePendingPassiveProfilerEffect(fiber: Fiber): void {\n  if (enableProfilerTimer && enableProfilerCommitHooks) {\n    pendingPassiveProfilerEffects.push(fiber);\n    if (!rootDoesHavePassiveEffects) {\n      rootDoesHavePassiveEffects = true;\n      scheduleCallback(NormalSchedulerPriority, () => {\n        flushPassiveEffects();\n        return null;\n      });\n    }\n  }\n}\n\nfunction flushPassiveEffectsImpl() {\n  if (rootWithPendingPassiveEffects === null) {\n    return false;\n  }\n\n  const root = rootWithPendingPassiveEffects;\n  const lanes = pendingPassiveEffectsLanes;\n  rootWithPendingPassiveEffects = null;\n  // TODO: This is sometimes out of sync with rootWithPendingPassiveEffects.\n  // Figure out why and fix it. It's not causing any known issues (probably\n  // because it's only used for profiling), but it's a refactor hazard.\n  pendingPassiveEffectsLanes = NoLanes;\n\n  invariant(\n    (executionContext & (RenderContext | CommitContext)) === NoContext,\n    'Cannot flush passive effects while already rendering.',\n  );\n\n  if (__DEV__) {\n    if (enableDebugTracing) {\n      logPassiveEffectsStarted(lanes);\n    }\n  }\n\n  if (enableSchedulingProfiler) {\n    markPassiveEffectsStarted(lanes);\n  }\n\n  const prevExecutionContext = executionContext;\n  executionContext |= CommitContext;\n\n  commitPassiveUnmountEffects(root.current);\n  commitPassiveMountEffects(root, root.current);\n\n  // TODO: Move to commitPassiveMountEffects\n  if (enableProfilerTimer && enableProfilerCommitHooks) {\n    const profilerEffects = pendingPassiveProfilerEffects;\n    pendingPassiveProfilerEffects = [];\n    for (let i = 0; i < profilerEffects.length; i++) {\n      const fiber = ((profilerEffects[i]: any): Fiber);\n      commitPassiveEffectDurations(root, fiber);\n    }\n  }\n\n  if (__DEV__) {\n    if (enableDebugTracing) {\n      logPassiveEffectsStopped();\n    }\n  }\n\n  if (enableSchedulingProfiler) {\n    markPassiveEffectsStopped();\n  }\n\n  if (__DEV__ && enableStrictEffects) {\n    commitDoubleInvokeEffectsInDEV(root.current, true);\n  }\n\n  executionContext = prevExecutionContext;\n\n  flushSyncCallbacks();\n\n  // If additional passive effects were scheduled, increment a counter. If this\n  // exceeds the limit, we'll fire a warning.\n  nestedPassiveUpdateCount =\n    rootWithPendingPassiveEffects === null ? 0 : nestedPassiveUpdateCount + 1;\n\n  // TODO: Move to commitPassiveMountEffects\n  onPostCommitRootDevTools(root);\n  if (enableProfilerTimer && enableProfilerCommitHooks) {\n    const stateNode = root.current.stateNode;\n    stateNode.effectDuration = 0;\n    stateNode.passiveEffectDuration = 0;\n  }\n\n  return true;\n}\n\nexport function isAlreadyFailedLegacyErrorBoundary(instance: mixed): boolean {\n  return (\n    legacyErrorBoundariesThatAlreadyFailed !== null &&\n    legacyErrorBoundariesThatAlreadyFailed.has(instance)\n  );\n}\n\nexport function markLegacyErrorBoundaryAsFailed(instance: mixed) {\n  if (legacyErrorBoundariesThatAlreadyFailed === null) {\n    legacyErrorBoundariesThatAlreadyFailed = new Set([instance]);\n  } else {\n    legacyErrorBoundariesThatAlreadyFailed.add(instance);\n  }\n}\n\nfunction prepareToThrowUncaughtError(error: mixed) {\n  if (!hasUncaughtError) {\n    hasUncaughtError = true;\n    firstUncaughtError = error;\n  }\n}\nexport const onUncaughtError = prepareToThrowUncaughtError;\n\nfunction captureCommitPhaseErrorOnRoot(\n  rootFiber: Fiber,\n  sourceFiber: Fiber,\n  error: mixed,\n) {\n  const errorInfo = createCapturedValue(error, sourceFiber);\n  const update = createRootErrorUpdate(rootFiber, errorInfo, (SyncLane: Lane));\n  enqueueUpdate(rootFiber, update, (SyncLane: Lane));\n  const eventTime = requestEventTime();\n  const root = markUpdateLaneFromFiberToRoot(rootFiber, (SyncLane: Lane));\n  if (root !== null) {\n    markRootUpdated(root, SyncLane, eventTime);\n    ensureRootIsScheduled(root, eventTime);\n  }\n}\n\nexport function captureCommitPhaseError(\n  sourceFiber: Fiber,\n  nearestMountedAncestor: Fiber | null,\n  error: mixed,\n) {\n  if (sourceFiber.tag === HostRoot) {\n    // Error was thrown at the root. There is no parent, so the root\n    // itself should capture it.\n    captureCommitPhaseErrorOnRoot(sourceFiber, sourceFiber, error);\n    return;\n  }\n\n  let fiber = null;\n  if (skipUnmountedBoundaries) {\n    fiber = nearestMountedAncestor;\n  } else {\n    fiber = sourceFiber.return;\n  }\n\n  while (fiber !== null) {\n    if (fiber.tag === HostRoot) {\n      captureCommitPhaseErrorOnRoot(fiber, sourceFiber, error);\n      return;\n    } else if (fiber.tag === ClassComponent) {\n      const ctor = fiber.type;\n      const instance = fiber.stateNode;\n      if (\n        typeof ctor.getDerivedStateFromError === 'function' ||\n        (typeof instance.componentDidCatch === 'function' &&\n          !isAlreadyFailedLegacyErrorBoundary(instance))\n      ) {\n        const errorInfo = createCapturedValue(error, sourceFiber);\n        const update = createClassErrorUpdate(\n          fiber,\n          errorInfo,\n          (SyncLane: Lane),\n        );\n        enqueueUpdate(fiber, update, (SyncLane: Lane));\n        const eventTime = requestEventTime();\n        const root = markUpdateLaneFromFiberToRoot(fiber, (SyncLane: Lane));\n        if (root !== null) {\n          markRootUpdated(root, SyncLane, eventTime);\n          ensureRootIsScheduled(root, eventTime);\n        }\n        return;\n      }\n    }\n    fiber = fiber.return;\n  }\n\n  if (__DEV__) {\n    // TODO: Until we re-land skipUnmountedBoundaries (see #20147), this warning\n    // will fire for errors that are thrown by destroy functions inside deleted\n    // trees. What it should instead do is propagate the error to the parent of\n    // the deleted tree. In the meantime, do not add this warning to the\n    // allowlist; this is only for our internal use.\n    console.error(\n      'Internal React error: Attempted to capture a commit phase error ' +\n        'inside a detached tree. This indicates a bug in React. Likely ' +\n        'causes include deleting the same fiber more than once, committing an ' +\n        'already-finished tree, or an inconsistent return pointer.\\n\\n' +\n        'Error message:\\n\\n%s',\n      error,\n    );\n  }\n}\n\nexport function pingSuspendedRoot(\n  root: FiberRoot,\n  wakeable: Wakeable,\n  pingedLanes: Lanes,\n) {\n  const pingCache = root.pingCache;\n  if (pingCache !== null) {\n    // The wakeable resolved, so we no longer need to memoize, because it will\n    // never be thrown again.\n    pingCache.delete(wakeable);\n  }\n\n  const eventTime = requestEventTime();\n  markRootPinged(root, pingedLanes, eventTime);\n\n  if (\n    workInProgressRoot === root &&\n    isSubsetOfLanes(workInProgressRootRenderLanes, pingedLanes)\n  ) {\n    // Received a ping at the same priority level at which we're currently\n    // rendering. We might want to restart this render. This should mirror\n    // the logic of whether or not a root suspends once it completes.\n\n    // TODO: If we're rendering sync either due to Sync, Batched or expired,\n    // we should probably never restart.\n\n    // If we're suspended with delay, or if it's a retry, we'll always suspend\n    // so we can always restart.\n    if (\n      workInProgressRootExitStatus === RootSuspendedWithDelay ||\n      (workInProgressRootExitStatus === RootSuspended &&\n        includesOnlyRetries(workInProgressRootRenderLanes) &&\n        now() - globalMostRecentFallbackTime < FALLBACK_THROTTLE_MS)\n    ) {\n      // Restart from the root.\n      prepareFreshStack(root, NoLanes);\n    } else {\n      // Even though we can't restart right now, we might get an\n      // opportunity later. So we mark this render as having a ping.\n      workInProgressRootPingedLanes = mergeLanes(\n        workInProgressRootPingedLanes,\n        pingedLanes,\n      );\n    }\n  }\n\n  ensureRootIsScheduled(root, eventTime);\n}\n\nfunction retryTimedOutBoundary(boundaryFiber: Fiber, retryLane: Lane) {\n  // The boundary fiber (a Suspense component or SuspenseList component)\n  // previously was rendered in its fallback state. One of the promises that\n  // suspended it has resolved, which means at least part of the tree was\n  // likely unblocked. Try rendering again, at a new lanes.\n  if (retryLane === NoLane) {\n    // TODO: Assign this to `suspenseState.retryLane`? to avoid\n    // unnecessary entanglement?\n    retryLane = requestRetryLane(boundaryFiber);\n  }\n  // TODO: Special case idle priority?\n  const eventTime = requestEventTime();\n  const root = markUpdateLaneFromFiberToRoot(boundaryFiber, retryLane);\n  if (root !== null) {\n    markRootUpdated(root, retryLane, eventTime);\n    ensureRootIsScheduled(root, eventTime);\n  }\n}\n\nexport function retryDehydratedSuspenseBoundary(boundaryFiber: Fiber) {\n  const suspenseState: null | SuspenseState = boundaryFiber.memoizedState;\n  let retryLane = NoLane;\n  if (suspenseState !== null) {\n    retryLane = suspenseState.retryLane;\n  }\n  retryTimedOutBoundary(boundaryFiber, retryLane);\n}\n\nexport function resolveRetryWakeable(boundaryFiber: Fiber, wakeable: Wakeable) {\n  let retryLane = NoLane; // Default\n  let retryCache: WeakSet<Wakeable> | Set<Wakeable> | null;\n  if (enableSuspenseServerRenderer) {\n    switch (boundaryFiber.tag) {\n      case SuspenseComponent:\n        retryCache = boundaryFiber.stateNode;\n        const suspenseState: null | SuspenseState = boundaryFiber.memoizedState;\n        if (suspenseState !== null) {\n          retryLane = suspenseState.retryLane;\n        }\n        break;\n      case SuspenseListComponent:\n        retryCache = boundaryFiber.stateNode;\n        break;\n      default:\n        invariant(\n          false,\n          'Pinged unknown suspense boundary type. ' +\n            'This is probably a bug in React.',\n        );\n    }\n  } else {\n    retryCache = boundaryFiber.stateNode;\n  }\n\n  if (retryCache !== null) {\n    // The wakeable resolved, so we no longer need to memoize, because it will\n    // never be thrown again.\n    retryCache.delete(wakeable);\n  }\n\n  retryTimedOutBoundary(boundaryFiber, retryLane);\n}\n\n// Computes the next Just Noticeable Difference (JND) boundary.\n// The theory is that a person can't tell the difference between small differences in time.\n// Therefore, if we wait a bit longer than necessary that won't translate to a noticeable\n// difference in the experience. However, waiting for longer might mean that we can avoid\n// showing an intermediate loading state. The longer we have already waited, the harder it\n// is to tell small differences in time. Therefore, the longer we've already waited,\n// the longer we can wait additionally. At some point we have to give up though.\n// We pick a train model where the next boundary commits at a consistent schedule.\n// These particular numbers are vague estimates. We expect to adjust them based on research.\nfunction jnd(timeElapsed: number) {\n  return timeElapsed < 120\n    ? 120\n    : timeElapsed < 480\n    ? 480\n    : timeElapsed < 1080\n    ? 1080\n    : timeElapsed < 1920\n    ? 1920\n    : timeElapsed < 3000\n    ? 3000\n    : timeElapsed < 4320\n    ? 4320\n    : ceil(timeElapsed / 1960) * 1960;\n}\n\nfunction checkForNestedUpdates() {\n  if (nestedUpdateCount > NESTED_UPDATE_LIMIT) {\n    nestedUpdateCount = 0;\n    rootWithNestedUpdates = null;\n    invariant(\n      false,\n      'Maximum update depth exceeded. This can happen when a component ' +\n        'repeatedly calls setState inside componentWillUpdate or ' +\n        'componentDidUpdate. React limits the number of nested updates to ' +\n        'prevent infinite loops.',\n    );\n  }\n\n  if (__DEV__) {\n    if (nestedPassiveUpdateCount > NESTED_PASSIVE_UPDATE_LIMIT) {\n      nestedPassiveUpdateCount = 0;\n      console.error(\n        'Maximum update depth exceeded. This can happen when a component ' +\n          \"calls setState inside useEffect, but useEffect either doesn't \" +\n          'have a dependency array, or one of the dependencies changes on ' +\n          'every render.',\n      );\n    }\n  }\n}\n\nfunction flushRenderPhaseStrictModeWarningsInDEV() {\n  if (__DEV__) {\n    ReactStrictModeWarnings.flushLegacyContextWarning();\n\n    if (warnAboutDeprecatedLifecycles) {\n      ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings();\n    }\n  }\n}\n\nfunction commitDoubleInvokeEffectsInDEV(\n  fiber: Fiber,\n  hasPassiveEffects: boolean,\n) {\n  if (__DEV__ && enableStrictEffects) {\n    // TODO (StrictEffects) Should we set a marker on the root if it contains strict effects\n    // so we don't traverse unnecessarily? similar to subtreeFlags but just at the root level.\n    // Maybe not a big deal since this is DEV only behavior.\n\n    setCurrentDebugFiberInDEV(fiber);\n    invokeEffectsInDev(fiber, MountLayoutDev, invokeLayoutEffectUnmountInDEV);\n    if (hasPassiveEffects) {\n      invokeEffectsInDev(\n        fiber,\n        MountPassiveDev,\n        invokePassiveEffectUnmountInDEV,\n      );\n    }\n\n    invokeEffectsInDev(fiber, MountLayoutDev, invokeLayoutEffectMountInDEV);\n    if (hasPassiveEffects) {\n      invokeEffectsInDev(fiber, MountPassiveDev, invokePassiveEffectMountInDEV);\n    }\n    resetCurrentDebugFiberInDEV();\n  }\n}\n\nfunction invokeEffectsInDev(\n  firstChild: Fiber,\n  fiberFlags: Flags,\n  invokeEffectFn: (fiber: Fiber) => void,\n): void {\n  if (__DEV__ && enableStrictEffects) {\n    // We don't need to re-check StrictEffectsMode here.\n    // This function is only called if that check has already passed.\n\n    let current = firstChild;\n    let subtreeRoot = null;\n    while (current !== null) {\n      const primarySubtreeFlag = current.subtreeFlags & fiberFlags;\n      if (\n        current !== subtreeRoot &&\n        current.child !== null &&\n        primarySubtreeFlag !== NoFlags\n      ) {\n        current = current.child;\n      } else {\n        if ((current.flags & fiberFlags) !== NoFlags) {\n          invokeEffectFn(current);\n        }\n\n        if (current.sibling !== null) {\n          current = current.sibling;\n        } else {\n          current = subtreeRoot = current.return;\n        }\n      }\n    }\n  }\n}\n\nlet didWarnStateUpdateForNotYetMountedComponent: Set<string> | null = null;\nfunction warnAboutUpdateOnNotYetMountedFiberInDEV(fiber) {\n  if (__DEV__) {\n    if ((executionContext & RenderContext) !== NoContext) {\n      // We let the other warning about render phase updates deal with this one.\n      return;\n    }\n\n    if (!(fiber.mode & ConcurrentMode)) {\n      return;\n    }\n\n    const tag = fiber.tag;\n    if (\n      tag !== IndeterminateComponent &&\n      tag !== HostRoot &&\n      tag !== ClassComponent &&\n      tag !== FunctionComponent &&\n      tag !== ForwardRef &&\n      tag !== MemoComponent &&\n      tag !== SimpleMemoComponent\n    ) {\n      // Only warn for user-defined components, not internal ones like Suspense.\n      return;\n    }\n\n    // We show the whole stack but dedupe on the top component's name because\n    // the problematic code almost always lies inside that component.\n    const componentName = getComponentNameFromFiber(fiber) || 'ReactComponent';\n    if (didWarnStateUpdateForNotYetMountedComponent !== null) {\n      if (didWarnStateUpdateForNotYetMountedComponent.has(componentName)) {\n        return;\n      }\n      didWarnStateUpdateForNotYetMountedComponent.add(componentName);\n    } else {\n      didWarnStateUpdateForNotYetMountedComponent = new Set([componentName]);\n    }\n\n    const previousFiber = ReactCurrentFiberCurrent;\n    try {\n      setCurrentDebugFiberInDEV(fiber);\n      console.error(\n        \"Can't perform a React state update on a component that hasn't mounted yet. \" +\n          'This indicates that you have a side-effect in your render function that ' +\n          'asynchronously later calls tries to update the component. Move this work to ' +\n          'useEffect instead.',\n      );\n    } finally {\n      if (previousFiber) {\n        setCurrentDebugFiberInDEV(fiber);\n      } else {\n        resetCurrentDebugFiberInDEV();\n      }\n    }\n  }\n}\n\nlet beginWork;\nif (__DEV__ && replayFailedUnitOfWorkWithInvokeGuardedCallback) {\n  const dummyFiber = null;\n  beginWork = (current, unitOfWork, lanes) => {\n    // If a component throws an error, we replay it again in a synchronously\n    // dispatched event, so that the debugger will treat it as an uncaught\n    // error See ReactErrorUtils for more information.\n\n    // Before entering the begin phase, copy the work-in-progress onto a dummy\n    // fiber. If beginWork throws, we'll use this to reset the state.\n    const originalWorkInProgressCopy = assignFiberPropertiesInDEV(\n      dummyFiber,\n      unitOfWork,\n    );\n    try {\n      return originalBeginWork(current, unitOfWork, lanes);\n    } catch (originalError) {\n      if (\n        originalError !== null &&\n        typeof originalError === 'object' &&\n        typeof originalError.then === 'function'\n      ) {\n        // Don't replay promises. Treat everything else like an error.\n        throw originalError;\n      }\n\n      // Keep this code in sync with handleError; any changes here must have\n      // corresponding changes there.\n      resetContextDependencies();\n      resetHooksAfterThrow();\n      // Don't reset current debug fiber, since we're about to work on the\n      // same fiber again.\n\n      // Unwind the failed stack frame\n      unwindInterruptedWork(unitOfWork, workInProgressRootRenderLanes);\n\n      // Restore the original properties of the fiber.\n      assignFiberPropertiesInDEV(unitOfWork, originalWorkInProgressCopy);\n\n      if (enableProfilerTimer && unitOfWork.mode & ProfileMode) {\n        // Reset the profiler timer.\n        startProfilerTimer(unitOfWork);\n      }\n\n      // Run beginWork again.\n      invokeGuardedCallback(\n        null,\n        originalBeginWork,\n        null,\n        current,\n        unitOfWork,\n        lanes,\n      );\n\n      if (hasCaughtError()) {\n        const replayError = clearCaughtError();\n        if (\n          typeof replayError === 'object' &&\n          replayError !== null &&\n          replayError._suppressLogging &&\n          typeof originalError === 'object' &&\n          originalError !== null &&\n          !originalError._suppressLogging\n        ) {\n          // If suppressed, let the flag carry over to the original error which is the one we'll rethrow.\n          originalError._suppressLogging = true;\n        }\n      }\n      // We always throw the original error in case the second render pass is not idempotent.\n      // This can happen if a memoized function or CommonJS module doesn't throw after first invokation.\n      throw originalError;\n    }\n  };\n} else {\n  beginWork = originalBeginWork;\n}\n\nlet didWarnAboutUpdateInRender = false;\nlet didWarnAboutUpdateInRenderForAnotherComponent;\nif (__DEV__) {\n  didWarnAboutUpdateInRenderForAnotherComponent = new Set();\n}\n\nfunction warnAboutRenderPhaseUpdatesInDEV(fiber) {\n  if (__DEV__) {\n    if (\n      ReactCurrentDebugFiberIsRenderingInDEV &&\n      (executionContext & RenderContext) !== NoContext &&\n      !getIsUpdatingOpaqueValueInRenderPhaseInDEV()\n    ) {\n      switch (fiber.tag) {\n        case FunctionComponent:\n        case ForwardRef:\n        case SimpleMemoComponent: {\n          const renderingComponentName =\n            (workInProgress && getComponentNameFromFiber(workInProgress)) ||\n            'Unknown';\n          // Dedupe by the rendering component because it's the one that needs to be fixed.\n          const dedupeKey = renderingComponentName;\n          if (!didWarnAboutUpdateInRenderForAnotherComponent.has(dedupeKey)) {\n            didWarnAboutUpdateInRenderForAnotherComponent.add(dedupeKey);\n            const setStateComponentName =\n              getComponentNameFromFiber(fiber) || 'Unknown';\n            console.error(\n              'Cannot update a component (`%s`) while rendering a ' +\n                'different component (`%s`). To locate the bad setState() call inside `%s`, ' +\n                'follow the stack trace as described in https://reactjs.org/link/setstate-in-render',\n              setStateComponentName,\n              renderingComponentName,\n              renderingComponentName,\n            );\n          }\n          break;\n        }\n        case ClassComponent: {\n          if (!didWarnAboutUpdateInRender) {\n            console.error(\n              'Cannot update during an existing state transition (such as ' +\n                'within `render`). Render methods should be a pure ' +\n                'function of props and state.',\n            );\n            didWarnAboutUpdateInRender = true;\n          }\n          break;\n        }\n      }\n    }\n  }\n}\n\nexport function restorePendingUpdaters(root: FiberRoot, lanes: Lanes): void {\n  if (enableUpdaterTracking) {\n    if (isDevToolsPresent) {\n      const memoizedUpdaters = root.memoizedUpdaters;\n      memoizedUpdaters.forEach(schedulingFiber => {\n        addFiberToLanesMap(root, schedulingFiber, lanes);\n      });\n\n      // This function intentionally does not clear memoized updaters.\n      // Those may still be relevant to the current commit\n      // and a future one (e.g. Suspense).\n    }\n  }\n}\n\nconst fakeActCallbackNode = {};\nfunction scheduleCallback(priorityLevel, callback) {\n  if (__DEV__) {\n    // If we're currently inside an `act` scope, bypass Scheduler and push to\n    // the `act` queue instead.\n    const actQueue = ReactCurrentActQueue.current;\n    if (actQueue !== null) {\n      actQueue.push(callback);\n      return fakeActCallbackNode;\n    } else {\n      return Scheduler_scheduleCallback(priorityLevel, callback);\n    }\n  } else {\n    // In production, always call Scheduler. This function will be stripped out.\n    return Scheduler_scheduleCallback(priorityLevel, callback);\n  }\n}\n\nfunction cancelCallback(callbackNode) {\n  if (__DEV__ && callbackNode === fakeActCallbackNode) {\n    return;\n  }\n  // In production, always call Scheduler. This function will be stripped out.\n  return Scheduler_cancelCallback(callbackNode);\n}\n\nfunction shouldForceFlushFallbacksInDEV() {\n  // Never force flush in production. This function should get stripped out.\n  return __DEV__ && ReactCurrentActQueue.current !== null;\n}\n\nexport function warnIfNotCurrentlyActingEffectsInDEV(fiber: Fiber): void {\n  if (__DEV__) {\n    if (\n      warnsIfNotActing === true &&\n      (fiber.mode & StrictLegacyMode) !== NoMode &&\n      ReactCurrentActQueue.current === null &&\n      // Our internal tests use a custom implementation of `act` that works by\n      // mocking the Scheduler package. Disable the `act` warning.\n      // TODO: Maybe the warning should be disabled by default, and then turned\n      // on at the testing frameworks layer? Instead of what we do now, which\n      // is check if a `jest` global is defined.\n      ReactCurrentActQueue.disableActWarning === false\n    ) {\n      console.error(\n        'An update to %s ran an effect, but was not wrapped in act(...).\\n\\n' +\n          'When testing, code that causes React state updates should be ' +\n          'wrapped into act(...):\\n\\n' +\n          'act(() => {\\n' +\n          '  /* fire events that update state */\\n' +\n          '});\\n' +\n          '/* assert on the output */\\n\\n' +\n          \"This ensures that you're testing the behavior the user would see \" +\n          'in the browser.' +\n          ' Learn more at https://reactjs.org/link/wrap-tests-with-act',\n        getComponentNameFromFiber(fiber),\n      );\n    }\n  }\n}\n\nfunction warnIfNotCurrentlyActingUpdatesInDEV(fiber: Fiber): void {\n  if (__DEV__) {\n    if (\n      warnsIfNotActing === true &&\n      executionContext === NoContext &&\n      ReactCurrentActQueue.current === null &&\n      // Our internal tests use a custom implementation of `act` that works by\n      // mocking the Scheduler package. Disable the `act` warning.\n      // TODO: Maybe the warning should be disabled by default, and then turned\n      // on at the testing frameworks layer? Instead of what we do now, which\n      // is check if a `jest` global is defined.\n      ReactCurrentActQueue.disableActWarning === false\n    ) {\n      const previousFiber = ReactCurrentFiberCurrent;\n      try {\n        setCurrentDebugFiberInDEV(fiber);\n        console.error(\n          'An update to %s inside a test was not wrapped in act(...).\\n\\n' +\n            'When testing, code that causes React state updates should be ' +\n            'wrapped into act(...):\\n\\n' +\n            'act(() => {\\n' +\n            '  /* fire events that update state */\\n' +\n            '});\\n' +\n            '/* assert on the output */\\n\\n' +\n            \"This ensures that you're testing the behavior the user would see \" +\n            'in the browser.' +\n            ' Learn more at https://reactjs.org/link/wrap-tests-with-act',\n          getComponentNameFromFiber(fiber),\n        );\n      } finally {\n        if (previousFiber) {\n          setCurrentDebugFiberInDEV(fiber);\n        } else {\n          resetCurrentDebugFiberInDEV();\n        }\n      }\n    }\n  }\n}\n\nexport const warnIfNotCurrentlyActingUpdatesInDev = warnIfNotCurrentlyActingUpdatesInDEV;\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {ReactElement} from 'shared/ReactElementType';\nimport type {ReactFragment, ReactPortal, ReactScope} from 'shared/ReactTypes';\nimport type {Fiber} from './ReactInternalTypes';\nimport type {RootTag} from './ReactRootTags';\nimport type {WorkTag} from './ReactWorkTags';\nimport type {TypeOfMode} from './ReactTypeOfMode';\nimport type {Lanes} from './ReactFiberLane.old';\nimport type {SuspenseInstance, Props} from './ReactFiberHostConfig';\nimport type {OffscreenProps} from './ReactFiberOffscreenComponent';\n\nimport invariant from 'shared/invariant';\nimport {\n  createRootStrictEffectsByDefault,\n  enableCache,\n  enableStrictEffects,\n  enableProfilerTimer,\n  enableScopeAPI,\n  enableSyncDefaultUpdates,\n  allowConcurrentByDefault,\n} from 'shared/ReactFeatureFlags';\nimport {\n  supportsPersistence,\n  getOffscreenContainerType,\n} from './ReactFiberHostConfig';\nimport {NoFlags, Placement, StaticMask} from './ReactFiberFlags';\nimport {ConcurrentRoot} from './ReactRootTags';\nimport {\n  IndeterminateComponent,\n  ClassComponent,\n  HostRoot,\n  HostComponent,\n  HostText,\n  HostPortal,\n  ForwardRef,\n  Fragment,\n  Mode,\n  ContextProvider,\n  ContextConsumer,\n  Profiler,\n  SuspenseComponent,\n  SuspenseListComponent,\n  DehydratedFragment,\n  FunctionComponent,\n  MemoComponent,\n  SimpleMemoComponent,\n  LazyComponent,\n  ScopeComponent,\n  OffscreenComponent,\n  LegacyHiddenComponent,\n  CacheComponent,\n} from './ReactWorkTags';\nimport getComponentNameFromFiber from 'react-reconciler/src/getComponentNameFromFiber';\n\nimport {isDevToolsPresent} from './ReactFiberDevToolsHook.old';\nimport {\n  resolveClassForHotReloading,\n  resolveFunctionForHotReloading,\n  resolveForwardRefForHotReloading,\n} from './ReactFiberHotReloading.old';\nimport {NoLanes} from './ReactFiberLane.old';\nimport {\n  NoMode,\n  ConcurrentMode,\n  DebugTracingMode,\n  ProfileMode,\n  StrictLegacyMode,\n  StrictEffectsMode,\n  ConcurrentUpdatesByDefaultMode,\n} from './ReactTypeOfMode';\nimport {\n  REACT_FORWARD_REF_TYPE,\n  REACT_FRAGMENT_TYPE,\n  REACT_DEBUG_TRACING_MODE_TYPE,\n  REACT_STRICT_MODE_TYPE,\n  REACT_PROFILER_TYPE,\n  REACT_PROVIDER_TYPE,\n  REACT_CONTEXT_TYPE,\n  REACT_SUSPENSE_TYPE,\n  REACT_SUSPENSE_LIST_TYPE,\n  REACT_MEMO_TYPE,\n  REACT_LAZY_TYPE,\n  REACT_SCOPE_TYPE,\n  REACT_OFFSCREEN_TYPE,\n  REACT_LEGACY_HIDDEN_TYPE,\n  REACT_CACHE_TYPE,\n} from 'shared/ReactSymbols';\n\nexport type {Fiber};\n\nlet hasBadMapPolyfill;\n\nif (__DEV__) {\n  hasBadMapPolyfill = false;\n  try {\n    const nonExtensibleObject = Object.preventExtensions({});\n    /* eslint-disable no-new */\n    new Map([[nonExtensibleObject, null]]);\n    new Set([nonExtensibleObject]);\n    /* eslint-enable no-new */\n  } catch (e) {\n    // TODO: Consider warning about bad polyfills\n    hasBadMapPolyfill = true;\n  }\n}\n\nfunction FiberNode(\n  tag: WorkTag,\n  pendingProps: mixed,\n  key: null | string,\n  mode: TypeOfMode,\n) {\n  // Instance\n  this.tag = tag;\n  this.key = key;\n  this.elementType = null;\n  this.type = null;\n  this.stateNode = null;\n\n  // Fiber\n  this.return = null;\n  this.child = null;\n  this.sibling = null;\n  this.index = 0;\n\n  this.ref = null;\n\n  this.pendingProps = pendingProps;\n  this.memoizedProps = null;\n  this.updateQueue = null;\n  this.memoizedState = null;\n  this.dependencies = null;\n\n  this.mode = mode;\n\n  // Effects\n  this.flags = NoFlags;\n  this.subtreeFlags = NoFlags;\n  this.deletions = null;\n\n  this.lanes = NoLanes;\n  this.childLanes = NoLanes;\n\n  this.alternate = null;\n\n  if (enableProfilerTimer) {\n    // Note: The following is done to avoid a v8 performance cliff.\n    //\n    // Initializing the fields below to smis and later updating them with\n    // double values will cause Fibers to end up having separate shapes.\n    // This behavior/bug has something to do with Object.preventExtension().\n    // Fortunately this only impacts DEV builds.\n    // Unfortunately it makes React unusably slow for some applications.\n    // To work around this, initialize the fields below with doubles.\n    //\n    // Learn more about this here:\n    // https://github.com/facebook/react/issues/14365\n    // https://bugs.chromium.org/p/v8/issues/detail?id=8538\n    this.actualDuration = Number.NaN;\n    this.actualStartTime = Number.NaN;\n    this.selfBaseDuration = Number.NaN;\n    this.treeBaseDuration = Number.NaN;\n\n    // It's okay to replace the initial doubles with smis after initialization.\n    // This won't trigger the performance cliff mentioned above,\n    // and it simplifies other profiler code (including DevTools).\n    this.actualDuration = 0;\n    this.actualStartTime = -1;\n    this.selfBaseDuration = 0;\n    this.treeBaseDuration = 0;\n  }\n\n  if (__DEV__) {\n    // This isn't directly used but is handy for debugging internals:\n\n    this._debugSource = null;\n    this._debugOwner = null;\n    this._debugNeedsRemount = false;\n    this._debugHookTypes = null;\n    if (!hasBadMapPolyfill && typeof Object.preventExtensions === 'function') {\n      Object.preventExtensions(this);\n    }\n  }\n}\n\n// This is a constructor function, rather than a POJO constructor, still\n// please ensure we do the following:\n// 1) Nobody should add any instance methods on this. Instance methods can be\n//    more difficult to predict when they get optimized and they are almost\n//    never inlined properly in static compilers.\n// 2) Nobody should rely on `instanceof Fiber` for type testing. We should\n//    always know when it is a fiber.\n// 3) We might want to experiment with using numeric keys since they are easier\n//    to optimize in a non-JIT environment.\n// 4) We can easily go from a constructor to a createFiber object literal if that\n//    is faster.\n// 5) It should be easy to port this to a C struct and keep a C implementation\n//    compatible.\nconst createFiber = function(\n  tag: WorkTag,\n  pendingProps: mixed,\n  key: null | string,\n  mode: TypeOfMode,\n): Fiber {\n  // $FlowFixMe: the shapes are exact here but Flow doesn't like constructors\n  return new FiberNode(tag, pendingProps, key, mode);\n};\n\nfunction shouldConstruct(Component: Function) {\n  const prototype = Component.prototype;\n  return !!(prototype && prototype.isReactComponent);\n}\n\nexport function isSimpleFunctionComponent(type: any) {\n  return (\n    typeof type === 'function' &&\n    !shouldConstruct(type) &&\n    type.defaultProps === undefined\n  );\n}\n\nexport function resolveLazyComponentTag(Component: Function): WorkTag {\n  if (typeof Component === 'function') {\n    return shouldConstruct(Component) ? ClassComponent : FunctionComponent;\n  } else if (Component !== undefined && Component !== null) {\n    const $$typeof = Component.$$typeof;\n    if ($$typeof === REACT_FORWARD_REF_TYPE) {\n      return ForwardRef;\n    }\n    if ($$typeof === REACT_MEMO_TYPE) {\n      return MemoComponent;\n    }\n  }\n  return IndeterminateComponent;\n}\n\n// This is used to create an alternate fiber to do work on.\nexport function createWorkInProgress(current: Fiber, pendingProps: any): Fiber {\n  let workInProgress = current.alternate;\n  if (workInProgress === null) {\n    // We use a double buffering pooling technique because we know that we'll\n    // only ever need at most two versions of a tree. We pool the \"other\" unused\n    // node that we're free to reuse. This is lazily created to avoid allocating\n    // extra objects for things that are never updated. It also allow us to\n    // reclaim the extra memory if needed.\n    workInProgress = createFiber(\n      current.tag,\n      pendingProps,\n      current.key,\n      current.mode,\n    );\n    workInProgress.elementType = current.elementType;\n    workInProgress.type = current.type;\n    workInProgress.stateNode = current.stateNode;\n\n    if (__DEV__) {\n      // DEV-only fields\n\n      workInProgress._debugSource = current._debugSource;\n      workInProgress._debugOwner = current._debugOwner;\n      workInProgress._debugHookTypes = current._debugHookTypes;\n    }\n\n    workInProgress.alternate = current;\n    current.alternate = workInProgress;\n  } else {\n    workInProgress.pendingProps = pendingProps;\n    // Needed because Blocks store data on type.\n    workInProgress.type = current.type;\n\n    // We already have an alternate.\n    // Reset the effect tag.\n    workInProgress.flags = NoFlags;\n\n    // The effects are no longer valid.\n    workInProgress.subtreeFlags = NoFlags;\n    workInProgress.deletions = null;\n\n    if (enableProfilerTimer) {\n      // We intentionally reset, rather than copy, actualDuration & actualStartTime.\n      // This prevents time from endlessly accumulating in new commits.\n      // This has the downside of resetting values for different priority renders,\n      // But works for yielding (the common case) and should support resuming.\n      workInProgress.actualDuration = 0;\n      workInProgress.actualStartTime = -1;\n    }\n  }\n\n  // Reset all effects except static ones.\n  // Static effects are not specific to a render.\n  workInProgress.flags = current.flags & StaticMask;\n  workInProgress.childLanes = current.childLanes;\n  workInProgress.lanes = current.lanes;\n\n  workInProgress.child = current.child;\n  workInProgress.memoizedProps = current.memoizedProps;\n  workInProgress.memoizedState = current.memoizedState;\n  workInProgress.updateQueue = current.updateQueue;\n\n  // Clone the dependencies object. This is mutated during the render phase, so\n  // it cannot be shared with the current fiber.\n  const currentDependencies = current.dependencies;\n  workInProgress.dependencies =\n    currentDependencies === null\n      ? null\n      : {\n          lanes: currentDependencies.lanes,\n          firstContext: currentDependencies.firstContext,\n        };\n\n  // These will be overridden during the parent's reconciliation\n  workInProgress.sibling = current.sibling;\n  workInProgress.index = current.index;\n  workInProgress.ref = current.ref;\n\n  if (enableProfilerTimer) {\n    workInProgress.selfBaseDuration = current.selfBaseDuration;\n    workInProgress.treeBaseDuration = current.treeBaseDuration;\n  }\n\n  if (__DEV__) {\n    workInProgress._debugNeedsRemount = current._debugNeedsRemount;\n    switch (workInProgress.tag) {\n      case IndeterminateComponent:\n      case FunctionComponent:\n      case SimpleMemoComponent:\n        workInProgress.type = resolveFunctionForHotReloading(current.type);\n        break;\n      case ClassComponent:\n        workInProgress.type = resolveClassForHotReloading(current.type);\n        break;\n      case ForwardRef:\n        workInProgress.type = resolveForwardRefForHotReloading(current.type);\n        break;\n      default:\n        break;\n    }\n  }\n\n  return workInProgress;\n}\n\n// Used to reuse a Fiber for a second pass.\nexport function resetWorkInProgress(workInProgress: Fiber, renderLanes: Lanes) {\n  // This resets the Fiber to what createFiber or createWorkInProgress would\n  // have set the values to before during the first pass. Ideally this wouldn't\n  // be necessary but unfortunately many code paths reads from the workInProgress\n  // when they should be reading from current and writing to workInProgress.\n\n  // We assume pendingProps, index, key, ref, return are still untouched to\n  // avoid doing another reconciliation.\n\n  // Reset the effect flags but keep any Placement tags, since that's something\n  // that child fiber is setting, not the reconciliation.\n  workInProgress.flags &= StaticMask | Placement;\n\n  // The effects are no longer valid.\n\n  const current = workInProgress.alternate;\n  if (current === null) {\n    // Reset to createFiber's initial values.\n    workInProgress.childLanes = NoLanes;\n    workInProgress.lanes = renderLanes;\n\n    workInProgress.child = null;\n    workInProgress.subtreeFlags = NoFlags;\n    workInProgress.memoizedProps = null;\n    workInProgress.memoizedState = null;\n    workInProgress.updateQueue = null;\n\n    workInProgress.dependencies = null;\n\n    workInProgress.stateNode = null;\n\n    if (enableProfilerTimer) {\n      // Note: We don't reset the actualTime counts. It's useful to accumulate\n      // actual time across multiple render passes.\n      workInProgress.selfBaseDuration = 0;\n      workInProgress.treeBaseDuration = 0;\n    }\n  } else {\n    // Reset to the cloned values that createWorkInProgress would've.\n    workInProgress.childLanes = current.childLanes;\n    workInProgress.lanes = current.lanes;\n\n    workInProgress.child = current.child;\n    workInProgress.subtreeFlags = NoFlags;\n    workInProgress.deletions = null;\n    workInProgress.memoizedProps = current.memoizedProps;\n    workInProgress.memoizedState = current.memoizedState;\n    workInProgress.updateQueue = current.updateQueue;\n    // Needed because Blocks store data on type.\n    workInProgress.type = current.type;\n\n    // Clone the dependencies object. This is mutated during the render phase, so\n    // it cannot be shared with the current fiber.\n    const currentDependencies = current.dependencies;\n    workInProgress.dependencies =\n      currentDependencies === null\n        ? null\n        : {\n            lanes: currentDependencies.lanes,\n            firstContext: currentDependencies.firstContext,\n          };\n\n    if (enableProfilerTimer) {\n      // Note: We don't reset the actualTime counts. It's useful to accumulate\n      // actual time across multiple render passes.\n      workInProgress.selfBaseDuration = current.selfBaseDuration;\n      workInProgress.treeBaseDuration = current.treeBaseDuration;\n    }\n  }\n\n  return workInProgress;\n}\n\nexport function createHostRootFiber(\n  tag: RootTag,\n  isStrictMode: boolean,\n  concurrentUpdatesByDefaultOverride: null | boolean,\n): Fiber {\n  let mode;\n  if (tag === ConcurrentRoot) {\n    mode = ConcurrentMode;\n    if (isStrictMode === true) {\n      mode |= StrictLegacyMode;\n\n      if (enableStrictEffects) {\n        mode |= StrictEffectsMode;\n      }\n    } else if (enableStrictEffects && createRootStrictEffectsByDefault) {\n      mode |= StrictLegacyMode | StrictEffectsMode;\n    }\n    if (\n      // We only use this flag for our repo tests to check both behaviors.\n      // TODO: Flip this flag and rename it something like \"forceConcurrentByDefaultForTesting\"\n      !enableSyncDefaultUpdates ||\n      // Only for internal experiments.\n      (allowConcurrentByDefault && concurrentUpdatesByDefaultOverride)\n    ) {\n      mode |= ConcurrentUpdatesByDefaultMode;\n    }\n  } else {\n    mode = NoMode;\n  }\n\n  if (enableProfilerTimer && isDevToolsPresent) {\n    // Always collect profile timings when DevTools are present.\n    // This enables DevTools to start capturing timing at any point–\n    // Without some nodes in the tree having empty base times.\n    mode |= ProfileMode;\n  }\n\n  return createFiber(HostRoot, null, null, mode);\n}\n\nexport function createFiberFromTypeAndProps(\n  type: any, // React$ElementType\n  key: null | string,\n  pendingProps: any,\n  owner: null | Fiber,\n  mode: TypeOfMode,\n  lanes: Lanes,\n): Fiber {\n  let fiberTag = IndeterminateComponent;\n  // The resolved type is set if we know what the final type will be. I.e. it's not lazy.\n  let resolvedType = type;\n  if (typeof type === 'function') {\n    if (shouldConstruct(type)) {\n      fiberTag = ClassComponent;\n      if (__DEV__) {\n        resolvedType = resolveClassForHotReloading(resolvedType);\n      }\n    } else {\n      if (__DEV__) {\n        resolvedType = resolveFunctionForHotReloading(resolvedType);\n      }\n    }\n  } else if (typeof type === 'string') {\n    fiberTag = HostComponent;\n  } else {\n    getTag: switch (type) {\n      case REACT_FRAGMENT_TYPE:\n        return createFiberFromFragment(pendingProps.children, mode, lanes, key);\n      case REACT_DEBUG_TRACING_MODE_TYPE:\n        fiberTag = Mode;\n        mode |= DebugTracingMode;\n        break;\n      case REACT_STRICT_MODE_TYPE:\n        fiberTag = Mode;\n        mode |= StrictLegacyMode;\n        if (enableStrictEffects && (mode & ConcurrentMode) !== NoMode) {\n          // Strict effects should never run on legacy roots\n          mode |= StrictEffectsMode;\n        }\n        break;\n      case REACT_PROFILER_TYPE:\n        return createFiberFromProfiler(pendingProps, mode, lanes, key);\n      case REACT_SUSPENSE_TYPE:\n        return createFiberFromSuspense(pendingProps, mode, lanes, key);\n      case REACT_SUSPENSE_LIST_TYPE:\n        return createFiberFromSuspenseList(pendingProps, mode, lanes, key);\n      case REACT_OFFSCREEN_TYPE:\n        return createFiberFromOffscreen(pendingProps, mode, lanes, key);\n      case REACT_LEGACY_HIDDEN_TYPE:\n        return createFiberFromLegacyHidden(pendingProps, mode, lanes, key);\n      case REACT_SCOPE_TYPE:\n        if (enableScopeAPI) {\n          return createFiberFromScope(type, pendingProps, mode, lanes, key);\n        }\n      // eslint-disable-next-line no-fallthrough\n      case REACT_CACHE_TYPE:\n        if (enableCache) {\n          return createFiberFromCache(pendingProps, mode, lanes, key);\n        }\n      // eslint-disable-next-line no-fallthrough\n      default: {\n        if (typeof type === 'object' && type !== null) {\n          switch (type.$$typeof) {\n            case REACT_PROVIDER_TYPE:\n              fiberTag = ContextProvider;\n              break getTag;\n            case REACT_CONTEXT_TYPE:\n              // This is a consumer\n              fiberTag = ContextConsumer;\n              break getTag;\n            case REACT_FORWARD_REF_TYPE:\n              fiberTag = ForwardRef;\n              if (__DEV__) {\n                resolvedType = resolveForwardRefForHotReloading(resolvedType);\n              }\n              break getTag;\n            case REACT_MEMO_TYPE:\n              fiberTag = MemoComponent;\n              break getTag;\n            case REACT_LAZY_TYPE:\n              fiberTag = LazyComponent;\n              resolvedType = null;\n              break getTag;\n          }\n        }\n        let info = '';\n        if (__DEV__) {\n          if (\n            type === undefined ||\n            (typeof type === 'object' &&\n              type !== null &&\n              Object.keys(type).length === 0)\n          ) {\n            info +=\n              ' You likely forgot to export your component from the file ' +\n              \"it's defined in, or you might have mixed up default and \" +\n              'named imports.';\n          }\n          const ownerName = owner ? getComponentNameFromFiber(owner) : null;\n          if (ownerName) {\n            info += '\\n\\nCheck the render method of `' + ownerName + '`.';\n          }\n        }\n        invariant(\n          false,\n          'Element type is invalid: expected a string (for built-in ' +\n            'components) or a class/function (for composite components) ' +\n            'but got: %s.%s',\n          type == null ? type : typeof type,\n          info,\n        );\n      }\n    }\n  }\n\n  const fiber = createFiber(fiberTag, pendingProps, key, mode);\n  fiber.elementType = type;\n  fiber.type = resolvedType;\n  fiber.lanes = lanes;\n\n  if (__DEV__) {\n    fiber._debugOwner = owner;\n  }\n\n  return fiber;\n}\n\nexport function createOffscreenHostContainerFiber(\n  props: Props,\n  fiberMode: TypeOfMode,\n  lanes: Lanes,\n  key: null | string,\n): Fiber {\n  if (supportsPersistence) {\n    const type = getOffscreenContainerType();\n    const fiber = createFiber(HostComponent, props, key, fiberMode);\n    fiber.elementType = type;\n    fiber.type = type;\n    fiber.lanes = lanes;\n    return fiber;\n  } else {\n    // Only implemented in persistent mode\n    invariant(false, 'Not implemented.');\n  }\n}\n\nexport function createFiberFromElement(\n  element: ReactElement,\n  mode: TypeOfMode,\n  lanes: Lanes,\n): Fiber {\n  let owner = null;\n  if (__DEV__) {\n    owner = element._owner;\n  }\n  const type = element.type;\n  const key = element.key;\n  const pendingProps = element.props;\n  const fiber = createFiberFromTypeAndProps(\n    type,\n    key,\n    pendingProps,\n    owner,\n    mode,\n    lanes,\n  );\n  if (__DEV__) {\n    fiber._debugSource = element._source;\n    fiber._debugOwner = element._owner;\n  }\n  return fiber;\n}\n\nexport function createFiberFromFragment(\n  elements: ReactFragment,\n  mode: TypeOfMode,\n  lanes: Lanes,\n  key: null | string,\n): Fiber {\n  const fiber = createFiber(Fragment, elements, key, mode);\n  fiber.lanes = lanes;\n  return fiber;\n}\n\nfunction createFiberFromScope(\n  scope: ReactScope,\n  pendingProps: any,\n  mode: TypeOfMode,\n  lanes: Lanes,\n  key: null | string,\n) {\n  const fiber = createFiber(ScopeComponent, pendingProps, key, mode);\n  fiber.type = scope;\n  fiber.elementType = scope;\n  fiber.lanes = lanes;\n  return fiber;\n}\n\nfunction createFiberFromProfiler(\n  pendingProps: any,\n  mode: TypeOfMode,\n  lanes: Lanes,\n  key: null | string,\n): Fiber {\n  if (__DEV__) {\n    if (typeof pendingProps.id !== 'string') {\n      console.error(\n        'Profiler must specify an \"id\" of type `string` as a prop. Received the type `%s` instead.',\n        typeof pendingProps.id,\n      );\n    }\n  }\n\n  const fiber = createFiber(Profiler, pendingProps, key, mode | ProfileMode);\n  fiber.elementType = REACT_PROFILER_TYPE;\n  fiber.lanes = lanes;\n\n  if (enableProfilerTimer) {\n    fiber.stateNode = {\n      effectDuration: 0,\n      passiveEffectDuration: 0,\n    };\n  }\n\n  return fiber;\n}\n\nexport function createFiberFromSuspense(\n  pendingProps: any,\n  mode: TypeOfMode,\n  lanes: Lanes,\n  key: null | string,\n) {\n  const fiber = createFiber(SuspenseComponent, pendingProps, key, mode);\n  fiber.elementType = REACT_SUSPENSE_TYPE;\n  fiber.lanes = lanes;\n  return fiber;\n}\n\nexport function createFiberFromSuspenseList(\n  pendingProps: any,\n  mode: TypeOfMode,\n  lanes: Lanes,\n  key: null | string,\n) {\n  const fiber = createFiber(SuspenseListComponent, pendingProps, key, mode);\n  fiber.elementType = REACT_SUSPENSE_LIST_TYPE;\n  fiber.lanes = lanes;\n  return fiber;\n}\n\nexport function createFiberFromOffscreen(\n  pendingProps: OffscreenProps,\n  mode: TypeOfMode,\n  lanes: Lanes,\n  key: null | string,\n) {\n  const fiber = createFiber(OffscreenComponent, pendingProps, key, mode);\n  fiber.elementType = REACT_OFFSCREEN_TYPE;\n  fiber.lanes = lanes;\n  return fiber;\n}\n\nexport function createFiberFromLegacyHidden(\n  pendingProps: OffscreenProps,\n  mode: TypeOfMode,\n  lanes: Lanes,\n  key: null | string,\n) {\n  const fiber = createFiber(LegacyHiddenComponent, pendingProps, key, mode);\n  fiber.elementType = REACT_LEGACY_HIDDEN_TYPE;\n  fiber.lanes = lanes;\n  return fiber;\n}\n\nexport function createFiberFromCache(\n  pendingProps: any,\n  mode: TypeOfMode,\n  lanes: Lanes,\n  key: null | string,\n) {\n  const fiber = createFiber(CacheComponent, pendingProps, key, mode);\n  fiber.elementType = REACT_CACHE_TYPE;\n  fiber.lanes = lanes;\n  return fiber;\n}\n\nexport function createFiberFromText(\n  content: string,\n  mode: TypeOfMode,\n  lanes: Lanes,\n): Fiber {\n  const fiber = createFiber(HostText, content, null, mode);\n  fiber.lanes = lanes;\n  return fiber;\n}\n\nexport function createFiberFromHostInstanceForDeletion(): Fiber {\n  const fiber = createFiber(HostComponent, null, null, NoMode);\n  fiber.elementType = 'DELETED';\n  return fiber;\n}\n\nexport function createFiberFromDehydratedFragment(\n  dehydratedNode: SuspenseInstance,\n): Fiber {\n  const fiber = createFiber(DehydratedFragment, null, null, NoMode);\n  fiber.stateNode = dehydratedNode;\n  return fiber;\n}\n\nexport function createFiberFromPortal(\n  portal: ReactPortal,\n  mode: TypeOfMode,\n  lanes: Lanes,\n): Fiber {\n  const pendingProps = portal.children !== null ? portal.children : [];\n  const fiber = createFiber(HostPortal, pendingProps, portal.key, mode);\n  fiber.lanes = lanes;\n  fiber.stateNode = {\n    containerInfo: portal.containerInfo,\n    pendingChildren: null, // Used by persistent updates\n    implementation: portal.implementation,\n  };\n  return fiber;\n}\n\n// Used for stashing WIP properties to replay failed work in DEV.\nexport function assignFiberPropertiesInDEV(\n  target: Fiber | null,\n  source: Fiber,\n): Fiber {\n  if (target === null) {\n    // This Fiber's initial properties will always be overwritten.\n    // We only use a Fiber to ensure the same hidden class so DEV isn't slow.\n    target = createFiber(IndeterminateComponent, null, null, NoMode);\n  }\n\n  // This is intentionally written as a list of all properties.\n  // We tried to use Object.assign() instead but this is called in\n  // the hottest path, and Object.assign() was too slow:\n  // https://github.com/facebook/react/issues/12502\n  // This code is DEV-only so size is not a concern.\n\n  target.tag = source.tag;\n  target.key = source.key;\n  target.elementType = source.elementType;\n  target.type = source.type;\n  target.stateNode = source.stateNode;\n  target.return = source.return;\n  target.child = source.child;\n  target.sibling = source.sibling;\n  target.index = source.index;\n  target.ref = source.ref;\n  target.pendingProps = source.pendingProps;\n  target.memoizedProps = source.memoizedProps;\n  target.updateQueue = source.updateQueue;\n  target.memoizedState = source.memoizedState;\n  target.dependencies = source.dependencies;\n  target.mode = source.mode;\n  target.flags = source.flags;\n  target.subtreeFlags = source.subtreeFlags;\n  target.deletions = source.deletions;\n  target.lanes = source.lanes;\n  target.childLanes = source.childLanes;\n  target.alternate = source.alternate;\n  if (enableProfilerTimer) {\n    target.actualDuration = source.actualDuration;\n    target.actualStartTime = source.actualStartTime;\n    target.selfBaseDuration = source.selfBaseDuration;\n    target.treeBaseDuration = source.treeBaseDuration;\n  }\n\n  target._debugSource = source._debugSource;\n  target._debugOwner = source._debugOwner;\n  target._debugNeedsRemount = source._debugNeedsRemount;\n  target._debugHookTypes = source._debugHookTypes;\n  return target;\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {FiberRoot, SuspenseHydrationCallbacks} from './ReactInternalTypes';\nimport type {RootTag} from './ReactRootTags';\n\nimport {noTimeout, supportsHydration} from './ReactFiberHostConfig';\nimport {createHostRootFiber} from './ReactFiber.old';\nimport {\n  NoLane,\n  NoLanes,\n  NoTimestamp,\n  TotalLanes,\n  createLaneMap,\n} from './ReactFiberLane.old';\nimport {\n  enableSuspenseCallback,\n  enableCache,\n  enableProfilerCommitHooks,\n  enableProfilerTimer,\n  enableUpdaterTracking,\n} from 'shared/ReactFeatureFlags';\nimport {initializeUpdateQueue} from './ReactUpdateQueue.old';\nimport {LegacyRoot, ConcurrentRoot} from './ReactRootTags';\n\nfunction FiberRootNode(containerInfo, tag, hydrate) {\n  this.tag = tag;\n  this.containerInfo = containerInfo;\n  this.pendingChildren = null;\n  this.current = null;\n  this.pingCache = null;\n  this.finishedWork = null;\n  this.timeoutHandle = noTimeout;\n  this.context = null;\n  this.pendingContext = null;\n  this.hydrate = hydrate;\n  this.callbackNode = null;\n  this.callbackPriority = NoLane;\n  this.eventTimes = createLaneMap(NoLanes);\n  this.expirationTimes = createLaneMap(NoTimestamp);\n\n  this.pendingLanes = NoLanes;\n  this.suspendedLanes = NoLanes;\n  this.pingedLanes = NoLanes;\n  this.expiredLanes = NoLanes;\n  this.mutableReadLanes = NoLanes;\n  this.finishedLanes = NoLanes;\n\n  this.entangledLanes = NoLanes;\n  this.entanglements = createLaneMap(NoLanes);\n\n  if (enableCache) {\n    this.pooledCache = null;\n    this.pooledCacheLanes = NoLanes;\n  }\n\n  if (supportsHydration) {\n    this.mutableSourceEagerHydrationData = null;\n  }\n\n  if (enableSuspenseCallback) {\n    this.hydrationCallbacks = null;\n  }\n\n  if (enableProfilerTimer && enableProfilerCommitHooks) {\n    this.effectDuration = 0;\n    this.passiveEffectDuration = 0;\n  }\n\n  if (enableUpdaterTracking) {\n    this.memoizedUpdaters = new Set();\n    const pendingUpdatersLaneMap = (this.pendingUpdatersLaneMap = []);\n    for (let i = 0; i < TotalLanes; i++) {\n      pendingUpdatersLaneMap.push(new Set());\n    }\n  }\n\n  if (__DEV__) {\n    switch (tag) {\n      case ConcurrentRoot:\n        this._debugRootType = 'createRoot()';\n        break;\n      case LegacyRoot:\n        this._debugRootType = 'createLegacyRoot()';\n        break;\n    }\n  }\n}\n\nexport function createFiberRoot(\n  containerInfo: any,\n  tag: RootTag,\n  hydrate: boolean,\n  hydrationCallbacks: null | SuspenseHydrationCallbacks,\n  isStrictMode: boolean,\n  concurrentUpdatesByDefaultOverride: null | boolean,\n): FiberRoot {\n  const root: FiberRoot = (new FiberRootNode(containerInfo, tag, hydrate): any);\n  if (enableSuspenseCallback) {\n    root.hydrationCallbacks = hydrationCallbacks;\n  }\n\n  // Cyclic construction. This cheats the type system right now because\n  // stateNode is any.\n  const uninitializedFiber = createHostRootFiber(\n    tag,\n    isStrictMode,\n    concurrentUpdatesByDefaultOverride,\n  );\n  root.current = uninitializedFiber;\n  uninitializedFiber.stateNode = root;\n\n  if (enableCache) {\n    const initialCache = new Map();\n    root.pooledCache = initialCache;\n    const initialState = {\n      element: null,\n      cache: initialCache,\n    };\n    uninitializedFiber.memoizedState = initialState;\n  } else {\n    const initialState = {\n      element: null,\n    };\n    uninitializedFiber.memoizedState = initialState;\n  }\n\n  initializeUpdateQueue(uninitializedFiber);\n\n  return root;\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport {REACT_PORTAL_TYPE} from 'shared/ReactSymbols';\n\nimport type {ReactNodeList, ReactPortal} from 'shared/ReactTypes';\n\nexport function createPortal(\n  children: ReactNodeList,\n  containerInfo: any,\n  // TODO: figure out the API for cross-renderer implementation.\n  implementation: any,\n  key: ?string = null,\n): ReactPortal {\n  return {\n    // This tag allow us to uniquely identify this as a React Portal\n    $$typeof: REACT_PORTAL_TYPE,\n    key: key == null ? null : '' + key,\n    children,\n    containerInfo,\n    implementation,\n  };\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Fiber, SuspenseHydrationCallbacks} from './ReactInternalTypes';\nimport type {FiberRoot} from './ReactInternalTypes';\nimport type {RootTag} from './ReactRootTags';\nimport type {\n  Instance,\n  TextInstance,\n  Container,\n  PublicInstance,\n} from './ReactFiberHostConfig';\nimport type {RendererInspectionConfig} from './ReactFiberHostConfig';\nimport type {ReactNodeList} from 'shared/ReactTypes';\nimport type {Lane} from './ReactFiberLane.old';\nimport type {SuspenseState} from './ReactFiberSuspenseComponent.old';\n\nimport {\n  findCurrentHostFiber,\n  findCurrentHostFiberWithNoPortals,\n} from './ReactFiberTreeReflection';\nimport {get as getInstance} from 'shared/ReactInstanceMap';\nimport {\n  HostComponent,\n  ClassComponent,\n  HostRoot,\n  SuspenseComponent,\n} from './ReactWorkTags';\nimport getComponentNameFromFiber from 'react-reconciler/src/getComponentNameFromFiber';\nimport invariant from 'shared/invariant';\nimport isArray from 'shared/isArray';\nimport {\n  enableSchedulingProfiler,\n  consoleManagedByDevToolsDuringStrictMode,\n} from 'shared/ReactFeatureFlags';\nimport ReactSharedInternals from 'shared/ReactSharedInternals';\nimport {getPublicInstance} from './ReactFiberHostConfig';\nimport {\n  findCurrentUnmaskedContext,\n  processChildContext,\n  emptyContextObject,\n  isContextProvider as isLegacyContextProvider,\n} from './ReactFiberContext.old';\nimport {createFiberRoot} from './ReactFiberRoot.old';\nimport {injectInternals, onScheduleRoot} from './ReactFiberDevToolsHook.old';\nimport {\n  requestEventTime,\n  requestUpdateLane,\n  scheduleUpdateOnFiber,\n  flushRoot,\n  batchedUpdates,\n  flushSync,\n  flushControlled,\n  deferredUpdates,\n  discreteUpdates,\n  flushSyncWithoutWarningIfAlreadyRendering,\n  flushPassiveEffects,\n} from './ReactFiberWorkLoop.old';\nimport {\n  createUpdate,\n  enqueueUpdate,\n  entangleTransitions,\n} from './ReactUpdateQueue.old';\nimport {\n  isRendering as ReactCurrentFiberIsRendering,\n  current as ReactCurrentFiberCurrent,\n  resetCurrentFiber as resetCurrentDebugFiberInDEV,\n  setCurrentFiber as setCurrentDebugFiberInDEV,\n} from './ReactCurrentFiber';\nimport {StrictLegacyMode} from './ReactTypeOfMode';\nimport {\n  SyncLane,\n  SelectiveHydrationLane,\n  NoTimestamp,\n  getHighestPriorityPendingLanes,\n  higherPriorityLane,\n} from './ReactFiberLane.old';\nimport {\n  getCurrentUpdatePriority,\n  runWithPriority,\n} from './ReactEventPriorities.old';\nimport {\n  scheduleRefresh,\n  scheduleRoot,\n  setRefreshHandler,\n  findHostInstancesForRefresh,\n} from './ReactFiberHotReloading.old';\nimport {markRenderScheduled} from './SchedulingProfiler';\nimport ReactVersion from 'shared/ReactVersion';\nexport {registerMutableSourceForHydration} from './ReactMutableSource.old';\nexport {createPortal} from './ReactPortal';\nexport {\n  createComponentSelector,\n  createHasPseudoClassSelector,\n  createRoleSelector,\n  createTestNameSelector,\n  createTextSelector,\n  getFindAllNodesFailureDescription,\n  findAllNodes,\n  findBoundingRects,\n  focusWithin,\n  observeVisibleRects,\n} from './ReactTestSelectors';\n\nimport * as Scheduler from './Scheduler';\nimport {setSuppressWarning} from 'shared/consoleWithStackDev';\nimport {disableLogs, reenableLogs} from 'shared/ConsolePatchingDev';\n\ntype OpaqueRoot = FiberRoot;\n\n// 0 is PROD, 1 is DEV.\n// Might add PROFILE later.\ntype BundleType = 0 | 1;\n\ntype DevToolsConfig = {|\n  bundleType: BundleType,\n  version: string,\n  rendererPackageName: string,\n  // Note: this actually *does* depend on Fiber internal fields.\n  // Used by \"inspect clicked DOM element\" in React DevTools.\n  findFiberByHostInstance?: (instance: Instance | TextInstance) => Fiber | null,\n  rendererConfig?: RendererInspectionConfig,\n|};\n\nlet didWarnAboutNestedUpdates;\nlet didWarnAboutFindNodeInStrictMode;\n\nif (__DEV__) {\n  didWarnAboutNestedUpdates = false;\n  didWarnAboutFindNodeInStrictMode = {};\n}\n\nfunction getContextForSubtree(\n  parentComponent: ?React$Component<any, any>,\n): Object {\n  if (!parentComponent) {\n    return emptyContextObject;\n  }\n\n  const fiber = getInstance(parentComponent);\n  const parentContext = findCurrentUnmaskedContext(fiber);\n\n  if (fiber.tag === ClassComponent) {\n    const Component = fiber.type;\n    if (isLegacyContextProvider(Component)) {\n      return processChildContext(fiber, Component, parentContext);\n    }\n  }\n\n  return parentContext;\n}\n\nfunction findHostInstance(component: Object): PublicInstance | null {\n  const fiber = getInstance(component);\n  if (fiber === undefined) {\n    if (typeof component.render === 'function') {\n      invariant(false, 'Unable to find node on an unmounted component.');\n    } else {\n      invariant(\n        false,\n        'Argument appears to not be a ReactComponent. Keys: %s',\n        Object.keys(component),\n      );\n    }\n  }\n  const hostFiber = findCurrentHostFiber(fiber);\n  if (hostFiber === null) {\n    return null;\n  }\n  return hostFiber.stateNode;\n}\n\nfunction findHostInstanceWithWarning(\n  component: Object,\n  methodName: string,\n): PublicInstance | null {\n  if (__DEV__) {\n    const fiber = getInstance(component);\n    if (fiber === undefined) {\n      if (typeof component.render === 'function') {\n        invariant(false, 'Unable to find node on an unmounted component.');\n      } else {\n        invariant(\n          false,\n          'Argument appears to not be a ReactComponent. Keys: %s',\n          Object.keys(component),\n        );\n      }\n    }\n    const hostFiber = findCurrentHostFiber(fiber);\n    if (hostFiber === null) {\n      return null;\n    }\n    if (hostFiber.mode & StrictLegacyMode) {\n      const componentName = getComponentNameFromFiber(fiber) || 'Component';\n      if (!didWarnAboutFindNodeInStrictMode[componentName]) {\n        didWarnAboutFindNodeInStrictMode[componentName] = true;\n\n        const previousFiber = ReactCurrentFiberCurrent;\n        try {\n          setCurrentDebugFiberInDEV(hostFiber);\n          if (fiber.mode & StrictLegacyMode) {\n            console.error(\n              '%s is deprecated in StrictMode. ' +\n                '%s was passed an instance of %s which is inside StrictMode. ' +\n                'Instead, add a ref directly to the element you want to reference. ' +\n                'Learn more about using refs safely here: ' +\n                'https://reactjs.org/link/strict-mode-find-node',\n              methodName,\n              methodName,\n              componentName,\n            );\n          } else {\n            console.error(\n              '%s is deprecated in StrictMode. ' +\n                '%s was passed an instance of %s which renders StrictMode children. ' +\n                'Instead, add a ref directly to the element you want to reference. ' +\n                'Learn more about using refs safely here: ' +\n                'https://reactjs.org/link/strict-mode-find-node',\n              methodName,\n              methodName,\n              componentName,\n            );\n          }\n        } finally {\n          // Ideally this should reset to previous but this shouldn't be called in\n          // render and there's another warning for that anyway.\n          if (previousFiber) {\n            setCurrentDebugFiberInDEV(previousFiber);\n          } else {\n            resetCurrentDebugFiberInDEV();\n          }\n        }\n      }\n    }\n    return hostFiber.stateNode;\n  }\n  return findHostInstance(component);\n}\n\nexport function createContainer(\n  containerInfo: Container,\n  tag: RootTag,\n  hydrate: boolean,\n  hydrationCallbacks: null | SuspenseHydrationCallbacks,\n  isStrictMode: boolean,\n  concurrentUpdatesByDefaultOverride: null | boolean,\n): OpaqueRoot {\n  return createFiberRoot(\n    containerInfo,\n    tag,\n    hydrate,\n    hydrationCallbacks,\n    isStrictMode,\n    concurrentUpdatesByDefaultOverride,\n  );\n}\n\nexport function updateContainer(\n  element: ReactNodeList,\n  container: OpaqueRoot,\n  parentComponent: ?React$Component<any, any>,\n  callback: ?Function,\n): Lane {\n  if (__DEV__) {\n    onScheduleRoot(container, element);\n  }\n  const current = container.current;\n  const eventTime = requestEventTime();\n  const lane = requestUpdateLane(current);\n\n  if (enableSchedulingProfiler) {\n    markRenderScheduled(lane);\n  }\n\n  const context = getContextForSubtree(parentComponent);\n  if (container.context === null) {\n    container.context = context;\n  } else {\n    container.pendingContext = context;\n  }\n\n  if (__DEV__) {\n    if (\n      ReactCurrentFiberIsRendering &&\n      ReactCurrentFiberCurrent !== null &&\n      !didWarnAboutNestedUpdates\n    ) {\n      didWarnAboutNestedUpdates = true;\n      console.error(\n        'Render methods should be a pure function of props and state; ' +\n          'triggering nested component updates from render is not allowed. ' +\n          'If necessary, trigger nested updates in componentDidUpdate.\\n\\n' +\n          'Check the render method of %s.',\n        getComponentNameFromFiber(ReactCurrentFiberCurrent) || 'Unknown',\n      );\n    }\n  }\n\n  const update = createUpdate(eventTime, lane);\n  // Caution: React DevTools currently depends on this property\n  // being called \"element\".\n  update.payload = {element};\n\n  callback = callback === undefined ? null : callback;\n  if (callback !== null) {\n    if (__DEV__) {\n      if (typeof callback !== 'function') {\n        console.error(\n          'render(...): Expected the last optional `callback` argument to be a ' +\n            'function. Instead received: %s.',\n          callback,\n        );\n      }\n    }\n    update.callback = callback;\n  }\n\n  enqueueUpdate(current, update, lane);\n  const root = scheduleUpdateOnFiber(current, lane, eventTime);\n  if (root !== null) {\n    entangleTransitions(root, current, lane);\n  }\n\n  return lane;\n}\n\nexport {\n  batchedUpdates,\n  deferredUpdates,\n  discreteUpdates,\n  flushControlled,\n  flushSync,\n  flushSyncWithoutWarningIfAlreadyRendering,\n  flushPassiveEffects,\n};\n\nexport function getPublicRootInstance(\n  container: OpaqueRoot,\n): React$Component<any, any> | PublicInstance | null {\n  const containerFiber = container.current;\n  if (!containerFiber.child) {\n    return null;\n  }\n  switch (containerFiber.child.tag) {\n    case HostComponent:\n      return getPublicInstance(containerFiber.child.stateNode);\n    default:\n      return containerFiber.child.stateNode;\n  }\n}\n\nexport function attemptSynchronousHydration(fiber: Fiber): void {\n  switch (fiber.tag) {\n    case HostRoot:\n      const root: FiberRoot = fiber.stateNode;\n      if (root.hydrate) {\n        // Flush the first scheduled \"update\".\n        const lanes = getHighestPriorityPendingLanes(root);\n        flushRoot(root, lanes);\n      }\n      break;\n    case SuspenseComponent:\n      const eventTime = requestEventTime();\n      flushSync(() => scheduleUpdateOnFiber(fiber, SyncLane, eventTime));\n      // If we're still blocked after this, we need to increase\n      // the priority of any promises resolving within this\n      // boundary so that they next attempt also has higher pri.\n      const retryLane = SyncLane;\n      markRetryLaneIfNotHydrated(fiber, retryLane);\n      break;\n  }\n}\n\nfunction markRetryLaneImpl(fiber: Fiber, retryLane: Lane) {\n  const suspenseState: null | SuspenseState = fiber.memoizedState;\n  if (suspenseState !== null && suspenseState.dehydrated !== null) {\n    suspenseState.retryLane = higherPriorityLane(\n      suspenseState.retryLane,\n      retryLane,\n    );\n  }\n}\n\n// Increases the priority of thenables when they resolve within this boundary.\nfunction markRetryLaneIfNotHydrated(fiber: Fiber, retryLane: Lane) {\n  markRetryLaneImpl(fiber, retryLane);\n  const alternate = fiber.alternate;\n  if (alternate) {\n    markRetryLaneImpl(alternate, retryLane);\n  }\n}\n\nexport function attemptDiscreteHydration(fiber: Fiber): void {\n  if (fiber.tag !== SuspenseComponent) {\n    // We ignore HostRoots here because we can't increase\n    // their priority and they should not suspend on I/O,\n    // since you have to wrap anything that might suspend in\n    // Suspense.\n    return;\n  }\n  const eventTime = requestEventTime();\n  const lane = SyncLane;\n  scheduleUpdateOnFiber(fiber, lane, eventTime);\n  markRetryLaneIfNotHydrated(fiber, lane);\n}\n\nexport function attemptContinuousHydration(fiber: Fiber): void {\n  if (fiber.tag !== SuspenseComponent) {\n    // We ignore HostRoots here because we can't increase\n    // their priority and they should not suspend on I/O,\n    // since you have to wrap anything that might suspend in\n    // Suspense.\n    return;\n  }\n  const eventTime = requestEventTime();\n  const lane = SelectiveHydrationLane;\n  scheduleUpdateOnFiber(fiber, lane, eventTime);\n  markRetryLaneIfNotHydrated(fiber, lane);\n}\n\nexport function attemptHydrationAtCurrentPriority(fiber: Fiber): void {\n  if (fiber.tag !== SuspenseComponent) {\n    // We ignore HostRoots here because we can't increase\n    // their priority other than synchronously flush it.\n    return;\n  }\n  const eventTime = requestEventTime();\n  const lane = requestUpdateLane(fiber);\n  scheduleUpdateOnFiber(fiber, lane, eventTime);\n  markRetryLaneIfNotHydrated(fiber, lane);\n}\n\nexport {getCurrentUpdatePriority, runWithPriority};\n\nexport {findHostInstance};\n\nexport {findHostInstanceWithWarning};\n\nexport function findHostInstanceWithNoPortals(\n  fiber: Fiber,\n): PublicInstance | null {\n  const hostFiber = findCurrentHostFiberWithNoPortals(fiber);\n  if (hostFiber === null) {\n    return null;\n  }\n  return hostFiber.stateNode;\n}\n\nlet shouldErrorImpl = fiber => null;\n\nexport function shouldError(fiber: Fiber): ?boolean {\n  return shouldErrorImpl(fiber);\n}\n\nlet shouldSuspendImpl = fiber => false;\n\nexport function shouldSuspend(fiber: Fiber): boolean {\n  return shouldSuspendImpl(fiber);\n}\n\nlet isStrictMode = false;\n\nlet overrideHookState = null;\nlet overrideHookStateDeletePath = null;\nlet overrideHookStateRenamePath = null;\nlet overrideProps = null;\nlet overridePropsDeletePath = null;\nlet overridePropsRenamePath = null;\nlet scheduleUpdate = null;\nlet setErrorHandler = null;\nlet setSuspenseHandler = null;\n\nif (__DEV__) {\n  const copyWithDeleteImpl = (\n    obj: Object | Array<any>,\n    path: Array<string | number>,\n    index: number,\n  ) => {\n    const key = path[index];\n    const updated = isArray(obj) ? obj.slice() : {...obj};\n    if (index + 1 === path.length) {\n      if (isArray(updated)) {\n        updated.splice(((key: any): number), 1);\n      } else {\n        delete updated[key];\n      }\n      return updated;\n    }\n    // $FlowFixMe number or string is fine here\n    updated[key] = copyWithDeleteImpl(obj[key], path, index + 1);\n    return updated;\n  };\n\n  const copyWithDelete = (\n    obj: Object | Array<any>,\n    path: Array<string | number>,\n  ): Object | Array<any> => {\n    return copyWithDeleteImpl(obj, path, 0);\n  };\n\n  const copyWithRenameImpl = (\n    obj: Object | Array<any>,\n    oldPath: Array<string | number>,\n    newPath: Array<string | number>,\n    index: number,\n  ) => {\n    const oldKey = oldPath[index];\n    const updated = isArray(obj) ? obj.slice() : {...obj};\n    if (index + 1 === oldPath.length) {\n      const newKey = newPath[index];\n      // $FlowFixMe number or string is fine here\n      updated[newKey] = updated[oldKey];\n      if (isArray(updated)) {\n        updated.splice(((oldKey: any): number), 1);\n      } else {\n        delete updated[oldKey];\n      }\n    } else {\n      // $FlowFixMe number or string is fine here\n      updated[oldKey] = copyWithRenameImpl(\n        // $FlowFixMe number or string is fine here\n        obj[oldKey],\n        oldPath,\n        newPath,\n        index + 1,\n      );\n    }\n    return updated;\n  };\n\n  const copyWithRename = (\n    obj: Object | Array<any>,\n    oldPath: Array<string | number>,\n    newPath: Array<string | number>,\n  ): Object | Array<any> => {\n    if (oldPath.length !== newPath.length) {\n      console.warn('copyWithRename() expects paths of the same length');\n      return;\n    } else {\n      for (let i = 0; i < newPath.length - 1; i++) {\n        if (oldPath[i] !== newPath[i]) {\n          console.warn(\n            'copyWithRename() expects paths to be the same except for the deepest key',\n          );\n          return;\n        }\n      }\n    }\n    return copyWithRenameImpl(obj, oldPath, newPath, 0);\n  };\n\n  const copyWithSetImpl = (\n    obj: Object | Array<any>,\n    path: Array<string | number>,\n    index: number,\n    value: any,\n  ) => {\n    if (index >= path.length) {\n      return value;\n    }\n    const key = path[index];\n    const updated = isArray(obj) ? obj.slice() : {...obj};\n    // $FlowFixMe number or string is fine here\n    updated[key] = copyWithSetImpl(obj[key], path, index + 1, value);\n    return updated;\n  };\n\n  const copyWithSet = (\n    obj: Object | Array<any>,\n    path: Array<string | number>,\n    value: any,\n  ): Object | Array<any> => {\n    return copyWithSetImpl(obj, path, 0, value);\n  };\n\n  const findHook = (fiber: Fiber, id: number) => {\n    // For now, the \"id\" of stateful hooks is just the stateful hook index.\n    // This may change in the future with e.g. nested hooks.\n    let currentHook = fiber.memoizedState;\n    while (currentHook !== null && id > 0) {\n      currentHook = currentHook.next;\n      id--;\n    }\n    return currentHook;\n  };\n\n  // Support DevTools editable values for useState and useReducer.\n  overrideHookState = (\n    fiber: Fiber,\n    id: number,\n    path: Array<string | number>,\n    value: any,\n  ) => {\n    const hook = findHook(fiber, id);\n    if (hook !== null) {\n      const newState = copyWithSet(hook.memoizedState, path, value);\n      hook.memoizedState = newState;\n      hook.baseState = newState;\n\n      // We aren't actually adding an update to the queue,\n      // because there is no update we can add for useReducer hooks that won't trigger an error.\n      // (There's no appropriate action type for DevTools overrides.)\n      // As a result though, React will see the scheduled update as a noop and bailout.\n      // Shallow cloning props works as a workaround for now to bypass the bailout check.\n      fiber.memoizedProps = {...fiber.memoizedProps};\n\n      scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);\n    }\n  };\n  overrideHookStateDeletePath = (\n    fiber: Fiber,\n    id: number,\n    path: Array<string | number>,\n  ) => {\n    const hook = findHook(fiber, id);\n    if (hook !== null) {\n      const newState = copyWithDelete(hook.memoizedState, path);\n      hook.memoizedState = newState;\n      hook.baseState = newState;\n\n      // We aren't actually adding an update to the queue,\n      // because there is no update we can add for useReducer hooks that won't trigger an error.\n      // (There's no appropriate action type for DevTools overrides.)\n      // As a result though, React will see the scheduled update as a noop and bailout.\n      // Shallow cloning props works as a workaround for now to bypass the bailout check.\n      fiber.memoizedProps = {...fiber.memoizedProps};\n\n      scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);\n    }\n  };\n  overrideHookStateRenamePath = (\n    fiber: Fiber,\n    id: number,\n    oldPath: Array<string | number>,\n    newPath: Array<string | number>,\n  ) => {\n    const hook = findHook(fiber, id);\n    if (hook !== null) {\n      const newState = copyWithRename(hook.memoizedState, oldPath, newPath);\n      hook.memoizedState = newState;\n      hook.baseState = newState;\n\n      // We aren't actually adding an update to the queue,\n      // because there is no update we can add for useReducer hooks that won't trigger an error.\n      // (There's no appropriate action type for DevTools overrides.)\n      // As a result though, React will see the scheduled update as a noop and bailout.\n      // Shallow cloning props works as a workaround for now to bypass the bailout check.\n      fiber.memoizedProps = {...fiber.memoizedProps};\n\n      scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);\n    }\n  };\n\n  // Support DevTools props for function components, forwardRef, memo, host components, etc.\n  overrideProps = (fiber: Fiber, path: Array<string | number>, value: any) => {\n    fiber.pendingProps = copyWithSet(fiber.memoizedProps, path, value);\n    if (fiber.alternate) {\n      fiber.alternate.pendingProps = fiber.pendingProps;\n    }\n    scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);\n  };\n  overridePropsDeletePath = (fiber: Fiber, path: Array<string | number>) => {\n    fiber.pendingProps = copyWithDelete(fiber.memoizedProps, path);\n    if (fiber.alternate) {\n      fiber.alternate.pendingProps = fiber.pendingProps;\n    }\n    scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);\n  };\n  overridePropsRenamePath = (\n    fiber: Fiber,\n    oldPath: Array<string | number>,\n    newPath: Array<string | number>,\n  ) => {\n    fiber.pendingProps = copyWithRename(fiber.memoizedProps, oldPath, newPath);\n    if (fiber.alternate) {\n      fiber.alternate.pendingProps = fiber.pendingProps;\n    }\n    scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);\n  };\n\n  scheduleUpdate = (fiber: Fiber) => {\n    scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);\n  };\n\n  setErrorHandler = (newShouldErrorImpl: Fiber => ?boolean) => {\n    shouldErrorImpl = newShouldErrorImpl;\n  };\n\n  setSuspenseHandler = (newShouldSuspendImpl: Fiber => boolean) => {\n    shouldSuspendImpl = newShouldSuspendImpl;\n  };\n}\n\nfunction findHostInstanceByFiber(fiber: Fiber): Instance | TextInstance | null {\n  const hostFiber = findCurrentHostFiber(fiber);\n  if (hostFiber === null) {\n    return null;\n  }\n  return hostFiber.stateNode;\n}\n\nfunction emptyFindFiberByHostInstance(\n  instance: Instance | TextInstance,\n): Fiber | null {\n  return null;\n}\n\nfunction getCurrentFiberForDevTools() {\n  return ReactCurrentFiberCurrent;\n}\n\nexport function getIsStrictModeForDevtools() {\n  return isStrictMode;\n}\n\nexport function setIsStrictModeForDevtools(newIsStrictMode: boolean) {\n  isStrictMode = newIsStrictMode;\n\n  if (consoleManagedByDevToolsDuringStrictMode) {\n    // We're in a test because Scheduler.unstable_yieldValue only exists\n    // in SchedulerMock. To reduce the noise in strict mode tests,\n    // suppress warnings and disable scheduler yielding during the double render\n    if (typeof Scheduler.unstable_yieldValue === 'function') {\n      Scheduler.unstable_setDisableYieldValue(newIsStrictMode);\n      setSuppressWarning(newIsStrictMode);\n    }\n  } else {\n    if (newIsStrictMode) {\n      disableLogs();\n    } else {\n      reenableLogs();\n    }\n  }\n}\n\nexport function injectIntoDevTools(devToolsConfig: DevToolsConfig): boolean {\n  const {findFiberByHostInstance} = devToolsConfig;\n  const {ReactCurrentDispatcher} = ReactSharedInternals;\n\n  return injectInternals({\n    bundleType: devToolsConfig.bundleType,\n    version: devToolsConfig.version,\n    rendererPackageName: devToolsConfig.rendererPackageName,\n    rendererConfig: devToolsConfig.rendererConfig,\n    overrideHookState,\n    overrideHookStateDeletePath,\n    overrideHookStateRenamePath,\n    overrideProps,\n    overridePropsDeletePath,\n    overridePropsRenamePath,\n    setErrorHandler,\n    setSuspenseHandler,\n    scheduleUpdate,\n    currentDispatcherRef: ReactCurrentDispatcher,\n    findHostInstanceByFiber,\n    findFiberByHostInstance:\n      findFiberByHostInstance || emptyFindFiberByHostInstance,\n    // React Refresh\n    findHostInstancesForRefresh: __DEV__ ? findHostInstancesForRefresh : null,\n    scheduleRefresh: __DEV__ ? scheduleRefresh : null,\n    scheduleRoot: __DEV__ ? scheduleRoot : null,\n    setRefreshHandler: __DEV__ ? setRefreshHandler : null,\n    // Enables DevTools to append owner stacks to error messages in DEV mode.\n    getCurrentFiber: __DEV__ ? getCurrentFiberForDevTools : null,\n    getIsStrictMode: __DEV__ ? getIsStrictModeForDevtools : null,\n    // Enables DevTools to detect reconciler version rather than renderer version\n    // which may not match for third party renderers.\n    reconcilerVersion: ReactVersion,\n  });\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Fiber} from 'react-reconciler/src/ReactInternalTypes';\nimport type {TouchedViewDataAtPoint, InspectorData} from './ReactNativeTypes';\n\nimport {\n  findCurrentHostFiber,\n  findCurrentFiberUsingSlowPath,\n} from 'react-reconciler/src/ReactFiberTreeReflection';\nimport getComponentNameFromType from 'shared/getComponentNameFromType';\nimport {HostComponent} from 'react-reconciler/src/ReactWorkTags';\nimport invariant from 'shared/invariant';\n// Module provided by RN:\nimport {UIManager} from 'react-native/Libraries/ReactPrivate/ReactNativePrivateInterface';\nimport {enableGetInspectorDataForInstanceInProduction} from 'shared/ReactFeatureFlags';\nimport {getClosestInstanceFromNode} from './ReactNativeComponentTree';\n\nconst emptyObject = {};\nif (__DEV__) {\n  Object.freeze(emptyObject);\n}\n\nlet createHierarchy;\nlet getHostNode;\nlet getHostProps;\nlet lastNonHostInstance;\nlet getInspectorDataForInstance;\nlet getOwnerHierarchy;\nlet traverseOwnerTreeUp;\n\nif (__DEV__ || enableGetInspectorDataForInstanceInProduction) {\n  createHierarchy = function(fiberHierarchy) {\n    return fiberHierarchy.map(fiber => ({\n      name: getComponentNameFromType(fiber.type),\n      getInspectorData: findNodeHandle => {\n        return {\n          props: getHostProps(fiber),\n          source: fiber._debugSource,\n          measure: callback => {\n            // If this is Fabric, we'll find a ShadowNode and use that to measure.\n            const hostFiber = findCurrentHostFiber(fiber);\n            const shadowNode =\n              hostFiber != null &&\n              hostFiber.stateNode !== null &&\n              hostFiber.stateNode.node;\n\n            if (shadowNode) {\n              nativeFabricUIManager.measure(shadowNode, callback);\n            } else {\n              return UIManager.measure(\n                getHostNode(fiber, findNodeHandle),\n                callback,\n              );\n            }\n          },\n        };\n      },\n    }));\n  };\n\n  getHostNode = function(fiber: Fiber | null, findNodeHandle) {\n    let hostNode;\n    // look for children first for the hostNode\n    // as composite fibers do not have a hostNode\n    while (fiber) {\n      if (fiber.stateNode !== null && fiber.tag === HostComponent) {\n        hostNode = findNodeHandle(fiber.stateNode);\n      }\n      if (hostNode) {\n        return hostNode;\n      }\n      fiber = fiber.child;\n    }\n    return null;\n  };\n\n  getHostProps = function(fiber) {\n    const host = findCurrentHostFiber(fiber);\n    if (host) {\n      return host.memoizedProps || emptyObject;\n    }\n    return emptyObject;\n  };\n\n  getInspectorDataForInstance = function(\n    closestInstance: Fiber | null,\n  ): InspectorData {\n    // Handle case where user clicks outside of ReactNative\n    if (!closestInstance) {\n      return {\n        hierarchy: [],\n        props: emptyObject,\n        selectedIndex: null,\n        source: null,\n      };\n    }\n\n    const fiber = findCurrentFiberUsingSlowPath(closestInstance);\n    const fiberHierarchy = getOwnerHierarchy(fiber);\n    const instance = lastNonHostInstance(fiberHierarchy);\n    const hierarchy = createHierarchy(fiberHierarchy);\n    const props = getHostProps(instance);\n    const source = instance._debugSource;\n    const selectedIndex = fiberHierarchy.indexOf(instance);\n\n    return {\n      hierarchy,\n      props,\n      selectedIndex,\n      source,\n    };\n  };\n\n  getOwnerHierarchy = function(instance: any) {\n    const hierarchy = [];\n    traverseOwnerTreeUp(hierarchy, instance);\n    return hierarchy;\n  };\n\n  lastNonHostInstance = function(hierarchy) {\n    for (let i = hierarchy.length - 1; i > 1; i--) {\n      const instance = hierarchy[i];\n\n      if (instance.tag !== HostComponent) {\n        return instance;\n      }\n    }\n    return hierarchy[0];\n  };\n\n  traverseOwnerTreeUp = function(hierarchy, instance: any) {\n    if (instance) {\n      hierarchy.unshift(instance);\n      traverseOwnerTreeUp(hierarchy, instance._debugOwner);\n    }\n  };\n}\n\nlet getInspectorDataForViewTag;\nlet getInspectorDataForViewAtPoint;\n\nif (__DEV__) {\n  getInspectorDataForViewTag = function(viewTag: number): Object {\n    const closestInstance = getClosestInstanceFromNode(viewTag);\n\n    // Handle case where user clicks outside of ReactNative\n    if (!closestInstance) {\n      return {\n        hierarchy: [],\n        props: emptyObject,\n        selectedIndex: null,\n        source: null,\n      };\n    }\n\n    const fiber = findCurrentFiberUsingSlowPath(closestInstance);\n    const fiberHierarchy = getOwnerHierarchy(fiber);\n    const instance = lastNonHostInstance(fiberHierarchy);\n    const hierarchy = createHierarchy(fiberHierarchy);\n    const props = getHostProps(instance);\n    const source = instance._debugSource;\n    const selectedIndex = fiberHierarchy.indexOf(instance);\n\n    return {\n      hierarchy,\n      props,\n      selectedIndex,\n      source,\n    };\n  };\n\n  getInspectorDataForViewAtPoint = function(\n    findNodeHandle: (componentOrHandle: any) => ?number,\n    inspectedView: Object,\n    locationX: number,\n    locationY: number,\n    callback: (viewData: TouchedViewDataAtPoint) => mixed,\n  ): void {\n    let closestInstance = null;\n\n    if (inspectedView._internalInstanceHandle != null) {\n      // For Fabric we can look up the instance handle directly and measure it.\n      nativeFabricUIManager.findNodeAtPoint(\n        inspectedView._internalInstanceHandle.stateNode.node,\n        locationX,\n        locationY,\n        internalInstanceHandle => {\n          if (internalInstanceHandle == null) {\n            callback({\n              pointerY: locationY,\n              frame: {left: 0, top: 0, width: 0, height: 0},\n              ...getInspectorDataForInstance(closestInstance),\n            });\n          }\n\n          closestInstance =\n            internalInstanceHandle.stateNode.canonical._internalInstanceHandle;\n\n          // Note: this is deprecated and we want to remove it ASAP. Keeping it here for React DevTools compatibility for now.\n          const nativeViewTag =\n            internalInstanceHandle.stateNode.canonical._nativeTag;\n\n          nativeFabricUIManager.measure(\n            internalInstanceHandle.stateNode.node,\n            (x, y, width, height, pageX, pageY) => {\n              const inspectorData = getInspectorDataForInstance(\n                closestInstance,\n              );\n              callback({\n                ...inspectorData,\n                pointerY: locationY,\n                frame: {left: pageX, top: pageY, width, height},\n                touchedViewTag: nativeViewTag,\n              });\n            },\n          );\n        },\n      );\n    } else if (inspectedView._internalFiberInstanceHandleDEV != null) {\n      // For Paper we fall back to the old strategy using the React tag.\n      UIManager.findSubviewIn(\n        findNodeHandle(inspectedView),\n        [locationX, locationY],\n        (nativeViewTag, left, top, width, height) => {\n          const inspectorData = getInspectorDataForInstance(\n            getClosestInstanceFromNode(nativeViewTag),\n          );\n          callback({\n            ...inspectorData,\n            pointerY: locationY,\n            frame: {left, top, width, height},\n            touchedViewTag: nativeViewTag,\n          });\n        },\n      );\n    } else {\n      console.error(\n        'getInspectorDataForViewAtPoint expects to receive a host component',\n      );\n\n      return;\n    }\n  };\n} else {\n  getInspectorDataForViewTag = () => {\n    invariant(\n      false,\n      'getInspectorDataForViewTag() is not available in production',\n    );\n  };\n\n  getInspectorDataForViewAtPoint = (\n    findNodeHandle: (componentOrHandle: any) => ?number,\n    inspectedView: Object,\n    locationX: number,\n    locationY: number,\n    callback: (viewData: TouchedViewDataAtPoint) => mixed,\n  ): void => {\n    invariant(\n      false,\n      'getInspectorDataForViewAtPoint() is not available in production.',\n    );\n  };\n}\n\nexport {\n  getInspectorDataForInstance,\n  getInspectorDataForViewAtPoint,\n  getInspectorDataForViewTag,\n};\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {HostComponent} from './ReactNativeTypes';\nimport type {ReactNodeList} from 'shared/ReactTypes';\nimport type {ElementRef, Element, ElementType} from 'react';\n\nimport './ReactNativeInjection';\n\nimport {\n  findHostInstance,\n  findHostInstanceWithWarning,\n  batchedUpdates as batchedUpdatesImpl,\n  discreteUpdates,\n  createContainer,\n  updateContainer,\n  injectIntoDevTools,\n  getPublicRootInstance,\n} from 'react-reconciler/src/ReactFiberReconciler';\n// TODO: direct imports like some-package/src/* are bad. Fix me.\nimport {getStackByFiberInDevAndProd} from 'react-reconciler/src/ReactFiberComponentStack';\nimport {createPortal as createPortalImpl} from 'react-reconciler/src/ReactPortal';\nimport {\n  setBatchingImplementation,\n  batchedUpdates,\n} from './legacy-events/ReactGenericBatching';\nimport ReactVersion from 'shared/ReactVersion';\n// Modules provided by RN:\nimport {\n  UIManager,\n  legacySendAccessibilityEvent,\n} from 'react-native/Libraries/ReactPrivate/ReactNativePrivateInterface';\nimport {getInspectorDataForInstance} from './ReactNativeFiberInspector';\n\nimport {getClosestInstanceFromNode} from './ReactNativeComponentTree';\nimport {\n  getInspectorDataForViewTag,\n  getInspectorDataForViewAtPoint,\n} from './ReactNativeFiberInspector';\nimport {LegacyRoot} from 'react-reconciler/src/ReactRootTags';\nimport ReactSharedInternals from 'shared/ReactSharedInternals';\nimport getComponentNameFromType from 'shared/getComponentNameFromType';\n\nconst ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;\n\nfunction findHostInstance_DEPRECATED(\n  componentOrHandle: any,\n): ?React$ElementRef<HostComponent<mixed>> {\n  if (__DEV__) {\n    const owner = ReactCurrentOwner.current;\n    if (owner !== null && owner.stateNode !== null) {\n      if (!owner.stateNode._warnedAboutRefsInRender) {\n        console.error(\n          '%s is accessing findNodeHandle inside its render(). ' +\n            'render() should be a pure function of props and state. It should ' +\n            'never access something that requires stale data from the previous ' +\n            'render, such as refs. Move this logic to componentDidMount and ' +\n            'componentDidUpdate instead.',\n          getComponentNameFromType(owner.type) || 'A component',\n        );\n      }\n\n      owner.stateNode._warnedAboutRefsInRender = true;\n    }\n  }\n  if (componentOrHandle == null) {\n    return null;\n  }\n  if (componentOrHandle._nativeTag) {\n    return componentOrHandle;\n  }\n  if (componentOrHandle.canonical && componentOrHandle.canonical._nativeTag) {\n    return componentOrHandle.canonical;\n  }\n  let hostInstance;\n  if (__DEV__) {\n    hostInstance = findHostInstanceWithWarning(\n      componentOrHandle,\n      'findHostInstance_DEPRECATED',\n    );\n  } else {\n    hostInstance = findHostInstance(componentOrHandle);\n  }\n\n  if (hostInstance == null) {\n    return hostInstance;\n  }\n  if ((hostInstance: any).canonical) {\n    // Fabric\n    return (hostInstance: any).canonical;\n  }\n  // $FlowFixMe[incompatible-return]\n  return hostInstance;\n}\n\nfunction findNodeHandle(componentOrHandle: any): ?number {\n  if (__DEV__) {\n    const owner = ReactCurrentOwner.current;\n    if (owner !== null && owner.stateNode !== null) {\n      if (!owner.stateNode._warnedAboutRefsInRender) {\n        console.error(\n          '%s is accessing findNodeHandle inside its render(). ' +\n            'render() should be a pure function of props and state. It should ' +\n            'never access something that requires stale data from the previous ' +\n            'render, such as refs. Move this logic to componentDidMount and ' +\n            'componentDidUpdate instead.',\n          getComponentNameFromType(owner.type) || 'A component',\n        );\n      }\n\n      owner.stateNode._warnedAboutRefsInRender = true;\n    }\n  }\n  if (componentOrHandle == null) {\n    return null;\n  }\n  if (typeof componentOrHandle === 'number') {\n    // Already a node handle\n    return componentOrHandle;\n  }\n  if (componentOrHandle._nativeTag) {\n    return componentOrHandle._nativeTag;\n  }\n  if (componentOrHandle.canonical && componentOrHandle.canonical._nativeTag) {\n    return componentOrHandle.canonical._nativeTag;\n  }\n  let hostInstance;\n  if (__DEV__) {\n    hostInstance = findHostInstanceWithWarning(\n      componentOrHandle,\n      'findNodeHandle',\n    );\n  } else {\n    hostInstance = findHostInstance(componentOrHandle);\n  }\n\n  if (hostInstance == null) {\n    return hostInstance;\n  }\n  if ((hostInstance: any).canonical) {\n    // Fabric\n    return (hostInstance: any).canonical._nativeTag;\n  }\n  return hostInstance._nativeTag;\n}\n\nfunction dispatchCommand(handle: any, command: string, args: Array<any>) {\n  if (handle._nativeTag == null) {\n    if (__DEV__) {\n      console.error(\n        \"dispatchCommand was called with a ref that isn't a \" +\n          'native component. Use React.forwardRef to get access to the underlying native component',\n      );\n    }\n    return;\n  }\n\n  if (handle._internalInstanceHandle != null) {\n    const {stateNode} = handle._internalInstanceHandle;\n    if (stateNode != null) {\n      nativeFabricUIManager.dispatchCommand(stateNode.node, command, args);\n    }\n  } else {\n    UIManager.dispatchViewManagerCommand(handle._nativeTag, command, args);\n  }\n}\n\nfunction sendAccessibilityEvent(handle: any, eventType: string) {\n  if (handle._nativeTag == null) {\n    if (__DEV__) {\n      console.error(\n        \"sendAccessibilityEvent was called with a ref that isn't a \" +\n          'native component. Use React.forwardRef to get access to the underlying native component',\n      );\n    }\n    return;\n  }\n\n  if (handle._internalInstanceHandle != null) {\n    const {stateNode} = handle._internalInstanceHandle;\n    if (stateNode != null) {\n      nativeFabricUIManager.sendAccessibilityEvent(stateNode.node, eventType);\n    }\n  } else {\n    legacySendAccessibilityEvent(handle._nativeTag, eventType);\n  }\n}\n\nfunction render(\n  element: Element<ElementType>,\n  containerTag: number,\n  callback: ?() => void,\n): ?ElementRef<ElementType> {\n  let root = roots.get(containerTag);\n\n  if (!root) {\n    // TODO (bvaughn): If we decide to keep the wrapper component,\n    // We could create a wrapper for containerTag as well to reduce special casing.\n    root = createContainer(containerTag, LegacyRoot, false, null, false, null);\n    roots.set(containerTag, root);\n  }\n  updateContainer(element, root, null, callback);\n\n  // $FlowIssue Flow has hardcoded values for React DOM that don't work with RN\n  return getPublicRootInstance(root);\n}\n\nfunction unmountComponentAtNode(containerTag: number) {\n  const root = roots.get(containerTag);\n  if (root) {\n    // TODO: Is it safe to reset this now or should I wait since this unmount could be deferred?\n    updateContainer(null, root, null, () => {\n      roots.delete(containerTag);\n    });\n  }\n}\n\nfunction unmountComponentAtNodeAndRemoveContainer(containerTag: number) {\n  unmountComponentAtNode(containerTag);\n\n  // Call back into native to remove all of the subviews from this container\n  UIManager.removeRootView(containerTag);\n}\n\nfunction createPortal(\n  children: ReactNodeList,\n  containerTag: number,\n  key: ?string = null,\n) {\n  return createPortalImpl(children, containerTag, null, key);\n}\n\nsetBatchingImplementation(batchedUpdatesImpl, discreteUpdates);\n\nfunction computeComponentStackForErrorReporting(reactTag: number): string {\n  const fiber = getClosestInstanceFromNode(reactTag);\n  if (!fiber) {\n    return '';\n  }\n  return getStackByFiberInDevAndProd(fiber);\n}\n\nconst roots = new Map();\n\nconst Internals = {\n  computeComponentStackForErrorReporting,\n};\n\nexport {\n  // This is needed for implementation details of TouchableNativeFeedback\n  // Remove this once TouchableNativeFeedback doesn't use cloneElement\n  findHostInstance_DEPRECATED,\n  findNodeHandle,\n  dispatchCommand,\n  sendAccessibilityEvent,\n  render,\n  unmountComponentAtNode,\n  unmountComponentAtNodeAndRemoveContainer,\n  createPortal,\n  batchedUpdates as unstable_batchedUpdates,\n  Internals as __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,\n  // This export is typically undefined in production builds.\n  // See the \"enableGetInspectorDataForInstanceInProduction\" flag.\n  getInspectorDataForInstance,\n};\n\ninjectIntoDevTools({\n  findFiberByHostInstance: getClosestInstanceFromNode,\n  bundleType: __DEV__ ? 1 : 0,\n  version: ReactVersion,\n  rendererPackageName: 'react-native-renderer',\n  rendererConfig: {\n    getInspectorDataForViewTag: getInspectorDataForViewTag,\n    getInspectorDataForViewAtPoint: getInspectorDataForViewAtPoint.bind(\n      null,\n      findNodeHandle,\n    ),\n  },\n});\n"],"names":["invokeGuardedCallbackProd","name","func","context","a","b","c","d","e","f","funcArgs","Array","prototype","slice","call","arguments","apply","error","onError","invokeGuardedCallbackImpl","hasError","caughtError","hasRethrowError","rethrowError","reporter","invokeGuardedCallback","invokeGuardedCallbackAndCatchFirstError","clearCaughtError","rethrowCaughtError","isArrayImpl","isArray","getFiberCurrentPropsFromNode","getInstanceFromNode","getNodeFromInstance","setComponentTree","getFiberCurrentPropsFromNodeImpl","getInstanceFromNodeImpl","getNodeFromInstanceImpl","executeDispatch","event","listener","inst","type","currentTarget","undefined","executeDispatchesInOrder","dispatchListeners","_dispatchListeners","dispatchInstances","_dispatchInstances","i","length","isPropagationStopped","executeDispatchesInOrderStopAtTrueImpl","executeDispatchesInOrderStopAtTrue","ret","executeDirectDispatch","dispatchListener","dispatchInstance","res","hasDispatches","EVENT_POOL_SIZE","EventInterface","target","eventPhase","bubbles","cancelable","timeStamp","Date","now","defaultPrevented","isTrusted","functionThatReturnsTrue","functionThatReturnsFalse","SyntheticEvent","dispatchConfig","targetInst","nativeEvent","nativeEventTarget","_targetInst","Interface","constructor","propName","hasOwnProperty","normalize","returnValue","isDefaultPrevented","Object","assign","preventDefault","stopPropagation","cancelBubble","persist","isPersistent","destructor","extend","Super","E","Class","addEventPoolingTo","createOrGetPooledEvent","nativeInst","EventConstructor","eventPool","instance","pop","releasePooledEvent","push","getPooled","release","ResponderSyntheticEvent","touchHistory","TOP_TOUCH_START","TOP_TOUCH_MOVE","TOP_TOUCH_END","TOP_TOUCH_CANCEL","TOP_SCROLL","TOP_SELECTION_CHANGE","isStartish","topLevelType","isMoveish","isEndish","startDependencies","moveDependencies","endDependencies","touchBank","numberActiveTouches","indexOfSingleActiveTouch","mostRecentTimeStamp","timestampForTouch","touch","timestamp","createTouchRecord","touchActive","startPageX","pageX","startPageY","pageY","startTimeStamp","currentPageX","currentPageY","currentTimeStamp","previousPageX","previousPageY","previousTimeStamp","resetTouchRecord","touchRecord","getTouchIdentifier","identifier","recordTouchStart","recordTouchMove","recordTouchEnd","instrumentationCallback","ResponderTouchHistoryStore","instrument","callback","recordTouchTrack","changedTouches","forEach","touches","touchTrackToCheck","accumulate","current","next","concat","accumulateInto","forEachAccumulated","arr","cb","scope","FunctionComponent","ClassComponent","IndeterminateComponent","HostRoot","HostPortal","HostComponent","HostText","Fragment","Mode","ContextConsumer","ContextProvider","ForwardRef","Profiler","SuspenseComponent","MemoComponent","SimpleMemoComponent","LazyComponent","IncompleteClassComponent","DehydratedFragment","SuspenseListComponent","ScopeComponent","OffscreenComponent","LegacyHiddenComponent","CacheComponent","responderInst","trackedTouchCount","changeResponder","nextResponderInst","blockHostResponder","oldResponderInst","ResponderEventPlugin","GlobalResponderHandler","onChange","eventTypes","startShouldSetResponder","phasedRegistrationNames","bubbled","captured","dependencies","scrollShouldSetResponder","selectionChangeShouldSetResponder","moveShouldSetResponder","responderStart","registrationName","responderMove","responderEnd","responderRelease","responderTerminationRequest","responderGrant","responderReject","responderTerminate","getParent","return","tag","getLowestCommonAncestor","instA","instB","depthA","tempA","depthB","tempB","depth","alternate","isAncestor","traverseTwoPhase","fn","arg","path","getListener","stateNode","props","listenerAtPhase","propagationPhase","accumulateDirectionalDispatches","phase","accumulateDispatches","ignoredDirection","accumulateDirectDispatchesSingle","accumulateDirectDispatches","events","accumulateTwoPhaseDispatchesSingleSkipTarget","parentInst","accumulateTwoPhaseDispatchesSkipTarget","accumulateTwoPhaseDispatchesSingle","accumulateTwoPhaseDispatches","setResponderAndExtractTransfer","shouldSetEventType","bubbleShouldSetFrom","skipOverBubbleShouldSetFrom","shouldSetEvent","wantsResponderInst","extracted","grantEvent","terminationRequestEvent","shouldSwitch","terminateEvent","rejectEvent","canTriggerTransfer","topLevelInst","responderIgnoreScroll","noResponderTouches","activeTouch","_getResponder","extractEvents","eventSystemFlags","isResponderTouchStart","isResponderTouchMove","isResponderTouchEnd","incrementalTouch","gesture","isResponderTerminate","isResponderRelease","finalTouch","finalEvent","injection","injectGlobalResponderHandler","eventPluginOrder","namesToPlugins","recomputePluginOrdering","pluginName","pluginModule","pluginIndex","indexOf","plugins","publishedEvents","eventName","publishEventForPlugin","eventNameDispatchConfigs","phaseName","phasedRegistrationName","publishRegistrationName","registrationNameModules","registrationNameDependencies","injectEventPluginOrder","injectedEventPluginOrder","injectEventPluginsByName","injectedNamesToPlugins","isOrderingDirty","customBubblingEventTypes","ReactNativeViewConfigRegistry","customDirectEventTypes","ReactNativeBridgeEventPlugin","bubbleDispatchConfig","directDispatchConfig","ReactNativeEventPluginOrder","instanceCache","Map","instanceProps","precacheFiberNode","hostInst","set","uncacheFiberNode","delete","getInstanceFromTag","get","getTagFromInstance","nativeInstance","_nativeTag","canonical","updateFiberProps","batchedUpdatesImpl","bookkeeping","isInsideEventHandler","batchedUpdates","setBatchingImplementation","_batchedUpdatesImpl","_discreteUpdatesImpl","discreteUpdatesImpl","eventQueue","executeDispatchesAndRelease","executeDispatchesAndReleaseTopLevel","runEventsInBatch","processingEventQueue","EMPTY_NATIVE_EVENT","touchSubsequence","indices","removeTouchesAtIndices","rippedOut","temp","index","fillAt","j","cur","_receiveRootNodeIDEvent","rootNodeID","nativeEventParam","runExtractedPluginEventsInBatch","extractPluginEvents","legacyPlugins","possiblePlugin","extractedEvents","receiveEvent","receiveTouches","eventTopLevelType","changedIndices","jj","ReactNativeGlobalResponderHandler","from","to","blockNativeResponder","UIManager","setJSResponder","clearJSResponder","RCTEventEmitter","register","key","_reactInternals","value","ReactSharedInternals","React","REACT_ELEMENT_TYPE","REACT_PORTAL_TYPE","REACT_FRAGMENT_TYPE","REACT_STRICT_MODE_TYPE","REACT_PROFILER_TYPE","REACT_PROVIDER_TYPE","REACT_CONTEXT_TYPE","REACT_FORWARD_REF_TYPE","REACT_SUSPENSE_TYPE","REACT_SUSPENSE_LIST_TYPE","REACT_MEMO_TYPE","REACT_LAZY_TYPE","REACT_SCOPE_TYPE","REACT_DEBUG_TRACING_MODE_TYPE","REACT_OFFSCREEN_TYPE","REACT_LEGACY_HIDDEN_TYPE","REACT_CACHE_TYPE","Symbol","for","symbolFor","REACT_OPAQUE_ID_TYPE","MAYBE_ITERATOR_SYMBOL","iterator","FAUX_ITERATOR_SYMBOL","getIteratorFn","maybeIterable","maybeIterator","getWrappedName","outerType","innerType","wrapperName","displayName","functionName","getContextName","getComponentNameFromType","$$typeof","provider","_context","render","outerName","lazyComponent","payload","_payload","init","_init","x","getComponentNameFromFiber","fiber","enableProfilerTimer","__PROFILE__","enableProfilerCommitHooks","enableLazyElements","enableNewReconciler","enableLazyContextPropagation","NoFlags","PerformedWork","Placement","Update","PlacementAndUpdate","ChildDeletion","ContentReset","Callback","DidCapture","Ref","Snapshot","Passive","Hydrating","HydratingAndUpdate","Visibility","LifecycleEffectMask","HostEffectMask","Incomplete","ShouldCapture","ForceUpdateForLegacySuspense","RefStatic","LayoutStatic","PassiveStatic","BeforeMutationMask","enableCreateEventHandleAPI","MutationMask","LayoutMask","PassiveMask","StaticMask","ReactCurrentOwner","getNearestMountedFiber","node","nearestMounted","nextNode","flags","isFiberMounted","isMounted","component","getInstance","assertIsMounted","findCurrentFiberUsingSlowPath","parentA","parentB","nextParent","child","sibling","didFindChild","findCurrentHostFiber","parent","currentParent","findCurrentHostFiberImpl","match","emptyObject","removedKeys","removedKeyCount","deepDifferOptions","unsafelyIgnoreFunctions","defaultDiffer","prevProp","nextProp","deepDiffer","restoreDeletedValuesInNestedArray","updatePayload","validAttributes","obj","propKey","attributeConfig","diff","process","nextValue","diffNestedArrayProperty","prevArray","nextArray","minLength","diffNestedProperty","clearNestedProperty","addNestedProperty","diffProperties","flattenStyle","addProperties","clearProperties","prevProps","nextProps","shouldUpdate","create","mountSafeCallback_NOT_REALLY_SAFE","__isMounted","ReactNativeFiberHostComponent","viewConfig","internalInstanceHandleDEV","_children","blur","TextInputState","blurTextInput","focus","focusTextInput","measure","measureInWindow","measureLayout","relativeToNativeNode","onSuccess","onFail","relativeNode","nativeNode","setNativeProps","nativeProps","updateView","uiViewClassName","scheduleCallback","Scheduler","cancelCallback","shouldYield","requestPaint","ImmediatePriority","UserBlockingPriority","NormalPriority","IdlePriority","rendererID","injectedHook","injectInternals","internals","__REACT_DEVTOOLS_GLOBAL_HOOK__","hook","isDisabled","supportsFiber","inject","err","checkDCE","onCommitRoot","root","eventPriority","onCommitFiberRoot","didError","schedulerPriority","DiscreteEventPriority","ImmediateSchedulerPriority","ContinuousEventPriority","UserBlockingSchedulerPriority","DefaultEventPriority","NormalSchedulerPriority","IdleEventPriority","IdleSchedulerPriority","onPostCommitRoot","onPostCommitFiberRoot","onCommitUnmount","onCommitFiberUnmount","NoMode","ConcurrentMode","ProfileMode","DebugTracingMode","StrictLegacyMode","TotalLanes","NoLanes","NoLane","SyncLane","InputContinuousHydrationLane","InputContinuousLane","DefaultHydrationLane","DefaultLane","TransitionHydrationLane","TransitionLanes","TransitionLane1","TransitionLane2","TransitionLane3","TransitionLane4","TransitionLane5","TransitionLane6","TransitionLane7","TransitionLane8","TransitionLane9","TransitionLane10","TransitionLane11","TransitionLane12","TransitionLane13","TransitionLane14","TransitionLane15","TransitionLane16","RetryLanes","RetryLane1","RetryLane2","RetryLane3","RetryLane4","RetryLane5","SomeRetryLane","SelectiveHydrationLane","NonIdleLanes","IdleHydrationLane","IdleLane","OffscreenLane","NoTimestamp","nextTransitionLane","nextRetryLane","getHighestPriorityLanes","lanes","getHighestPriorityLane","getNextLanes","wipLanes","pendingLanes","nextLanes","suspendedLanes","pingedLanes","nonIdlePendingLanes","nonIdleUnblockedLanes","nonIdlePingedLanes","unblockedLanes","nextLane","wipLane","entangledLanes","entanglements","pickArbitraryLaneIndex","lane","getMostRecentEventTime","eventTimes","mostRecentEventTime","eventTime","computeExpirationTime","currentTime","markStarvedLanesAsExpired","expirationTimes","expirationTime","expiredLanes","getLanesToRetrySynchronouslyOnError","everythingButOffscreen","includesNonIdleWork","includesOnlyRetries","includesOnlyTransitions","shouldTimeSlice","SyncDefaultLanes","isTransitionLane","claimNextTransitionLane","claimNextRetryLane","pickArbitraryLane","clz32","laneToIndex","includesSomeLane","isSubsetOfLanes","subset","mergeLanes","removeLanes","intersectLanes","laneToLanes","createLaneMap","initial","laneMap","markRootUpdated","updateLane","markRootSuspended","markRootPinged","markRootMutableRead","mutableReadLanes","markRootFinished","remainingLanes","noLongerPendingLanes","markRootEntangled","rootEntangledLanes","Math","clz32Fallback","log","LN2","currentUpdatePriority","getCurrentUpdatePriority","setCurrentUpdatePriority","newPriority","higherEventPriority","lowerEventPriority","isHigherEventPriority","lanesToEventPriority","shim","isSuspenseInstancePending","isSuspenseInstanceFallback","hydrateTextInstance","getViewConfigForType","UPDATE_SIGNAL","nextReactTag","allocateTag","recursivelyUncacheFiberNode","appendInitialChild","parentInstance","createInstance","rootContainerInstance","hostContext","internalInstanceHandle","createView","createTextInstance","text","isInAParentText","finalizeInitialChildren","nativeTags","map","setChildren","getRootHostContext","getChildHostContext","parentHostContext","prevIsInAParentText","getPublicInstance","prepareForCommit","containerInfo","prepareUpdate","oldProps","newProps","resetAfterCommit","scheduleTimeout","setTimeout","cancelTimeout","clearTimeout","noTimeout","shouldSetTextContent","getCurrentEventPriority","appendChild","childTag","children","splice","manageChildren","appendChildToContainer","commitTextUpdate","textInstance","oldText","newText","commitUpdate","updatePayloadTODO","insertBefore","beforeChild","beforeChildIndex","insertInContainerBefore","removeChild","removeChildFromContainer","resetTextContent","hideInstance","style","display","hideTextInstance","Error","unhideInstance","clearContainer","container","unhideTextInstance","makeClientId","preparePortalMount","portalInstance","ReactCurrentDispatcher","describeBuiltInComponentFrame","source","ownerFn","ownerName","describeComponentFrame","sourceInfo","describeClassComponentFrame","ctor","describeFunctionComponentFrame","ReactDebugCurrentFrame","valueStack","createCursor","defaultValue","cursor","emptyContextObject","contextStackCursor","didPerformWorkStackCursor","previousContext","getUnmaskedContext","workInProgress","Component","didPushOwnContextIfProvider","isContextProvider","cacheContext","unmaskedContext","maskedContext","__reactInternalMemoizedUnmaskedChildContext","__reactInternalMemoizedMaskedChildContext","getMaskedContext","contextTypes","hasContextChanged","childContextTypes","popContext","popTopLevelContextObject","pushTopLevelContextObject","didChange","processChildContext","parentContext","getChildContext","childContext","contextKey","pushContextProvider","memoizedMergedChildContext","__reactInternalMemoizedMergedChildContext","invalidateContextProvider","mergedContext","findCurrentUnmaskedContext","LegacyRoot","ConcurrentRoot","syncQueue","includesLegacySyncCallbacks","isFlushingSyncQueue","scheduleSyncCallback","scheduleLegacySyncCallback","flushSyncCallbacksOnlyInLegacyMode","flushSyncCallbacks","previousUpdatePriority","isSync","queue","ReactCurrentBatchConfig","NoTransition","requestCurrentTransition","transition","is","y","objectIs","shallowEqual","objA","objB","keysA","keys","keysB","describeFiber","__DEV__","getStackByFiberInDevAndProd","info","message","stack","resetCurrentFiber","resolveDefaultProps","baseProps","defaultProps","valueCursor","currentlyRenderingFiber","lastContextDependency","lastFullyObservedContext","resetContextDependencies","pushProvider","providerFiber","_currentValue","popProvider","currentValue","scheduleWorkOnParentPath","renderLanes","childLanes","propagateContextChange","propagateContextChange_eager","nextFiber","list","dependency","firstContext","update","createUpdate","ForceUpdate","updateQueue","sharedQueue","shared","pending","prepareToReadContext","markWorkInProgressReceivedUpdate","readContext","isPrimaryRenderer","contextItem","memoizedValue","interleavedQueues","pushInterleavedQueue","enqueueInterleavedUpdates","lastInterleavedUpdate","interleaved","firstInterleavedUpdate","lastPendingUpdate","firstPendingUpdate","UpdateState","ReplaceState","CaptureUpdate","hasForceUpdate","initializeUpdateQueue","baseState","memoizedState","firstBaseUpdate","lastBaseUpdate","effects","cloneUpdateQueue","currentQueue","clone","enqueueUpdate","isInterleavedUpdate","entangleTransitions","queueLanes","newQueueLanes","enqueueCapturedUpdate","capturedUpdate","newFirst","newLast","getStateFromUpdate","prevState","nextState","partialState","processUpdateQueue","pendingQueue","currentLastBaseUpdate","newState","newLanes","newBaseState","newFirstBaseUpdate","newLastBaseUpdate","updateEventTime","lastInterleaved","markSkippedUpdateLanes","callCallback","resetHasForceUpdateBeforeProcessing","checkHasForceUpdateAfterProcessing","commitUpdateQueue","finishedWork","finishedQueue","effect","emptyRefsObject","refs","applyDerivedStateFromProps","getDerivedStateFromProps","classComponentUpdater","enqueueSetState","requestEventTime","requestUpdateLane","scheduleUpdateOnFiber","enqueueReplaceState","enqueueForceUpdate","checkShouldComponentUpdate","oldState","nextContext","shouldComponentUpdate","isPureReactComponent","adoptClassInstance","updater","setInstance","constructClassInstance","isLegacyContextConsumer","contextType","state","callComponentWillMount","componentWillMount","UNSAFE_componentWillMount","callComponentWillReceiveProps","componentWillReceiveProps","UNSAFE_componentWillReceiveProps","mountClassInstance","getSnapshotBeforeUpdate","componentDidMount","fiberFlags","resumeMountClassInstance","memoizedProps","oldContext","nextLegacyUnmaskedContext","hasNewLifecycles","updateClassInstance","unresolvedOldProps","elementType","unresolvedNewProps","pendingProps","nextUnmaskedContext","componentDidUpdate","UNSAFE_componentWillUpdate","componentWillUpdate","coerceRef","returnFiber","element","mixedRef","ref","_owner","owner","ownerFiber","stringRef","_stringRef","throwOnInvalidObjectType","newChild","childString","toString","join","ChildReconciler","shouldTrackSideEffects","deleteChild","childToDelete","deletions","deleteRemainingChildren","currentFirstChild","mapRemainingChildren","existingChildren","existingChild","useFiber","createWorkInProgress","placeChild","newFiber","lastPlacedIndex","newIndex","oldIndex","placeSingleChild","updateTextNode","textContent","created","createFiberFromText","mode","existing","updateElement","updateFragment","createFiberFromElement","updatePortal","portal","implementation","createFiberFromPortal","fragment","createFiberFromFragment","createChild","updateSlot","oldFiber","updateFromMap","newIdx","matchedFiber","reconcileChildrenArray","newChildren","resultingFirstChild","previousNewFiber","nextOldFiber","reconcileChildrenIterator","newChildrenIterable","iteratorFn","step","done","reconcileSingleTextNode","reconcileSingleElement","reconcileSinglePortal","reconcileChildFibers","isUnkeyedTopLevelFragment","mountChildFibers","cloneChildFibers","currentChild","resetChildFibers","resetWorkInProgress","NO_CONTEXT","contextFiberStackCursor","rootInstanceStackCursor","requiredContext","getRootHostContainer","rootInstance","pushHostContainer","nextRootInstance","nextRootContext","popHostContainer","getHostContext","pushHostContext","popHostContext","DefaultSuspenseContext","SubtreeSuspenseContextMask","InvisibleParentSuspenseContext","ForceSuspenseFallback","suspenseStackCursor","hasSuspenseContext","flag","setDefaultShallowSuspenseContext","setShallowSuspenseContext","shallowContext","addSubtreeSuspenseContext","subtreeContext","pushSuspenseContext","newContext","popSuspenseContext","shouldCaptureSuspense","hasInvisibleParent","dehydrated","unstable_avoidThisFallback","findFirstSuspended","row","revealOrder","didSuspend","HasEffect","Layout","isHydrating","enterHydrationState","prepareToHydrateHostInstance","prepareToHydrateHostTextInstance","popHydrationState","getIsHydrating","workInProgressSources","markSourceAsDirty","mutableSource","resetWorkInProgressVersions","_workInProgressVersionPrimary","getWorkInProgressVersion","setWorkInProgressVersion","version","getSuspendedCachePool","currentHook","workInProgressHook","didScheduleRenderPhaseUpdate","didScheduleRenderPhaseUpdateDuringThisPass","RE_RENDER_LIMIT","throwInvalidHookError","areHookInputsEqual","nextDeps","prevDeps","renderWithHooks","secondArg","nextRenderLanes","HooksDispatcherOnMount","HooksDispatcherOnUpdate","numberOfReRenders","HooksDispatcherOnRerender","ContextOnlyDispatcher","didRenderTooFewHooks","bailoutHooks","PassiveEffect","UpdateEffect","resetHooksAfterThrow","mountWorkInProgressHook","baseQueue","updateWorkInProgressHook","nextCurrentHook","nextWorkInProgressHook","newHook","createFunctionComponentUpdateQueue","lastEffect","basicStateReducer","action","mountReducer","reducer","initialArg","initialState","dispatch","lastRenderedReducer","lastRenderedState","dispatchAction","bind","updateReducer","baseFirst","pendingFirst","first","newBaseQueueFirst","newBaseQueueLast","eagerReducer","eagerState","interleavedLane","rerenderReducer","lastRenderPhaseUpdate","firstRenderPhaseUpdate","readFromUnsubscribedMutableSource","getSnapshot","getVersion","_getVersion","_source","isSafeToReadFromSource","currentRenderVersion","snapshot","useMutableSource","subscribe","getWorkInProgressRoot","dispatcher","useState","currentSnapshot","setSnapshot","stateHook","prevGetSnapshot","prevSource","prevSubscribe","useEffect","maybeNewVersion","maybeNewSnapshot","handleChange","latestGetSnapshot","latestSetSnapshot","unsubscribe","newQueue","mountMutableSource","updateMutableSource","mountSyncExternalStore","nextSnapshot","useSyncExternalStore","updateSyncExternalStore","prevSnapshot","useLayoutEffect","checkIfSnapshotChanged","forceStoreRerender","handleStoreChange","prevValue","mountState","updateState","rerenderState","pushEffect","destroy","deps","componentUpdateQueue","firstEffect","mountRef","initialValue","updateRef","mountEffectImpl","hookFlags","HookHasEffect","updateEffectImpl","prevEffect","mountEffect","PassiveStaticEffect","HookPassive","updateEffect","mountLayoutEffect","HookLayout","updateLayoutEffect","imperativeHandleEffect","refCallback","refObject","mountImperativeHandle","effectDeps","updateImperativeHandle","mountDebugValue","formatterFn","updateDebugValue","mountCallback","updateCallback","mountMemo","nextCreate","updateMemo","mountDeferredValue","setValue","prevTransition","updateDeferredValue","rerenderDeferredValue","startTransition","setPending","previousPriority","mountTransition","isPending","start","updateTransition","rerenderTransition","mountOpaqueIdentifier","makeId","id","updateOpaqueIdentifier","rerenderOpaqueIdentifier","currentState","useCallback","useContext","useImperativeHandle","useMemo","useReducer","useRef","useDebugValue","useDeferredValue","useTransition","useOpaqueIdentifier","unstable_isNewReconciler","stopProfilerTimerIfRunningAndRecordDelta","overrideBaseTime","recordLayoutEffectDuration","startLayoutEffectTimer","createCapturedValue","RNImpl","showErrorDialog","boundary","errorInfo","capturedError","componentStack","errorBoundary","logCapturedError","logError","_suppressLogging","console","componentName","componentNameMessage","errorBoundaryMessage","errorBoundaryName","combinedMessage","PossiblyWeakMap","WeakMap","createRootErrorUpdate","onUncaughtError","createClassErrorUpdate","getDerivedStateFromError","componentDidCatch","markLegacyErrorBoundaryAsFailed","attachPingListener","wakeable","pingCache","threadIDs","Set","has","add","ping","pingSuspendedRoot","then","throwException","sourceFiber","rootRenderLanes","currentSource","hasInvisibleParentBoundary","wakeables","currentSourceFiber","renderDidError","isAlreadyFailedLegacyErrorBoundary","markUpdate","markRef","appendAllChildren","updateHostContainer","updateHostComponent","updateHostText","needsVisibilityToggle","isHidden","currentHostContext","cutOffTailIfNeeded","renderState","hasRenderedATailFallback","tailMode","tailNode","tail","lastTailNode","bubbleProperties","completedWork","didBailout","newChildLanes","subtreeFlags","completeWork","isLegacyContextProvider","popLegacyContext","fiberRoot","popTopLevelLegacyContextObject","resetMutableSourceWorkInProgressVersions","pendingContext","wasHydrated","hydrate","nextDidTimeout","prevDidTimeout","offscreenFiber","hasInvisibleChildContext","renderDidSuspend","renderDidSuspendDelayIfPossible","didSuspendAlready","renderedTail","rendering","cannotBeSuspended","renderHasNotSuspendedYet","suspended","newThenables","getRenderTargetTime","renderingStartTime","isBackwards","previousSibling","last","suspenseContext","popRenderLanes","nextIsHidden","prevIsHidden","subtreeRenderLanes","didReceiveUpdate","reconcileChildren","nextChildren","forceUnmountCurrentAndReconcile","updateForwardRef","bailoutOnAlreadyFinishedWork","updateMemoComponent","isSimpleFunctionComponent","compare","resolvedType","updateSimpleMemoComponent","createFiberFromTypeAndProps","hasScheduledUpdateOrContext","checkScheduledUpdateOrContext","updateFunctionComponent","updateOffscreenComponent","spawnedCachePool","baseLanes","cachePool","pushRenderLanes","nextBaseLanes","prevBaseLanes","updateLegacyHiddenComponent","updateMode","updateProfiler","updateClassComponent","hasContext","pushLegacyContextProvider","nextUnitOfWork","finishClassComponent","didCaptureError","pushHostRootContext","updateHostRoot","prevChildren","resetHydrationState","mountLazyComponent","_current","resolvedTag","resolveLazyComponentTag","resolvedProps","hint","mountIncompleteClassComponent","mountIndeterminateComponent","SUSPENDED_MARKER","retryLane","mountSuspenseOffscreenState","updateSuspenseOffscreenState","prevOffscreenState","shouldRemainOnFallback","suspenseState","getRemainingWorkInPrimaryTree","updateSuspenseComponent","showFallback","nextPrimaryChildren","nextFallbackChildren","fallback","fallbackFragment","mountSuspenseFallbackChildren","primaryChildFragment","unstable_expectedLoadTime","mountSuspensePrimaryChildren","fallbackChildFragment","updateSuspenseFallbackChildren","updateSuspensePrimaryChildren","primaryChildren","primaryChildProps","mountWorkInProgressOffscreenFiber","fallbackChildren","progressedPrimaryFragment","offscreenProps","createFiberFromOffscreen","updateWorkInProgressOffscreenFiber","currentPrimaryChildFragment","currentFallbackChildFragment","scheduleWorkOnFiber","propagateSuspenseContextChange","firstChild","findLastContentRow","lastContentRow","currentRow","initSuspenseListRenderState","updateSuspenseListComponent","validateRevealOrder","shouldForceFallback","didSuspendBefore","nextRow","updatePortalComponent","updateContextProvider","providerType","newValue","oldValue","hasLegacyContextChanged","updateContextConsumer","updateLanes","attemptEarlyBailoutIfNoScheduledUpdate","primaryChildLanes","hasChildWork","beginWork","unresolvedProps","unwindWork","unwindInterruptedWork","interruptedWork","PossiblyWeakSet","WeakSet","nextEffect","callComponentWillUnmountWithTimer","componentWillUnmount","safelyCallComponentWillUnmount","nearestMountedAncestor","reportUncaughtErrorInDEV","captureCommitPhaseError","safelyDetachRef","safelyCallDestroy","focusedInstanceHandle","shouldFireAfterActiveInstanceBlur","commitBeforeMutationEffects","commitBeforeMutationEffects_begin","shouldFire","ensureCorrectReturnPointer","commitBeforeMutationEffects_complete","setCurrentDebugFiberInDEV","commitBeforeMutationEffectsOnFiber","__reactInternalSnapshotBeforeUpdate","commitHookEffectListUnmount","commitHookEffectListMount","commitLayoutEffectOnFiber","finishedRoot","committedLanes","commitMount","commitSuspenseHydrationCallbacks","commitAttachRef","hideOrUnhideAllChildren","hostSubtreeRoot","instanceToUse","commitDetachRef","currentRef","commitUnmount","NoHookEffect","unmountHostComponents","commitNestedUnmounts","detachFiberMutation","detachFiberAfterEffects","hostInstance","getHostParentFiber","isHostParent","getHostSibling","siblings","commitPlacement","parentFiber","isContainer","parentStateNode","before","insertOrAppendPlacementNodeIntoContainer","insertOrAppendPlacementNode","isHost","currentParentIsValid","currentParentIsContainer","findParent","commitDeletion","commitWork","commitSuspenseCallback","attachSuspenseRetryListeners","retryCache","retry","resolveRetryWakeable","commitResetTextContent","commitMutationEffects","inProgressLanes","commitMutationEffects_begin","commitMutationEffects_complete","commitMutationEffectsOnFiber","wasHidden","markCommitTimeOfFallback","offscreenBoundary","primaryFlags","outer","commitLayoutEffects","commitLayoutEffects_begin","subtreeRoot","isModernRoot","commitLayoutMountEffects_complete","commitPassiveMountEffects","commitPassiveMountEffects_begin","commitPassiveMountEffects_complete","commitPassiveMountOnFiber","commitPassiveUnmountEffects","commitPassiveUnmountEffects_begin","fiberToDelete","commitPassiveUnmountEffectsInsideOfDeletedTree_begin","previousFiber","detachedChild","detachedSibling","commitPassiveUnmountEffects_complete","commitPassiveUnmountOnFiber","resetCurrentDebugFiberInDEV","deletedSubtreeRoot","commitPassiveUnmountInsideDeletedTreeOnFiber","commitPassiveUnmountEffectsInsideOfDeletedTree_complete","expectedReturnFiber","ceil","ReactCurrentActQueue","NoContext","BatchedContext","RenderContext","CommitContext","RetryAfterError","RootIncomplete","RootFatalErrored","RootErrored","RootSuspended","RootSuspendedWithDelay","RootCompleted","executionContext","workInProgressRoot","workInProgressRootRenderLanes","subtreeRenderLanesCursor","workInProgressRootExitStatus","workInProgressRootFatalError","workInProgressRootIncludedLanes","workInProgressRootSkippedLanes","workInProgressRootUpdatedLanes","workInProgressRootPingedLanes","globalMostRecentFallbackTime","FALLBACK_THROTTLE_MS","workInProgressRootRenderTargetTime","Infinity","RENDER_TIMEOUT_MS","resetRenderTimer","hasUncaughtError","firstUncaughtError","legacyErrorBoundariesThatAlreadyFailed","rootDoesHavePassiveEffects","rootWithPendingPassiveEffects","pendingPassiveEffectsLanes","NESTED_UPDATE_LIMIT","nestedUpdateCount","rootWithNestedUpdates","currentEventTime","currentEventTransitionLane","isTransition","eventLane","requestRetryLane","checkForNestedUpdates","warnAboutRenderPhaseUpdatesInDEV","markUpdateLaneFromFiberToRoot","deferRenderPhaseUpdateToNextBatch","ensureRootIsScheduled","existingCallbackNode","callbackNode","callbackPriority","newCallbackPriority","existingCallbackPriority","newCallbackNode","performSyncWorkOnRoot","schedulerPriorityLevel","performConcurrentWorkOnRoot","didTimeout","originalCallbackNode","didFlushPassiveEffects","flushPassiveEffects","exitStatus","disableSchedulerTimeoutInWorkLoop","renderRootConcurrent","renderRootSync","prevExecutionContext","errorRetryLanes","fatalError","prepareFreshStack","finishedLanes","finishConcurrentRender","commitRoot","shouldForceFlushFallbacksInDEV","msUntilTimeout","timeoutHandle","eventTimeMs","timeElapsedMs","jnd","markRootSuspended_dontCallThisOneDirectly","pushToStack","popFromStack","handleError","thrownValue","erroredWork","completeUnitOfWork","yetAnotherThrownValue","pushDispatcher","prevDispatcher","popDispatcher","workLoopSync","performUnitOfWork","workLoopConcurrent","unitOfWork","siblingFiber","previousUpdateLanePriority","commitRootImpl","renderPriorityLevel","subtreeHasEffects","rootHasEffect","onCommitRootDevTools","renderPriority","priority","flushPassiveEffectsImpl","onPostCommitRootDevTools","prepareToThrowUncaughtError","captureCommitPhaseErrorOnRoot","rootFiber","retryTimedOutBoundary","boundaryFiber","timeElapsed","originalBeginWork","priorityLevel","Scheduler_scheduleCallback","Scheduler_cancelCallback","FiberNode","createFiber","shouldConstruct","isReactComponent","currentDependencies","createHostRootFiber","isStrictMode","concurrentUpdatesByDefaultOverride","fiberTag","getTag","createFiberFromProfiler","createFiberFromSuspense","createFiberFromSuspenseList","createFiberFromLegacyHidden","elements","content","pendingChildren","FiberRootNode","createFiberRoot","hydrationCallbacks","uninitializedFiber","createPortal","getContextForSubtree","parentComponent","findHostInstance","hostFiber","createContainer","updateContainer","getPublicRootInstance","containerFiber","overrideHookState","overrideHookStateDeletePath","overrideHookStateRenamePath","overrideProps","overridePropsDeletePath","overridePropsRenamePath","scheduleUpdate","setErrorHandler","setSuspenseHandler","findHostInstanceByFiber","emptyFindFiberByHostInstance","injectIntoDevTools","devToolsConfig","findFiberByHostInstance","bundleType","rendererPackageName","rendererConfig","currentDispatcherRef","findHostInstancesForRefresh","scheduleRefresh","scheduleRoot","setRefreshHandler","getCurrentFiber","getIsStrictMode","reconcilerVersion","ReactVersion","getInspectorDataForInstance","getInspectorDataForViewTag","getInspectorDataForViewAtPoint","findNodeHandle","inspectedView","locationX","locationY","findHostInstance_DEPRECATED","componentOrHandle","dispatchCommand","handle","command","args","_internalInstanceHandle","nativeFabricUIManager","dispatchViewManagerCommand","sendAccessibilityEvent","eventType","legacySendAccessibilityEvent","containerTag","roots","unmountComponentAtNode","unmountComponentAtNodeAndRemoveContainer","removeRootView","createPortalImpl","computeComponentStackForErrorReporting","reactTag","getClosestInstanceFromNode","Internals"],"mappings":";;;;;;;AAWA,SAASA,yBAAT,CACEC,IADF,EAEEC,IAFF,EAGEC,OAHF,EAIEC,CAJF,EAKEC,CALF,EAMEC,CANF,EAOEC,CAPF,EAQEC,CARF,EASEC,CATF,EAUE;AACA,QAAMC,QAAQ,GAAGC,KAAK,CAACC,SAAN,CAAgBC,KAAhB,CAAsBC,IAAtB,CAA2BC,SAA3B,EAAsC,CAAtC,CAAjB;;AACA,MAAI;AACFb,IAAAA,IAAI,CAACc,KAAL,CAAWb,OAAX,EAAoBO,QAApB;AACD,GAFD,CAEE,OAAOO,KAAP,EAAc;AACd,SAAKC,OAAL,CAAaD,KAAb;AACD;AACF;;AAED,IAAIE,yBAAyB,GAAGnB,yBAAhC;;ACjBA,IAAIoB,QAAiB,GAAG,KAAxB;AACA,IAAIC,WAAkB,GAAG,IAAzB;;AAGA,IAAIC,eAAwB,GAAG,KAA/B;AACA,IAAIC,YAAmB,GAAG,IAA1B;AAEA,MAAMC,QAAQ,GAAG;AACfN,EAAAA,OAAO,CAACD,KAAD,EAAe;AACpBG,IAAAA,QAAQ,GAAG,IAAX;AACAC,IAAAA,WAAW,GAAGJ,KAAd;AACD;;AAJc,CAAjB;AAOA;;;;;;;;;;;;;;AAaA,AAAO,SAASQ,qBAAT,CACLxB,IADK,EAELC,IAFK,EAGLC,OAHK,EAILC,CAJK,EAKLC,CALK,EAMLC,CANK,EAOLC,CAPK,EAQLC,CARK,EASLC,CATK,EAUC;AACNW,EAAAA,QAAQ,GAAG,KAAX;AACAC,EAAAA,WAAW,GAAG,IAAd;AACAF,EAAAA,yBAAyB,CAACH,KAA1B,CAAgCQ,QAAhC,EAA0CT,SAA1C;AACD;AAED;;;;;;;;;;;AAUA,AAAO,SAASW,uCAAT,CASLzB,IATK,EAULC,IAVK,EAWLC,OAXK,EAYLC,CAZK,EAaLC,CAbK,EAcLC,CAdK,EAeLC,CAfK,EAgBLC,CAhBK,EAiBLC,CAjBK,EAkBC;AACNgB,EAAAA,qBAAqB,CAACT,KAAtB,CAA4B,IAA5B,EAAkCD,SAAlC;;AACA,MAAIK,QAAJ,EAAc;AACZ,UAAMH,KAAK,GAAGU,gBAAgB,EAA9B;;AACA,QAAI,CAACL,eAAL,EAAsB;AACpBA,MAAAA,eAAe,GAAG,IAAlB;AACAC,MAAAA,YAAY,GAAGN,KAAf;AACD;AACF;AACF;AAED;;;;;AAIA,AAAO,SAASW,kBAAT,GAA8B;AACnC,MAAIN,eAAJ,EAAqB;AACnB,UAAML,KAAK,GAAGM,YAAd;AACAD,IAAAA,eAAe,GAAG,KAAlB;AACAC,IAAAA,YAAY,GAAG,IAAf;AACA,UAAMN,KAAN;AACD;AACF;AAED,AAIO,SAASU,gBAAT,GAA4B;AACjC,MAAIP,QAAJ,EAAc;AACZ,UAAMH,KAAK,GAAGI,WAAd;AACAD,IAAAA,QAAQ,GAAG,KAAX;AACAC,IAAAA,WAAW,GAAG,IAAd;AACA,WAAOJ,KAAP;AACD,GALD,MAKO;AAAA;AAAA;AAAA;AAMN;AACF;;AClHD,MAAMY,WAAW,GAAGlB,KAAK,CAACmB,OAA1B;;AAGA,SAASA,OAAT,CAAiB1B,CAAjB,EAAoC;AAClC,SAAOyB,WAAW,CAACzB,CAAD,CAAlB;AACD;;ACLM,IAAI2B,4BAA4B,GAAG,IAAnC;AACP,AAAO,IAAIC,mBAAmB,GAAG,IAA1B;AACP,AAAO,IAAIC,mBAAmB,GAAG,IAA1B;AAEP,AAAO,SAASC,gBAAT,CACLC,gCADK,EAELC,uBAFK,EAGLC,uBAHK,EAIL;AACAN,EAAAA,4BAA4B,GAAGI,gCAA/B;AACAH,EAAAA,mBAAmB,GAAGI,uBAAtB;AACAH,EAAAA,mBAAmB,GAAGI,uBAAtB;AASD;AAED,AA0BA;;;;;;;;AAMA,AAAO,SAASC,eAAT,CAAyBC,KAAzB,EAAgCC,QAAhC,EAA0CC,IAA1C,EAAgD;AACrD,QAAMC,IAAI,GAAGH,KAAK,CAACG,IAAN,IAAc,eAA3B;AACAH,EAAAA,KAAK,CAACI,aAAN,GAAsBV,mBAAmB,CAACQ,IAAD,CAAzC;AACAf,EAAAA,uCAAuC,CAACgB,IAAD,EAAOF,QAAP,EAAiBI,SAAjB,EAA4BL,KAA5B,CAAvC;AACAA,EAAAA,KAAK,CAACI,aAAN,GAAsB,IAAtB;AACD;AAED;;;;AAGA,AAAO,SAASE,wBAAT,CAAkCN,KAAlC,EAAyC;AAC9C,QAAMO,iBAAiB,GAAGP,KAAK,CAACQ,kBAAhC;AACA,QAAMC,iBAAiB,GAAGT,KAAK,CAACU,kBAAhC;;AAIA,MAAInB,OAAO,CAACgB,iBAAD,CAAX,EAAgC;AAC9B,SAAK,IAAII,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,iBAAiB,CAACK,MAAtC,EAA8CD,CAAC,EAA/C,EAAmD;AACjD,UAAIX,KAAK,CAACa,oBAAN,EAAJ,EAAkC;AAChC;AACD,OAHgD;;;AAKjDd,MAAAA,eAAe,CAACC,KAAD,EAAQO,iBAAiB,CAACI,CAAD,CAAzB,EAA8BF,iBAAiB,CAACE,CAAD,CAA/C,CAAf;AACD;AACF,GARD,MAQO,IAAIJ,iBAAJ,EAAuB;AAC5BR,IAAAA,eAAe,CAACC,KAAD,EAAQO,iBAAR,EAA2BE,iBAA3B,CAAf;AACD;;AACDT,EAAAA,KAAK,CAACQ,kBAAN,GAA2B,IAA3B;AACAR,EAAAA,KAAK,CAACU,kBAAN,GAA2B,IAA3B;AACD;AAED;;;;;;;;AAOA,SAASI,sCAAT,CAAgDd,KAAhD,EAAuD;AACrD,QAAMO,iBAAiB,GAAGP,KAAK,CAACQ,kBAAhC;AACA,QAAMC,iBAAiB,GAAGT,KAAK,CAACU,kBAAhC;;AAIA,MAAInB,OAAO,CAACgB,iBAAD,CAAX,EAAgC;AAC9B,SAAK,IAAII,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,iBAAiB,CAACK,MAAtC,EAA8CD,CAAC,EAA/C,EAAmD;AACjD,UAAIX,KAAK,CAACa,oBAAN,EAAJ,EAAkC;AAChC;AACD,OAHgD;;;AAKjD,UAAIN,iBAAiB,CAACI,CAAD,CAAjB,CAAqBX,KAArB,EAA4BS,iBAAiB,CAACE,CAAD,CAA7C,CAAJ,EAAuD;AACrD,eAAOF,iBAAiB,CAACE,CAAD,CAAxB;AACD;AACF;AACF,GAVD,MAUO,IAAIJ,iBAAJ,EAAuB;AAC5B,QAAIA,iBAAiB,CAACP,KAAD,EAAQS,iBAAR,CAArB,EAAiD;AAC/C,aAAOA,iBAAP;AACD;AACF;;AACD,SAAO,IAAP;AACD;AAED;;;;;AAGA,AAAO,SAASM,kCAAT,CAA4Cf,KAA5C,EAAmD;AACxD,QAAMgB,GAAG,GAAGF,sCAAsC,CAACd,KAAD,CAAlD;AACAA,EAAAA,KAAK,CAACU,kBAAN,GAA2B,IAA3B;AACAV,EAAAA,KAAK,CAACQ,kBAAN,GAA2B,IAA3B;AACA,SAAOQ,GAAP;AACD;AAED;;;;;;;;;;AASA,AAAO,SAASC,qBAAT,CAA+BjB,KAA/B,EAAsC;AAC3C;AAGA,QAAMkB,gBAAgB,GAAGlB,KAAK,CAACQ,kBAA/B;AACA,QAAMW,gBAAgB,GAAGnB,KAAK,CAACU,kBAA/B;;AAL2C,OAOzC,CAACnB,OAAO,CAAC2B,gBAAD,CAPiC;AAAA;AAAA;;AAU3ClB,EAAAA,KAAK,CAACI,aAAN,GAAsBc,gBAAgB,GAClCxB,mBAAmB,CAACyB,gBAAD,CADe,GAElC,IAFJ;AAGA,QAAMC,GAAG,GAAGF,gBAAgB,GAAGA,gBAAgB,CAAClB,KAAD,CAAnB,GAA6B,IAAzD;AACAA,EAAAA,KAAK,CAACI,aAAN,GAAsB,IAAtB;AACAJ,EAAAA,KAAK,CAACQ,kBAAN,GAA2B,IAA3B;AACAR,EAAAA,KAAK,CAACU,kBAAN,GAA2B,IAA3B;AACA,SAAOU,GAAP;AACD;AAED;;;;;AAIA,AAAO,SAASC,aAAT,CAAuBrB,KAAvB,EAA8B;AACnC,SAAO,CAAC,CAACA,KAAK,CAACQ,kBAAf;AACD;;ACrKD;AAEA,AAEA,MAAMc,eAAe,GAAG,EAAxB;AAEA;;;;;AAIA,MAAMC,cAAc,GAAG;AACrBpB,EAAAA,IAAI,EAAE,IADe;AAErBqB,EAAAA,MAAM,EAAE,IAFa;AAGrB;AACApB,EAAAA,aAAa,EAAE,YAAW;AACxB,WAAO,IAAP;AACD,GANoB;AAOrBqB,EAAAA,UAAU,EAAE,IAPS;AAQrBC,EAAAA,OAAO,EAAE,IARY;AASrBC,EAAAA,UAAU,EAAE,IATS;AAUrBC,EAAAA,SAAS,EAAE,UAAS5B,KAAT,EAAgB;AACzB,WAAOA,KAAK,CAAC4B,SAAN,IAAmBC,IAAI,CAACC,GAAL,EAA1B;AACD,GAZoB;AAarBC,EAAAA,gBAAgB,EAAE,IAbG;AAcrBC,EAAAA,SAAS,EAAE;AAdU,CAAvB;;AAiBA,SAASC,uBAAT,GAAmC;AACjC,SAAO,IAAP;AACD;;AAED,SAASC,wBAAT,GAAoC;AAClC,SAAO,KAAP;AACD;AAED;;;;;;;;;;;;;;;;;;;;AAkBA,SAASC,cAAT,CACEC,cADF,EAEEC,UAFF,EAGEC,WAHF,EAIEC,iBAJF,EAKE;AACA;AASA,OAAKH,cAAL,GAAsBA,cAAtB;AACA,OAAKI,WAAL,GAAmBH,UAAnB;AACA,OAAKC,WAAL,GAAmBA,WAAnB;AACA,OAAK9B,kBAAL,GAA0B,IAA1B;AACA,OAAKE,kBAAL,GAA0B,IAA1B;AAEA,QAAM+B,SAAS,GAAG,KAAKC,WAAL,CAAiBD,SAAnC;;AACA,OAAK,MAAME,QAAX,IAAuBF,SAAvB,EAAkC;AAChC,QAAI,CAACA,SAAS,CAACG,cAAV,CAAyBD,QAAzB,CAAL,EAAyC;AACvC;AACD;;AAID,UAAME,SAAS,GAAGJ,SAAS,CAACE,QAAD,CAA3B;;AACA,QAAIE,SAAJ,EAAe;AACb,WAAKF,QAAL,IAAiBE,SAAS,CAACP,WAAD,CAA1B;AACD,KAFD,MAEO;AACL,UAAIK,QAAQ,KAAK,QAAjB,EAA2B;AACzB,aAAKnB,MAAL,GAAce,iBAAd;AACD,OAFD,MAEO;AACL,aAAKI,QAAL,IAAiBL,WAAW,CAACK,QAAD,CAA5B;AACD;AACF;AACF;;AAED,QAAMZ,gBAAgB,GACpBO,WAAW,CAACP,gBAAZ,IAAgC,IAAhC,GACIO,WAAW,CAACP,gBADhB,GAEIO,WAAW,CAACQ,WAAZ,KAA4B,KAHlC;;AAIA,MAAIf,gBAAJ,EAAsB;AACpB,SAAKgB,kBAAL,GAA0Bd,uBAA1B;AACD,GAFD,MAEO;AACL,SAAKc,kBAAL,GAA0Bb,wBAA1B;AACD;;AACD,OAAKrB,oBAAL,GAA4BqB,wBAA5B;AACA,SAAO,IAAP;AACD;;AAEDc,MAAM,CAACC,MAAP,CAAcd,cAAc,CAAC9D,SAA7B,EAAwC;AACtC6E,EAAAA,cAAc,EAAE,YAAW;AACzB,SAAKnB,gBAAL,GAAwB,IAAxB;AACA,UAAM/B,KAAK,GAAG,KAAKsC,WAAnB;;AACA,QAAI,CAACtC,KAAL,EAAY;AACV;AACD;;AAED,QAAIA,KAAK,CAACkD,cAAV,EAA0B;AACxBlD,MAAAA,KAAK,CAACkD,cAAN;AACD,KAFD,MAEO,IAAI,OAAOlD,KAAK,CAAC8C,WAAb,KAA6B,SAAjC,EAA4C;AACjD9C,MAAAA,KAAK,CAAC8C,WAAN,GAAoB,KAApB;AACD;;AACD,SAAKC,kBAAL,GAA0Bd,uBAA1B;AACD,GAdqC;AAgBtCkB,EAAAA,eAAe,EAAE,YAAW;AAC1B,UAAMnD,KAAK,GAAG,KAAKsC,WAAnB;;AACA,QAAI,CAACtC,KAAL,EAAY;AACV;AACD;;AAED,QAAIA,KAAK,CAACmD,eAAV,EAA2B;AACzBnD,MAAAA,KAAK,CAACmD,eAAN;AACD,KAFD,MAEO,IAAI,OAAOnD,KAAK,CAACoD,YAAb,KAA8B,SAAlC,EAA6C;AAClD;AACA;AACA;AACA;AACA;AACApD,MAAAA,KAAK,CAACoD,YAAN,GAAqB,IAArB;AACD;;AAED,SAAKvC,oBAAL,GAA4BoB,uBAA5B;AACD,GAlCqC;;AAoCtC;;;;;AAKAoB,EAAAA,OAAO,EAAE,YAAW;AAClB,SAAKC,YAAL,GAAoBrB,uBAApB;AACD,GA3CqC;;AA6CtC;;;;;AAKAqB,EAAAA,YAAY,EAAEpB,wBAlDwB;;AAoDtC;;;AAGAqB,EAAAA,UAAU,EAAE,YAAW;AACrB,UAAMd,SAAS,GAAG,KAAKC,WAAL,CAAiBD,SAAnC;;AACA,SAAK,MAAME,QAAX,IAAuBF,SAAvB,EAAkC;AAChC,MAMO;AACL,aAAKE,QAAL,IAAiB,IAAjB;AACD;AACF;;AACD,SAAKP,cAAL,GAAsB,IAAtB;AACA,SAAKI,WAAL,GAAmB,IAAnB;AACA,SAAKF,WAAL,GAAmB,IAAnB;AACA,SAAKS,kBAAL,GAA0Bb,wBAA1B;AACA,SAAKrB,oBAAL,GAA4BqB,wBAA5B;AACA,SAAK1B,kBAAL,GAA0B,IAA1B;AACA,SAAKE,kBAAL,GAA0B,IAA1B;AAkCD;AA5GqC,CAAxC;AA+GAyB,cAAc,CAACM,SAAf,GAA2BlB,cAA3B;AAEA;;;;AAGAY,cAAc,CAACqB,MAAf,GAAwB,UAASf,SAAT,EAAoB;AAC1C,QAAMgB,KAAK,GAAG,IAAd;;AAEA,QAAMC,CAAC,GAAG,YAAW,EAArB;;AACAA,EAAAA,CAAC,CAACrF,SAAF,GAAcoF,KAAK,CAACpF,SAApB;AACA,QAAMA,SAAS,GAAG,IAAIqF,CAAJ,EAAlB;;AAEA,WAASC,KAAT,GAAiB;AACf,WAAOF,KAAK,CAAChF,KAAN,CAAY,IAAZ,EAAkBD,SAAlB,CAAP;AACD;;AACDwE,EAAAA,MAAM,CAACC,MAAP,CAAc5E,SAAd,EAAyBsF,KAAK,CAACtF,SAA/B;AACAsF,EAAAA,KAAK,CAACtF,SAAN,GAAkBA,SAAlB;AACAsF,EAAAA,KAAK,CAACtF,SAAN,CAAgBqE,WAAhB,GAA8BiB,KAA9B;AAEAA,EAAAA,KAAK,CAAClB,SAAN,GAAkBO,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBQ,KAAK,CAAChB,SAAxB,EAAmCA,SAAnC,CAAlB;AACAkB,EAAAA,KAAK,CAACH,MAAN,GAAeC,KAAK,CAACD,MAArB;AACAI,EAAAA,iBAAiB,CAACD,KAAD,CAAjB;AAEA,SAAOA,KAAP;AACD,CAnBD;;AAqBAC,iBAAiB,CAACzB,cAAD,CAAjB;AAEA;AA8CA,SAAS0B,sBAAT,CACEzB,cADF,EAEEC,UAFF,EAGEC,WAHF,EAIEwB,UAJF,EAKE;AACA,QAAMC,gBAAgB,GAAG,IAAzB;;AACA,MAAIA,gBAAgB,CAACC,SAAjB,CAA2BpD,MAA/B,EAAuC;AACrC,UAAMqD,QAAQ,GAAGF,gBAAgB,CAACC,SAAjB,CAA2BE,GAA3B,EAAjB;AACAH,IAAAA,gBAAgB,CAACxF,IAAjB,CACE0F,QADF,EAEE7B,cAFF,EAGEC,UAHF,EAIEC,WAJF,EAKEwB,UALF;AAOA,WAAOG,QAAP;AACD;;AACD,SAAO,IAAIF,gBAAJ,CACL3B,cADK,EAELC,UAFK,EAGLC,WAHK,EAILwB,UAJK,CAAP;AAMD;;AAED,SAASK,kBAAT,CAA4BnE,KAA5B,EAAmC;AACjC,QAAM+D,gBAAgB,GAAG,IAAzB;;AADiC,QAG/B/D,KAAK,YAAY+D,gBAHc;AAAA;AAAA;;AAMjC/D,EAAAA,KAAK,CAACuD,UAAN;;AACA,MAAIQ,gBAAgB,CAACC,SAAjB,CAA2BpD,MAA3B,GAAoCU,eAAxC,EAAyD;AACvDyC,IAAAA,gBAAgB,CAACC,SAAjB,CAA2BI,IAA3B,CAAgCpE,KAAhC;AACD;AACF;;AAED,SAAS4D,iBAAT,CAA2BG,gBAA3B,EAA6C;AAC3CA,EAAAA,gBAAgB,CAACM,SAAjB,GAA6BR,sBAA7B;AACAE,EAAAA,gBAAgB,CAACC,SAAjB,GAA6B,EAA7B;AACAD,EAAAA,gBAAgB,CAACO,OAAjB,GAA2BH,kBAA3B;AACD;;AC5UD;;;;;;AAKA,MAAMI,uBAAuB,GAAGpC,cAAc,CAACqB,MAAf,CAAsB;AACpDgB,EAAAA,YAAY,EAAE,UAASlC,WAAT,EAAsB;AAClC,WAAO,IAAP,CADkC;AAEnC;AAHmD,CAAtB,CAAhC;;ACLO,MAAMmC,eAAe,GAAG,eAAxB;AACP,AAAO,MAAMC,cAAc,GAAG,cAAvB;AACP,AAAO,MAAMC,aAAa,GAAG,aAAtB;AACP,AAAO,MAAMC,gBAAgB,GAAG,gBAAzB;AACP,AAAO,MAAMC,UAAU,GAAG,WAAnB;AACP,AAAO,MAAMC,oBAAoB,GAAG,oBAA7B;AAEP,AAAO,SAASC,UAAT,CAAoBC,YAApB,EAAkD;AACvD,SAAOA,YAAY,KAAKP,eAAxB;AACD;AAED,AAAO,SAASQ,SAAT,CAAmBD,YAAnB,EAAiD;AACtD,SAAOA,YAAY,KAAKN,cAAxB;AACD;AAED,AAAO,SAASQ,QAAT,CAAkBF,YAAlB,EAAgD;AACrD,SAAOA,YAAY,KAAKL,aAAjB,IAAkCK,YAAY,KAAKJ,gBAA1D;AACD;AAED,AAAO,MAAMO,iBAAiB,GAAG,CAACV,eAAD,CAA1B;AACP,AAAO,MAAMW,gBAAgB,GAAG,CAACV,cAAD,CAAzB;AACP,AAAO,MAAMW,eAAe,GAAG,CAACT,gBAAD,EAAmBD,aAAnB,CAAxB;;ACEP,MAAMW,SAA6B,GAAG,EAAtC;AACA,MAAMd,YAAY,GAAG;AACnBc,EAAAA,SADmB;AAEnBC,EAAAA,mBAAmB,EAAE,CAFF;AAGnB;AACA;AACA;AACAC,EAAAA,wBAAwB,EAAE,CAAC,CANR;AAOnBC,EAAAA,mBAAmB,EAAE;AAPF,CAArB;;AAuBA,SAASC,iBAAT,CAA2BC,KAA3B,EAAiD;AAC/C;AACA;AACA;AACA,SAAQA,KAAD,CAAa/D,SAAb,IAA0B+D,KAAK,CAACC,SAAvC;AACD;AAED;;;;;;AAIA,SAASC,iBAAT,CAA2BF,KAA3B,EAAsD;AACpD,SAAO;AACLG,IAAAA,WAAW,EAAE,IADR;AAELC,IAAAA,UAAU,EAAEJ,KAAK,CAACK,KAFb;AAGLC,IAAAA,UAAU,EAAEN,KAAK,CAACO,KAHb;AAILC,IAAAA,cAAc,EAAET,iBAAiB,CAACC,KAAD,CAJ5B;AAKLS,IAAAA,YAAY,EAAET,KAAK,CAACK,KALf;AAMLK,IAAAA,YAAY,EAAEV,KAAK,CAACO,KANf;AAOLI,IAAAA,gBAAgB,EAAEZ,iBAAiB,CAACC,KAAD,CAP9B;AAQLY,IAAAA,aAAa,EAAEZ,KAAK,CAACK,KARhB;AASLQ,IAAAA,aAAa,EAAEb,KAAK,CAACO,KAThB;AAULO,IAAAA,iBAAiB,EAAEf,iBAAiB,CAACC,KAAD;AAV/B,GAAP;AAYD;;AAED,SAASe,gBAAT,CAA0BC,WAA1B,EAAoDhB,KAApD,EAAwE;AACtEgB,EAAAA,WAAW,CAACb,WAAZ,GAA0B,IAA1B;AACAa,EAAAA,WAAW,CAACZ,UAAZ,GAAyBJ,KAAK,CAACK,KAA/B;AACAW,EAAAA,WAAW,CAACV,UAAZ,GAAyBN,KAAK,CAACO,KAA/B;AACAS,EAAAA,WAAW,CAACR,cAAZ,GAA6BT,iBAAiB,CAACC,KAAD,CAA9C;AACAgB,EAAAA,WAAW,CAACP,YAAZ,GAA2BT,KAAK,CAACK,KAAjC;AACAW,EAAAA,WAAW,CAACN,YAAZ,GAA2BV,KAAK,CAACO,KAAjC;AACAS,EAAAA,WAAW,CAACL,gBAAZ,GAA+BZ,iBAAiB,CAACC,KAAD,CAAhD;AACAgB,EAAAA,WAAW,CAACJ,aAAZ,GAA4BZ,KAAK,CAACK,KAAlC;AACAW,EAAAA,WAAW,CAACH,aAAZ,GAA4Bb,KAAK,CAACO,KAAlC;AACAS,EAAAA,WAAW,CAACF,iBAAZ,GAAgCf,iBAAiB,CAACC,KAAD,CAAjD;AACD;;AAED,SAASiB,kBAAT,OAAyD;AAAA,MAA5BC,UAA4B,QAA5BA,UAA4B;;AAAA,QAC7CA,UAAU,IAAI,IAD+B;AAAA;AAAA;;AAYvD,SAAOA,UAAP;AACD;;AAED,SAASC,gBAAT,CAA0BnB,KAA1B,EAA8C;AAC5C,QAAMkB,UAAU,GAAGD,kBAAkB,CAACjB,KAAD,CAArC;AACA,QAAMgB,WAAW,GAAGrB,SAAS,CAACuB,UAAD,CAA7B;;AACA,MAAIF,WAAJ,EAAiB;AACfD,IAAAA,gBAAgB,CAACC,WAAD,EAAchB,KAAd,CAAhB;AACD,GAFD,MAEO;AACLL,IAAAA,SAAS,CAACuB,UAAD,CAAT,GAAwBhB,iBAAiB,CAACF,KAAD,CAAzC;AACD;;AACDnB,EAAAA,YAAY,CAACiB,mBAAb,GAAmCC,iBAAiB,CAACC,KAAD,CAApD;AACD;;AAED,SAASoB,eAAT,CAAyBpB,KAAzB,EAA6C;AAC3C,QAAMgB,WAAW,GAAGrB,SAAS,CAACsB,kBAAkB,CAACjB,KAAD,CAAnB,CAA7B;;AACA,MAAIgB,WAAJ,EAAiB;AACfA,IAAAA,WAAW,CAACb,WAAZ,GAA0B,IAA1B;AACAa,IAAAA,WAAW,CAACJ,aAAZ,GAA4BI,WAAW,CAACP,YAAxC;AACAO,IAAAA,WAAW,CAACH,aAAZ,GAA4BG,WAAW,CAACN,YAAxC;AACAM,IAAAA,WAAW,CAACF,iBAAZ,GAAgCE,WAAW,CAACL,gBAA5C;AACAK,IAAAA,WAAW,CAACP,YAAZ,GAA2BT,KAAK,CAACK,KAAjC;AACAW,IAAAA,WAAW,CAACN,YAAZ,GAA2BV,KAAK,CAACO,KAAjC;AACAS,IAAAA,WAAW,CAACL,gBAAZ,GAA+BZ,iBAAiB,CAACC,KAAD,CAAhD;AACAnB,IAAAA,YAAY,CAACiB,mBAAb,GAAmCC,iBAAiB,CAACC,KAAD,CAApD;AACD,GATD;AAoBD;;AAED,SAASqB,cAAT,CAAwBrB,KAAxB,EAA4C;AAC1C,QAAMgB,WAAW,GAAGrB,SAAS,CAACsB,kBAAkB,CAACjB,KAAD,CAAnB,CAA7B;;AACA,MAAIgB,WAAJ,EAAiB;AACfA,IAAAA,WAAW,CAACb,WAAZ,GAA0B,KAA1B;AACAa,IAAAA,WAAW,CAACJ,aAAZ,GAA4BI,WAAW,CAACP,YAAxC;AACAO,IAAAA,WAAW,CAACH,aAAZ,GAA4BG,WAAW,CAACN,YAAxC;AACAM,IAAAA,WAAW,CAACF,iBAAZ,GAAgCE,WAAW,CAACL,gBAA5C;AACAK,IAAAA,WAAW,CAACP,YAAZ,GAA2BT,KAAK,CAACK,KAAjC;AACAW,IAAAA,WAAW,CAACN,YAAZ,GAA2BV,KAAK,CAACO,KAAjC;AACAS,IAAAA,WAAW,CAACL,gBAAZ,GAA+BZ,iBAAiB,CAACC,KAAD,CAAhD;AACAnB,IAAAA,YAAY,CAACiB,mBAAb,GAAmCC,iBAAiB,CAACC,KAAD,CAApD;AACD,GATD;AAoBD;;AAmBD,IAAIsB,uBAAJ;AAEA,MAAMC,0BAA0B,GAAG;AACjC;;;AAGAC,EAAAA,UAAU,CAACC,QAAD,EAA+C;AACvDH,IAAAA,uBAAuB,GAAGG,QAA1B;AACD,GANgC;;AAQjCC,EAAAA,gBAAgB,CAACrC,YAAD,EAAuB1C,WAAvB,EAAsD;AACpE,QAAI2E,uBAAuB,IAAI,IAA/B,EAAqC;AACnCA,MAAAA,uBAAuB,CAACjC,YAAD,EAAe1C,WAAf,CAAvB;AACD;;AAED,QAAI2C,SAAS,CAACD,YAAD,CAAb,EAA6B;AAC3B1C,MAAAA,WAAW,CAACgF,cAAZ,CAA2BC,OAA3B,CAAmCR,eAAnC;AACD,KAFD,MAEO,IAAIhC,UAAU,CAACC,YAAD,CAAd,EAA8B;AACnC1C,MAAAA,WAAW,CAACgF,cAAZ,CAA2BC,OAA3B,CAAmCT,gBAAnC;AACAtC,MAAAA,YAAY,CAACe,mBAAb,GAAmCjD,WAAW,CAACkF,OAAZ,CAAoB5G,MAAvD;;AACA,UAAI4D,YAAY,CAACe,mBAAb,KAAqC,CAAzC,EAA4C;AAC1Cf,QAAAA,YAAY,CAACgB,wBAAb,GACElD,WAAW,CAACkF,OAAZ,CAAoB,CAApB,EAAuBX,UADzB;AAED;AACF,KAPM,MAOA,IAAI3B,QAAQ,CAACF,YAAD,CAAZ,EAA4B;AACjC1C,MAAAA,WAAW,CAACgF,cAAZ,CAA2BC,OAA3B,CAAmCP,cAAnC;AACAxC,MAAAA,YAAY,CAACe,mBAAb,GAAmCjD,WAAW,CAACkF,OAAZ,CAAoB5G,MAAvD;;AACA,UAAI4D,YAAY,CAACe,mBAAb,KAAqC,CAAzC,EAA4C;AAC1C,aAAK,IAAI5E,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG2E,SAAS,CAAC1E,MAA9B,EAAsCD,CAAC,EAAvC,EAA2C;AACzC,gBAAM8G,iBAAiB,GAAGnC,SAAS,CAAC3E,CAAD,CAAnC;;AACA,cAAI8G,iBAAiB,IAAI,IAArB,IAA6BA,iBAAiB,CAAC3B,WAAnD,EAAgE;AAC9DtB,YAAAA,YAAY,CAACgB,wBAAb,GAAwC7E,CAAxC;AACA;AACD;AACF;AAOF;AACF;AACF,GAzCgC;;AA2CjC6D,EAAAA;AA3CiC,CAAnC;;AChLA;;;;;;;;AAOA,SAASkD,UAAT,CACEC,OADF,EAEEC,IAFF,EAGgB;AAAA,QAEZA,IAAI,IAAI,IAFI;AAAA;AAAA;;AAMd,MAAID,OAAO,IAAI,IAAf,EAAqB;AACnB,WAAOC,IAAP;AACD,GARa;AAWd;;;AACA,MAAIrI,OAAO,CAACoI,OAAD,CAAX,EAAsB;AACpB,WAAOA,OAAO,CAACE,MAAR,CAAeD,IAAf,CAAP;AACD;;AAED,MAAIrI,OAAO,CAACqI,IAAD,CAAX,EAAmB;AACjB,WAAO,CAACD,OAAD,EAAUE,MAAV,CAAiBD,IAAjB,CAAP;AACD;;AAED,SAAO,CAACD,OAAD,EAAUC,IAAV,CAAP;AACD;;AC/BD;;;;;;;;;;;;;AAaA,SAASE,cAAT,CACEH,OADF,EAEEC,IAFF,EAGgB;AAAA,QAEZA,IAAI,IAAI,IAFI;AAAA;AAAA;;AAMd,MAAID,OAAO,IAAI,IAAf,EAAqB;AACnB,WAAOC,IAAP;AACD,GARa;AAWd;;;AACA,MAAIrI,OAAO,CAACoI,OAAD,CAAX,EAAsB;AACpB,QAAIpI,OAAO,CAACqI,IAAD,CAAX,EAAmB;AACjBD,MAAAA,OAAO,CAACvD,IAAR,CAAa3F,KAAb,CAAmBkJ,OAAnB,EAA4BC,IAA5B;AACA,aAAOD,OAAP;AACD;;AACDA,IAAAA,OAAO,CAACvD,IAAR,CAAawD,IAAb;AACA,WAAOD,OAAP;AACD;;AAED,MAAIpI,OAAO,CAACqI,IAAD,CAAX,EAAmB;AACjB;AACA,WAAO,CAACD,OAAD,EAAUE,MAAV,CAAiBD,IAAjB,CAAP;AACD;;AAED,SAAO,CAACD,OAAD,EAAUC,IAAV,CAAP;AACD;;AC9CD;;;;;;;;;AASA,SAASG,kBAAT,CACEC,GADF,EAEEC,EAFF,EAGEC,KAHF,EAIE;AACA,MAAI9J,KAAK,CAACmB,OAAN,CAAcyI,GAAd,CAAJ,EAAwB;AACtBA,IAAAA,GAAG,CAACT,OAAJ,CAAYU,EAAZ,EAAgBC,KAAhB;AACD,GAFD,MAEO,IAAIF,GAAJ,EAAS;AACdC,IAAAA,EAAE,CAAC1J,IAAH,CAAQ2J,KAAR,EAAeF,GAAf;AACD;AACF;;ACQM,MAAMG,iBAAiB,GAAG,CAA1B;AACP,AAAO,MAAMC,cAAc,GAAG,CAAvB;AACP,AAAO,MAAMC,sBAAsB,GAAG,CAA/B;;AACP,AAAO,MAAMC,QAAQ,GAAG,CAAjB;;AACP,AAAO,MAAMC,UAAU,GAAG,CAAnB;;AACP,AAAO,MAAMC,aAAa,GAAG,CAAtB;AACP,AAAO,MAAMC,QAAQ,GAAG,CAAjB;AACP,AAAO,MAAMC,QAAQ,GAAG,CAAjB;AACP,AAAO,MAAMC,IAAI,GAAG,CAAb;AACP,AAAO,MAAMC,eAAe,GAAG,CAAxB;AACP,AAAO,MAAMC,eAAe,GAAG,EAAxB;AACP,AAAO,MAAMC,UAAU,GAAG,EAAnB;AACP,AAAO,MAAMC,QAAQ,GAAG,EAAjB;AACP,AAAO,MAAMC,iBAAiB,GAAG,EAA1B;AACP,AAAO,MAAMC,aAAa,GAAG,EAAtB;AACP,AAAO,MAAMC,mBAAmB,GAAG,EAA5B;AACP,AAAO,MAAMC,aAAa,GAAG,EAAtB;AACP,AAAO,MAAMC,wBAAwB,GAAG,EAAjC;AACP,AAAO,MAAMC,kBAAkB,GAAG,EAA3B;AACP,AAAO,MAAMC,qBAAqB,GAAG,EAA9B;AACP,AAAO,MAAMC,cAAc,GAAG,EAAvB;AACP,AAAO,MAAMC,kBAAkB,GAAG,EAA3B;AACP,AAAO,MAAMC,qBAAqB,GAAG,EAA9B;AACP,AAAO,MAAMC,cAAc,GAAG,EAAvB;;AC1BP;;;;;AAIA,IAAIC,aAAa,GAAG,IAApB;AAEA;;;;;AAIA,IAAIC,iBAAiB,GAAG,CAAxB;;AAEA,MAAMC,eAAe,GAAG,UAASC,iBAAT,EAA4BC,kBAA5B,EAAgD;AACtE,QAAMC,gBAAgB,GAAGL,aAAzB;AACAA,EAAAA,aAAa,GAAGG,iBAAhB;;AACA,MAAIG,oBAAoB,CAACC,sBAArB,KAAgD,IAApD,EAA0D;AACxDD,IAAAA,oBAAoB,CAACC,sBAArB,CAA4CC,QAA5C,CACEH,gBADF,EAEEF,iBAFF,EAGEC,kBAHF;AAKD;AACF,CAVD;;AAYA,MAAMK,UAAU,GAAG;AACjB;;;;AAIAC,EAAAA,uBAAuB,EAAE;AACvBC,IAAAA,uBAAuB,EAAE;AACvBC,MAAAA,OAAO,EAAE,2BADc;AAEvBC,MAAAA,QAAQ,EAAE;AAFa,KADF;AAKvBC,IAAAA,YAAY,EAAEtF;AALS,GALR;;AAajB;;;;;;;;;AASAuF,EAAAA,wBAAwB,EAAE;AACxBJ,IAAAA,uBAAuB,EAAE;AACvBC,MAAAA,OAAO,EAAE,4BADc;AAEvBC,MAAAA,QAAQ,EAAE;AAFa,KADD;AAKxBC,IAAAA,YAAY,EAAE,CAAC5F,UAAD;AALU,GAtBT;;AA8BjB;;;;;;;AAOA8F,EAAAA,iCAAiC,EAAE;AACjCL,IAAAA,uBAAuB,EAAE;AACvBC,MAAAA,OAAO,EAAE,qCADc;AAEvBC,MAAAA,QAAQ,EAAE;AAFa,KADQ;AAKjCC,IAAAA,YAAY,EAAE,CAAC3F,oBAAD;AALmB,GArClB;;AA6CjB;;;;AAIA8F,EAAAA,sBAAsB,EAAE;AACtBN,IAAAA,uBAAuB,EAAE;AACvBC,MAAAA,OAAO,EAAE,0BADc;AAEvBC,MAAAA,QAAQ,EAAE;AAFa,KADH;AAKtBC,IAAAA,YAAY,EAAErF;AALQ,GAjDP;;AAyDjB;;;AAGAyF,EAAAA,cAAc,EAAE;AACdC,IAAAA,gBAAgB,EAAE,kBADJ;AAEdL,IAAAA,YAAY,EAAEtF;AAFA,GA5DC;AAgEjB4F,EAAAA,aAAa,EAAE;AACbD,IAAAA,gBAAgB,EAAE,iBADL;AAEbL,IAAAA,YAAY,EAAErF;AAFD,GAhEE;AAoEjB4F,EAAAA,YAAY,EAAE;AACZF,IAAAA,gBAAgB,EAAE,gBADN;AAEZL,IAAAA,YAAY,EAAEpF;AAFF,GApEG;AAwEjB4F,EAAAA,gBAAgB,EAAE;AAChBH,IAAAA,gBAAgB,EAAE,oBADF;AAEhBL,IAAAA,YAAY,EAAEpF;AAFE,GAxED;AA4EjB6F,EAAAA,2BAA2B,EAAE;AAC3BJ,IAAAA,gBAAgB,EAAE,+BADS;AAE3BL,IAAAA,YAAY,EAAE;AAFa,GA5EZ;AAgFjBU,EAAAA,cAAc,EAAE;AACdL,IAAAA,gBAAgB,EAAE,kBADJ;AAEdL,IAAAA,YAAY,EAAE;AAFA,GAhFC;AAoFjBW,EAAAA,eAAe,EAAE;AACfN,IAAAA,gBAAgB,EAAE,mBADH;AAEfL,IAAAA,YAAY,EAAE;AAFC,GApFA;AAwFjBY,EAAAA,kBAAkB,EAAE;AAClBP,IAAAA,gBAAgB,EAAE,sBADA;AAElBL,IAAAA,YAAY,EAAE;AAFI;AAxFH,CAAnB;AA+FA;AACA;;AAEA,SAASa,SAAT,CAAmBpL,IAAnB,EAAyB;AACvB,KAAG;AACDA,IAAAA,IAAI,GAAGA,IAAI,CAACqL,MAAZ,CADC;AAGD;AACA;AACA;AACA;AACD,GAPD,QAOSrL,IAAI,IAAIA,IAAI,CAACsL,GAAL,KAAahD,aAP9B;;AAQA,MAAItI,IAAJ,EAAU;AACR,WAAOA,IAAP;AACD;;AACD,SAAO,IAAP;AACD;AAED;;;;;;AAIA,AAAO,SAASuL,uBAAT,CAAiCC,KAAjC,EAAwCC,KAAxC,EAA+C;AACpD,MAAIC,MAAM,GAAG,CAAb;;AACA,OAAK,IAAIC,KAAK,GAAGH,KAAjB,EAAwBG,KAAxB,EAA+BA,KAAK,GAAGP,SAAS,CAACO,KAAD,CAAhD,EAAyD;AACvDD,IAAAA,MAAM;AACP;;AACD,MAAIE,MAAM,GAAG,CAAb;;AACA,OAAK,IAAIC,KAAK,GAAGJ,KAAjB,EAAwBI,KAAxB,EAA+BA,KAAK,GAAGT,SAAS,CAACS,KAAD,CAAhD,EAAyD;AACvDD,IAAAA,MAAM;AACP,GARmD;;;AAWpD,SAAOF,MAAM,GAAGE,MAAT,GAAkB,CAAzB,EAA4B;AAC1BJ,IAAAA,KAAK,GAAGJ,SAAS,CAACI,KAAD,CAAjB;AACAE,IAAAA,MAAM;AACP,GAdmD;;;AAiBpD,SAAOE,MAAM,GAAGF,MAAT,GAAkB,CAAzB,EAA4B;AAC1BD,IAAAA,KAAK,GAAGL,SAAS,CAACK,KAAD,CAAjB;AACAG,IAAAA,MAAM;AACP,GApBmD;;;AAuBpD,MAAIE,KAAK,GAAGJ,MAAZ;;AACA,SAAOI,KAAK,EAAZ,EAAgB;AACd,QAAIN,KAAK,KAAKC,KAAV,IAAmBD,KAAK,KAAKC,KAAK,CAACM,SAAvC,EAAkD;AAChD,aAAOP,KAAP;AACD;;AACDA,IAAAA,KAAK,GAAGJ,SAAS,CAACI,KAAD,CAAjB;AACAC,IAAAA,KAAK,GAAGL,SAAS,CAACK,KAAD,CAAjB;AACD;;AACD,SAAO,IAAP;AACD;AAED;;;;AAGA,SAASO,UAAT,CAAoBR,KAApB,EAA2BC,KAA3B,EAAkC;AAChC,SAAOA,KAAP,EAAc;AACZ,QAAID,KAAK,KAAKC,KAAV,IAAmBD,KAAK,KAAKC,KAAK,CAACM,SAAvC,EAAkD;AAChD,aAAO,IAAP;AACD;;AACDN,IAAAA,KAAK,GAAGL,SAAS,CAACK,KAAD,CAAjB;AACD;;AACD,SAAO,KAAP;AACD;AAED;;;;;AAGA,SAASQ,gBAAT,CAA0BjM,IAA1B,EAAgCkM,EAAhC,EAAoCC,GAApC,EAAyC;AACvC,QAAMC,IAAI,GAAG,EAAb;;AACA,SAAOpM,IAAP,EAAa;AACXoM,IAAAA,IAAI,CAAClI,IAAL,CAAUlE,IAAV;AACAA,IAAAA,IAAI,GAAGoL,SAAS,CAACpL,IAAD,CAAhB;AACD;;AACD,MAAIS,CAAJ;;AACA,OAAKA,CAAC,GAAG2L,IAAI,CAAC1L,MAAd,EAAsBD,CAAC,KAAK,CAA5B,GAAiC;AAC/ByL,IAAAA,EAAE,CAACE,IAAI,CAAC3L,CAAD,CAAL,EAAU,UAAV,EAAsB0L,GAAtB,CAAF;AACD;;AACD,OAAK1L,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAG2L,IAAI,CAAC1L,MAArB,EAA6BD,CAAC,EAA9B,EAAkC;AAChCyL,IAAAA,EAAE,CAACE,IAAI,CAAC3L,CAAD,CAAL,EAAU,SAAV,EAAqB0L,GAArB,CAAF;AACD;AACF;;AAED,SAASE,WAAT,CAAqBrM,IAArB,EAA2B4K,gBAA3B,EAA6C;AAC3C,QAAM0B,SAAS,GAAGtM,IAAI,CAACsM,SAAvB;;AACA,MAAIA,SAAS,KAAK,IAAlB,EAAwB;AACtB;AACA,WAAO,IAAP;AACD;;AACD,QAAMC,KAAK,GAAGjN,4BAA4B,CAACgN,SAAD,CAA1C;;AACA,MAAIC,KAAK,KAAK,IAAd,EAAoB;AAClB;AACA,WAAO,IAAP;AACD;;AACD,QAAMxM,QAAQ,GAAGwM,KAAK,CAAC3B,gBAAD,CAAtB;;AAX2C,QAazC,CAAC7K,QAAD,IAAa,OAAOA,QAAP,KAAoB,UAbQ;AAAA,+BAezC6K,gBAfyC,6DAgBzC,OAAO7K,QAhBkC;AAAA;;AAkB3C,SAAOA,QAAP;AACD;;AAED,SAASyM,eAAT,CAAyBxM,IAAzB,EAA+BF,KAA/B,EAAsC2M,gBAAtC,EAA2E;AACzE,QAAM7B,gBAAgB,GACpB9K,KAAK,CAACoC,cAAN,CAAqBkI,uBAArB,CAA6CqC,gBAA7C,CADF;AAEA,SAAOJ,WAAW,CAACrM,IAAD,EAAO4K,gBAAP,CAAlB;AACD;;AAED,SAAS8B,+BAAT,CAAyC1M,IAAzC,EAA+C2M,KAA/C,EAAsD7M,KAAtD,EAA6D;AAC3D;AAKA,QAAMC,QAAQ,GAAGyM,eAAe,CAACxM,IAAD,EAAOF,KAAP,EAAc6M,KAAd,CAAhC;;AACA,MAAI5M,QAAJ,EAAc;AACZD,IAAAA,KAAK,CAACQ,kBAAN,GAA2BsH,cAAc,CACvC9H,KAAK,CAACQ,kBADiC,EAEvCP,QAFuC,CAAzC;AAIAD,IAAAA,KAAK,CAACU,kBAAN,GAA2BoH,cAAc,CAAC9H,KAAK,CAACU,kBAAP,EAA2BR,IAA3B,CAAzC;AACD;AACF;AAED;;;;;;;AAKA,SAAS4M,oBAAT,CACE5M,IADF,EAEE6M,gBAFF,EAGE/M,KAHF,EAIQ;AACN,MAAIE,IAAI,IAAIF,KAAR,IAAiBA,KAAK,CAACoC,cAAN,CAAqB0I,gBAA1C,EAA4D;AAC1D,UAAMA,gBAAgB,GAAG9K,KAAK,CAACoC,cAAN,CAAqB0I,gBAA9C;AACA,UAAM7K,QAAQ,GAAGsM,WAAW,CAACrM,IAAD,EAAO4K,gBAAP,CAA5B;;AACA,QAAI7K,QAAJ,EAAc;AACZD,MAAAA,KAAK,CAACQ,kBAAN,GAA2BsH,cAAc,CACvC9H,KAAK,CAACQ,kBADiC,EAEvCP,QAFuC,CAAzC;AAIAD,MAAAA,KAAK,CAACU,kBAAN,GAA2BoH,cAAc,CAAC9H,KAAK,CAACU,kBAAP,EAA2BR,IAA3B,CAAzC;AACD;AACF;AACF;AAED;;;;;;;AAKA,SAAS8M,gCAAT,CAA0ChN,KAA1C,EAAyD;AACvD,MAAIA,KAAK,IAAIA,KAAK,CAACoC,cAAN,CAAqB0I,gBAAlC,EAAoD;AAClDgC,IAAAA,oBAAoB,CAAC9M,KAAK,CAACwC,WAAP,EAAoB,IAApB,EAA0BxC,KAA1B,CAApB;AACD;AACF;;AAED,SAASiN,0BAAT,CAAoCC,MAApC,EAAuE;AACrEnF,EAAAA,kBAAkB,CAACmF,MAAD,EAASF,gCAAT,CAAlB;AACD;;AAED,SAASG,4CAAT,CAAsDnN,KAAtD,EAA6D;AAC3D,MAAIA,KAAK,IAAIA,KAAK,CAACoC,cAAN,CAAqBkI,uBAAlC,EAA2D;AACzD,UAAMjI,UAAU,GAAGrC,KAAK,CAACwC,WAAzB;AACA,UAAM4K,UAAU,GAAG/K,UAAU,GAAGiJ,SAAS,CAACjJ,UAAD,CAAZ,GAA2B,IAAxD;AACA8J,IAAAA,gBAAgB,CAACiB,UAAD,EAAaR,+BAAb,EAA8C5M,KAA9C,CAAhB;AACD;AACF;;AAED,SAASqN,sCAAT,CAAgDH,MAAhD,EAAwD;AACtDnF,EAAAA,kBAAkB,CAACmF,MAAD,EAASC,4CAAT,CAAlB;AACD;;AAED,SAASG,kCAAT,CAA4CtN,KAA5C,EAAmD;AACjD,MAAIA,KAAK,IAAIA,KAAK,CAACoC,cAAN,CAAqBkI,uBAAlC,EAA2D;AACzD6B,IAAAA,gBAAgB,CAACnM,KAAK,CAACwC,WAAP,EAAoBoK,+BAApB,EAAqD5M,KAArD,CAAhB;AACD;AACF;;AAED,SAASuN,4BAAT,CAAsCL,MAAtC,EAA8C;AAC5CnF,EAAAA,kBAAkB,CAACmF,MAAD,EAASI,kCAAT,CAAlB;AACD;;AAGD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmDA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+EA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4DA,SAASE,8BAAT,CACExI,YADF,EAEE3C,UAFF,EAGEC,WAHF,EAIEC,iBAJF,EAKE;AACA,QAAMkL,kBAAkB,GAAG1I,UAAU,CAACC,YAAD,CAAV,GACvBoF,UAAU,CAACC,uBADY,GAEvBpF,SAAS,CAACD,YAAD,CAAT,GACAoF,UAAU,CAACQ,sBADX,GAEA5F,YAAY,KAAKF,oBAAjB,GACAsF,UAAU,CAACO,iCADX,GAEAP,UAAU,CAACM,wBANf,CADA;;AAUA,QAAMgD,mBAAmB,GAAG,CAAC/D,aAAD,GACxBtH,UADwB,GAExBoJ,uBAAuB,CAAC9B,aAAD,EAAgBtH,UAAhB,CAF3B,CAVA;AAeA;AACA;AACA;;AACA,QAAMsL,2BAA2B,GAAGD,mBAAmB,KAAK/D,aAA5D;AACA,QAAMiE,cAAc,GAAGrJ,uBAAuB,CAACF,SAAxB,CACrBoJ,kBADqB,EAErBC,mBAFqB,EAGrBpL,WAHqB,EAIrBC,iBAJqB,CAAvB;AAMAqL,EAAAA,cAAc,CAACpJ,YAAf,GAA8B0C,0BAA0B,CAAC1C,YAAzD;;AACA,MAAImJ,2BAAJ,EAAiC;AAC/BN,IAAAA,sCAAsC,CAACO,cAAD,CAAtC;AACD,GAFD,MAEO;AACLL,IAAAA,4BAA4B,CAACK,cAAD,CAA5B;AACD;;AACD,QAAMC,kBAAkB,GAAG9M,kCAAkC,CAAC6M,cAAD,CAA7D;;AACA,MAAI,CAACA,cAAc,CAACtK,YAAf,EAAL,EAAoC;AAClCsK,IAAAA,cAAc,CAAClL,WAAf,CAA2B4B,OAA3B,CAAmCsJ,cAAnC;AACD;;AAED,MAAI,CAACC,kBAAD,IAAuBA,kBAAkB,KAAKlE,aAAlD,EAAiE;AAC/D,WAAO,IAAP;AACD;;AACD,MAAImE,SAAJ;AACA,QAAMC,UAAU,GAAGxJ,uBAAuB,CAACF,SAAxB,CACjB+F,UAAU,CAACe,cADM,EAEjB0C,kBAFiB,EAGjBvL,WAHiB,EAIjBC,iBAJiB,CAAnB;AAMAwL,EAAAA,UAAU,CAACvJ,YAAX,GAA0B0C,0BAA0B,CAAC1C,YAArD;AAEAyI,EAAAA,0BAA0B,CAACc,UAAD,CAA1B;AACA,QAAMhE,kBAAkB,GAAG9I,qBAAqB,CAAC8M,UAAD,CAArB,KAAsC,IAAjE;;AACA,MAAIpE,aAAJ,EAAmB;AACjB,UAAMqE,uBAAuB,GAAGzJ,uBAAuB,CAACF,SAAxB,CAC9B+F,UAAU,CAACc,2BADmB,EAE9BvB,aAF8B,EAG9BrH,WAH8B,EAI9BC,iBAJ8B,CAAhC;AAMAyL,IAAAA,uBAAuB,CAACxJ,YAAxB,GACE0C,0BAA0B,CAAC1C,YAD7B;AAEAyI,IAAAA,0BAA0B,CAACe,uBAAD,CAA1B;AACA,UAAMC,YAAY,GAChB,CAAC5M,aAAa,CAAC2M,uBAAD,CAAd,IACA/M,qBAAqB,CAAC+M,uBAAD,CAFvB;;AAGA,QAAI,CAACA,uBAAuB,CAAC1K,YAAxB,EAAL,EAA6C;AAC3C0K,MAAAA,uBAAuB,CAACtL,WAAxB,CAAoC4B,OAApC,CAA4C0J,uBAA5C;AACD;;AAED,QAAIC,YAAJ,EAAkB;AAChB,YAAMC,cAAc,GAAG3J,uBAAuB,CAACF,SAAxB,CACrB+F,UAAU,CAACiB,kBADU,EAErB1B,aAFqB,EAGrBrH,WAHqB,EAIrBC,iBAJqB,CAAvB;AAMA2L,MAAAA,cAAc,CAAC1J,YAAf,GAA8B0C,0BAA0B,CAAC1C,YAAzD;AACAyI,MAAAA,0BAA0B,CAACiB,cAAD,CAA1B;AACAJ,MAAAA,SAAS,GAAGpG,UAAU,CAACoG,SAAD,EAAY,CAACC,UAAD,EAAaG,cAAb,CAAZ,CAAtB;AACArE,MAAAA,eAAe,CAACgE,kBAAD,EAAqB9D,kBAArB,CAAf;AACD,KAXD,MAWO;AACL,YAAMoE,WAAW,GAAG5J,uBAAuB,CAACF,SAAxB,CAClB+F,UAAU,CAACgB,eADO,EAElByC,kBAFkB,EAGlBvL,WAHkB,EAIlBC,iBAJkB,CAApB;AAMA4L,MAAAA,WAAW,CAAC3J,YAAZ,GAA2B0C,0BAA0B,CAAC1C,YAAtD;AACAyI,MAAAA,0BAA0B,CAACkB,WAAD,CAA1B;AACAL,MAAAA,SAAS,GAAGpG,UAAU,CAACoG,SAAD,EAAYK,WAAZ,CAAtB;AACD;AACF,GAvCD,MAuCO;AACLL,IAAAA,SAAS,GAAGpG,UAAU,CAACoG,SAAD,EAAYC,UAAZ,CAAtB;AACAlE,IAAAA,eAAe,CAACgE,kBAAD,EAAqB9D,kBAArB,CAAf;AACD;;AACD,SAAO+D,SAAP;AACD;AAED;;;;;;;;;;AAQA,SAASM,kBAAT,CAA4BpJ,YAA5B,EAA0CqJ,YAA1C,EAAwD/L,WAAxD,EAAqE;AACnE,SACE+L,YAAY;AAEZ;AACA;AACErJ,EAAAA,YAAY,KAAKH,UAAjB,IAA+B,CAACvC,WAAW,CAACgM,qBAA7C,IACE1E,iBAAiB,GAAG,CAApB,IAAyB5E,YAAY,KAAKF,oBAD5C,IAECC,UAAU,CAACC,YAAD,CAFX,IAGCC,SAAS,CAACD,YAAD,CAPC,CADd;AAUD;AAED;;;;;;;;;AAOA,SAASuJ,kBAAT,CAA4BjM,WAA5B,EAAyC;AACvC,QAAMkF,OAAO,GAAGlF,WAAW,CAACkF,OAA5B;;AACA,MAAI,CAACA,OAAD,IAAYA,OAAO,CAAC5G,MAAR,KAAmB,CAAnC,EAAsC;AACpC,WAAO,IAAP;AACD;;AACD,OAAK,IAAID,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG6G,OAAO,CAAC5G,MAA5B,EAAoCD,CAAC,EAArC,EAAyC;AACvC,UAAM6N,WAAW,GAAGhH,OAAO,CAAC7G,CAAD,CAA3B;AACA,UAAMa,MAAM,GAAGgN,WAAW,CAAChN,MAA3B;;AACA,QAAIA,MAAM,KAAK,IAAX,IAAmBA,MAAM,KAAKnB,SAA9B,IAA2CmB,MAAM,KAAK,CAA1D,EAA6D;AAC3D;AACA,YAAMa,UAAU,GAAG5C,mBAAmB,CAAC+B,MAAD,CAAtC;;AACA,UAAI0K,UAAU,CAACvC,aAAD,EAAgBtH,UAAhB,CAAd,EAA2C;AACzC,eAAO,KAAP;AACD;AACF;AACF;;AACD,SAAO,IAAP;AACD;;AAED,MAAM4H,oBAAoB,GAAG;AAC3B;AACAwE,EAAAA,aAAa,EAAE,YAAW;AACxB,WAAO9E,aAAP;AACD,GAJ0B;AAM3BS,EAAAA,UAAU,EAAEA,UANe;;AAQ3B;;;;;AAKAsE,EAAAA,aAAa,EAAE,UACb1J,YADa,EAEb3C,UAFa,EAGbC,WAHa,EAIbC,iBAJa,EAKboM,gBALa,EAMb;AACA,QAAI5J,UAAU,CAACC,YAAD,CAAd,EAA8B;AAC5B4E,MAAAA,iBAAiB,IAAI,CAArB;AACD,KAFD,MAEO,IAAI1E,QAAQ,CAACF,YAAD,CAAZ,EAA4B;AACjC,UAAI4E,iBAAiB,IAAI,CAAzB,EAA4B;AAC1BA,QAAAA,iBAAiB,IAAI,CAArB;AACD,OAFD,MAEO;AACL;AAKA,eAAO,IAAP;AACD;AACF;;AAED1C,IAAAA,0BAA0B,CAACG,gBAA3B,CAA4CrC,YAA5C,EAA0D1C,WAA1D;AAEA,QAAIwL,SAAS,GAAGM,kBAAkB,CAACpJ,YAAD,EAAe3C,UAAf,EAA2BC,WAA3B,CAAlB,GACZkL,8BAA8B,CAC5BxI,YAD4B,EAE5B3C,UAF4B,EAG5BC,WAH4B,EAI5BC,iBAJ4B,CADlB,GAOZ,IAPJ,CAlBA;AA2BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,UAAMqM,qBAAqB,GAAGjF,aAAa,IAAI5E,UAAU,CAACC,YAAD,CAAzD;AACA,UAAM6J,oBAAoB,GAAGlF,aAAa,IAAI1E,SAAS,CAACD,YAAD,CAAvD;AACA,UAAM8J,mBAAmB,GAAGnF,aAAa,IAAIzE,QAAQ,CAACF,YAAD,CAArD;AACA,UAAM+J,gBAAgB,GAAGH,qBAAqB,GAC1CxE,UAAU,CAACS,cAD+B,GAE1CgE,oBAAoB,GACpBzE,UAAU,CAACW,aADS,GAEpB+D,mBAAmB,GACnB1E,UAAU,CAACY,YADQ,GAEnB,IANJ;;AAQA,QAAI+D,gBAAJ,EAAsB;AACpB,YAAMC,OAAO,GAAGzK,uBAAuB,CAACF,SAAxB,CACd0K,gBADc,EAEdpF,aAFc,EAGdrH,WAHc,EAIdC,iBAJc,CAAhB;AAMAyM,MAAAA,OAAO,CAACxK,YAAR,GAAuB0C,0BAA0B,CAAC1C,YAAlD;AACAyI,MAAAA,0BAA0B,CAAC+B,OAAD,CAA1B;AACAlB,MAAAA,SAAS,GAAGpG,UAAU,CAACoG,SAAD,EAAYkB,OAAZ,CAAtB;AACD;;AAED,UAAMC,oBAAoB,GACxBtF,aAAa,IAAI3E,YAAY,KAAKJ,gBADpC;AAEA,UAAMsK,kBAAkB,GACtBvF,aAAa,IACb,CAACsF,oBADD,IAEA/J,QAAQ,CAACF,YAAD,CAFR,IAGAuJ,kBAAkB,CAACjM,WAAD,CAJpB;AAKA,UAAM6M,UAAU,GAAGF,oBAAoB,GACnC7E,UAAU,CAACiB,kBADwB,GAEnC6D,kBAAkB,GAClB9E,UAAU,CAACa,gBADO,GAElB,IAJJ;;AAKA,QAAIkE,UAAJ,EAAgB;AACd,YAAMC,UAAU,GAAG7K,uBAAuB,CAACF,SAAxB,CACjB8K,UADiB,EAEjBxF,aAFiB,EAGjBrH,WAHiB,EAIjBC,iBAJiB,CAAnB;AAMA6M,MAAAA,UAAU,CAAC5K,YAAX,GAA0B0C,0BAA0B,CAAC1C,YAArD;AACAyI,MAAAA,0BAA0B,CAACmC,UAAD,CAA1B;AACAtB,MAAAA,SAAS,GAAGpG,UAAU,CAACoG,SAAD,EAAYsB,UAAZ,CAAtB;AACAvF,MAAAA,eAAe,CAAC,IAAD,CAAf;AACD;;AAED,WAAOiE,SAAP;AACD,GAxG0B;AA0G3B5D,EAAAA,sBAAsB,EAAE,IA1GG;AA4G3BmF,EAAAA,SAAS,EAAE;AACT;;;;;AAKAC,IAAAA,4BAA4B,CAACpF,sBAAD,EAAyB;AACnDD,MAAAA,oBAAoB,CAACC,sBAArB,GAA8CA,sBAA9C;AACD;;AARQ;AA5GgB,CAA7B;;ACjpBA;;;AAGA,IAAIqF,gBAAkC,GAAG,IAAzC;AAEA;;;;AAGA,MAAMC,cAA8B,GAAG,EAAvC;AAEA;;;;;;AAKA,SAASC,uBAAT,GAAyC;AACvC,MAAI,CAACF,gBAAL,EAAuB;AACrB;AACA;AACD;;AACD,OAAK,MAAMG,UAAX,IAAyBF,cAAzB,EAAyC;AACvC,UAAMG,YAAY,GAAGH,cAAc,CAACE,UAAD,CAAnC;AACA,UAAME,WAAW,GAAGL,gBAAgB,CAACM,OAAjB,CAAyBH,UAAzB,CAApB;;AAFuC,UAIrCE,WAAW,GAAG,CAAC,CAJsB;AAAA,mHAOrCF,UAPqC;AAAA;;AASvC,QAAII,OAAO,CAACF,WAAD,CAAX,EAA0B;AACxB;AACD;;AAXsC,SAarCD,YAAY,CAACjB,aAbwB;AAAA,yGAgBrCgB,UAhBqC;AAAA;;AAkBvCI,IAAAA,OAAO,CAACF,WAAD,CAAP,GAAuBD,YAAvB;AACA,UAAMI,eAAe,GAAGJ,YAAY,CAACvF,UAArC;;AACA,SAAK,MAAM4F,SAAX,IAAwBD,eAAxB,EAAyC;AAAA,WAErCE,qBAAqB,CACnBF,eAAe,CAACC,SAAD,CADI,EAEnBL,YAFmB,EAGnBK,SAHmB,CAFgB;AAAA,uEAQrCA,SARqC,sBASrCN,UATqC;AAAA;AAWxC;AACF;AACF;AAED;;;;;;;;;;AAQA,SAASO,qBAAT,CACE7N,cADF,EAEEuN,YAFF,EAGEK,SAHF,EAIW;AAAA,OAEP,CAACE,wBAAwB,CAACtN,cAAzB,CAAwCoN,SAAxC,CAFM;AAAA,0GAKPA,SALO;AAAA;;AAOTE,EAAAA,wBAAwB,CAACF,SAAD,CAAxB,GAAsC5N,cAAtC;AAEA,QAAMkI,uBAAuB,GAAGlI,cAAc,CAACkI,uBAA/C;;AACA,MAAIA,uBAAJ,EAA6B;AAC3B,SAAK,MAAM6F,SAAX,IAAwB7F,uBAAxB,EAAiD;AAC/C,UAAIA,uBAAuB,CAAC1H,cAAxB,CAAuCuN,SAAvC,CAAJ,EAAuD;AACrD,cAAMC,sBAAsB,GAAG9F,uBAAuB,CAAC6F,SAAD,CAAtD;AACAE,QAAAA,uBAAuB,CACrBD,sBADqB,EAErBT,YAFqB,EAGrBK,SAHqB,CAAvB;AAKD;AACF;;AACD,WAAO,IAAP;AACD,GAZD,MAYO,IAAI5N,cAAc,CAAC0I,gBAAnB,EAAqC;AAC1CuF,IAAAA,uBAAuB,CACrBjO,cAAc,CAAC0I,gBADM,EAErB6E,YAFqB,EAGrBK,SAHqB,CAAvB;AAKA,WAAO,IAAP;AACD;;AACD,SAAO,KAAP;AACD;AAED;;;;;;;;;AAOA,SAASK,uBAAT,CACEvF,gBADF,EAEE6E,YAFF,EAGEK,SAHF,EAIQ;AAAA,OAEJ,CAACM,uBAAuB,CAACxF,gBAAD,CAFpB;AAAA,iHAKJA,gBALI;AAAA;;AAONwF,EAAAA,uBAAuB,CAACxF,gBAAD,CAAvB,GAA4C6E,YAA5C;AACAY,EAAAA,4BAA4B,CAACzF,gBAAD,CAA5B,GACE6E,YAAY,CAACvF,UAAb,CAAwB4F,SAAxB,EAAmCvF,YADrC;AAWD;AAED;;;;AAIA;;;;;AAGA,AAAO,MAAMqF,OAAO,GAAG,EAAhB;AAEP;;;;AAGA,AAAO,MAAMI,wBAAwB,GAAG,EAAjC;AAEP;;;;AAGA,AAAO,MAAMI,uBAAuB,GAAG,EAAhC;AAEP;;;;AAGA,AAAO,MAAMC,4BAA4B,GAAG,EAArC;AAEP;AASA;;;;;;;;;AAQA,AAAO,SAASC,sBAAT,CACLC,wBADK,EAEC;AAAA,OAEJ,CAAClB,gBAFG;AAAA;AAAA;;;AAONA,EAAAA,gBAAgB,GAAGnR,KAAK,CAACC,SAAN,CAAgBC,KAAhB,CAAsBC,IAAtB,CAA2BkS,wBAA3B,CAAnB;AACAhB,EAAAA,uBAAuB;AACxB;AAED;;;;;;;;;;AASA,AAAO,SAASiB,wBAAT,CACLC,sBADK,EAEC;AACN,MAAIC,eAAe,GAAG,KAAtB;;AACA,OAAK,MAAMlB,UAAX,IAAyBiB,sBAAzB,EAAiD;AAC/C,QAAI,CAACA,sBAAsB,CAAC/N,cAAvB,CAAsC8M,UAAtC,CAAL,EAAwD;AACtD;AACD;;AACD,UAAMC,YAAY,GAAGgB,sBAAsB,CAACjB,UAAD,CAA3C;;AACA,QACE,CAACF,cAAc,CAAC5M,cAAf,CAA8B8M,UAA9B,CAAD,IACAF,cAAc,CAACE,UAAD,CAAd,KAA+BC,YAFjC,EAGE;AAAA,WAEE,CAACH,cAAc,CAACE,UAAD,CAFjB;AAAA,8GAKEA,UALF;AAAA;;AAOAF,MAAAA,cAAc,CAACE,UAAD,CAAd,GAA6BC,YAA7B;AACAiB,MAAAA,eAAe,GAAG,IAAlB;AACD;AACF;;AACD,MAAIA,eAAJ,EAAqB;AACnBnB,IAAAA,uBAAuB;AACxB;AACF;;ACxOc,SAASlD,aAAT,CACbrM,IADa,EAEb4K,gBAFa,EAGI;AACjB,QAAM0B,SAAS,GAAGtM,IAAI,CAACsM,SAAvB;;AACA,MAAIA,SAAS,KAAK,IAAlB,EAAwB;AACtB;AACA,WAAO,IAAP;AACD;;AACD,QAAMC,KAAK,GAAGjN,4BAA4B,CAACgN,SAAD,CAA1C;;AACA,MAAIC,KAAK,KAAK,IAAd,EAAoB;AAClB;AACA,WAAO,IAAP;AACD;;AACD,QAAMxM,QAAQ,GAAGwM,KAAK,CAAC3B,gBAAD,CAAtB;;AAXiB,QAaf,CAAC7K,QAAD,IAAa,OAAOA,QAAP,KAAoB,UAblB;AAAA,+BAef6K,gBAfe,6DAgBf,OAAO7K,QAhBQ;AAAA;;AAkBjB,SAAOA,QAAP;AACD;;MCbC4Q,2BAEEC,0DAFFD;MACAE,yBACED,0DADFC;AAIF;AACA;;AACA,SAASrE,iBAAT,CAAyBxM,IAAzB,EAA+BF,KAA/B,EAAsC2M,gBAAtC,EAA2E;AACzE,QAAM7B,gBAAgB,GACpB9K,KAAK,CAACoC,cAAN,CAAqBkI,uBAArB,CAA6CqC,gBAA7C,CADF;AAEA,SAAOJ,aAAW,CAACrM,IAAD,EAAO4K,gBAAP,CAAlB;AACD;;AAED,SAAS8B,iCAAT,CAAyC1M,IAAzC,EAA+C2M,KAA/C,EAAsD7M,KAAtD,EAA6D;AAC3D;AAKA,QAAMC,QAAQ,GAAGyM,iBAAe,CAACxM,IAAD,EAAOF,KAAP,EAAc6M,KAAd,CAAhC;;AACA,MAAI5M,QAAJ,EAAc;AACZD,IAAAA,KAAK,CAACQ,kBAAN,GAA2BsH,cAAc,CACvC9H,KAAK,CAACQ,kBADiC,EAEvCP,QAFuC,CAAzC;AAIAD,IAAAA,KAAK,CAACU,kBAAN,GAA2BoH,cAAc,CAAC9H,KAAK,CAACU,kBAAP,EAA2BR,IAA3B,CAAzC;AACD;AACF;;AAED,SAASoL,WAAT,CAAmBpL,IAAnB,EAAyB;AACvB,KAAG;AACDA,IAAAA,IAAI,GAAGA,IAAI,CAACqL,MAAZ,CADC;AAGD;AACA;AACA;AACA;AACD,GAPD,QAOSrL,IAAI,IAAIA,IAAI,CAACsL,GAAL,KAAahD,aAP9B;;AAQA,MAAItI,IAAJ,EAAU;AACR,WAAOA,IAAP;AACD;;AACD,SAAO,IAAP;AACD;AAED;;;;;AAGA,AAAO,SAASiM,kBAAT,CAA0BjM,IAA1B,EAAwCkM,EAAxC,EAAsDC,GAAtD,EAAqE;AAC1E,QAAMC,IAAI,GAAG,EAAb;;AACA,SAAOpM,IAAP,EAAa;AACXoM,IAAAA,IAAI,CAAClI,IAAL,CAAUlE,IAAV;AACAA,IAAAA,IAAI,GAAGoL,WAAS,CAACpL,IAAD,CAAhB;AACD;;AACD,MAAIS,CAAJ;;AACA,OAAKA,CAAC,GAAG2L,IAAI,CAAC1L,MAAd,EAAsBD,CAAC,KAAK,CAA5B,GAAiC;AAC/ByL,IAAAA,EAAE,CAACE,IAAI,CAAC3L,CAAD,CAAL,EAAU,UAAV,EAAsB0L,GAAtB,CAAF;AACD;;AACD,OAAK1L,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAG2L,IAAI,CAAC1L,MAArB,EAA6BD,CAAC,EAA9B,EAAkC;AAChCyL,IAAAA,EAAE,CAACE,IAAI,CAAC3L,CAAD,CAAL,EAAU,SAAV,EAAqB0L,GAArB,CAAF;AACD;AACF;;AAED,SAASiB,oCAAT,CAA4CtN,KAA5C,EAAmD;AACjD,MAAIA,KAAK,IAAIA,KAAK,CAACoC,cAAN,CAAqBkI,uBAAlC,EAA2D;AACzD6B,IAAAA,kBAAgB,CAACnM,KAAK,CAACwC,WAAP,EAAoBoK,iCAApB,EAAqD5M,KAArD,CAAhB;AACD;AACF;;AAED,SAASuN,8BAAT,CAAsCL,MAAtC,EAA8C;AAC5CnF,EAAAA,kBAAkB,CAACmF,MAAD,EAASI,oCAAT,CAAlB;AACD;AAED;;;;;;;AAKA,SAASR,sBAAT,CACE5M,IADF,EAEE6M,gBAFF,EAGE/M,KAHF,EAIQ;AACN,MAAIE,IAAI,IAAIF,KAAR,IAAiBA,KAAK,CAACoC,cAAN,CAAqB0I,gBAA1C,EAA4D;AAC1D,UAAMA,gBAAgB,GAAG9K,KAAK,CAACoC,cAAN,CAAqB0I,gBAA9C;AACA,UAAM7K,QAAQ,GAAGsM,aAAW,CAACrM,IAAD,EAAO4K,gBAAP,CAA5B;;AACA,QAAI7K,QAAJ,EAAc;AACZD,MAAAA,KAAK,CAACQ,kBAAN,GAA2BsH,cAAc,CACvC9H,KAAK,CAACQ,kBADiC,EAEvCP,QAFuC,CAAzC;AAIAD,MAAAA,KAAK,CAACU,kBAAN,GAA2BoH,cAAc,CAAC9H,KAAK,CAACU,kBAAP,EAA2BR,IAA3B,CAAzC;AACD;AACF;AACF;AAED;;;;;;;AAKA,SAAS8M,kCAAT,CAA0ChN,KAA1C,EAAyD;AACvD,MAAIA,KAAK,IAAIA,KAAK,CAACoC,cAAN,CAAqB0I,gBAAlC,EAAoD;AAClDgC,IAAAA,sBAAoB,CAAC9M,KAAK,CAACwC,WAAP,EAAoB,IAApB,EAA0BxC,KAA1B,CAApB;AACD;AACF;;AAED,SAASiN,4BAAT,CAAoCC,MAApC,EAAuE;AACrEnF,EAAAA,kBAAkB,CAACmF,MAAD,EAASF,kCAAT,CAAlB;AACD;;;AAKD,MAAMgE,4BAA4B,GAAG;AACnC5G,EAAAA,UAAU,EAAE,EADuB;AAGnCsE,EAAAA,aAAa,EAAE,UACb1J,YADa,EAEb3C,UAFa,EAGbC,WAHa,EAIbC,iBAJa,EAKJ;AACT,QAAIF,UAAU,IAAI,IAAlB,EAAwB;AACtB;AACA,aAAO,IAAP;AACD;;AACD,UAAM4O,oBAAoB,GAAGJ,wBAAwB,CAAC7L,YAAD,CAArD;AACA,UAAMkM,oBAAoB,GAAGH,sBAAsB,CAAC/L,YAAD,CAAnD;;AANS,UAQPiM,oBAAoB,IAAIC,oBARjB;AAAA,0DAUPlM,YAVO;AAAA;;AAYT,UAAMhF,KAAK,GAAGmC,cAAc,CAACkC,SAAf,CACZ4M,oBAAoB,IAAIC,oBADZ,EAEZ7O,UAFY,EAGZC,WAHY,EAIZC,iBAJY,CAAd;;AAMA,QAAI0O,oBAAJ,EAA0B;AACxB1D,MAAAA,8BAA4B,CAACvN,KAAD,CAA5B;AACD,KAFD,MAEO,IAAIkR,oBAAJ,EAA0B;AAC/BjE,MAAAA,4BAA0B,CAACjN,KAAD,CAA1B;AACD,KAFM,MAEA;AACL,aAAO,IAAP;AACD;;AACD,WAAOA,KAAP;AACD;AAlCkC,CAArC;;AC9HA,MAAMmR,2BAA2B,GAAG,CAClC,sBADkC,EAElC,8BAFkC,CAApC;;ACAA;;;;;;AAMA,AAYA;;;;AAGAX,sBAAsB,CAACW,2BAAD,CAAtB;AAEA;;;;;AAIAT,wBAAwB,CAAC;AACvBzG,EAAAA,oBAAoB,EAAEA,oBADC;AAEvB+G,EAAAA,4BAA4B,EAAEA;AAFP,CAAD,CAAxB;;AC3BA,MAAMI,aAAa,GAAG,IAAIC,GAAJ,EAAtB;AACA,MAAMC,aAAa,GAAG,IAAID,GAAJ,EAAtB;AAEA,AAAO,SAASE,iBAAT,CAA2BC,QAA3B,EAAqChG,GAArC,EAA0C;AAC/C4F,EAAAA,aAAa,CAACK,GAAd,CAAkBjG,GAAlB,EAAuBgG,QAAvB;AACD;AAED,AAAO,SAASE,gBAAT,CAA0BlG,GAA1B,EAA+B;AACpC4F,EAAAA,aAAa,CAACO,MAAd,CAAqBnG,GAArB;AACA8F,EAAAA,aAAa,CAACK,MAAd,CAAqBnG,GAArB;AACD;;AAED,SAASoG,kBAAT,CAA4BpG,GAA5B,EAAiC;AAC/B,SAAO4F,aAAa,CAACS,GAAd,CAAkBrG,GAAlB,KAA0B,IAAjC;AACD;;AAED,SAASsG,kBAAT,CAA4B5R,IAA5B,EAAkC;AAChC,MAAI6R,cAAc,GAAG7R,IAAI,CAACsM,SAA1B;AACA,MAAIhB,GAAG,GAAGuG,cAAc,CAACC,UAAzB;;AACA,MAAIxG,GAAG,KAAKnL,SAAZ,EAAuB;AACrB0R,IAAAA,cAAc,GAAGA,cAAc,CAACE,SAAhC;AACAzG,IAAAA,GAAG,GAAGuG,cAAc,CAACC,UAArB;AACD;;AAN+B,OAOtBxG,GAPsB;AAAA;AAAA;;AAQhC,SAAOuG,cAAP;AACD;AAQM,SAASvS,8BAAT,CAAsCgN,SAAtC,EAAiD;AACtD,SAAO8E,aAAa,CAACO,GAAd,CAAkBrF,SAAS,CAACwF,UAA5B,KAA2C,IAAlD;AACD;AAED,AAAO,SAASE,gBAAT,CAA0B1G,GAA1B,EAA+BiB,KAA/B,EAAsC;AAC3C6E,EAAAA,aAAa,CAACG,GAAd,CAAkBjG,GAAlB,EAAuBiB,KAAvB;AACD;;ACzCD;AACA;AACA;AACA;AACA;AAEA;AACA,IAAI0F,kBAAkB,GAAG,UAAS/F,EAAT,EAAagG,WAAb,EAA0B;AACjD,SAAOhG,EAAE,CAACgG,WAAD,CAAT;AACD,CAFD;;AAOA,IAAIC,oBAAoB,GAAG,KAA3B;AAEA,AAAO,SAASC,cAAT,CAAwBlG,EAAxB,EAA4BgG,WAA5B,EAAyC;AAC9C,MAAIC,oBAAJ,EAA0B;AACxB;AACA;AACA,WAAOjG,EAAE,CAACgG,WAAD,CAAT;AACD;;AACDC,EAAAA,oBAAoB,GAAG,IAAvB;;AACA,MAAI;AACF,WAAOF,kBAAkB,CAAC/F,EAAD,EAAKgG,WAAL,CAAzB;AACD,GAFD,SAEU;AACRC,IAAAA,oBAAoB,GAAG,KAAvB;AACD;AACF;AAED,AAUO,SAASE,yBAAT,CACLC,mBADK,EAELC,oBAFK,EAGL;AACAN,EAAAA,kBAAkB,GAAGK,mBAArB;AACAE,AACD;;ACrCD;;;;;AAIA,IAAIC,UAA+D,GAAG,IAAtE;AAEA;;;;;;;AAMA,MAAMC,2BAA2B,GAAG,UAAS5S,KAAT,EAAqC;AACvE,MAAIA,KAAJ,EAAW;AACTM,IAAAA,wBAAwB,CAACN,KAAD,CAAxB;;AAEA,QAAI,CAACA,KAAK,CAACsD,YAAN,EAAL,EAA2B;AACzBtD,MAAAA,KAAK,CAAC0C,WAAN,CAAkB4B,OAAlB,CAA0BtE,KAA1B;AACD;AACF;AACF,CARD;;AASA,MAAM6S,mCAAmC,GAAG,UAAS5U,CAAT,EAAY;AACtD,SAAO2U,2BAA2B,CAAC3U,CAAD,CAAlC;AACD,CAFD;;AAIA,AAAO,SAAS6U,gBAAT,CACL5F,MADK,EAEL;AACA,MAAIA,MAAM,KAAK,IAAf,EAAqB;AACnByF,IAAAA,UAAU,GAAG7K,cAAc,CAAC6K,UAAD,EAAazF,MAAb,CAA3B;AACD,GAHD;AAMA;;;AACA,QAAM6F,oBAAoB,GAAGJ,UAA7B;AACAA,EAAAA,UAAU,GAAG,IAAb;;AAEA,MAAI,CAACI,oBAAL,EAA2B;AACzB;AACD;;AAEDhL,EAAAA,kBAAkB,CAACgL,oBAAD,EAAuBF,mCAAvB,CAAlB;;AAdA,OAgBE,CAACF,UAhBH;AAAA;AAAA;;;AAqBAtT,EAAAA,kBAAkB;AACnB;;ACvCD;;;;AAKA;;AACA,MAAM2T,kBAAkB,GAAK,EAA7B;AAEA;;;;;;;;AAOA,MAAMC,gBAAgB,GAAG,UAASzL,OAAT,EAAkB0L,OAAlB,EAA2B;AAClD,QAAMlS,GAAG,GAAG,EAAZ;;AACA,OAAK,IAAIL,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGuS,OAAO,CAACtS,MAA5B,EAAoCD,CAAC,EAArC,EAAyC;AACvCK,IAAAA,GAAG,CAACoD,IAAJ,CAASoD,OAAO,CAAC0L,OAAO,CAACvS,CAAD,CAAR,CAAhB;AACD;;AACD,SAAOK,GAAP;AACD,CAND;AAQA;;;;;;;;;;;;;AAWA,MAAMmS,sBAAsB,GAAG,UAC7B3L,OAD6B,EAE7B0L,OAF6B,EAGd;AACf,QAAME,SAAS,GAAG,EAAlB,CADe;AAGf;;AACA,QAAMC,IAAoB,GAAI7L,OAA9B;;AACA,OAAK,IAAI7G,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGuS,OAAO,CAACtS,MAA5B,EAAoCD,CAAC,EAArC,EAAyC;AACvC,UAAM2S,KAAK,GAAGJ,OAAO,CAACvS,CAAD,CAArB;AACAyS,IAAAA,SAAS,CAAChP,IAAV,CAAeoD,OAAO,CAAC8L,KAAD,CAAtB;AACAD,IAAAA,IAAI,CAACC,KAAD,CAAJ,GAAc,IAAd;AACD;;AACD,MAAIC,MAAM,GAAG,CAAb;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,IAAI,CAACzS,MAAzB,EAAiC4S,CAAC,EAAlC,EAAsC;AACpC,UAAMC,GAAG,GAAGJ,IAAI,CAACG,CAAD,CAAhB;;AACA,QAAIC,GAAG,KAAK,IAAZ,EAAkB;AAChBJ,MAAAA,IAAI,CAACE,MAAM,EAAP,CAAJ,GAAiBE,GAAjB;AACD;AACF;;AACDJ,EAAAA,IAAI,CAACzS,MAAL,GAAc2S,MAAd;AACA,SAAOH,SAAP;AACD,CAtBD;AAwBA;;;;;;;;;;;;AAUA,SAASM,uBAAT,CACEC,UADF,EAEE3O,YAFF,EAGE4O,gBAHF,EAIE;AACA,QAAMtR,WAAW,GAAGsR,gBAAgB,IAAIZ,kBAAxC;AACA,QAAM9S,IAAI,GAAGT,kBAAmB,CAACkU,UAAD,CAAhC;AAEA,MAAInS,MAAM,GAAG,IAAb;;AACA,MAAItB,IAAI,IAAI,IAAZ,EAAkB;AAChBsB,IAAAA,MAAM,GAAGtB,IAAI,CAACsM,SAAd;AACD;;AAED8F,EAAAA,cAAc,CAAC,YAAW;AACxBuB,IAAAA,+BAA+B,CAAC7O,YAAD,EAAe9E,IAAf,EAAqBoC,WAArB,EAAkCd,MAAlC,CAA/B;AACD,GAFa,CAAd,CATA;AAaA;AACD;AAED;;;;;;;;;AAOA,SAASsS,mBAAT,CACE9O,YADF,EAEE3C,UAFF,EAGEC,WAHF,EAIEC,iBAJF,EAK2D;AACzD,MAAI2K,MAAM,GAAG,IAAb;AACA,QAAM6G,aAAa,GAAKjE,OAAxB;;AACA,OAAK,IAAInP,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGoT,aAAa,CAACnT,MAAlC,EAA0CD,CAAC,EAA3C,EAA+C;AAC7C;AACA,UAAMqT,cAAkD,GAAGD,aAAa,CAACpT,CAAD,CAAxE;;AACA,QAAIqT,cAAJ,EAAoB;AAClB,YAAMC,eAAe,GAAGD,cAAc,CAACtF,aAAf,CACtB1J,YADsB,EAEtB3C,UAFsB,EAGtBC,WAHsB,EAItBC,iBAJsB,CAAxB;;AAMA,UAAI0R,eAAJ,EAAqB;AACnB/G,QAAAA,MAAM,GAAGpF,cAAc,CAACoF,MAAD,EAAS+G,eAAT,CAAvB;AACD;AACF;AACF;;AACD,SAAO/G,MAAP;AACD;;AAED,SAAS2G,+BAAT,CACE7O,YADF,EAEE3C,UAFF,EAGEC,WAHF,EAIEC,iBAJF,EAKE;AACA,QAAM2K,MAAM,GAAG4G,mBAAmB,CAChC9O,YADgC,EAEhC3C,UAFgC,EAGhCC,WAHgC,EAIhCC,iBAJgC,CAAlC;AAMAuQ,EAAAA,gBAAgB,CAAC5F,MAAD,CAAhB;AACD;AAED;;;;;;;;;AAOA,AAAO,SAASgH,YAAT,CACLP,UADK,EAEL3O,YAFK,EAGL4O,gBAHK,EAIL;AACAF,EAAAA,uBAAuB,CAACC,UAAD,EAAa3O,YAAb,EAA2B4O,gBAA3B,CAAvB;AACD;AAED;;;;;;;;;;;;;;;;;;;;;;;;;AAwBA,AAAO,SAASO,cAAT,CACLC,iBADK,EAEL5M,OAFK,EAGL6M,cAHK,EAIL;AACA,QAAM/M,cAAc,GAClB8M,iBAAiB,KAAK,aAAtB,IACAA,iBAAiB,KAAK,gBADtB,GAEIjB,sBAAsB,CAAC3L,OAAD,EAAU6M,cAAV,CAF1B,GAGIpB,gBAAgB,CAACzL,OAAD,EAAU6M,cAAV,CAJtB;;AAMA,OAAK,IAAIC,EAAE,GAAG,CAAd,EAAiBA,EAAE,GAAGhN,cAAc,CAAC1G,MAArC,EAA6C0T,EAAE,EAA/C,EAAmD;AACjD,UAAM3O,KAAK,GAAG2B,cAAc,CAACgN,EAAD,CAA5B,CADiD;AAGjD;;AACA3O,IAAAA,KAAK,CAAC2B,cAAN,GAAuBA,cAAvB;AACA3B,IAAAA,KAAK,CAAC6B,OAAN,GAAgBA,OAAhB;AACA,UAAMlF,WAAW,GAAGqD,KAApB;AACA,QAAIgO,UAAU,GAAG,IAAjB;AACA,UAAMnS,MAAM,GAAGc,WAAW,CAACd,MAA3B;;AACA,QAAIA,MAAM,KAAK,IAAX,IAAmBA,MAAM,KAAKnB,SAAlC,EAA6C;AAC3C,UAAImB,MAAM,GAAG,CAAb,EAAgB,CAAhB,MAMO;AACLmS,QAAAA,UAAU,GAAGnS,MAAb;AACD;AACF,KAnBgD;;;AAqBjDkS,IAAAA,uBAAuB,CAACC,UAAD,EAAaS,iBAAb,EAAgC9R,WAAhC,CAAvB;AACD;AACF;;AClOD;AACA,AAEA,MAAMiS,iCAAiC,GAAG;AACxCpK,EAAAA,QAAQ,EAAE,UAASqK,IAAT,EAAoBC,EAApB,EAA6BC,oBAA7B,EAA4D;AACpE,QAAID,EAAE,KAAK,IAAX,EAAiB;AACf,YAAMjJ,GAAG,GAAGiJ,EAAE,CAACjI,SAAH,CAAawF,UAAzB;AACA2C,MAAAA,qCAAS,CAACC,cAAV,CAAyBpJ,GAAzB,EAA8BkJ,oBAA9B;AACD,KAHD,MAGO;AACLC,MAAAA,qCAAS,CAACE,gBAAV;AACD;AACF;AARuC,CAA1C;;ACYA;;;;AAGAC,2CAAe,CAACC,QAAhB,CAAyB;AACvBb,EAAAA,YADuB;AAEvBC,EAAAA;AAFuB,CAAzB;AAKAxU,gBAAgB,CACdH,8BADc,EAEdC,kBAFc,EAGdC,kBAHc,CAAhB;AAMAuK,oBAAoB,CAACoF,SAArB,CAA+BC,4BAA/B,CACEiF,iCADF;;AC/BA;;;;;;;;;AAmBO,SAAS1C,GAAT,CAAamD,GAAb,EAAkB;AACvB,SAAOA,GAAG,CAACC,eAAX;AACD;AAED,AAIO,SAASxD,GAAT,CAAauD,GAAb,EAAkBE,KAAlB,EAAyB;AAC9BF,EAAAA,GAAG,CAACC,eAAJ,GAAsBC,KAAtB;AACD;;ACzBD,MAAMC,oBAAoB,GACxBC,wDADF;;ACFA;AACA;AACA;AAEA;AACA;AACA,AAAO,IAAIC,kBAAkB,GAAG,MAAzB;AACP,AAAO,IAAIC,iBAAiB,GAAG,MAAxB;AACP,AAAO,IAAIC,mBAAmB,GAAG,MAA1B;AACP,AAAO,IAAIC,sBAAsB,GAAG,MAA7B;AACP,AAAO,IAAIC,mBAAmB,GAAG,MAA1B;AACP,AAAO,IAAIC,mBAAmB,GAAG,MAA1B;AACP,AAAO,IAAIC,kBAAkB,GAAG,MAAzB;AACP,AAAO,IAAIC,sBAAsB,GAAG,MAA7B;AACP,AAAO,IAAIC,mBAAmB,GAAG,MAA1B;AACP,AAAO,IAAIC,wBAAwB,GAAG,MAA/B;AACP,AAAO,IAAIC,eAAe,GAAG,MAAtB;AACP,AAAO,IAAIC,eAAe,GAAG,MAAtB;AACP,AAAO,IAAIC,gBAAgB,GAAG,MAAvB;AACP,AACO,IAAIC,6BAA6B,GAAG,MAApC;AACP,AAAO,IAAIC,oBAAoB,GAAG,MAA3B;AACP,AAAO,IAAIC,wBAAwB,GAAG,MAA/B;AACP,AAAO,IAAIC,gBAAgB,GAAG,MAAvB;;AAEP,IAAI,OAAOC,MAAP,KAAkB,UAAlB,IAAgCA,MAAM,CAACC,GAA3C,EAAgD;AAC9C,QAAMC,SAAS,GAAGF,MAAM,CAACC,GAAzB;AACAlB,EAAAA,kBAAkB,GAAGmB,SAAS,CAAC,eAAD,CAA9B;AACAlB,EAAAA,iBAAiB,GAAGkB,SAAS,CAAC,cAAD,CAA7B;AACAjB,EAAAA,mBAAmB,GAAGiB,SAAS,CAAC,gBAAD,CAA/B;AACAhB,EAAAA,sBAAsB,GAAGgB,SAAS,CAAC,mBAAD,CAAlC;AACAf,EAAAA,mBAAmB,GAAGe,SAAS,CAAC,gBAAD,CAA/B;AACAd,EAAAA,mBAAmB,GAAGc,SAAS,CAAC,gBAAD,CAA/B;AACAb,EAAAA,kBAAkB,GAAGa,SAAS,CAAC,eAAD,CAA9B;AACAZ,EAAAA,sBAAsB,GAAGY,SAAS,CAAC,mBAAD,CAAlC;AACAX,EAAAA,mBAAmB,GAAGW,SAAS,CAAC,gBAAD,CAA/B;AACAV,EAAAA,wBAAwB,GAAGU,SAAS,CAAC,qBAAD,CAApC;AACAT,EAAAA,eAAe,GAAGS,SAAS,CAAC,YAAD,CAA3B;AACAR,EAAAA,eAAe,GAAGQ,SAAS,CAAC,YAAD,CAA3B;AACAP,EAAAA,gBAAgB,GAAGO,SAAS,CAAC,aAAD,CAA5B;AACAC,AACAP,EAAAA,6BAA6B,GAAGM,SAAS,CAAC,wBAAD,CAAzC;AACAL,EAAAA,oBAAoB,GAAGK,SAAS,CAAC,iBAAD,CAAhC;AACAJ,EAAAA,wBAAwB,GAAGI,SAAS,CAAC,qBAAD,CAApC;AACAH,EAAAA,gBAAgB,GAAGG,SAAS,CAAC,aAAD,CAA5B;AACD;;AAED,MAAME,qBAAqB,GAAG,OAAOJ,MAAP,KAAkB,UAAlB,IAAgCA,MAAM,CAACK,QAArE;AACA,MAAMC,oBAAoB,GAAG,YAA7B;AAEA,AAAO,SAASC,aAAT,CAAuBC,aAAvB,EAAiE;AACtE,MAAIA,aAAa,KAAK,IAAlB,IAA0B,OAAOA,aAAP,KAAyB,QAAvD,EAAiE;AAC/D,WAAO,IAAP;AACD;;AACD,QAAMC,aAAa,GAChBL,qBAAqB,IAAII,aAAa,CAACJ,qBAAD,CAAvC,IACAI,aAAa,CAACF,oBAAD,CAFf;;AAGA,MAAI,OAAOG,aAAP,KAAyB,UAA7B,EAAyC;AACvC,WAAOA,aAAP;AACD;;AACD,SAAO,IAAP;AACD;;AC1CD,SAASC,cAAT,CACEC,SADF,EAEEC,SAFF,EAGEC,WAHF,EAIU;AACR,QAAMC,WAAW,GAAIH,SAAD,CAAiBG,WAArC;;AACA,MAAIA,WAAJ,EAAiB;AACf,WAAOA,WAAP;AACD;;AACD,QAAMC,YAAY,GAAGH,SAAS,CAACE,WAAV,IAAyBF,SAAS,CAACxZ,IAAnC,IAA2C,EAAhE;AACA,SAAO2Z,YAAY,KAAK,EAAjB,GAAyBF,WAAzB,SAAwCE,YAAxC,SAA0DF,WAAjE;AACD;;;AAGD,SAASG,cAAT,CAAwBnX,IAAxB,EAAiD;AAC/C,SAAOA,IAAI,CAACiX,WAAL,IAAoB,SAA3B;AACD;;;AAGD,AAAe,SAASG,wBAAT,CAAkCpX,IAAlC,EAA8D;AAC3E,MAAIA,IAAI,IAAI,IAAZ,EAAkB;AAChB;AACA,WAAO,IAAP;AACD;;AASD,MAAI,OAAOA,IAAP,KAAgB,UAApB,EAAgC;AAC9B,WAAQA,IAAD,CAAYiX,WAAZ,IAA2BjX,IAAI,CAACzC,IAAhC,IAAwC,IAA/C;AACD;;AACD,MAAI,OAAOyC,IAAP,KAAgB,QAApB,EAA8B;AAC5B,WAAOA,IAAP;AACD;;AACD,UAAQA,IAAR;AACE,SAAKoV,mBAAL;AACE,aAAO,UAAP;;AACF,SAAKD,iBAAL;AACE,aAAO,QAAP;;AACF,SAAKG,mBAAL;AACE,aAAO,UAAP;;AACF,SAAKD,sBAAL;AACE,aAAO,YAAP;;AACF,SAAKK,mBAAL;AACE,aAAO,UAAP;;AACF,SAAKC,wBAAL;AACE,aAAO,cAAP;;AACF,SAAKO,gBAAL;AACE,aAAO,OAAP;AAdJ;;AAgBA,MAAI,OAAOlW,IAAP,KAAgB,QAApB,EAA8B;AAC5B,YAAQA,IAAI,CAACqX,QAAb;AACE,WAAK7B,kBAAL;AACE,cAAM/X,OAA0B,GAAIuC,IAApC;AACA,eAAOmX,cAAc,CAAC1Z,OAAD,CAAd,GAA0B,WAAjC;;AACF,WAAK8X,mBAAL;AACE,cAAM+B,QAAgC,GAAItX,IAA1C;AACA,eAAOmX,cAAc,CAACG,QAAQ,CAACC,QAAV,CAAd,GAAoC,WAA3C;;AACF,WAAK9B,sBAAL;AACE,eAAOoB,cAAc,CAAC7W,IAAD,EAAOA,IAAI,CAACwX,MAAZ,EAAoB,YAApB,CAArB;;AACF,WAAK5B,eAAL;AACE,cAAM6B,SAAS,GAAIzX,IAAD,CAAYiX,WAAZ,IAA2B,IAA7C;;AACA,YAAIQ,SAAS,KAAK,IAAlB,EAAwB;AACtB,iBAAOA,SAAP;AACD;;AACD,eAAOL,wBAAwB,CAACpX,IAAI,CAACA,IAAN,CAAxB,IAAuC,MAA9C;;AACF,WAAK6V,eAAL;AAAsB;AACpB,gBAAM6B,aAAsC,GAAI1X,IAAhD;AACA,gBAAM2X,OAAO,GAAGD,aAAa,CAACE,QAA9B;AACA,gBAAMC,IAAI,GAAGH,aAAa,CAACI,KAA3B;;AACA,cAAI;AACF,mBAAOV,wBAAwB,CAACS,IAAI,CAACF,OAAD,CAAL,CAA/B;AACD,WAFD,CAEE,OAAOI,CAAP,EAAU;AACV,mBAAO,IAAP;AACD;AACF;AAxBH;AA0BD;;AACD,SAAO,IAAP;AACD;;ACtED,SAASlB,gBAAT,CACEC,SADF,EAEEC,SAFF,EAGEC,WAHF,EAIU;AACR,QAAME,YAAY,GAAGH,SAAS,CAACE,WAAV,IAAyBF,SAAS,CAACxZ,IAAnC,IAA2C,EAAhE;AACA,SACGuZ,SAAD,CAAiBG,WAAjB,KACCC,YAAY,KAAK,EAAjB,GAAyBF,WAAzB,SAAwCE,YAAxC,SAA0DF,WAD3D,CADF;AAID;;;AAGD,SAASG,gBAAT,CAAwBnX,IAAxB,EAAiD;AAC/C,SAAOA,IAAI,CAACiX,WAAL,IAAoB,SAA3B;AACD;;AAED,AAAe,SAASe,yBAAT,CAAmCC,KAAnC,EAAgE;AAAA,QACtE5M,GADsE,GACzD4M,KADyD,CACtE5M,GADsE;AAAA,QACjErL,IADiE,GACzDiY,KADyD,CACjEjY,IADiE;;AAE7E,UAAQqL,GAAR;AACE,SAAK9B,cAAL;AACE,aAAO,OAAP;;AACF,SAAKd,eAAL;AACE,YAAMhL,OAA0B,GAAIuC,IAApC;AACA,aAAOmX,gBAAc,CAAC1Z,OAAD,CAAd,GAA0B,WAAjC;;AACF,SAAKiL,eAAL;AACE,YAAM4O,QAAgC,GAAItX,IAA1C;AACA,aAAOmX,gBAAc,CAACG,QAAQ,CAACC,QAAV,CAAd,GAAoC,WAA3C;;AACF,SAAKrO,kBAAL;AACE,aAAO,oBAAP;;AACF,SAAKP,UAAL;AACE,aAAOkO,gBAAc,CAAC7W,IAAD,EAAOA,IAAI,CAACwX,MAAZ,EAAoB,YAApB,CAArB;;AACF,SAAKjP,QAAL;AACE,aAAO,UAAP;;AACF,SAAKF,aAAL;AACE;AACA,aAAOrI,IAAP;;AACF,SAAKoI,UAAL;AACE,aAAO,QAAP;;AACF,SAAKD,QAAL;AACE,aAAO,MAAP;;AACF,SAAKG,QAAL;AACE,aAAO,MAAP;;AACF,SAAKU,aAAL;AACE;AACA,aAAOoO,wBAAwB,CAACpX,IAAD,CAA/B;;AACF,SAAKsJ,qBAAL;AACE,aAAO,cAAP;;AACF,SAAKd,IAAL;AACE,UAAIxI,IAAI,KAAKqV,sBAAb,EAAqC;AACnC;AACA,eAAO,YAAP;AACD;;AACD,aAAO,MAAP;;AACF,SAAKhM,kBAAL;AACE,aAAO,WAAP;;AACF,SAAKT,QAAL;AACE,aAAO,UAAP;;AACF,SAAKQ,cAAL;AACE,aAAO,OAAP;;AACF,SAAKP,iBAAL;AACE,aAAO,UAAP;;AACF,SAAKM,qBAAL;AACE,aAAO,cAAP;AAEF;;AACA,SAAKlB,cAAL;AACA,SAAKD,iBAAL;AACA,SAAKiB,wBAAL;AACA,SAAKf,sBAAL;AACA,SAAKY,aAAL;AACA,SAAKC,mBAAL;AACE,UAAI,OAAO/I,IAAP,KAAgB,UAApB,EAAgC;AAC9B,eAAQA,IAAD,CAAYiX,WAAZ,IAA2BjX,IAAI,CAACzC,IAAhC,IAAwC,IAA/C;AACD;;AACD,UAAI,OAAOyC,IAAP,KAAgB,QAApB,EAA8B;AAC5B,eAAOA,IAAP;AACD;;AACD;AA3DJ;;AA8DA,SAAO,IAAP;AACD;;AC1GM,MAAMkY,mBAAmB,GAAGC,KAA5B;AACP,AAAO,MAAMC,yBAAyB,GAAGD,KAAlC;AACP,AAKO,MAAME,kBAAkB,GAAG,KAA3B;AACP,AAyBO,MAAMC,mBAAmB,GAAG,KAA5B;AACP,AAQO,MAAMC,4BAA4B,GAAG,KAArC;;AC9CP;AACA,AAAO,MAAMC,OAAO;AAAG;AAA2B,yBAA3C;AACP,AAAO,MAAMC,aAAa;AAAG;AAAqB,yBAA3C;;AAGP,AAAO,MAAMC,SAAS;AAAG;AAAyB,yBAA3C;AACP,AAAO,MAAMC,MAAM;AAAG;AAA4B,yBAA3C;AACP,AAAO,MAAMC,kBAAkB;AAAG;AAAgBF,SAAS,GAAGC,MAAvD;AACP,AACO,MAAME,aAAa;AAAG;AAAqB,yBAA3C;AACP,AAAO,MAAMC,YAAY;AAAG;AAAsB,yBAA3C;AACP,AAAO,MAAMC,QAAQ;AAAG;AAA0B,yBAA3C;AACP,AAAO,MAAMC,UAAU;AAAG;AAAwB,yBAA3C;AACP,AAAO,MAAMC,GAAG;AAAG;AAA+B,yBAA3C;AACP,AAAO,MAAMC,QAAQ;AAAG;AAA0B,yBAA3C;AACP,AAAO,MAAMC,OAAO;AAAG;AAA2B,yBAA3C;AACP,AAAO,MAAMC,SAAS;AAAG;AAAyB,yBAA3C;AACP,AAAO,MAAMC,kBAAkB;AAAG;AAAgBD,SAAS,GAAGT,MAAvD;AACP,AAAO,MAAMW,UAAU;AAAG;AAAwB,yBAA3C;AAEP,AAAO,MAAMC,mBAAmB,GAAGJ,OAAO,GAAGR,MAAV,GAAmBI,QAAnB,GAA8BE,GAA9B,GAAoCC,QAAhE;;AAGP,AAAO,MAAMM,cAAc;AAAG;AAAoB,yBAA3C;;AAGP,AAAO,MAAMC,UAAU;AAAG;AAAwB,yBAA3C;AACP,AAAO,MAAMC,aAAa;AAAG;AAAqB,yBAA3C;AACP,AAAO,MAAMC,4BAA4B;AAAG;AAAM,yBAA3C;AACP,AAIA;AACA;AACA;AACA;;AACA,AAAO,MAAMC,SAAS;AAAG;AAAyB,yBAA3C;AACP,AAAO,MAAMC,YAAY;AAAG;AAAsB,yBAA3C;AACP,AAAO,MAAMC,aAAa;AAAG;AAAqB,yBAA3C;AAGP,AAMA;;AAEA,AAAO,MAAMC,kBAAkB;AAE7B;AACApB,MAAM,GACNO,QADA,IAECc,CAMG,CARJ,CAHK;AAaP,AAAO,MAAMC,YAAY,GACvBvB,SAAS,GACTC,MADA,GAEAE,aAFA,GAGAC,YAHA,GAIAG,GAJA,GAKAG,SALA,GAMAE,UAPK;AAQP,AAAO,MAAMY,UAAU,GAAGvB,MAAM,GAAGI,QAAT,GAAoBE,GAApB,GAA0BK,UAA7C;;AAGP,AAAO,MAAMa,WAAW,GAAGhB,OAAO,GAAGN,aAA9B;AAGP;AACA;;AACA,AAAO,MAAMuB,UAAU,GAAGP,YAAY,GAAGC,aAAf,GAA+BF,SAAlD;;AChEP,MAAMS,iBAAiB,GAAGrF,oBAAoB,CAACqF,iBAA/C;AAEA,AAAO,SAASC,sBAAT,CAAgCrC,KAAhC,EAA4D;AACjE,MAAIsC,IAAI,GAAGtC,KAAX;AACA,MAAIuC,cAAc,GAAGvC,KAArB;;AACA,MAAI,CAACA,KAAK,CAACnM,SAAX,EAAsB;AACpB;AACA;AACA,QAAI2O,QAAQ,GAAGF,IAAf;;AACA,OAAG;AACDA,MAAAA,IAAI,GAAGE,QAAP;;AACA,UAAI,CAACF,IAAI,CAACG,KAAL,IAAchC,SAAS,GAAGU,SAA1B,CAAD,MAA2CZ,OAA/C,EAAwD;AACtD;AACA;AACA;AACAgC,QAAAA,cAAc,GAAGD,IAAI,CAACnP,MAAtB;AACD;;AACDqP,MAAAA,QAAQ,GAAGF,IAAI,CAACnP,MAAhB;AACD,KATD,QASSqP,QATT;AAUD,GAdD,MAcO;AACL,WAAOF,IAAI,CAACnP,MAAZ,EAAoB;AAClBmP,MAAAA,IAAI,GAAGA,IAAI,CAACnP,MAAZ;AACD;AACF;;AACD,MAAImP,IAAI,CAAClP,GAAL,KAAalD,QAAjB,EAA2B;AACzB;AACA;AACA,WAAOqS,cAAP;AACD,GA1BgE;AA4BjE;;;AACA,SAAO,IAAP;AACD;AAED,AAwBO,SAASG,cAAT,CAAwB1C,KAAxB,EAA+C;AACpD,SAAOqC,sBAAsB,CAACrC,KAAD,CAAtB,KAAkCA,KAAzC;AACD;AAED,AAAO,SAAS2C,SAAT,CAAmBC,SAAnB,EAAkE;AACvE;AAmBA,QAAM5C,KAAa,GAAG6C,GAAW,CAACD,SAAD,CAAjC;;AACA,MAAI,CAAC5C,KAAL,EAAY;AACV,WAAO,KAAP;AACD;;AACD,SAAOqC,sBAAsB,CAACrC,KAAD,CAAtB,KAAkCA,KAAzC;AACD;;AAED,SAAS8C,eAAT,CAAyB9C,KAAzB,EAAgC;AAAA,QAE5BqC,sBAAsB,CAACrC,KAAD,CAAtB,KAAkCA,KAFN;AAAA;AAAA;AAK/B;;AAED,AAAO,SAAS+C,6BAAT,CAAuC/C,KAAvC,EAAmE;AACxE,QAAMnM,SAAS,GAAGmM,KAAK,CAACnM,SAAxB;;AACA,MAAI,CAACA,SAAL,EAAgB;AACd;AACA,UAAM0O,cAAc,GAAGF,sBAAsB,CAACrC,KAAD,CAA7C;;AAFc,UAIZuC,cAAc,KAAK,IAJP;AAAA;AAAA;;AAOd,QAAIA,cAAc,KAAKvC,KAAvB,EAA8B;AAC5B,aAAO,IAAP;AACD;;AACD,WAAOA,KAAP;AACD,GAbuE;AAexE;AACA;;;AACA,MAAIva,CAAQ,GAAGua,KAAf;AACA,MAAIta,CAAQ,GAAGmO,SAAf;;AACA,SAAO,IAAP,EAAa;AACX,UAAMmP,OAAO,GAAGvd,CAAC,CAAC0N,MAAlB;;AACA,QAAI6P,OAAO,KAAK,IAAhB,EAAsB;AACpB;AACA;AACD;;AACD,UAAMC,OAAO,GAAGD,OAAO,CAACnP,SAAxB;;AACA,QAAIoP,OAAO,KAAK,IAAhB,EAAsB;AACpB;AACA;AACA;AACA;AACA,YAAMC,UAAU,GAAGF,OAAO,CAAC7P,MAA3B;;AACA,UAAI+P,UAAU,KAAK,IAAnB,EAAyB;AACvBzd,QAAAA,CAAC,GAAGC,CAAC,GAAGwd,UAAR;AACA;AACD,OATmB;;;AAWpB;AACD,KAnBU;AAsBX;AACA;;;AACA,QAAIF,OAAO,CAACG,KAAR,KAAkBF,OAAO,CAACE,KAA9B,EAAqC;AACnC,UAAIA,KAAK,GAAGH,OAAO,CAACG,KAApB;;AACA,aAAOA,KAAP,EAAc;AACZ,YAAIA,KAAK,KAAK1d,CAAd,EAAiB;AACf;AACAqd,UAAAA,eAAe,CAACE,OAAD,CAAf;AACA,iBAAOhD,KAAP;AACD;;AACD,YAAImD,KAAK,KAAKzd,CAAd,EAAiB;AACf;AACAod,UAAAA,eAAe,CAACE,OAAD,CAAf;AACA,iBAAOnP,SAAP;AACD;;AACDsP,QAAAA,KAAK,GAAGA,KAAK,CAACC,OAAd;AACD,OAdkC;AAgBnC;;;AAhBmC;AAAA;AAAA;AAkBpC;;AAED,QAAI3d,CAAC,CAAC0N,MAAF,KAAazN,CAAC,CAACyN,MAAnB,EAA2B;AACzB;AACA;AACA;AACA;AACA1N,MAAAA,CAAC,GAAGud,OAAJ;AACAtd,MAAAA,CAAC,GAAGud,OAAJ;AACD,KAPD,MAOO;AACL;AACA;AACA;AACA;AACA;AACA,UAAII,YAAY,GAAG,KAAnB;AACA,UAAIF,KAAK,GAAGH,OAAO,CAACG,KAApB;;AACA,aAAOA,KAAP,EAAc;AACZ,YAAIA,KAAK,KAAK1d,CAAd,EAAiB;AACf4d,UAAAA,YAAY,GAAG,IAAf;AACA5d,UAAAA,CAAC,GAAGud,OAAJ;AACAtd,UAAAA,CAAC,GAAGud,OAAJ;AACA;AACD;;AACD,YAAIE,KAAK,KAAKzd,CAAd,EAAiB;AACf2d,UAAAA,YAAY,GAAG,IAAf;AACA3d,UAAAA,CAAC,GAAGsd,OAAJ;AACAvd,UAAAA,CAAC,GAAGwd,OAAJ;AACA;AACD;;AACDE,QAAAA,KAAK,GAAGA,KAAK,CAACC,OAAd;AACD;;AACD,UAAI,CAACC,YAAL,EAAmB;AACjB;AACAF,QAAAA,KAAK,GAAGF,OAAO,CAACE,KAAhB;;AACA,eAAOA,KAAP,EAAc;AACZ,cAAIA,KAAK,KAAK1d,CAAd,EAAiB;AACf4d,YAAAA,YAAY,GAAG,IAAf;AACA5d,YAAAA,CAAC,GAAGwd,OAAJ;AACAvd,YAAAA,CAAC,GAAGsd,OAAJ;AACA;AACD;;AACD,cAAIG,KAAK,KAAKzd,CAAd,EAAiB;AACf2d,YAAAA,YAAY,GAAG,IAAf;AACA3d,YAAAA,CAAC,GAAGud,OAAJ;AACAxd,YAAAA,CAAC,GAAGud,OAAJ;AACA;AACD;;AACDG,UAAAA,KAAK,GAAGA,KAAK,CAACC,OAAd;AACD;;AAjBgB,aAmBfC,YAnBe;AAAA;AAAA;AAuBlB;AACF;;AAlGU,UAqGT5d,CAAC,CAACoO,SAAF,KAAgBnO,CArGP;AAAA;AAAA;AAyGZ,GA5HuE;AA8HxE;;;AA9HwE,QAgItED,CAAC,CAAC2N,GAAF,KAAUlD,QAhI4D;AAAA;AAAA;;AAmIxE,MAAIzK,CAAC,CAAC2O,SAAF,CAAY7E,OAAZ,KAAwB9J,CAA5B,EAA+B;AAC7B;AACA,WAAOua,KAAP;AACD,GAtIuE;;;AAwIxE,SAAOnM,SAAP;AACD;AAED,AAAO,SAASyP,oBAAT,CAA8BC,MAA9B,EAA2D;AAChE,QAAMC,aAAa,GAAGT,6BAA6B,CAACQ,MAAD,CAAnD;AACA,SAAOC,aAAa,KAAK,IAAlB,GACHC,wBAAwB,CAACD,aAAD,CADrB,GAEH,IAFJ;AAGD;;AAED,SAASC,wBAAT,CAAkCnB,IAAlC,EAA+C;AAC7C;AACA,MAAIA,IAAI,CAAClP,GAAL,KAAahD,aAAb,IAA8BkS,IAAI,CAAClP,GAAL,KAAa/C,QAA/C,EAAyD;AACvD,WAAOiS,IAAP;AACD;;AAED,MAAIa,KAAK,GAAGb,IAAI,CAACa,KAAjB;;AACA,SAAOA,KAAK,KAAK,IAAjB,EAAuB;AACrB,UAAMO,KAAK,GAAGD,wBAAwB,CAACN,KAAD,CAAtC;;AACA,QAAIO,KAAK,KAAK,IAAd,EAAoB;AAClB,aAAOA,KAAP;AACD;;AACDP,IAAAA,KAAK,GAAGA,KAAK,CAACC,OAAd;AACD;;AAED,SAAO,IAAP;AACD;;ACrRD;AACA,AAQA,MAAMO,WAAW,GAAG,EAApB;AAEA;;;;;;;;;AAWA;AACA,IAAIC,WAAW,GAAG,IAAlB;AACA,IAAIC,eAAe,GAAG,CAAtB;AAEA,MAAMC,iBAAiB,GAAG;AACxBC,EAAAA,uBAAuB,EAAE;AADD,CAA1B;;AAIA,SAASC,aAAT,CAAuBC,QAAvB,EAAwCC,QAAxC,EAAkE;AAChE,MAAI,OAAOA,QAAP,KAAoB,QAApB,IAAgCA,QAAQ,KAAK,IAAjD,EAAuD;AACrD;AACA,WAAO,IAAP;AACD,GAHD,MAGO;AACL;AACA,WAAOC,sCAAU,CAACF,QAAD,EAAWC,QAAX,EAAqBJ,iBAArB,CAAjB;AACD;AACF;;AAED,SAASM,iCAAT,CACEC,aADF,EAEE/B,IAFF,EAGEgC,eAHF,EAIE;AACA,MAAInd,OAAO,CAACmb,IAAD,CAAX,EAAmB;AACjB,QAAI/Z,CAAC,GAAG+Z,IAAI,CAAC9Z,MAAb;;AACA,WAAOD,CAAC,MAAMsb,eAAe,GAAG,CAAhC,EAAmC;AACjCO,MAAAA,iCAAiC,CAC/BC,aAD+B,EAE/B/B,IAAI,CAAC/Z,CAAD,CAF2B,EAG/B+b,eAH+B,CAAjC;AAKD;AACF,GATD,MASO,IAAIhC,IAAI,IAAIuB,eAAe,GAAG,CAA9B,EAAiC;AACtC,UAAMU,GAAG,GAAGjC,IAAZ;;AACA,SAAK,MAAMkC,OAAX,IAAsBZ,WAAtB,EAAmC;AACjC,UAAI,CAACA,WAAW,CAACY,OAAD,CAAhB,EAA2B;AACzB;AACD;;AACD,UAAIN,QAAQ,GAAGK,GAAG,CAACC,OAAD,CAAlB;;AACA,UAAIN,QAAQ,KAAKjc,SAAjB,EAA4B;AAC1B;AACD;;AAED,YAAMwc,eAAe,GAAGH,eAAe,CAACE,OAAD,CAAvC;;AACA,UAAI,CAACC,eAAL,EAAsB;AACpB,iBADoB;AAErB;;AAED,UAAI,OAAOP,QAAP,KAAoB,UAAxB,EAAoC;AAClCA,QAAAA,QAAQ,GAAG,IAAX;AACD;;AACD,UAAI,OAAOA,QAAP,KAAoB,WAAxB,EAAqC;AACnCA,QAAAA,QAAQ,GAAG,IAAX;AACD;;AAED,UAAI,OAAOO,eAAP,KAA2B,QAA/B,EAAyC;AACvC;AACAJ,QAAAA,aAAa,CAACG,OAAD,CAAb,GAAyBN,QAAzB;AACD,OAHD,MAGO,IACL,OAAOO,eAAe,CAACC,IAAvB,KAAgC,UAAhC,IACA,OAAOD,eAAe,CAACE,OAAvB,KAAmC,UAF9B,EAGL;AACA;AACA,cAAMC,SAAS,GACb,OAAOH,eAAe,CAACE,OAAvB,KAAmC,UAAnC,GACIF,eAAe,CAACE,OAAhB,CAAwBT,QAAxB,CADJ,GAEIA,QAHN;AAIAG,QAAAA,aAAa,CAACG,OAAD,CAAb,GAAyBI,SAAzB;AACD;;AACDhB,MAAAA,WAAW,CAACY,OAAD,CAAX,GAAuB,KAAvB;AACAX,MAAAA,eAAe;AAChB;AACF;AACF;;AAED,SAASgB,uBAAT,CACER,aADF,EAEES,SAFF,EAGEC,SAHF,EAIET,eAJF,EAKiB;AACf,QAAMU,SAAS,GACbF,SAAS,CAACtc,MAAV,GAAmBuc,SAAS,CAACvc,MAA7B,GAAsCsc,SAAS,CAACtc,MAAhD,GAAyDuc,SAAS,CAACvc,MADrE;AAEA,MAAID,CAAJ;;AACA,OAAKA,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGyc,SAAhB,EAA2Bzc,CAAC,EAA5B,EAAgC;AAC9B;AACA;AACA8b,IAAAA,aAAa,GAAGY,kBAAkB,CAChCZ,aADgC,EAEhCS,SAAS,CAACvc,CAAD,CAFuB,EAGhCwc,SAAS,CAACxc,CAAD,CAHuB,EAIhC+b,eAJgC,CAAlC;AAMD;;AACD,SAAO/b,CAAC,GAAGuc,SAAS,CAACtc,MAArB,EAA6BD,CAAC,EAA9B,EAAkC;AAChC;AACA8b,IAAAA,aAAa,GAAGa,mBAAmB,CACjCb,aADiC,EAEjCS,SAAS,CAACvc,CAAD,CAFwB,EAGjC+b,eAHiC,CAAnC;AAKD;;AACD,SAAO/b,CAAC,GAAGwc,SAAS,CAACvc,MAArB,EAA6BD,CAAC,EAA9B,EAAkC;AAChC;AACA8b,IAAAA,aAAa,GAAGc,iBAAiB,CAC/Bd,aAD+B,EAE/BU,SAAS,CAACxc,CAAD,CAFsB,EAG/B+b,eAH+B,CAAjC;AAKD;;AACD,SAAOD,aAAP;AACD;;AAED,SAASY,kBAAT,CACEZ,aADF,EAEEJ,QAFF,EAGEC,QAHF,EAIEI,eAJF,EAKiB;AACf,MAAI,CAACD,aAAD,IAAkBJ,QAAQ,KAAKC,QAAnC,EAA6C;AAC3C;AACA;AACA,WAAOG,aAAP;AACD;;AAED,MAAI,CAACJ,QAAD,IAAa,CAACC,QAAlB,EAA4B;AAC1B,QAAIA,QAAJ,EAAc;AACZ,aAAOiB,iBAAiB,CAACd,aAAD,EAAgBH,QAAhB,EAA0BI,eAA1B,CAAxB;AACD;;AACD,QAAIL,QAAJ,EAAc;AACZ,aAAOiB,mBAAmB,CAACb,aAAD,EAAgBJ,QAAhB,EAA0BK,eAA1B,CAA1B;AACD;;AACD,WAAOD,aAAP;AACD;;AAED,MAAI,CAACld,OAAO,CAAC8c,QAAD,CAAR,IAAsB,CAAC9c,OAAO,CAAC+c,QAAD,CAAlC,EAA8C;AAC5C;AACA,WAAOkB,cAAc,CAACf,aAAD,EAAgBJ,QAAhB,EAA0BC,QAA1B,EAAoCI,eAApC,CAArB;AACD;;AAED,MAAInd,OAAO,CAAC8c,QAAD,CAAP,IAAqB9c,OAAO,CAAC+c,QAAD,CAAhC,EAA4C;AAC1C;AACA,WAAOW,uBAAuB,CAC5BR,aAD4B,EAE5BJ,QAF4B,EAG5BC,QAH4B,EAI5BI,eAJ4B,CAA9B;AAMD;;AAED,MAAInd,OAAO,CAAC8c,QAAD,CAAX,EAAuB;AACrB,WAAOmB,cAAc,CACnBf,aADmB;AAGnBgB,IAAAA,wCAAY,CAACpB,QAAD,CAHO;AAKnBC,IAAAA,QALmB,EAMnBI,eANmB,CAArB;AAQD;;AAED,SAAOc,cAAc,CACnBf,aADmB,EAEnBJ,QAFmB;AAInBoB,EAAAA,wCAAY,CAACnB,QAAD,CAJO,EAKnBI,eALmB,CAArB;AAOD;AAED;;;;;;;AAKA,SAASa,iBAAT,CACEd,aADF,EAEEH,QAFF,EAGEI,eAHF,EAIE;AACA,MAAI,CAACJ,QAAL,EAAe;AACb,WAAOG,aAAP;AACD;;AAED,MAAI,CAACld,OAAO,CAAC+c,QAAD,CAAZ,EAAwB;AACtB;AACA,WAAOoB,aAAa,CAACjB,aAAD,EAAgBH,QAAhB,EAA0BI,eAA1B,CAApB;AACD;;AAED,OAAK,IAAI/b,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG2b,QAAQ,CAAC1b,MAA7B,EAAqCD,CAAC,EAAtC,EAA0C;AACxC;AACA8b,IAAAA,aAAa,GAAGc,iBAAiB,CAC/Bd,aAD+B,EAE/BH,QAAQ,CAAC3b,CAAD,CAFuB,EAG/B+b,eAH+B,CAAjC;AAKD;;AAED,SAAOD,aAAP;AACD;AAED;;;;;;AAIA,SAASa,mBAAT,CACEb,aADF,EAEEJ,QAFF,EAGEK,eAHF,EAIiB;AACf,MAAI,CAACL,QAAL,EAAe;AACb,WAAOI,aAAP;AACD;;AAED,MAAI,CAACld,OAAO,CAAC8c,QAAD,CAAZ,EAAwB;AACtB;AACA,WAAOsB,eAAe,CAAClB,aAAD,EAAgBJ,QAAhB,EAA0BK,eAA1B,CAAtB;AACD;;AAED,OAAK,IAAI/b,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG0b,QAAQ,CAACzb,MAA7B,EAAqCD,CAAC,EAAtC,EAA0C;AACxC;AACA8b,IAAAA,aAAa,GAAGa,mBAAmB,CACjCb,aADiC,EAEjCJ,QAAQ,CAAC1b,CAAD,CAFyB,EAGjC+b,eAHiC,CAAnC;AAKD;;AACD,SAAOD,aAAP;AACD;AAED;;;;;;;;AAMA,SAASe,cAAT,CACEf,aADF,EAEEmB,SAFF,EAGEC,SAHF,EAIEnB,eAJF,EAKiB;AACf,MAAIG,eAAJ;AACA,MAAIP,QAAJ;AACA,MAAID,QAAJ;;AAEA,OAAK,MAAMO,OAAX,IAAsBiB,SAAtB,EAAiC;AAC/BhB,IAAAA,eAAe,GAAGH,eAAe,CAACE,OAAD,CAAjC;;AACA,QAAI,CAACC,eAAL,EAAsB;AACpB,eADoB;AAErB;;AAEDR,IAAAA,QAAQ,GAAGuB,SAAS,CAAChB,OAAD,CAApB;AACAN,IAAAA,QAAQ,GAAGuB,SAAS,CAACjB,OAAD,CAApB,CAP+B;AAU/B;;AACA,QAAI,OAAON,QAAP,KAAoB,UAAxB,EAAoC;AAClCA,MAAAA,QAAQ,GAAI,IAAZ,CADkC;AAGlC;;AACA,UAAI,OAAOD,QAAP,KAAoB,UAAxB,EAAoC;AAClCA,QAAAA,QAAQ,GAAI,IAAZ;AACD;AACF,KAlB8B;AAqB/B;;;AACA,QAAI,OAAOC,QAAP,KAAoB,WAAxB,EAAqC;AACnCA,MAAAA,QAAQ,GAAI,IAAZ;;AACA,UAAI,OAAOD,QAAP,KAAoB,WAAxB,EAAqC;AACnCA,QAAAA,QAAQ,GAAI,IAAZ;AACD;AACF;;AAED,QAAIL,WAAJ,EAAiB;AACfA,MAAAA,WAAW,CAACY,OAAD,CAAX,GAAuB,KAAvB;AACD;;AAED,QAAIH,aAAa,IAAIA,aAAa,CAACG,OAAD,CAAb,KAA2Bvc,SAAhD,EAA2D;AACzD;AACA;AACA;AACA;AAEA;AACA,UAAI,OAAOwc,eAAP,KAA2B,QAA/B,EAAyC;AACvC;AACAJ,QAAAA,aAAa,CAACG,OAAD,CAAb,GAAyBN,QAAzB;AACD,OAHD,MAGO,IACL,OAAOO,eAAe,CAACC,IAAvB,KAAgC,UAAhC,IACA,OAAOD,eAAe,CAACE,OAAvB,KAAmC,UAF9B,EAGL;AACA;AACA,cAAMC,SAAS,GACb,OAAOH,eAAe,CAACE,OAAvB,KAAmC,UAAnC,GACIF,eAAe,CAACE,OAAhB,CAAwBT,QAAxB,CADJ,GAEIA,QAHN;AAIAG,QAAAA,aAAa,CAACG,OAAD,CAAb,GAAyBI,SAAzB;AACD;;AACD;AACD;;AAED,QAAIX,QAAQ,KAAKC,QAAjB,EAA2B;AACzB,eADyB;AAE1B,KA3D8B;;;AA8D/B,QAAI,OAAOO,eAAP,KAA2B,QAA/B,EAAyC;AACvC;AACA,UAAIT,aAAa,CAACC,QAAD,EAAWC,QAAX,CAAjB,EAAuC;AACrC;AACA,SAACG,aAAa,KAAKA,aAAa,GAAG,EAArB,CAAd,EAAwCG,OAAxC,IAAmDN,QAAnD;AACD;AACF,KAND,MAMO,IACL,OAAOO,eAAe,CAACC,IAAvB,KAAgC,UAAhC,IACA,OAAOD,eAAe,CAACE,OAAvB,KAAmC,UAF9B,EAGL;AACA;AACA,YAAMe,YAAY,GAChBzB,QAAQ,KAAKhc,SAAb,KACC,OAAOwc,eAAe,CAACC,IAAvB,KAAgC,UAAhC,GACGD,eAAe,CAACC,IAAhB,CAAqBT,QAArB,EAA+BC,QAA/B,CADH,GAEGF,aAAa,CAACC,QAAD,EAAWC,QAAX,CAHjB,CADF;;AAKA,UAAIwB,YAAJ,EAAkB;AAChB,cAAMd,SAAS,GACb,OAAOH,eAAe,CAACE,OAAvB,KAAmC,UAAnC,GACIF,eAAe,CAACE,OAAhB,CAAwBT,QAAxB,CADJ,GAEIA,QAHN;AAIA,SAACG,aAAa,KAAKA,aAAa,GAAG,EAArB,CAAd,EAAwCG,OAAxC,IAAmDI,SAAnD;AACD;AACF,KAjBM,MAiBA;AACL;AACAhB,MAAAA,WAAW,GAAG,IAAd;AACAC,MAAAA,eAAe,GAAG,CAAlB,CAHK;AAKL;;AACAQ,MAAAA,aAAa,GAAGY,kBAAkB,CAChCZ,aADgC,EAEhCJ,QAFgC,EAGhCC,QAHgC,EAI9BO,eAJ8B,CAAlC;;AAMA,UAAIZ,eAAe,GAAG,CAAlB,IAAuBQ,aAA3B,EAA0C;AACxCD,QAAAA,iCAAiC,CAC/BC,aAD+B,EAE/BH,QAF+B,EAG7BO,eAH6B,CAAjC;AAKAb,QAAAA,WAAW,GAAG,IAAd;AACD;AACF;AACF,GA/Gc;AAkHf;AACA;;;AACA,OAAK,MAAMY,OAAX,IAAsBgB,SAAtB,EAAiC;AAC/B,QAAIC,SAAS,CAACjB,OAAD,CAAT,KAAuBvc,SAA3B,EAAsC;AACpC,eADoC;AAErC;;AACDwc,IAAAA,eAAe,GAAGH,eAAe,CAACE,OAAD,CAAjC;;AACA,QAAI,CAACC,eAAL,EAAsB;AACpB,eADoB;AAErB;;AAED,QAAIJ,aAAa,IAAIA,aAAa,CAACG,OAAD,CAAb,KAA2Bvc,SAAhD,EAA2D;AACzD;AACA;AACD;;AAEDgc,IAAAA,QAAQ,GAAGuB,SAAS,CAAChB,OAAD,CAApB;;AACA,QAAIP,QAAQ,KAAKhc,SAAjB,EAA4B;AAC1B,eAD0B;AAE3B,KAjB8B;;;AAmB/B,QACE,OAAOwc,eAAP,KAA2B,QAA3B,IACA,OAAOA,eAAe,CAACC,IAAvB,KAAgC,UADhC,IAEA,OAAOD,eAAe,CAACE,OAAvB,KAAmC,UAHrC,EAIE;AACA;AACA;AACA,OAACN,aAAa,KAAKA,aAAa,GAAG,EAArB,CAAd,EAAwCG,OAAxC,IAAmD,IAAnD;;AACA,UAAI,CAACZ,WAAL,EAAkB;AAChBA,QAAAA,WAAW,GAAG,EAAd;AACD;;AACD,UAAI,CAACA,WAAW,CAACY,OAAD,CAAhB,EAA2B;AACzBZ,QAAAA,WAAW,CAACY,OAAD,CAAX,GAAuB,IAAvB;AACAX,QAAAA,eAAe;AAChB;AACF,KAfD,MAeO;AACL;AACA;AACA;AACAQ,MAAAA,aAAa,GAAGa,mBAAmB,CACjCb,aADiC,EAEjCJ,QAFiC,EAG/BQ,eAH+B,CAAnC;AAKD;AACF;;AACD,SAAOJ,aAAP;AACD;AAED;;;;;AAGA,SAASiB,aAAT,CACEjB,aADF,EAEEhQ,KAFF,EAGEiQ,eAHF,EAIiB;AACf;AACA,SAAOc,cAAc,CAACf,aAAD,EAAgBV,WAAhB,EAA6BtP,KAA7B,EAAoCiQ,eAApC,CAArB;AACD;AAED;;;;;;AAIA,SAASiB,eAAT,CACElB,aADF,EAEEmB,SAFF,EAGElB,eAHF,EAIiB;AACf;AACA,SAAOc,cAAc,CAACf,aAAD,EAAgBmB,SAAhB,EAA2B7B,WAA3B,EAAwCW,eAAxC,CAArB;AACD;;AAED,AAAO,SAASqB,MAAT,CACLtR,KADK,EAELiQ,eAFK,EAGU;AACf,SAAOgB,aAAa,CAClB,IADkB;AAElBjR,EAAAA,KAFkB,EAGlBiQ,eAHkB,CAApB;AAKD;AAED,AAAO,SAASI,IAAT,CACLc,SADK,EAELC,SAFK,EAGLnB,eAHK,EAIU;AACf,SAAOc,cAAc,CACnB,IADmB;AAEnBI,EAAAA,SAFmB,EAGnBC,SAHmB,EAInBnB,eAJmB,CAArB;AAMD;;AC1dD;;;;AAIA,AAAO,SAASsB,iCAAT,CACLpgB,OADK,EAELwJ,QAFK,EAGA;AACL,SAAO,YAAW;AAChB,QAAI,CAACA,QAAL,EAAe;AACb,aAAO/G,SAAP;AACD,KAHe;AAKhB;AACA;AACA;;;AACA,QAAI,OAAOzC,OAAO,CAACqgB,WAAf,KAA+B,SAAnC,EAA8C;AAC5C,UAAI,CAACrgB,OAAO,CAACqgB,WAAb,EAA0B;AACxB,eAAO5d,SAAP;AACD;AACF,KAZe;AAehB;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;;;AAEA,WAAO+G,QAAQ,CAAC3I,KAAT,CAAeb,OAAf,EAAwBY,SAAxB,CAAP;AACD,GA3BD;AA4BD;;ACzBD;AACA;IAWM0f;AAMJ,yCACE1S,GADF,EAEE2S,UAFF,EAGEC,yBAHF,EAIE;AACA,SAAKpM,UAAL,GAAkBxG,GAAlB;AACA,SAAK6S,SAAL,GAAiB,EAAjB;AACA,SAAKF,UAAL,GAAkBA,UAAlB;AAID;;;;SAEDG,OAAA,gBAAO;AACLC,IAAAA,0CAAc,CAACC,aAAf,CAA6B,IAA7B;AACD;;SAEDC,QAAA,iBAAQ;AACNF,IAAAA,0CAAc,CAACG,cAAf,CAA8B,IAA9B;AACD;;SAEDC,UAAA,iBAAQvX,QAAR,EAA4C;AAC1CuN,IAAAA,qCAAS,CAACgK,OAAV,CACE,KAAK3M,UADP,EAEEgM,iCAAiC,CAAC,IAAD,EAAO5W,QAAP,CAFnC;AAID;;SAEDwX,kBAAA,yBAAgBxX,QAAhB,EAA4D;AAC1DuN,IAAAA,qCAAS,CAACiK,eAAV,CACE,KAAK5M,UADP,EAEEgM,iCAAiC,CAAC,IAAD,EAAO5W,QAAP,CAFnC;AAID;;SAEDyX,gBAAA,uBACEC,oBADF,EAEEC,SAFF,EAGEC,MAHF;AAGsB;AACpB;AACA,QAAIC,YAAJ;;AAEA,QAAI,OAAOH,oBAAP,KAAgC,QAApC,EAA8C;AAC5C;AACAG,MAAAA,YAAY,GAAGH,oBAAf;AACD,KAHD,MAGO;AACL,YAAMI,UAAyC,GAAIJ,oBAAnD;;AACA,UAAII,UAAU,CAAClN,UAAf,EAA2B;AACzBiN,QAAAA,YAAY,GAAGC,UAAU,CAAClN,UAA1B;AACD;AACF;;AAED,QAAIiN,YAAY,IAAI,IAApB,EAA0B;AACxB;AAMA;AACD;;AAEDtK,IAAAA,qCAAS,CAACkK,aAAV,CACE,KAAK7M,UADP,EAEEiN,YAFF,EAGEjB,iCAAiC,CAAC,IAAD,EAAOgB,MAAP,CAHnC,EAIEhB,iCAAiC,CAAC,IAAD,EAAOe,SAAP,CAJnC;AAMD;;SAEDI,iBAAA,wBAAeC,WAAf,EAAoC;AAClC;AAIA,UAAM3C,aAAa,GAAGsB,MAAM,CAACqB,WAAD,EAAc,KAAKjB,UAAL,CAAgBzB,eAA9B,CAA5B,CALkC;AAQlC;AACA;;AACA,QAAID,aAAa,IAAI,IAArB,EAA2B;AACzB9H,MAAAA,qCAAS,CAAC0K,UAAV,CACE,KAAKrN,UADP,EAEE,KAAKmM,UAAL,CAAgBmB,eAFlB,EAGE7C,aAHF;AAKD;AACF;;;;;ACpHH;AACA,AAKO,MAAM8C,gBAAgB,GAAGC,mCAAzB;AACP,AAAO,MAAMC,cAAc,GAAGD,iCAAvB;AACP,AAAO,MAAME,WAAW,GAAGF,8BAApB;AACP,AAAO,MAAMG,YAAY,GAAGH,+BAArB;AACP,AAAO,MAAM1d,GAAG,GAAG0d,sBAAZ;AACP,AAEO,MAAMI,iBAAiB,GAAGJ,oCAA1B;AACP,AAAO,MAAMK,oBAAoB,GAAGL,uCAA7B;AACP,AAAO,MAAMM,cAAc,GAAGN,iCAAvB;AACP,AACO,MAAMO,YAAY,GAAGP,+BAArB;;ACKP,IAAIQ,UAAU,GAAG,IAAjB;AACA,IAAIC,YAAY,GAAG,IAAnB;AACA,AAKO,SAASC,eAAT,CAAyBC,SAAzB,EAAqD;AAC1D,MAAI,OAAOC,8BAAP,KAA0C,WAA9C,EAA2D;AACzD;AACA,WAAO,KAAP;AACD;;AACD,QAAMC,IAAI,GAAGD,8BAAb;;AACA,MAAIC,IAAI,CAACC,UAAT,EAAqB;AACnB;AACA;AACA;AACA,WAAO,IAAP;AACD;;AACD,MAAI,CAACD,IAAI,CAACE,aAAV,EAAyB;AACvB;;AAQA,WAAO,IAAP;AACD;;AACD,MAAI;AACFP,IAAAA,UAAU,GAAGK,IAAI,CAACG,MAAL,CAAYL,SAAZ,CAAb,CADE;;AAGFF,IAAAA,YAAY,GAAGI,IAAf;AACD,GAJD,CAIE,OAAOI,GAAP,EAAY;AACZ,AAID;;AACD,MAAIJ,IAAI,CAACK,QAAT,EAAmB;AACjB;AACA,WAAO,IAAP;AACD,GAHD,MAGO;AACL;AACA,WAAO,KAAP;AACD;AACF;AAED,AAkBO,SAASC,YAAT,CAAsBC,IAAtB,EAAuCC,aAAvC,EAAqE;AAC1E,MAAIZ,YAAY,IAAI,OAAOA,YAAY,CAACa,iBAApB,KAA0C,UAA9D,EAA0E;AACxE,QAAI;AACF,YAAMC,QAAQ,GAAG,CAACH,IAAI,CAACjZ,OAAL,CAAakT,KAAb,GAAqB1B,UAAtB,MAAsCA,UAAvD;;AACA,UAAId,mBAAJ,EAAyB;AACvB,YAAI2I,iBAAJ;;AACA,gBAAQH,aAAR;AACE,eAAKI,qBAAL;AACED,YAAAA,iBAAiB,GAAGE,iBAApB;AACA;;AACF,eAAKC,uBAAL;AACEH,YAAAA,iBAAiB,GAAGI,oBAApB;AACA;;AACF,eAAKC,oBAAL;AACEL,YAAAA,iBAAiB,GAAGM,cAApB;AACA;;AACF,eAAKC,iBAAL;AACEP,YAAAA,iBAAiB,GAAGQ,YAApB;AACA;;AACF;AACER,YAAAA,iBAAiB,GAAGM,cAApB;AACA;AAfJ;;AAiBArB,QAAAA,YAAY,CAACa,iBAAb,CACEd,UADF,EAEEY,IAFF,EAGEI,iBAHF,EAIED,QAJF;AAMD,OAzBD,MAyBO;AACLd,QAAAA,YAAY,CAACa,iBAAb,CAA+Bd,UAA/B,EAA2CY,IAA3C,EAAiDvgB,SAAjD,EAA4D0gB,QAA5D;AACD;AACF,KA9BD,CA8BE,OAAON,GAAP,EAAY;AACZ,AAMD;AACF;AACF;AAED,AAAO,SAASgB,gBAAT,CAA0Bb,IAA1B,EAA2C;AAChD,MACEX,YAAY,IACZ,OAAOA,YAAY,CAACyB,qBAApB,KAA8C,UAFhD,EAGE;AACA,QAAI;AACFzB,MAAAA,YAAY,CAACyB,qBAAb,CAAmC1B,UAAnC,EAA+CY,IAA/C;AACD,KAFD,CAEE,OAAOH,GAAP,EAAY;AACZ,AAMD;AACF;AACF;AAED,AAAO,SAASkB,eAAT,CAAyBvJ,KAAzB,EAAuC;AAC5C,MAAI6H,YAAY,IAAI,OAAOA,YAAY,CAAC2B,oBAApB,KAA6C,UAAjE,EAA6E;AAC3E,QAAI;AACF3B,MAAAA,YAAY,CAAC2B,oBAAb,CAAkC5B,UAAlC,EAA8C5H,KAA9C;AACD,KAFD,CAEE,OAAOqI,GAAP,EAAY;AACZ,AAMD;AACF;AACF;;ACjKM,MAAMoB,MAAM;AAAG;AAA8B,QAA7C;;AAEP,AAAO,MAAMC,cAAc;AAAG;AAAsB,QAA7C;AACP,AAAO,MAAMC,WAAW;AAAG;AAAyB,QAA7C;AACP,AAAO,MAAMC,gBAAgB;AAAG;AAAoB,QAA7C;AACP,AAAO,MAAMC,gBAAgB;AAAG;AAAoB,QAA7C;;ACLP;AACA,AAgBA;;AAEA,AAAO,MAAMC,UAAU,GAAG,EAAnB;AAEP,AAAO,MAAMC,OAAc;AAAG;AAA6B,iCAApD;AACP,AAAO,MAAMC,MAAY;AAAG;AAA+B,iCAApD;AAEP,AAAO,MAAMC,QAAc;AAAG;AAA6B,iCAApD;AAEP,AAAO,MAAMC,4BAAkC;AAAG;AAAS,iCAApD;AACP,AAAO,MAAMC,mBAA0B;AAAG;AAAiB,iCAApD;AAEP,AAAO,MAAMC,oBAA0B;AAAG;AAAiB,iCAApD;AACP,AAAO,MAAMC,WAAkB;AAAG;AAAyB,iCAApD;AAEP,MAAMC,uBAA6B;AAAG;AAAqB,iCAA3D;AACA,MAAMC,eAAsB;AAAG;AAA4B,iCAA3D;AACA,MAAMC,eAAqB;AAAG;AAA6B,iCAA3D;AACA,MAAMC,eAAqB;AAAG;AAA6B,iCAA3D;AACA,MAAMC,eAAqB;AAAG;AAA6B,iCAA3D;AACA,MAAMC,eAAqB;AAAG;AAA6B,iCAA3D;AACA,MAAMC,eAAqB;AAAG;AAA6B,iCAA3D;AACA,MAAMC,eAAqB;AAAG;AAA6B,iCAA3D;AACA,MAAMC,eAAqB;AAAG;AAA6B,iCAA3D;AACA,MAAMC,eAAqB;AAAG;AAA6B,iCAA3D;AACA,MAAMC,eAAqB;AAAG;AAA6B,iCAA3D;AACA,MAAMC,gBAAsB;AAAG;AAA4B,iCAA3D;AACA,MAAMC,gBAAsB;AAAG;AAA4B,iCAA3D;AACA,MAAMC,gBAAsB;AAAG;AAA4B,iCAA3D;AACA,MAAMC,gBAAsB;AAAG;AAA4B,iCAA3D;AACA,MAAMC,gBAAsB;AAAG;AAA4B,iCAA3D;AACA,MAAMC,gBAAsB;AAAG;AAA4B,iCAA3D;AACA,MAAMC,gBAAsB;AAAG;AAA4B,iCAA3D;AAEA,MAAMC,UAAiB;AAAG;AAAiC,iCAA3D;AACA,MAAMC,UAAgB;AAAG;AAAkC,iCAA3D;AACA,MAAMC,UAAgB;AAAG;AAAkC,iCAA3D;AACA,MAAMC,UAAgB;AAAG;AAAkC,iCAA3D;AACA,MAAMC,UAAgB;AAAG;AAAkC,iCAA3D;AACA,MAAMC,UAAgB;AAAG;AAAkC,iCAA3D;AAEA,AAAO,MAAMC,aAAmB,GAAGL,UAA5B;AAEP,AAAO,MAAMM,sBAA4B;AAAG;AAAe,iCAApD;AAEP,MAAMC,YAAY;AAAG;AAAsC,iCAA3D;AAEA,AAAO,MAAMC,iBAAuB;AAAG;AAAoB,iCAApD;AACP,AAAO,MAAMC,QAAe;AAAG;AAA4B,iCAApD;AAEP,AAAO,MAAMC,aAAmB;AAAG;AAAwB,iCAApD;AAGP,AA0CO,MAAMC,WAAW,GAAG,CAAC,CAArB;AAEP,IAAIC,kBAAwB,GAAG7B,eAA/B;AACA,IAAI8B,aAAmB,GAAGb,UAA1B;;AAEA,SAASc,uBAAT,CAAiCC,KAAjC,EAA6D;AAC3D,UAAQC,sBAAsB,CAACD,KAAD,CAA9B;AACE,SAAKvC,QAAL;AACE,aAAOA,QAAP;;AACF,SAAKC,4BAAL;AACE,aAAOA,4BAAP;;AACF,SAAKC,mBAAL;AACE,aAAOA,mBAAP;;AACF,SAAKC,oBAAL;AACE,aAAOA,oBAAP;;AACF,SAAKC,WAAL;AACE,aAAOA,WAAP;;AACF,SAAKC,uBAAL;AACE,aAAOA,uBAAP;;AACF,SAAKE,eAAL;AACA,SAAKC,eAAL;AACA,SAAKC,eAAL;AACA,SAAKC,eAAL;AACA,SAAKC,eAAL;AACA,SAAKC,eAAL;AACA,SAAKC,eAAL;AACA,SAAKC,eAAL;AACA,SAAKC,eAAL;AACA,SAAKC,gBAAL;AACA,SAAKC,gBAAL;AACA,SAAKC,gBAAL;AACA,SAAKC,gBAAL;AACA,SAAKC,gBAAL;AACA,SAAKC,gBAAL;AACA,SAAKC,gBAAL;AACE,aAAOiB,KAAK,GAAGjC,eAAf;;AACF,SAAKkB,UAAL;AACA,SAAKC,UAAL;AACA,SAAKC,UAAL;AACA,SAAKC,UAAL;AACA,SAAKC,UAAL;AACE,aAAOW,KAAK,GAAGhB,UAAf;;AACF,SAAKO,sBAAL;AACE,aAAOA,sBAAP;;AACF,SAAKE,iBAAL;AACE,aAAOA,iBAAP;;AACF,SAAKC,QAAL;AACE,aAAOA,QAAP;;AACF,SAAKC,aAAL;AACE,aAAOA,aAAP;;AACF;AACE;;AAMA,aAAOK,KAAP;AAnDJ;AAqDD;;AAED,AAAO,SAASE,YAAT,CAAsBlE,IAAtB,EAAuCmE,QAAvC,EAA+D;AACpE;AACA,QAAMC,YAAY,GAAGpE,IAAI,CAACoE,YAA1B;;AACA,MAAIA,YAAY,KAAK7C,OAArB,EAA8B;AAC5B,WAAOA,OAAP;AACD;;AAED,MAAI8C,SAAS,GAAG9C,OAAhB;AAEA,QAAM+C,cAAc,GAAGtE,IAAI,CAACsE,cAA5B;AACA,QAAMC,WAAW,GAAGvE,IAAI,CAACuE,WAAzB,CAVoE;AAapE;;AACA,QAAMC,mBAAmB,GAAGJ,YAAY,GAAGZ,YAA3C;;AACA,MAAIgB,mBAAmB,KAAKjD,OAA5B,EAAqC;AACnC,UAAMkD,qBAAqB,GAAGD,mBAAmB,GAAG,CAACF,cAArD;;AACA,QAAIG,qBAAqB,KAAKlD,OAA9B,EAAuC;AACrC8C,MAAAA,SAAS,GAAGN,uBAAuB,CAACU,qBAAD,CAAnC;AACD,KAFD,MAEO;AACL,YAAMC,kBAAkB,GAAGF,mBAAmB,GAAGD,WAAjD;;AACA,UAAIG,kBAAkB,KAAKnD,OAA3B,EAAoC;AAClC8C,QAAAA,SAAS,GAAGN,uBAAuB,CAACW,kBAAD,CAAnC;AACD;AACF;AACF,GAVD,MAUO;AACL;AACA,UAAMC,cAAc,GAAGP,YAAY,GAAG,CAACE,cAAvC;;AACA,QAAIK,cAAc,KAAKpD,OAAvB,EAAgC;AAC9B8C,MAAAA,SAAS,GAAGN,uBAAuB,CAACY,cAAD,CAAnC;AACD,KAFD,MAEO;AACL,UAAIJ,WAAW,KAAKhD,OAApB,EAA6B;AAC3B8C,QAAAA,SAAS,GAAGN,uBAAuB,CAACQ,WAAD,CAAnC;AACD;AACF;AACF;;AAED,MAAIF,SAAS,KAAK9C,OAAlB,EAA2B;AACzB;AACA;AACA,WAAOA,OAAP;AACD,GAzCmE;AA4CpE;AACA;;;AACA,MACE4C,QAAQ,KAAK5C,OAAb,IACA4C,QAAQ,KAAKE,SADb;AAGA;AACA,GAACF,QAAQ,GAAGG,cAAZ,MAAgC/C,OALlC,EAME;AACA,UAAMqD,QAAQ,GAAGX,sBAAsB,CAACI,SAAD,CAAvC;AACA,UAAMQ,OAAO,GAAGZ,sBAAsB,CAACE,QAAD,CAAtC;;AACA;AAEE;AACAS,IAAAA,QAAQ,IAAIC,OAAZ;AAEA;AACA;AACCD,IAAAA,QAAQ,KAAK/C,WAAb,IAA4B,CAACgD,OAAO,GAAG9C,eAAX,MAAgCR,OAP/D,EAQE;AACA;AACA,aAAO4C,QAAP;AACD;AACF;;AAED,EAKO,IAAI,CAACE,SAAS,GAAG1C,mBAAb,MAAsCJ,OAA1C,EAAmD;AACxD;AACA;AACA;AACA;AACA8C,IAAAA,SAAS,IAAID,YAAY,GAAGvC,WAA5B;AACD,GAhFmE;AAmFpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,QAAMiD,cAAc,GAAG9E,IAAI,CAAC8E,cAA5B;;AACA,MAAIA,cAAc,KAAKvD,OAAvB,EAAgC;AAC9B,UAAMwD,aAAa,GAAG/E,IAAI,CAAC+E,aAA3B;AACA,QAAIf,KAAK,GAAGK,SAAS,GAAGS,cAAxB;;AACA,WAAOd,KAAK,GAAG,CAAf,EAAkB;AAChB,YAAMtR,KAAK,GAAGsS,sBAAsB,CAAChB,KAAD,CAApC;AACA,YAAMiB,IAAI,GAAG,KAAKvS,KAAlB;AAEA2R,MAAAA,SAAS,IAAIU,aAAa,CAACrS,KAAD,CAA1B;AAEAsR,MAAAA,KAAK,IAAI,CAACiB,IAAV;AACD;AACF;;AAED,SAAOZ,SAAP;AACD;AAED,AAAO,SAASa,sBAAT,CAAgClF,IAAhC,EAAiDgE,KAAjD,EAAuE;AAC5E,QAAMmB,UAAU,GAAGnF,IAAI,CAACmF,UAAxB;AAEA,MAAIC,mBAAmB,GAAGxB,WAA1B;;AACA,SAAOI,KAAK,GAAG,CAAf,EAAkB;AAChB,UAAMtR,KAAK,GAAGsS,sBAAsB,CAAChB,KAAD,CAApC;AACA,UAAMiB,IAAI,GAAG,KAAKvS,KAAlB;AAEA,UAAM2S,SAAS,GAAGF,UAAU,CAACzS,KAAD,CAA5B;;AACA,QAAI2S,SAAS,GAAGD,mBAAhB,EAAqC;AACnCA,MAAAA,mBAAmB,GAAGC,SAAtB;AACD;;AAEDrB,IAAAA,KAAK,IAAI,CAACiB,IAAV;AACD;;AAED,SAAOG,mBAAP;AACD;;AAED,SAASE,qBAAT,CAA+BL,IAA/B,EAA2CM,WAA3C,EAAgE;AAC9D,UAAQN,IAAR;AACE,SAAKxD,QAAL;AACA,SAAKC,4BAAL;AACA,SAAKC,mBAAL;AACE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAO4D,WAAW,GAAG,GAArB;;AACF,SAAK3D,oBAAL;AACA,SAAKC,WAAL;AACA,SAAKC,uBAAL;AACA,SAAKE,eAAL;AACA,SAAKC,eAAL;AACA,SAAKC,eAAL;AACA,SAAKC,eAAL;AACA,SAAKC,eAAL;AACA,SAAKC,eAAL;AACA,SAAKC,eAAL;AACA,SAAKC,eAAL;AACA,SAAKC,eAAL;AACA,SAAKC,gBAAL;AACA,SAAKC,gBAAL;AACA,SAAKC,gBAAL;AACA,SAAKC,gBAAL;AACA,SAAKC,gBAAL;AACA,SAAKC,gBAAL;AACA,SAAKC,gBAAL;AACE,aAAOwC,WAAW,GAAG,IAArB;;AACF,SAAKtC,UAAL;AACA,SAAKC,UAAL;AACA,SAAKC,UAAL;AACA,SAAKC,UAAL;AACA,SAAKC,UAAL;AACE;AACA;AACA;AACA;AACA;AACA,aAAOO,WAAP;;AACF,SAAKL,sBAAL;AACA,SAAKE,iBAAL;AACA,SAAKC,QAAL;AACA,SAAKC,aAAL;AACE;AACA,aAAOC,WAAP;;AACF;AACE;AAKA,aAAOA,WAAP;AAzDJ;AA2DD;;AAED,AAAO,SAAS4B,yBAAT,CACLxF,IADK,EAELuF,WAFK,EAGC;AACN;AACA;AACA;AAEA,QAAMnB,YAAY,GAAGpE,IAAI,CAACoE,YAA1B;AACA,QAAME,cAAc,GAAGtE,IAAI,CAACsE,cAA5B;AACA,QAAMC,WAAW,GAAGvE,IAAI,CAACuE,WAAzB;AACA,QAAMkB,eAAe,GAAGzF,IAAI,CAACyF,eAA7B,CARM;AAWN;AACA;;AACA,MAAIzB,KAAK,GAAGI,YAAZ;;AACA,SAAOJ,KAAK,GAAG,CAAf,EAAkB;AAChB,UAAMtR,KAAK,GAAGsS,sBAAsB,CAAChB,KAAD,CAApC;AACA,UAAMiB,IAAI,GAAG,KAAKvS,KAAlB;AAEA,UAAMgT,cAAc,GAAGD,eAAe,CAAC/S,KAAD,CAAtC;;AACA,QAAIgT,cAAc,KAAK9B,WAAvB,EAAoC;AAClC;AACA;AACA;AACA,UACE,CAACqB,IAAI,GAAGX,cAAR,MAA4B/C,OAA5B,IACA,CAAC0D,IAAI,GAAGV,WAAR,MAAyBhD,OAF3B,EAGE;AACA;AACAkE,QAAAA,eAAe,CAAC/S,KAAD,CAAf,GAAyB4S,qBAAqB,CAACL,IAAD,EAAOM,WAAP,CAA9C;AACD;AACF,KAXD,MAWO,IAAIG,cAAc,IAAIH,WAAtB,EAAmC;AACxC;AACAvF,MAAAA,IAAI,CAAC2F,YAAL,IAAqBV,IAArB;AACD;;AAEDjB,IAAAA,KAAK,IAAI,CAACiB,IAAV;AACD;AACF;AAGD,AAKO,SAASW,mCAAT,CAA6C5F,IAA7C,EAAqE;AAC1E,QAAM6F,sBAAsB,GAAG7F,IAAI,CAACoE,YAAL,GAAoB,CAACT,aAApD;;AACA,MAAIkC,sBAAsB,KAAKtE,OAA/B,EAAwC;AACtC,WAAOsE,sBAAP;AACD;;AACD,MAAIA,sBAAsB,GAAGlC,aAA7B,EAA4C;AAC1C,WAAOA,aAAP;AACD;;AACD,SAAOpC,OAAP;AACD;AAED,AAAO,SAASuE,mBAAT,CAA6B9B,KAA7B,EAA2C;AAChD,SAAO,CAACA,KAAK,GAAGR,YAAT,MAA2BjC,OAAlC;AACD;AACD,AAAO,SAASwE,mBAAT,CAA6B/B,KAA7B,EAA2C;AAChD,SAAO,CAACA,KAAK,GAAGhB,UAAT,MAAyBgB,KAAhC;AACD;AACD,AAAO,SAASgC,uBAAT,CAAiChC,KAAjC,EAA+C;AACpD,SAAO,CAACA,KAAK,GAAGjC,eAAT,MAA8BiC,KAArC;AACD;AAED,AAAO,SAASiC,eAAT,CAAyBjG,IAAzB,EAA0CgE,KAA1C,EAAwD;AAC7D,MAAI,CAACA,KAAK,GAAGhE,IAAI,CAAC2F,YAAd,MAAgCpE,OAApC,EAA6C;AAC3C;AACA;AACA,WAAO,KAAP;AACD;;AAUD,QAAM2E,gBAAgB,GACpBxE,4BAA4B,GAC5BC,mBADA,GAEAC,oBAFA,GAGAC,WAJF;AAKA,SAAO,CAACmC,KAAK,GAAGkC,gBAAT,MAA+B3E,OAAtC;AACD;AAED,AAAO,SAAS4E,gBAAT,CAA0BlB,IAA1B,EAAsC;AAC3C,SAAO,CAACA,IAAI,GAAGlD,eAAR,MAA6B,CAApC;AACD;AAED,AAAO,SAASqE,uBAAT,GAAyC;AAC9C;AACA;AACA;AACA,QAAMnB,IAAI,GAAGpB,kBAAb;AACAA,EAAAA,kBAAkB,KAAK,CAAvB;;AACA,MAAI,CAACA,kBAAkB,GAAG9B,eAAtB,MAA2C,CAA/C,EAAkD;AAChD8B,IAAAA,kBAAkB,GAAG7B,eAArB;AACD;;AACD,SAAOiD,IAAP;AACD;AAED,AAAO,SAASoB,kBAAT,GAAoC;AACzC,QAAMpB,IAAI,GAAGnB,aAAb;AACAA,EAAAA,aAAa,KAAK,CAAlB;;AACA,MAAI,CAACA,aAAa,GAAGd,UAAjB,MAAiC,CAArC,EAAwC;AACtCc,IAAAA,aAAa,GAAGb,UAAhB;AACD;;AACD,SAAOgC,IAAP;AACD;AAED,AAAO,SAAShB,sBAAT,CAAgCD,KAAhC,EAAoD;AACzD,SAAOA,KAAK,GAAG,CAACA,KAAhB;AACD;AAED,AAAO,SAASsC,iBAAT,CAA2BtC,KAA3B,EAA+C;AACpD;AACA;AACA;AACA;AACA,SAAOC,sBAAsB,CAACD,KAAD,CAA7B;AACD;;AAED,SAASgB,sBAAT,CAAgChB,KAAhC,EAA8C;AAC5C,SAAO,KAAKuC,KAAK,CAACvC,KAAD,CAAjB;AACD;;AAED,SAASwC,WAAT,CAAqBvB,IAArB,EAAiC;AAC/B,SAAOD,sBAAsB,CAACC,IAAD,CAA7B;AACD;;AAED,AAAO,SAASwB,gBAAT,CAA0BxpB,CAA1B,EAA2CC,CAA3C,EAA4D;AACjE,SAAO,CAACD,CAAC,GAAGC,CAAL,MAAYqkB,OAAnB;AACD;AAED,AAAO,SAASmF,eAAT,CAAyB7V,GAAzB,EAAqC8V,MAArC,EAA2D;AAChE,SAAO,CAAC9V,GAAG,GAAG8V,MAAP,MAAmBA,MAA1B;AACD;AAED,AAAO,SAASC,UAAT,CAAoB3pB,CAApB,EAAqCC,CAArC,EAA6D;AAClE,SAAOD,CAAC,GAAGC,CAAX;AACD;AAED,AAAO,SAAS2pB,WAAT,CAAqBhW,GAArB,EAAiC8V,MAAjC,EAA8D;AACnE,SAAO9V,GAAG,GAAG,CAAC8V,MAAd;AACD;AAED,AAAO,SAASG,cAAT,CAAwB7pB,CAAxB,EAAyCC,CAAzC,EAAiE;AACtE,SAAOD,CAAC,GAAGC,CAAX;AACD;AAGD;;AACA,AAAO,SAAS6pB,WAAT,CAAqB9B,IAArB,EAAwC;AAC7C,SAAOA,IAAP;AACD;AAED,AAKO,SAAS+B,aAAT,CAA0BC,OAA1B,EAAkD;AACvD;AACA;AACA,QAAMC,OAAO,GAAG,EAAhB;;AACA,OAAK,IAAInnB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGuhB,UAApB,EAAgCvhB,CAAC,EAAjC,EAAqC;AACnCmnB,IAAAA,OAAO,CAAC1jB,IAAR,CAAayjB,OAAb;AACD;;AACD,SAAOC,OAAP;AACD;AAED,AAAO,SAASC,eAAT,CACLnH,IADK,EAELoH,UAFK,EAGL/B,SAHK,EAIL;AACArF,EAAAA,IAAI,CAACoE,YAAL,IAAqBgD,UAArB,CADA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAIA,UAAU,KAAK1D,QAAnB,EAA6B;AAC3B1D,IAAAA,IAAI,CAACsE,cAAL,GAAsB/C,OAAtB;AACAvB,IAAAA,IAAI,CAACuE,WAAL,GAAmBhD,OAAnB;AACD;;AAED,QAAM4D,UAAU,GAAGnF,IAAI,CAACmF,UAAxB;AACA,QAAMzS,KAAK,GAAG8T,WAAW,CAACY,UAAD,CAAzB,CArBA;AAuBA;;AACAjC,EAAAA,UAAU,CAACzS,KAAD,CAAV,GAAoB2S,SAApB;AACD;AAED,AAAO,SAASgC,iBAAT,CAA2BrH,IAA3B,EAA4CsE,cAA5C,EAAmE;AACxEtE,EAAAA,IAAI,CAACsE,cAAL,IAAuBA,cAAvB;AACAtE,EAAAA,IAAI,CAACuE,WAAL,IAAoB,CAACD,cAArB,CAFwE;;AAKxE,QAAMmB,eAAe,GAAGzF,IAAI,CAACyF,eAA7B;AACA,MAAIzB,KAAK,GAAGM,cAAZ;;AACA,SAAON,KAAK,GAAG,CAAf,EAAkB;AAChB,UAAMtR,KAAK,GAAGsS,sBAAsB,CAAChB,KAAD,CAApC;AACA,UAAMiB,IAAI,GAAG,KAAKvS,KAAlB;AAEA+S,IAAAA,eAAe,CAAC/S,KAAD,CAAf,GAAyBkR,WAAzB;AAEAI,IAAAA,KAAK,IAAI,CAACiB,IAAV;AACD;AACF;AAED,AAAO,SAASqC,cAAT,CACLtH,IADK,EAELuE,WAFK,EAGLc,SAHK,EAIL;AACArF,EAAAA,IAAI,CAACuE,WAAL,IAAoBvE,IAAI,CAACsE,cAAL,GAAsBC,WAA1C;AACD;AAED,AAAO,SAASgD,mBAAT,CAA6BvH,IAA7B,EAA8CoH,UAA9C,EAAgE;AACrEpH,EAAAA,IAAI,CAACwH,gBAAL,IAAyBJ,UAAU,GAAGpH,IAAI,CAACoE,YAA3C;AACD;AAED,AAAO,SAASqD,gBAAT,CAA0BzH,IAA1B,EAA2C0H,cAA3C,EAAkE;AACvE,QAAMC,oBAAoB,GAAG3H,IAAI,CAACoE,YAAL,GAAoB,CAACsD,cAAlD;AAEA1H,EAAAA,IAAI,CAACoE,YAAL,GAAoBsD,cAApB,CAHuE;;AAMvE1H,EAAAA,IAAI,CAACsE,cAAL,GAAsB,CAAtB;AACAtE,EAAAA,IAAI,CAACuE,WAAL,GAAmB,CAAnB;AAEAvE,EAAAA,IAAI,CAAC2F,YAAL,IAAqB+B,cAArB;AACA1H,EAAAA,IAAI,CAACwH,gBAAL,IAAyBE,cAAzB;AAEA1H,EAAAA,IAAI,CAAC8E,cAAL,IAAuB4C,cAAvB;;AAWA,QAAM3C,aAAa,GAAG/E,IAAI,CAAC+E,aAA3B;AACA,QAAMI,UAAU,GAAGnF,IAAI,CAACmF,UAAxB;AACA,QAAMM,eAAe,GAAGzF,IAAI,CAACyF,eAA7B,CAzBuE;;AA4BvE,MAAIzB,KAAK,GAAG2D,oBAAZ;;AACA,SAAO3D,KAAK,GAAG,CAAf,EAAkB;AAChB,UAAMtR,KAAK,GAAGsS,sBAAsB,CAAChB,KAAD,CAApC;AACA,UAAMiB,IAAI,GAAG,KAAKvS,KAAlB;AAEAqS,IAAAA,aAAa,CAACrS,KAAD,CAAb,GAAuB6O,OAAvB;AACA4D,IAAAA,UAAU,CAACzS,KAAD,CAAV,GAAoBkR,WAApB;AACA6B,IAAAA,eAAe,CAAC/S,KAAD,CAAf,GAAyBkR,WAAzB;AAEAI,IAAAA,KAAK,IAAI,CAACiB,IAAV;AACD;AACF;AAED,AAAO,SAAS2C,iBAAT,CAA2B5H,IAA3B,EAA4C8E,cAA5C,EAAmE;AACxE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,QAAM+C,kBAAkB,GAAI7H,IAAI,CAAC8E,cAAL,IAAuBA,cAAnD;AACA,QAAMC,aAAa,GAAG/E,IAAI,CAAC+E,aAA3B;AACA,MAAIf,KAAK,GAAG6D,kBAAZ;;AACA,SAAO7D,KAAP,EAAc;AACZ,UAAMtR,KAAK,GAAGsS,sBAAsB,CAAChB,KAAD,CAApC;AACA,UAAMiB,IAAI,GAAG,KAAKvS,KAAlB;;AACA;AAEGuS,IAAAA,IAAI,GAAGH,cAAR;AAECC,IAAAA,aAAa,CAACrS,KAAD,CAAb,GAAuBoS,cAJ1B,EAKE;AACAC,MAAAA,aAAa,CAACrS,KAAD,CAAb,IAAwBoS,cAAxB;AACD;;AACDd,IAAAA,KAAK,IAAI,CAACiB,IAAV;AACD;AACF;AAED,AA6GA,MAAMsB,KAAK,GAAGuB,IAAI,CAACvB,KAAL,GAAauB,IAAI,CAACvB,KAAlB,GAA0BwB,aAAxC;AAGA;AACA;;AACA,MAAMC,GAAG,GAAGF,IAAI,CAACE,GAAjB;AACA,MAAMC,GAAG,GAAGH,IAAI,CAACG,GAAjB;;AACA,SAASF,aAAT,CAAuB/D,KAAvB,EAA4C;AAC1C,MAAIA,KAAK,KAAK,CAAd,EAAiB;AACf,WAAO,EAAP;AACD;;AACD,SAAQ,MAAOgE,GAAG,CAAChE,KAAD,CAAH,GAAaiE,GAAd,GAAqB,CAA3B,CAAD,GAAkC,CAAzC;AACD;;AC1xBM,MAAM5H,qBAAoC,GAAGoB,QAA7C;AACP,AAAO,MAAMlB,uBAAsC,GAAGoB,mBAA/C;AACP,AAAO,MAAMlB,oBAAmC,GAAGoB,WAA5C;AACP,AAAO,MAAMlB,iBAAgC,GAAG+C,QAAzC;AAEP,IAAIwE,qBAAoC,GAAG1G,MAA3C;AAEA,AAAO,SAAS2G,wBAAT,GAAmD;AACxD,SAAOD,qBAAP;AACD;AAED,AAAO,SAASE,wBAAT,CAAkCC,WAAlC,EAA8D;AACnEH,EAAAA,qBAAqB,GAAGG,WAAxB;AACD;AAED,AAUO,SAASC,mBAAT,CACLrrB,CADK,EAELC,CAFK,EAGU;AACf,SAAOD,CAAC,KAAK,CAAN,IAAWA,CAAC,GAAGC,CAAf,GAAmBD,CAAnB,GAAuBC,CAA9B;AACD;AAED,AAAO,SAASqrB,kBAAT,CACLtrB,CADK,EAELC,CAFK,EAGU;AACf,SAAOD,CAAC,KAAK,CAAN,IAAWA,CAAC,GAAGC,CAAf,GAAmBD,CAAnB,GAAuBC,CAA9B;AACD;AAED,AAAO,SAASsrB,qBAAT,CACLvrB,CADK,EAELC,CAFK,EAGI;AACT,SAAOD,CAAC,KAAK,CAAN,IAAWA,CAAC,GAAGC,CAAtB;AACD;AAED,AAAO,SAASurB,oBAAT,CAA8BzE,KAA9B,EAA2D;AAChE,QAAMiB,IAAI,GAAGhB,sBAAsB,CAACD,KAAD,CAAnC;;AACA,MAAI,CAACwE,qBAAqB,CAACnI,qBAAD,EAAwB4E,IAAxB,CAA1B,EAAyD;AACvD,WAAO5E,qBAAP;AACD;;AACD,MAAI,CAACmI,qBAAqB,CAACjI,uBAAD,EAA0B0E,IAA1B,CAA1B,EAA2D;AACzD,WAAO1E,uBAAP;AACD;;AACD,MAAIuF,mBAAmB,CAACb,IAAD,CAAvB,EAA+B;AAC7B,WAAOxE,oBAAP;AACD;;AACD,SAAOE,iBAAP;AACD;;ACrED;;AAEA,SAAS+H,IAAT,GAA4B;AAAA;AAAA;AAAA;AAO3B;AAQM,MAAMC,yBAAyB,GAAGD,IAAlC;AACP,AAAO,MAAME,0BAA0B,GAAGF,IAAnC;AACP,AAIO,MAAMG,mBAAmB,GAAGH,IAA5B;;MCLKI,uBAAwB5Y,0DAA7Be;AA8BP,MAAM8X,aAAa,GAAG,EAAtB;AAMA;AACA;;;AACA,IAAIC,YAAY,GAAG,CAAnB;;AACA,SAASC,WAAT,GAAuB;AACrB,MAAIre,GAAG,GAAGoe,YAAV;;AACA,MAAIpe,GAAG,GAAG,EAAN,KAAa,CAAjB,EAAoB;AAClBA,IAAAA,GAAG,IAAI,CAAP;AACD;;AACDoe,EAAAA,YAAY,GAAGpe,GAAG,GAAG,CAArB;AACA,SAAOA,GAAP;AACD;;AAED,SAASse,2BAAT,CAAqCpP,IAArC,EAAoE;AAClE,MAAI,OAAOA,IAAP,KAAgB,QAApB,EAA8B;AAC5B;AACAhJ,IAAAA,gBAAgB,CAACgJ,IAAD,CAAhB;AACD,GAHD,MAGO;AACLhJ,IAAAA,gBAAgB,CAAEgJ,IAAD,CAAY1I,UAAb,CAAhB;;AAEC0I,IAAAA,IAAD,CAAY2D,SAAZ,CAAsB9W,OAAtB,CAA8BuiB,2BAA9B;AACD;AACF;AAQM,SAASC,kBAAT,CACLC,cADK,EAELzO,KAFK,EAGC;AACNyO,EAAAA,cAAc,CAAC3L,SAAf,CAAyBja,IAAzB,CAA8BmX,KAA9B;AACD;AAED,AAAO,SAAS0O,cAAT,CACL9pB,IADK,EAELsM,KAFK,EAGLyd,qBAHK,EAILC,WAJK,EAKLC,sBALK,EAMK;AACV,QAAM5e,GAAG,GAAGqe,WAAW,EAAvB;AACA,QAAM1L,UAAU,GAAGuL,oBAAoB,CAACvpB,IAAD,CAAvC;;AAUA,QAAMsc,aAAa,GAAGsB,MAAM,CAACtR,KAAD,EAAQ0R,UAAU,CAACzB,eAAnB,CAA5B;AAEA/H,EAAAA,qCAAS,CAAC0V,UAAV,CACE7e,GADF;AAEE2S,EAAAA,UAAU,CAACmB,eAFb;AAGE4K,EAAAA,qBAHF;AAIEzN,EAAAA,aAJF;AAAA;AAOA,QAAMzB,SAAS,GAAG,IAAIkD,6BAAJ,CAChB1S,GADgB,EAEhB2S,UAFgB,EAGhBiM,sBAHgB,CAAlB;AAMA7Y,EAAAA,iBAAiB,CAAC6Y,sBAAD,EAAyB5e,GAAzB,CAAjB;AACA0G,EAAAA,gBAAgB,CAAC1G,GAAD,EAAMiB,KAAN,CAAhB,CA5BU;AA+BV;;AACA,SAASuO,SAAT;AACD;AAED,AAAO,SAASsP,kBAAT,CACLC,IADK,EAELL,qBAFK,EAGLC,WAHK,EAILC,sBAJK,EAKS;AAAA,OAEZD,WAAW,CAACK,eAFA;AAAA;AAAA;;AAMd,QAAMhf,GAAG,GAAGqe,WAAW,EAAvB;AAEAlV,EAAAA,qCAAS,CAAC0V,UAAV,CACE7e,GADF;AAEE,cAFF;AAGE0e,EAAAA,qBAHF;AAIE;AAACK,IAAAA,IAAI,EAAEA;AAAP,GAJF;AAAA;AAOAhZ,EAAAA,iBAAiB,CAAC6Y,sBAAD,EAAyB5e,GAAzB,CAAjB;AAEA,SAAOA,GAAP;AACD;AAED,AAAO,SAASif,uBAAT,CACLT,cADK,EAEL7pB,IAFK,EAGLsM,KAHK,EAILyd,qBAJK,EAKLC,WALK,EAMI;AACT;AACA,MAAIH,cAAc,CAAC3L,SAAf,CAAyBzd,MAAzB,KAAoC,CAAxC,EAA2C;AACzC,WAAO,KAAP;AACD,GAJQ;AAOT;;;AACA,QAAM8pB,UAAU,GAAGV,cAAc,CAAC3L,SAAf,CAAyBsM,GAAzB,CAA6BpP,KAAK,IACnD,OAAOA,KAAP,KAAiB,QAAjB,GACIA,KADJ;AAAA,IAEIA,KAAK,CAACvJ,UAHO,CAAnB;;AAMA2C,EAAAA,qCAAS,CAACiW,WAAV,CACEZ,cAAc,CAAChY,UADjB;AAEE0Y,EAAAA,UAFF;AAAA;AAKA,SAAO,KAAP;AACD;AAED,AAAO,SAASG,kBAAT,CACLX,qBADK,EAEQ;AACb,SAAO;AAACM,IAAAA,eAAe,EAAE;AAAlB,GAAP;AACD;AAED,AAAO,SAASM,mBAAT,CACLC,iBADK,EAEL5qB,IAFK,EAGL+pB,qBAHK,EAIQ;AACb,QAAMc,mBAAmB,GAAGD,iBAAiB,CAACP,eAA9C;AACA,QAAMA,eAAe,GACnBrqB,IAAI,KAAK,kBAAT;AACAA,EAAAA,IAAI,KAAK,2BADT;AAEAA,EAAAA,IAAI,KAAK,4BAFT;AAGAA,EAAAA,IAAI,KAAK,SAHT,IAIAA,IAAI,KAAK,gBALX;;AAOA,MAAI6qB,mBAAmB,KAAKR,eAA5B,EAA6C;AAC3C,WAAO;AAACA,MAAAA;AAAD,KAAP;AACD,GAFD,MAEO;AACL,WAAOO,iBAAP;AACD;AACF;AAED,AAAO,SAASE,iBAAT,CAA2BhnB,QAA3B,EAAkD;AACvD,SAAOA,QAAP;AACD;AAED,AAAO,SAASinB,gBAAT,CAA0BC,aAA1B,EAAmE;AACxE;AACA,SAAO,IAAP;AACD;AAED,AAAO,SAASC,aAAT,CACLnnB,QADK,EAEL9D,IAFK,EAGLkrB,QAHK,EAILC,QAJK,EAKLpB,qBALK,EAMLC,WANK,EAOU;AACf,SAAOR,aAAP;AACD;AAED,AAAO,SAAS4B,gBAAT,CAA0BJ,aAA1B,EAA0D;AAEhE;AAED,AAGO,MAAMK,eAAe,GAAGC,UAAxB;AACP,AAAO,MAAMC,aAAa,GAAGC,YAAtB;AACP,AAAO,MAAMC,SAAS,GAAG,CAAC,CAAnB;AAEP,AAAO,SAASC,oBAAT,CAA8B1rB,IAA9B,EAA4CsM,KAA5C,EAAmE;AACxE;AACA;AACA;AACA;AACA;AACA;AACA,SAAO,KAAP;AACD;AAED,AAAO,SAASqf,uBAAT,GAAsC;AAC3C,SAAOzK,oBAAP;AACD;AAGD,AAKO,SAAS0K,WAAT,CACL/B,cADK,EAELzO,KAFK,EAGC;AACN,QAAMyQ,QAAQ,GAAG,OAAOzQ,KAAP,KAAiB,QAAjB,GAA4BA,KAA5B,GAAoCA,KAAK,CAACvJ,UAA3D;AACA,QAAMia,QAAQ,GAAGjC,cAAc,CAAC3L,SAAhC;AACA,QAAM/K,KAAK,GAAG2Y,QAAQ,CAACpc,OAAT,CAAiB0L,KAAjB,CAAd;;AAEA,MAAIjI,KAAK,IAAI,CAAb,EAAgB;AACd2Y,IAAAA,QAAQ,CAACC,MAAT,CAAgB5Y,KAAhB,EAAuB,CAAvB;AACA2Y,IAAAA,QAAQ,CAAC7nB,IAAT,CAAcmX,KAAd;AAEA5G,IAAAA,qCAAS,CAACwX,cAAV,CACEnC,cAAc,CAAChY,UADjB;AAEE,KAACsB,KAAD,CAFF;AAGE,KAAC2Y,QAAQ,CAACrrB,MAAT,GAAkB,CAAnB,CAHF;AAIE,MAJF;AAKE,MALF;AAME,MANF;AAAA;AAQD,GAZD,MAYO;AACLqrB,IAAAA,QAAQ,CAAC7nB,IAAT,CAAcmX,KAAd;AAEA5G,IAAAA,qCAAS,CAACwX,cAAV,CACEnC,cAAc,CAAChY,UADjB;AAEE,MAFF;AAGE,MAHF;AAIE,KAACga,QAAD,CAJF;AAKE,KAACC,QAAQ,CAACrrB,MAAT,GAAkB,CAAnB,CALF;AAME,MANF;AAAA;AAQD;AACF;AAED,AAAO,SAASwrB,sBAAT,CACLpC,cADK,EAELzO,KAFK,EAGC;AACN,QAAMyQ,QAAQ,GAAG,OAAOzQ,KAAP,KAAiB,QAAjB,GAA4BA,KAA5B,GAAoCA,KAAK,CAACvJ,UAA3D;AACA2C,EAAAA,qCAAS,CAACiW,WAAV,CACEZ,cADF;AAEE,GAACgC,QAAD,CAFF;AAAA;AAID;AAED,AAAO,SAASK,gBAAT,CACLC,YADK,EAELC,OAFK,EAGLC,OAHK,EAIC;AACN7X,EAAAA,qCAAS,CAAC0K,UAAV,CACEiN,YADF;AAEE,cAFF;AAGE;AAAC/B,IAAAA,IAAI,EAAEiC;AAAP,GAHF;AAAA;AAKD;AAED,AASO,SAASC,YAAT,CACLxoB,QADK,EAELyoB,iBAFK,EAGLvsB,IAHK,EAILkrB,QAJK,EAKLC,QALK,EAMLlB,sBANK,EAOC;AACN,QAAMjM,UAAU,GAAGla,QAAQ,CAACka,UAA5B;AAEAjM,EAAAA,gBAAgB,CAACjO,QAAQ,CAAC+N,UAAV,EAAsBsZ,QAAtB,CAAhB;AAEA,QAAM7O,aAAa,GAAGK,IAAI,CAACuO,QAAD,EAAWC,QAAX,EAAqBnN,UAAU,CAACzB,eAAhC,CAA1B,CALM;AAQN;AACA;;AACA,MAAID,aAAa,IAAI,IAArB,EAA2B;AACzB9H,IAAAA,qCAAS,CAAC0K,UAAV,CACEpb,QAAQ,CAAC+N,UADX;AAEEmM,IAAAA,UAAU,CAACmB,eAFb;AAGE7C,IAAAA,aAHF;AAAA;AAKD;AACF;AAED,AAAO,SAASkQ,YAAT,CACL3C,cADK,EAELzO,KAFK,EAGLqR,WAHK,EAIC;AACN,QAAMX,QAAQ,GAAIjC,cAAD,CAAsB3L,SAAvC;AACA,QAAM/K,KAAK,GAAG2Y,QAAQ,CAACpc,OAAT,CAAiB0L,KAAjB,CAAd,CAFM;;AAKN,MAAIjI,KAAK,IAAI,CAAb,EAAgB;AACd2Y,IAAAA,QAAQ,CAACC,MAAT,CAAgB5Y,KAAhB,EAAuB,CAAvB;AACA,UAAMuZ,gBAAgB,GAAGZ,QAAQ,CAACpc,OAAT,CAAiB+c,WAAjB,CAAzB;AACAX,IAAAA,QAAQ,CAACC,MAAT,CAAgBW,gBAAhB,EAAkC,CAAlC,EAAqCtR,KAArC;AAEA5G,IAAAA,qCAAS,CAACwX,cAAV,CACGnC,cAAD,CAAsBhY,UADxB;AAEE,KAACsB,KAAD,CAFF;AAGE,KAACuZ,gBAAD,CAHF;AAIE,MAJF;AAKE,MALF;AAME,MANF;AAAA;AAQD,GAbD,MAaO;AACL,UAAMA,gBAAgB,GAAGZ,QAAQ,CAACpc,OAAT,CAAiB+c,WAAjB,CAAzB;AACAX,IAAAA,QAAQ,CAACC,MAAT,CAAgBW,gBAAhB,EAAkC,CAAlC,EAAqCtR,KAArC;AAEA,UAAMyQ,QAAQ,GAAG,OAAOzQ,KAAP,KAAiB,QAAjB,GAA4BA,KAA5B,GAAoCA,KAAK,CAACvJ,UAA3D;AAEA2C,IAAAA,qCAAS,CAACwX,cAAV,CACGnC,cAAD,CAAsBhY,UADxB;AAEE,MAFF;AAGE,MAHF;AAIE,KAACga,QAAD,CAJF;AAKE,KAACa,gBAAD,CALF;AAME,MANF;AAAA;AAQD;AACF;AAED,AAAO,SAASC,uBAAT,CACL9C,cADK,EAELzO,KAFK,EAGLqR,WAHK,EAIC;AACN;AACA;AACA;AACA;AAJM,QAMJ,OAAO5C,cAAP,KAA0B,QANtB;AAAA;AAAA;AASP;AAED,AAAO,SAAS+C,WAAT,CACL/C,cADK,EAELzO,KAFK,EAGC;AACNuO,EAAAA,2BAA2B,CAACvO,KAAD,CAA3B;AACA,QAAM0Q,QAAQ,GAAGjC,cAAc,CAAC3L,SAAhC;AACA,QAAM/K,KAAK,GAAG2Y,QAAQ,CAACpc,OAAT,CAAiB0L,KAAjB,CAAd;AAEA0Q,EAAAA,QAAQ,CAACC,MAAT,CAAgB5Y,KAAhB,EAAuB,CAAvB;AAEAqB,EAAAA,qCAAS,CAACwX,cAAV,CACEnC,cAAc,CAAChY,UADjB;AAEE,IAFF;AAGE,IAHF;AAIE,IAJF;AAKE,IALF;AAME,GAACsB,KAAD,CANF;AAAA;AAQD;AAED,AAAO,SAAS0Z,wBAAT,CACLhD,cADK,EAELzO,KAFK,EAGC;AACNuO,EAAAA,2BAA2B,CAACvO,KAAD,CAA3B;AACA5G,EAAAA,qCAAS,CAACwX,cAAV,CACEnC,cADF;AAEE,IAFF;AAGE,IAHF;AAIE,IAJF;AAKE,IALF;AAME,GAAC,CAAD,CANF;AAAA;AAQD;AAED,AAAO,SAASiD,gBAAT,CAA0BhpB,QAA1B,EAAoD;AAE1D;AAED,AAAO,SAASipB,YAAT,CAAsBjpB,QAAtB,EAAgD;AACrD,QAAMka,UAAU,GAAGla,QAAQ,CAACka,UAA5B;AACA,QAAM1B,aAAa,GAAGsB,MAAM,CAC1B;AAACoP,IAAAA,KAAK,EAAE;AAACC,MAAAA,OAAO,EAAE;AAAV;AAAR,GAD0B,EAE1BjP,UAAU,CAACzB,eAFe,CAA5B;AAIA/H,EAAAA,qCAAS,CAAC0K,UAAV,CACEpb,QAAQ,CAAC+N,UADX,EAEEmM,UAAU,CAACmB,eAFb,EAGE7C,aAHF;AAKD;AAED,AAAO,SAAS4Q,gBAAT,CAA0Bf,YAA1B,EAA4D;AACjE,QAAM,IAAIgB,KAAJ,CAAU,sBAAV,CAAN;AACD;AAED,AAAO,SAASC,cAAT,CAAwBtpB,QAAxB,EAA4CwI,KAA5C,EAAgE;AACrE,QAAM0R,UAAU,GAAGla,QAAQ,CAACka,UAA5B;AACA,QAAM1B,aAAa,GAAGK,IAAI,mBACpBrQ,KADoB;AACb0gB,IAAAA,KAAK,EAAE,CAAC1gB,KAAK,CAAC0gB,KAAP,EAAc;AAACC,MAAAA,OAAO,EAAE;AAAV,KAAd;AADM,MAExB3gB,KAFwB,EAGxB0R,UAAU,CAACzB,eAHa,CAA1B;AAKA/H,EAAAA,qCAAS,CAAC0K,UAAV,CACEpb,QAAQ,CAAC+N,UADX,EAEEmM,UAAU,CAACmB,eAFb,EAGE7C,aAHF;AAKD;AAED,AAAO,SAAS+Q,cAAT,CAAwBC,SAAxB,EAAoD;AAEzD;AACD;AAED,AAAO,SAASC,kBAAT,CACLpB,YADK,EAEL/B,IAFK,EAGC;AACN,QAAM,IAAI+C,KAAJ,CAAU,sBAAV,CAAN;AACD;AAED,AAcO,SAASK,YAAT,GAAsC;AAC3C,QAAM,IAAIL,KAAJ,CAAU,qBAAV,CAAN;AACD;AAED,AAYO,SAASM,kBAAT,CAA4BC,cAA5B,EAA4D;AAElE;;MCxfMC,yBAA0B3Y,qBAA1B2Y;AAEP,AACO,SAASC,6BAAT,CACLrwB,IADK,EAELswB,MAFK,EAGLC,OAHK,EAIG;AACR,EAYO;AACL,QAAIC,SAAS,GAAG,IAAhB;;AAIA,WAAOC,sBAAsB,CAACzwB,IAAD,EAAOswB,MAAP,EAAeE,SAAf,CAA7B;AACD;AACF;AAED;AAoJA,SAASC,sBAAT,CACEzwB,IADF,EAEEswB,MAFF,EAGEE,SAHF,EAIE;AACA,MAAIE,UAAU,GAAG,EAAjB;;AACA,EAgBO,IAAIF,SAAJ,EAAe;AACpBE,IAAAA,UAAU,GAAG,kBAAkBF,SAAlB,GAA8B,GAA3C;AACD;;AACD,SAAO,eAAexwB,IAAI,IAAI,SAAvB,IAAoC0wB,UAA3C;AACD;;AAED,AAAO,SAASC,2BAAT,CACLC,IADK,EAELN,MAFK,EAGLC,OAHK,EAIG;AACR,EAEO;AACL,WAAOM,8BAA8B,CAACD,IAAD,EAAON,MAAP,AAAA,CAArC;AACD;AACF;AAED,AAAO,SAASO,8BAAT,CACLniB,EADK,EAEL4hB,MAFK,EAGLC,OAHK,EAIG;AACR,EAEO;AACL,QAAI,CAAC7hB,EAAL,EAAS;AACP,aAAO,EAAP;AACD;;AACD,UAAM1O,IAAI,GAAG0O,EAAE,CAACgL,WAAH,IAAkBhL,EAAE,CAAC1O,IAArB,IAA6B,IAA1C;AACA,QAAIwwB,SAAS,GAAG,IAAhB;;AAIA,WAAOC,sBAAsB,CAACzwB,IAAD,EAAOswB,MAAP,EAAeE,SAAf,CAA7B;AACD;AACF;;AC/PD,MAAMtrB,cAAc,GAAGI,MAAM,CAAC3E,SAAP,CAAiBuE,cAAxC;;ACOA,MAAM4rB,sBAAsB,GAAGrZ,oBAAoB,CAACqZ,sBAApD;;ACHA,MAAMC,UAAsB,GAAG,EAA/B;AAEA;AAMA,IAAInb,KAAK,GAAG,CAAC,CAAb;;AAEA,SAASob,YAAT,CAAyBC,YAAzB,EAA0D;AACxD,SAAO;AACLhnB,IAAAA,OAAO,EAAEgnB;AADJ,GAAP;AAGD;;AAMD,SAASzqB,GAAT,CAAgB0qB,MAAhB,EAAwCxW,KAAxC,EAA4D;AAC1D,MAAI9E,KAAK,GAAG,CAAZ,EAAe;AACb;AAGA;AACD;;AAQDsb,EAAAA,MAAM,CAACjnB,OAAP,GAAiB8mB,UAAU,CAACnb,KAAD,CAA3B;AAEAmb,EAAAA,UAAU,CAACnb,KAAD,CAAV,GAAoB,IAApB;;AAMAA,EAAAA,KAAK;AACN;;AAED,SAASlP,IAAT,CAAiBwqB,MAAjB,EAAyC1Z,KAAzC,EAAmDkD,KAAnD,EAAuE;AACrE9E,EAAAA,KAAK;AAELmb,EAAAA,UAAU,CAACnb,KAAD,CAAV,GAAoBsb,MAAM,CAACjnB,OAA3B;;AAMAinB,EAAAA,MAAM,CAACjnB,OAAP,GAAiBuN,KAAjB;AACD;;ACzCM,MAAM2Z,kBAAkB,GAAG,EAA3B;;;AAMP,MAAMC,kBAAuC,GAAGJ,YAAY,CAC1DG,kBAD0D,CAA5D;;AAIA,MAAME,yBAA+C,GAAGL,YAAY,CAAC,KAAD,CAApE;AAEA;AACA;;AACA,IAAIM,eAAuB,GAAGH,kBAA9B;;AAEA,SAASI,kBAAT,CACEC,cADF,EAEEC,SAFF,EAGEC,2BAHF,EAIU;AACR,EAEO;AACL,QAAIA,2BAA2B,IAAIC,iBAAiB,CAACF,SAAD,CAApD,EAAiE;AAC/D;AACA;AACA;AACA;AACA,aAAOH,eAAP;AACD;;AACD,WAAOF,kBAAkB,CAACnnB,OAA1B;AACD;AACF;;AAED,SAAS2nB,YAAT,CACEJ,cADF,EAEEK,eAFF,EAGEC,aAHF,EAIQ;AACN,EAEO;AACL,UAAMvrB,QAAQ,GAAGirB,cAAc,CAAC1iB,SAAhC;AACAvI,IAAAA,QAAQ,CAACwrB,2CAAT,GAAuDF,eAAvD;AACAtrB,IAAAA,QAAQ,CAACyrB,yCAAT,GAAqDF,aAArD;AACD;AACF;;AAED,SAASG,gBAAT,CACET,cADF,EAEEK,eAFF,EAGU;AACR,EAEO;AACL,UAAMpvB,IAAI,GAAG+uB,cAAc,CAAC/uB,IAA5B;AACA,UAAMyvB,YAAY,GAAGzvB,IAAI,CAACyvB,YAA1B;;AACA,QAAI,CAACA,YAAL,EAAmB;AACjB,aAAOf,kBAAP;AACD,KALI;AAQL;AACA;;;AACA,UAAM5qB,QAAQ,GAAGirB,cAAc,CAAC1iB,SAAhC;;AACA,QACEvI,QAAQ,IACRA,QAAQ,CAACwrB,2CAAT,KAAyDF,eAF3D,EAGE;AACA,aAAOtrB,QAAQ,CAACyrB,yCAAhB;AACD;;AAED,UAAM9xB,OAAO,GAAG,EAAhB;;AACA,SAAK,MAAMoX,GAAX,IAAkB4a,YAAlB,EAAgC;AAC9BhyB,MAAAA,OAAO,CAACoX,GAAD,CAAP,GAAeua,eAAe,CAACva,GAAD,CAA9B;AACD;AAQD;;;AACA,QAAI/Q,QAAJ,EAAc;AACZqrB,MAAAA,YAAY,CAACJ,cAAD,EAAiBK,eAAjB,EAAkC3xB,OAAlC,CAAZ;AACD;;AAED,WAAOA,OAAP;AACD;AACF;;AAED,SAASiyB,iBAAT,GAAsC;AACpC,EAEO;AACL,WAAOd,yBAAyB,CAACpnB,OAAjC;AACD;AACF;;AAED,SAAS0nB,iBAAT,CAA2BlvB,IAA3B,EAAoD;AAClD,EAEO;AACL,UAAM2vB,iBAAiB,GAAG3vB,IAAI,CAAC2vB,iBAA/B;AACA,WAAOA,iBAAiB,KAAK,IAAtB,IAA8BA,iBAAiB,KAAKzvB,SAA3D;AACD;AACF;;AAED,SAAS0vB,UAAT,CAAoB3X,KAApB,EAAwC;AACtC,EAEO;AACLlU,IAAAA,GAAG,CAAC6qB,yBAAD,AAAA,CAAH;AACA7qB,IAAAA,GAAG,CAAC4qB,kBAAD,AAAA,CAAH;AACD;AACF;;AAED,SAASkB,wBAAT,CAAkC5X,KAAlC,EAAsD;AACpD,EAEO;AACLlU,IAAAA,GAAG,CAAC6qB,yBAAD,AAAA,CAAH;AACA7qB,IAAAA,GAAG,CAAC4qB,kBAAD,AAAA,CAAH;AACD;AACF;;AAED,SAASmB,yBAAT,CACE7X,KADF,EAEExa,OAFF,EAGEsyB,SAHF,EAIQ;AACN,EAEO;AAAA,UAEHpB,kBAAkB,CAACnnB,OAAnB,KAA+BknB,kBAF5B;AAAA;AAAA;;AAOLzqB,IAAAA,IAAI,CAAC0qB,kBAAD,EAAqBlxB,OAArB,AAAA,CAAJ;AACAwG,IAAAA,IAAI,CAAC2qB,yBAAD,EAA4BmB,SAA5B,AAAA,CAAJ;AACD;AACF;;AAED,SAASC,mBAAT,CACE/X,KADF,EAEEjY,IAFF,EAGEiwB,aAHF,EAIU;AACR,EAEO;AACL,UAAMnsB,QAAQ,GAAGmU,KAAK,CAAC5L,SAAvB;AACA,UAAMsjB,iBAAiB,GAAG3vB,IAAI,CAAC2vB,iBAA/B,CAFK;AAKL;;AACA,QAAI,OAAO7rB,QAAQ,CAACosB,eAAhB,KAAoC,UAAxC,EAAoD;AAClD;AAcA,aAAOD,aAAP;AACD;;AAED,UAAME,YAAY,GAAGrsB,QAAQ,CAACosB,eAAT,EAArB;;AACA,SAAK,MAAME,UAAX,IAAyBD,YAAzB,EAAuC;AAAA,YAEnCC,UAAU,IAAIT,iBAFqB;AAAA,qBAInC3X,yBAAyB,CAACC,KAAD,CAAzB,IAAoC,SAJD,mCAKnCmY,UALmC;AAAA;AAOtC;;AAMD,6BAAWH,aAAX,EAA6BE,YAA7B;AACD;AACF;;AAED,SAASE,mBAAT,CAA6BtB,cAA7B,EAA6D;AAC3D,EAEO;AACL,UAAMjrB,QAAQ,GAAGirB,cAAc,CAAC1iB,SAAhC,CADK;AAGL;AACA;;AACA,UAAMikB,0BAA0B,GAC7BxsB,QAAQ,IAAIA,QAAQ,CAACysB,yCAAtB,IACA7B,kBAFF,CALK;AAUL;;AACAG,IAAAA,eAAe,GAAGF,kBAAkB,CAACnnB,OAArC;AACAvD,IAAAA,IAAI,CAAC0qB,kBAAD,EAAqB2B,0BAArB,AAAA,CAAJ;AACArsB,IAAAA,IAAI,CACF2qB,yBADE,EAEFA,yBAAyB,CAACpnB,OAFxB,AAAA,CAAJ;AAMA,WAAO,IAAP;AACD;AACF;;AAED,SAASgpB,yBAAT,CACEzB,cADF,EAEE/uB,IAFF,EAGE+vB,SAHF,EAIQ;AACN,EAEO;AACL,UAAMjsB,QAAQ,GAAGirB,cAAc,CAAC1iB,SAAhC;;AADK,SAGHvI,QAHG;AAAA;AAAA;;AAQL,QAAIisB,SAAJ,EAAe;AACb;AACA;AACA;AACA,YAAMU,aAAa,GAAGT,mBAAmB,CACvCjB,cADuC,EAEvC/uB,IAFuC,EAGvC6uB,eAHuC,CAAzC;AAKA/qB,MAAAA,QAAQ,CAACysB,yCAAT,GAAqDE,aAArD,CATa;AAYb;;AACA1sB,MAAAA,GAAG,CAAC6qB,yBAAD,AAAA,CAAH;AACA7qB,MAAAA,GAAG,CAAC4qB,kBAAD,AAAA,CAAH,CAda;;AAgBb1qB,MAAAA,IAAI,CAAC0qB,kBAAD,EAAqB8B,aAArB,AAAA,CAAJ;AACAxsB,MAAAA,IAAI,CAAC2qB,yBAAD,EAA4BmB,SAA5B,AAAA,CAAJ;AACD,KAlBD,MAkBO;AACLhsB,MAAAA,GAAG,CAAC6qB,yBAAD,AAAA,CAAH;AACA3qB,MAAAA,IAAI,CAAC2qB,yBAAD,EAA4BmB,SAA5B,AAAA,CAAJ;AACD;AACF;AACF;;AAED,SAASW,0BAAT,CAAoCzY,KAApC,EAA0D;AACxD,EAEO;AACL;AACA;AAFK,UAIH0C,cAAc,CAAC1C,KAAD,CAAd,IAAyBA,KAAK,CAAC5M,GAAN,KAAcpD,cAJpC;AAAA;AAAA;;AASL,QAAIsS,IAAI,GAAGtC,KAAX;;AACA,OAAG;AACD,cAAQsC,IAAI,CAAClP,GAAb;AACE,aAAKlD,QAAL;AACE,iBAAOoS,IAAI,CAAClO,SAAL,CAAe5O,OAAtB;;AACF,aAAKwK,cAAL;AAAqB;AACnB,kBAAM+mB,SAAS,GAAGzU,IAAI,CAACva,IAAvB;;AACA,gBAAIkvB,iBAAiB,CAACF,SAAD,CAArB,EAAkC;AAChC,qBAAOzU,IAAI,CAAClO,SAAL,CAAekkB,yCAAtB;AACD;;AACD;AACD;AATH;;AAWAhW,MAAAA,IAAI,GAAGA,IAAI,CAACnP,MAAZ;AACD,KAbD,QAaSmP,IAAI,KAAK,IAblB;;AAVK;AAAA;AAAA;AA6BN;AACF;;ACvTM,MAAMoW,UAAU,GAAG,CAAnB;AACP,AAAO,MAAMC,cAAc,GAAG,CAAvB;;ACMP,IAAIC,SAA0C,GAAG,IAAjD;AACA,IAAIC,2BAAoC,GAAG,KAA3C;AACA,IAAIC,mBAA4B,GAAG,KAAnC;AAEA,AAAO,SAASC,oBAAT,CAA8B/pB,QAA9B,EAA2D;AAChE;AACA;AACA,MAAI4pB,SAAS,KAAK,IAAlB,EAAwB;AACtBA,IAAAA,SAAS,GAAG,CAAC5pB,QAAD,CAAZ;AACD,GAFD,MAEO;AACL;AACA;AACA4pB,IAAAA,SAAS,CAAC5sB,IAAV,CAAegD,QAAf;AACD;AACF;AAED,AAAO,SAASgqB,0BAAT,CAAoChqB,QAApC,EAAiE;AACtE6pB,EAAAA,2BAA2B,GAAG,IAA9B;AACAE,EAAAA,oBAAoB,CAAC/pB,QAAD,CAApB;AACD;AAED,AAAO,SAASiqB,kCAAT,GAA8C;AACnD;AACA;AACA;AACA;AACA;AACA,MAAIJ,2BAAJ,EAAiC;AAC/BK,IAAAA,kBAAkB;AACnB;AACF;AAED,AAAO,SAASA,kBAAT,GAA8B;AACnC,MAAI,CAACJ,mBAAD,IAAwBF,SAAS,KAAK,IAA1C,EAAgD;AAC9C;AACAE,IAAAA,mBAAmB,GAAG,IAAtB;AACA,QAAIvwB,CAAC,GAAG,CAAR;AACA,UAAM4wB,sBAAsB,GAAGxI,wBAAwB,EAAvD;;AACA,QAAI;AACF,YAAMyI,MAAM,GAAG,IAAf;AACA,YAAMC,KAAK,GAAGT,SAAd,CAFE;AAIF;;AACAhI,MAAAA,wBAAwB,CAAC/H,qBAAD,CAAxB;;AACA,aAAOtgB,CAAC,GAAG8wB,KAAK,CAAC7wB,MAAjB,EAAyBD,CAAC,EAA1B,EAA8B;AAC5B,YAAIyG,QAAQ,GAAGqqB,KAAK,CAAC9wB,CAAD,CAApB;;AACA,WAAG;AACDyG,UAAAA,QAAQ,GAAGA,QAAQ,CAACoqB,MAAD,CAAnB;AACD,SAFD,QAESpqB,QAAQ,KAAK,IAFtB;AAGD;;AACD4pB,MAAAA,SAAS,GAAG,IAAZ;AACAC,MAAAA,2BAA2B,GAAG,KAA9B;AACD,KAdD,CAcE,OAAOvyB,KAAP,EAAc;AACd;AACA,UAAIsyB,SAAS,KAAK,IAAlB,EAAwB;AACtBA,QAAAA,SAAS,GAAGA,SAAS,CAAC1yB,KAAV,CAAgBqC,CAAC,GAAG,CAApB,CAAZ;AACD,OAJa;;;AAMd4e,MAAAA,gBAAgB,CAACK,iBAAD,EAAoB0R,kBAApB,CAAhB;AACA,YAAM5yB,KAAN;AACD,KAtBD,SAsBU;AACRsqB,MAAAA,wBAAwB,CAACuI,sBAAD,CAAxB;AACAL,MAAAA,mBAAmB,GAAG,KAAtB;AACD;AACF;;AACD,SAAO,IAAP;AACD;;AC7ED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAe,QAAf;;MCJOQ,0BAA2Bvc,qBAA3Buc;AAEP,AAAO,MAAMC,YAAY,GAAG,CAArB;AAEP,AAAO,SAASC,wBAAT,GAA4C;AACjD,SAAOF,uBAAuB,CAACG,UAA/B;AACD;;ACRD;;;;AAIA,SAASC,EAAT,CAAY5Z,CAAZ,EAAoB6Z,CAApB,EAA4B;AAC1B,SACG7Z,CAAC,KAAK6Z,CAAN,KAAY7Z,CAAC,KAAK,CAAN,IAAW,IAAIA,CAAJ,KAAU,IAAI6Z,CAArC,CAAD,IAA8C7Z,CAAC,KAAKA,CAAN,IAAW6Z,CAAC,KAAKA,CADjE;AAAA;AAGD;;AAED,MAAMC,QAAqC,GACzC,OAAOhvB,MAAM,CAAC8uB,EAAd,KAAqB,UAArB,GAAkC9uB,MAAM,CAAC8uB,EAAzC,GAA8CA,EADhD;;ACPA;;;;;;AAKA,SAASG,YAAT,CAAsBC,IAAtB,EAAmCC,IAAnC,EAAyD;AACvD,MAAIL,QAAE,CAACI,IAAD,EAAOC,IAAP,CAAN,EAAoB;AAClB,WAAO,IAAP;AACD;;AAED,MACE,OAAOD,IAAP,KAAgB,QAAhB,IACAA,IAAI,KAAK,IADT,IAEA,OAAOC,IAAP,KAAgB,QAFhB,IAGAA,IAAI,KAAK,IAJX,EAKE;AACA,WAAO,KAAP;AACD;;AAED,QAAMC,KAAK,GAAGpvB,MAAM,CAACqvB,IAAP,CAAYH,IAAZ,CAAd;AACA,QAAMI,KAAK,GAAGtvB,MAAM,CAACqvB,IAAP,CAAYF,IAAZ,CAAd;;AAEA,MAAIC,KAAK,CAACxxB,MAAN,KAAiB0xB,KAAK,CAAC1xB,MAA3B,EAAmC;AACjC,WAAO,KAAP;AACD,GAnBsD;;;AAsBvD,OAAK,IAAID,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGyxB,KAAK,CAACxxB,MAA1B,EAAkCD,CAAC,EAAnC,EAAuC;AACrC,QACE,CAACiC,cAAc,CAACrE,IAAf,CAAoB4zB,IAApB,EAA0BC,KAAK,CAACzxB,CAAD,CAA/B,CAAD,IACA,CAACmxB,QAAE,CAACI,IAAI,CAACE,KAAK,CAACzxB,CAAD,CAAN,CAAL,EAAiBwxB,IAAI,CAACC,KAAK,CAACzxB,CAAD,CAAN,CAArB,CAFL,EAGE;AACA,aAAO,KAAP;AACD;AACF;;AAED,SAAO,IAAP;AACD;;ACrBD,SAAS4xB,aAAT,CAAuBna,KAAvB,EAA6C;AAC3C,AAKA,QAAM4V,MAAM,GAAGwE,CAA+B,IAA9C;;AACA,UAAQpa,KAAK,CAAC5M,GAAd;AACE,SAAKhD,aAAL;AACE,aAAOulB,6BAA6B,CAAC3V,KAAK,CAACjY,IAAP,EAAa6tB,MAAb,AAAA,CAApC;;AACF,SAAK7kB,aAAL;AACE,aAAO4kB,6BAA6B,CAAC,MAAD,EAASC,MAAT,AAAA,CAApC;;AACF,SAAKhlB,iBAAL;AACE,aAAO+kB,6BAA6B,CAAC,UAAD,EAAaC,MAAb,AAAA,CAApC;;AACF,SAAK1kB,qBAAL;AACE,aAAOykB,6BAA6B,CAAC,cAAD,EAAiBC,MAAjB,AAAA,CAApC;;AACF,SAAK7lB,iBAAL;AACA,SAAKE,sBAAL;AACA,SAAKa,mBAAL;AACE,aAAOqlB,8BAA8B,CAACnW,KAAK,CAACjY,IAAP,EAAa6tB,MAAb,AAAA,CAArC;;AACF,SAAKllB,UAAL;AACE,aAAOylB,8BAA8B,CAACnW,KAAK,CAACjY,IAAN,CAAWwX,MAAZ,EAAoBqW,MAApB,AAAA,CAArC;;AACF,SAAK5lB,cAAL;AACE,aAAOimB,2BAA2B,CAACjW,KAAK,CAACjY,IAAP,EAAa6tB,MAAb,AAAA,CAAlC;;AACF;AACE,aAAO,EAAP;AAlBJ;AAoBD;;AAED,AAAO,SAASyE,2BAAT,CAAqCvD,cAArC,EAAoE;AACzE,MAAI;AACF,QAAIwD,IAAI,GAAG,EAAX;AACA,QAAIhY,IAAI,GAAGwU,cAAX;;AACA,OAAG;AACDwD,MAAAA,IAAI,IAAIH,aAAa,CAAC7X,IAAD,CAArB;AACAA,MAAAA,IAAI,GAAGA,IAAI,CAACnP,MAAZ;AACD,KAHD,QAGSmP,IAHT;;AAIA,WAAOgY,IAAP;AACD,GARD,CAQE,OAAOxa,CAAP,EAAU;AACV,WAAO,+BAA+BA,CAAC,CAACya,OAAjC,GAA2C,IAA3C,GAAkDza,CAAC,CAAC0a,KAA3D;AACD;AACF;;ACtDD,MAAMpE,wBAAsB,GAAGrZ,oBAAoB,CAACqZ,sBAApD;AAEA;AA4BA,AAAO,SAASqE,iBAAT,GAA6B;AAClC,AAKD;;AC1CM,SAASC,mBAAT,CAA6B3D,SAA7B,EAA6C4D,SAA7C,EAAwE;AAC7E,MAAI5D,SAAS,IAAIA,SAAS,CAAC6D,YAA3B,EAAyC;AACvC;AACA,UAAMvmB,KAAK,GAAGzJ,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkB8vB,SAAlB,CAAd;AACA,UAAMC,YAAY,GAAG7D,SAAS,CAAC6D,YAA/B;;AACA,SAAK,MAAMrwB,QAAX,IAAuBqwB,YAAvB,EAAqC;AACnC,UAAIvmB,KAAK,CAAC9J,QAAD,CAAL,KAAoBtC,SAAxB,EAAmC;AACjCoM,QAAAA,KAAK,CAAC9J,QAAD,CAAL,GAAkBqwB,YAAY,CAACrwB,QAAD,CAA9B;AACD;AACF;;AACD,WAAO8J,KAAP;AACD;;AACD,SAAOsmB,SAAP;AACD;;AC2BD,MAAME,WAA+B,GAAGvE,YAAY,CAAC,IAAD,CAApD;AAEA;AAMA,IAAIwE,uBAAqC,GAAG,IAA5C;AACA,IAAIC,qBAAsD,GAAG,IAA7D;AACA,IAAIC,wBAAkD,GAAG,IAAzD;AAEA,AAEO,SAASC,wBAAT,GAA0C;AAC/C;AACA;AACAH,EAAAA,uBAAuB,GAAG,IAA1B;AACAC,EAAAA,qBAAqB,GAAG,IAAxB;AACAC,EAAAA,wBAAwB,GAAG,IAA3B;AAID;AAED,AAYO,SAASE,YAAT,CACLC,aADK,EAEL31B,OAFK,EAGLof,SAHK,EAIC;AACN,EAAuB;AACrB5Y,IAAAA,IAAI,CAAC6uB,WAAD,EAAcr1B,OAAO,CAAC41B,aAAtB,AAAA,CAAJ;AAEA51B,IAAAA,OAAO,CAAC41B,aAAR,GAAwBxW,SAAxB;AAcD,GAjBD;AAmCD;AAED,AAAO,SAASyW,WAAT,CACL71B,OADK,EAEL21B,aAFK,EAGC;AACN,QAAMG,YAAY,GAAGT,WAAW,CAACtrB,OAAjC;AACAzD,EAAAA,GAAG,CAAC+uB,WAAD,AAAA,CAAH;;AACA,EAAuB;AACrBr1B,IAAAA,OAAO,CAAC41B,aAAR,GAAwBE,YAAxB;AACD,GAFD;AAKD;AAED,AAAO,SAASC,wBAAT,CACLhY,MADK,EAELiY,WAFK,EAGL;AACA;AACA,MAAIlZ,IAAI,GAAGiB,MAAX;;AACA,SAAOjB,IAAI,KAAK,IAAhB,EAAsB;AACpB,UAAMzO,SAAS,GAAGyO,IAAI,CAACzO,SAAvB;;AACA,QAAI,CAACqb,eAAe,CAAC5M,IAAI,CAACmZ,UAAN,EAAkBD,WAAlB,CAApB,EAAoD;AAClDlZ,MAAAA,IAAI,CAACmZ,UAAL,GAAkBrM,UAAU,CAAC9M,IAAI,CAACmZ,UAAN,EAAkBD,WAAlB,CAA5B;;AACA,UAAI3nB,SAAS,KAAK,IAAlB,EAAwB;AACtBA,QAAAA,SAAS,CAAC4nB,UAAV,GAAuBrM,UAAU,CAACvb,SAAS,CAAC4nB,UAAX,EAAuBD,WAAvB,CAAjC;AACD;AACF,KALD,MAKO,IACL3nB,SAAS,KAAK,IAAd,IACA,CAACqb,eAAe,CAACrb,SAAS,CAAC4nB,UAAX,EAAuBD,WAAvB,CAFX,EAGL;AACA3nB,MAAAA,SAAS,CAAC4nB,UAAV,GAAuBrM,UAAU,CAACvb,SAAS,CAAC4nB,UAAX,EAAuBD,WAAvB,CAAjC;AACD,KALM,MAKA;AACL;AACA;AACA;AACD;;AACDlZ,IAAAA,IAAI,GAAGA,IAAI,CAACnP,MAAZ;AACD;AACF;AAED,AAAO,SAASuoB,sBAAT,CACL5E,cADK,EAELtxB,OAFK,EAGLg2B,WAHK,EAIC;AACN,EAWO;AACLG,IAAAA,4BAA4B,CAAC7E,cAAD,EAAiBtxB,OAAjB,EAA0Bg2B,WAA1B,CAA5B;AACD;AACF;;AAED,SAASG,4BAAT,CACE7E,cADF,EAEEtxB,OAFF,EAGEg2B,WAHF,EAIQ;AACN;AAIA,MAAIxb,KAAK,GAAG8W,cAAc,CAAC3T,KAA3B;;AACA,MAAInD,KAAK,KAAK,IAAd,EAAoB;AAClB;AACAA,IAAAA,KAAK,CAAC7M,MAAN,GAAe2jB,cAAf;AACD;;AACD,SAAO9W,KAAK,KAAK,IAAjB,EAAuB;AACrB,QAAI4b,SAAJ,CADqB;;AAIrB,UAAMC,IAAI,GAAG7b,KAAK,CAAC3N,YAAnB;;AACA,QAAIwpB,IAAI,KAAK,IAAb,EAAmB;AACjBD,MAAAA,SAAS,GAAG5b,KAAK,CAACmD,KAAlB;AAEA,UAAI2Y,UAAU,GAAGD,IAAI,CAACE,YAAtB;;AACA,aAAOD,UAAU,KAAK,IAAtB,EAA4B;AAC1B;AACA,YAAIA,UAAU,CAACt2B,OAAX,KAAuBA,OAA3B,EAAoC;AAClC;AACA,cAAIwa,KAAK,CAAC5M,GAAN,KAAcpD,cAAlB,EAAkC;AAChC;AACA,kBAAMyd,IAAI,GAAGqB,iBAAiB,CAAC0M,WAAD,CAA9B;AACA,kBAAMQ,MAAM,GAAGC,YAAY,CAAC7P,WAAD,EAAcqB,IAAd,CAA3B;AACAuO,YAAAA,MAAM,CAAC5oB,GAAP,GAAa8oB,WAAb,CAJgC;AAMhC;AACA;AACA;AAEA;;AACA,kBAAMC,WAAW,GAAGnc,KAAK,CAACmc,WAA1B;;AACA,gBAAIA,WAAW,KAAK,IAApB,EAA0B,CAA1B,MAEO;AACL,oBAAMC,WAA6B,GAAID,WAAD,CAAmBE,MAAzD;AACA,oBAAMC,OAAO,GAAGF,WAAW,CAACE,OAA5B;;AACA,kBAAIA,OAAO,KAAK,IAAhB,EAAsB;AACpB;AACAN,gBAAAA,MAAM,CAACxsB,IAAP,GAAcwsB,MAAd;AACD,eAHD,MAGO;AACLA,gBAAAA,MAAM,CAACxsB,IAAP,GAAc8sB,OAAO,CAAC9sB,IAAtB;AACA8sB,gBAAAA,OAAO,CAAC9sB,IAAR,GAAewsB,MAAf;AACD;;AACDI,cAAAA,WAAW,CAACE,OAAZ,GAAsBN,MAAtB;AACD;AACF;;AAEDhc,UAAAA,KAAK,CAACwM,KAAN,GAAc4C,UAAU,CAACpP,KAAK,CAACwM,KAAP,EAAcgP,WAAd,CAAxB;AACA,gBAAM3nB,SAAS,GAAGmM,KAAK,CAACnM,SAAxB;;AACA,cAAIA,SAAS,KAAK,IAAlB,EAAwB;AACtBA,YAAAA,SAAS,CAAC2Y,KAAV,GAAkB4C,UAAU,CAACvb,SAAS,CAAC2Y,KAAX,EAAkBgP,WAAlB,CAA5B;AACD;;AACDD,UAAAA,wBAAwB,CAACvb,KAAK,CAAC7M,MAAP,EAAeqoB,WAAf,CAAxB,CAnCkC;;AAsClCK,UAAAA,IAAI,CAACrP,KAAL,GAAa4C,UAAU,CAACyM,IAAI,CAACrP,KAAN,EAAagP,WAAb,CAAvB,CAtCkC;AAyClC;;AACA;AACD;;AACDM,QAAAA,UAAU,GAAGA,UAAU,CAACtsB,IAAxB;AACD;AACF,KApDD,MAoDO,IAAIwQ,KAAK,CAAC5M,GAAN,KAAc3C,eAAlB,EAAmC;AACxC;AACAmrB,MAAAA,SAAS,GAAG5b,KAAK,CAACjY,IAAN,KAAe+uB,cAAc,CAAC/uB,IAA9B,GAAqC,IAArC,GAA4CiY,KAAK,CAACmD,KAA9D;AACD,KAHM,MAGA,AAuBA;AACL;AACAyY,MAAAA,SAAS,GAAG5b,KAAK,CAACmD,KAAlB;AACD;;AAED,QAAIyY,SAAS,KAAK,IAAlB,EAAwB;AACtB;AACAA,MAAAA,SAAS,CAACzoB,MAAV,GAAmB6M,KAAnB;AACD,KAHD,MAGO;AACL;AACA4b,MAAAA,SAAS,GAAG5b,KAAZ;;AACA,aAAO4b,SAAS,KAAK,IAArB,EAA2B;AACzB,YAAIA,SAAS,KAAK9E,cAAlB,EAAkC;AAChC;AACA8E,UAAAA,SAAS,GAAG,IAAZ;AACA;AACD;;AACD,cAAMxY,OAAO,GAAGwY,SAAS,CAACxY,OAA1B;;AACA,YAAIA,OAAO,KAAK,IAAhB,EAAsB;AACpB;AACAA,UAAAA,OAAO,CAACjQ,MAAR,GAAiByoB,SAAS,CAACzoB,MAA3B;AACAyoB,UAAAA,SAAS,GAAGxY,OAAZ;AACA;AACD,SAZwB;;;AAczBwY,QAAAA,SAAS,GAAGA,SAAS,CAACzoB,MAAtB;AACD;AACF;;AACD6M,IAAAA,KAAK,GAAG4b,SAAR;AACD;AACF;AAsQM,SAASW,oBAAT,CACLzF,cADK,EAEL0E,WAFK,EAGC;AACNV,EAAAA,uBAAuB,GAAGhE,cAA1B;AACAiE,EAAAA,qBAAqB,GAAG,IAAxB;AACAC,EAAAA,wBAAwB,GAAG,IAA3B;AAEA,QAAM3oB,YAAY,GAAGykB,cAAc,CAACzkB,YAApC;;AACA,MAAIA,YAAY,KAAK,IAArB,EAA2B;AACzB,IAGO;AACL,YAAM0pB,YAAY,GAAG1pB,YAAY,CAAC0pB,YAAlC;;AACA,UAAIA,YAAY,KAAK,IAArB,EAA2B;AACzB,YAAI9M,gBAAgB,CAAC5c,YAAY,CAACma,KAAd,EAAqBgP,WAArB,CAApB,EAAuD;AACrD;AACAgB,UAAAA,gCAAgC;AACjC,SAJwB;;;AAMzBnqB,QAAAA,YAAY,CAAC0pB,YAAb,GAA4B,IAA5B;AACD;AACF;AACF;AACF;AAED,AAAO,SAASU,WAAT,CAAwBj3B,OAAxB,EAAqD;AAC1D;AAaA,QAAMsX,KAAK,GAAG4f,CACVl3B,OAAO,CAAC41B,aADmB,CAA/B;;AAIA,MAAIJ,wBAAwB,KAAKx1B,OAAjC,EAA0C,CAA1C,MAEO;AACL,UAAMm3B,WAAW,GAAG;AAClBn3B,MAAAA,OAAO,EAAIA,OADO;AAElBo3B,MAAAA,aAAa,EAAE9f,KAFG;AAGlBtN,MAAAA,IAAI,EAAE;AAHY,KAApB;;AAMA,QAAIurB,qBAAqB,KAAK,IAA9B,EAAoC;AAAA,YAEhCD,uBAAuB,KAAK,IAFI;AAAA;AAAA;;;AAUlCC,MAAAA,qBAAqB,GAAG4B,WAAxB;AACA7B,MAAAA,uBAAuB,CAACzoB,YAAxB,GAAuC;AACrCma,QAAAA,KAAK,EAAEzC,OAD8B;AAErCgS,QAAAA,YAAY,EAAEY;AAFuB,OAAvC;AAOD,KAlBD,MAkBO;AACL;AACA5B,MAAAA,qBAAqB,GAAGA,qBAAqB,CAACvrB,IAAtB,GAA6BmtB,WAArD;AACD;AACF;;AACD,SAAO7f,KAAP;AACD;;ACpoBD;AACA;AACA;AACA;AACA,IAAI+f,iBAEI,GAAG,IAFX;AAIA,AAAO,SAASC,oBAAT,CACLzD,KADK,EAEL;AACA,MAAIwD,iBAAiB,KAAK,IAA1B,EAAgC;AAC9BA,IAAAA,iBAAiB,GAAG,CAACxD,KAAD,CAApB;AACD,GAFD,MAEO;AACLwD,IAAAA,iBAAiB,CAAC7wB,IAAlB,CAAuBqtB,KAAvB;AACD;AACF;AAED,AAAO,SAAS0D,yBAAT,GAAqC;AAC1C;AACA;AACA;AACA;AACA;AACA,MAAIF,iBAAiB,KAAK,IAA1B,EAAgC;AAC9B,SAAK,IAAIt0B,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGs0B,iBAAiB,CAACr0B,MAAtC,EAA8CD,CAAC,EAA/C,EAAmD;AACjD,YAAM8wB,KAAK,GAAGwD,iBAAiB,CAACt0B,CAAD,CAA/B;AACA,YAAMy0B,qBAAqB,GAAG3D,KAAK,CAAC4D,WAApC;;AACA,UAAID,qBAAqB,KAAK,IAA9B,EAAoC;AAClC3D,QAAAA,KAAK,CAAC4D,WAAN,GAAoB,IAApB;AACA,cAAMC,sBAAsB,GAAGF,qBAAqB,CAACxtB,IAArD;AACA,cAAM2tB,iBAAiB,GAAG9D,KAAK,CAACiD,OAAhC;;AACA,YAAIa,iBAAiB,KAAK,IAA1B,EAAgC;AAC9B,gBAAMC,kBAAkB,GAAGD,iBAAiB,CAAC3tB,IAA7C;AACA2tB,UAAAA,iBAAiB,CAAC3tB,IAAlB,GAA0B0tB,sBAA1B;AACAF,UAAAA,qBAAqB,CAACxtB,IAAtB,GAA8B4tB,kBAA9B;AACD;;AACD/D,QAAAA,KAAK,CAACiD,OAAN,GAAiBU,qBAAjB;AACD;AACF;;AACDH,IAAAA,iBAAiB,GAAG,IAApB;AACD;AACF;;AC7CD;AACA,AAqIO,MAAMQ,WAAW,GAAG,CAApB;AACP,AAAO,MAAMC,YAAY,GAAG,CAArB;AACP,AAAO,MAAMpB,WAAW,GAAG,CAApB;AACP,AAAO,MAAMqB,aAAa,GAAG,CAAtB;AAGP;AACA;;AACA,IAAIC,cAAc,GAAG,KAArB;AAEA;AAWA,AAAO,SAASC,qBAAT,CAAsCzd,KAAtC,EAA0D;AAC/D,QAAMqZ,KAAyB,GAAG;AAChCqE,IAAAA,SAAS,EAAE1d,KAAK,CAAC2d,aADe;AAEhCC,IAAAA,eAAe,EAAE,IAFe;AAGhCC,IAAAA,cAAc,EAAE,IAHgB;AAIhCxB,IAAAA,MAAM,EAAE;AACNC,MAAAA,OAAO,EAAE,IADH;AAENW,MAAAA,WAAW,EAAE,IAFP;AAGNzQ,MAAAA,KAAK,EAAEzC;AAHD,KAJwB;AAShC+T,IAAAA,OAAO,EAAE;AATuB,GAAlC;AAWA9d,EAAAA,KAAK,CAACmc,WAAN,GAAoB9C,KAApB;AACD;AAED,AAAO,SAAS0E,gBAAT,CACLxuB,OADK,EAELunB,cAFK,EAGC;AACN;AACA,QAAMuC,KAAyB,GAAIvC,cAAc,CAACqF,WAAlD;AACA,QAAM6B,YAAgC,GAAIzuB,OAAO,CAAC4sB,WAAlD;;AACA,MAAI9C,KAAK,KAAK2E,YAAd,EAA4B;AAC1B,UAAMC,KAAyB,GAAG;AAChCP,MAAAA,SAAS,EAAEM,YAAY,CAACN,SADQ;AAEhCE,MAAAA,eAAe,EAAEI,YAAY,CAACJ,eAFE;AAGhCC,MAAAA,cAAc,EAAEG,YAAY,CAACH,cAHG;AAIhCxB,MAAAA,MAAM,EAAE2B,YAAY,CAAC3B,MAJW;AAKhCyB,MAAAA,OAAO,EAAEE,YAAY,CAACF;AALU,KAAlC;AAOAhH,IAAAA,cAAc,CAACqF,WAAf,GAA6B8B,KAA7B;AACD;AACF;AAED,AAAO,SAAShC,YAAT,CAAsBpO,SAAtB,EAAyCJ,IAAzC,EAAgE;AACrE,QAAMuO,MAAiB,GAAG;AACxBnO,IAAAA,SADwB;AAExBJ,IAAAA,IAFwB;AAIxBra,IAAAA,GAAG,EAAEiqB,WAJmB;AAKxB3d,IAAAA,OAAO,EAAE,IALe;AAMxB1Q,IAAAA,QAAQ,EAAE,IANc;AAQxBQ,IAAAA,IAAI,EAAE;AARkB,GAA1B;AAUA,SAAOwsB,MAAP;AACD;AAED,AAAO,SAASkC,aAAT,CACLle,KADK,EAELgc,MAFK,EAGLvO,IAHK,EAIL;AACA,QAAM0O,WAAW,GAAGnc,KAAK,CAACmc,WAA1B;;AACA,MAAIA,WAAW,KAAK,IAApB,EAA0B;AACxB;AACA;AACD;;AAED,QAAMC,WAA+B,GAAID,WAAD,CAAmBE,MAA3D;;AAEA,MAAI8B,mBAAmB,CAACne,KAAD,AAAA,CAAvB,EAAsC;AACpC,UAAMid,WAAW,GAAGb,WAAW,CAACa,WAAhC;;AACA,QAAIA,WAAW,KAAK,IAApB,EAA0B;AACxB;AACAjB,MAAAA,MAAM,CAACxsB,IAAP,GAAcwsB,MAAd,CAFwB;AAIxB;;AACAc,MAAAA,oBAAoB,CAACV,WAAD,CAApB;AACD,KAND,MAMO;AACLJ,MAAAA,MAAM,CAACxsB,IAAP,GAAcytB,WAAW,CAACztB,IAA1B;AACAytB,MAAAA,WAAW,CAACztB,IAAZ,GAAmBwsB,MAAnB;AACD;;AACDI,IAAAA,WAAW,CAACa,WAAZ,GAA0BjB,MAA1B;AACD,GAbD,MAaO;AACL,UAAMM,OAAO,GAAGF,WAAW,CAACE,OAA5B;;AACA,QAAIA,OAAO,KAAK,IAAhB,EAAsB;AACpB;AACAN,MAAAA,MAAM,CAACxsB,IAAP,GAAcwsB,MAAd;AACD,KAHD,MAGO;AACLA,MAAAA,MAAM,CAACxsB,IAAP,GAAc8sB,OAAO,CAAC9sB,IAAtB;AACA8sB,MAAAA,OAAO,CAAC9sB,IAAR,GAAewsB,MAAf;AACD;;AACDI,IAAAA,WAAW,CAACE,OAAZ,GAAsBN,MAAtB;AACD;AAgBF;AAED,AAAO,SAASoC,mBAAT,CAA6B5V,IAA7B,EAA8CxI,KAA9C,EAA4DyN,IAA5D,EAAwE;AAC7E,QAAM0O,WAAW,GAAGnc,KAAK,CAACmc,WAA1B;;AACA,MAAIA,WAAW,KAAK,IAApB,EAA0B;AACxB;AACA;AACD;;AAED,QAAMC,WAA+B,GAAID,WAAD,CAAmBE,MAA3D;;AACA,MAAI1N,gBAAgB,CAAClB,IAAD,CAApB,EAA4B;AAC1B,QAAI4Q,UAAU,GAAGjC,WAAW,CAAC5P,KAA7B,CAD0B;AAI1B;AACA;AACA;AACA;;AACA6R,IAAAA,UAAU,GAAG/O,cAAc,CAAC+O,UAAD,EAAa7V,IAAI,CAACoE,YAAlB,CAA3B,CAR0B;;AAW1B,UAAM0R,aAAa,GAAGlP,UAAU,CAACiP,UAAD,EAAa5Q,IAAb,CAAhC;AACA2O,IAAAA,WAAW,CAAC5P,KAAZ,GAAoB8R,aAApB,CAZ0B;AAc1B;AACA;;AACAlO,IAAAA,iBAAiB,CAAC5H,IAAD,EAAO8V,aAAP,CAAjB;AACD;AACF;AAED,AAAO,SAASC,qBAAT,CACLzH,cADK,EAEL0H,cAFK,EAGL;AACA;AACA;AACA;AACA,MAAInF,KAAyB,GAAIvC,cAAc,CAACqF,WAAhD,CAJA;;AAOA,QAAM5sB,OAAO,GAAGunB,cAAc,CAACjjB,SAA/B;;AACA,MAAItE,OAAO,KAAK,IAAhB,EAAsB;AACpB,UAAMyuB,YAAgC,GAAIzuB,OAAO,CAAC4sB,WAAlD;;AACA,QAAI9C,KAAK,KAAK2E,YAAd,EAA4B;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA,UAAIS,QAAQ,GAAG,IAAf;AACA,UAAIC,OAAO,GAAG,IAAd;AACA,YAAMd,eAAe,GAAGvE,KAAK,CAACuE,eAA9B;;AACA,UAAIA,eAAe,KAAK,IAAxB,EAA8B;AAC5B;AACA,YAAI5B,MAAM,GAAG4B,eAAb;;AACA,WAAG;AACD,gBAAMK,KAAoB,GAAG;AAC3BpQ,YAAAA,SAAS,EAAEmO,MAAM,CAACnO,SADS;AAE3BJ,YAAAA,IAAI,EAAEuO,MAAM,CAACvO,IAFc;AAI3Bra,YAAAA,GAAG,EAAE4oB,MAAM,CAAC5oB,GAJe;AAK3BsM,YAAAA,OAAO,EAAEsc,MAAM,CAACtc,OALW;AAM3B1Q,YAAAA,QAAQ,EAAEgtB,MAAM,CAAChtB,QANU;AAQ3BQ,YAAAA,IAAI,EAAE;AARqB,WAA7B;;AAUA,cAAIkvB,OAAO,KAAK,IAAhB,EAAsB;AACpBD,YAAAA,QAAQ,GAAGC,OAAO,GAAGT,KAArB;AACD,WAFD,MAEO;AACLS,YAAAA,OAAO,CAAClvB,IAAR,GAAeyuB,KAAf;AACAS,YAAAA,OAAO,GAAGT,KAAV;AACD;;AACDjC,UAAAA,MAAM,GAAGA,MAAM,CAACxsB,IAAhB;AACD,SAlBD,QAkBSwsB,MAAM,KAAK,IAlBpB,EAH4B;;;AAwB5B,YAAI0C,OAAO,KAAK,IAAhB,EAAsB;AACpBD,UAAAA,QAAQ,GAAGC,OAAO,GAAGF,cAArB;AACD,SAFD,MAEO;AACLE,UAAAA,OAAO,CAAClvB,IAAR,GAAegvB,cAAf;AACAE,UAAAA,OAAO,GAAGF,cAAV;AACD;AACF,OA9BD,MA8BO;AACL;AACAC,QAAAA,QAAQ,GAAGC,OAAO,GAAGF,cAArB;AACD;;AACDnF,MAAAA,KAAK,GAAG;AACNqE,QAAAA,SAAS,EAAEM,YAAY,CAACN,SADlB;AAENE,QAAAA,eAAe,EAAEa,QAFX;AAGNZ,QAAAA,cAAc,EAAEa,OAHV;AAINrC,QAAAA,MAAM,EAAE2B,YAAY,CAAC3B,MAJf;AAKNyB,QAAAA,OAAO,EAAEE,YAAY,CAACF;AALhB,OAAR;AAOAhH,MAAAA,cAAc,CAACqF,WAAf,GAA6B9C,KAA7B;AACA;AACD;AACF,GAhED;;;AAmEA,QAAMwE,cAAc,GAAGxE,KAAK,CAACwE,cAA7B;;AACA,MAAIA,cAAc,KAAK,IAAvB,EAA6B;AAC3BxE,IAAAA,KAAK,CAACuE,eAAN,GAAwBY,cAAxB;AACD,GAFD,MAEO;AACLX,IAAAA,cAAc,CAACruB,IAAf,GAAsBgvB,cAAtB;AACD;;AACDnF,EAAAA,KAAK,CAACwE,cAAN,GAAuBW,cAAvB;AACD;;AAED,SAASG,kBAAT,CACE7H,cADF,EAEEuC,KAFF,EAGE2C,MAHF,EAIE4C,SAJF,EAKEnZ,SALF,EAME5Z,QANF,EAOO;AACL,UAAQmwB,MAAM,CAAC5oB,GAAf;AACE,SAAKkqB,YAAL;AAAmB;AACjB,cAAM5d,OAAO,GAAGsc,MAAM,CAACtc,OAAvB;;AACA,YAAI,OAAOA,OAAP,KAAmB,UAAvB,EAAmC;AACjC;AAIA,gBAAMmf,SAAS,GAAGnf,OAAO,CAACvZ,IAAR,CAAa0F,QAAb,EAAuB+yB,SAAvB,EAAkCnZ,SAAlC,CAAlB;;AAeA,iBAAOoZ,SAAP;AACD,SAvBgB;;;AAyBjB,eAAOnf,OAAP;AACD;;AACD,SAAK6d,aAAL;AAAoB;AAClBzG,QAAAA,cAAc,CAACrU,KAAf,GACGqU,cAAc,CAACrU,KAAf,GAAuB,CAAChB,aAAzB,GAA0CV,UAD5C;AAED;AACD;;AACA,SAAKsc,WAAL;AAAkB;AAChB,cAAM3d,OAAO,GAAGsc,MAAM,CAACtc,OAAvB;AACA,YAAIof,YAAJ;;AACA,YAAI,OAAOpf,OAAP,KAAmB,UAAvB,EAAmC;AACjC;AAIAof,UAAAA,YAAY,GAAGpf,OAAO,CAACvZ,IAAR,CAAa0F,QAAb,EAAuB+yB,SAAvB,EAAkCnZ,SAAlC,CAAf;AAeD,SApBD,MAoBO;AACL;AACAqZ,UAAAA,YAAY,GAAGpf,OAAf;AACD;;AACD,YAAIof,YAAY,KAAK,IAAjB,IAAyBA,YAAY,KAAK72B,SAA9C,EAAyD;AACvD;AACA,iBAAO22B,SAAP;AACD,SA9Be;;;AAgChB,eAAOh0B,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkB+zB,SAAlB,EAA6BE,YAA7B,CAAP;AACD;;AACD,SAAK5C,WAAL;AAAkB;AAChBsB,QAAAA,cAAc,GAAG,IAAjB;AACA,eAAOoB,SAAP;AACD;AAtEH;;AAwEA,SAAOA,SAAP;AACD;;AAED,AAAO,SAASG,kBAAT,CACLjI,cADK,EAELziB,KAFK,EAGLxI,QAHK,EAIL2vB,WAJK,EAKC;AACN;AACA,QAAMnC,KAAyB,GAAIvC,cAAc,CAACqF,WAAlD;AAEAqB,EAAAA,cAAc,GAAG,KAAjB;;AAMA,MAAII,eAAe,GAAGvE,KAAK,CAACuE,eAA5B;AACA,MAAIC,cAAc,GAAGxE,KAAK,CAACwE,cAA3B,CAXM;;AAcN,MAAImB,YAAY,GAAG3F,KAAK,CAACgD,MAAN,CAAaC,OAAhC;;AACA,MAAI0C,YAAY,KAAK,IAArB,EAA2B;AACzB3F,IAAAA,KAAK,CAACgD,MAAN,CAAaC,OAAb,GAAuB,IAAvB,CADyB;AAIzB;;AACA,UAAMa,iBAAiB,GAAG6B,YAA1B;AACA,UAAM5B,kBAAkB,GAAGD,iBAAiB,CAAC3tB,IAA7C;AACA2tB,IAAAA,iBAAiB,CAAC3tB,IAAlB,GAAyB,IAAzB,CAPyB;;AASzB,QAAIquB,cAAc,KAAK,IAAvB,EAA6B;AAC3BD,MAAAA,eAAe,GAAGR,kBAAlB;AACD,KAFD,MAEO;AACLS,MAAAA,cAAc,CAACruB,IAAf,GAAsB4tB,kBAAtB;AACD;;AACDS,IAAAA,cAAc,GAAGV,iBAAjB,CAdyB;AAiBzB;AACA;AACA;AACA;;AACA,UAAM5tB,OAAO,GAAGunB,cAAc,CAACjjB,SAA/B;;AACA,QAAItE,OAAO,KAAK,IAAhB,EAAsB;AACpB;AACA,YAAMyuB,YAAgC,GAAIzuB,OAAO,CAAC4sB,WAAlD;AACA,YAAM8C,qBAAqB,GAAGjB,YAAY,CAACH,cAA3C;;AACA,UAAIoB,qBAAqB,KAAKpB,cAA9B,EAA8C;AAC5C,YAAIoB,qBAAqB,KAAK,IAA9B,EAAoC;AAClCjB,UAAAA,YAAY,CAACJ,eAAb,GAA+BR,kBAA/B;AACD,SAFD,MAEO;AACL6B,UAAAA,qBAAqB,CAACzvB,IAAtB,GAA6B4tB,kBAA7B;AACD;;AACDY,QAAAA,YAAY,CAACH,cAAb,GAA8BV,iBAA9B;AACD;AACF;AACF,GAlDK;;;AAqDN,MAAIS,eAAe,KAAK,IAAxB,EAA8B;AAC5B;AACA,QAAIsB,QAAQ,GAAG7F,KAAK,CAACqE,SAArB,CAF4B;AAI5B;;AACA,QAAIyB,QAAQ,GAAGpV,OAAf;AAEA,QAAIqV,YAAY,GAAG,IAAnB;AACA,QAAIC,kBAAkB,GAAG,IAAzB;AACA,QAAIC,iBAAiB,GAAG,IAAxB;AAEA,QAAItD,MAAM,GAAG4B,eAAb;;AACA,OAAG;AACD,YAAMhO,UAAU,GAAGoM,MAAM,CAACvO,IAA1B;AACA,YAAM8R,eAAe,GAAGvD,MAAM,CAACnO,SAA/B;;AACA,UAAI,CAACqB,eAAe,CAACsM,WAAD,EAAc5L,UAAd,CAApB,EAA+C;AAC7C;AACA;AACA;AACA,cAAMqO,KAAoB,GAAG;AAC3BpQ,UAAAA,SAAS,EAAE0R,eADgB;AAE3B9R,UAAAA,IAAI,EAAEmC,UAFqB;AAI3Bxc,UAAAA,GAAG,EAAE4oB,MAAM,CAAC5oB,GAJe;AAK3BsM,UAAAA,OAAO,EAAEsc,MAAM,CAACtc,OALW;AAM3B1Q,UAAAA,QAAQ,EAAEgtB,MAAM,CAAChtB,QANU;AAQ3BQ,UAAAA,IAAI,EAAE;AARqB,SAA7B;;AAUA,YAAI8vB,iBAAiB,KAAK,IAA1B,EAAgC;AAC9BD,UAAAA,kBAAkB,GAAGC,iBAAiB,GAAGrB,KAAzC;AACAmB,UAAAA,YAAY,GAAGF,QAAf;AACD,SAHD,MAGO;AACLI,UAAAA,iBAAiB,GAAGA,iBAAiB,CAAC9vB,IAAlB,GAAyByuB,KAA7C;AACD,SAnB4C;;;AAqB7CkB,QAAAA,QAAQ,GAAG/P,UAAU,CAAC+P,QAAD,EAAWvP,UAAX,CAArB;AACD,OAtBD,MAsBO;AACL;AAEA,YAAI0P,iBAAiB,KAAK,IAA1B,EAAgC;AAC9B,gBAAMrB,KAAoB,GAAG;AAC3BpQ,YAAAA,SAAS,EAAE0R,eADgB;AAE3B;AACA;AACA;AACA9R,YAAAA,IAAI,EAAEzD,MALqB;AAO3B5W,YAAAA,GAAG,EAAE4oB,MAAM,CAAC5oB,GAPe;AAQ3BsM,YAAAA,OAAO,EAAEsc,MAAM,CAACtc,OARW;AAS3B1Q,YAAAA,QAAQ,EAAEgtB,MAAM,CAAChtB,QATU;AAW3BQ,YAAAA,IAAI,EAAE;AAXqB,WAA7B;AAaA8vB,UAAAA,iBAAiB,GAAGA,iBAAiB,CAAC9vB,IAAlB,GAAyByuB,KAA7C;AACD,SAlBI;;;AAqBLiB,QAAAA,QAAQ,GAAGP,kBAAkB,CAC3B7H,cAD2B,EAE3BuC,KAF2B,EAG3B2C,MAH2B,EAI3BkD,QAJ2B,EAK3B7qB,KAL2B,EAM3BxI,QAN2B,CAA7B;AAQA,cAAMmD,QAAQ,GAAGgtB,MAAM,CAAChtB,QAAxB;;AACA,YACEA,QAAQ,KAAK,IAAb;AAEA;AACAgtB,QAAAA,MAAM,CAACvO,IAAP,KAAgBzD,MAJlB,EAKE;AACA8M,UAAAA,cAAc,CAACrU,KAAf,IAAwB3B,QAAxB;AACA,gBAAMgd,OAAO,GAAGzE,KAAK,CAACyE,OAAtB;;AACA,cAAIA,OAAO,KAAK,IAAhB,EAAsB;AACpBzE,YAAAA,KAAK,CAACyE,OAAN,GAAgB,CAAC9B,MAAD,CAAhB;AACD,WAFD,MAEO;AACL8B,YAAAA,OAAO,CAAC9xB,IAAR,CAAagwB,MAAb;AACD;AACF;AACF;;AACDA,MAAAA,MAAM,GAAGA,MAAM,CAACxsB,IAAhB;;AACA,UAAIwsB,MAAM,KAAK,IAAf,EAAqB;AACnBgD,QAAAA,YAAY,GAAG3F,KAAK,CAACgD,MAAN,CAAaC,OAA5B;;AACA,YAAI0C,YAAY,KAAK,IAArB,EAA2B;AACzB;AACD,SAFD,MAEO;AACL;AACA;AACA,gBAAM7B,iBAAiB,GAAG6B,YAA1B,CAHK;AAKL;;AACA,gBAAM5B,kBAAkB,GAAKD,iBAAiB,CAAC3tB,IAA/C;AACA2tB,UAAAA,iBAAiB,CAAC3tB,IAAlB,GAAyB,IAAzB;AACAwsB,UAAAA,MAAM,GAAGoB,kBAAT;AACA/D,UAAAA,KAAK,CAACwE,cAAN,GAAuBV,iBAAvB;AACA9D,UAAAA,KAAK,CAACgD,MAAN,CAAaC,OAAb,GAAuB,IAAvB;AACD;AACF;AACF,KAxFD,QAwFS,IAxFT;;AA0FA,QAAIgD,iBAAiB,KAAK,IAA1B,EAAgC;AAC9BF,MAAAA,YAAY,GAAGF,QAAf;AACD;;AAED7F,IAAAA,KAAK,CAACqE,SAAN,GAAoB0B,YAApB;AACA/F,IAAAA,KAAK,CAACuE,eAAN,GAAwByB,kBAAxB;AACAhG,IAAAA,KAAK,CAACwE,cAAN,GAAuByB,iBAAvB,CA5G4B;AA+G5B;AACA;;AACA,UAAME,eAAe,GAAGnG,KAAK,CAACgD,MAAN,CAAaY,WAArC;;AACA,QAAIuC,eAAe,KAAK,IAAxB,EAA8B;AAC5B,UAAIvC,WAAW,GAAGuC,eAAlB;;AACA,SAAG;AACDL,QAAAA,QAAQ,GAAG/P,UAAU,CAAC+P,QAAD,EAAWlC,WAAW,CAACxP,IAAvB,CAArB;AACAwP,QAAAA,WAAW,GAAKA,WAAD,CAAmBztB,IAAlC;AACD,OAHD,QAGSytB,WAAW,KAAKuC,eAHzB;AAID,KAND,MAMO,IAAI5B,eAAe,KAAK,IAAxB,EAA8B;AACnC;AACA;AACAvE,MAAAA,KAAK,CAACgD,MAAN,CAAa7P,KAAb,GAAqBzC,OAArB;AACD,KA5H2B;AA+H5B;AACA;AACA;AACA;AACA;AACA;;;AACA0V,IAAAA,sBAAsB,CAACN,QAAD,CAAtB;AACArI,IAAAA,cAAc,CAACtK,KAAf,GAAuB2S,QAAvB;AACArI,IAAAA,cAAc,CAAC6G,aAAf,GAA+BuB,QAA/B;AACD;AAKF;;AAED,SAASQ,YAAT,CAAsB1wB,QAAtB,EAAgCxJ,OAAhC,EAAyC;AAAA,QAErC,OAAOwJ,QAAP,KAAoB,UAFiB;AAAA,iGAKrCA,QALqC;AAAA;;AAOvCA,EAAAA,QAAQ,CAAC7I,IAAT,CAAcX,OAAd;AACD;;AAED,AAAO,SAASm6B,mCAAT,GAA+C;AACpDnC,EAAAA,cAAc,GAAG,KAAjB;AACD;AAED,AAAO,SAASoC,kCAAT,GAAuD;AAC5D,SAAOpC,cAAP;AACD;AAED,AAAO,SAASqC,iBAAT,CACLC,YADK,EAELC,aAFK,EAGLl0B,QAHK,EAIC;AACN;AACA,QAAMiyB,OAAO,GAAGiC,aAAa,CAACjC,OAA9B;AACAiC,EAAAA,aAAa,CAACjC,OAAd,GAAwB,IAAxB;;AACA,MAAIA,OAAO,KAAK,IAAhB,EAAsB;AACpB,SAAK,IAAIv1B,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGu1B,OAAO,CAACt1B,MAA5B,EAAoCD,CAAC,EAArC,EAAyC;AACvC,YAAMy3B,MAAM,GAAGlC,OAAO,CAACv1B,CAAD,CAAtB;AACA,YAAMyG,QAAQ,GAAGgxB,MAAM,CAAChxB,QAAxB;;AACA,UAAIA,QAAQ,KAAK,IAAjB,EAAuB;AACrBgxB,QAAAA,MAAM,CAAChxB,QAAP,GAAkB,IAAlB;AACA0wB,QAAAA,YAAY,CAAC1wB,QAAD,EAAWnD,QAAX,CAAZ;AACD;AACF;AACF;AACF;;AC/lBD;;AACA,AAAO,MAAMo0B,eAAe,GAAG,IAAIjjB,eAAJ,GAAsBkjB,IAA9C;AAEP;AA2EA,SAASC,0BAAT,CACErJ,cADF,EAEEZ,IAFF,EAGEkK,wBAHF,EAIE3a,SAJF,EAKE;AACA,QAAMmZ,SAAS,GAAG9H,cAAc,CAAC6G,aAAjC;AACA,MAAImB,YAAY,GAAGsB,wBAAwB,CAAC3a,SAAD,EAAYmZ,SAAZ,CAA3C;;;AAiBA,QAAMjB,aAAa,GACjBmB,YAAY,KAAK,IAAjB,IAAyBA,YAAY,KAAK72B,SAA1C,GACI22B,SADJ,GAEIh0B,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkB+zB,SAAlB,EAA6BE,YAA7B,CAHN;AAIAhI,EAAAA,cAAc,CAAC6G,aAAf,GAA+BA,aAA/B,CAvBA;AA0BA;;AACA,MAAI7G,cAAc,CAACtK,KAAf,KAAyBzC,OAA7B,EAAsC;AACpC;AACA,UAAMoS,WAA6B,GAAIrF,cAAc,CAACqF,WAAtD;AACAA,IAAAA,WAAW,CAACuB,SAAZ,GAAwBC,aAAxB;AACD;AACF;;AAED,MAAM0C,qBAAqB,GAAG;AAC5B1d,EAAAA,SAD4B;;AAE5B2d,EAAAA,eAAe,CAACx4B,IAAD,EAAO4X,OAAP,EAAgB1Q,QAAhB,EAA0B;AACvC,UAAMgR,KAAK,GAAG6C,GAAW,CAAC/a,IAAD,CAAzB;AACA,UAAM+lB,SAAS,GAAG0S,gBAAgB,EAAlC;AACA,UAAM9S,IAAI,GAAG+S,iBAAiB,CAACxgB,KAAD,CAA9B;AAEA,UAAMgc,MAAM,GAAGC,YAAY,CAACpO,SAAD,EAAYJ,IAAZ,CAA3B;AACAuO,IAAAA,MAAM,CAACtc,OAAP,GAAiBA,OAAjB;;AACA,QAAI1Q,QAAQ,KAAK/G,SAAb,IAA0B+G,QAAQ,KAAK,IAA3C,EAAiD;AAC/C;AAGAgtB,MAAAA,MAAM,CAAChtB,QAAP,GAAkBA,QAAlB;AACD;;AAEDkvB,IAAAA,aAAa,CAACle,KAAD,EAAQgc,MAAR,AAAA,CAAb;AACA,UAAMxT,IAAI,GAAGiY,qBAAqB,CAACzgB,KAAD,EAAQyN,IAAR,EAAcI,SAAd,CAAlC;;AACA,QAAIrF,IAAI,KAAK,IAAb,EAAmB;AACjB4V,MAAAA,mBAAmB,CAAC5V,IAAD,EAAOxI,KAAP,EAAcyN,IAAd,CAAnB;AACD;AAcF,GAlC2B;;AAmC5BiT,EAAAA,mBAAmB,CAAC54B,IAAD,EAAO4X,OAAP,EAAgB1Q,QAAhB,EAA0B;AAC3C,UAAMgR,KAAK,GAAG6C,GAAW,CAAC/a,IAAD,CAAzB;AACA,UAAM+lB,SAAS,GAAG0S,gBAAgB,EAAlC;AACA,UAAM9S,IAAI,GAAG+S,iBAAiB,CAACxgB,KAAD,CAA9B;AAEA,UAAMgc,MAAM,GAAGC,YAAY,CAACpO,SAAD,EAAYJ,IAAZ,CAA3B;AACAuO,IAAAA,MAAM,CAAC5oB,GAAP,GAAakqB,YAAb;AACAtB,IAAAA,MAAM,CAACtc,OAAP,GAAiBA,OAAjB;;AAEA,QAAI1Q,QAAQ,KAAK/G,SAAb,IAA0B+G,QAAQ,KAAK,IAA3C,EAAiD;AAC/C;AAGAgtB,MAAAA,MAAM,CAAChtB,QAAP,GAAkBA,QAAlB;AACD;;AAEDkvB,IAAAA,aAAa,CAACle,KAAD,EAAQgc,MAAR,AAAA,CAAb;AACA,UAAMxT,IAAI,GAAGiY,qBAAqB,CAACzgB,KAAD,EAAQyN,IAAR,EAAcI,SAAd,CAAlC;;AACA,QAAIrF,IAAI,KAAK,IAAb,EAAmB;AACjB4V,MAAAA,mBAAmB,CAAC5V,IAAD,EAAOxI,KAAP,EAAcyN,IAAd,CAAnB;AACD;AAcF,GArE2B;;AAsE5BkT,EAAAA,kBAAkB,CAAC74B,IAAD,EAAOkH,QAAP,EAAiB;AACjC,UAAMgR,KAAK,GAAG6C,GAAW,CAAC/a,IAAD,CAAzB;AACA,UAAM+lB,SAAS,GAAG0S,gBAAgB,EAAlC;AACA,UAAM9S,IAAI,GAAG+S,iBAAiB,CAACxgB,KAAD,CAA9B;AAEA,UAAMgc,MAAM,GAAGC,YAAY,CAACpO,SAAD,EAAYJ,IAAZ,CAA3B;AACAuO,IAAAA,MAAM,CAAC5oB,GAAP,GAAa8oB,WAAb;;AAEA,QAAIltB,QAAQ,KAAK/G,SAAb,IAA0B+G,QAAQ,KAAK,IAA3C,EAAiD;AAC/C;AAGAgtB,MAAAA,MAAM,CAAChtB,QAAP,GAAkBA,QAAlB;AACD;;AAEDkvB,IAAAA,aAAa,CAACle,KAAD,EAAQgc,MAAR,AAAA,CAAb;AACA,UAAMxT,IAAI,GAAGiY,qBAAqB,CAACzgB,KAAD,EAAQyN,IAAR,EAAcI,SAAd,CAAlC;;AACA,QAAIrF,IAAI,KAAK,IAAb,EAAmB;AACjB4V,MAAAA,mBAAmB,CAAC5V,IAAD,EAAOxI,KAAP,EAAcyN,IAAd,CAAnB;AACD;AAcF;;AAvG2B,CAA9B;;AA0GA,SAASmT,0BAAT,CACE9J,cADF,EAEEZ,IAFF,EAGEjD,QAHF,EAIEC,QAJF,EAKE2N,QALF,EAME3B,QANF,EAOE4B,WAPF,EAQE;AACA,QAAMj1B,QAAQ,GAAGirB,cAAc,CAAC1iB,SAAhC;;AACA,MAAI,OAAOvI,QAAQ,CAACk1B,qBAAhB,KAA0C,UAA9C,EAA0D;AACxD,QAAIrb,YAAY,GAAG7Z,QAAQ,CAACk1B,qBAAT,CACjB7N,QADiB,EAEjBgM,QAFiB,EAGjB4B,WAHiB,CAAnB;;AA+BA,WAAOpb,YAAP;AACD;;AAED,MAAIwQ,IAAI,CAACjwB,SAAL,IAAkBiwB,IAAI,CAACjwB,SAAL,CAAe+6B,oBAArC,EAA2D;AACzD,WACE,CAACnH,YAAY,CAAC5G,QAAD,EAAWC,QAAX,CAAb,IAAqC,CAAC2G,YAAY,CAACgH,QAAD,EAAW3B,QAAX,CADpD;AAGD;;AAED,SAAO,IAAP;AACD;;AA8ND,SAAS+B,kBAAT,CAA4BnK,cAA5B,EAAmDjrB,QAAnD,EAAwE;AACtEA,EAAAA,QAAQ,CAACq1B,OAAT,GAAmBb,qBAAnB;AACAvJ,EAAAA,cAAc,CAAC1iB,SAAf,GAA2BvI,QAA3B,CAFsE;;AAItEs1B,EAAAA,GAAW,CAACt1B,QAAD,EAAWirB,cAAX,CAAX;AAID;;AAED,SAASsK,sBAAT,CACEtK,cADF,EAEEZ,IAFF,EAGE7hB,KAHF,EAIO;AACL,MAAIgtB,uBAAuB,GAAG,KAA9B;AACA,MAAIlK,eAAe,GAAGV,kBAAtB;AACA,MAAIjxB,OAAO,GAAGixB,kBAAd;AACA,QAAM6K,WAAW,GAAGpL,IAAI,CAACoL,WAAzB;;AA4CA,MAAI,OAAOA,WAAP,KAAuB,QAAvB,IAAmCA,WAAW,KAAK,IAAvD,EAA6D;AAC3D97B,IAAAA,OAAO,GAAGi3B,WAAW,CAAE6E,WAAF,CAArB;AACD,GAFD,MAEO,AAA2B;AAChCnK,IAAAA,eAAe,GAAGN,kBAAkB,CAACC,cAAD,EAAiBZ,IAAjB,EAAuB,IAAvB,CAApC;AACA,UAAMsB,YAAY,GAAGtB,IAAI,CAACsB,YAA1B;AACA6J,IAAAA,uBAAuB,GACrB7J,YAAY,KAAK,IAAjB,IAAyBA,YAAY,KAAKvvB,SAD5C;AAEAzC,IAAAA,OAAO,GAAG67B,uBAAuB,GAC7B9J,gBAAgB,CAACT,cAAD,EAAiBK,eAAjB,CADa,GAE7BV,kBAFJ;AAGD;;AAED,MAAI5qB,QAAQ,GAAG,IAAIqqB,IAAJ,CAAS7hB,KAAT,EAAgB7O,OAAhB,CAAf,CA5DK;;AA4EL,QAAM+7B,KAAK,GAAIzK,cAAc,CAAC6G,aAAf,GACb9xB,QAAQ,CAAC01B,KAAT,KAAmB,IAAnB,IAA2B11B,QAAQ,CAAC01B,KAAT,KAAmBt5B,SAA9C,GACI4D,QAAQ,CAAC01B,KADb,GAEI,IAHN;AAIAN,EAAAA,kBAAkB,CAACnK,cAAD,EAAiBjrB,QAAjB,CAAlB;AAsFA;;;AACA,MAAIw1B,uBAAJ,EAA6B;AAC3BnK,IAAAA,YAAY,CAACJ,cAAD,EAAiBK,eAAjB,EAAkC3xB,OAAlC,CAAZ;AACD;;AAED,SAAOqG,QAAP;AACD;;AAED,SAAS21B,sBAAT,CAAgC1K,cAAhC,EAAgDjrB,QAAhD,EAA0D;AACxD,QAAMg1B,QAAQ,GAAGh1B,QAAQ,CAAC01B,KAA1B;;AAEA,MAAI,OAAO11B,QAAQ,CAAC41B,kBAAhB,KAAuC,UAA3C,EAAuD;AACrD51B,IAAAA,QAAQ,CAAC41B,kBAAT;AACD;;AACD,MAAI,OAAO51B,QAAQ,CAAC61B,yBAAhB,KAA8C,UAAlD,EAA8D;AAC5D71B,IAAAA,QAAQ,CAAC61B,yBAAT;AACD;;AAED,MAAIb,QAAQ,KAAKh1B,QAAQ,CAAC01B,KAA1B,EAAiC;AAC/B;AAQAlB,IAAAA,qBAAqB,CAACK,mBAAtB,CAA0C70B,QAA1C,EAAoDA,QAAQ,CAAC01B,KAA7D,EAAoE,IAApE;AACD;AACF;;AAED,SAASI,6BAAT,CACE7K,cADF,EAEEjrB,QAFF,EAGEqnB,QAHF,EAIE4N,WAJF,EAKE;AACA,QAAMD,QAAQ,GAAGh1B,QAAQ,CAAC01B,KAA1B;;AACA,MAAI,OAAO11B,QAAQ,CAAC+1B,yBAAhB,KAA8C,UAAlD,EAA8D;AAC5D/1B,IAAAA,QAAQ,CAAC+1B,yBAAT,CAAmC1O,QAAnC,EAA6C4N,WAA7C;AACD;;AACD,MAAI,OAAOj1B,QAAQ,CAACg2B,gCAAhB,KAAqD,UAAzD,EAAqE;AACnEh2B,IAAAA,QAAQ,CAACg2B,gCAAT,CAA0C3O,QAA1C,EAAoD4N,WAApD;AACD;;AAED,MAAIj1B,QAAQ,CAAC01B,KAAT,KAAmBV,QAAvB,EAAiC;AAC/B;AAaAR,IAAAA,qBAAqB,CAACK,mBAAtB,CAA0C70B,QAA1C,EAAoDA,QAAQ,CAAC01B,KAA7D,EAAoE,IAApE;AACD;AACF;;;AAGD,SAASO,kBAAT,CACEhL,cADF,EAEEZ,IAFF,EAGEhD,QAHF,EAIEsI,WAJF,EAKQ;AACN;AAIA,QAAM3vB,QAAQ,GAAGirB,cAAc,CAAC1iB,SAAhC;AACAvI,EAAAA,QAAQ,CAACwI,KAAT,GAAiB6e,QAAjB;AACArnB,EAAAA,QAAQ,CAAC01B,KAAT,GAAiBzK,cAAc,CAAC6G,aAAhC;AACA9xB,EAAAA,QAAQ,CAACq0B,IAAT,GAAgBD,eAAhB;AAEAxC,EAAAA,qBAAqB,CAAC3G,cAAD,CAArB;AAEA,QAAMwK,WAAW,GAAGpL,IAAI,CAACoL,WAAzB;;AACA,MAAI,OAAOA,WAAP,KAAuB,QAAvB,IAAmCA,WAAW,KAAK,IAAvD,EAA6D;AAC3Dz1B,IAAAA,QAAQ,CAACrG,OAAT,GAAmBi3B,WAAW,CAAC6E,WAAD,CAA9B;AACD,GAFD,MAEO,AAEA;AACL,UAAMnK,eAAe,GAAGN,kBAAkB,CAACC,cAAD,EAAiBZ,IAAjB,EAAuB,IAAvB,CAA1C;AACArqB,IAAAA,QAAQ,CAACrG,OAAT,GAAmB+xB,gBAAgB,CAACT,cAAD,EAAiBK,eAAjB,CAAnC;AACD;;AA+BDtrB,EAAAA,QAAQ,CAAC01B,KAAT,GAAiBzK,cAAc,CAAC6G,aAAhC;AAEA,QAAMyC,wBAAwB,GAAGlK,IAAI,CAACkK,wBAAtC;;AACA,MAAI,OAAOA,wBAAP,KAAoC,UAAxC,EAAoD;AAClDD,IAAAA,0BAA0B,CACxBrJ,cADwB,EAExBZ,IAFwB,EAGxBkK,wBAHwB,EAIxBlN,QAJwB,CAA1B;AAMArnB,IAAAA,QAAQ,CAAC01B,KAAT,GAAiBzK,cAAc,CAAC6G,aAAhC;AACD,GA9DK;AAiEN;;;AACA,MACE,OAAOzH,IAAI,CAACkK,wBAAZ,KAAyC,UAAzC,IACA,OAAOv0B,QAAQ,CAACk2B,uBAAhB,KAA4C,UAD5C,KAEC,OAAOl2B,QAAQ,CAAC61B,yBAAhB,KAA8C,UAA9C,IACC,OAAO71B,QAAQ,CAAC41B,kBAAhB,KAAuC,UAHzC,CADF,EAKE;AACAD,IAAAA,sBAAsB,CAAC1K,cAAD,EAAiBjrB,QAAjB,CAAtB,CADA;AAGA;;AACAkzB,IAAAA,kBAAkB,CAACjI,cAAD,EAAiB5D,QAAjB,EAA2BrnB,QAA3B,EAAqC2vB,WAArC,CAAlB;AACA3vB,IAAAA,QAAQ,CAAC01B,KAAT,GAAiBzK,cAAc,CAAC6G,aAAhC;AACD;;AAED,MAAI,OAAO9xB,QAAQ,CAACm2B,iBAAhB,KAAsC,UAA1C,EAAsD;AACpD,QAAIC,UAAiB,GAAGvhB,MAAxB;;AAWAoW,IAAAA,cAAc,CAACrU,KAAf,IAAwBwf,UAAxB;AACD;AACF;;AAED,SAASC,wBAAT,CACEpL,cADF,EAEEZ,IAFF,EAGEhD,QAHF,EAIEsI,WAJF,EAKW;AACT,QAAM3vB,QAAQ,GAAGirB,cAAc,CAAC1iB,SAAhC;AAEA,QAAM6e,QAAQ,GAAG6D,cAAc,CAACqL,aAAhC;AACAt2B,EAAAA,QAAQ,CAACwI,KAAT,GAAiB4e,QAAjB;AAEA,QAAMmP,UAAU,GAAGv2B,QAAQ,CAACrG,OAA5B;AACA,QAAM87B,WAAW,GAAGpL,IAAI,CAACoL,WAAzB;AACA,MAAIR,WAAW,GAAGrK,kBAAlB;;AACA,MAAI,OAAO6K,WAAP,KAAuB,QAAvB,IAAmCA,WAAW,KAAK,IAAvD,EAA6D;AAC3DR,IAAAA,WAAW,GAAGrE,WAAW,CAAC6E,WAAD,CAAzB;AACD,GAFD,MAEO,AAA2B;AAChC,UAAMe,yBAAyB,GAAGxL,kBAAkB,CAClDC,cADkD,EAElDZ,IAFkD,EAGlD,IAHkD,CAApD;AAKA4K,IAAAA,WAAW,GAAGvJ,gBAAgB,CAACT,cAAD,EAAiBuL,yBAAjB,CAA9B;AACD;;AAED,QAAMjC,wBAAwB,GAAGlK,IAAI,CAACkK,wBAAtC;AACA,QAAMkC,gBAAgB,GACpB,OAAOlC,wBAAP,KAAoC,UAApC,IACA,OAAOv0B,QAAQ,CAACk2B,uBAAhB,KAA4C,UAF9C,CArBS;AA0BT;AACA;AAEA;AACA;;AACA,MACE,CAACO,gBAAD,KACC,OAAOz2B,QAAQ,CAACg2B,gCAAhB,KAAqD,UAArD,IACC,OAAOh2B,QAAQ,CAAC+1B,yBAAhB,KAA8C,UAFhD,CADF,EAIE;AACA,QAAI3O,QAAQ,KAAKC,QAAb,IAAyBkP,UAAU,KAAKtB,WAA5C,EAAyD;AACvDa,MAAAA,6BAA6B,CAC3B7K,cAD2B,EAE3BjrB,QAF2B,EAG3BqnB,QAH2B,EAI3B4N,WAJ2B,CAA7B;AAMD;AACF;;AAEDnB,EAAAA,mCAAmC;AAEnC,QAAMkB,QAAQ,GAAG/J,cAAc,CAAC6G,aAAhC;AACA,MAAIuB,QAAQ,GAAIrzB,QAAQ,CAAC01B,KAAT,GAAiBV,QAAjC;AACA9B,EAAAA,kBAAkB,CAACjI,cAAD,EAAiB5D,QAAjB,EAA2BrnB,QAA3B,EAAqC2vB,WAArC,CAAlB;AACA0D,EAAAA,QAAQ,GAAGpI,cAAc,CAAC6G,aAA1B;;AACA,MACE1K,QAAQ,KAAKC,QAAb,IACA2N,QAAQ,KAAK3B,QADb,IAEA,CAACzH,iBAAiB,EAFlB,IAGA,CAACmI,kCAAkC,EAJrC,EAKE;AACA;AACA;AACA,QAAI,OAAO/zB,QAAQ,CAACm2B,iBAAhB,KAAsC,UAA1C,EAAsD;AACpD,UAAIC,UAAiB,GAAGvhB,MAAxB;;AAWAoW,MAAAA,cAAc,CAACrU,KAAf,IAAwBwf,UAAxB;AACD;;AACD,WAAO,KAAP;AACD;;AAED,MAAI,OAAO7B,wBAAP,KAAoC,UAAxC,EAAoD;AAClDD,IAAAA,0BAA0B,CACxBrJ,cADwB,EAExBZ,IAFwB,EAGxBkK,wBAHwB,EAIxBlN,QAJwB,CAA1B;AAMAgM,IAAAA,QAAQ,GAAGpI,cAAc,CAAC6G,aAA1B;AACD;;AAED,QAAMjY,YAAY,GAChBka,kCAAkC,MAClCgB,0BAA0B,CACxB9J,cADwB,EAExBZ,IAFwB,EAGxBjD,QAHwB,EAIxBC,QAJwB,EAKxB2N,QALwB,EAMxB3B,QANwB,EAOxB4B,WAPwB,CAF5B;;AAYA,MAAIpb,YAAJ,EAAkB;AAChB;AACA;AACA,QACE,CAAC4c,gBAAD,KACC,OAAOz2B,QAAQ,CAAC61B,yBAAhB,KAA8C,UAA9C,IACC,OAAO71B,QAAQ,CAAC41B,kBAAhB,KAAuC,UAFzC,CADF,EAIE;AACA,UAAI,OAAO51B,QAAQ,CAAC41B,kBAAhB,KAAuC,UAA3C,EAAuD;AACrD51B,QAAAA,QAAQ,CAAC41B,kBAAT;AACD;;AACD,UAAI,OAAO51B,QAAQ,CAAC61B,yBAAhB,KAA8C,UAAlD,EAA8D;AAC5D71B,QAAAA,QAAQ,CAAC61B,yBAAT;AACD;AACF;;AACD,QAAI,OAAO71B,QAAQ,CAACm2B,iBAAhB,KAAsC,UAA1C,EAAsD;AACpD,UAAIC,UAAiB,GAAGvhB,MAAxB;;AAWAoW,MAAAA,cAAc,CAACrU,KAAf,IAAwBwf,UAAxB;AACD;AACF,GA7BD,MA6BO;AACL;AACA;AACA,QAAI,OAAOp2B,QAAQ,CAACm2B,iBAAhB,KAAsC,UAA1C,EAAsD;AACpD,UAAIC,UAAiB,GAAGvhB,MAAxB;;AAWAoW,MAAAA,cAAc,CAACrU,KAAf,IAAwBwf,UAAxB;AACD,KAhBI;AAmBL;;;AACAnL,IAAAA,cAAc,CAACqL,aAAf,GAA+BjP,QAA/B;AACA4D,IAAAA,cAAc,CAAC6G,aAAf,GAA+BuB,QAA/B;AACD,GAtJQ;AAyJT;;;AACArzB,EAAAA,QAAQ,CAACwI,KAAT,GAAiB6e,QAAjB;AACArnB,EAAAA,QAAQ,CAAC01B,KAAT,GAAiBrC,QAAjB;AACArzB,EAAAA,QAAQ,CAACrG,OAAT,GAAmBs7B,WAAnB;AAEA,SAAOpb,YAAP;AACD;;;AAGD,SAAS6c,mBAAT,CACEhzB,OADF,EAEEunB,cAFF,EAGEZ,IAHF,EAIEhD,QAJF,EAKEsI,WALF,EAMW;AACT,QAAM3vB,QAAQ,GAAGirB,cAAc,CAAC1iB,SAAhC;AAEA2pB,EAAAA,gBAAgB,CAACxuB,OAAD,EAAUunB,cAAV,CAAhB;AAEA,QAAM0L,kBAAkB,GAAG1L,cAAc,CAACqL,aAA1C;AACA,QAAMlP,QAAQ,GACZ6D,cAAc,CAAC/uB,IAAf,KAAwB+uB,cAAc,CAAC2L,WAAvC,GACID,kBADJ,GAEI9H,mBAAmB,CAAC5D,cAAc,CAAC/uB,IAAhB,EAAsBy6B,kBAAtB,CAHzB;AAIA32B,EAAAA,QAAQ,CAACwI,KAAT,GAAiB4e,QAAjB;AACA,QAAMyP,kBAAkB,GAAG5L,cAAc,CAAC6L,YAA1C;AAEA,QAAMP,UAAU,GAAGv2B,QAAQ,CAACrG,OAA5B;AACA,QAAM87B,WAAW,GAAGpL,IAAI,CAACoL,WAAzB;AACA,MAAIR,WAAW,GAAGrK,kBAAlB;;AACA,MAAI,OAAO6K,WAAP,KAAuB,QAAvB,IAAmCA,WAAW,KAAK,IAAvD,EAA6D;AAC3DR,IAAAA,WAAW,GAAGrE,WAAW,CAAC6E,WAAD,CAAzB;AACD,GAFD,MAEO,AAA2B;AAChC,UAAMsB,mBAAmB,GAAG/L,kBAAkB,CAACC,cAAD,EAAiBZ,IAAjB,EAAuB,IAAvB,CAA9C;AACA4K,IAAAA,WAAW,GAAGvJ,gBAAgB,CAACT,cAAD,EAAiB8L,mBAAjB,CAA9B;AACD;;AAED,QAAMxC,wBAAwB,GAAGlK,IAAI,CAACkK,wBAAtC;AACA,QAAMkC,gBAAgB,GACpB,OAAOlC,wBAAP,KAAoC,UAApC,IACA,OAAOv0B,QAAQ,CAACk2B,uBAAhB,KAA4C,UAF9C,CAxBS;AA6BT;AACA;AAEA;AACA;;AACA,MACE,CAACO,gBAAD,KACC,OAAOz2B,QAAQ,CAACg2B,gCAAhB,KAAqD,UAArD,IACC,OAAOh2B,QAAQ,CAAC+1B,yBAAhB,KAA8C,UAFhD,CADF,EAIE;AACA,QACEY,kBAAkB,KAAKE,kBAAvB,IACAN,UAAU,KAAKtB,WAFjB,EAGE;AACAa,MAAAA,6BAA6B,CAC3B7K,cAD2B,EAE3BjrB,QAF2B,EAG3BqnB,QAH2B,EAI3B4N,WAJ2B,CAA7B;AAMD;AACF;;AAEDnB,EAAAA,mCAAmC;AAEnC,QAAMkB,QAAQ,GAAG/J,cAAc,CAAC6G,aAAhC;AACA,MAAIuB,QAAQ,GAAIrzB,QAAQ,CAAC01B,KAAT,GAAiBV,QAAjC;AACA9B,EAAAA,kBAAkB,CAACjI,cAAD,EAAiB5D,QAAjB,EAA2BrnB,QAA3B,EAAqC2vB,WAArC,CAAlB;AACA0D,EAAAA,QAAQ,GAAGpI,cAAc,CAAC6G,aAA1B;;AAEA,MACE6E,kBAAkB,KAAKE,kBAAvB,IACA7B,QAAQ,KAAK3B,QADb,IAEA,CAACzH,iBAAiB,EAFlB,IAGA,CAACmI,kCAAkC,EAHnC,IAIA,EACEtf,4BAA4B,CAA5B,CAAA,CADF,CALF,EAWE;AACA;AACA;AACA,QAAI,OAAOzU,QAAQ,CAACg3B,kBAAhB,KAAuC,UAA3C,EAAuD;AACrD,UACEL,kBAAkB,KAAKjzB,OAAO,CAAC4yB,aAA/B,IACAtB,QAAQ,KAAKtxB,OAAO,CAACouB,aAFvB,EAGE;AACA7G,QAAAA,cAAc,CAACrU,KAAf,IAAwB/B,MAAxB;AACD;AACF;;AACD,QAAI,OAAO7U,QAAQ,CAACk2B,uBAAhB,KAA4C,UAAhD,EAA4D;AAC1D,UACES,kBAAkB,KAAKjzB,OAAO,CAAC4yB,aAA/B,IACAtB,QAAQ,KAAKtxB,OAAO,CAACouB,aAFvB,EAGE;AACA7G,QAAAA,cAAc,CAACrU,KAAf,IAAwBxB,QAAxB;AACD;AACF;;AACD,WAAO,KAAP;AACD;;AAED,MAAI,OAAOmf,wBAAP,KAAoC,UAAxC,EAAoD;AAClDD,IAAAA,0BAA0B,CACxBrJ,cADwB,EAExBZ,IAFwB,EAGxBkK,wBAHwB,EAIxBlN,QAJwB,CAA1B;AAMAgM,IAAAA,QAAQ,GAAGpI,cAAc,CAAC6G,aAA1B;AACD;;AAED,QAAMjY,YAAY,GAChBka,kCAAkC,MAClCgB,0BAA0B,CACxB9J,cADwB,EAExBZ,IAFwB,EAGxBjD,QAHwB,EAIxBC,QAJwB,EAKxB2N,QALwB,EAMxB3B,QANwB,EAOxB4B,WAPwB,CAD1B;AAWA;AACA;AACA;AACCxgB,EAAAA,4BAA4B,CAA5B,CAAA,CAfH;;AAoBA,MAAIoF,YAAJ,EAAkB;AAChB;AACA;AACA,QACE,CAAC4c,gBAAD,KACC,OAAOz2B,QAAQ,CAACi3B,0BAAhB,KAA+C,UAA/C,IACC,OAAOj3B,QAAQ,CAACk3B,mBAAhB,KAAwC,UAF1C,CADF,EAIE;AACA,UAAI,OAAOl3B,QAAQ,CAACk3B,mBAAhB,KAAwC,UAA5C,EAAwD;AACtDl3B,QAAAA,QAAQ,CAACk3B,mBAAT,CAA6B7P,QAA7B,EAAuCgM,QAAvC,EAAiD4B,WAAjD;AACD;;AACD,UAAI,OAAOj1B,QAAQ,CAACi3B,0BAAhB,KAA+C,UAAnD,EAA+D;AAC7Dj3B,QAAAA,QAAQ,CAACi3B,0BAAT,CAAoC5P,QAApC,EAA8CgM,QAA9C,EAAwD4B,WAAxD;AACD;AACF;;AACD,QAAI,OAAOj1B,QAAQ,CAACg3B,kBAAhB,KAAuC,UAA3C,EAAuD;AACrD/L,MAAAA,cAAc,CAACrU,KAAf,IAAwB/B,MAAxB;AACD;;AACD,QAAI,OAAO7U,QAAQ,CAACk2B,uBAAhB,KAA4C,UAAhD,EAA4D;AAC1DjL,MAAAA,cAAc,CAACrU,KAAf,IAAwBxB,QAAxB;AACD;AACF,GArBD,MAqBO;AACL;AACA;AACA,QAAI,OAAOpV,QAAQ,CAACg3B,kBAAhB,KAAuC,UAA3C,EAAuD;AACrD,UACEL,kBAAkB,KAAKjzB,OAAO,CAAC4yB,aAA/B,IACAtB,QAAQ,KAAKtxB,OAAO,CAACouB,aAFvB,EAGE;AACA7G,QAAAA,cAAc,CAACrU,KAAf,IAAwB/B,MAAxB;AACD;AACF;;AACD,QAAI,OAAO7U,QAAQ,CAACk2B,uBAAhB,KAA4C,UAAhD,EAA4D;AAC1D,UACES,kBAAkB,KAAKjzB,OAAO,CAAC4yB,aAA/B,IACAtB,QAAQ,KAAKtxB,OAAO,CAACouB,aAFvB,EAGE;AACA7G,QAAAA,cAAc,CAACrU,KAAf,IAAwBxB,QAAxB;AACD;AACF,KAlBI;AAqBL;;;AACA6V,IAAAA,cAAc,CAACqL,aAAf,GAA+BjP,QAA/B;AACA4D,IAAAA,cAAc,CAAC6G,aAAf,GAA+BuB,QAA/B;AACD,GAvKQ;AA0KT;;;AACArzB,EAAAA,QAAQ,CAACwI,KAAT,GAAiB6e,QAAjB;AACArnB,EAAAA,QAAQ,CAAC01B,KAAT,GAAiBrC,QAAjB;AACArzB,EAAAA,QAAQ,CAACrG,OAAT,GAAmBs7B,WAAnB;AAEA,SAAOpb,YAAP;AACD;;AChqCD,SAASsd,SAAT,CACEC,WADF,EAEE1zB,OAFF,EAGE2zB,OAHF,EAIE;AACA,QAAMC,QAAQ,GAAGD,OAAO,CAACE,GAAzB;;AACA,MACED,QAAQ,KAAK,IAAb,IACA,OAAOA,QAAP,KAAoB,UADpB,IAEA,OAAOA,QAAP,KAAoB,QAHtB,EAIE;AACA;AA0CA,QAAID,OAAO,CAACG,MAAZ,EAAoB;AAClB,YAAMC,KAAa,GAAIJ,OAAO,CAACG,MAA/B;AACA,UAAIv7B,IAAJ;;AACA,UAAIw7B,KAAJ,EAAW;AACT,cAAMC,UAAU,GAAKD,KAArB;;AADS,cAGPC,UAAU,CAACnwB,GAAX,KAAmBpD,cAHZ;AAAA;AAAA;;AASTlI,QAAAA,IAAI,GAAGy7B,UAAU,CAACnvB,SAAlB;AACD;;AAbiB,WAehBtM,IAfgB;AAAA,sDAkBhBq7B,QAlBgB;AAAA;;AAoBlB,YAAMK,SAAS,GAAG,KAAKL,QAAvB,CApBkB;;AAsBlB,UACE5zB,OAAO,KAAK,IAAZ,IACAA,OAAO,CAAC6zB,GAAR,KAAgB,IADhB,IAEA,OAAO7zB,OAAO,CAAC6zB,GAAf,KAAuB,UAFvB,IAGA7zB,OAAO,CAAC6zB,GAAR,CAAYK,UAAZ,KAA2BD,SAJ7B,EAKE;AACA,eAAOj0B,OAAO,CAAC6zB,GAAf;AACD;;AACD,YAAMA,GAAG,GAAG,UAAStmB,KAAT,EAAgB;AAC1B,YAAIojB,IAAI,GAAGp4B,IAAI,CAACo4B,IAAhB;;AACA,YAAIA,IAAI,KAAKD,eAAb,EAA8B;AAC5B;AACAC,UAAAA,IAAI,GAAGp4B,IAAI,CAACo4B,IAAL,GAAY,EAAnB;AACD;;AACD,YAAIpjB,KAAK,KAAK,IAAd,EAAoB;AAClB,iBAAOojB,IAAI,CAACsD,SAAD,CAAX;AACD,SAFD,MAEO;AACLtD,UAAAA,IAAI,CAACsD,SAAD,CAAJ,GAAkB1mB,KAAlB;AACD;AACF,OAXD;;AAYAsmB,MAAAA,GAAG,CAACK,UAAJ,GAAiBD,SAAjB;AACA,aAAOJ,GAAP;AACD,KA5CD,MA4CO;AAAA,YAEH,OAAOD,QAAP,KAAoB,QAFjB;AAAA;AAAA;;AAAA,WAMHD,OAAO,CAACG,MANL;AAAA,gEAaHF,QAbG;AAAA;AAeN;AACF;;AACD,SAAOA,QAAP;AACD;;AAED,SAASO,wBAAT,CAAkCT,WAAlC,EAAsDU,QAAtD,EAAwE;AACtE,QAAMC,WAAW,GAAGh5B,MAAM,CAAC3E,SAAP,CAAiB49B,QAAjB,CAA0B19B,IAA1B,CAA+Bw9B,QAA/B,CAApB;;AADsE;AAAA,qEAOpEC,WAAW,KAAK,iBAAhB,GACI,uBAAuBh5B,MAAM,CAACqvB,IAAP,CAAY0J,QAAZ,EAAsBG,IAAtB,CAA2B,IAA3B,CAAvB,GAA0D,GAD9D,GAEIF,WATgE;AAAA;AAWvE;AA0BD;AACA;AACA;;;AACA,SAASG,eAAT,CAAyBC,sBAAzB,EAAiD;AAC/C,WAASC,WAAT,CAAqBhB,WAArB,EAAyCiB,aAAzC,EAAqE;AACnE,QAAI,CAACF,sBAAL,EAA6B;AAC3B;AACA;AACD;;AACD,UAAMG,SAAS,GAAGlB,WAAW,CAACkB,SAA9B;;AACA,QAAIA,SAAS,KAAK,IAAlB,EAAwB;AACtBlB,MAAAA,WAAW,CAACkB,SAAZ,GAAwB,CAACD,aAAD,CAAxB;AACAjB,MAAAA,WAAW,CAACxgB,KAAZ,IAAqB7B,aAArB;AACD,KAHD,MAGO;AACLujB,MAAAA,SAAS,CAACn4B,IAAV,CAAek4B,aAAf;AACD;AACF;;AAED,WAASE,uBAAT,CACEnB,WADF,EAEEoB,iBAFF,EAGQ;AACN,QAAI,CAACL,sBAAL,EAA6B;AAC3B;AACA,aAAO,IAAP;AACD,KAJK;AAON;;;AACA,QAAIE,aAAa,GAAGG,iBAApB;;AACA,WAAOH,aAAa,KAAK,IAAzB,EAA+B;AAC7BD,MAAAA,WAAW,CAAChB,WAAD,EAAciB,aAAd,CAAX;AACAA,MAAAA,aAAa,GAAGA,aAAa,CAAC9gB,OAA9B;AACD;;AACD,WAAO,IAAP;AACD;;AAED,WAASkhB,oBAAT,CACErB,WADF,EAEEoB,iBAFF,EAG+B;AAC7B;AACA;AACA;AACA,UAAME,gBAA6C,GAAG,IAAItrB,GAAJ,EAAtD;AAEA,QAAIurB,aAAa,GAAGH,iBAApB;;AACA,WAAOG,aAAa,KAAK,IAAzB,EAA+B;AAC7B,UAAIA,aAAa,CAAC5nB,GAAd,KAAsB,IAA1B,EAAgC;AAC9B2nB,QAAAA,gBAAgB,CAAClrB,GAAjB,CAAqBmrB,aAAa,CAAC5nB,GAAnC,EAAwC4nB,aAAxC;AACD,OAFD,MAEO;AACLD,QAAAA,gBAAgB,CAAClrB,GAAjB,CAAqBmrB,aAAa,CAACtpB,KAAnC,EAA0CspB,aAA1C;AACD;;AACDA,MAAAA,aAAa,GAAGA,aAAa,CAACphB,OAA9B;AACD;;AACD,WAAOmhB,gBAAP;AACD;;AAED,WAASE,QAAT,CAAkBzkB,KAAlB,EAAgC2iB,YAAhC,EAA4D;AAC1D;AACA;AACA,UAAM1E,KAAK,GAAGyG,oBAAoB,CAAC1kB,KAAD,EAAQ2iB,YAAR,CAAlC;AACA1E,IAAAA,KAAK,CAAC/iB,KAAN,GAAc,CAAd;AACA+iB,IAAAA,KAAK,CAAC7a,OAAN,GAAgB,IAAhB;AACA,WAAO6a,KAAP;AACD;;AAED,WAAS0G,UAAT,CACEC,QADF,EAEEC,eAFF,EAGEC,QAHF,EAIU;AACRF,IAAAA,QAAQ,CAAC1pB,KAAT,GAAiB4pB,QAAjB;;AACA,QAAI,CAACd,sBAAL,EAA6B;AAC3B;AACA,aAAOa,eAAP;AACD;;AACD,UAAMt1B,OAAO,GAAGq1B,QAAQ,CAAC/wB,SAAzB;;AACA,QAAItE,OAAO,KAAK,IAAhB,EAAsB;AACpB,YAAMw1B,QAAQ,GAAGx1B,OAAO,CAAC2L,KAAzB;;AACA,UAAI6pB,QAAQ,GAAGF,eAAf,EAAgC;AAC9B;AACAD,QAAAA,QAAQ,CAACniB,KAAT,IAAkBhC,SAAlB;AACA,eAAOokB,eAAP;AACD,OAJD,MAIO;AACL;AACA,eAAOE,QAAP;AACD;AACF,KAVD,MAUO;AACL;AACAH,MAAAA,QAAQ,CAACniB,KAAT,IAAkBhC,SAAlB;AACA,aAAOokB,eAAP;AACD;AACF;;AAED,WAASG,gBAAT,CAA0BJ,QAA1B,EAAkD;AAChD;AACA;AACA,QAAIZ,sBAAsB,IAAIY,QAAQ,CAAC/wB,SAAT,KAAuB,IAArD,EAA2D;AACzD+wB,MAAAA,QAAQ,CAACniB,KAAT,IAAkBhC,SAAlB;AACD;;AACD,WAAOmkB,QAAP;AACD;;AAED,WAASK,cAAT,CACEhC,WADF,EAEE1zB,OAFF,EAGE21B,WAHF,EAIE1Y,KAJF,EAKE;AACA,QAAIjd,OAAO,KAAK,IAAZ,IAAoBA,OAAO,CAAC6D,GAAR,KAAgB/C,QAAxC,EAAkD;AAChD;AACA,YAAM80B,OAAO,GAAGC,mBAAmB,CAACF,WAAD,EAAcjC,WAAW,CAACoC,IAA1B,EAAgC7Y,KAAhC,CAAnC;AACA2Y,MAAAA,OAAO,CAAChyB,MAAR,GAAiB8vB,WAAjB;AACA,aAAOkC,OAAP;AACD,KALD,MAKO;AACL;AACA,YAAMG,QAAQ,GAAGb,QAAQ,CAACl1B,OAAD,EAAU21B,WAAV,CAAzB;AACAI,MAAAA,QAAQ,CAACnyB,MAAT,GAAkB8vB,WAAlB;AACA,aAAOqC,QAAP;AACD;AACF;;AAED,WAASC,aAAT,CACEtC,WADF,EAEE1zB,OAFF,EAGE2zB,OAHF,EAIE1W,KAJF,EAKS;AACP,UAAMiW,WAAW,GAAGS,OAAO,CAACn7B,IAA5B;;AACA,QAAI06B,WAAW,KAAKtlB,mBAApB,EAAyC;AACvC,aAAOqoB,cAAc,CACnBvC,WADmB,EAEnB1zB,OAFmB,EAGnB2zB,OAAO,CAAC7uB,KAAR,CAAcwf,QAHK,EAInBrH,KAJmB,EAKnB0W,OAAO,CAACtmB,GALW,CAArB;AAOD;;AACD,QAAIrN,OAAO,KAAK,IAAhB,EAAsB;AACpB,UACEA,OAAO,CAACkzB,WAAR,KAAwBA,WAAxB;AAECrI,MAAAA,CAEG,KAJJ;AAMA;AACA;AACA;AACCha,MAAAA,kBAAkB,CAAlB,CAAA,CAAA,CAVH,EAeE;AACA;AACA,cAAMklB,QAAQ,GAAGb,QAAQ,CAACl1B,OAAD,EAAU2zB,OAAO,CAAC7uB,KAAlB,CAAzB;AACAixB,QAAAA,QAAQ,CAAClC,GAAT,GAAeJ,SAAS,CAACC,WAAD,EAAc1zB,OAAd,EAAuB2zB,OAAvB,CAAxB;AACAoC,QAAAA,QAAQ,CAACnyB,MAAT,GAAkB8vB,WAAlB;;AAKA,eAAOqC,QAAP;AACD;AACF,KAtCM;;;AAwCP,UAAMH,OAAO,GAAGM,sBAAsB,CAACvC,OAAD,EAAUD,WAAW,CAACoC,IAAtB,EAA4B7Y,KAA5B,CAAtC;AACA2Y,IAAAA,OAAO,CAAC/B,GAAR,GAAcJ,SAAS,CAACC,WAAD,EAAc1zB,OAAd,EAAuB2zB,OAAvB,CAAvB;AACAiC,IAAAA,OAAO,CAAChyB,MAAR,GAAiB8vB,WAAjB;AACA,WAAOkC,OAAP;AACD;;AAED,WAASO,YAAT,CACEzC,WADF,EAEE1zB,OAFF,EAGEo2B,MAHF,EAIEnZ,KAJF,EAKS;AACP,QACEjd,OAAO,KAAK,IAAZ,IACAA,OAAO,CAAC6D,GAAR,KAAgBjD,UADhB,IAEAZ,OAAO,CAAC6E,SAAR,CAAkB2e,aAAlB,KAAoC4S,MAAM,CAAC5S,aAF3C,IAGAxjB,OAAO,CAAC6E,SAAR,CAAkBwxB,cAAlB,KAAqCD,MAAM,CAACC,cAJ9C,EAKE;AACA;AACA,YAAMT,OAAO,GAAGU,qBAAqB,CAACF,MAAD,EAAS1C,WAAW,CAACoC,IAArB,EAA2B7Y,KAA3B,CAArC;AACA2Y,MAAAA,OAAO,CAAChyB,MAAR,GAAiB8vB,WAAjB;AACA,aAAOkC,OAAP;AACD,KAVD,MAUO;AACL;AACA,YAAMG,QAAQ,GAAGb,QAAQ,CAACl1B,OAAD,EAAUo2B,MAAM,CAAC9R,QAAP,IAAmB,EAA7B,CAAzB;AACAyR,MAAAA,QAAQ,CAACnyB,MAAT,GAAkB8vB,WAAlB;AACA,aAAOqC,QAAP;AACD;AACF;;AAED,WAASE,cAAT,CACEvC,WADF,EAEE1zB,OAFF,EAGEu2B,QAHF,EAIEtZ,KAJF,EAKE5P,GALF,EAMS;AACP,QAAIrN,OAAO,KAAK,IAAZ,IAAoBA,OAAO,CAAC6D,GAAR,KAAgB9C,QAAxC,EAAkD;AAChD;AACA,YAAM60B,OAAO,GAAGY,uBAAuB,CACrCD,QADqC,EAErC7C,WAAW,CAACoC,IAFyB,EAGrC7Y,KAHqC,EAIrC5P,GAJqC,CAAvC;AAMAuoB,MAAAA,OAAO,CAAChyB,MAAR,GAAiB8vB,WAAjB;AACA,aAAOkC,OAAP;AACD,KAVD,MAUO;AACL;AACA,YAAMG,QAAQ,GAAGb,QAAQ,CAACl1B,OAAD,EAAUu2B,QAAV,CAAzB;AACAR,MAAAA,QAAQ,CAACnyB,MAAT,GAAkB8vB,WAAlB;AACA,aAAOqC,QAAP;AACD;AACF;;AAED,WAASU,WAAT,CACE/C,WADF,EAEEU,QAFF,EAGEnX,KAHF,EAIgB;AACd,QAAI,OAAOmX,QAAP,KAAoB,QAApB,IAAgC,OAAOA,QAAP,KAAoB,QAAxD,EAAkE;AAChE;AACA;AACA;AACA,YAAMwB,OAAO,GAAGC,mBAAmB,CACjC,KAAKzB,QAD4B,EAEjCV,WAAW,CAACoC,IAFqB,EAGjC7Y,KAHiC,CAAnC;AAKA2Y,MAAAA,OAAO,CAAChyB,MAAR,GAAiB8vB,WAAjB;AACA,aAAOkC,OAAP;AACD;;AAED,QAAI,OAAOxB,QAAP,KAAoB,QAApB,IAAgCA,QAAQ,KAAK,IAAjD,EAAuD;AACrD,cAAQA,QAAQ,CAACvkB,QAAjB;AACE,aAAKnC,kBAAL;AAAyB;AACvB,kBAAMkoB,OAAO,GAAGM,sBAAsB,CACpC9B,QADoC,EAEpCV,WAAW,CAACoC,IAFwB,EAGpC7Y,KAHoC,CAAtC;AAKA2Y,YAAAA,OAAO,CAAC/B,GAAR,GAAcJ,SAAS,CAACC,WAAD,EAAc,IAAd,EAAoBU,QAApB,CAAvB;AACAwB,YAAAA,OAAO,CAAChyB,MAAR,GAAiB8vB,WAAjB;AACA,mBAAOkC,OAAP;AACD;;AACD,aAAKjoB,iBAAL;AAAwB;AACtB,kBAAMioB,OAAO,GAAGU,qBAAqB,CACnClC,QADmC,EAEnCV,WAAW,CAACoC,IAFuB,EAGnC7Y,KAHmC,CAArC;AAKA2Y,YAAAA,OAAO,CAAChyB,MAAR,GAAiB8vB,WAAjB;AACA,mBAAOkC,OAAP;AACD;AAnBH;;AA6BA,UAAIh+B,OAAO,CAACw8B,QAAD,CAAP,IAAqBllB,aAAa,CAACklB,QAAD,CAAtC,EAAkD;AAChD,cAAMwB,OAAO,GAAGY,uBAAuB,CACrCpC,QADqC,EAErCV,WAAW,CAACoC,IAFyB,EAGrC7Y,KAHqC,EAIrC,IAJqC,CAAvC;AAMA2Y,QAAAA,OAAO,CAAChyB,MAAR,GAAiB8vB,WAAjB;AACA,eAAOkC,OAAP;AACD;;AAEDzB,MAAAA,wBAAwB,CAACT,WAAD,EAAcU,QAAd,CAAxB;AACD;;AAQD,WAAO,IAAP;AACD;;AAED,WAASsC,UAAT,CACEhD,WADF,EAEEiD,QAFF,EAGEvC,QAHF,EAIEnX,KAJF,EAKgB;AACd;AAEA,UAAM5P,GAAG,GAAGspB,QAAQ,KAAK,IAAb,GAAoBA,QAAQ,CAACtpB,GAA7B,GAAmC,IAA/C;;AAEA,QAAI,OAAO+mB,QAAP,KAAoB,QAApB,IAAgC,OAAOA,QAAP,KAAoB,QAAxD,EAAkE;AAChE;AACA;AACA;AACA,UAAI/mB,GAAG,KAAK,IAAZ,EAAkB;AAChB,eAAO,IAAP;AACD;;AACD,aAAOqoB,cAAc,CAAChC,WAAD,EAAciD,QAAd,EAAwB,KAAKvC,QAA7B,EAAuCnX,KAAvC,CAArB;AACD;;AAED,QAAI,OAAOmX,QAAP,KAAoB,QAApB,IAAgCA,QAAQ,KAAK,IAAjD,EAAuD;AACrD,cAAQA,QAAQ,CAACvkB,QAAjB;AACE,aAAKnC,kBAAL;AAAyB;AACvB,gBAAI0mB,QAAQ,CAAC/mB,GAAT,KAAiBA,GAArB,EAA0B;AACxB,qBAAO2oB,aAAa,CAACtC,WAAD,EAAciD,QAAd,EAAwBvC,QAAxB,EAAkCnX,KAAlC,CAApB;AACD,aAFD,MAEO;AACL,qBAAO,IAAP;AACD;AACF;;AACD,aAAKtP,iBAAL;AAAwB;AACtB,gBAAIymB,QAAQ,CAAC/mB,GAAT,KAAiBA,GAArB,EAA0B;AACxB,qBAAO8oB,YAAY,CAACzC,WAAD,EAAciD,QAAd,EAAwBvC,QAAxB,EAAkCnX,KAAlC,CAAnB;AACD,aAFD,MAEO;AACL,qBAAO,IAAP;AACD;AACF;AAdH;;AAwBA,UAAIrlB,OAAO,CAACw8B,QAAD,CAAP,IAAqBllB,aAAa,CAACklB,QAAD,CAAtC,EAAkD;AAChD,YAAI/mB,GAAG,KAAK,IAAZ,EAAkB;AAChB,iBAAO,IAAP;AACD;;AAED,eAAO4oB,cAAc,CAACvC,WAAD,EAAciD,QAAd,EAAwBvC,QAAxB,EAAkCnX,KAAlC,EAAyC,IAAzC,CAArB;AACD;;AAEDkX,MAAAA,wBAAwB,CAACT,WAAD,EAAcU,QAAd,CAAxB;AACD;;AAQD,WAAO,IAAP;AACD;;AAED,WAASwC,aAAT,CACE5B,gBADF,EAEEtB,WAFF,EAGEmD,MAHF,EAIEzC,QAJF,EAKEnX,KALF,EAMgB;AACd,QAAI,OAAOmX,QAAP,KAAoB,QAApB,IAAgC,OAAOA,QAAP,KAAoB,QAAxD,EAAkE;AAChE;AACA;AACA,YAAM0C,YAAY,GAAG9B,gBAAgB,CAAC9qB,GAAjB,CAAqB2sB,MAArB,KAAgC,IAArD;AACA,aAAOnB,cAAc,CAAChC,WAAD,EAAcoD,YAAd,EAA4B,KAAK1C,QAAjC,EAA2CnX,KAA3C,CAArB;AACD;;AAED,QAAI,OAAOmX,QAAP,KAAoB,QAApB,IAAgCA,QAAQ,KAAK,IAAjD,EAAuD;AACrD,cAAQA,QAAQ,CAACvkB,QAAjB;AACE,aAAKnC,kBAAL;AAAyB;AACvB,kBAAMopB,YAAY,GAChB9B,gBAAgB,CAAC9qB,GAAjB,CACEkqB,QAAQ,CAAC/mB,GAAT,KAAiB,IAAjB,GAAwBwpB,MAAxB,GAAiCzC,QAAQ,CAAC/mB,GAD5C,KAEK,IAHP;AAIA,mBAAO2oB,aAAa,CAACtC,WAAD,EAAcoD,YAAd,EAA4B1C,QAA5B,EAAsCnX,KAAtC,CAApB;AACD;;AACD,aAAKtP,iBAAL;AAAwB;AACtB,kBAAMmpB,YAAY,GAChB9B,gBAAgB,CAAC9qB,GAAjB,CACEkqB,QAAQ,CAAC/mB,GAAT,KAAiB,IAAjB,GAAwBwpB,MAAxB,GAAiCzC,QAAQ,CAAC/mB,GAD5C,KAEK,IAHP;AAIA,mBAAO8oB,YAAY,CAACzC,WAAD,EAAcoD,YAAd,EAA4B1C,QAA5B,EAAsCnX,KAAtC,CAAnB;AACD;;AAdH;;AA6BA,UAAIrlB,OAAO,CAACw8B,QAAD,CAAP,IAAqBllB,aAAa,CAACklB,QAAD,CAAtC,EAAkD;AAChD,cAAM0C,YAAY,GAAG9B,gBAAgB,CAAC9qB,GAAjB,CAAqB2sB,MAArB,KAAgC,IAArD;AACA,eAAOZ,cAAc,CAACvC,WAAD,EAAcoD,YAAd,EAA4B1C,QAA5B,EAAsCnX,KAAtC,EAA6C,IAA7C,CAArB;AACD;;AAEDkX,MAAAA,wBAAwB,CAACT,WAAD,EAAcU,QAAd,CAAxB;AACD;;AAQD,WAAO,IAAP;AACD;AAED;AAsDA,WAAS2C,sBAAT,CACErD,WADF,EAEEoB,iBAFF,EAGEkC,WAHF,EAIE/Z,KAJF,EAKgB;AACd;AA4BA,QAAIga,mBAAiC,GAAG,IAAxC;AACA,QAAIC,gBAA8B,GAAG,IAArC;AAEA,QAAIP,QAAQ,GAAG7B,iBAAf;AACA,QAAIQ,eAAe,GAAG,CAAtB;AACA,QAAIuB,MAAM,GAAG,CAAb;AACA,QAAIM,YAAY,GAAG,IAAnB;;AACA,WAAOR,QAAQ,KAAK,IAAb,IAAqBE,MAAM,GAAGG,WAAW,CAAC/9B,MAAjD,EAAyD49B,MAAM,EAA/D,EAAmE;AACjE,UAAIF,QAAQ,CAAChrB,KAAT,GAAiBkrB,MAArB,EAA6B;AAC3BM,QAAAA,YAAY,GAAGR,QAAf;AACAA,QAAAA,QAAQ,GAAG,IAAX;AACD,OAHD,MAGO;AACLQ,QAAAA,YAAY,GAAGR,QAAQ,CAAC9iB,OAAxB;AACD;;AACD,YAAMwhB,QAAQ,GAAGqB,UAAU,CACzBhD,WADyB,EAEzBiD,QAFyB,EAGzBK,WAAW,CAACH,MAAD,CAHc,EAIzB5Z,KAJyB,CAA3B;;AAMA,UAAIoY,QAAQ,KAAK,IAAjB,EAAuB;AACrB;AACA;AACA;AACA;AACA,YAAIsB,QAAQ,KAAK,IAAjB,EAAuB;AACrBA,UAAAA,QAAQ,GAAGQ,YAAX;AACD;;AACD;AACD;;AACD,UAAI1C,sBAAJ,EAA4B;AAC1B,YAAIkC,QAAQ,IAAItB,QAAQ,CAAC/wB,SAAT,KAAuB,IAAvC,EAA6C;AAC3C;AACA;AACAowB,UAAAA,WAAW,CAAChB,WAAD,EAAciD,QAAd,CAAX;AACD;AACF;;AACDrB,MAAAA,eAAe,GAAGF,UAAU,CAACC,QAAD,EAAWC,eAAX,EAA4BuB,MAA5B,CAA5B;;AACA,UAAIK,gBAAgB,KAAK,IAAzB,EAA+B;AAC7B;AACAD,QAAAA,mBAAmB,GAAG5B,QAAtB;AACD,OAHD,MAGO;AACL;AACA;AACA;AACA;AACA6B,QAAAA,gBAAgB,CAACrjB,OAAjB,GAA2BwhB,QAA3B;AACD;;AACD6B,MAAAA,gBAAgB,GAAG7B,QAAnB;AACAsB,MAAAA,QAAQ,GAAGQ,YAAX;AACD;;AAED,QAAIN,MAAM,KAAKG,WAAW,CAAC/9B,MAA3B,EAAmC;AACjC;AACA47B,MAAAA,uBAAuB,CAACnB,WAAD,EAAciD,QAAd,CAAvB;AACA,aAAOM,mBAAP;AACD;;AAED,QAAIN,QAAQ,KAAK,IAAjB,EAAuB;AACrB;AACA;AACA,aAAOE,MAAM,GAAGG,WAAW,CAAC/9B,MAA5B,EAAoC49B,MAAM,EAA1C,EAA8C;AAC5C,cAAMxB,QAAQ,GAAGoB,WAAW,CAAC/C,WAAD,EAAcsD,WAAW,CAACH,MAAD,CAAzB,EAAmC5Z,KAAnC,CAA5B;;AACA,YAAIoY,QAAQ,KAAK,IAAjB,EAAuB;AACrB;AACD;;AACDC,QAAAA,eAAe,GAAGF,UAAU,CAACC,QAAD,EAAWC,eAAX,EAA4BuB,MAA5B,CAA5B;;AACA,YAAIK,gBAAgB,KAAK,IAAzB,EAA+B;AAC7B;AACAD,UAAAA,mBAAmB,GAAG5B,QAAtB;AACD,SAHD,MAGO;AACL6B,UAAAA,gBAAgB,CAACrjB,OAAjB,GAA2BwhB,QAA3B;AACD;;AACD6B,QAAAA,gBAAgB,GAAG7B,QAAnB;AACD;;AACD,aAAO4B,mBAAP;AACD,KAzGa;;;AA4Gd,UAAMjC,gBAAgB,GAAGD,oBAAoB,CAACrB,WAAD,EAAciD,QAAd,CAA7C,CA5Gc;;AA+Gd,WAAOE,MAAM,GAAGG,WAAW,CAAC/9B,MAA5B,EAAoC49B,MAAM,EAA1C,EAA8C;AAC5C,YAAMxB,QAAQ,GAAGuB,aAAa,CAC5B5B,gBAD4B,EAE5BtB,WAF4B,EAG5BmD,MAH4B,EAI5BG,WAAW,CAACH,MAAD,CAJiB,EAK5B5Z,KAL4B,CAA9B;;AAOA,UAAIoY,QAAQ,KAAK,IAAjB,EAAuB;AACrB,YAAIZ,sBAAJ,EAA4B;AAC1B,cAAIY,QAAQ,CAAC/wB,SAAT,KAAuB,IAA3B,EAAiC;AAC/B;AACA;AACA;AACA;AACA0wB,YAAAA,gBAAgB,CAAChrB,MAAjB,CACEqrB,QAAQ,CAAChoB,GAAT,KAAiB,IAAjB,GAAwBwpB,MAAxB,GAAiCxB,QAAQ,CAAChoB,GAD5C;AAGD;AACF;;AACDioB,QAAAA,eAAe,GAAGF,UAAU,CAACC,QAAD,EAAWC,eAAX,EAA4BuB,MAA5B,CAA5B;;AACA,YAAIK,gBAAgB,KAAK,IAAzB,EAA+B;AAC7BD,UAAAA,mBAAmB,GAAG5B,QAAtB;AACD,SAFD,MAEO;AACL6B,UAAAA,gBAAgB,CAACrjB,OAAjB,GAA2BwhB,QAA3B;AACD;;AACD6B,QAAAA,gBAAgB,GAAG7B,QAAnB;AACD;AACF;;AAED,QAAIZ,sBAAJ,EAA4B;AAC1B;AACA;AACAO,MAAAA,gBAAgB,CAACp1B,OAAjB,CAAyBgU,KAAK,IAAI8gB,WAAW,CAAChB,WAAD,EAAc9f,KAAd,CAA7C;AACD;;AAED,WAAOqjB,mBAAP;AACD;;AAED,WAASG,yBAAT,CACE1D,WADF,EAEEoB,iBAFF,EAGEuC,mBAHF,EAIEpa,KAJF,EAKgB;AACd;AACA;AAEA,UAAMqa,UAAU,GAAGpoB,aAAa,CAACmoB,mBAAD,CAAhC;;AAJc,UAMZ,OAAOC,UAAP,KAAsB,UANV;AAAA;AAAA;;AAuDd,UAAMN,WAAW,GAAGM,UAAU,CAAC1gC,IAAX,CAAgBygC,mBAAhB,CAApB;;AAvDc,UAwDJL,WAAW,IAAI,IAxDX;AAAA;AAAA;;AA0Dd,QAAIC,mBAAiC,GAAG,IAAxC;AACA,QAAIC,gBAA8B,GAAG,IAArC;AAEA,QAAIP,QAAQ,GAAG7B,iBAAf;AACA,QAAIQ,eAAe,GAAG,CAAtB;AACA,QAAIuB,MAAM,GAAG,CAAb;AACA,QAAIM,YAAY,GAAG,IAAnB;AAEA,QAAII,IAAI,GAAGP,WAAW,CAAC/2B,IAAZ,EAAX;;AACA,WAEE02B,QAAQ,KAAK,IAAb,IAAqB,CAACY,IAAI,CAACC,IAF7B,EAGEX,MAAM,IAAIU,IAAI,GAAGP,WAAW,CAAC/2B,IAAZ,EAHnB,EAIE;AACA,UAAI02B,QAAQ,CAAChrB,KAAT,GAAiBkrB,MAArB,EAA6B;AAC3BM,QAAAA,YAAY,GAAGR,QAAf;AACAA,QAAAA,QAAQ,GAAG,IAAX;AACD,OAHD,MAGO;AACLQ,QAAAA,YAAY,GAAGR,QAAQ,CAAC9iB,OAAxB;AACD;;AACD,YAAMwhB,QAAQ,GAAGqB,UAAU,CAAChD,WAAD,EAAciD,QAAd,EAAwBY,IAAI,CAAChqB,KAA7B,EAAoC0P,KAApC,CAA3B;;AACA,UAAIoY,QAAQ,KAAK,IAAjB,EAAuB;AACrB;AACA;AACA;AACA;AACA,YAAIsB,QAAQ,KAAK,IAAjB,EAAuB;AACrBA,UAAAA,QAAQ,GAAGQ,YAAX;AACD;;AACD;AACD;;AACD,UAAI1C,sBAAJ,EAA4B;AAC1B,YAAIkC,QAAQ,IAAItB,QAAQ,CAAC/wB,SAAT,KAAuB,IAAvC,EAA6C;AAC3C;AACA;AACAowB,UAAAA,WAAW,CAAChB,WAAD,EAAciD,QAAd,CAAX;AACD;AACF;;AACDrB,MAAAA,eAAe,GAAGF,UAAU,CAACC,QAAD,EAAWC,eAAX,EAA4BuB,MAA5B,CAA5B;;AACA,UAAIK,gBAAgB,KAAK,IAAzB,EAA+B;AAC7B;AACAD,QAAAA,mBAAmB,GAAG5B,QAAtB;AACD,OAHD,MAGO;AACL;AACA;AACA;AACA;AACA6B,QAAAA,gBAAgB,CAACrjB,OAAjB,GAA2BwhB,QAA3B;AACD;;AACD6B,MAAAA,gBAAgB,GAAG7B,QAAnB;AACAsB,MAAAA,QAAQ,GAAGQ,YAAX;AACD;;AAED,QAAII,IAAI,CAACC,IAAT,EAAe;AACb;AACA3C,MAAAA,uBAAuB,CAACnB,WAAD,EAAciD,QAAd,CAAvB;AACA,aAAOM,mBAAP;AACD;;AAED,QAAIN,QAAQ,KAAK,IAAjB,EAAuB;AACrB;AACA;AACA,aAAO,CAACY,IAAI,CAACC,IAAb,EAAmBX,MAAM,IAAIU,IAAI,GAAGP,WAAW,CAAC/2B,IAAZ,EAApC,EAAwD;AACtD,cAAMo1B,QAAQ,GAAGoB,WAAW,CAAC/C,WAAD,EAAc6D,IAAI,CAAChqB,KAAnB,EAA0B0P,KAA1B,CAA5B;;AACA,YAAIoY,QAAQ,KAAK,IAAjB,EAAuB;AACrB;AACD;;AACDC,QAAAA,eAAe,GAAGF,UAAU,CAACC,QAAD,EAAWC,eAAX,EAA4BuB,MAA5B,CAA5B;;AACA,YAAIK,gBAAgB,KAAK,IAAzB,EAA+B;AAC7B;AACAD,UAAAA,mBAAmB,GAAG5B,QAAtB;AACD,SAHD,MAGO;AACL6B,UAAAA,gBAAgB,CAACrjB,OAAjB,GAA2BwhB,QAA3B;AACD;;AACD6B,QAAAA,gBAAgB,GAAG7B,QAAnB;AACD;;AACD,aAAO4B,mBAAP;AACD,KAvIa;;;AA0Id,UAAMjC,gBAAgB,GAAGD,oBAAoB,CAACrB,WAAD,EAAciD,QAAd,CAA7C,CA1Ic;;AA6Id,WAAO,CAACY,IAAI,CAACC,IAAb,EAAmBX,MAAM,IAAIU,IAAI,GAAGP,WAAW,CAAC/2B,IAAZ,EAApC,EAAwD;AACtD,YAAMo1B,QAAQ,GAAGuB,aAAa,CAC5B5B,gBAD4B,EAE5BtB,WAF4B,EAG5BmD,MAH4B,EAI5BU,IAAI,CAAChqB,KAJuB,EAK5B0P,KAL4B,CAA9B;;AAOA,UAAIoY,QAAQ,KAAK,IAAjB,EAAuB;AACrB,YAAIZ,sBAAJ,EAA4B;AAC1B,cAAIY,QAAQ,CAAC/wB,SAAT,KAAuB,IAA3B,EAAiC;AAC/B;AACA;AACA;AACA;AACA0wB,YAAAA,gBAAgB,CAAChrB,MAAjB,CACEqrB,QAAQ,CAAChoB,GAAT,KAAiB,IAAjB,GAAwBwpB,MAAxB,GAAiCxB,QAAQ,CAAChoB,GAD5C;AAGD;AACF;;AACDioB,QAAAA,eAAe,GAAGF,UAAU,CAACC,QAAD,EAAWC,eAAX,EAA4BuB,MAA5B,CAA5B;;AACA,YAAIK,gBAAgB,KAAK,IAAzB,EAA+B;AAC7BD,UAAAA,mBAAmB,GAAG5B,QAAtB;AACD,SAFD,MAEO;AACL6B,UAAAA,gBAAgB,CAACrjB,OAAjB,GAA2BwhB,QAA3B;AACD;;AACD6B,QAAAA,gBAAgB,GAAG7B,QAAnB;AACD;AACF;;AAED,QAAIZ,sBAAJ,EAA4B;AAC1B;AACA;AACAO,MAAAA,gBAAgB,CAACp1B,OAAjB,CAAyBgU,KAAK,IAAI8gB,WAAW,CAAChB,WAAD,EAAc9f,KAAd,CAA7C;AACD;;AAED,WAAOqjB,mBAAP;AACD;;AAED,WAASQ,uBAAT,CACE/D,WADF,EAEEoB,iBAFF,EAGEa,WAHF,EAIE1Y,KAJF,EAKS;AACP;AACA;AACA,QAAI6X,iBAAiB,KAAK,IAAtB,IAA8BA,iBAAiB,CAACjxB,GAAlB,KAA0B/C,QAA5D,EAAsE;AACpE;AACA;AACA+zB,MAAAA,uBAAuB,CAACnB,WAAD,EAAcoB,iBAAiB,CAACjhB,OAAhC,CAAvB;AACA,YAAMkiB,QAAQ,GAAGb,QAAQ,CAACJ,iBAAD,EAAoBa,WAApB,CAAzB;AACAI,MAAAA,QAAQ,CAACnyB,MAAT,GAAkB8vB,WAAlB;AACA,aAAOqC,QAAP;AACD,KAVM;AAYP;;;AACAlB,IAAAA,uBAAuB,CAACnB,WAAD,EAAcoB,iBAAd,CAAvB;AACA,UAAMc,OAAO,GAAGC,mBAAmB,CAACF,WAAD,EAAcjC,WAAW,CAACoC,IAA1B,EAAgC7Y,KAAhC,CAAnC;AACA2Y,IAAAA,OAAO,CAAChyB,MAAR,GAAiB8vB,WAAjB;AACA,WAAOkC,OAAP;AACD;;AAED,WAAS8B,sBAAT,CACEhE,WADF,EAEEoB,iBAFF,EAGEnB,OAHF,EAIE1W,KAJF,EAKS;AACP,UAAM5P,GAAG,GAAGsmB,OAAO,CAACtmB,GAApB;AACA,QAAIuG,KAAK,GAAGkhB,iBAAZ;;AACA,WAAOlhB,KAAK,KAAK,IAAjB,EAAuB;AACrB;AACA;AACA,UAAIA,KAAK,CAACvG,GAAN,KAAcA,GAAlB,EAAuB;AACrB,cAAM6lB,WAAW,GAAGS,OAAO,CAACn7B,IAA5B;;AACA,YAAI06B,WAAW,KAAKtlB,mBAApB,EAAyC;AACvC,cAAIgG,KAAK,CAAC/P,GAAN,KAAc9C,QAAlB,EAA4B;AAC1B8zB,YAAAA,uBAAuB,CAACnB,WAAD,EAAc9f,KAAK,CAACC,OAApB,CAAvB;AACA,kBAAMkiB,QAAQ,GAAGb,QAAQ,CAACthB,KAAD,EAAQ+f,OAAO,CAAC7uB,KAAR,CAAcwf,QAAtB,CAAzB;AACAyR,YAAAA,QAAQ,CAACnyB,MAAT,GAAkB8vB,WAAlB;;AAKA,mBAAOqC,QAAP;AACD;AACF,SAXD,MAWO;AACL,cACEniB,KAAK,CAACsf,WAAN,KAAsBA,WAAtB;AAECrI,UAAAA,CAEG,KAJJ;AAMA;AACA;AACA;AACCha,UAAAA,kBAAkB,CAAlB,CAAA,CAAA,CAVH,EAeE;AACAgkB,YAAAA,uBAAuB,CAACnB,WAAD,EAAc9f,KAAK,CAACC,OAApB,CAAvB;AACA,kBAAMkiB,QAAQ,GAAGb,QAAQ,CAACthB,KAAD,EAAQ+f,OAAO,CAAC7uB,KAAhB,CAAzB;AACAixB,YAAAA,QAAQ,CAAClC,GAAT,GAAeJ,SAAS,CAACC,WAAD,EAAc9f,KAAd,EAAqB+f,OAArB,CAAxB;AACAoC,YAAAA,QAAQ,CAACnyB,MAAT,GAAkB8vB,WAAlB;;AAKA,mBAAOqC,QAAP;AACD;AACF,SAxCoB;;;AA0CrBlB,QAAAA,uBAAuB,CAACnB,WAAD,EAAc9f,KAAd,CAAvB;AACA;AACD,OA5CD,MA4CO;AACL8gB,QAAAA,WAAW,CAAChB,WAAD,EAAc9f,KAAd,CAAX;AACD;;AACDA,MAAAA,KAAK,GAAGA,KAAK,CAACC,OAAd;AACD;;AAED,QAAI8f,OAAO,CAACn7B,IAAR,KAAiBoV,mBAArB,EAA0C;AACxC,YAAMgoB,OAAO,GAAGY,uBAAuB,CACrC7C,OAAO,CAAC7uB,KAAR,CAAcwf,QADuB,EAErCoP,WAAW,CAACoC,IAFyB,EAGrC7Y,KAHqC,EAIrC0W,OAAO,CAACtmB,GAJ6B,CAAvC;AAMAuoB,MAAAA,OAAO,CAAChyB,MAAR,GAAiB8vB,WAAjB;AACA,aAAOkC,OAAP;AACD,KATD,MASO;AACL,YAAMA,OAAO,GAAGM,sBAAsB,CAACvC,OAAD,EAAUD,WAAW,CAACoC,IAAtB,EAA4B7Y,KAA5B,CAAtC;AACA2Y,MAAAA,OAAO,CAAC/B,GAAR,GAAcJ,SAAS,CAACC,WAAD,EAAcoB,iBAAd,EAAiCnB,OAAjC,CAAvB;AACAiC,MAAAA,OAAO,CAAChyB,MAAR,GAAiB8vB,WAAjB;AACA,aAAOkC,OAAP;AACD;AACF;;AAED,WAAS+B,qBAAT,CACEjE,WADF,EAEEoB,iBAFF,EAGEsB,MAHF,EAIEnZ,KAJF,EAKS;AACP,UAAM5P,GAAG,GAAG+oB,MAAM,CAAC/oB,GAAnB;AACA,QAAIuG,KAAK,GAAGkhB,iBAAZ;;AACA,WAAOlhB,KAAK,KAAK,IAAjB,EAAuB;AACrB;AACA;AACA,UAAIA,KAAK,CAACvG,GAAN,KAAcA,GAAlB,EAAuB;AACrB,YACEuG,KAAK,CAAC/P,GAAN,KAAcjD,UAAd,IACAgT,KAAK,CAAC/O,SAAN,CAAgB2e,aAAhB,KAAkC4S,MAAM,CAAC5S,aADzC,IAEA5P,KAAK,CAAC/O,SAAN,CAAgBwxB,cAAhB,KAAmCD,MAAM,CAACC,cAH5C,EAIE;AACAxB,UAAAA,uBAAuB,CAACnB,WAAD,EAAc9f,KAAK,CAACC,OAApB,CAAvB;AACA,gBAAMkiB,QAAQ,GAAGb,QAAQ,CAACthB,KAAD,EAAQwiB,MAAM,CAAC9R,QAAP,IAAmB,EAA3B,CAAzB;AACAyR,UAAAA,QAAQ,CAACnyB,MAAT,GAAkB8vB,WAAlB;AACA,iBAAOqC,QAAP;AACD,SATD,MASO;AACLlB,UAAAA,uBAAuB,CAACnB,WAAD,EAAc9f,KAAd,CAAvB;AACA;AACD;AACF,OAdD,MAcO;AACL8gB,QAAAA,WAAW,CAAChB,WAAD,EAAc9f,KAAd,CAAX;AACD;;AACDA,MAAAA,KAAK,GAAGA,KAAK,CAACC,OAAd;AACD;;AAED,UAAM+hB,OAAO,GAAGU,qBAAqB,CAACF,MAAD,EAAS1C,WAAW,CAACoC,IAArB,EAA2B7Y,KAA3B,CAArC;AACA2Y,IAAAA,OAAO,CAAChyB,MAAR,GAAiB8vB,WAAjB;AACA,WAAOkC,OAAP;AACD,GAn7B8C;AAs7B/C;AACA;;;AACA,WAASgC,oBAAT,CACElE,WADF,EAEEoB,iBAFF,EAGEV,QAHF,EAIEnX,KAJF,EAKgB;AACd;AACA;AACA;AACA;AAEA;AACA;AACA;AACA,UAAM4a,yBAAyB,GAC7B,OAAOzD,QAAP,KAAoB,QAApB,IACAA,QAAQ,KAAK,IADb,IAEAA,QAAQ,CAAC57B,IAAT,KAAkBoV,mBAFlB,IAGAwmB,QAAQ,CAAC/mB,GAAT,KAAiB,IAJnB;;AAKA,QAAIwqB,yBAAJ,EAA+B;AAC7BzD,MAAAA,QAAQ,GAAGA,QAAQ,CAACtvB,KAAT,CAAewf,QAA1B;AACD,KAhBa;;;AAmBd,QAAI,OAAO8P,QAAP,KAAoB,QAApB,IAAgCA,QAAQ,KAAK,IAAjD,EAAuD;AACrD,cAAQA,QAAQ,CAACvkB,QAAjB;AACE,aAAKnC,kBAAL;AACE,iBAAO+nB,gBAAgB,CACrBiC,sBAAsB,CACpBhE,WADoB,EAEpBoB,iBAFoB,EAGpBV,QAHoB,EAIpBnX,KAJoB,CADD,CAAvB;;AAQF,aAAKtP,iBAAL;AACE,iBAAO8nB,gBAAgB,CACrBkC,qBAAqB,CACnBjE,WADmB,EAEnBoB,iBAFmB,EAGnBV,QAHmB,EAInBnX,KAJmB,CADA,CAAvB;;AAXJ;;AAiCA,UAAIrlB,OAAO,CAACw8B,QAAD,CAAX,EAAuB;AACrB,eAAO2C,sBAAsB,CAC3BrD,WAD2B,EAE3BoB,iBAF2B,EAG3BV,QAH2B,EAI3BnX,KAJ2B,CAA7B;AAMD;;AAED,UAAI/N,aAAa,CAACklB,QAAD,CAAjB,EAA6B;AAC3B,eAAOgD,yBAAyB,CAC9B1D,WAD8B,EAE9BoB,iBAF8B,EAG9BV,QAH8B,EAI9BnX,KAJ8B,CAAhC;AAMD;;AAEDkX,MAAAA,wBAAwB,CAACT,WAAD,EAAcU,QAAd,CAAxB;AACD;;AAED,QAAI,OAAOA,QAAP,KAAoB,QAApB,IAAgC,OAAOA,QAAP,KAAoB,QAAxD,EAAkE;AAChE,aAAOqB,gBAAgB,CACrBgC,uBAAuB,CACrB/D,WADqB,EAErBoB,iBAFqB,EAGrB,KAAKV,QAHgB,EAIrBnX,KAJqB,CADF,CAAvB;AAQD;;;AASD,WAAO4X,uBAAuB,CAACnB,WAAD,EAAcoB,iBAAd,CAA9B;AACD;;AAED,SAAO8C,oBAAP;AACD;;AAED,AAAO,MAAMA,oBAAoB,GAAGpD,eAAe,CAAC,IAAD,CAA5C;AACP,AAAO,MAAMsD,gBAAgB,GAAGtD,eAAe,CAAC,KAAD,CAAxC;AAEP,AAAO,SAASuD,gBAAT,CACL/3B,OADK,EAELunB,cAFK,EAGC;AAAA,QAEJvnB,OAAO,KAAK,IAAZ,IAAoBunB,cAAc,CAAC3T,KAAf,KAAyB5T,OAAO,CAAC4T,KAFjD;AAAA;AAAA;;AAMN,MAAI2T,cAAc,CAAC3T,KAAf,KAAyB,IAA7B,EAAmC;AACjC;AACD;;AAED,MAAIokB,YAAY,GAAGzQ,cAAc,CAAC3T,KAAlC;AACA,MAAIwgB,QAAQ,GAAGe,oBAAoB,CAAC6C,YAAD,EAAeA,YAAY,CAAC5E,YAA5B,CAAnC;AACA7L,EAAAA,cAAc,CAAC3T,KAAf,GAAuBwgB,QAAvB;AAEAA,EAAAA,QAAQ,CAACxwB,MAAT,GAAkB2jB,cAAlB;;AACA,SAAOyQ,YAAY,CAACnkB,OAAb,KAAyB,IAAhC,EAAsC;AACpCmkB,IAAAA,YAAY,GAAGA,YAAY,CAACnkB,OAA5B;AACAugB,IAAAA,QAAQ,GAAGA,QAAQ,CAACvgB,OAAT,GAAmBshB,oBAAoB,CAChD6C,YADgD,EAEhDA,YAAY,CAAC5E,YAFmC,CAAlD;AAIAgB,IAAAA,QAAQ,CAACxwB,MAAT,GAAkB2jB,cAAlB;AACD;;AACD6M,EAAAA,QAAQ,CAACvgB,OAAT,GAAmB,IAAnB;AACD;;AAGD,AAAO,SAASokB,gBAAT,CAA0B1Q,cAA1B,EAAiDtK,KAAjD,EAAqE;AAC1E,MAAIrJ,KAAK,GAAG2T,cAAc,CAAC3T,KAA3B;;AACA,SAAOA,KAAK,KAAK,IAAjB,EAAuB;AACrBskB,IAAAA,mBAAmB,CAACtkB,KAAD,EAAQqJ,KAAR,CAAnB;AACArJ,IAAAA,KAAK,GAAGA,KAAK,CAACC,OAAd;AACD;AACF;;AC5yCD,MAAMskB,UAAsB,GAAI,EAAhC;AAEA,MAAMhR,oBAAyD,GAAGJ,YAAY,CAC5EoR,UAD4E,CAA9E;AAGA,MAAMC,uBAAwD,GAAGrR,YAAY,CAC3EoR,UAD2E,CAA7E;AAGA,MAAME,uBAEL,GAAGtR,YAAY,CAACoR,UAAD,CAFhB;;AAIA,SAASG,eAAT,CAAgCliC,CAAhC,EAA8D;AAAA,QAE1DA,CAAC,KAAK+hC,UAFoD;AAAA;AAAA;;AAM5D,SAAQ/hC,CAAR;AACD;;AAED,SAASmiC,oBAAT,GAA2C;AACzC,QAAMC,YAAY,GAAGF,eAAe,CAACD,uBAAuB,CAACr4B,OAAzB,CAApC;AACA,SAAOw4B,YAAP;AACD;;AAED,SAASC,iBAAT,CAA2BhoB,KAA3B,EAAyCioB,gBAAzC,EAAsE;AACpE;AACA;AACAj8B,EAAAA,IAAI,CAAC47B,uBAAD,EAA0BK,gBAA1B,AAAA,CAAJ,CAHoE;AAKpE;;AACAj8B,EAAAA,IAAI,CAAC27B,uBAAD,EAA0B3nB,KAA1B,AAAA,CAAJ,CANoE;AASpE;AACA;AACA;AACA;;AACAhU,EAAAA,IAAI,CAAC0qB,oBAAD,EAAqBgR,UAArB,AAAA,CAAJ;AACA,QAAMQ,eAAe,GAAGzV,kBAAkB,CAACwV,AAAD,CAA1C,CAdoE;;AAgBpEn8B,EAAAA,GAAG,CAAC4qB,oBAAD,CAAH;AACA1qB,EAAAA,IAAI,CAAC0qB,oBAAD,EAAqBwR,eAArB,AAAA,CAAJ;AACD;;AAED,SAASC,gBAAT,CAA0BnoB,KAA1B,EAAwC;AACtClU,EAAAA,GAAG,CAAC4qB,oBAAD,CAAH;AACA5qB,EAAAA,GAAG,CAAC67B,uBAAD,AAAA,CAAH;AACA77B,EAAAA,GAAG,CAAC87B,uBAAD,AAAA,CAAH;AACD;;AAED,SAASQ,cAAT,GAAuC;AACrC,QAAM5iC,OAAO,GAAGqiC,eAAe,CAACnR,oBAAkB,CAACnnB,OAApB,CAA/B;AACA,SAAO/J,OAAP;AACD;;AAED,SAAS6iC,eAAT,CAAyBroB,KAAzB,EAA6C;AAC3C,QAAM+nB,YAAuB,GAAGF,eAAe,CAC7CD,uBAAuB,CAACr4B,OADqB,CAA/C;AAGA,QAAM/J,OAAoB,GAAGqiC,eAAe,CAACnR,oBAAkB,CAACnnB,OAApB,CAA5C;AACA,QAAMuxB,WAAW,GAAGpO,mBAAmB,CAACltB,OAAD,EAAUwa,KAAK,CAACjY,IAAhB,AAAA,CAAvC,CAL2C;;AAQ3C,MAAIvC,OAAO,KAAKs7B,WAAhB,EAA6B;AAC3B;AACD,GAV0C;AAa3C;;;AACA90B,EAAAA,IAAI,CAAC27B,uBAAD,EAA0B3nB,KAA1B,AAAA,CAAJ;AACAhU,EAAAA,IAAI,CAAC0qB,oBAAD,EAAqBoK,WAArB,AAAA,CAAJ;AACD;;AAED,SAASwH,cAAT,CAAwBtoB,KAAxB,EAA4C;AAC1C;AACA;AACA,MAAI2nB,uBAAuB,CAACp4B,OAAxB,KAAoCyQ,KAAxC,EAA+C;AAC7C;AACD;;AAEDlU,EAAAA,GAAG,CAAC4qB,oBAAD,CAAH;AACA5qB,EAAAA,GAAG,CAAC67B,uBAAD,AAAA,CAAH;AACD;;ACrFD,MAAMY,sBAAuC,GAAG,IAAhD;AAGA;AACA;AACA;;AACA,MAAMC,0BAA2C,GAAG,IAApD;AAIA;AACA;AACA;AACA;AACA;AACA;;AACA,AAAO,MAAMC,8BAAsD,GAAG,IAA/D;AAIP;AACA;;AACA,AAAO,MAAMC,qBAA6C,GAAG,IAAtD;AAEP,AAAO,MAAMC,mBAAiD,GAAGrS,YAAY,CAC3EiS,sBAD2E,CAAtE;AAIP,AAAO,SAASK,kBAAT,CACL5Q,aADK,EAEL6Q,IAFK,EAGI;AACT,SAAO,CAAC7Q,aAAa,GAAG6Q,IAAjB,MAA2B,CAAlC;AACD;AAED,AAAO,SAASC,gCAAT,CACL9Q,aADK,EAEY;AACjB,SAAOA,aAAa,GAAGwQ,0BAAvB;AACD;AAED,AAAO,SAASO,yBAAT,CACL/Q,aADK,EAELgR,cAFK,EAGY;AACjB,SAAQhR,aAAa,GAAGwQ,0BAAjB,GAA+CQ,cAAtD;AACD;AAED,AAAO,SAASC,yBAAT,CACLjR,aADK,EAELkR,cAFK,EAGY;AACjB,SAAOlR,aAAa,GAAGkR,cAAvB;AACD;AAED,AAAO,SAASC,mBAAT,CACLnpB,KADK,EAELopB,UAFK,EAGC;AACNp9B,EAAAA,IAAI,CAAC28B,mBAAD,EAAsBS,UAAtB,AAAA,CAAJ;AACD;AAED,AAAO,SAASC,kBAAT,CAA4BrpB,KAA5B,EAAgD;AACrDlU,EAAAA,GAAG,CAAC68B,mBAAD,AAAA,CAAH;AACD;;AClBM,SAASW,qBAAT,CACLxS,cADK,EAELyS,kBAFK,EAGI;AACT;AACA;AACA,QAAM1K,SAA+B,GAAG/H,cAAc,CAAC6G,aAAvD;;AACA,MAAIkB,SAAS,KAAK,IAAlB,EAAwB;AACtB,QAAIA,SAAS,CAAC2K,UAAV,KAAyB,IAA7B,EAAmC;AACjC;AACA,aAAO,IAAP;AACD;;AACD,WAAO,KAAP;AACD;;AACD,QAAMn1B,KAAK,GAAGyiB,cAAc,CAACqL,aAA7B,CAXS;;AAaT,MAAI9tB,KAAK,CAACo1B,0BAAN,KAAqC,IAAzC,EAA+C;AAC7C,WAAO,IAAP;AACD,GAfQ;AAiBT;;;AACA,MAAIF,kBAAJ,EAAwB;AACtB,WAAO,KAAP;AACD,GApBQ;;;AAsBT,SAAO,IAAP;AACD;AAED,AAAO,SAASG,kBAAT,CAA4BC,GAA5B,EAAsD;AAC3D,MAAIrnB,IAAI,GAAGqnB,GAAX;;AACA,SAAOrnB,IAAI,KAAK,IAAhB,EAAsB;AACpB,QAAIA,IAAI,CAAClP,GAAL,KAAaxC,iBAAjB,EAAoC;AAClC,YAAM2wB,KAA2B,GAAGjf,IAAI,CAACqb,aAAzC;;AACA,UAAI4D,KAAK,KAAK,IAAd,EAAoB;AAClB,cAAMiI,UAAmC,GAAGjI,KAAK,CAACiI,UAAlD;;AACA,YACEA,UAAU,KAAK,IAAf,IACArY,yBAAyB,CAACqY,AAAD,CADzB,IAEApY,0BAA0B,CAACoY,AAAD,CAH5B,EAIE;AACA,iBAAOlnB,IAAP;AACD;AACF;AACF,KAZD,MAYO,IACLA,IAAI,CAAClP,GAAL,KAAalC,qBAAb;AAEA;AACAoR,IAAAA,IAAI,CAAC6f,aAAL,CAAmByH,WAAnB,KAAmC3hC,SAJ9B,EAKL;AACA,YAAM4hC,UAAU,GAAG,CAACvnB,IAAI,CAACG,KAAL,GAAa1B,UAAd,MAA8BR,OAAjD;;AACA,UAAIspB,UAAJ,EAAgB;AACd,eAAOvnB,IAAP;AACD;AACF,KAVM,MAUA,IAAIA,IAAI,CAACa,KAAL,KAAe,IAAnB,EAAyB;AAC9Bb,MAAAA,IAAI,CAACa,KAAL,CAAWhQ,MAAX,GAAoBmP,IAApB;AACAA,MAAAA,IAAI,GAAGA,IAAI,CAACa,KAAZ;AACA;AACD;;AACD,QAAIb,IAAI,KAAKqnB,GAAb,EAAkB;AAChB,aAAO,IAAP;AACD;;AACD,WAAOrnB,IAAI,CAACc,OAAL,KAAiB,IAAxB,EAA8B;AAC5B,UAAId,IAAI,CAACnP,MAAL,KAAgB,IAAhB,IAAwBmP,IAAI,CAACnP,MAAL,KAAgBw2B,GAA5C,EAAiD;AAC/C,eAAO,IAAP;AACD;;AACDrnB,MAAAA,IAAI,GAAGA,IAAI,CAACnP,MAAZ;AACD;;AACDmP,IAAAA,IAAI,CAACc,OAAL,CAAajQ,MAAb,GAAsBmP,IAAI,CAACnP,MAA3B;AACAmP,IAAAA,IAAI,GAAGA,IAAI,CAACc,OAAZ;AACD;;AACD,SAAO,IAAP;AACD;;AC5HM,MAAM7C,SAAO;AAAG;AAAO,KAAvB;;AAGP,AAAO,MAAMupB,SAAS;AAAG;AAAM,KAAxB;;AAGP,AAAO,MAAMC,MAAM;AAAG;AAAS,KAAxB;AACP,AAAO,MAAM7oB,SAAO;AAAG;AAAQ,KAAxB;;AC8CP,IAAI8oB,WAAoB,GAAG,KAA3B;;AAYA,SAASC,mBAAT,CAA6BjqB,KAA7B,EAAoD;AAClD,EAAwB;AACtB,WAAO,KAAP;AACD;AAOF;;AA2MD,SAASkqB,4BAAT,CACElqB,KADF,EAEE8R,qBAFF,EAGEC,WAHF,EAIW;AACT,EAAwB;AAAA;AAAA;AAAA;AAMvB;AAmBF;;AAED,SAASoY,gCAAT,CAA0CnqB,KAA1C,EAAiE;AAC/D,EAAwB;AAAA;AAAA;AAAA;AAMvB;AAID,QAAM0F,YAAY,GAAG2L,mBAAmB,CAAC6C,AAAD,CAAxC;AAmCD;;AAwDD,SAASkW,iBAAT,CAA2BpqB,KAA3B,EAAkD;AAChD,EAAwB;AACtB,WAAO,KAAP;AACD;AAyCF;;AAYD,SAASqqB,cAAT,GAAmC;AACjC,SAAOL,WAAP;AACD;;ACldD;AACA;;AACA,MAAMM,qBAAgD,GAAG,EAAzD;AAEA;AAMA,AAAO,SAASC,iBAAT,CAA2BC,aAA3B,EAAoE;AACzEF,EAAAA,qBAAqB,CAACt+B,IAAtB,CAA2Bw+B,aAA3B;AACD;AAED,AAAO,SAASC,2BAAT,GAA6C;AAClD,OAAK,IAAIliC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG+hC,qBAAqB,CAAC9hC,MAA1C,EAAkDD,CAAC,EAAnD,EAAuD;AACrD,UAAMiiC,aAAa,GAAGF,qBAAqB,CAAC/hC,CAAD,CAA3C;;AACA,IAAuB;AACrBiiC,MAAAA,aAAa,CAACE,6BAAd,GAA8C,IAA9C;AACD,KAFD;AAKD;;AACDJ,EAAAA,qBAAqB,CAAC9hC,MAAtB,GAA+B,CAA/B;AACD;AAED,AAAO,SAASmiC,wBAAT,CACLH,aADK,EAEwB;AAC7B,EAAuB;AACrB,WAAOA,aAAa,CAACE,6BAArB;AACD,GAFD;AAKD;AAED,AAAO,SAASE,wBAAT,CACLJ,aADK,EAELK,OAFK,EAGC;AACN,EAAuB;AACrBL,IAAAA,aAAa,CAACE,6BAAd,GAA8CG,OAA9C;AACD,GAFD;;AAKAP,EAAAA,qBAAqB,CAACt+B,IAAtB,CAA2Bw+B,aAA3B;AACD;;AC4FM,SAASM,qBAAT,GAA0D;AAC/D,EAAkB;AAChB,WAAO,IAAP;AACD,GAH8D;AAM/D,AAuBD;;MC9DMpV,2BAAmD3Y,qBAAnD2Y;MAAwB4D,4BAA2Bvc,qBAA3Buc;AAmB/B;AAmCA;AACA,IAAIkC,WAAkB,GAAGzR,OAAzB;AAEA;;AACA,IAAI+Q,yBAA8B,GAAI,IAAtC;AAGA;AACA;AACA;;AACA,IAAIiQ,WAAwB,GAAG,IAA/B;AACA,IAAIC,kBAA+B,GAAG,IAAtC;AAGA;AACA;AACA;;AACA,IAAIC,4BAAqC,GAAG,KAA5C;AAEA;AACA;AACA;;AACA,IAAIC,0CAAmD,GAAG,KAA1D;AAEA,MAAMC,eAAe,GAAG,EAAxB;;AAuGA,SAASC,qBAAT,GAAiC;AAAA;AAAA;AAAA;AAUhC;;AAED,SAASC,kBAAT,CACEC,QADF,EAEEC,QAFF,EAGE;AACA;AAOA,MAAIA,QAAQ,KAAK,IAAjB,EAAuB;AACrB;AAQA,WAAO,KAAP;AACD;;AAiBD,OAAK,IAAIhjC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGgjC,QAAQ,CAAC/iC,MAAb,IAAuBD,CAAC,GAAG+iC,QAAQ,CAAC9iC,MAApD,EAA4DD,CAAC,EAA7D,EAAiE;AAC/D,QAAImxB,QAAE,CAAC4R,QAAQ,CAAC/iC,CAAD,CAAT,EAAcgjC,QAAQ,CAAChjC,CAAD,CAAtB,CAAN,EAAkC;AAChC;AACD;;AACD,WAAO,KAAP;AACD;;AACD,SAAO,IAAP;AACD;;AAED,AAAO,SAASijC,eAAT,CACLj8B,OADK,EAELunB,cAFK,EAGLC,SAHK,EAIL1iB,KAJK,EAKLo3B,SALK,EAMLC,eANK,EAOA;AACLlQ,EAAAA,WAAW,GAAGkQ,eAAd;AACA5Q,EAAAA,yBAAuB,GAAGhE,cAA1B;;AAaAA,EAAAA,cAAc,CAAC6G,aAAf,GAA+B,IAA/B;AACA7G,EAAAA,cAAc,CAACqF,WAAf,GAA6B,IAA7B;AACArF,EAAAA,cAAc,CAACtK,KAAf,GAAuBzC,OAAvB,CAjBK;AAoBL;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;;AACA,EAaO;AACL2L,IAAAA,wBAAsB,CAACnmB,OAAvB,GACEA,OAAO,KAAK,IAAZ,IAAoBA,OAAO,CAACouB,aAAR,KAA0B,IAA9C,GACIgO,sBADJ,GAEIC,uBAHN;AAID;;AAED,MAAI/X,QAAQ,GAAGkD,SAAS,CAAC1iB,KAAD,EAAQo3B,SAAR,CAAxB,CApDK;;AAuDL,MAAIP,0CAAJ,EAAgD;AAC9C;AACA;AACA,QAAIW,iBAAyB,GAAG,CAAhC;;AACA,OAAG;AACDX,MAAAA,0CAA0C,GAAG,KAA7C;;AADC,YAGCW,iBAAiB,GAAGV,eAHrB;AAAA;AAAA;;AAQDU,MAAAA,iBAAiB,IAAI,CAArB;;;AAQAd,MAAAA,WAAW,GAAG,IAAd;AACAC,MAAAA,kBAAkB,GAAG,IAArB;AAEAlU,MAAAA,cAAc,CAACqF,WAAf,GAA6B,IAA7B;;AAOAzG,MAAAA,wBAAsB,CAACnmB,OAAvB,GAAiC6qB,CAE7B0R,yBAFJ;AAIAjY,MAAAA,QAAQ,GAAGkD,SAAS,CAAC1iB,KAAD,EAAQo3B,SAAR,CAApB;AACD,KA/BD,QA+BSP,0CA/BT;AAgCD,GA3FI;AA8FL;;;AACAxV,EAAAA,wBAAsB,CAACnmB,OAAvB,GAAiCw8B,qBAAjC;AAOA;;;AACA,QAAMC,oBAAoB,GACxBjB,WAAW,KAAK,IAAhB,IAAwBA,WAAW,CAACv7B,IAAZ,KAAqB,IAD/C;AAGAgsB,EAAAA,WAAW,GAAGzR,OAAd;AACA+Q,EAAAA,yBAAuB,GAAI,IAA3B;AAEAiQ,EAAAA,WAAW,GAAG,IAAd;AACAC,EAAAA,kBAAkB,GAAG,IAArB;;AA6BAC,EAAAA,4BAA4B,GAAG,KAA/B;;AA3IK,OA8IH,CAACe,oBA9IE;AAAA;AAAA;;AAwKL,SAAOnY,QAAP;AACD;AAED,AAAO,SAASoY,YAAT,CACL18B,OADK,EAELunB,cAFK,EAGLtK,KAHK,EAIL;AACAsK,EAAAA,cAAc,CAACqF,WAAf,GAA6B5sB,OAAO,CAAC4sB,WAArC,CADA;AAGA;;AACA,EAWO;AACLrF,IAAAA,cAAc,CAACrU,KAAf,IAAwB,EAAEypB,OAAa,GAAGC,MAAlB,CAAxB;AACD;;AACD58B,EAAAA,OAAO,CAACid,KAAR,GAAgB6C,WAAW,CAAC9f,OAAO,CAACid,KAAT,EAAgBA,KAAhB,CAA3B;AACD;AAED,AAAO,SAAS4f,oBAAT,GAAsC;AAC3C;AACA;AACA1W,EAAAA,wBAAsB,CAACnmB,OAAvB,GAAiCw8B,qBAAjC;;AAEA,MAAId,4BAAJ,EAAkC;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAIhjB,IAAiB,GAAG6S,yBAAuB,CAAC6C,aAAhD;;AACA,WAAO1V,IAAI,KAAK,IAAhB,EAAsB;AACpB,YAAMoR,KAAK,GAAGpR,IAAI,CAACoR,KAAnB;;AACA,UAAIA,KAAK,KAAK,IAAd,EAAoB;AAClBA,QAAAA,KAAK,CAACiD,OAAN,GAAgB,IAAhB;AACD;;AACDrU,MAAAA,IAAI,GAAGA,IAAI,CAACzY,IAAZ;AACD;;AACDy7B,IAAAA,4BAA4B,GAAG,KAA/B;AACD;;AAEDzP,EAAAA,WAAW,GAAGzR,OAAd;AACA+Q,EAAAA,yBAAuB,GAAI,IAA3B;AAEAiQ,EAAAA,WAAW,GAAG,IAAd;AACAC,EAAAA,kBAAkB,GAAG,IAArB;;AAWAE,EAAAA,0CAA0C,GAAG,KAA7C;AACD;;AAED,SAASmB,uBAAT,GAAyC;AACvC,QAAMpkB,IAAU,GAAG;AACjB0V,IAAAA,aAAa,EAAE,IADE;AAGjBD,IAAAA,SAAS,EAAE,IAHM;AAIjB4O,IAAAA,SAAS,EAAE,IAJM;AAKjBjT,IAAAA,KAAK,EAAE,IALU;AAOjB7pB,IAAAA,IAAI,EAAE;AAPW,GAAnB;;AAUA,MAAIw7B,kBAAkB,KAAK,IAA3B,EAAiC;AAC/B;AACAlQ,IAAAA,yBAAuB,CAAC6C,aAAxB,GAAwCqN,kBAAkB,GAAG/iB,IAA7D;AACD,GAHD,MAGO;AACL;AACA+iB,IAAAA,kBAAkB,GAAGA,kBAAkB,CAACx7B,IAAnB,GAA0ByY,IAA/C;AACD;;AACD,SAAO+iB,kBAAP;AACD;;AAED,SAASuB,wBAAT,GAA0C;AACxC;AACA;AACA;AACA;AACA;AACA,MAAIC,eAAJ;;AACA,MAAIzB,WAAW,KAAK,IAApB,EAA0B;AACxB,UAAMx7B,OAAO,GAAGurB,yBAAuB,CAACjnB,SAAxC;;AACA,QAAItE,OAAO,KAAK,IAAhB,EAAsB;AACpBi9B,MAAAA,eAAe,GAAGj9B,OAAO,CAACouB,aAA1B;AACD,KAFD,MAEO;AACL6O,MAAAA,eAAe,GAAG,IAAlB;AACD;AACF,GAPD,MAOO;AACLA,IAAAA,eAAe,GAAGzB,WAAW,CAACv7B,IAA9B;AACD;;AAED,MAAIi9B,sBAAJ;;AACA,MAAIzB,kBAAkB,KAAK,IAA3B,EAAiC;AAC/ByB,IAAAA,sBAAsB,GAAG3R,yBAAuB,CAAC6C,aAAjD;AACD,GAFD,MAEO;AACL8O,IAAAA,sBAAsB,GAAGzB,kBAAkB,CAACx7B,IAA5C;AACD;;AAED,MAAIi9B,sBAAsB,KAAK,IAA/B,EAAqC;AACnC;AACAzB,IAAAA,kBAAkB,GAAGyB,sBAArB;AACAA,IAAAA,sBAAsB,GAAGzB,kBAAkB,CAACx7B,IAA5C;AAEAu7B,IAAAA,WAAW,GAAGyB,eAAd;AACD,GAND,MAMO;AACL;AADK,UAIHA,eAAe,KAAK,IAJjB;AAAA;AAAA;;AAOLzB,IAAAA,WAAW,GAAGyB,eAAd;AAEA,UAAME,OAAa,GAAG;AACpB/O,MAAAA,aAAa,EAAEoN,WAAW,CAACpN,aADP;AAGpBD,MAAAA,SAAS,EAAEqN,WAAW,CAACrN,SAHH;AAIpB4O,MAAAA,SAAS,EAAEvB,WAAW,CAACuB,SAJH;AAKpBjT,MAAAA,KAAK,EAAE0R,WAAW,CAAC1R,KALC;AAOpB7pB,MAAAA,IAAI,EAAE;AAPc,KAAtB;;AAUA,QAAIw7B,kBAAkB,KAAK,IAA3B,EAAiC;AAC/B;AACAlQ,MAAAA,yBAAuB,CAAC6C,aAAxB,GAAwCqN,kBAAkB,GAAG0B,OAA7D;AACD,KAHD,MAGO;AACL;AACA1B,MAAAA,kBAAkB,GAAGA,kBAAkB,CAACx7B,IAAnB,GAA0Bk9B,OAA/C;AACD;AACF;;AACD,SAAO1B,kBAAP;AACD;;AAED,SAAS2B,kCAAT,GAA4E;AAC1E,SAAO;AACLC,IAAAA,UAAU,EAAE;AADP,GAAP;AAGD;;AAED,SAASC,iBAAT,CAA8BtL,KAA9B,EAAwCuL,MAAxC,EAAwE;AACtE;AACA,SAAO,OAAOA,MAAP,KAAkB,UAAlB,GAA+BA,MAAM,CAACvL,KAAD,CAArC,GAA+CuL,MAAtD;AACD;;AAED,SAASC,YAAT,CACEC,OADF,EAEEC,UAFF,EAGErtB,IAHF,EAIoB;AAClB,QAAMqI,IAAI,GAAGokB,uBAAuB,EAApC;AACA,MAAIa,YAAJ;;AACA,MAAIttB,IAAI,KAAK3X,SAAb,EAAwB;AACtBilC,IAAAA,YAAY,GAAGttB,IAAI,CAACqtB,UAAD,CAAnB;AACD,GAFD,MAEO;AACLC,IAAAA,YAAY,GAAKD,UAAjB;AACD;;AACDhlB,EAAAA,IAAI,CAAC0V,aAAL,GAAqB1V,IAAI,CAACyV,SAAL,GAAiBwP,YAAtC;AACA,QAAM7T,KAAwB,GAAG;AAC/BiD,IAAAA,OAAO,EAAE,IADsB;AAE/BW,IAAAA,WAAW,EAAE,IAFkB;AAG/BzQ,IAAAA,KAAK,EAAEzC,OAHwB;AAI/BojB,IAAAA,QAAQ,EAAE,IAJqB;AAK/BC,IAAAA,mBAAmB,EAAEJ,OALU;AAM/BK,IAAAA,iBAAiB,EAAGH;AANW,GAAjC;AAQAjlB,EAAAA,IAAI,CAACoR,KAAL,GAAaA,KAAb;AACA,QAAM8T,QAAqB,GAAI9T,KAAK,CAAC8T,QAAN,GAAkBG,cAAc,CAACC,IAAf,CAC/C,IAD+C,EAE/CzS,yBAF+C,EAG/CzB,KAH+C,CAAjD;AAKA,SAAO,CAACpR,IAAI,CAAC0V,aAAN,EAAqBwP,QAArB,CAAP;AACD;;AAED,SAASK,aAAT,CACER,OADF,EAEEC,UAFF,EAGErtB,IAHF,EAIoB;AAClB,QAAMqI,IAAI,GAAGskB,wBAAwB,EAArC;AACA,QAAMlT,KAAK,GAAGpR,IAAI,CAACoR,KAAnB;;AAFkB,QAIhBA,KAAK,KAAK,IAJM;AAAA;AAAA;;AAQlBA,EAAAA,KAAK,CAAC+T,mBAAN,GAA4BJ,OAA5B;AAEA,QAAMz9B,OAAa,GAAIw7B,WAAvB,CAVkB;;AAalB,MAAIuB,SAAS,GAAG/8B,OAAO,CAAC+8B,SAAxB,CAbkB;;AAgBlB,QAAMtN,YAAY,GAAG3F,KAAK,CAACiD,OAA3B;;AACA,MAAI0C,YAAY,KAAK,IAArB,EAA2B;AACzB;AACA;AACA,QAAIsN,SAAS,KAAK,IAAlB,EAAwB;AACtB;AACA,YAAMmB,SAAS,GAAGnB,SAAS,CAAC98B,IAA5B;AACA,YAAMk+B,YAAY,GAAG1O,YAAY,CAACxvB,IAAlC;AACA88B,MAAAA,SAAS,CAAC98B,IAAV,GAAiBk+B,YAAjB;AACA1O,MAAAA,YAAY,CAACxvB,IAAb,GAAoBi+B,SAApB;AACD;;AAWDl+B,IAAAA,OAAO,CAAC+8B,SAAR,GAAoBA,SAAS,GAAGtN,YAAhC;AACA3F,IAAAA,KAAK,CAACiD,OAAN,GAAgB,IAAhB;AACD;;AAED,MAAIgQ,SAAS,KAAK,IAAlB,EAAwB;AACtB;AACA,UAAMqB,KAAK,GAAGrB,SAAS,CAAC98B,IAAxB;AACA,QAAI0vB,QAAQ,GAAG3vB,OAAO,CAACmuB,SAAvB;AAEA,QAAI0B,YAAY,GAAG,IAAnB;AACA,QAAIwO,iBAAiB,GAAG,IAAxB;AACA,QAAIC,gBAAgB,GAAG,IAAvB;AACA,QAAI7R,MAAM,GAAG2R,KAAb;;AACA,OAAG;AACD,YAAM/d,UAAU,GAAGoM,MAAM,CAACvO,IAA1B;;AACA,UAAI,CAACyB,eAAe,CAACsM,WAAD,EAAc5L,UAAd,CAApB,EAA+C;AAC7C;AACA;AACA;AACA,cAAMqO,KAAmB,GAAG;AAC1BxQ,UAAAA,IAAI,EAAEmC,UADoB;AAE1Bkd,UAAAA,MAAM,EAAE9Q,MAAM,CAAC8Q,MAFW;AAG1BgB,UAAAA,YAAY,EAAE9R,MAAM,CAAC8R,YAHK;AAI1BC,UAAAA,UAAU,EAAE/R,MAAM,CAAC+R,UAJO;AAK1Bv+B,UAAAA,IAAI,EAAG;AALmB,SAA5B;;AAOA,YAAIq+B,gBAAgB,KAAK,IAAzB,EAA+B;AAC7BD,UAAAA,iBAAiB,GAAGC,gBAAgB,GAAG5P,KAAvC;AACAmB,UAAAA,YAAY,GAAGF,QAAf;AACD,SAHD,MAGO;AACL2O,UAAAA,gBAAgB,GAAGA,gBAAgB,CAACr+B,IAAjB,GAAwByuB,KAA3C;AACD,SAhB4C;AAkB7C;AACA;;;AACAnD,QAAAA,yBAAuB,CAACtO,KAAxB,GAAgC4C,UAAU,CACxC0L,yBAAuB,CAACtO,KADgB,EAExCoD,UAFwC,CAA1C;AAIA6P,QAAAA,sBAAsB,CAAC7P,UAAD,CAAtB;AACD,OAzBD,MAyBO;AACL;AAEA,YAAIie,gBAAgB,KAAK,IAAzB,EAA+B;AAC7B,gBAAM5P,KAAmB,GAAG;AAC1B;AACA;AACA;AACAxQ,YAAAA,IAAI,EAAEzD,MAJoB;AAK1B8iB,YAAAA,MAAM,EAAE9Q,MAAM,CAAC8Q,MALW;AAM1BgB,YAAAA,YAAY,EAAE9R,MAAM,CAAC8R,YANK;AAO1BC,YAAAA,UAAU,EAAE/R,MAAM,CAAC+R,UAPO;AAQ1Bv+B,YAAAA,IAAI,EAAG;AARmB,WAA5B;AAUAq+B,UAAAA,gBAAgB,GAAGA,gBAAgB,CAACr+B,IAAjB,GAAwByuB,KAA3C;AACD,SAfI;;;AAkBL,YAAIjC,MAAM,CAAC8R,YAAP,KAAwBd,OAA5B,EAAqC;AACnC;AACA;AACA9N,UAAAA,QAAQ,GAAKlD,MAAM,CAAC+R,UAApB;AACD,SAJD,MAIO;AACL,gBAAMjB,MAAM,GAAG9Q,MAAM,CAAC8Q,MAAtB;AACA5N,UAAAA,QAAQ,GAAG8N,OAAO,CAAC9N,QAAD,EAAW4N,MAAX,CAAlB;AACD;AACF;;AACD9Q,MAAAA,MAAM,GAAGA,MAAM,CAACxsB,IAAhB;AACD,KAvDD,QAuDSwsB,MAAM,KAAK,IAAX,IAAmBA,MAAM,KAAK2R,KAvDvC;;AAyDA,QAAIE,gBAAgB,KAAK,IAAzB,EAA+B;AAC7BzO,MAAAA,YAAY,GAAGF,QAAf;AACD,KAFD,MAEO;AACL2O,MAAAA,gBAAgB,CAACr+B,IAAjB,GAAyBo+B,iBAAzB;AACD,KAtEqB;AAyEtB;;;AACA,QAAI,CAAClU,QAAE,CAACwF,QAAD,EAAWjX,IAAI,CAAC0V,aAAhB,CAAP,EAAuC;AACrCnB,MAAAA,gCAAgC;AACjC;;AAEDvU,IAAAA,IAAI,CAAC0V,aAAL,GAAqBuB,QAArB;AACAjX,IAAAA,IAAI,CAACyV,SAAL,GAAiB0B,YAAjB;AACAnX,IAAAA,IAAI,CAACqkB,SAAL,GAAiBuB,gBAAjB;AAEAxU,IAAAA,KAAK,CAACgU,iBAAN,GAA0BnO,QAA1B;AACD,GA5HiB;AA+HlB;AACA;;;AACA,QAAMM,eAAe,GAAGnG,KAAK,CAAC4D,WAA9B;;AACA,MAAIuC,eAAe,KAAK,IAAxB,EAA8B;AAC5B,QAAIvC,WAAW,GAAGuC,eAAlB;;AACA,OAAG;AACD,YAAMwO,eAAe,GAAG/Q,WAAW,CAACxP,IAApC;AACAqN,MAAAA,yBAAuB,CAACtO,KAAxB,GAAgC4C,UAAU,CACxC0L,yBAAuB,CAACtO,KADgB,EAExCwhB,eAFwC,CAA1C;AAIAvO,MAAAA,sBAAsB,CAACuO,eAAD,CAAtB;AACA/Q,MAAAA,WAAW,GAAKA,WAAD,CAAmBztB,IAAlC;AACD,KARD,QAQSytB,WAAW,KAAKuC,eARzB;AASD,GAXD,MAWO,IAAI8M,SAAS,KAAK,IAAlB,EAAwB;AAC7B;AACA;AACAjT,IAAAA,KAAK,CAAC7M,KAAN,GAAczC,OAAd;AACD;;AAED,QAAMojB,QAAqB,GAAI9T,KAAK,CAAC8T,QAArC;AACA,SAAO,CAACllB,IAAI,CAAC0V,aAAN,EAAqBwP,QAArB,CAAP;AACD;;AAED,SAASc,eAAT,CACEjB,OADF,EAEEC,UAFF,EAGErtB,IAHF,EAIoB;AAClB,QAAMqI,IAAI,GAAGskB,wBAAwB,EAArC;AACA,QAAMlT,KAAK,GAAGpR,IAAI,CAACoR,KAAnB;;AAFkB,QAIhBA,KAAK,KAAK,IAJM;AAAA;AAAA;;AAQlBA,EAAAA,KAAK,CAAC+T,mBAAN,GAA4BJ,OAA5B,CARkB;AAWlB;;AACA,QAAMG,QAAqB,GAAI9T,KAAK,CAAC8T,QAArC;AACA,QAAMe,qBAAqB,GAAG7U,KAAK,CAACiD,OAApC;AACA,MAAI4C,QAAQ,GAAGjX,IAAI,CAAC0V,aAApB;;AACA,MAAIuQ,qBAAqB,KAAK,IAA9B,EAAoC;AAClC;AACA7U,IAAAA,KAAK,CAACiD,OAAN,GAAgB,IAAhB;AAEA,UAAM6R,sBAAsB,GAAGD,qBAAqB,CAAC1+B,IAArD;AACA,QAAIwsB,MAAM,GAAGmS,sBAAb;;AACA,OAAG;AACD;AACA;AACA;AACA,YAAMrB,MAAM,GAAG9Q,MAAM,CAAC8Q,MAAtB;AACA5N,MAAAA,QAAQ,GAAG8N,OAAO,CAAC9N,QAAD,EAAW4N,MAAX,CAAlB;AACA9Q,MAAAA,MAAM,GAAGA,MAAM,CAACxsB,IAAhB;AACD,KAPD,QAOSwsB,MAAM,KAAKmS,sBAPpB,EANkC;AAgBlC;;;AACA,QAAI,CAACzU,QAAE,CAACwF,QAAD,EAAWjX,IAAI,CAAC0V,aAAhB,CAAP,EAAuC;AACrCnB,MAAAA,gCAAgC;AACjC;;AAEDvU,IAAAA,IAAI,CAAC0V,aAAL,GAAqBuB,QAArB,CArBkC;AAuBlC;AACA;AACA;;AACA,QAAIjX,IAAI,CAACqkB,SAAL,KAAmB,IAAvB,EAA6B;AAC3BrkB,MAAAA,IAAI,CAACyV,SAAL,GAAiBwB,QAAjB;AACD;;AAED7F,IAAAA,KAAK,CAACgU,iBAAN,GAA0BnO,QAA1B;AACD;;AACD,SAAO,CAACA,QAAD,EAAWiO,QAAX,CAAP;AACD;;AAWD,SAASiB,iCAAT,CACE5lB,IADF,EAEEoN,MAFF,EAGEyY,WAHF,EAIY;AACV;AAIA,QAAMC,UAAU,GAAG1Y,MAAM,CAAC2Y,WAA1B;AACA,QAAM1D,OAAO,GAAGyD,UAAU,CAAC1Y,MAAM,CAAC4Y,OAAR,CAA1B,CANU;;AASV,MAAIC,sBAAsB,GAAG,KAA7B,CATU;AAYV;AACA;;AACA,QAAMC,oBAAoB,GAAG/D,wBAAwB,CAAC/U,MAAD,CAArD;;AACA,MAAI8Y,oBAAoB,KAAK,IAA7B,EAAmC;AACjC;AACA;AACAD,IAAAA,sBAAsB,GAAGC,oBAAoB,KAAK7D,OAAlD;AACD,GAJD,MAIO;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA4D,IAAAA,sBAAsB,GAAGvf,eAAe,CACtCsM,WADsC,EAEtChT,IAAI,CAACwH,gBAFiC,CAAxC;;AAKA,QAAIye,sBAAJ,EAA4B;AAC1B;AACA;AACA;AACA7D,MAAAA,wBAAwB,CAAChV,MAAD,EAASiV,OAAT,CAAxB;AACD;AACF;;AAED,MAAI4D,sBAAJ,EAA4B;AAC1B,UAAME,QAAQ,GAAGN,WAAW,CAACzY,MAAM,CAAC4Y,OAAR,CAA5B;;AASA,WAAOG,QAAP;AACD,GAXD,MAWO;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACApE,IAAAA,iBAAiB,CAAC3U,MAAD,CAAjB,CAVK;AAaL,AAsCA;;;AAnDK;AAAA;AAAA;AAwDN;AACF;;AAED,SAASgZ,gBAAT,CACE3mB,IADF,EAEE2N,MAFF,EAGEyY,WAHF,EAIEQ,SAJF,EAKY;AACV,QAAMrmB,IAAI,GAAKsmB,qBAAqB,EAApC;;AADU,QAGRtmB,IAAI,KAAK,IAHD;AAAA;AAAA;;AAOV,QAAM8lB,UAAU,GAAG1Y,MAAM,CAAC2Y,WAA1B;AACA,QAAM1D,OAAO,GAAGyD,UAAU,CAAC1Y,MAAM,CAAC4Y,OAAR,CAA1B;AAEA,QAAMO,UAAU,GAAGrZ,wBAAsB,CAACnmB,OAA1C,CAVU;;AAAA,6BAa2Bw/B,UAAU,CAACC,QAAX,CAAoB,MACvDZ,iCAAiC,CAAC5lB,IAAD,EAAOoN,MAAP,EAAeyY,WAAf,CADE,CAb3B;AAAA,MAaLY,eAbK;AAAA,MAaYC,WAbZ;;AAgBV,MAAIP,QAAQ,GAAGM,eAAf,CAhBU;AAmBV;;AACA,QAAME,SAAS,GAAKnE,kBAApB;AAEA,QAAMrN,aAAa,GAAK1V,IAAI,CAAC0V,aAA7B;AAIA,QAAMuC,IAAI,GAAGvC,aAAa,CAACuC,IAA3B;AACA,QAAMkP,eAAe,GAAGlP,IAAI,CAACmO,WAA7B;AACA,QAAMgB,UAAU,GAAG1R,aAAa,CAAC/H,MAAjC;AACA,QAAM0Z,aAAa,GAAG3R,aAAa,CAACkR,SAApC;AAEA,QAAM7uB,KAAK,GAAG8a,yBAAd;AAEA7S,EAAAA,IAAI,CAAC0V,aAAL,GAAsB;AACpBuC,IAAAA,IADoB;AAEpBtK,IAAAA,MAFoB;AAGpBiZ,IAAAA;AAHoB,GAAtB,CAjCU;;AAwCVE,EAAAA,UAAU,CAACQ,SAAX,CAAqB,MAAM;AACzBrP,IAAAA,IAAI,CAACmO,WAAL,GAAmBA,WAAnB,CADyB;AAIzB;AACA;AACA;;AACAnO,IAAAA,IAAI,CAACgP,WAAL,GAAmBA,WAAnB,CAPyB;;AAUzB,UAAMM,eAAe,GAAGlB,UAAU,CAAC1Y,MAAM,CAAC4Y,OAAR,CAAlC;;AACA,QAAI,CAAC9U,QAAE,CAACmR,OAAD,EAAU2E,eAAV,CAAP,EAAmC;AACjC,YAAMC,gBAAgB,GAAGpB,WAAW,CAACzY,MAAM,CAAC4Y,OAAR,CAApC;;AAUA,UAAI,CAAC9U,QAAE,CAACiV,QAAD,EAAWc,gBAAX,CAAP,EAAqC;AACnCP,QAAAA,WAAW,CAACO,gBAAD,CAAX;AAEA,cAAMhiB,IAAI,GAAG+S,iBAAiB,CAACxgB,KAAD,CAA9B;AACA+P,QAAAA,mBAAmB,CAACvH,IAAD,EAAOiF,IAAP,CAAnB;AACD,OAhBgC;AAkBjC;AACA;;;AACA2C,MAAAA,iBAAiB,CAAC5H,IAAD,EAAOA,IAAI,CAACwH,gBAAZ,CAAjB;AACD;AACF,GAjCD,EAiCG,CAACqe,WAAD,EAAczY,MAAd,EAAsBiZ,SAAtB,CAjCH,EAxCU;;AA4EVE,EAAAA,UAAU,CAACQ,SAAX,CAAqB,MAAM;AACzB,UAAMG,YAAY,GAAG,MAAM;AACzB,YAAMC,iBAAiB,GAAGzP,IAAI,CAACmO,WAA/B;AACA,YAAMuB,iBAAiB,GAAG1P,IAAI,CAACgP,WAA/B;;AAEA,UAAI;AACFU,QAAAA,iBAAiB,CAACD,iBAAiB,CAAC/Z,MAAM,CAAC4Y,OAAR,CAAlB,CAAjB,CADE;;AAIF,cAAM/gB,IAAI,GAAG+S,iBAAiB,CAACxgB,KAAD,CAA9B;AAEA+P,QAAAA,mBAAmB,CAACvH,IAAD,EAAOiF,IAAP,CAAnB;AACD,OAPD,CAOE,OAAOnnB,KAAP,EAAc;AACd;AACA;AACA;AACA;AACAspC,QAAAA,iBAAiB,CACd,MAAM;AACL,gBAAMtpC,KAAN;AACD,SAHc,CAAjB;AAKD;AACF,KAtBD;;AAwBA,UAAMupC,WAAW,GAAGhB,SAAS,CAACjZ,MAAM,CAAC4Y,OAAR,EAAiBkB,YAAjB,CAA7B;;AASA,WAAOG,WAAP;AACD,GAnCD,EAmCG,CAACja,MAAD,EAASiZ,SAAT,CAnCH,EA5EU;AAkHV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MACE,CAACnV,QAAE,CAAC0V,eAAD,EAAkBf,WAAlB,CAAH,IACA,CAAC3U,QAAE,CAAC2V,UAAD,EAAazZ,MAAb,CADH,IAEA,CAAC8D,QAAE,CAAC4V,aAAD,EAAgBT,SAAhB,CAHL,EAIE;AACA;AACA;AACA;AACA;AACA,UAAMiB,QAA2D,GAAG;AAClExT,MAAAA,OAAO,EAAE,IADyD;AAElEW,MAAAA,WAAW,EAAE,IAFqD;AAGlEzQ,MAAAA,KAAK,EAAEzC,OAH2D;AAIlEojB,MAAAA,QAAQ,EAAE,IAJwD;AAKlEC,MAAAA,mBAAmB,EAAEP,iBAL6C;AAMlEQ,MAAAA,iBAAiB,EAAEsB;AAN+C,KAApE;AAQAmB,IAAAA,QAAQ,CAAC3C,QAAT,GAAoB+B,WAAW,GAAI5B,cAAc,CAACC,IAAf,CACjC,IADiC,EAEjCzS,yBAFiC,EAGjCgV,QAHiC,CAAnC;AAKAX,IAAAA,SAAS,CAAC9V,KAAV,GAAkByW,QAAlB;AACAX,IAAAA,SAAS,CAAC7C,SAAV,GAAsB,IAAtB;AACAqC,IAAAA,QAAQ,GAAGP,iCAAiC,CAAC5lB,IAAD,EAAOoN,MAAP,EAAeyY,WAAf,CAA5C;AACAc,IAAAA,SAAS,CAACxR,aAAV,GAA0BwR,SAAS,CAACzR,SAAV,GAAsBiR,QAAhD;AACD;;AAED,SAAOA,QAAP;AACD;;AAED,SAASoB,kBAAT,CACEna,MADF,EAEEyY,WAFF,EAGEQ,SAHF,EAIY;AACV,QAAM5mB,IAAI,GAAGokB,uBAAuB,EAApC;AACApkB,EAAAA,IAAI,CAAC0V,aAAL,GAAsB;AACpBuC,IAAAA,IAAI,EAAE;AACJmO,MAAAA,WADI;AAEJa,MAAAA,WAAW,EAAG;AAFV,KADc;AAKpBtZ,IAAAA,MALoB;AAMpBiZ,IAAAA;AANoB,GAAtB;AAQA,SAAOD,gBAAgB,CAAC3mB,IAAD,EAAO2N,MAAP,EAAeyY,WAAf,EAA4BQ,SAA5B,CAAvB;AACD;;AAED,SAASmB,mBAAT,CACEpa,MADF,EAEEyY,WAFF,EAGEQ,SAHF,EAIY;AACV,QAAM5mB,IAAI,GAAGskB,wBAAwB,EAArC;AACA,SAAOqC,gBAAgB,CAAC3mB,IAAD,EAAO2N,MAAP,EAAeyY,WAAf,EAA4BQ,SAA5B,CAAvB;AACD;;AAED,SAASoB,sBAAT,CACEpB,SADF,EAEER,WAFF,EAGK;AACH,QAAMpmB,IAAI,GAAGokB,uBAAuB,EAApC,CADG;AAGH;AACA;;AACA,QAAM6D,YAAY,GAAG7B,WAAW,EAAhC;;AAWApmB,EAAAA,IAAI,CAAC0V,aAAL,GAAqBuS,YAArB;AACA,QAAMpoC,IAAsB,GAAG;AAC7BgV,IAAAA,KAAK,EAAEozB,YADsB;AAE7B7B,IAAAA;AAF6B,GAA/B;AAIApmB,EAAAA,IAAI,CAACoR,KAAL,GAAavxB,IAAb;AACA,SAAOqoC,oBAAoB,CAACloB,IAAD,EAAOngB,IAAP,EAAa+mC,SAAb,EAAwBR,WAAxB,EAAqC6B,YAArC,CAA3B;AACD;;AAED,SAASE,uBAAT,CACEvB,SADF,EAEER,WAFF,EAGK;AACH,QAAMpmB,IAAI,GAAGskB,wBAAwB,EAArC,CADG;AAGH;AACA;;AACA,QAAM2D,YAAY,GAAG7B,WAAW,EAAhC;;AAWA,QAAMgC,YAAY,GAAGpoB,IAAI,CAAC0V,aAA1B;;AACA,MAAI,CAACjE,QAAE,CAAC2W,YAAD,EAAeH,YAAf,CAAP,EAAqC;AACnCjoB,IAAAA,IAAI,CAAC0V,aAAL,GAAqBuS,YAArB;AACA1T,IAAAA,gCAAgC;AACjC;;AACD,QAAM10B,IAAI,GAAGmgB,IAAI,CAACoR,KAAlB;AACA,SAAO8W,oBAAoB,CAACloB,IAAD,EAAOngB,IAAP,EAAa+mC,SAAb,EAAwBR,WAAxB,EAAqC6B,YAArC,CAA3B;AACD;;AAED,SAASC,oBAAT,CACEloB,IADF,EAEEngB,IAFF,EAGE+mC,SAHF,EAIER,WAJF,EAKE6B,YALF,EAMK;AACH,QAAMlwB,KAAK,GAAG8a,yBAAd;AACA,QAAMiU,UAAU,GAAGrZ,wBAAsB,CAACnmB,OAA1C,CAFG;AAKH;AACA;AACA;;AACAw/B,EAAAA,UAAU,CAACuB,eAAX,CAA2B,MAAM;AAC/BxoC,IAAAA,IAAI,CAACgV,KAAL,GAAaozB,YAAb;AACApoC,IAAAA,IAAI,CAACumC,WAAL,GAAmBA,WAAnB,CAF+B;AAK/B;AACA;AACA;AACA;AACA;;AACA,QAAIkC,sBAAsB,CAACzoC,IAAD,CAA1B,EAAkC;AAChC;AACA0oC,MAAAA,kBAAkB,CAACxwB,KAAD,CAAlB;AACD;AACF,GAdD,EAcG,CAAC6uB,SAAD,EAAYqB,YAAZ,EAA0B7B,WAA1B,CAdH;AAgBAU,EAAAA,UAAU,CAACQ,SAAX,CAAqB,MAAM;AACzB,UAAMkB,iBAAiB,GAAG,MAAM;AAC9B;AACA;AACA;AACA;AAEA;AACA;AACA,UAAIF,sBAAsB,CAACzoC,IAAD,CAA1B,EAAkC;AAChC;AACA0oC,QAAAA,kBAAkB,CAACxwB,KAAD,CAAlB;AACD;AACF,KAZD,CADyB;AAezB;;;AACAywB,IAAAA,iBAAiB,GAhBQ;;AAkBzB,WAAO5B,SAAS,CAAC4B,iBAAD,CAAhB;AACD,GAnBD,EAmBG,CAAC5B,SAAD,CAnBH;AAqBA,SAAOqB,YAAP;AACD;;AAED,SAASK,sBAAT,CAAgCzoC,IAAhC,EAAsC;AACpC,QAAM6nC,iBAAiB,GAAG7nC,IAAI,CAACumC,WAA/B;AACA,QAAMqC,SAAS,GAAG5oC,IAAI,CAACgV,KAAvB;;AACA,MAAI;AACF,UAAM8H,SAAS,GAAG+qB,iBAAiB,EAAnC;AACA,WAAO,CAACjW,QAAE,CAACgX,SAAD,EAAY9rB,SAAZ,CAAV;AACD,GAHD,CAGE,OAAOte,KAAP,EAAc;AACd,WAAO,IAAP;AACD;AACF;;AAED,SAASkqC,kBAAT,CAA4BxwB,KAA5B,EAAmC;AACjCygB,EAAAA,qBAAqB,CAACzgB,KAAD,EAAQiK,QAAR,EAAkBmC,WAAlB,CAArB;AACD;;AAED,SAASukB,UAAT,CACEzD,YADF,EAEsC;AACpC,QAAMjlB,IAAI,GAAGokB,uBAAuB,EAApC;;AACA,MAAI,OAAOa,YAAP,KAAwB,UAA5B,EAAwC;AACtC;AACAA,IAAAA,YAAY,GAAGA,YAAY,EAA3B;AACD;;AACDjlB,EAAAA,IAAI,CAAC0V,aAAL,GAAqB1V,IAAI,CAACyV,SAAL,GAAiBwP,YAAtC;AACA,QAAM7T,KAA0C,GAAG;AACjDiD,IAAAA,OAAO,EAAE,IADwC;AAEjDW,IAAAA,WAAW,EAAE,IAFoC;AAGjDzQ,IAAAA,KAAK,EAAEzC,OAH0C;AAIjDojB,IAAAA,QAAQ,EAAE,IAJuC;AAKjDC,IAAAA,mBAAmB,EAAEP,iBAL4B;AAMjDQ,IAAAA,iBAAiB,EAAGH;AAN6B,GAAnD;AAQAjlB,EAAAA,IAAI,CAACoR,KAAL,GAAaA,KAAb;AACA,QAAM8T,QAEL,GAAI9T,KAAK,CAAC8T,QAAN,GAAkBG,cAAc,CAACC,IAAf,CACrB,IADqB,EAErBzS,yBAFqB,EAGrBzB,KAHqB,CAFvB;AAOA,SAAO,CAACpR,IAAI,CAAC0V,aAAN,EAAqBwP,QAArB,CAAP;AACD;;AAED,SAASyD,WAAT,CACE1D,YADF,EAEsC;AACpC,SAAOM,aAAa,CAACX,iBAAD,AAAA,CAApB;AACD;;AAED,SAASgE,aAAT,CACE3D,YADF,EAEsC;AACpC,SAAOe,eAAe,CAACpB,iBAAD,AAAA,CAAtB;AACD;;AAED,SAASiE,UAAT,CAAoB19B,GAApB,EAAyBuS,MAAzB,EAAiCorB,OAAjC,EAA0CC,IAA1C,EAAgD;AAC9C,QAAMhR,MAAc,GAAG;AACrB5sB,IAAAA,GADqB;AAErBuS,IAAAA,MAFqB;AAGrBorB,IAAAA,OAHqB;AAIrBC,IAAAA,IAJqB;AAKrB;AACAxhC,IAAAA,IAAI,EAAG;AANc,GAAvB;AAQA,MAAIyhC,oBAAyD,GAAInW,yBAAuB,CAACqB,WAAzF;;AACA,MAAI8U,oBAAoB,KAAK,IAA7B,EAAmC;AACjCA,IAAAA,oBAAoB,GAAGtE,kCAAkC,EAAzD;AACA7R,IAAAA,yBAAuB,CAACqB,WAAxB,GAAuC8U,oBAAvC;AACAA,IAAAA,oBAAoB,CAACrE,UAArB,GAAkC5M,MAAM,CAACxwB,IAAP,GAAcwwB,MAAhD;AACD,GAJD,MAIO;AACL,UAAM4M,UAAU,GAAGqE,oBAAoB,CAACrE,UAAxC;;AACA,QAAIA,UAAU,KAAK,IAAnB,EAAyB;AACvBqE,MAAAA,oBAAoB,CAACrE,UAArB,GAAkC5M,MAAM,CAACxwB,IAAP,GAAcwwB,MAAhD;AACD,KAFD,MAEO;AACL,YAAMkR,WAAW,GAAGtE,UAAU,CAACp9B,IAA/B;AACAo9B,MAAAA,UAAU,CAACp9B,IAAX,GAAkBwwB,MAAlB;AACAA,MAAAA,MAAM,CAACxwB,IAAP,GAAc0hC,WAAd;AACAD,MAAAA,oBAAoB,CAACrE,UAArB,GAAkC5M,MAAlC;AACD;AACF;;AACD,SAAOA,MAAP;AACD;;AAkBD,SAASmR,QAAT,CAAqBC,YAArB,EAAsD;AACpD,QAAMnpB,IAAI,GAAGokB,uBAAuB,EAApC;;AACA,EA+DO;AACL,UAAMjJ,GAAG,GAAG;AAAC7zB,MAAAA,OAAO,EAAE6hC;AAAV,KAAZ;AACAnpB,IAAAA,IAAI,CAAC0V,aAAL,GAAqByF,GAArB;AACA,WAAOA,GAAP;AACD;AACF;;AAED,SAASiO,SAAT,CAAsBD,YAAtB,EAAuD;AACrD,QAAMnpB,IAAI,GAAGskB,wBAAwB,EAArC;AACA,SAAOtkB,IAAI,CAAC0V,aAAZ;AACD;;AAED,SAAS2T,eAAT,CAAyBrP,UAAzB,EAAqCsP,SAArC,EAAgD5rB,MAAhD,EAAwDqrB,IAAxD,EAAoE;AAClE,QAAM/oB,IAAI,GAAGokB,uBAAuB,EAApC;AACA,QAAMf,QAAQ,GAAG0F,IAAI,KAAK/oC,SAAT,GAAqB,IAArB,GAA4B+oC,IAA7C;AACAlW,EAAAA,yBAAuB,CAACrY,KAAxB,IAAiCwf,UAAjC;AACAha,EAAAA,IAAI,CAAC0V,aAAL,GAAqBmT,UAAU,CAC7BU,SAAa,GAAGD,SADa,EAE7B5rB,MAF6B,EAG7B1d,SAH6B,EAI7BqjC,QAJ6B,CAA/B;AAMD;;AAED,SAASmG,gBAAT,CAA0BxP,UAA1B,EAAsCsP,SAAtC,EAAiD5rB,MAAjD,EAAyDqrB,IAAzD,EAAqE;AACnE,QAAM/oB,IAAI,GAAGskB,wBAAwB,EAArC;AACA,QAAMjB,QAAQ,GAAG0F,IAAI,KAAK/oC,SAAT,GAAqB,IAArB,GAA4B+oC,IAA7C;AACA,MAAID,OAAO,GAAG9oC,SAAd;;AAEA,MAAI8iC,WAAW,KAAK,IAApB,EAA0B;AACxB,UAAM2G,UAAU,GAAG3G,WAAW,CAACpN,aAA/B;AACAoT,IAAAA,OAAO,GAAGW,UAAU,CAACX,OAArB;;AACA,QAAIzF,QAAQ,KAAK,IAAjB,EAAuB;AACrB,YAAMC,QAAQ,GAAGmG,UAAU,CAACV,IAA5B;;AACA,UAAI3F,kBAAkB,CAACC,QAAD,EAAWC,QAAX,CAAtB,EAA4C;AAC1CtjB,QAAAA,IAAI,CAAC0V,aAAL,GAAqBmT,UAAU,CAACS,SAAD,EAAY5rB,MAAZ,EAAoBorB,OAApB,EAA6BzF,QAA7B,CAA/B;AACA;AACD;AACF;AACF;;AAEDxQ,EAAAA,yBAAuB,CAACrY,KAAxB,IAAiCwf,UAAjC;AAEAha,EAAAA,IAAI,CAAC0V,aAAL,GAAqBmT,UAAU,CAC7BU,SAAa,GAAGD,SADa,EAE7B5rB,MAF6B,EAG7BorB,OAH6B,EAI7BzF,QAJ6B,CAA/B;AAMD;;AAED,SAASqG,WAAT,CACEhsB,MADF,EAEEqrB,IAFF,EAGQ;AACN;AAMA,EAWO;AACL,WAAOM,eAAe,CACpBpF,OAAa,GAAG0F,aADI,EAEpBC,SAFoB,EAGpBlsB,MAHoB,EAIpBqrB,IAJoB,CAAtB;AAMD;AACF;;AAED,SAASc,YAAT,CACEnsB,MADF,EAEEqrB,IAFF,EAGQ;AACN;AAMA,SAAOS,gBAAgB,CAACvF,OAAD,EAAgB2F,SAAhB,EAA6BlsB,MAA7B,EAAqCqrB,IAArC,CAAvB;AACD;;AAED,SAASe,iBAAT,CACEpsB,MADF,EAEEqrB,IAFF,EAGQ;AACN,MAAI/O,UAAiB,GAAGkK,MAAxB;;AAWA,SAAOmF,eAAe,CAACrP,UAAD,EAAa+P,MAAb,EAAyBrsB,MAAzB,EAAiCqrB,IAAjC,CAAtB;AACD;;AAED,SAASiB,kBAAT,CACEtsB,MADF,EAEEqrB,IAFF,EAGQ;AACN,SAAOS,gBAAgB,CAACtF,MAAD,EAAe6F,MAAf,EAA2BrsB,MAA3B,EAAmCqrB,IAAnC,CAAvB;AACD;;AAED,SAASkB,sBAAT,CACEvsB,MADF,EAEEyd,GAFF,EAGE;AACA,MAAI,OAAOA,GAAP,KAAe,UAAnB,EAA+B;AAC7B,UAAM+O,WAAW,GAAG/O,GAApB;AACA,UAAMt7B,IAAI,GAAG6d,MAAM,EAAnB;AACAwsB,IAAAA,WAAW,CAACrqC,IAAD,CAAX;AACA,WAAO,MAAM;AACXqqC,MAAAA,WAAW,CAAC,IAAD,CAAX;AACD,KAFD;AAGD,GAPD,MAOO,IAAI/O,GAAG,KAAK,IAAR,IAAgBA,GAAG,KAAKn7B,SAA5B,EAAuC;AAC5C,UAAMmqC,SAAS,GAAGhP,GAAlB;;AAUA,UAAMt7B,IAAI,GAAG6d,MAAM,EAAnB;AACAysB,IAAAA,SAAS,CAAC7iC,OAAV,GAAoBzH,IAApB;AACA,WAAO,MAAM;AACXsqC,MAAAA,SAAS,CAAC7iC,OAAV,GAAoB,IAApB;AACD,KAFD;AAGD;AACF;;AAED,SAAS8iC,qBAAT,CACEjP,GADF,EAEEzd,MAFF,EAGEqrB,IAHF,EAIQ;AACN;;AAWA,QAAMsB,UAAU,GACdtB,IAAI,KAAK,IAAT,IAAiBA,IAAI,KAAK/oC,SAA1B,GAAsC+oC,IAAI,CAACvhC,MAAL,CAAY,CAAC2zB,GAAD,CAAZ,CAAtC,GAA2D,IAD7D;AAGA,MAAInB,UAAiB,GAAGkK,MAAxB;;AAWA,SAAOmF,eAAe,CACpBrP,UADoB,EAEpB+P,MAFoB,EAGpBE,sBAAsB,CAAC3E,IAAvB,CAA4B,IAA5B,EAAkC5nB,MAAlC,EAA0Cyd,GAA1C,CAHoB,EAIpBkP,UAJoB,CAAtB;AAMD;;AAED,SAASC,sBAAT,CACEnP,GADF,EAEEzd,MAFF,EAGEqrB,IAHF,EAIQ;AACN;;AAWA,QAAMsB,UAAU,GACdtB,IAAI,KAAK,IAAT,IAAiBA,IAAI,KAAK/oC,SAA1B,GAAsC+oC,IAAI,CAACvhC,MAAL,CAAY,CAAC2zB,GAAD,CAAZ,CAAtC,GAA2D,IAD7D;AAGA,SAAOqO,gBAAgB,CACrBtF,MADqB,EAErB6F,MAFqB,EAGrBE,sBAAsB,CAAC3E,IAAvB,CAA4B,IAA5B,EAAkC5nB,MAAlC,EAA0Cyd,GAA1C,CAHqB,EAIrBkP,UAJqB,CAAvB;AAMD;;AAED,SAASE,eAAT,CAA4B11B,KAA5B,EAAsC21B,WAAtC,EAA+E;AAE7E;AACA;AACD;;AAED,MAAMC,gBAAgB,GAAGF,eAAzB;;AAEA,SAASG,aAAT,CAA0B3jC,QAA1B,EAAuCgiC,IAAvC,EAA4E;AAC1E,QAAM/oB,IAAI,GAAGokB,uBAAuB,EAApC;AACA,QAAMf,QAAQ,GAAG0F,IAAI,KAAK/oC,SAAT,GAAqB,IAArB,GAA4B+oC,IAA7C;AACA/oB,EAAAA,IAAI,CAAC0V,aAAL,GAAqB,CAAC3uB,QAAD,EAAWs8B,QAAX,CAArB;AACA,SAAOt8B,QAAP;AACD;;AAED,SAAS4jC,cAAT,CAA2B5jC,QAA3B,EAAwCgiC,IAAxC,EAA6E;AAC3E,QAAM/oB,IAAI,GAAGskB,wBAAwB,EAArC;AACA,QAAMjB,QAAQ,GAAG0F,IAAI,KAAK/oC,SAAT,GAAqB,IAArB,GAA4B+oC,IAA7C;AACA,QAAMpS,SAAS,GAAG3W,IAAI,CAAC0V,aAAvB;;AACA,MAAIiB,SAAS,KAAK,IAAlB,EAAwB;AACtB,QAAI0M,QAAQ,KAAK,IAAjB,EAAuB;AACrB,YAAMC,QAA6B,GAAG3M,SAAS,CAAC,CAAD,CAA/C;;AACA,UAAIyM,kBAAkB,CAACC,QAAD,EAAWC,QAAX,CAAtB,EAA4C;AAC1C,eAAO3M,SAAS,CAAC,CAAD,CAAhB;AACD;AACF;AACF;;AACD3W,EAAAA,IAAI,CAAC0V,aAAL,GAAqB,CAAC3uB,QAAD,EAAWs8B,QAAX,CAArB;AACA,SAAOt8B,QAAP;AACD;;AAED,SAAS6jC,SAAT,CACEC,UADF,EAEE9B,IAFF,EAGK;AACH,QAAM/oB,IAAI,GAAGokB,uBAAuB,EAApC;AACA,QAAMf,QAAQ,GAAG0F,IAAI,KAAK/oC,SAAT,GAAqB,IAArB,GAA4B+oC,IAA7C;AACA,QAAMpsB,SAAS,GAAGkuB,UAAU,EAA5B;AACA7qB,EAAAA,IAAI,CAAC0V,aAAL,GAAqB,CAAC/Y,SAAD,EAAY0mB,QAAZ,CAArB;AACA,SAAO1mB,SAAP;AACD;;AAED,SAASmuB,UAAT,CACED,UADF,EAEE9B,IAFF,EAGK;AACH,QAAM/oB,IAAI,GAAGskB,wBAAwB,EAArC;AACA,QAAMjB,QAAQ,GAAG0F,IAAI,KAAK/oC,SAAT,GAAqB,IAArB,GAA4B+oC,IAA7C;AACA,QAAMpS,SAAS,GAAG3W,IAAI,CAAC0V,aAAvB;;AACA,MAAIiB,SAAS,KAAK,IAAlB,EAAwB;AACtB;AACA,QAAI0M,QAAQ,KAAK,IAAjB,EAAuB;AACrB,YAAMC,QAA6B,GAAG3M,SAAS,CAAC,CAAD,CAA/C;;AACA,UAAIyM,kBAAkB,CAACC,QAAD,EAAWC,QAAX,CAAtB,EAA4C;AAC1C,eAAO3M,SAAS,CAAC,CAAD,CAAhB;AACD;AACF;AACF;;AACD,QAAMha,SAAS,GAAGkuB,UAAU,EAA5B;AACA7qB,EAAAA,IAAI,CAAC0V,aAAL,GAAqB,CAAC/Y,SAAD,EAAY0mB,QAAZ,CAArB;AACA,SAAO1mB,SAAP;AACD;;AAED,SAASouB,kBAAT,CAA+Bl2B,KAA/B,EAA4C;AAAA,sBACZ6zB,UAAU,CAAC7zB,KAAD,CADE;AAAA,QACnC4zB,SADmC;AAAA,QACxBuC,QADwB;;AAE1CtB,EAAAA,WAAW,CAAC,MAAM;AAChB,UAAMuB,cAAc,GAAG5Z,yBAAuB,CAACG,UAA/C;AACAH,IAAAA,yBAAuB,CAACG,UAAxB,GAAqC,CAArC;;AACA,QAAI;AACFwZ,MAAAA,QAAQ,CAACn2B,KAAD,CAAR;AACD,KAFD,SAEU;AACRwc,MAAAA,yBAAuB,CAACG,UAAxB,GAAqCyZ,cAArC;AACD;AACF,GARU,EAQR,CAACp2B,KAAD,CARQ,CAAX;AASA,SAAO4zB,SAAP;AACD;;AAED,SAASyC,mBAAT,CAAgCr2B,KAAhC,EAA6C;AAAA,uBACb8zB,WAAW,CAAC9zB,AAAD,CADE;AAAA,QACpC4zB,SADoC;AAAA,QACzBuC,QADyB;;AAE3CnB,EAAAA,YAAY,CAAC,MAAM;AACjB,UAAMoB,cAAc,GAAG5Z,yBAAuB,CAACG,UAA/C;AACAH,IAAAA,yBAAuB,CAACG,UAAxB,GAAqC,CAArC;;AACA,QAAI;AACFwZ,MAAAA,QAAQ,CAACn2B,KAAD,CAAR;AACD,KAFD,SAEU;AACRwc,MAAAA,yBAAuB,CAACG,UAAxB,GAAqCyZ,cAArC;AACD;AACF,GARW,EAQT,CAACp2B,KAAD,CARS,CAAZ;AASA,SAAO4zB,SAAP;AACD;;AAED,SAAS0C,qBAAT,CAAkCt2B,KAAlC,EAA+C;AAAA,yBACf+zB,aAAa,CAAC/zB,AAAD,CADE;AAAA,QACtC4zB,SADsC;AAAA,QAC3BuC,QAD2B;;AAE7CnB,EAAAA,YAAY,CAAC,MAAM;AACjB,UAAMoB,cAAc,GAAG5Z,yBAAuB,CAACG,UAA/C;AACAH,IAAAA,yBAAuB,CAACG,UAAxB,GAAqC,CAArC;;AACA,QAAI;AACFwZ,MAAAA,QAAQ,CAACn2B,KAAD,CAAR;AACD,KAFD,SAEU;AACRwc,MAAAA,yBAAuB,CAACG,UAAxB,GAAqCyZ,cAArC;AACD;AACF,GARW,EAQT,CAACp2B,KAAD,CARS,CAAZ;AASA,SAAO4zB,SAAP;AACD;;AAED,SAAS2C,eAAT,CAAyBC,UAAzB,EAAqCtkC,QAArC,EAA+C;AAC7C,QAAMukC,gBAAgB,GAAG5iB,wBAAwB,EAAjD;AACAC,EAAAA,wBAAwB,CACtBE,mBAAmB,CAACyiB,gBAAD,EAAmBxqB,uBAAnB,CADG,CAAxB;AAIAuqB,EAAAA,UAAU,CAAC,IAAD,CAAV;AAEA,QAAMJ,cAAc,GAAG5Z,yBAAuB,CAACG,UAA/C;AACAH,EAAAA,yBAAuB,CAACG,UAAxB,GAAqC,CAArC;;AACA,MAAI;AACF6Z,IAAAA,UAAU,CAAC,KAAD,CAAV;AACAtkC,IAAAA,QAAQ;AACT,GAHD,SAGU;AACR4hB,IAAAA,wBAAwB,CAAC2iB,gBAAD,CAAxB;AACAja,IAAAA,yBAAuB,CAACG,UAAxB,GAAqCyZ,cAArC;AAkBD;AACF;;AAED,SAASM,eAAT,GAA4D;AAAA,uBAC1B7C,UAAU,CAAC,KAAD,CADgB;AAAA,QACnD8C,SADmD;AAAA,QACxCH,UADwC;;;AAG1D,QAAMI,KAAK,GAAGL,eAAe,CAAC9F,IAAhB,CAAqB,IAArB,EAA2B+F,UAA3B,CAAd;AACA,QAAMrrB,IAAI,GAAGokB,uBAAuB,EAApC;AACApkB,EAAAA,IAAI,CAAC0V,aAAL,GAAqB+V,KAArB;AACA,SAAO,CAACD,SAAD,EAAYC,KAAZ,CAAP;AACD;;AAED,SAASC,gBAAT,GAA6D;AAAA,wBACvC/C,WAAW,CAAC,AAAD,CAD4B;AAAA,QACpD6C,SADoD;;AAE3D,QAAMxrB,IAAI,GAAGskB,wBAAwB,EAArC;AACA,QAAMmH,KAAK,GAAGzrB,IAAI,CAAC0V,aAAnB;AACA,SAAO,CAAC8V,SAAD,EAAYC,KAAZ,CAAP;AACD;;AAED,SAASE,kBAAT,GAA+D;AAAA,0BACzC/C,aAAa,CAAC,AAAD,CAD4B;AAAA,QACtD4C,SADsD;;AAE7D,QAAMxrB,IAAI,GAAGskB,wBAAwB,EAArC;AACA,QAAMmH,KAAK,GAAGzrB,IAAI,CAAC0V,aAAnB;AACA,SAAO,CAAC8V,SAAD,EAAYC,KAAZ,CAAP;AACD;;AAwBD,SAASG,qBAAT,GAAsD;AACpD,QAAMC,MAAM,GAAG1Z,CAKX7E,YALJ;;AAOA,EAgDO;AACL,UAAMwe,EAAE,GAAGD,MAAM,EAAjB;AACAnD,IAAAA,UAAU,CAACoD,EAAD,CAAV;AACA,WAAOA,EAAP;AACD;AACF;;AAED,SAASC,sBAAT,GAAuD;AACrD,QAAMD,EAAE,GAAGnD,WAAW,CAAC3oC,AAAD,CAAX,CAAuB,CAAvB,CAAX;AACA,SAAO8rC,EAAP;AACD;;AAED,SAASE,wBAAT,GAAyD;AACvD,QAAMF,EAAE,GAAGlD,aAAa,CAAC5oC,AAAD,CAAb,CAAyB,CAAzB,CAAX;AACA,SAAO8rC,EAAP;AACD;;AAsDD,SAASzG,cAAT,CACEttB,KADF,EAEEqZ,KAFF,EAGEyT,MAHF,EAIE;AACA;AAUA,QAAMjf,SAAS,GAAG0S,gBAAgB,EAAlC;AACA,QAAM9S,IAAI,GAAG+S,iBAAiB,CAACxgB,KAAD,CAA9B;AAEA,QAAMgc,MAAoB,GAAG;AAC3BvO,IAAAA,IAD2B;AAE3Bqf,IAAAA,MAF2B;AAG3BgB,IAAAA,YAAY,EAAE,IAHa;AAI3BC,IAAAA,UAAU,EAAE,IAJe;AAK3Bv+B,IAAAA,IAAI,EAAG;AALoB,GAA7B;AAQA,QAAMqE,SAAS,GAAGmM,KAAK,CAACnM,SAAxB;;AACA,MACEmM,KAAK,KAAK8a,yBAAV,IACCjnB,SAAS,KAAK,IAAd,IAAsBA,SAAS,KAAKinB,yBAFvC,EAGE;AACA;AACA;AACA;AACAoQ,IAAAA,0CAA0C,GAAGD,4BAA4B,GAAG,IAA5E;AACA,UAAM3O,OAAO,GAAGjD,KAAK,CAACiD,OAAtB;;AACA,QAAIA,OAAO,KAAK,IAAhB,EAAsB;AACpB;AACAN,MAAAA,MAAM,CAACxsB,IAAP,GAAcwsB,MAAd;AACD,KAHD,MAGO;AACLA,MAAAA,MAAM,CAACxsB,IAAP,GAAc8sB,OAAO,CAAC9sB,IAAtB;AACA8sB,MAAAA,OAAO,CAAC9sB,IAAR,GAAewsB,MAAf;AACD;;AACD3C,IAAAA,KAAK,CAACiD,OAAN,GAAgBN,MAAhB;AACD,GAjBD,MAiBO;AACL,QAAImC,mBAAmB,CAACne,KAAD,AAAA,CAAvB,EAAsC;AACpC,YAAMid,WAAW,GAAG5D,KAAK,CAAC4D,WAA1B;;AACA,UAAIA,WAAW,KAAK,IAApB,EAA0B;AACxB;AACAjB,QAAAA,MAAM,CAACxsB,IAAP,GAAcwsB,MAAd,CAFwB;AAIxB;;AACAc,QAAAA,oBAAoB,CAACzD,KAAD,CAApB;AACD,OAND,MAMO;AACL2C,QAAAA,MAAM,CAACxsB,IAAP,GAAcytB,WAAW,CAACztB,IAA1B;AACAytB,QAAAA,WAAW,CAACztB,IAAZ,GAAmBwsB,MAAnB;AACD;;AACD3C,MAAAA,KAAK,CAAC4D,WAAN,GAAoBjB,MAApB;AACD,KAbD,MAaO;AACL,YAAMM,OAAO,GAAGjD,KAAK,CAACiD,OAAtB;;AACA,UAAIA,OAAO,KAAK,IAAhB,EAAsB;AACpB;AACAN,QAAAA,MAAM,CAACxsB,IAAP,GAAcwsB,MAAd;AACD,OAHD,MAGO;AACLA,QAAAA,MAAM,CAACxsB,IAAP,GAAc8sB,OAAO,CAAC9sB,IAAtB;AACA8sB,QAAAA,OAAO,CAAC9sB,IAAR,GAAewsB,MAAf;AACD;;AACD3C,MAAAA,KAAK,CAACiD,OAAN,GAAgBN,MAAhB;AACD;;AAED,QACEhc,KAAK,CAACwM,KAAN,KAAgBzC,OAAhB,KACClW,SAAS,KAAK,IAAd,IAAsBA,SAAS,CAAC2Y,KAAV,KAAoBzC,OAD3C,CADF,EAGE;AACA;AACA;AACA;AACA,YAAMqjB,mBAAmB,GAAG/T,KAAK,CAAC+T,mBAAlC;;AACA,UAAIA,mBAAmB,KAAK,IAA5B,EAAkC;AAChC;AAKA,YAAI;AACF,gBAAM8G,YAAe,GAAI7a,KAAK,CAACgU,iBAA/B;AACA,gBAAMU,UAAU,GAAGX,mBAAmB,CAAC8G,YAAD,EAAepH,MAAf,CAAtC,CAFE;AAIF;AACA;AACA;;AACA9Q,UAAAA,MAAM,CAAC8R,YAAP,GAAsBV,mBAAtB;AACApR,UAAAA,MAAM,CAAC+R,UAAP,GAAoBA,UAApB;;AACA,cAAIrU,QAAE,CAACqU,UAAD,EAAamG,YAAb,CAAN,EAAkC;AAChC;AACA;AACA;AACA;AACA;AACD;AACF,SAhBD,CAgBE,OAAO5tC,KAAP,EAAc;AAEf,SAlBD,SAkBU;AACR,AAGD;AACF;AACF;;AAOD,UAAMkiB,IAAI,GAAGiY,qBAAqB,CAACzgB,KAAD,EAAQyN,IAAR,EAAcI,SAAd,CAAlC;;AAEA,QAAIc,gBAAgB,CAAClB,IAAD,CAAhB,IAA0BjF,IAAI,KAAK,IAAvC,EAA6C;AAC3C,UAAI6V,UAAU,GAAGhF,KAAK,CAAC7M,KAAvB,CAD2C;AAI3C;AACA;AACA;AACA;;AACA6R,MAAAA,UAAU,GAAG/O,cAAc,CAAC+O,UAAD,EAAa7V,IAAI,CAACoE,YAAlB,CAA3B,CAR2C;;AAW3C,YAAM0R,aAAa,GAAGlP,UAAU,CAACiP,UAAD,EAAa5Q,IAAb,CAAhC;AACA4L,MAAAA,KAAK,CAAC7M,KAAN,GAAc8R,aAAd,CAZ2C;AAc3C;AACA;;AACAlO,MAAAA,iBAAiB,CAAC5H,IAAD,EAAO8V,aAAP,CAAjB;AACD;AACF;AAcF;;AAeD,AAAO,MAAMyN,qBAAiC,GAAG;AAC/CtP,EAAAA,WAD+C;AAG/C0X,EAAAA,WAAW,EAAE/I,qBAHkC;AAI/CgJ,EAAAA,UAAU,EAAEhJ,qBAJmC;AAK/CmE,EAAAA,SAAS,EAAEnE,qBALoC;AAM/CiJ,EAAAA,mBAAmB,EAAEjJ,qBAN0B;AAO/CkF,EAAAA,eAAe,EAAElF,qBAP8B;AAQ/CkJ,EAAAA,OAAO,EAAElJ,qBARsC;AAS/CmJ,EAAAA,UAAU,EAAEnJ,qBATmC;AAU/CoJ,EAAAA,MAAM,EAAEpJ,qBAVuC;AAW/C4D,EAAAA,QAAQ,EAAE5D,qBAXqC;AAY/CqJ,EAAAA,aAAa,EAAErJ,qBAZgC;AAa/CsJ,EAAAA,gBAAgB,EAAEtJ,qBAb6B;AAc/CuJ,EAAAA,aAAa,EAAEvJ,qBAdgC;AAe/CwD,EAAAA,gBAAgB,EAAExD,qBAf6B;AAgB/C+E,EAAAA,oBAAoB,EAAE/E,qBAhByB;AAiB/CwJ,EAAAA,mBAAmB,EAAExJ,qBAjB0B;AAmB/CyJ,EAAAA,wBAAwB,EAAEx0B;AAnBqB,CAA1C;;AA0BP,MAAMsrB,sBAAkC,GAAG;AACzClP,EAAAA,WADyC;AAGzC0X,EAAAA,WAAW,EAAExB,aAH4B;AAIzCyB,EAAAA,UAAU,EAAE3X,WAJ6B;AAKzC8S,EAAAA,SAAS,EAAEoC,WAL8B;AAMzC0C,EAAAA,mBAAmB,EAAEhC,qBANoB;AAOzC/B,EAAAA,eAAe,EAAEyB,iBAPwB;AAQzCuC,EAAAA,OAAO,EAAEzB,SARgC;AASzC0B,EAAAA,UAAU,EAAExH,YAT6B;AAUzCyH,EAAAA,MAAM,EAAErD,QAViC;AAWzCnC,EAAAA,QAAQ,EAAE2B,UAX+B;AAYzC8D,EAAAA,aAAa,EAAEjC,eAZ0B;AAazCkC,EAAAA,gBAAgB,EAAE1B,kBAbuB;AAczC2B,EAAAA,aAAa,EAAEnB,eAd0B;AAezC5E,EAAAA,gBAAgB,EAAEmB,kBAfuB;AAgBzCI,EAAAA,oBAAoB,EAAEF,sBAhBmB;AAiBzC2E,EAAAA,mBAAmB,EAAEf,qBAjBoB;AAmBzCgB,EAAAA,wBAAwB,EAAEx0B;AAnBe,CAA3C;;AA0BA,MAAMurB,uBAAmC,GAAG;AAC1CnP,EAAAA,WAD0C;AAG1C0X,EAAAA,WAAW,EAAEvB,cAH6B;AAI1CwB,EAAAA,UAAU,EAAE3X,WAJ8B;AAK1C8S,EAAAA,SAAS,EAAEuC,YAL+B;AAM1CuC,EAAAA,mBAAmB,EAAE9B,sBANqB;AAO1CjC,EAAAA,eAAe,EAAE2B,kBAPyB;AAQ1CqC,EAAAA,OAAO,EAAEvB,UARiC;AAS1CwB,EAAAA,UAAU,EAAE/G,aAT8B;AAU1CgH,EAAAA,MAAM,EAAEnD,SAVkC;AAW1CrC,EAAAA,QAAQ,EAAE4B,WAXgC;AAY1C6D,EAAAA,aAAa,EAAE/B,gBAZ2B;AAa1CgC,EAAAA,gBAAgB,EAAEvB,mBAbwB;AAc1CwB,EAAAA,aAAa,EAAEhB,gBAd2B;AAe1C/E,EAAAA,gBAAgB,EAAEoB,mBAfwB;AAgB1CG,EAAAA,oBAAoB,EAAEC,uBAhBoB;AAiB1CwE,EAAAA,mBAAmB,EAAEZ,sBAjBqB;AAmB1Ca,EAAAA,wBAAwB,EAAEx0B;AAnBgB,CAA5C;;AA0BA,MAAMyrB,yBAAqC,GAAG;AAC5CrP,EAAAA,WAD4C;AAG5C0X,EAAAA,WAAW,EAAEvB,cAH+B;AAI5CwB,EAAAA,UAAU,EAAE3X,WAJgC;AAK5C8S,EAAAA,SAAS,EAAEuC,YALiC;AAM5CuC,EAAAA,mBAAmB,EAAE9B,sBANuB;AAO5CjC,EAAAA,eAAe,EAAE2B,kBAP2B;AAQ5CqC,EAAAA,OAAO,EAAEvB,UARmC;AAS5CwB,EAAAA,UAAU,EAAEtG,eATgC;AAU5CuG,EAAAA,MAAM,EAAEnD,SAVoC;AAW5CrC,EAAAA,QAAQ,EAAE6B,aAXkC;AAY5C4D,EAAAA,aAAa,EAAE/B,gBAZ6B;AAa5CgC,EAAAA,gBAAgB,EAAEtB,qBAb0B;AAc5CuB,EAAAA,aAAa,EAAEf,kBAd6B;AAe5ChF,EAAAA,gBAAgB,EAAEoB,mBAf0B;AAgB5CG,EAAAA,oBAAoB,EAAEF,sBAhBsB;AAiB5C2E,EAAAA,mBAAmB,EAAEX,wBAjBuB;AAmB5CY,EAAAA,wBAAwB,EAAEx0B;AAnBkB,CAA9C;;ACtoEA,SAASy0B,wCAAT,CACE90B,KADF,EAEE+0B,gBAFF,EAGQ;AACN,EAA0B;AACxB;AACD;AAUF;;AAED,SAASC,0BAAT,CAAoCh1B,KAApC,EAAwD;AACtD,EAAwD;AACtD;AACD;AAwBF;;AAsCD,SAASi1B,sBAAT,GAAwC;AACtC,EAAwD;AACtD;AACD;AAEF;;ACvLM,SAASC,mBAAT,CACLp4B,KADK,EAEL8Y,MAFK,EAGa;AAClB;AACA;AACA,SAAO;AACL9Y,IAAAA,KADK;AAEL8Y,IAAAA,MAFK;AAGL4E,IAAAA,KAAK,EAAEH,2BAA2B,CAACzE,MAAD;AAH7B,GAAP;AAKD;;MCVC,OAAOuf,iDAAM,CAACC,eAAd,KAAkC;;;;AAIpC,AAAO,SAASA,eAAT,CACLC,QADK,EAELC,SAFK,EAGI;AACT,QAAMC,aAAa,GAAG;AACpBC,IAAAA,cAAc,EAAEF,SAAS,CAAC9a,KAAV,KAAoB,IAApB,GAA2B8a,SAAS,CAAC9a,KAArC,GAA6C,EADzC;AAEpBl0B,IAAAA,KAAK,EAAEgvC,SAAS,CAACx4B,KAFG;AAGpB24B,IAAAA,aAAa,EACXJ,QAAQ,KAAK,IAAb,IAAqBA,QAAQ,CAACjiC,GAAT,KAAiBpD,cAAtC,GACIqlC,QAAQ,CAACjhC,SADb,GAEI;AANc,GAAtB;AAQA,SAAO+gC,iDAAM,CAACC,eAAP,CAAuBG,aAAvB,CAAP;AACD;;ACpBM,SAASG,gBAAT,CACLL,QADK,EAELC,SAFK,EAGC;AACN,MAAI;AACF,UAAMK,QAAQ,GAAGP,eAAe,CAACC,QAAD,EAAWC,SAAX,CAAhC,CADE;AAIF;;AACA,QAAIK,QAAQ,KAAK,KAAjB,EAAwB;AACtB;AACD;;AAED,UAAMrvC,KAAK,GAAIgvC,SAAS,CAACx4B,KAAzB;;AACA,QAAIsd,KAAJ,EAAa;AACX,YAAMxE,MAAM,GAAG0f,SAAS,CAAC1f,MAAzB;AACA,YAAM4E,KAAK,GAAG8a,SAAS,CAAC9a,KAAxB;AACA,YAAMgb,cAAc,GAAGhb,KAAK,KAAK,IAAV,GAAiBA,KAAjB,GAAyB,EAAhD,CAHW;AAKX;AACA;;AACA,UAAIl0B,KAAK,IAAI,IAAT,IAAiBA,KAAK,CAACsvC,gBAA3B,EAA6C;AAC3C,YAAIP,QAAQ,CAACjiC,GAAT,KAAiBpD,cAArB,EAAqC;AACnC;AACA;AACA;AACA;AACD,SAN0C;AAQ3C;AACA;AACA;;;AACA6lC,QAAAA,OAAO,CAAC,OAAD,CAAP,CAAiBvvC,KAAjB,EAX2C;AAY3C;AACA;AACD;;AAED,YAAMwvC,aAAa,GAAGlgB,MAAM,GAAG7V,yBAAyB,CAAC6V,MAAD,CAA5B,GAAuC,IAAnE;AACA,YAAMmgB,oBAAoB,GAAGD,aAAa,yCACFA,aADE,oBAEtC,2DAFJ;AAIA,UAAIE,oBAAJ;;AACA,UAAIX,QAAQ,CAACjiC,GAAT,KAAiBlD,QAArB,EAA+B;AAC7B8lC,QAAAA,oBAAoB,GAClB,2FACA,uFAFF;AAGD,OAJD,MAIO;AACL,cAAMC,iBAAiB,GACrBl2B,yBAAyB,CAACs1B,QAAD,CAAzB,IAAuC,WADzC;AAEAW,QAAAA,oBAAoB,GAClB,8GAC0CC,iBAD1C,OADF;AAGD;;AACD,YAAMC,eAAe,GAChBH,oBAAH,UAA4BP,cAA5B,kBACGQ,oBADH,CADF,CAxCW;AA6CX;AACA;AACA;;AACAH,MAAAA,OAAO,CAAC,OAAD,CAAP,CAAiBK,eAAjB,EAhDW;AAiDZ,KAjDD,MAiDO;AACL;AACA;AACA;AACAL,MAAAA,OAAO,CAAC,OAAD,CAAP,CAAiBvvC,KAAjB,EAJK;AAKN;AACF,GAjED,CAiEE,OAAOT,CAAP,EAAU;AACV;AACA;AACA;AACA;AACAwtB,IAAAA,UAAU,CAAC,MAAM;AACf,YAAMxtB,CAAN;AACD,KAFS,CAAV;AAGD;AACF;;ACTD,MAAMswC,eAAe,GAAG,OAAOC,OAAP,KAAmB,UAAnB,GAAgCA,OAAhC,GAA0Cn9B,GAAlE;;AAEA,SAASo9B,qBAAT,CACEr2B,KADF,EAEEs1B,SAFF,EAGE7nB,IAHF,EAIiB;AACf,QAAMuO,MAAM,GAAGC,YAAY,CAAC7P,WAAD,EAAcqB,IAAd,CAA3B,CADe;;AAGfuO,EAAAA,MAAM,CAAC5oB,GAAP,GAAamqB,aAAb,CAHe;AAKf;;AACAvB,EAAAA,MAAM,CAACtc,OAAP,GAAiB;AAACwjB,IAAAA,OAAO,EAAE;AAAV,GAAjB;AACA,QAAM58B,KAAK,GAAGgvC,SAAS,CAACx4B,KAAxB;;AACAkf,EAAAA,MAAM,CAAChtB,QAAP,GAAkB,MAAM;AACtBsnC,IAAAA,eAAe,CAAChwC,KAAD,CAAf;AACAovC,IAAAA,gBAAgB,CAAC11B,KAAD,EAAQs1B,SAAR,CAAhB;AACD,GAHD;;AAIA,SAAOtZ,MAAP;AACD;;AAED,SAASua,sBAAT,CACEv2B,KADF,EAEEs1B,SAFF,EAGE7nB,IAHF,EAIiB;AACf,QAAMuO,MAAM,GAAGC,YAAY,CAAC7P,WAAD,EAAcqB,IAAd,CAA3B;AACAuO,EAAAA,MAAM,CAAC5oB,GAAP,GAAamqB,aAAb;AACA,QAAMiZ,wBAAwB,GAAGx2B,KAAK,CAACjY,IAAN,CAAWyuC,wBAA5C;;AACA,MAAI,OAAOA,wBAAP,KAAoC,UAAxC,EAAoD;AAClD,UAAMlwC,KAAK,GAAGgvC,SAAS,CAACx4B,KAAxB;;AACAkf,IAAAA,MAAM,CAACtc,OAAP,GAAiB,MAAM;AACrB,aAAO82B,wBAAwB,CAAClwC,KAAD,CAA/B;AACD,KAFD;;AAGA01B,IAAAA,MAAM,CAAChtB,QAAP,GAAkB,MAAM;AACtB;AAGA0mC,MAAAA,gBAAgB,CAAC11B,KAAD,EAAQs1B,SAAR,CAAhB;AACD,KALD;AAMD;;AAED,QAAMxtC,IAAI,GAAGkY,KAAK,CAAC5L,SAAnB;;AACA,MAAItM,IAAI,KAAK,IAAT,IAAiB,OAAOA,IAAI,CAAC2uC,iBAAZ,KAAkC,UAAvD,EAAmE;AACjEza,IAAAA,MAAM,CAAChtB,QAAP,GAAkB,SAASA,QAAT,GAAoB;AACpC;AAGA0mC,MAAAA,gBAAgB,CAAC11B,KAAD,EAAQs1B,SAAR,CAAhB;;AACA,UAAI,OAAOkB,wBAAP,KAAoC,UAAxC,EAAoD;AAClD;AACA;AACA;AACA;AACA;AACAE,QAAAA,+BAA+B,CAAC,IAAD,CAA/B;AACD;;AACD,YAAMpwC,KAAK,GAAGgvC,SAAS,CAACx4B,KAAxB;AACA,YAAM0d,KAAK,GAAG8a,SAAS,CAAC9a,KAAxB;AACA,WAAKic,iBAAL,CAAuBnwC,KAAvB,EAA8B;AAC5BkvC,QAAAA,cAAc,EAAEhb,KAAK,KAAK,IAAV,GAAiBA,KAAjB,GAAyB;AADb,OAA9B;AAiBD,KAhCD;AAiCD;;AACD,SAAOwB,MAAP;AACD;;AAED,SAAS2a,kBAAT,CAA4BnuB,IAA5B,EAA6CouB,QAA7C,EAAiEpqB,KAAjE,EAA+E;AAC7E;AACA;AACA;AACA,MAAIqqB,SAAS,GAAGruB,IAAI,CAACquB,SAArB;AACA,MAAIC,SAAJ;;AACA,MAAID,SAAS,KAAK,IAAlB,EAAwB;AACtBA,IAAAA,SAAS,GAAGruB,IAAI,CAACquB,SAAL,GAAiB,IAAIV,eAAJ,EAA7B;AACAW,IAAAA,SAAS,GAAG,IAAIC,GAAJ,EAAZ;AACAF,IAAAA,SAAS,CAACx9B,GAAV,CAAcu9B,QAAd,EAAwBE,SAAxB;AACD,GAJD,MAIO;AACLA,IAAAA,SAAS,GAAGD,SAAS,CAACp9B,GAAV,CAAcm9B,QAAd,CAAZ;;AACA,QAAIE,SAAS,KAAK7uC,SAAlB,EAA6B;AAC3B6uC,MAAAA,SAAS,GAAG,IAAIC,GAAJ,EAAZ;AACAF,MAAAA,SAAS,CAACx9B,GAAV,CAAcu9B,QAAd,EAAwBE,SAAxB;AACD;AACF;;AACD,MAAI,CAACA,SAAS,CAACE,GAAV,CAAcxqB,KAAd,CAAL,EAA2B;AACzB;AACAsqB,IAAAA,SAAS,CAACG,GAAV,CAAczqB,KAAd;AACA,UAAM0qB,IAAI,GAAGC,iBAAiB,CAAC5J,IAAlB,CAAuB,IAAvB,EAA6B/kB,IAA7B,EAAmCouB,QAAnC,EAA6CpqB,KAA7C,CAAb;;AAOAoqB,IAAAA,QAAQ,CAACQ,IAAT,CAAcF,IAAd,EAAoBA,IAApB;AACD;AACF;;AAED,SAASG,cAAT,CACE7uB,IADF,EAEEya,WAFF,EAGEqU,WAHF,EAIEx6B,KAJF,EAKEy6B,eALF,EAME;AACA;AACAD,EAAAA,WAAW,CAAC70B,KAAZ,IAAqBjB,UAArB;;AASA,MACE1E,KAAK,KAAK,IAAV,IACA,OAAOA,KAAP,KAAiB,QADjB,IAEA,OAAOA,KAAK,CAACs6B,IAAb,KAAsB,UAHxB,EAIE;AACA;;AAkBA,UAAMR,QAAkB,GAAI95B,KAA5B;AAiBA;;;AACA,UAAM1J,GAAG,GAAGkkC,WAAW,CAAClkC,GAAxB;;AACA,QACE,CAACkkC,WAAW,CAACjS,IAAZ,GAAmB3b,cAApB,MAAwCD,MAAxC,KACCrW,GAAG,KAAKrD,iBAAR,IACCqD,GAAG,KAAK1C,UADT,IAEC0C,GAAG,KAAKtC,mBAHV,CADF,EAKE;AACA,YAAM0mC,aAAa,GAAGF,WAAW,CAACzjC,SAAlC;;AACA,UAAI2jC,aAAJ,EAAmB;AACjBF,QAAAA,WAAW,CAACnb,WAAZ,GAA0Bqb,aAAa,CAACrb,WAAxC;AACAmb,QAAAA,WAAW,CAAC3Z,aAAZ,GAA4B6Z,aAAa,CAAC7Z,aAA1C;AACA2Z,QAAAA,WAAW,CAAC9qB,KAAZ,GAAoBgrB,aAAa,CAAChrB,KAAlC;AACD,OAJD,MAIO;AACL8qB,QAAAA,WAAW,CAACnb,WAAZ,GAA0B,IAA1B;AACAmb,QAAAA,WAAW,CAAC3Z,aAAZ,GAA4B,IAA5B;AACD;AACF;;AAED,UAAM8Z,0BAA0B,GAAG7O,kBAAkB,CACnDD,mBAAmB,CAACp5B,OAD+B,EAElDk5B,8BAFkD,CAArD,CAvDA;;AA6DA,QAAI3R,cAAc,GAAGmM,WAArB;;AACA,OAAG;AACD,UACEnM,cAAc,CAAC1jB,GAAf,KAAuBxC,iBAAvB,IACA04B,qBAAqB,CAACxS,cAAD,EAAiB2gB,0BAAjB,CAFvB,EAGE;AACA;AAEA;AACA;AACA,cAAMC,SAAwB,GAAI5gB,cAAc,CAACqF,WAAjD;;AACA,YAAIub,SAAS,KAAK,IAAlB,EAAwB;AACtB,gBAAMvb,WAAW,GAAI,IAAI4a,GAAJ,EAArB;AACA5a,UAAAA,WAAW,CAAC8a,GAAZ,CAAgBL,QAAhB;AACA9f,UAAAA,cAAc,CAACqF,WAAf,GAA6BA,WAA7B;AACD,SAJD,MAIO;AACLub,UAAAA,SAAS,CAACT,GAAV,CAAcL,QAAd;AACD,SAZD;AAeA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,YACE,CAAC9f,cAAc,CAACuO,IAAf,GAAsB3b,cAAvB,MAA2CD,MAA3C,IACAqN,cAAc,KAAKmM,WAFrB,EAGE;AACAnM,UAAAA,cAAc,CAACrU,KAAf,IAAwB1B,UAAxB;AACAu2B,UAAAA,WAAW,CAAC70B,KAAZ,IAAqBf,4BAArB,CAFA;AAKA;AACA;;AACA41B,UAAAA,WAAW,CAAC70B,KAAZ,IAAqB,EAAEnB,mBAAmB,GAAGE,UAAxB,CAArB;;AAsBA,cAAI81B,WAAW,CAAClkC,GAAZ,KAAoBpD,cAAxB,EAAwC;AACtC,kBAAM2nC,kBAAkB,GAAGL,WAAW,CAACzjC,SAAvC;;AACA,gBAAI8jC,kBAAkB,KAAK,IAA3B,EAAiC;AAC/B;AACA;AACA;AACAL,cAAAA,WAAW,CAAClkC,GAAZ,GAAkBpC,wBAAlB;AACD,aALD,MAKO;AACL;AACA;AACA;AACA,oBAAMgrB,MAAM,GAAGC,YAAY,CAAC7P,WAAD,EAAcnC,QAAd,CAA3B;AACA+R,cAAAA,MAAM,CAAC5oB,GAAP,GAAa8oB,WAAb;AACAgC,cAAAA,aAAa,CAACoZ,WAAD,EAActb,MAAd,AAAA,CAAb;AACD;AACF,WA5CD;AA+CA;;;AACAsb,UAAAA,WAAW,CAAC9qB,KAAZ,GAAoB4C,UAAU,CAACkoB,WAAW,CAAC9qB,KAAb,EAAoBvC,QAApB,CAA9B,CAhDA;;AAmDA;AACD,SAlFD;AAqFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA0sB,QAAAA,kBAAkB,CAACnuB,IAAD,EAAOouB,QAAP,EAAiBW,eAAjB,CAAlB;AAEAzgB,QAAAA,cAAc,CAACrU,KAAf,IAAwBhB,aAAxB,CAhIA;AAkIA;;AACAqV,QAAAA,cAAc,CAACtK,KAAf,GAAuB+qB,eAAvB;AAEA;AACD,OA1IA;AA4ID;;;AACAzgB,MAAAA,cAAc,GAAGA,cAAc,CAAC3jB,MAAhC;AACD,KA9ID,QA8IS2jB,cAAc,KAAK,IA9I5B,EA9DA;AA8MA;;;AACAha,IAAAA,KAAK,GAAG,IAAIoY,KAAJ,CACN,CAACnV,yBAAyB,CAACu3B,WAAD,CAAzB,IAA0C,mBAA3C,IACE,iEADF,GAEE,IAFF,GAGE,gEAHF,GAIE,wDALI,CAAR;AAOD,GArOD;AAwOA;AACA;;;AACAM,EAAAA,cAAc;AAEd96B,EAAAA,KAAK,GAAGo4B,mBAAmB,CAACp4B,KAAD,EAAQw6B,WAAR,CAA3B;AACA,MAAIxgB,cAAc,GAAGmM,WAArB;;AACA,KAAG;AACD,YAAQnM,cAAc,CAAC1jB,GAAvB;AACE,WAAKlD,QAAL;AAAe;AACb,gBAAMolC,SAAS,GAAGx4B,KAAlB;AACAga,UAAAA,cAAc,CAACrU,KAAf,IAAwBhB,aAAxB;AACA,gBAAMgM,IAAI,GAAGqB,iBAAiB,CAACyoB,eAAD,CAA9B;AACAzgB,UAAAA,cAAc,CAACtK,KAAf,GAAuB4C,UAAU,CAAC0H,cAAc,CAACtK,KAAhB,EAAuBiB,IAAvB,CAAjC;AACA,gBAAMuO,MAAM,GAAGqa,qBAAqB,CAACvf,cAAD,EAAiBwe,SAAjB,EAA4B7nB,IAA5B,CAApC;AACA8Q,UAAAA,qBAAqB,CAACzH,cAAD,EAAiBkF,MAAjB,CAArB;AACA;AACD;;AACD,WAAKhsB,cAAL;AACE;AACA,cAAMslC,SAAS,GAAGx4B,KAAlB;AACA,cAAMoZ,IAAI,GAAGY,cAAc,CAAC/uB,IAA5B;AACA,cAAM8D,QAAQ,GAAGirB,cAAc,CAAC1iB,SAAhC;;AACA,YACE,CAAC0iB,cAAc,CAACrU,KAAf,GAAuB1B,UAAxB,MAAwCR,OAAxC,KACC,OAAO2V,IAAI,CAACsgB,wBAAZ,KAAyC,UAAzC,IACE3qC,QAAQ,KAAK,IAAb,IACC,OAAOA,QAAQ,CAAC4qC,iBAAhB,KAAsC,UADvC,IAEC,CAACoB,kCAAkC,CAAChsC,QAAD,CAJvC,CADF,EAME;AACAirB,UAAAA,cAAc,CAACrU,KAAf,IAAwBhB,aAAxB;AACA,gBAAMgM,IAAI,GAAGqB,iBAAiB,CAACyoB,eAAD,CAA9B;AACAzgB,UAAAA,cAAc,CAACtK,KAAf,GAAuB4C,UAAU,CAAC0H,cAAc,CAACtK,KAAhB,EAAuBiB,IAAvB,CAAjC,CAHA;;AAKA,gBAAMuO,MAAM,GAAGua,sBAAsB,CACnCzf,cADmC,EAEnCwe,SAFmC,EAGnC7nB,IAHmC,CAArC;AAKA8Q,UAAAA,qBAAqB,CAACzH,cAAD,EAAiBkF,MAAjB,CAArB;AACA;AACD;;AACD;AAlCJ;;AAsCAlF,IAAAA,cAAc,GAAGA,cAAc,CAAC3jB,MAAhC;AACD,GAxCD,QAwCS2jB,cAAc,KAAK,IAxC5B;AAyCD;;ACrUD,SAASghB,UAAT,CAAoBhhB,cAApB,EAA2C;AACzC;AACA;AACAA,EAAAA,cAAc,CAACrU,KAAf,IAAwB/B,MAAxB;AACD;;AAED,SAASq3B,OAAT,CAAiBjhB,cAAjB,EAAwC;AACtCA,EAAAA,cAAc,CAACrU,KAAf,IAAwBzB,GAAxB;AAID;;AA2BD,IAAIg3B,iBAAJ;AACA,IAAIC,mBAAJ;AACA,IAAIC,mBAAJ;AACA,IAAIC,cAAJ;;AACA,AAAsB;AACpB;AAEAH,EAAAA,iBAAiB,GAAG,UAClBz0B,MADkB,EAElBuT,cAFkB,EAGlBshB,qBAHkB,EAIlBC,QAJkB,EAKlB;AACA;AACA;AACA,QAAI/1B,IAAI,GAAGwU,cAAc,CAAC3T,KAA1B;;AACA,WAAOb,IAAI,KAAK,IAAhB,EAAsB;AACpB,UAAIA,IAAI,CAAClP,GAAL,KAAahD,aAAb,IAA8BkS,IAAI,CAAClP,GAAL,KAAa/C,QAA/C,EAAyD;AACvDshB,QAAAA,kBAAkB,CAACpO,MAAD,EAASjB,IAAI,CAAClO,SAAd,CAAlB;AACD,OAFD,MAEO,IAAIkO,IAAI,CAAClP,GAAL,KAAajD,UAAjB,EAA6B,CAA7B,MAIA,IAAImS,IAAI,CAACa,KAAL,KAAe,IAAnB,EAAyB;AAC9Bb,QAAAA,IAAI,CAACa,KAAL,CAAWhQ,MAAX,GAAoBmP,IAApB;AACAA,QAAAA,IAAI,GAAGA,IAAI,CAACa,KAAZ;AACA;AACD;;AACD,UAAIb,IAAI,KAAKwU,cAAb,EAA6B;AAC3B;AACD;;AACD,aAAOxU,IAAI,CAACc,OAAL,KAAiB,IAAxB,EAA8B;AAC5B,YAAId,IAAI,CAACnP,MAAL,KAAgB,IAAhB,IAAwBmP,IAAI,CAACnP,MAAL,KAAgB2jB,cAA5C,EAA4D;AAC1D;AACD;;AACDxU,QAAAA,IAAI,GAAGA,IAAI,CAACnP,MAAZ;AACD;;AACDmP,MAAAA,IAAI,CAACc,OAAL,CAAajQ,MAAb,GAAsBmP,IAAI,CAACnP,MAA3B;AACAmP,MAAAA,IAAI,GAAGA,IAAI,CAACc,OAAZ;AACD;AACF,GAjCD;;AAmCA60B,EAAAA,mBAAmB,GAAG,UAAS1oC,OAAT,EAAgCunB,cAAhC,EAAuD;AAE5E,GAFD;;AAGAohB,EAAAA,mBAAmB,GAAG,UACpB3oC,OADoB,EAEpBunB,cAFoB,EAGpB/uB,IAHoB,EAIpBmrB,QAJoB,EAKpBpB,qBALoB,EAMpB;AACA;AACA;AACA,UAAMmB,QAAQ,GAAG1jB,OAAO,CAAC4yB,aAAzB;;AACA,QAAIlP,QAAQ,KAAKC,QAAjB,EAA2B;AACzB;AACA;AACA;AACD,KARD;AAWA;AACA;AACA;;;AACA,UAAMrnB,QAAkB,GAAGirB,cAAc,CAAC1iB,SAA1C;AACA,UAAMkkC,kBAAkB,GAAGlQ,cAAc,EAAzC,CAfA;AAiBA;AACA;;AACA,UAAM/jB,aAAa,GAAG2O,aAAa,CACjCnnB,AADiC,CAAnC,CAnBA;;AA4BAirB,IAAAA,cAAc,CAACqF,WAAf,GAA8B9X,aAA9B,CA5BA;AA8BA;;AACA,QAAIA,aAAJ,EAAmB;AACjByzB,MAAAA,UAAU,CAAChhB,cAAD,CAAV;AACD;AACF,GAxCD;;AAyCAqhB,EAAAA,cAAc,GAAG,UACf5oC,OADe,EAEfunB,cAFe,EAGf3C,OAHe,EAIfC,OAJe,EAKf;AACA;AACA,QAAID,OAAO,KAAKC,OAAhB,EAAyB;AACvB0jB,MAAAA,UAAU,CAAChhB,cAAD,CAAV;AACD;AACF,GAVD;AAWD,CA7FD;;AAgXA,SAASyhB,kBAAT,CACEC,WADF,EAEEC,wBAFF,EAGE;AACA;AAKA,UAAQD,WAAW,CAACE,QAApB;AACE,SAAK,QAAL;AAAe;AACb;AACA;AACA;AACA;AACA;AACA,YAAIC,QAAQ,GAAGH,WAAW,CAACI,IAA3B;AACA,YAAIC,YAAY,GAAG,IAAnB;;AACA,eAAOF,QAAQ,KAAK,IAApB,EAA0B;AACxB,cAAIA,QAAQ,CAAC9kC,SAAT,KAAuB,IAA3B,EAAiC;AAC/BglC,YAAAA,YAAY,GAAGF,QAAf;AACD;;AACDA,UAAAA,QAAQ,GAAGA,QAAQ,CAACv1B,OAApB;AACD,SAbY;AAeb;;;AACA,YAAIy1B,YAAY,KAAK,IAArB,EAA2B;AACzB;AACAL,UAAAA,WAAW,CAACI,IAAZ,GAAmB,IAAnB;AACD,SAHD,MAGO;AACL;AACA;AACAC,UAAAA,YAAY,CAACz1B,OAAb,GAAuB,IAAvB;AACD;;AACD;AACD;;AACD,SAAK,WAAL;AAAkB;AAChB;AACA;AACA;AACA;AACA;AACA,YAAIu1B,QAAQ,GAAGH,WAAW,CAACI,IAA3B;AACA,YAAIC,YAAY,GAAG,IAAnB;;AACA,eAAOF,QAAQ,KAAK,IAApB,EAA0B;AACxB,cAAIA,QAAQ,CAAC9kC,SAAT,KAAuB,IAA3B,EAAiC;AAC/BglC,YAAAA,YAAY,GAAGF,QAAf;AACD;;AACDA,UAAAA,QAAQ,GAAGA,QAAQ,CAACv1B,OAApB;AACD,SAbe;AAehB;;;AACA,YAAIy1B,YAAY,KAAK,IAArB,EAA2B;AACzB;AACA,cAAI,CAACJ,wBAAD,IAA6BD,WAAW,CAACI,IAAZ,KAAqB,IAAtD,EAA4D;AAC1D;AACA;AACAJ,YAAAA,WAAW,CAACI,IAAZ,CAAiBx1B,OAAjB,GAA2B,IAA3B;AACD,WAJD,MAIO;AACLo1B,YAAAA,WAAW,CAACI,IAAZ,GAAmB,IAAnB;AACD;AACF,SATD,MASO;AACL;AACA;AACAC,UAAAA,YAAY,CAACz1B,OAAb,GAAuB,IAAvB;AACD;;AACD;AACD;AA1DH;AA4DD;;AAED,SAAS01B,gBAAT,CAA0BC,aAA1B,EAAgD;AAC9C,QAAMC,UAAU,GACdD,aAAa,CAACllC,SAAd,KAA4B,IAA5B,IACAklC,aAAa,CAACllC,SAAd,CAAwBsP,KAAxB,KAAkC41B,aAAa,CAAC51B,KAFlD;AAIA,MAAI81B,aAAa,GAAGlvB,OAApB;AACA,MAAImvB,YAAY,GAAG34B,OAAnB;;AAEA,MAAI,CAACy4B,UAAL,EAAiB;AACf;AACA,IA+BO;AACL,UAAI71B,KAAK,GAAG41B,aAAa,CAAC51B,KAA1B;;AACA,aAAOA,KAAK,KAAK,IAAjB,EAAuB;AACrB81B,QAAAA,aAAa,GAAG7pB,UAAU,CACxB6pB,aADwB,EAExB7pB,UAAU,CAACjM,KAAK,CAACqJ,KAAP,EAAcrJ,KAAK,CAACsY,UAApB,CAFc,CAA1B;AAKAyd,QAAAA,YAAY,IAAI/1B,KAAK,CAAC+1B,YAAtB;AACAA,QAAAA,YAAY,IAAI/1B,KAAK,CAACV,KAAtB,CAPqB;AAUrB;AACA;;AACAU,QAAAA,KAAK,CAAChQ,MAAN,GAAe4lC,aAAf;AAEA51B,QAAAA,KAAK,GAAGA,KAAK,CAACC,OAAd;AACD;AACF;;AAED21B,IAAAA,aAAa,CAACG,YAAd,IAA8BA,YAA9B;AACD,GAtDD,MAsDO;AACL;AACA,IAwBO;AACL,UAAI/1B,KAAK,GAAG41B,aAAa,CAAC51B,KAA1B;;AACA,aAAOA,KAAK,KAAK,IAAjB,EAAuB;AACrB81B,QAAAA,aAAa,GAAG7pB,UAAU,CACxB6pB,aADwB,EAExB7pB,UAAU,CAACjM,KAAK,CAACqJ,KAAP,EAAcrJ,KAAK,CAACsY,UAApB,CAFc,CAA1B,CADqB;AAOrB;AACA;AACA;;AACAyd,QAAAA,YAAY,IAAI/1B,KAAK,CAAC+1B,YAAN,GAAqB/2B,UAArC;AACA+2B,QAAAA,YAAY,IAAI/1B,KAAK,CAACV,KAAN,GAAcN,UAA9B,CAXqB;AAcrB;AACA;;AACAgB,QAAAA,KAAK,CAAChQ,MAAN,GAAe4lC,aAAf;AAEA51B,QAAAA,KAAK,GAAGA,KAAK,CAACC,OAAd;AACD;AACF;;AAED21B,IAAAA,aAAa,CAACG,YAAd,IAA8BA,YAA9B;AACD;;AAEDH,EAAAA,aAAa,CAACtd,UAAd,GAA2Bwd,aAA3B;AAEA,SAAOD,UAAP;AACD;;AA6DD,SAASG,YAAT,CACE5pC,OADF,EAEEunB,cAFF,EAGE0E,WAHF,EAIgB;AACd,QAAMtI,QAAQ,GAAG4D,cAAc,CAAC6L,YAAhC;;AAEA,UAAQ7L,cAAc,CAAC1jB,GAAvB;AACE,SAAKnD,sBAAL;AACA,SAAKc,aAAL;AACA,SAAKD,mBAAL;AACA,SAAKf,iBAAL;AACA,SAAKW,UAAL;AACA,SAAKJ,QAAL;AACA,SAAKC,IAAL;AACA,SAAKI,QAAL;AACA,SAAKH,eAAL;AACA,SAAKK,aAAL;AACEioC,MAAAA,gBAAgB,CAAChiB,cAAD,CAAhB;AACA,aAAO,IAAP;;AACF,SAAK9mB,cAAL;AAAqB;AACnB,cAAM+mB,SAAS,GAAGD,cAAc,CAAC/uB,IAAjC;;AACA,YAAIqxC,iBAAuB,CAACriB,SAAD,CAA3B,EAAwC;AACtCsiB,UAAAA,UAAgB,CAACviB,AAAD,CAAhB;AACD;;AACDgiB,QAAAA,gBAAgB,CAAChiB,cAAD,CAAhB;AACA,eAAO,IAAP;AACD;;AACD,SAAK5mB,QAAL;AAAe;AACb,cAAMopC,SAAS,GAAIxiB,cAAc,CAAC1iB,SAAlC;;AAOA+zB,QAAAA,gBAAgB,CAACrR,AAAD,CAAhB;AACAyiB,QAAAA,wBAA8B,CAACziB,AAAD,CAA9B;AACA0iB,QAAAA,2BAAwC;;AACxC,YAAIF,SAAS,CAACG,cAAd,EAA8B;AAC5BH,UAAAA,SAAS,CAAC9zC,OAAV,GAAoB8zC,SAAS,CAACG,cAA9B;AACAH,UAAAA,SAAS,CAACG,cAAV,GAA2B,IAA3B;AACD;;AACD,YAAIlqC,OAAO,KAAK,IAAZ,IAAoBA,OAAO,CAAC4T,KAAR,KAAkB,IAA1C,EAAgD;AAC9C;AACA;AACA,gBAAMu2B,WAAW,GAAGtP,iBAAiB,CAACtT,AAAD,CAArC;;AACA,cAAI4iB,WAAJ,EAAiB;AACf;AACA;AACA5B,YAAAA,UAAU,CAAChhB,cAAD,CAAV;AACD,WAJD,MAIO,IAAI,CAACwiB,SAAS,CAACK,OAAf,EAAwB;AAC7B;AACA;AACA;AACA;AACA7iB,YAAAA,cAAc,CAACrU,KAAf,IAAwBxB,QAAxB;AACD;AACF;;AACDg3B,QAAAA,mBAAmB,CAAC1oC,OAAD,EAAUunB,cAAV,CAAnB;AACAgiB,QAAAA,gBAAgB,CAAChiB,cAAD,CAAhB;AACA,eAAO,IAAP;AACD;;AACD,SAAK1mB,aAAL;AAAoB;AAClBk4B,QAAAA,cAAc,CAACxR,cAAD,CAAd;AACA,cAAMhF,qBAAqB,GAAGgW,oBAAoB,EAAlD;AACA,cAAM//B,IAAI,GAAG+uB,cAAc,CAAC/uB,IAA5B;;AACA,YAAIwH,OAAO,KAAK,IAAZ,IAAoBunB,cAAc,CAAC1iB,SAAf,IAA4B,IAApD,EAA0D;AACxD8jC,UAAAA,mBAAmB,CACjB3oC,OADiB,EAEjBunB,cAFiB,EAGjB/uB,IAHiB,EAIjBmrB,QAJiB,EAKjBpB,qBALiB,CAAnB;;AAQA,cAAIviB,OAAO,CAAC6zB,GAAR,KAAgBtM,cAAc,CAACsM,GAAnC,EAAwC;AACtC2U,YAAAA,OAAO,CAACjhB,cAAD,CAAP;AACD;AACF,SAZD,MAYO;AACL,cAAI,CAAC5D,QAAL,EAAe;AAAA,kBAEX4D,cAAc,CAAC1iB,SAAf,KAA6B,IAFlB;AAAA;AAAA;;;AAOb0kC,YAAAA,gBAAgB,CAAChiB,cAAD,CAAhB;AACA,mBAAO,IAAP;AACD;;AAED,gBAAMwhB,kBAAkB,GAAGlQ,cAAc,EAAzC,CAZK;AAcL;AACA;AACA;;AACA,gBAAMsR,WAAW,GAAGtP,iBAAiB,CAACtT,AAAD,CAArC;;AACA,cAAI4iB,WAAJ,EAAiB;AACf;AACA;AACA,gBACExP,4BAA4B,CAC1BpT,AAD0B,CAD9B,EAME;AACA;AACA;AACAghB,cAAAA,UAAU,CAAChhB,cAAD,CAAV;AACD;AACF,WAdD,MAcO;AACL,kBAAMjrB,QAAQ,GAAGgmB,cAAc,CAC7B9pB,IAD6B,EAE7BmrB,QAF6B,EAG7BpB,qBAH6B,EAI7BwmB,kBAJ6B,EAK7BxhB,cAL6B,CAA/B;AAQAkhB,YAAAA,iBAAiB,CAACnsC,QAAD,EAAWirB,cAAX,EAA2B,KAA3B,EAAkC,KAAlC,CAAjB;AAEAA,YAAAA,cAAc,CAAC1iB,SAAf,GAA2BvI,QAA3B,CAXK;AAcL;AACA;;AACA,gBACEwmB,uBAAuB,CACrBxmB,QADqB,AAAA,CADzB,EAQE;AACAisC,cAAAA,UAAU,CAAChhB,cAAD,CAAV;AACD;AACF;;AAED,cAAIA,cAAc,CAACsM,GAAf,KAAuB,IAA3B,EAAiC;AAC/B;AACA2U,YAAAA,OAAO,CAACjhB,cAAD,CAAP;AACD;AACF;;AACDgiB,QAAAA,gBAAgB,CAAChiB,cAAD,CAAhB;AACA,eAAO,IAAP;AACD;;AACD,SAAKzmB,QAAL;AAAe;AACb,cAAM+jB,OAAO,GAAGlB,QAAhB;;AACA,YAAI3jB,OAAO,IAAIunB,cAAc,CAAC1iB,SAAf,IAA4B,IAA3C,EAAiD;AAC/C,gBAAM+f,OAAO,GAAG5kB,OAAO,CAAC4yB,aAAxB,CAD+C;AAG/C;;AACAgW,UAAAA,cAAc,CAAC5oC,OAAD,EAAUunB,cAAV,EAA0B3C,OAA1B,EAAmCC,OAAnC,CAAd;AACD,SALD,MAKO;AACL,cAAI,OAAOA,OAAP,KAAmB,QAAvB,EAAiC;AAAA,kBAE7B0C,cAAc,CAAC1iB,SAAf,KAA6B,IAFA;AAAA;AAAA;;AAOhC;;AACD,gBAAM0d,qBAAqB,GAAGgW,oBAAoB,EAAlD;AACA,gBAAMwQ,kBAAkB,GAAGlQ,cAAc,EAAzC;AACA,gBAAMsR,WAAW,GAAGtP,iBAAiB,CAACtT,AAAD,CAArC;;AACA,cAAI4iB,WAAJ,EAAiB;AACf,gBAAIvP,gCAAgC,CAACrT,AAAD,CAApC,EAAsD;AACpDghB,cAAAA,UAAU,CAAChhB,cAAD,CAAV;AACD;AACF,WAJD,MAIO;AACLA,YAAAA,cAAc,CAAC1iB,SAAf,GAA2B8d,kBAAkB,CAC3CkC,OAD2C,EAE3CtC,qBAF2C,EAG3CwmB,kBAH2C,EAI3CxhB,cAJ2C,CAA7C;AAMD;AACF;;AACDgiB,QAAAA,gBAAgB,CAAChiB,cAAD,CAAhB;AACA,eAAO,IAAP;AACD;;AACD,SAAKlmB,iBAAL;AAAwB;AACtBy4B,QAAAA,kBAAkB,CAACvS,AAAD,CAAlB;AACA,cAAM+H,SAA+B,GAAG/H,cAAc,CAAC6G,aAAvD;;AA6DA,YAAI,CAAC7G,cAAc,CAACrU,KAAf,GAAuB1B,UAAxB,MAAwCR,OAA5C,EAAqD;AACnD;AACAuW,UAAAA,cAAc,CAACtK,KAAf,GAAuBgP,WAAvB,CAFmD;;;AAWnD,iBAAO1E,cAAP;AACD;;AAED,cAAM8iB,cAAc,GAAG/a,SAAS,KAAK,IAArC;AACA,YAAIgb,cAAc,GAAG,KAArB;;AACA,YAAItqC,OAAO,KAAK,IAAhB,EAAsB,CAAtB,MAEO;AACL,gBAAMqvB,SAA+B,GAAGrvB,OAAO,CAACouB,aAAhD;AACAkc,UAAAA,cAAc,GAAGjb,SAAS,KAAK,IAA/B;AACD,SApFqB;AAuFtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,YAAIgb,cAAc,IAAI,CAACC,cAAvB,EAAuC;AACrC,gBAAMC,cAAqB,GAAIhjB,cAAc,CAAC3T,KAA9C;AACA22B,UAAAA,cAAc,CAACr3B,KAAf,IAAwBpB,UAAxB,CAFqC;AAKrC;AACA;;AACA,cAAI,CAACyV,cAAc,CAACuO,IAAf,GAAsB3b,cAAvB,MAA2CD,MAA/C,EAAuD;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAMswB,wBAAwB,GAC5BxqC,OAAO,KAAK,IAAZ,IACAunB,cAAc,CAACqL,aAAf,CAA6BsH,0BAA7B,KAA4D,IAF9D;;AAGA,gBACEsQ,wBAAwB,IACxBnR,kBAAkB,CAChBD,mBAAmB,CAACp5B,OADJ,EAEfk5B,8BAFe,CAFpB,EAME;AACA;AACA;AACAuR,cAAAA,gBAAgB;AACjB,aAVD,MAUO;AACL;AACA;AACAC,cAAAA,+BAA+B;AAChC;AACF;AACF;;AAED,cAAMvC,SAA+B,GAAI5gB,cAAc,CAACqF,WAAxD;;AACA,YAAIub,SAAS,KAAK,IAAlB,EAAwB;AACtB;AACA;AACA5gB,UAAAA,cAAc,CAACrU,KAAf,IAAwB/B,MAAxB;AACD;;AAWDo4B,QAAAA,gBAAgB,CAAChiB,cAAD,CAAhB;;AAaA,eAAO,IAAP;AACD;;AACD,SAAK3mB,UAAL;AACEg4B,MAAAA,gBAAgB,CAACrR,AAAD,CAAhB;AACAmhB,MAAAA,mBAAmB,CAAC1oC,OAAD,EAAUunB,cAAV,CAAnB;;AACA,UAAIvnB,OAAO,KAAK,IAAhB,EAAsB;AACpBimB,QAAAA,kBAAkB,CAACsB,cAAc,CAAC1iB,SAAf,CAAyB2e,aAA1B,CAAlB;AACD;;AACD+lB,MAAAA,gBAAgB,CAAChiB,cAAD,CAAhB;AACA,aAAO,IAAP;;AACF,SAAKrmB,eAAL;AACE;AACA,YAAMjL,OAA0B,GAAGsxB,cAAc,CAAC/uB,IAAf,CAAoBuX,QAAvD;AACA+b,MAAAA,WAAW,CAAC71B,OAAD,AAAA,CAAX;AACAszC,MAAAA,gBAAgB,CAAChiB,cAAD,CAAhB;AACA,aAAO,IAAP;;AACF,SAAK9lB,wBAAL;AAA+B;AAC7B;AACA;AACA,cAAM+lB,SAAS,GAAGD,cAAc,CAAC/uB,IAAjC;;AACA,YAAIqxC,iBAAuB,CAACriB,SAAD,CAA3B,EAAwC;AACtCsiB,UAAAA,UAAgB,CAACviB,AAAD,CAAhB;AACD;;AACDgiB,QAAAA,gBAAgB,CAAChiB,cAAD,CAAhB;AACA,eAAO,IAAP;AACD;;AACD,SAAK5lB,qBAAL;AAA4B;AAC1Bm4B,QAAAA,kBAAkB,CAACvS,AAAD,CAAlB;AAEA,cAAM0hB,WAA2C,GAC/C1hB,cAAc,CAAC6G,aADjB;;AAGA,YAAI6a,WAAW,KAAK,IAApB,EAA0B;AACxB;AACA;AACAM,UAAAA,gBAAgB,CAAChiB,cAAD,CAAhB;AACA,iBAAO,IAAP;AACD;;AAED,YAAIojB,iBAAiB,GAAG,CAACpjB,cAAc,CAACrU,KAAf,GAAuB1B,UAAxB,MAAwCR,OAAhE;AAEA,cAAM45B,YAAY,GAAG3B,WAAW,CAAC4B,SAAjC;;AACA,YAAID,YAAY,KAAK,IAArB,EAA2B;AACzB;AACA,cAAI,CAACD,iBAAL,EAAwB;AACtB;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA,kBAAMG,iBAAiB,GACrBC,wBAAwB,OACvB/qC,OAAO,KAAK,IAAZ,IAAoB,CAACA,OAAO,CAACkT,KAAR,GAAgB1B,UAAjB,MAAiCR,OAD9B,CAD1B;;AAGA,gBAAI,CAAC85B,iBAAL,EAAwB;AACtB,kBAAI1Q,GAAG,GAAG7S,cAAc,CAAC3T,KAAzB;;AACA,qBAAOwmB,GAAG,KAAK,IAAf,EAAqB;AACnB,sBAAM4Q,SAAS,GAAG7Q,kBAAkB,CAACC,GAAD,CAApC;;AACA,oBAAI4Q,SAAS,KAAK,IAAlB,EAAwB;AACtBL,kBAAAA,iBAAiB,GAAG,IAApB;AACApjB,kBAAAA,cAAc,CAACrU,KAAf,IAAwB1B,UAAxB;AACAw3B,kBAAAA,kBAAkB,CAACC,WAAD,EAAc,KAAd,CAAlB,CAHsB;AAMtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,wBAAMgC,YAAY,GAAGD,SAAS,CAACpe,WAA/B;;AACA,sBAAIqe,YAAY,KAAK,IAArB,EAA2B;AACzB1jB,oBAAAA,cAAc,CAACqF,WAAf,GAA6Bqe,YAA7B;AACA1jB,oBAAAA,cAAc,CAACrU,KAAf,IAAwB/B,MAAxB;AACD,mBArBqB;AAwBtB;AACA;AACA;;;AACAoW,kBAAAA,cAAc,CAACoiB,YAAf,GAA8B34B,OAA9B;AACAinB,kBAAAA,gBAAgB,CAAC1Q,cAAD,EAAiB0E,WAAjB,CAAhB,CA5BsB;AA+BtB;;AACA2N,kBAAAA,mBAAmB,CACjBrS,cADiB,EAEjBiS,yBAAyB,CACvBJ,mBAAmB,CAACp5B,OADG,EAEvBm5B,qBAFuB,CAFR,CAAnB,CAhCsB;;AAwCtB,yBAAO5R,cAAc,CAAC3T,KAAtB;AACD;;AACDwmB,gBAAAA,GAAG,GAAGA,GAAG,CAACvmB,OAAV;AACD;AACF;;AAED,gBAAIo1B,WAAW,CAACI,IAAZ,KAAqB,IAArB,IAA6BlvC,GAAG,KAAK+wC,mBAAmB,EAA5D,EAAgE;AAC9D;AACA;AACA;AACA3jB,cAAAA,cAAc,CAACrU,KAAf,IAAwB1B,UAAxB;AACAm5B,cAAAA,iBAAiB,GAAG,IAApB;AAEA3B,cAAAA,kBAAkB,CAACC,WAAD,EAAc,KAAd,CAAlB,CAP8D;AAU9D;AACA;AACA;AACA;AACA;AACA;AACA;;AACA1hB,cAAAA,cAAc,CAACtK,KAAf,GAAuBV,aAAvB;AACD;AACF,WApFD,MAoFO;AACLysB,YAAAA,kBAAkB,CAACC,WAAD,EAAc,KAAd,CAAlB;AACD,WAxFwB;;AA0F1B,SA1FD,MA0FO;AACL;AACA,cAAI,CAAC0B,iBAAL,EAAwB;AACtB,kBAAMK,SAAS,GAAG7Q,kBAAkB,CAACyQ,YAAD,CAApC;;AACA,gBAAII,SAAS,KAAK,IAAlB,EAAwB;AACtBzjB,cAAAA,cAAc,CAACrU,KAAf,IAAwB1B,UAAxB;AACAm5B,cAAAA,iBAAiB,GAAG,IAApB,CAFsB;AAKtB;;AACA,oBAAMM,YAAY,GAAGD,SAAS,CAACpe,WAA/B;;AACA,kBAAIqe,YAAY,KAAK,IAArB,EAA2B;AACzB1jB,gBAAAA,cAAc,CAACqF,WAAf,GAA6Bqe,YAA7B;AACA1jB,gBAAAA,cAAc,CAACrU,KAAf,IAAwB/B,MAAxB;AACD;;AAED63B,cAAAA,kBAAkB,CAACC,WAAD,EAAc,IAAd,CAAlB,CAZsB;;AActB,kBACEA,WAAW,CAACI,IAAZ,KAAqB,IAArB,IACAJ,WAAW,CAACE,QAAZ,KAAyB,QADzB,IAEA,CAACyB,YAAY,CAACtmC,SAFd,IAGA,CAACw2B,cAAc,EAJjB;AAAA,gBAKE;AACA;AACAyO,kBAAAA,gBAAgB,CAAChiB,cAAD,CAAhB;AACA,yBAAO,IAAP;AACD;AACF,aAxBD,MAwBO;AAEL;AACA;AACAptB,YAAAA,GAAG,KAAK,CAAR,GAAY8uC,WAAW,CAACkC,kBAAxB,GACED,mBAAmB,EADrB,IAEAjf,WAAW,KAAKrP,aANX,EAOL;AACA;AACA;AACA;AACA2K,cAAAA,cAAc,CAACrU,KAAf,IAAwB1B,UAAxB;AACAm5B,cAAAA,iBAAiB,GAAG,IAApB;AAEA3B,cAAAA,kBAAkB,CAACC,WAAD,EAAc,KAAd,CAAlB,CAPA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA1hB,cAAAA,cAAc,CAACtK,KAAf,GAAuBV,aAAvB;AACD;AACF;;AACD,cAAI0sB,WAAW,CAACmC,WAAhB,EAA6B;AAC3B;AACA;AACA;AACA;AACA;AACAR,YAAAA,YAAY,CAAC/2B,OAAb,GAAuB0T,cAAc,CAAC3T,KAAtC;AACA2T,YAAAA,cAAc,CAAC3T,KAAf,GAAuBg3B,YAAvB;AACD,WARD,MAQO;AACL,kBAAMS,eAAe,GAAGpC,WAAW,CAACqC,IAApC;;AACA,gBAAID,eAAe,KAAK,IAAxB,EAA8B;AAC5BA,cAAAA,eAAe,CAACx3B,OAAhB,GAA0B+2B,YAA1B;AACD,aAFD,MAEO;AACLrjB,cAAAA,cAAc,CAAC3T,KAAf,GAAuBg3B,YAAvB;AACD;;AACD3B,YAAAA,WAAW,CAACqC,IAAZ,GAAmBV,YAAnB;AACD;AACF;;AAED,YAAI3B,WAAW,CAACI,IAAZ,KAAqB,IAAzB,EAA+B;AAC7B;AACA;AACA,gBAAMppC,IAAI,GAAGgpC,WAAW,CAACI,IAAzB;AACAJ,UAAAA,WAAW,CAAC4B,SAAZ,GAAwB5qC,IAAxB;AACAgpC,UAAAA,WAAW,CAACI,IAAZ,GAAmBppC,IAAI,CAAC4T,OAAxB;AACAo1B,UAAAA,WAAW,CAACkC,kBAAZ,GAAiChxC,GAAG,EAApC;AACA8F,UAAAA,IAAI,CAAC4T,OAAL,GAAe,IAAf,CAP6B;AAU7B;AACA;;AACA,cAAI03B,eAAe,GAAGnS,mBAAmB,CAACp5B,OAA1C;;AACA,cAAI2qC,iBAAJ,EAAuB;AACrBY,YAAAA,eAAe,GAAG/R,yBAAyB,CACzC+R,eADyC,EAEzCpS,qBAFyC,CAA3C;AAID,WALD,MAKO;AACLoS,YAAAA,eAAe,GAAGhS,gCAAgC,CAACgS,eAAD,CAAlD;AACD;;AACD3R,UAAAA,mBAAmB,CAACrS,cAAD,EAAiBgkB,eAAjB,CAAnB,CArB6B;AAuB7B;;AACA,iBAAOtrC,IAAP;AACD;;AACDspC,QAAAA,gBAAgB,CAAChiB,cAAD,CAAhB;AACA,eAAO,IAAP;AACD;;AACD,SAAK3lB,cAAL;AAAqB;AACnB;AAoBA;AACD;;AACD,SAAKC,kBAAL;AACA,SAAKC,qBAAL;AAA4B;AAC1B0pC,QAAAA,cAAc,CAACjkB,AAAD,CAAd;AACA,cAAM+H,SAAgC,GAAG/H,cAAc,CAAC6G,aAAxD;AACA,cAAMqd,YAAY,GAAGnc,SAAS,KAAK,IAAnC;;AAEA,YAAItvB,OAAO,KAAK,IAAhB,EAAsB;AACpB,gBAAMqvB,SAAgC,GAAGrvB,OAAO,CAACouB,aAAjD;AACA,gBAAMsd,YAAY,GAAGrc,SAAS,KAAK,IAAnC;;AACA,cACEqc,YAAY,KAAKD,YAAjB,IACA9nB,QAAQ,CAACmS,IAAT,KAAkB,+BADlB;AAGAvO,UAAAA,cAAc,CAAC1jB,GAAf,KAAuB/B,qBAJzB,EAKE;AACAylB,YAAAA,cAAc,CAACrU,KAAf,IAAwBpB,UAAxB;AACD;AACF;;AAED,YAAI,CAAC25B,YAAD,IAAiB,CAAClkB,cAAc,CAACuO,IAAf,GAAsB3b,cAAvB,MAA2CD,MAAhE,EAAwE;AACtEqvB,UAAAA,gBAAgB,CAAChiB,cAAD,CAAhB;AACD,SAFD,MAEO;AACL;AACA;AACA,cAAI7H,gBAAgB,CAACisB,kBAAD,EAAsB/uB,aAAtB,CAApB,EAAiE;AAC/D2sB,YAAAA,gBAAgB,CAAChiB,cAAD,CAAhB;;AACA,YAAsB;AACpB;AACA;AACA;AACA,kBACEA,cAAc,CAAC1jB,GAAf,KAAuB/B,qBAAvB,IACAylB,cAAc,CAACoiB,YAAf,IAA+Bz4B,SAAS,GAAGC,MAA3C,CADA,IAEAwS,QAAQ,CAACmS,IAAT,KAAkB,+BAHpB,EAIE;AACAvO,gBAAAA,cAAc,CAACrU,KAAf,IAAwBpB,UAAxB;AACD;AACF;AACF;AACF;;AASD,eAAO,IAAP;AACD;AAroBH;;AAHc;AAAA,+CAspBZyV,cAAc,CAAC1jB,GAtpBH;AAAA;AAwpBf;;AC7tCD,MAAMgP,mBAAiB,GAAGrF,oBAAoB,CAACqF,iBAA/C;AAEA,IAAI+4B,gBAAyB,GAAG,KAAhC;AAEA;AAsBA,AAAO,SAASC,iBAAT,CACL7rC,OADK,EAELunB,cAFK,EAGLukB,YAHK,EAIL7f,WAJK,EAKL;AACA,MAAIjsB,OAAO,KAAK,IAAhB,EAAsB;AACpB;AACA;AACA;AACA;AACAunB,IAAAA,cAAc,CAAC3T,KAAf,GAAuBkkB,gBAAgB,CACrCvQ,cADqC,EAErC,IAFqC,EAGrCukB,YAHqC,EAIrC7f,WAJqC,CAAvC;AAMD,GAXD,MAWO;AACL;AACA;AACA;AAEA;AACA;AACA1E,IAAAA,cAAc,CAAC3T,KAAf,GAAuBgkB,oBAAoB,CACzCrQ,cADyC,EAEzCvnB,OAAO,CAAC4T,KAFiC,EAGzCk4B,YAHyC,EAIzC7f,WAJyC,CAA3C;AAMD;AACF;;AAED,SAAS8f,+BAAT,CACE/rC,OADF,EAEEunB,cAFF,EAGEukB,YAHF,EAIE7f,WAJF,EAKE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA1E,EAAAA,cAAc,CAAC3T,KAAf,GAAuBgkB,oBAAoB,CACzCrQ,cADyC,EAEzCvnB,OAAO,CAAC4T,KAFiC,EAGzC,IAHyC,EAIzCqY,WAJyC,CAA3C,CATA;AAgBA;AACA;AACA;;AACA1E,EAAAA,cAAc,CAAC3T,KAAf,GAAuBgkB,oBAAoB,CACzCrQ,cADyC,EAEzC,IAFyC,EAGzCukB,YAHyC,EAIzC7f,WAJyC,CAA3C;AAMD;;AAED,SAAS+f,gBAAT,CACEhsC,OADF,EAEEunB,cAFF,EAGEC,SAHF,EAIEtR,SAJF,EAKE+V,WALF,EAME;AACA;AAoBA,QAAMjc,MAAM,GAAGwX,SAAS,CAACxX,MAAzB;AACA,QAAM6jB,GAAG,GAAGtM,cAAc,CAACsM,GAA3B,CAtBA;;AAyBA,MAAIiY,YAAJ;AACA9e,EAAAA,oBAAoB,CAACzF,cAAD,EAAiB0E,WAAjB,CAApB;;AAIA,EA8BO;AACL6f,IAAAA,YAAY,GAAG7P,eAAe,CAC5Bj8B,OAD4B,EAE5BunB,cAF4B,EAG5BvX,MAH4B,EAI5BkG,SAJ4B,EAK5B2d,GAL4B,EAM5B5H,WAN4B,CAA9B;AAQD;;AAKD,MAAIjsB,OAAO,KAAK,IAAZ,IAAoB,CAAC4rC,gBAAzB,EAA2C;AACzClP,IAAAA,YAAY,CAAC18B,OAAD,EAAUunB,cAAV,EAA0B0E,WAA1B,CAAZ;AACA,WAAOggB,4BAA4B,CAACjsC,OAAD,EAAUunB,cAAV,EAA0B0E,WAA1B,CAAnC;AACD,GA7ED;;;AAgFA1E,EAAAA,cAAc,CAACrU,KAAf,IAAwBjC,aAAxB;AACA46B,EAAAA,iBAAiB,CAAC7rC,OAAD,EAAUunB,cAAV,EAA0BukB,YAA1B,EAAwC7f,WAAxC,CAAjB;AACA,SAAO1E,cAAc,CAAC3T,KAAtB;AACD;;AAED,SAASs4B,mBAAT,CACElsC,OADF,EAEEunB,cAFF,EAGEC,SAHF,EAIEtR,SAJF,EAKE+V,WALF,EAMgB;AACd,MAAIjsB,OAAO,KAAK,IAAhB,EAAsB;AACpB,UAAMxH,IAAI,GAAGgvB,SAAS,CAAChvB,IAAvB;;AACA,QACE2zC,yBAAyB,CAAC3zC,IAAD,CAAzB,IACAgvB,SAAS,CAAC4kB,OAAV,KAAsB,IADtB;AAGA5kB,IAAAA,SAAS,CAAC6D,YAAV,KAA2B3yB,SAJ7B,EAKE;AACA,UAAI2zC,YAAY,GAAG7zC,IAAnB;AAKA;AACA;;;AACA+uB,MAAAA,cAAc,CAAC1jB,GAAf,GAAqBtC,mBAArB;AACAgmB,MAAAA,cAAc,CAAC/uB,IAAf,GAAsB6zC,YAAtB;;AAIA,aAAOC,yBAAyB,CAC9BtsC,OAD8B,EAE9BunB,cAF8B,EAG9B8kB,YAH8B,EAI9Bn2B,SAJ8B,EAK9B+V,WAL8B,CAAhC;AAOD;;AAcD,UAAMrY,KAAK,GAAG24B,2BAA2B,CACvC/kB,SAAS,CAAChvB,IAD6B,EAEvC,IAFuC,EAGvC0d,SAHuC,EAIvCqR,cAJuC,EAKvCA,cAAc,CAACuO,IALwB,EAMvC7J,WANuC,CAAzC;AAQArY,IAAAA,KAAK,CAACigB,GAAN,GAAYtM,cAAc,CAACsM,GAA3B;AACAjgB,IAAAA,KAAK,CAAChQ,MAAN,GAAe2jB,cAAf;AACAA,IAAAA,cAAc,CAAC3T,KAAf,GAAuBA,KAAvB;AACA,WAAOA,KAAP;AACD;;AAeD,QAAMokB,YAAY,GAAKh4B,OAAO,CAAC4T,KAA/B,CArEc;;AAsEd,QAAM44B,2BAA2B,GAAGC,6BAA6B,CAC/DzsC,OAD+D,EAE/DisB,WAF+D,CAAjE;;AAIA,MAAI,CAACugB,2BAAL,EAAkC;AAChC;AACA;AACA,UAAMv2B,SAAS,GAAG+hB,YAAY,CAACpF,aAA/B,CAHgC;;AAKhC,QAAIwZ,OAAO,GAAG5kB,SAAS,CAAC4kB,OAAxB;AACAA,IAAAA,OAAO,GAAGA,OAAO,KAAK,IAAZ,GAAmBA,OAAnB,GAA6B9hB,YAAvC;;AACA,QAAI8hB,OAAO,CAACn2B,SAAD,EAAYC,SAAZ,CAAP,IAAiClW,OAAO,CAAC6zB,GAAR,KAAgBtM,cAAc,CAACsM,GAApE,EAAyE;AACvE,aAAOoY,4BAA4B,CAACjsC,OAAD,EAAUunB,cAAV,EAA0B0E,WAA1B,CAAnC;AACD;AACF,GApFa;;;AAsFd1E,EAAAA,cAAc,CAACrU,KAAf,IAAwBjC,aAAxB;AACA,QAAMmjB,QAAQ,GAAGe,oBAAoB,CAAC6C,YAAD,EAAe9hB,SAAf,CAArC;AACAke,EAAAA,QAAQ,CAACP,GAAT,GAAetM,cAAc,CAACsM,GAA9B;AACAO,EAAAA,QAAQ,CAACxwB,MAAT,GAAkB2jB,cAAlB;AACAA,EAAAA,cAAc,CAAC3T,KAAf,GAAuBwgB,QAAvB;AACA,SAAOA,QAAP;AACD;;AAED,SAASkY,yBAAT,CACEtsC,OADF,EAEEunB,cAFF,EAGEC,SAHF,EAIEtR,SAJF,EAKE+V,WALF,EAMgB;AACd;AAkCA,MAAIjsB,OAAO,KAAK,IAAhB,EAAsB;AACpB,UAAMiW,SAAS,GAAGjW,OAAO,CAAC4yB,aAA1B;;AACA,QACEtI,YAAY,CAACrU,SAAD,EAAYC,SAAZ,CAAZ,IACAlW,OAAO,CAAC6zB,GAAR,KAAgBtM,cAAc,CAACsM,GAD/B;AAGChJ,IAAAA,CAAiD,IAHlD,CADF,EAKE;AACA+gB,MAAAA,gBAAgB,GAAG,KAAnB;;AACA,UAAI,CAACa,6BAA6B,CAACzsC,OAAD,EAAUisB,WAAV,CAAlC,EAA0D;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA1E,QAAAA,cAAc,CAACtK,KAAf,GAAuBjd,OAAO,CAACid,KAA/B;AACA,eAAOgvB,4BAA4B,CACjCjsC,OADiC,EAEjCunB,cAFiC,EAGjC0E,WAHiC,CAAnC;AAKD,OApBD,MAoBO,IAAI,CAACjsB,OAAO,CAACkT,KAAR,GAAgBf,4BAAjB,MAAmDnB,OAAvD,EAAgE;AACrE;AACA;AACA46B,QAAAA,gBAAgB,GAAG,IAAnB;AACD;AACF;AACF;;AACD,SAAOc,uBAAuB,CAC5B1sC,OAD4B,EAE5BunB,cAF4B,EAG5BC,SAH4B,EAI5BtR,SAJ4B,EAK5B+V,WAL4B,CAA9B;AAOD;;AAED,SAAS0gB,wBAAT,CACE3sC,OADF,EAEEunB,cAFF,EAGE0E,WAHF,EAIE;AACA,QAAM/V,SAAyB,GAAGqR,cAAc,CAAC6L,YAAjD;AACA,QAAM0Y,YAAY,GAAG51B,SAAS,CAACoO,QAA/B;AAEA,QAAM+K,SAAgC,GACpCrvB,OAAO,KAAK,IAAZ,GAAmBA,OAAO,CAACouB,aAA3B,GAA2C,IAD7C,CAJA;AAQA;AACA;;AACA,MAAIwe,gBAAyC,GAAG,IAAhD;;AAEA,MACE12B,SAAS,CAAC4f,IAAV,KAAmB,QAAnB,IACA5f,SAAS,CAAC4f,IAAV,KAAmB,+BAFrB,EAGE;AACA;AACA,QAAI,CAACvO,cAAc,CAACuO,IAAf,GAAsB3b,cAAvB,MAA2CD,MAA/C,EAAuD;AACrD;AACA,YAAMoV,SAAyB,GAAG;AAChCud,QAAAA,SAAS,EAAEryB,OADqB;AAEhCsyB,QAAAA,SAAS,EAAE;AAFqB,OAAlC;AAIAvlB,MAAAA,cAAc,CAAC6G,aAAf,GAA+BkB,SAA/B;AACAyd,MAAAA,eAAe,CAACxlB,cAAD,EAAiB0E,WAAjB,CAAf;AACD,KARD,MAQO,IAAI,CAACvM,gBAAgB,CAACuM,WAAD,EAAerP,aAAf,CAArB,EAA2D;AAChE;AACA;AACA,UAAIowB,aAAJ;;AACA,UAAI3d,SAAS,KAAK,IAAlB,EAAwB;AACtB,cAAM4d,aAAa,GAAG5d,SAAS,CAACwd,SAAhC;AACAG,QAAAA,aAAa,GAAGntB,UAAU,CAACotB,aAAD,EAAgBhhB,WAAhB,CAA1B;AAQD,OAVD,MAUO;AACL+gB,QAAAA,aAAa,GAAG/gB,WAAhB;AACD,OAhB+D;;;AAmBhE1E,MAAAA,cAAc,CAACtK,KAAf,GAAuBsK,cAAc,CAAC2E,UAAf,GAA4BlM,WAAW,CAC5DpD,aAD4D,CAA9D;AAGA,YAAM0S,SAAyB,GAAG;AAChCud,QAAAA,SAAS,EAAEG,aADqB;AAEhCF,QAAAA,SAAS,EAAEF;AAFqB,OAAlC;AAIArlB,MAAAA,cAAc,CAAC6G,aAAf,GAA+BkB,SAA/B;AACA/H,MAAAA,cAAc,CAACqF,WAAf,GAA6B,IAA7B,CA3BgE;AA6BhE;;AACAmgB,MAAAA,eAAe,CAACxlB,cAAD,EAAiBylB,aAAjB,CAAf;;AAaA,aAAO,IAAP;AACD,KA5CM,MA4CA;AACL;;AAiBA,YAAM1d,SAAyB,GAAG;AAChCud,QAAAA,SAAS,EAAEryB,OADqB;AAEhCsyB,QAAAA,SAAS,EAAE;AAFqB,OAAlC;AAIAvlB,MAAAA,cAAc,CAAC6G,aAAf,GAA+BkB,SAA/B,CAtBK;;AAwBL,YAAMqc,kBAAkB,GACtBtc,SAAS,KAAK,IAAd,GAAqBA,SAAS,CAACwd,SAA/B,GAA2C5gB,WAD7C;AAEA8gB,MAAAA,eAAe,CAACxlB,cAAD,EAAiBokB,kBAAjB,CAAf;AACD;AACF,GArFD,MAqFO;AACL;AACA,QAAIA,kBAAJ;;AACA,QAAItc,SAAS,KAAK,IAAlB,EAAwB;AACtB;AAEAsc,MAAAA,kBAAkB,GAAG9rB,UAAU,CAACwP,SAAS,CAACwd,SAAX,EAAsB5gB,WAAtB,CAA/B;;;AAgBA1E,MAAAA,cAAc,CAAC6G,aAAf,GAA+B,IAA/B;AACD,KApBD,MAoBO;AACL;AACA;AACA;AACAud,MAAAA,kBAAkB,GAAG1f,WAArB;AACD;;AACD8gB,IAAAA,eAAe,CAACxlB,cAAD,EAAiBokB,kBAAjB,CAAf;AACD;;AAQD,EAgBO;AACLE,IAAAA,iBAAiB,CAAC7rC,OAAD,EAAUunB,cAAV,EAA0BukB,YAA1B,EAAwC7f,WAAxC,CAAjB;AACA,WAAO1E,cAAc,CAAC3T,KAAtB;AACD;AACF;AA4CD;AACA;;;AACA,MAAMs5B,2BAA2B,GAAGP,wBAApC;;AAqEA,SAAS1W,cAAT,CACEj2B,OADF,EAEEunB,cAFF,EAGE0E,WAHF,EAIE;AACA,QAAM6f,YAAY,GAAGvkB,cAAc,CAAC6L,YAApC;AACAyY,EAAAA,iBAAiB,CAAC7rC,OAAD,EAAUunB,cAAV,EAA0BukB,YAA1B,EAAwC7f,WAAxC,CAAjB;AACA,SAAO1E,cAAc,CAAC3T,KAAtB;AACD;;AAED,SAASu5B,UAAT,CACEntC,OADF,EAEEunB,cAFF,EAGE0E,WAHF,EAIE;AACA,QAAM6f,YAAY,GAAGvkB,cAAc,CAAC6L,YAAf,CAA4B9O,QAAjD;AACAunB,EAAAA,iBAAiB,CAAC7rC,OAAD,EAAUunB,cAAV,EAA0BukB,YAA1B,EAAwC7f,WAAxC,CAAjB;AACA,SAAO1E,cAAc,CAAC3T,KAAtB;AACD;;AAED,SAASw5B,cAAT,CACEptC,OADF,EAEEunB,cAFF,EAGE0E,WAHF,EAIE;AACA;AAWA,QAAM/V,SAAS,GAAGqR,cAAc,CAAC6L,YAAjC;AACA,QAAM0Y,YAAY,GAAG51B,SAAS,CAACoO,QAA/B;AACAunB,EAAAA,iBAAiB,CAAC7rC,OAAD,EAAUunB,cAAV,EAA0BukB,YAA1B,EAAwC7f,WAAxC,CAAjB;AACA,SAAO1E,cAAc,CAAC3T,KAAtB;AACD;;AAED,SAAS40B,SAAT,CAAiBxoC,OAAjB,EAAwCunB,cAAxC,EAA+D;AAC7D,QAAMsM,GAAG,GAAGtM,cAAc,CAACsM,GAA3B;;AACA,MACG7zB,OAAO,KAAK,IAAZ,IAAoB6zB,GAAG,KAAK,IAA7B,IACC7zB,OAAO,KAAK,IAAZ,IAAoBA,OAAO,CAAC6zB,GAAR,KAAgBA,GAFvC,EAGE;AACA;AACAtM,IAAAA,cAAc,CAACrU,KAAf,IAAwBzB,GAAxB;AAID;AACF;;AAED,SAASi7B,uBAAT,CACE1sC,OADF,EAEEunB,cAFF,EAGEC,SAHF,EAIEtR,SAJF,EAKE+V,WALF,EAME;AACA;AAgBA,MAAIh2B,OAAJ;;AACA,EAA2B;AACzB,UAAM2xB,eAAe,GAAGN,kBAAkB,CAACC,cAAD,EAAiBC,SAAjB,EAA4B,IAA5B,CAA1C;AACAvxB,IAAAA,OAAO,GAAG+xB,gBAAgB,CAACT,cAAD,EAAiBK,eAAjB,CAA1B;AACD;;AAED,MAAIkkB,YAAJ;AACA9e,EAAAA,oBAAoB,CAACzF,cAAD,EAAiB0E,WAAjB,CAApB;;AAIA,EA8BO;AACL6f,IAAAA,YAAY,GAAG7P,eAAe,CAC5Bj8B,OAD4B,EAE5BunB,cAF4B,EAG5BC,SAH4B,EAI5BtR,SAJ4B,EAK5BjgB,OAL4B,EAM5Bg2B,WAN4B,CAA9B;AAQD;;AAKD,MAAIjsB,OAAO,KAAK,IAAZ,IAAoB,CAAC4rC,gBAAzB,EAA2C;AACzClP,IAAAA,YAAY,CAAC18B,OAAD,EAAUunB,cAAV,EAA0B0E,WAA1B,CAAZ;AACA,WAAOggB,4BAA4B,CAACjsC,OAAD,EAAUunB,cAAV,EAA0B0E,WAA1B,CAAnC;AACD,GA3ED;;;AA8EA1E,EAAAA,cAAc,CAACrU,KAAf,IAAwBjC,aAAxB;AACA46B,EAAAA,iBAAiB,CAAC7rC,OAAD,EAAUunB,cAAV,EAA0BukB,YAA1B,EAAwC7f,WAAxC,CAAjB;AACA,SAAO1E,cAAc,CAAC3T,KAAtB;AACD;;AAED,SAASy5B,oBAAT,CACErtC,OADF,EAEEunB,cAFF,EAGEC,SAHF,EAIEtR,SAJF,EAKE+V,WALF,EAME;AACA,AAiDA;AACA;;;AACA,MAAIqhB,UAAJ;;AACA,MAAIzD,iBAAuB,CAACriB,SAAD,CAA3B,EAAwC;AACtC8lB,IAAAA,UAAU,GAAG,IAAb;AACAC,IAAAA,mBAAyB,CAAChmB,cAAD,CAAzB;AACD,GAHD,MAGO;AACL+lB,IAAAA,UAAU,GAAG,KAAb;AACD;;AACDtgB,EAAAA,oBAAoB,CAACzF,cAAD,EAAiB0E,WAAjB,CAApB;AAEA,QAAM3vB,QAAQ,GAAGirB,cAAc,CAAC1iB,SAAhC;AACA,MAAIsR,YAAJ;;AACA,MAAI7Z,QAAQ,KAAK,IAAjB,EAAuB;AACrB,QAAI0D,OAAO,KAAK,IAAhB,EAAsB;AACpB;AACA;AACA;AACA;AACAA,MAAAA,OAAO,CAACsE,SAAR,GAAoB,IAApB;AACAijB,MAAAA,cAAc,CAACjjB,SAAf,GAA2B,IAA3B,CANoB;;AAQpBijB,MAAAA,cAAc,CAACrU,KAAf,IAAwBhC,SAAxB;AACD,KAVoB;;;AAYrB2gB,IAAAA,sBAAsB,CAACtK,cAAD,EAAiBC,SAAjB,EAA4BtR,SAA5B,CAAtB;AACAqc,IAAAA,kBAAkB,CAAChL,cAAD,EAAiBC,SAAjB,EAA4BtR,SAA5B,EAAuC+V,WAAvC,CAAlB;AACA9V,IAAAA,YAAY,GAAG,IAAf;AACD,GAfD,MAeO,IAAInW,OAAO,KAAK,IAAhB,EAAsB;AAC3B;AACAmW,IAAAA,YAAY,GAAGwc,wBAAwB,CACrCpL,cADqC,EAErCC,SAFqC,EAGrCtR,SAHqC,EAIrC+V,WAJqC,CAAvC;AAMD,GARM,MAQA;AACL9V,IAAAA,YAAY,GAAG6c,mBAAmB,CAChChzB,OADgC,EAEhCunB,cAFgC,EAGhCC,SAHgC,EAIhCtR,SAJgC,EAKhC+V,WALgC,CAAlC;AAOD;;AACD,QAAMuhB,cAAc,GAAGC,oBAAoB,CACzCztC,OADyC,EAEzCunB,cAFyC,EAGzCC,SAHyC,EAIzCrR,YAJyC,EAKzCm3B,UALyC,EAMzCrhB,WANyC,CAA3C;;AAqBA,SAAOuhB,cAAP;AACD;;AAED,SAASC,oBAAT,CACEztC,OADF,EAEEunB,cAFF,EAGEC,SAHF,EAIErR,YAJF,EAKEm3B,UALF,EAMErhB,WANF,EAOE;AACA;AACAuc,EAAAA,SAAO,CAACxoC,OAAD,EAAUunB,cAAV,CAAP;AAEA,QAAMmmB,eAAe,GAAG,CAACnmB,cAAc,CAACrU,KAAf,GAAuB1B,UAAxB,MAAwCR,OAAhE;;AAEA,MAAI,CAACmF,YAAD,IAAiB,CAACu3B,eAAtB,EAAuC;AACrC;AACA,QAAIJ,UAAJ,EAAgB;AACdtkB,MAAAA,yBAAyB,CAACzB,cAAD,EAAiBC,SAAjB,EAA4B,KAA5B,CAAzB;AACD;;AAED,WAAOykB,4BAA4B,CAACjsC,OAAD,EAAUunB,cAAV,EAA0B0E,WAA1B,CAAnC;AACD;;AAED,QAAM3vB,QAAQ,GAAGirB,cAAc,CAAC1iB,SAAhC,CAfA;;AAkBAgO,EAAAA,mBAAiB,CAAC7S,OAAlB,GAA4BunB,cAA5B;AACA,MAAIukB,YAAJ;;AACA,MACE4B,eAAe,IACf,OAAOlmB,SAAS,CAACyf,wBAAjB,KAA8C,UAFhD,EAGE;AACA;AACA;AACA;AACA;AACA;AACA6E,IAAAA,YAAY,GAAG,IAAf;AAKD,GAdD,MAcO;AACL;AAGA,IAeO;AACLA,MAAAA,YAAY,GAAGxvC,QAAQ,CAAC0T,MAAT,EAAf;AACD;AAIF,GA3DD;;;AA8DAuX,EAAAA,cAAc,CAACrU,KAAf,IAAwBjC,aAAxB;;AACA,MAAIjR,OAAO,KAAK,IAAZ,IAAoB0tC,eAAxB,EAAyC;AACvC;AACA;AACA;AACA;AACA3B,IAAAA,+BAA+B,CAC7B/rC,OAD6B,EAE7BunB,cAF6B,EAG7BukB,YAH6B,EAI7B7f,WAJ6B,CAA/B;AAMD,GAXD,MAWO;AACL4f,IAAAA,iBAAiB,CAAC7rC,OAAD,EAAUunB,cAAV,EAA0BukB,YAA1B,EAAwC7f,WAAxC,CAAjB;AACD,GA5ED;AA+EA;;;AACA1E,EAAAA,cAAc,CAAC6G,aAAf,GAA+B9xB,QAAQ,CAAC01B,KAAxC,CAhFA;;AAmFA,MAAIsb,UAAJ,EAAgB;AACdtkB,IAAAA,yBAAyB,CAACzB,cAAD,EAAiBC,SAAjB,EAA4B,IAA5B,CAAzB;AACD;;AAED,SAAOD,cAAc,CAAC3T,KAAtB;AACD;;AAED,SAAS+5B,mBAAT,CAA6BpmB,cAA7B,EAA6C;AAC3C,QAAMtO,IAAI,GAAIsO,cAAc,CAAC1iB,SAA7B;;AACA,MAAIoU,IAAI,CAACixB,cAAT,EAAyB;AACvB5hB,IAAAA,yBAAyB,CACvBf,cADuB,EAEvBtO,IAAI,CAACixB,cAFkB,EAGvBjxB,IAAI,CAACixB,cAAL,KAAwBjxB,IAAI,CAAChjB,OAHN,CAAzB;AAKD,GAND,MAMO,IAAIgjB,IAAI,CAAChjB,OAAT,EAAkB;AACvB;AACAqyB,IAAAA,yBAAyB,CAACf,cAAD,EAAiBtO,IAAI,CAAChjB,OAAtB,EAA+B,KAA/B,CAAzB;AACD;;AACDwiC,EAAAA,iBAAiB,CAAClR,cAAD,EAAiBtO,IAAI,CAACuK,aAAtB,CAAjB;AACD;;AAED,SAASoqB,cAAT,CAAwB5tC,OAAxB,EAAiCunB,cAAjC,EAAiD0E,WAAjD,EAA8D;AAC5D0hB,EAAAA,mBAAmB,CAACpmB,cAAD,CAAnB;AACA,QAAMqF,WAAW,GAAGrF,cAAc,CAACqF,WAAnC;;AAF4D,QAI1D5sB,OAAO,KAAK,IAAZ,IAAoB4sB,WAAW,KAAK,IAJsB;AAAA;AAAA;;AAS5D,QAAM1W,SAAS,GAAGqR,cAAc,CAAC6L,YAAjC;AACA,QAAM/D,SAAS,GAAG9H,cAAc,CAAC6G,aAAjC;AACA,QAAMyf,YAAY,GAAGxe,SAAS,CAACsE,OAA/B;AACAnF,EAAAA,gBAAgB,CAACxuB,OAAD,EAAUunB,cAAV,CAAhB;AACAiI,EAAAA,kBAAkB,CAACjI,cAAD,EAAiBrR,SAAjB,EAA4B,IAA5B,EAAkC+V,WAAlC,CAAlB;AACA,QAAMqD,SAAS,GAAG/H,cAAc,CAAC6G,aAAjC;AAEA,QAAMnV,IAAe,GAAGsO,cAAc,CAAC1iB,SAAvC;AAaA;;;AACA,QAAMinC,YAAY,GAAGxc,SAAS,CAACqE,OAA/B;;AACA,MAAImY,YAAY,KAAK+B,YAArB,EAAmC;AACjCC,AACA,WAAO7B,4BAA4B,CAACjsC,OAAD,EAAUunB,cAAV,EAA0B0E,WAA1B,CAAnC;AACD;;AACD,MAAIhT,IAAI,CAACmxB,OAAL,IAAgB1P,mBAAmB,CAACnT,AAAD,CAAvC,EAAyD;AACvD;AAmBA,UAAM3T,KAAK,GAAGkkB,gBAAgB,CAC5BvQ,cAD4B,EAE5B,IAF4B,EAG5BukB,YAH4B,EAI5B7f,WAJ4B,CAA9B;AAMA1E,IAAAA,cAAc,CAAC3T,KAAf,GAAuBA,KAAvB;AAEA,QAAIb,IAAI,GAAGa,KAAX;;AACA,WAAOb,IAAP,EAAa;AACX;AACA;AACA;AACA;AACA;AACA;AACAA,MAAAA,IAAI,CAACG,KAAL,GAAcH,IAAI,CAACG,KAAL,GAAa,CAAChC,SAAf,GAA4BU,SAAzC;AACAmB,MAAAA,IAAI,GAAGA,IAAI,CAACc,OAAZ;AACD;AACF,GAvCD,MAuCO;AACL;AACA;AACAg4B,IAAAA,iBAAiB,CAAC7rC,OAAD,EAAUunB,cAAV,EAA0BukB,YAA1B,EAAwC7f,WAAxC,CAAjB;AACA6hB,AACD;;AACD,SAAOvmB,cAAc,CAAC3T,KAAtB;AACD;;AAED,SAAS+0B,qBAAT,CACE3oC,OADF,EAEEunB,cAFF,EAGE0E,WAHF,EAIE;AACA6M,EAAAA,eAAe,CAACvR,cAAD,CAAf;;AAMA,QAAM/uB,IAAI,GAAG+uB,cAAc,CAAC/uB,IAA5B;AACA,QAAM0d,SAAS,GAAGqR,cAAc,CAAC6L,YAAjC;AACA,QAAMnd,SAAS,GAAGjW,OAAO,KAAK,IAAZ,GAAmBA,OAAO,CAAC4yB,aAA3B,GAA2C,IAA7D;AAEA,MAAIkZ,YAAY,GAAG51B,SAAS,CAACoO,QAA7B;AACA;AAEA,EAMO,IAAIrO,SAAS,KAAK,IAAd,IAAsBiO,oBAAoB,CAAC1rB,AAAD,CAA9C,EAAiE;AACtE;AACA;AACA+uB,IAAAA,cAAc,CAACrU,KAAf,IAAwB5B,YAAxB;AACD;;AAEDk3B,EAAAA,SAAO,CAACxoC,OAAD,EAAUunB,cAAV,CAAP;AACAskB,EAAAA,iBAAiB,CAAC7rC,OAAD,EAAUunB,cAAV,EAA0BukB,YAA1B,EAAwC7f,WAAxC,CAAjB;AACA,SAAO1E,cAAc,CAAC3T,KAAtB;AACD;;AAED,SAASg1B,gBAAT,CAAwB5oC,OAAxB,EAAiCunB,cAAjC,EAAiD;AAC/C,AAIA;;;AACA,SAAO,IAAP;AACD;;AAED,SAASwmB,kBAAT,CACEC,QADF,EAEEzmB,cAFF,EAGE2L,WAHF,EAIEjH,WAJF,EAKE;AACA,MAAI+hB,QAAQ,KAAK,IAAjB,EAAuB;AACrB;AACA;AACA;AACA;AACAA,IAAAA,QAAQ,CAAC1pC,SAAT,GAAqB,IAArB;AACAijB,IAAAA,cAAc,CAACjjB,SAAf,GAA2B,IAA3B,CANqB;;AAQrBijB,IAAAA,cAAc,CAACrU,KAAf,IAAwBhC,SAAxB;AACD;;AAED,QAAMpM,KAAK,GAAGyiB,cAAc,CAAC6L,YAA7B;AACA,QAAMljB,aAA0C,GAAGgjB,WAAnD;AACA,QAAM/iB,OAAO,GAAGD,aAAa,CAACE,QAA9B;AACA,QAAMC,IAAI,GAAGH,aAAa,CAACI,KAA3B;AACA,MAAIkX,SAAS,GAAGnX,IAAI,CAACF,OAAD,CAApB,CAhBA;;AAkBAoX,EAAAA,cAAc,CAAC/uB,IAAf,GAAsBgvB,SAAtB;AACA,QAAMymB,WAAW,GAAI1mB,cAAc,CAAC1jB,GAAf,GAAqBqqC,uBAAuB,CAAC1mB,SAAD,CAAjE;AACA,QAAM2mB,aAAa,GAAGhjB,mBAAmB,CAAC3D,SAAD,EAAY1iB,KAAZ,CAAzC;AACA,MAAI8O,KAAJ;;AACA,UAAQq6B,WAAR;AACE,SAAKztC,iBAAL;AAAwB;AACtB;AAMAoT,QAAAA,KAAK,GAAG84B,uBAAuB,CAC7B,IAD6B,EAE7BnlB,cAF6B,EAG7BC,SAH6B,EAI7B2mB,aAJ6B,EAK7BliB,WAL6B,CAA/B;AAOA,eAAOrY,KAAP;AACD;;AACD,SAAKnT,cAAL;AAAqB;AACnB;AAKAmT,QAAAA,KAAK,GAAGy5B,oBAAoB,CAC1B,IAD0B,EAE1B9lB,cAF0B,EAG1BC,SAH0B,EAI1B2mB,aAJ0B,EAK1BliB,WAL0B,CAA5B;AAOA,eAAOrY,KAAP;AACD;;AACD,SAAKzS,UAAL;AAAiB;AACf;AAKAyS,QAAAA,KAAK,GAAGo4B,gBAAgB,CACtB,IADsB,EAEtBzkB,cAFsB,EAGtBC,SAHsB,EAItB2mB,aAJsB,EAKtBliB,WALsB,CAAxB;AAOA,eAAOrY,KAAP;AACD;;AACD,SAAKtS,aAAL;AAAoB;AAClB;AAaAsS,QAAAA,KAAK,GAAGs4B,mBAAmB,CACzB,IADyB,EAEzB3kB,cAFyB,EAGzBC,SAHyB,EAIzB2D,mBAAmB,CAAC3D,SAAS,CAAChvB,IAAX,EAAiB21C,aAAjB,CAJM;AAKzBliB,QAAAA,WALyB,CAA3B;AAOA,eAAOrY,KAAP;AACD;AArEH;;AAuEA,MAAIw6B,IAAI,GAAG,EAAX;AAWA;AACA;;;AAzGA;AAAA,mFA8GE5mB,SA9GF,gEA+GE4mB,IA/GF;AAAA;AAiHD;;AAED,SAASC,6BAAT,CACEL,QADF,EAEEzmB,cAFF,EAGEC,SAHF,EAIEtR,SAJF,EAKE+V,WALF,EAME;AACA,MAAI+hB,QAAQ,KAAK,IAAjB,EAAuB;AACrB;AACA;AACA;AACA;AACAA,IAAAA,QAAQ,CAAC1pC,SAAT,GAAqB,IAArB;AACAijB,IAAAA,cAAc,CAACjjB,SAAf,GAA2B,IAA3B,CANqB;;AAQrBijB,IAAAA,cAAc,CAACrU,KAAf,IAAwBhC,SAAxB;AACD,GAVD;;;AAaAqW,EAAAA,cAAc,CAAC1jB,GAAf,GAAqBpD,cAArB,CAbA;AAiBA;AACA;AACA;;AACA,MAAI6sC,UAAJ;;AACA,MAAIzD,iBAAuB,CAACriB,SAAD,CAA3B,EAAwC;AACtC8lB,IAAAA,UAAU,GAAG,IAAb;AACAC,IAAAA,mBAAyB,CAAChmB,cAAD,CAAzB;AACD,GAHD,MAGO;AACL+lB,IAAAA,UAAU,GAAG,KAAb;AACD;;AACDtgB,EAAAA,oBAAoB,CAACzF,cAAD,EAAiB0E,WAAjB,CAApB;AAEA4F,EAAAA,sBAAsB,CAACtK,cAAD,EAAiBC,SAAjB,EAA4BtR,SAA5B,CAAtB;AACAqc,EAAAA,kBAAkB,CAAChL,cAAD,EAAiBC,SAAjB,EAA4BtR,SAA5B,EAAuC+V,WAAvC,CAAlB;AAEA,SAAOwhB,oBAAoB,CACzB,IADyB,EAEzBlmB,cAFyB,EAGzBC,SAHyB,EAIzB,IAJyB,EAKzB8lB,UALyB,EAMzBrhB,WANyB,CAA3B;AAQD;;AAED,SAASqiB,2BAAT,CACEN,QADF,EAEEzmB,cAFF,EAGEC,SAHF,EAIEyE,WAJF,EAKE;AACA,MAAI+hB,QAAQ,KAAK,IAAjB,EAAuB;AACrB;AACA;AACA;AACA;AACAA,IAAAA,QAAQ,CAAC1pC,SAAT,GAAqB,IAArB;AACAijB,IAAAA,cAAc,CAACjjB,SAAf,GAA2B,IAA3B,CANqB;;AAQrBijB,IAAAA,cAAc,CAACrU,KAAf,IAAwBhC,SAAxB;AACD;;AAED,QAAMpM,KAAK,GAAGyiB,cAAc,CAAC6L,YAA7B;AACA,MAAIn9B,OAAJ;;AACA,EAA2B;AACzB,UAAM2xB,eAAe,GAAGN,kBAAkB,CACxCC,cADwC,EAExCC,SAFwC,EAGxC,KAHwC,CAA1C;AAKAvxB,IAAAA,OAAO,GAAG+xB,gBAAgB,CAACT,cAAD,EAAiBK,eAAjB,CAA1B;AACD;;AAEDoF,EAAAA,oBAAoB,CAACzF,cAAD,EAAiB0E,WAAjB,CAApB;AACA,MAAI1e,KAAJ;;AAKA,EAiCO;AACLA,IAAAA,KAAK,GAAG0uB,eAAe,CACrB,IADqB,EAErB1U,cAFqB,EAGrBC,SAHqB,EAIrB1iB,KAJqB,EAKrB7O,OALqB,EAMrBg2B,WANqB,CAAvB;AAQD;;;AAMD1E,EAAAA,cAAc,CAACrU,KAAf,IAAwBjC,aAAxB;;AA4BA;AAEE;AACA,GACA,OAAO1D,KAAP,KAAiB,QADjB,IAEAA,KAAK,KAAK,IAFV,IAGA,OAAOA,KAAK,CAACyC,MAAb,KAAwB,UAHxB,IAIAzC,KAAK,CAACsC,QAAN,KAAmBnX,SAPrB,EAQE;AACA;;AAkBA6uB,IAAAA,cAAc,CAAC1jB,GAAf,GAAqBpD,cAArB,CAnBA;;AAsBA8mB,IAAAA,cAAc,CAAC6G,aAAf,GAA+B,IAA/B;AACA7G,IAAAA,cAAc,CAACqF,WAAf,GAA6B,IAA7B,CAvBA;AA0BA;AACA;;AACA,QAAI0gB,UAAU,GAAG,KAAjB;;AACA,QAAIzD,iBAAuB,CAACriB,SAAD,CAA3B,EAAwC;AACtC8lB,MAAAA,UAAU,GAAG,IAAb;AACAC,MAAAA,mBAAyB,CAAChmB,cAAD,CAAzB;AACD,KAHD,MAGO;AACL+lB,MAAAA,UAAU,GAAG,KAAb;AACD;;AAED/lB,IAAAA,cAAc,CAAC6G,aAAf,GACE7gB,KAAK,CAACykB,KAAN,KAAgB,IAAhB,IAAwBzkB,KAAK,CAACykB,KAAN,KAAgBt5B,SAAxC,GAAoD6U,KAAK,CAACykB,KAA1D,GAAkE,IADpE;AAGA9D,IAAAA,qBAAqB,CAAC3G,cAAD,CAArB;AAEAmK,IAAAA,kBAAkB,CAACnK,cAAD,EAAiBha,KAAjB,CAAlB;AACAglB,IAAAA,kBAAkB,CAAChL,cAAD,EAAiBC,SAAjB,EAA4B1iB,KAA5B,EAAmCmnB,WAAnC,CAAlB;AACA,WAAOwhB,oBAAoB,CACzB,IADyB,EAEzBlmB,cAFyB,EAGzBC,SAHyB,EAIzB,IAJyB,EAKzB8lB,UALyB,EAMzBrhB,WANyB,CAA3B;AAQD,GA3DD,MA2DO;AACL;AACA1E,IAAAA,cAAc,CAAC1jB,GAAf,GAAqBrD,iBAArB;;AA6BAqrC,IAAAA,iBAAiB,CAAC,IAAD,EAAOtkB,cAAP,EAAuBha,KAAvB,EAA8B0e,WAA9B,CAAjB;;AAIA,WAAO1E,cAAc,CAAC3T,KAAtB;AACD;AACF;;AAgFD,MAAM26B,gBAA+B,GAAG;AACtCtU,EAAAA,UAAU,EAAE,IAD0B;AAEtCuU,EAAAA,SAAS,EAAE/zB;AAF2B,CAAxC;;AAKA,SAASg0B,2BAAT,CAAqCxiB,WAArC,EAAyE;AACvE,SAAO;AACL4gB,IAAAA,SAAS,EAAE5gB,WADN;AAEL6gB,IAAAA,SAAS,EAAEvR,qBAAqB;AAF3B,GAAP;AAID;;AAED,SAASmT,4BAAT,CACEC,kBADF,EAEE1iB,WAFF,EAGkB;AAChB,MAAI6gB,SAAkC,GAAG,IAAzC;;AAwBA,SAAO;AACLD,IAAAA,SAAS,EAAEhtB,UAAU,CAAC8uB,kBAAkB,CAAC9B,SAApB,EAA+B5gB,WAA/B,CADhB;AAEL6gB,IAAAA;AAFK,GAAP;AAID;;;AAGD,SAAS8B,sBAAT,CACErD,eADF,EAEEvrC,OAFF,EAGEunB,cAHF,EAIE0E,WAJF,EAKE;AACA;AACA;AACA;AACA,MAAIjsB,OAAO,KAAK,IAAhB,EAAsB;AACpB,UAAM6uC,aAA4B,GAAG7uC,OAAO,CAACouB,aAA7C;;AACA,QAAIygB,aAAa,KAAK,IAAtB,EAA4B;AAC1B;AACA;AACA;AACA;AACA,aAAO,KAAP;AACD;AACF,GAbD;;;AAgBA,SAAOxV,kBAAkB,CACvBkS,eADuB,EAEtBpS,qBAFsB,CAAzB;AAID;;AAED,SAAS2V,6BAAT,CAAuC9uC,OAAvC,EAAuDisB,WAAvD,EAAoE;AAClE;AACA,SAAOnM,WAAW,CAAC9f,OAAO,CAACksB,UAAT,EAAqBD,WAArB,CAAlB;AACD;;AAED,SAAS8iB,uBAAT,CAAiC/uC,OAAjC,EAA0CunB,cAA1C,EAA0D0E,WAA1D,EAAuE;AACrE,QAAM/V,SAAS,GAAGqR,cAAc,CAAC6L,YAAjC,CADqE;;AAUrE,MAAImY,eAAgC,GAAGnS,mBAAmB,CAACp5B,OAA3D;AAEA,MAAIgvC,YAAY,GAAG,KAAnB;AACA,QAAM1U,UAAU,GAAG,CAAC/S,cAAc,CAACrU,KAAf,GAAuB1B,UAAxB,MAAwCR,OAA3D;;AAEA,MACEspB,UAAU,IACVsU,sBAAsB,CACpBrD,eADoB,EAEpBvrC,OAFoB,AAAA,CAFxB,EAQE;AACA;AACA;AACAgvC,IAAAA,YAAY,GAAG,IAAf;AACAznB,IAAAA,cAAc,CAACrU,KAAf,IAAwB,CAAC1B,UAAzB;AACD,GAbD,MAaO;AACL;AACA,QACExR,OAAO,KAAK,IAAZ,IACCA,OAAO,CAACouB,aAAT,KAAkD,IAFpD,EAGE;AACA;AACA;AACA;AACA;AACA,UAAIlY,SAAS,CAACgkB,0BAAV,KAAyC,IAA7C,EAAmD;AACjDqR,QAAAA,eAAe,GAAG7R,yBAAyB,CACzC6R,eADyC,EAEzCrS,8BAFyC,CAA3C;AAID;AACF;AACF;;AAEDqS,EAAAA,eAAe,GAAGhS,gCAAgC,CAACgS,eAAD,CAAlD;AAEA3R,EAAAA,mBAAmB,CAACrS,cAAD,EAAiBgkB,eAAjB,CAAnB,CAjDqE;AAoDrE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAIvrC,OAAO,KAAK,IAAhB,EAAsB;AACpB;AAkBA,UAAMivC,mBAAmB,GAAG/4B,SAAS,CAACoO,QAAtC;AACA,UAAM4qB,oBAAoB,GAAGh5B,SAAS,CAACi5B,QAAvC;;AACA,QAAIH,YAAJ,EAAkB;AAChB,YAAMI,gBAAgB,GAAGC,6BAA6B,CACpD9nB,cADoD,EAEpD0nB,mBAFoD,EAGpDC,oBAHoD,EAIpDjjB,WAJoD,CAAtD;AAMA,YAAMqjB,oBAA2B,GAAI/nB,cAAc,CAAC3T,KAApD;AACA07B,MAAAA,oBAAoB,CAAClhB,aAArB,GAAqCqgB,2BAA2B,CAC9DxiB,WAD8D,CAAhE;AAGA1E,MAAAA,cAAc,CAAC6G,aAAf,GAA+BmgB,gBAA/B;AACA,aAAOa,gBAAP;AACD,KAbD,MAaO,IAAI,OAAOl5B,SAAS,CAACq5B,yBAAjB,KAA+C,QAAnD,EAA6D;AAClE;AACA;AACA;AACA,YAAMH,gBAAgB,GAAGC,6BAA6B,CACpD9nB,cADoD,EAEpD0nB,mBAFoD,EAGpDC,oBAHoD,EAIpDjjB,WAJoD,CAAtD;AAMA,YAAMqjB,oBAA2B,GAAI/nB,cAAc,CAAC3T,KAApD;AACA07B,MAAAA,oBAAoB,CAAClhB,aAArB,GAAqCqgB,2BAA2B,CAC9DxiB,WAD8D,CAAhE;AAGA1E,MAAAA,cAAc,CAAC6G,aAAf,GAA+BmgB,gBAA/B,CAdkE;AAiBlE;AACA;AACA;AACA;AACA;AACA;AACA;;AACAhnB,MAAAA,cAAc,CAACtK,KAAf,GAAuBV,aAAvB;AACA,aAAO6yB,gBAAP;AACD,KA1BM,MA0BA;AACL,aAAOI,4BAA4B,CACjCjoB,cADiC,EAEjC0nB,mBAFiC,AAAA,CAAnC;AAKD;AACF,GAnED,MAmEO;AACL;AAEA;AACA;AACA,UAAM5f,SAA+B,GAAGrvB,OAAO,CAACouB,aAAhD;;AACA,QAAIiB,SAAS,KAAK,IAAlB,EAAwB;AACtB;AA8CA,UAAI2f,YAAJ,EAAkB;AAChB,cAAME,oBAAoB,GAAGh5B,SAAS,CAACi5B,QAAvC;AACA,cAAMF,mBAAmB,GAAG/4B,SAAS,CAACoO,QAAtC;AACA,cAAMmrB,qBAAqB,GAAGC,8BAA8B,CAC1D1vC,OAD0D,EAE1DunB,cAF0D,EAG1D0nB,mBAH0D,EAI1DC,oBAJ0D,EAK1DjjB,WAL0D,CAA5D;AAOA,cAAMqjB,oBAA2B,GAAI/nB,cAAc,CAAC3T,KAApD;AACA,cAAM+6B,kBAAyC,GAAI3uC,OAAO,CAAC4T,KAAT,CAC/Cwa,aADH;AAEAkhB,QAAAA,oBAAoB,CAAClhB,aAArB,GACEugB,kBAAkB,KAAK,IAAvB,GACIF,2BAA2B,CAACxiB,WAAD,CAD/B,GAEIyiB,4BAA4B,CAACC,kBAAD,EAAqB1iB,WAArB,CAHlC;AAIAqjB,QAAAA,oBAAoB,CAACpjB,UAArB,GAAkC4iB,6BAA6B,CAC7D9uC,OAD6D,EAE7DisB,WAF6D,CAA/D;AAIA1E,QAAAA,cAAc,CAAC6G,aAAf,GAA+BmgB,gBAA/B;AACA,eAAOkB,qBAAP;AACD,OAvBD,MAuBO;AACL,cAAMR,mBAAmB,GAAG/4B,SAAS,CAACoO,QAAtC;AACA,cAAMgrB,oBAAoB,GAAGK,6BAA6B,CACxD3vC,OADwD,EAExDunB,cAFwD,EAGxD0nB,mBAHwD,EAIxDhjB,WAJwD,CAA1D;AAMA1E,QAAAA,cAAc,CAAC6G,aAAf,GAA+B,IAA/B;AACA,eAAOkhB,oBAAP;AACD;AACF,KAjFD,MAiFO;AACL;AACA,UAAIN,YAAJ,EAAkB;AAChB;AACA,cAAME,oBAAoB,GAAGh5B,SAAS,CAACi5B,QAAvC;AACA,cAAMF,mBAAmB,GAAG/4B,SAAS,CAACoO,QAAtC;AACA,cAAMmrB,qBAAqB,GAAGC,8BAA8B,CAC1D1vC,OAD0D,EAE1DunB,cAF0D,EAG1D0nB,mBAH0D,EAI1DC,oBAJ0D,EAK1DjjB,WAL0D,CAA5D;AAOA,cAAMqjB,oBAA2B,GAAI/nB,cAAc,CAAC3T,KAApD;AACA,cAAM+6B,kBAAyC,GAAI3uC,OAAO,CAAC4T,KAAT,CAC/Cwa,aADH;AAEAkhB,QAAAA,oBAAoB,CAAClhB,aAArB,GACEugB,kBAAkB,KAAK,IAAvB,GACIF,2BAA2B,CAACxiB,WAAD,CAD/B,GAEIyiB,4BAA4B,CAACC,kBAAD,EAAqB1iB,WAArB,CAHlC;AAIAqjB,QAAAA,oBAAoB,CAACpjB,UAArB,GAAkC4iB,6BAA6B,CAC7D9uC,OAD6D,EAE7DisB,WAF6D,CAA/D,CAlBgB;AAuBhB;;AACA1E,QAAAA,cAAc,CAAC6G,aAAf,GAA+BmgB,gBAA/B;AACA,eAAOkB,qBAAP;AACD,OA1BD,MA0BO;AACL;AACA;AACA,cAAMR,mBAAmB,GAAG/4B,SAAS,CAACoO,QAAtC;AACA,cAAMgrB,oBAAoB,GAAGK,6BAA6B,CACxD3vC,OADwD,EAExDunB,cAFwD,EAGxD0nB,mBAHwD,EAIxDhjB,WAJwD,CAA1D;AAMA1E,QAAAA,cAAc,CAAC6G,aAAf,GAA+B,IAA/B;AACA,eAAOkhB,oBAAP;AACD;AACF;AACF;AACF;;AAED,SAASE,4BAAT,CACEjoB,cADF,EAEEqoB,eAFF,EAGE3jB,WAHF,EAIE;AACA,QAAM6J,IAAI,GAAGvO,cAAc,CAACuO,IAA5B;AACA,QAAM+Z,iBAAiC,GAAG;AACxC/Z,IAAAA,IAAI,EAAE,SADkC;AAExCxR,IAAAA,QAAQ,EAAEsrB;AAF8B,GAA1C;AAIA,QAAMN,oBAAoB,GAAGQ,iCAAiC,CAC5DD,iBAD4D,EAE5D/Z,IAF4D,AAAA,CAA9D;AAKAwZ,EAAAA,oBAAoB,CAAC1rC,MAArB,GAA8B2jB,cAA9B;AACAA,EAAAA,cAAc,CAAC3T,KAAf,GAAuB07B,oBAAvB;AACA,SAAOA,oBAAP;AACD;;AAED,SAASD,6BAAT,CACE9nB,cADF,EAEEqoB,eAFF,EAGEG,gBAHF,EAIE9jB,WAJF,EAKE;AACA,QAAM6J,IAAI,GAAGvO,cAAc,CAACuO,IAA5B;AACA,QAAMka,yBAAuC,GAAGzoB,cAAc,CAAC3T,KAA/D;AAEA,QAAMi8B,iBAAiC,GAAG;AACxC/Z,IAAAA,IAAI,EAAE,QADkC;AAExCxR,IAAAA,QAAQ,EAAEsrB;AAF8B,GAA1C;AAKA,MAAIN,oBAAJ;AACA,MAAIG,qBAAJ;;AACA,MACE,CAAC3Z,IAAI,GAAG3b,cAAR,MAA4BD,MAA5B,IACA81B,yBAAyB,KAAK,IAFhC,EAGE;AACA;AACA;AACAV,IAAAA,oBAAoB,GAAGU,yBAAvB;AACAV,IAAAA,oBAAoB,CAACpjB,UAArB,GAAkC1R,OAAlC;AACA80B,IAAAA,oBAAoB,CAAClc,YAArB,GAAoCyc,iBAApC;;AAaAJ,IAAAA,qBAAqB,GAAGjZ,uBAAuB,CAC7CuZ,gBAD6C,EAE7Cja,IAF6C,EAG7C7J,WAH6C,EAI7C,IAJ6C,CAA/C;AAMD,GA3BD,MA2BO;AACLqjB,IAAAA,oBAAoB,GAAGQ,iCAAiC,CACtDD,iBADsD,EAEtD/Z,IAFsD,AAAA,CAAxD;AAKA2Z,IAAAA,qBAAqB,GAAGjZ,uBAAuB,CAC7CuZ,gBAD6C,EAE7Cja,IAF6C,EAG7C7J,WAH6C,EAI7C,IAJ6C,CAA/C;AAMD;;AAEDqjB,EAAAA,oBAAoB,CAAC1rC,MAArB,GAA8B2jB,cAA9B;AACAkoB,EAAAA,qBAAqB,CAAC7rC,MAAtB,GAA+B2jB,cAA/B;AACA+nB,EAAAA,oBAAoB,CAACz7B,OAArB,GAA+B47B,qBAA/B;AACAloB,EAAAA,cAAc,CAAC3T,KAAf,GAAuB07B,oBAAvB;AACA,SAAOG,qBAAP;AACD;;AAED,SAASK,iCAAT,CACEG,cADF,EAEEna,IAFF,EAGE7J,WAHF,EAIE;AACA;AACA;AACA,SAAOikB,wBAAwB,CAACD,cAAD,EAAiBna,IAAjB,EAAuBtb,OAAvB,EAAgC,IAAhC,CAA/B;AACD;;AAED,SAAS21B,kCAAT,CACEnwC,OADF,EAEEiwC,cAFF,EAGE;AACA;AACA;AACA,SAAO9a,oBAAoB,CAACn1B,OAAD,EAAUiwC,cAAV,CAA3B;AACD;;AAED,SAASN,6BAAT,CACE3vC,OADF,EAEEunB,cAFF,EAGEqoB,eAHF,EAIE3jB,WAJF,EAKE;AACA,QAAMmkB,2BAAkC,GAAIpwC,OAAO,CAAC4T,KAApD;AACA,QAAMy8B,4BAA0C,GAC9CD,2BAA2B,CAACv8B,OAD9B;AAGA,QAAMy7B,oBAAoB,GAAGa,kCAAkC,CAC7DC,2BAD6D,EAE7D;AACEta,IAAAA,IAAI,EAAE,SADR;AAEExR,IAAAA,QAAQ,EAAEsrB;AAFZ,GAF6D,CAA/D;;AAOA,MAAI,CAACroB,cAAc,CAACuO,IAAf,GAAsB3b,cAAvB,MAA2CD,MAA/C,EAAuD;AACrDo1B,IAAAA,oBAAoB,CAACryB,KAArB,GAA6BgP,WAA7B;AACD;;AACDqjB,EAAAA,oBAAoB,CAAC1rC,MAArB,GAA8B2jB,cAA9B;AACA+nB,EAAAA,oBAAoB,CAACz7B,OAArB,GAA+B,IAA/B;;AACA,MAAIw8B,4BAA4B,KAAK,IAArC,EAA2C;AACzC;AACA,UAAMzb,SAAS,GAAGrN,cAAc,CAACqN,SAAjC;;AACA,QAAIA,SAAS,KAAK,IAAlB,EAAwB;AACtBrN,MAAAA,cAAc,CAACqN,SAAf,GAA2B,CAACyb,4BAAD,CAA3B;AACA9oB,MAAAA,cAAc,CAACrU,KAAf,IAAwB7B,aAAxB;AACD,KAHD,MAGO;AACLujB,MAAAA,SAAS,CAACn4B,IAAV,CAAe4zC,4BAAf;AACD;AACF;;AAED9oB,EAAAA,cAAc,CAAC3T,KAAf,GAAuB07B,oBAAvB;AACA,SAAOA,oBAAP;AACD;;AAED,SAASI,8BAAT,CACE1vC,OADF,EAEEunB,cAFF,EAGEqoB,eAHF,EAIEG,gBAJF,EAKE9jB,WALF,EAME;AACA,QAAM6J,IAAI,GAAGvO,cAAc,CAACuO,IAA5B;AACA,QAAMsa,2BAAkC,GAAIpwC,OAAO,CAAC4T,KAApD;AACA,QAAMy8B,4BAA0C,GAC9CD,2BAA2B,CAACv8B,OAD9B;AAGA,QAAMg8B,iBAAiC,GAAG;AACxC/Z,IAAAA,IAAI,EAAE,QADkC;AAExCxR,IAAAA,QAAQ,EAAEsrB;AAF8B,GAA1C;AAKA,MAAIN,oBAAJ;;AACA;AAEE;AACA,GAACxZ,IAAI,GAAG3b,cAAR,MAA4BD,MAA5B;AAEA;AACA;AACA;AACA;AACA;AACAqN,EAAAA,cAAc,CAAC3T,KAAf,KAAyBw8B,2BAV3B,EAWE;AACA,UAAMJ,yBAAgC,GAAIzoB,cAAc,CAAC3T,KAAzD;AACA07B,IAAAA,oBAAoB,GAAGU,yBAAvB;AACAV,IAAAA,oBAAoB,CAACpjB,UAArB,GAAkC1R,OAAlC;AACA80B,IAAAA,oBAAoB,CAAClc,YAArB,GAAoCyc,iBAApC;AAkCA;AACA;;;AACAtoB,IAAAA,cAAc,CAACqN,SAAf,GAA2B,IAA3B;AACD,GApDD,MAoDO;AACL0a,IAAAA,oBAAoB,GAAGa,kCAAkC,CACvDC,2BADuD,EAEvDP,iBAFuD,CAAzD;AA4BA;AACA;;;AACAP,IAAAA,oBAAoB,CAAC3F,YAArB,GACEyG,2BAA2B,CAACzG,YAA5B,GAA2C/2B,UAD7C;AAED;;AACD,MAAI68B,qBAAJ;;AACA,MAAIY,4BAA4B,KAAK,IAArC,EAA2C;AACzCZ,IAAAA,qBAAqB,GAAGta,oBAAoB,CAC1Ckb,4BAD0C,EAE1CN,gBAF0C,CAA5C;AAID,GALD,MAKO;AACLN,IAAAA,qBAAqB,GAAGjZ,uBAAuB,CAC7CuZ,gBAD6C,EAE7Cja,IAF6C,EAG7C7J,WAH6C,EAI7C,IAJ6C,CAA/C,CADK;AAQL;;AACAwjB,IAAAA,qBAAqB,CAACv8B,KAAtB,IAA+BhC,SAA/B;AACD;;AAEDu+B,EAAAA,qBAAqB,CAAC7rC,MAAtB,GAA+B2jB,cAA/B;AACA+nB,EAAAA,oBAAoB,CAAC1rC,MAArB,GAA8B2jB,cAA9B;AACA+nB,EAAAA,oBAAoB,CAACz7B,OAArB,GAA+B47B,qBAA/B;AACAloB,EAAAA,cAAc,CAAC3T,KAAf,GAAuB07B,oBAAvB;AAEA,SAAOG,qBAAP;AACD;;AAkPD,SAASa,mBAAT,CAA6B7/B,KAA7B,EAA2Cwb,WAA3C,EAA+D;AAC7Dxb,EAAAA,KAAK,CAACwM,KAAN,GAAc4C,UAAU,CAACpP,KAAK,CAACwM,KAAP,EAAcgP,WAAd,CAAxB;AACA,QAAM3nB,SAAS,GAAGmM,KAAK,CAACnM,SAAxB;;AACA,MAAIA,SAAS,KAAK,IAAlB,EAAwB;AACtBA,IAAAA,SAAS,CAAC2Y,KAAV,GAAkB4C,UAAU,CAACvb,SAAS,CAAC2Y,KAAX,EAAkBgP,WAAlB,CAA5B;AACD;;AACDD,EAAAA,wBAAwB,CAACvb,KAAK,CAAC7M,MAAP,EAAeqoB,WAAf,CAAxB;AACD;;AAED,SAASskB,8BAAT,CACEhpB,cADF,EAEEipB,UAFF,EAGEvkB,WAHF,EAIQ;AACN;AACA;AACA;AACA,MAAIlZ,IAAI,GAAGy9B,UAAX;;AACA,SAAOz9B,IAAI,KAAK,IAAhB,EAAsB;AACpB,QAAIA,IAAI,CAAClP,GAAL,KAAaxC,iBAAjB,EAAoC;AAClC,YAAM2wB,KAA2B,GAAGjf,IAAI,CAACqb,aAAzC;;AACA,UAAI4D,KAAK,KAAK,IAAd,EAAoB;AAClBse,QAAAA,mBAAmB,CAACv9B,IAAD,EAAOkZ,WAAP,CAAnB;AACD;AACF,KALD,MAKO,IAAIlZ,IAAI,CAAClP,GAAL,KAAalC,qBAAjB,EAAwC;AAC7C;AACA;AACA;AACA;AACA;AACA2uC,MAAAA,mBAAmB,CAACv9B,IAAD,EAAOkZ,WAAP,CAAnB;AACD,KAPM,MAOA,IAAIlZ,IAAI,CAACa,KAAL,KAAe,IAAnB,EAAyB;AAC9Bb,MAAAA,IAAI,CAACa,KAAL,CAAWhQ,MAAX,GAAoBmP,IAApB;AACAA,MAAAA,IAAI,GAAGA,IAAI,CAACa,KAAZ;AACA;AACD;;AACD,QAAIb,IAAI,KAAKwU,cAAb,EAA6B;AAC3B;AACD;;AACD,WAAOxU,IAAI,CAACc,OAAL,KAAiB,IAAxB,EAA8B;AAC5B,UAAId,IAAI,CAACnP,MAAL,KAAgB,IAAhB,IAAwBmP,IAAI,CAACnP,MAAL,KAAgB2jB,cAA5C,EAA4D;AAC1D;AACD;;AACDxU,MAAAA,IAAI,GAAGA,IAAI,CAACnP,MAAZ;AACD;;AACDmP,IAAAA,IAAI,CAACc,OAAL,CAAajQ,MAAb,GAAsBmP,IAAI,CAACnP,MAA3B;AACAmP,IAAAA,IAAI,GAAGA,IAAI,CAACc,OAAZ;AACD;AACF;;AAED,SAAS48B,kBAAT,CAA4BD,UAA5B,EAAoE;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAIpW,GAAG,GAAGoW,UAAV;AACA,MAAIE,cAA4B,GAAG,IAAnC;;AACA,SAAOtW,GAAG,KAAK,IAAf,EAAqB;AACnB,UAAMuW,UAAU,GAAGvW,GAAG,CAAC91B,SAAvB,CADmB;;AAGnB,QAAIqsC,UAAU,KAAK,IAAf,IAAuBxW,kBAAkB,CAACwW,UAAD,CAAlB,KAAmC,IAA9D,EAAoE;AAClED,MAAAA,cAAc,GAAGtW,GAAjB;AACD;;AACDA,IAAAA,GAAG,GAAGA,GAAG,CAACvmB,OAAV;AACD;;AACD,SAAO68B,cAAP;AACD;;AAqJD,SAASE,2BAAT,CACErpB,cADF,EAEE6jB,WAFF,EAGE/B,IAHF,EAIEqH,cAJF,EAKEvH,QALF,EAMQ;AACN,QAAMF,WAA2C,GAC/C1hB,cAAc,CAAC6G,aADjB;;AAEA,MAAI6a,WAAW,KAAK,IAApB,EAA0B;AACxB1hB,IAAAA,cAAc,CAAC6G,aAAf,GAAgC;AAC9Bgd,MAAAA,WAAW,EAAEA,WADiB;AAE9BP,MAAAA,SAAS,EAAE,IAFmB;AAG9BM,MAAAA,kBAAkB,EAAE,CAHU;AAI9BG,MAAAA,IAAI,EAAEoF,cAJwB;AAK9BrH,MAAAA,IAAI,EAAEA,IALwB;AAM9BF,MAAAA,QAAQ,EAAEA;AANoB,KAAhC;AAQD,GATD,MASO;AACL;AACAF,IAAAA,WAAW,CAACmC,WAAZ,GAA0BA,WAA1B;AACAnC,IAAAA,WAAW,CAAC4B,SAAZ,GAAwB,IAAxB;AACA5B,IAAAA,WAAW,CAACkC,kBAAZ,GAAiC,CAAjC;AACAlC,IAAAA,WAAW,CAACqC,IAAZ,GAAmBoF,cAAnB;AACAzH,IAAAA,WAAW,CAACI,IAAZ,GAAmBA,IAAnB;AACAJ,IAAAA,WAAW,CAACE,QAAZ,GAAuBA,QAAvB;AACD;AACF;AAGD;AACA;AACA;AACA;AACA;AACA;;;AACA,SAAS0H,2BAAT,CACE7wC,OADF,EAEEunB,cAFF,EAGE0E,WAHF,EAIE;AACA,QAAM/V,SAAS,GAAGqR,cAAc,CAAC6L,YAAjC;AACA,QAAMiH,WAAoC,GAAGnkB,SAAS,CAACmkB,WAAvD;AACA,QAAM8O,QAA8B,GAAGjzB,SAAS,CAACmzB,IAAjD;AACA,QAAMrS,WAAW,GAAG9gB,SAAS,CAACoO,QAA9B;AAEAwsB,AAIAjF,EAAAA,iBAAiB,CAAC7rC,OAAD,EAAUunB,cAAV,EAA0ByP,WAA1B,EAAuC/K,WAAvC,CAAjB;AAEA,MAAIsf,eAAgC,GAAGnS,mBAAmB,CAACp5B,OAA3D;AAEA,QAAM+wC,mBAAmB,GAAG1X,kBAAkB,CAC5CkS,eAD4C,EAE3CpS,qBAF2C,CAA9C;;AAIA,MAAI4X,mBAAJ,EAAyB;AACvBxF,IAAAA,eAAe,GAAG/R,yBAAyB,CACzC+R,eADyC,EAEzCpS,qBAFyC,CAA3C;AAIA5R,IAAAA,cAAc,CAACrU,KAAf,IAAwB1B,UAAxB;AACD,GAND,MAMO;AACL,UAAMw/B,gBAAgB,GACpBhxC,OAAO,KAAK,IAAZ,IAAoB,CAACA,OAAO,CAACkT,KAAR,GAAgB1B,UAAjB,MAAiCR,OADvD;;AAEA,QAAIggC,gBAAJ,EAAsB;AACpB;AACA;AACA;AACAT,MAAAA,8BAA8B,CAC5BhpB,cAD4B,EAE5BA,cAAc,CAAC3T,KAFa,EAG5BqY,WAH4B,CAA9B;AAKD;;AACDsf,IAAAA,eAAe,GAAGhS,gCAAgC,CAACgS,eAAD,CAAlD;AACD;;AACD3R,EAAAA,mBAAmB,CAACrS,cAAD,EAAiBgkB,eAAjB,CAAnB;;AAEA,MAAI,CAAChkB,cAAc,CAACuO,IAAf,GAAsB3b,cAAvB,MAA2CD,MAA/C,EAAuD;AACrD;AACA;AACAqN,IAAAA,cAAc,CAAC6G,aAAf,GAA+B,IAA/B;AACD,GAJD,MAIO;AACL,YAAQiM,WAAR;AACE,WAAK,UAAL;AAAiB;AACf,gBAAMqW,cAAc,GAAGD,kBAAkB,CAAClpB,cAAc,CAAC3T,KAAhB,CAAzC;AACA,cAAIy1B,IAAJ;;AACA,cAAIqH,cAAc,KAAK,IAAvB,EAA6B;AAC3B;AACA;AACArH,YAAAA,IAAI,GAAG9hB,cAAc,CAAC3T,KAAtB;AACA2T,YAAAA,cAAc,CAAC3T,KAAf,GAAuB,IAAvB;AACD,WALD,MAKO;AACL;AACA;AACAy1B,YAAAA,IAAI,GAAGqH,cAAc,CAAC78B,OAAtB;AACA68B,YAAAA,cAAc,CAAC78B,OAAf,GAAyB,IAAzB;AACD;;AACD+8B,UAAAA,2BAA2B,CACzBrpB,cADyB,EAEzB,KAFyB;AAGzB8hB,UAAAA,IAHyB,EAIzBqH,cAJyB,EAKzBvH,QALyB,CAA3B;AAOA;AACD;;AACD,WAAK,WAAL;AAAkB;AAChB;AACA;AACA;AACA;AACA,cAAIE,IAAI,GAAG,IAAX;AACA,cAAIjP,GAAG,GAAG7S,cAAc,CAAC3T,KAAzB;AACA2T,UAAAA,cAAc,CAAC3T,KAAf,GAAuB,IAAvB;;AACA,iBAAOwmB,GAAG,KAAK,IAAf,EAAqB;AACnB,kBAAMuW,UAAU,GAAGvW,GAAG,CAAC91B,SAAvB,CADmB;;AAGnB,gBAAIqsC,UAAU,KAAK,IAAf,IAAuBxW,kBAAkB,CAACwW,UAAD,CAAlB,KAAmC,IAA9D,EAAoE;AAClE;AACAppB,cAAAA,cAAc,CAAC3T,KAAf,GAAuBwmB,GAAvB;AACA;AACD;;AACD,kBAAM6W,OAAO,GAAG7W,GAAG,CAACvmB,OAApB;AACAumB,YAAAA,GAAG,CAACvmB,OAAJ,GAAcw1B,IAAd;AACAA,YAAAA,IAAI,GAAGjP,GAAP;AACAA,YAAAA,GAAG,GAAG6W,OAAN;AACD,WApBe;;;AAsBhBL,UAAAA,2BAA2B,CACzBrpB,cADyB,EAEzB,IAFyB;AAGzB8hB,UAAAA,IAHyB,EAIzB,IAJyB;AAKzBF,UAAAA,QALyB,CAA3B;AAOA;AACD;;AACD,WAAK,UAAL;AAAiB;AACfyH,UAAAA,2BAA2B,CACzBrpB,cADyB,EAEzB,KAFyB;AAGzB,cAHyB;AAIzB,cAJyB;AAKzB7uB,UAAAA,SALyB,CAA3B;AAOA;AACD;;AACD;AAAS;AACP;AACA;AACA6uB,UAAAA,cAAc,CAAC6G,aAAf,GAA+B,IAA/B;AACD;AArEH;AAuED;;AACD,SAAO7G,cAAc,CAAC3T,KAAtB;AACD;;AAED,SAASs9B,qBAAT,CACElxC,OADF,EAEEunB,cAFF,EAGE0E,WAHF,EAIE;AACAwM,EAAAA,iBAAiB,CAAClR,cAAD,EAAiBA,cAAc,CAAC1iB,SAAf,CAAyB2e,aAA1C,CAAjB;AACA,QAAMsoB,YAAY,GAAGvkB,cAAc,CAAC6L,YAApC;;AACA,MAAIpzB,OAAO,KAAK,IAAhB,EAAsB;AACpB;AACA;AACA;AACA;AACA;AACAunB,IAAAA,cAAc,CAAC3T,KAAf,GAAuBgkB,oBAAoB,CACzCrQ,cADyC,EAEzC,IAFyC,EAGzCukB,YAHyC,EAIzC7f,WAJyC,CAA3C;AAMD,GAZD,MAYO;AACL4f,IAAAA,iBAAiB,CAAC7rC,OAAD,EAAUunB,cAAV,EAA0BukB,YAA1B,EAAwC7f,WAAxC,CAAjB;AACD;;AACD,SAAO1E,cAAc,CAAC3T,KAAtB;AACD;;AAID,SAASu9B,qBAAT,CACEnxC,OADF,EAEEunB,cAFF,EAGE0E,WAHF,EAIE;AACA,QAAMmlB,YAAoC,GAAG7pB,cAAc,CAAC/uB,IAA5D;AACA,QAAMvC,OAA0B,GAAGm7C,YAAY,CAACrhC,QAAhD;AAEA,QAAM4T,QAAQ,GAAG4D,cAAc,CAAC6L,YAAhC;AACA,QAAM1P,QAAQ,GAAG6D,cAAc,CAACqL,aAAhC;AAEA,QAAMye,QAAQ,GAAG1tB,QAAQ,CAACpW,KAA1B;;AAkBAoe,EAAAA,YAAY,CAACpE,cAAD,EAAiBtxB,OAAjB,EAA0Bo7C,QAA1B,CAAZ;;AAEA,EAKO;AACL,QAAI3tB,QAAQ,KAAK,IAAjB,EAAuB;AACrB,YAAM4tB,QAAQ,GAAG5tB,QAAQ,CAACnW,KAA1B;;AACA,UAAI4c,QAAE,CAACmnB,QAAD,EAAWD,QAAX,CAAN,EAA4B;AAC1B;AACA,YACE3tB,QAAQ,CAACY,QAAT,KAAsBX,QAAQ,CAACW,QAA/B,IACA,CAACitB,iBAAuB,EAF1B,EAGE;AACA,iBAAOtF,4BAA4B,CACjCjsC,OADiC,EAEjCunB,cAFiC,EAGjC0E,WAHiC,CAAnC;AAKD;AACF,OAZD,MAYO;AACL;AACA;AACAE,QAAAA,sBAAsB,CAAC5E,cAAD,EAAiBtxB,OAAjB,EAA0Bg2B,WAA1B,CAAtB;AACD;AACF;AACF;;AAED,QAAM+K,WAAW,GAAGrT,QAAQ,CAACW,QAA7B;AACAunB,EAAAA,iBAAiB,CAAC7rC,OAAD,EAAUunB,cAAV,EAA0ByP,WAA1B,EAAuC/K,WAAvC,CAAjB;AACA,SAAO1E,cAAc,CAAC3T,KAAtB;AACD;;AAID,SAAS49B,qBAAT,CACExxC,OADF,EAEEunB,cAFF,EAGE0E,WAHF,EAIE;AACA,MAAIh2B,OAA0B,GAAGsxB,cAAc,CAAC/uB,IAAhD,CADA;AAGA;AAwBA,QAAMmrB,QAAQ,GAAG4D,cAAc,CAAC6L,YAAhC;AACA,QAAMpjB,MAAM,GAAG2T,QAAQ,CAACW,QAAxB;;AAaA0I,EAAAA,oBAAoB,CAACzF,cAAD,EAAiB0E,WAAjB,CAApB;AACA,QAAMolB,QAAQ,GAAGnkB,WAAW,CAACj3B,OAAD,CAA5B;;AAIA,MAAI+gC,WAAJ;;AACA,EAKO;AACLA,IAAAA,WAAW,GAAGhnB,MAAM,CAACqhC,QAAD,CAApB;AACD;;;AAMD9pB,EAAAA,cAAc,CAACrU,KAAf,IAAwBjC,aAAxB;AACA46B,EAAAA,iBAAiB,CAAC7rC,OAAD,EAAUunB,cAAV,EAA0ByP,WAA1B,EAAuC/K,WAAvC,CAAjB;AACA,SAAO1E,cAAc,CAAC3T,KAAtB;AACD;;AAUD,AAAO,SAASqZ,gCAAT,GAA4C;AACjD2e,EAAAA,gBAAgB,GAAG,IAAnB;AACD;AAED;AAIA,SAASK,4BAAT,CACEjsC,OADF,EAEEunB,cAFF,EAGE0E,WAHF,EAIgB;AACd,MAAIjsB,OAAO,KAAK,IAAhB,EAAsB;AACpB;AACAunB,IAAAA,cAAc,CAACzkB,YAAf,GAA8B9C,OAAO,CAAC8C,YAAtC;AACD;;AAODotB,EAAAA,sBAAsB,CAAC3I,cAAc,CAACtK,KAAhB,CAAtB,CAXc;;AAcd,MAAI,CAACyC,gBAAgB,CAACuM,WAAD,EAAc1E,cAAc,CAAC2E,UAA7B,CAArB,EAA+D;AAC7D;AACA;AACA;AAEA,IAOO;AACL,aAAO,IAAP;AACD;AACF,GA7Ba;AAgCd;;;AACA6L,EAAAA,gBAAgB,CAAC/3B,OAAD,EAAUunB,cAAV,CAAhB;AACA,SAAOA,cAAc,CAAC3T,KAAtB;AACD;;AA+DD,SAAS64B,6BAAT,CACEzsC,OADF,EAEEisB,WAFF,EAGW;AACT;AACA;AACA,QAAMwlB,WAAW,GAAGzxC,OAAO,CAACid,KAA5B;;AACA,MAAIyC,gBAAgB,CAAC+xB,WAAD,EAAcxlB,WAAd,CAApB,EAAgD;AAC9C,WAAO,IAAP;AACD,GANQ;AAQT;AAOA,SAAO,KAAP;AACD;;AAED,SAASylB,sCAAT,CACE1xC,OADF,EAEEunB,cAFF,EAGE0E,WAHF,EAIE;AACA;AACA;AACA;AACA,UAAQ1E,cAAc,CAAC1jB,GAAvB;AACE,SAAKlD,QAAL;AACEgtC,MAAAA,mBAAmB,CAACpmB,cAAD,CAAnB;AAQA;;AACF,SAAK1mB,aAAL;AACEi4B,MAAAA,eAAe,CAACvR,cAAD,CAAf;AACA;;AACF,SAAK9mB,cAAL;AAAqB;AACnB,cAAM+mB,SAAS,GAAGD,cAAc,CAAC/uB,IAAjC;;AACA,YAAIqxC,iBAAuB,CAACriB,SAAD,CAA3B,EAAwC;AACtC+lB,UAAAA,mBAAyB,CAAChmB,cAAD,CAAzB;AACD;;AACD;AACD;;AACD,SAAK3mB,UAAL;AACE63B,MAAAA,iBAAiB,CAAClR,cAAD,EAAiBA,cAAc,CAAC1iB,SAAf,CAAyB2e,aAA1C,CAAjB;AACA;;AACF,SAAKtiB,eAAL;AAAsB;AACpB,cAAMmwC,QAAQ,GAAG9pB,cAAc,CAACqL,aAAf,CAA6BrlB,KAA9C;AACA,cAAMtX,OAA0B,GAAGsxB,cAAc,CAAC/uB,IAAf,CAAoBuX,QAAvD;AACA4b,QAAAA,YAAY,CAACpE,cAAD,EAAiBtxB,OAAjB,EAA0Bo7C,QAA1B,CAAZ;AACA;AACD;;AACD,SAAKjwC,QAAL;AACE;AAkBA;;AACF,SAAKC,iBAAL;AAAwB;AACtB,cAAM2wB,KAA2B,GAAGzK,cAAc,CAAC6G,aAAnD;;AACA,YAAI4D,KAAK,KAAK,IAAd,EAAoB;AAClB,AAiBA;AACA;AACA;;;AACA,gBAAMsd,oBAA2B,GAAI/nB,cAAc,CAAC3T,KAApD;AACA,gBAAM+9B,iBAAiB,GAAGrC,oBAAoB,CAACpjB,UAA/C;;AACA,cAAIxM,gBAAgB,CAACuM,WAAD,EAAc0lB,iBAAd,CAApB,EAAsD;AACpD;AACA;AACA,mBAAO5C,uBAAuB,CAAC/uC,OAAD,EAAUunB,cAAV,EAA0B0E,WAA1B,CAA9B;AACD,WAJD,MAIO;AACL;AACA;AACA2N,YAAAA,mBAAmB,CACjBrS,cADiB,EAEjBgS,gCAAgC,CAACH,mBAAmB,CAACp5B,OAArB,CAFf,CAAnB,CAHK;AAQL;;AACA,kBAAM4T,KAAK,GAAGq4B,4BAA4B,CACxCjsC,OADwC,EAExCunB,cAFwC,EAGxC0E,WAHwC,CAA1C;;AAKA,gBAAIrY,KAAK,KAAK,IAAd,EAAoB;AAClB;AACA;AACA,qBAAOA,KAAK,CAACC,OAAb;AACD,aAJD,MAIO;AACL;AACA;AACA;AACA,qBAAO,IAAP;AACD;AACF;AACF,SApDD,MAoDO;AACL+lB,UAAAA,mBAAmB,CACjBrS,cADiB,EAEjBgS,gCAAgC,CAACH,mBAAmB,CAACp5B,OAArB,CAFf,CAAnB;AAID;;AACD;AACD;;AACD,SAAK2B,qBAAL;AAA4B;AAC1B,cAAMqvC,gBAAgB,GAAG,CAAChxC,OAAO,CAACkT,KAAR,GAAgB1B,UAAjB,MAAiCR,OAA1D;AAEA,YAAI4gC,YAAY,GAAGlyB,gBAAgB,CACjCuM,WADiC,EAEjC1E,cAAc,CAAC2E,UAFkB,CAAnC;;AAqBA,YAAI8kB,gBAAJ,EAAsB;AACpB,cAAIY,YAAJ,EAAkB;AAChB;AACA;AACA;AACA;AACA;AACA,mBAAOf,2BAA2B,CAChC7wC,OADgC,EAEhCunB,cAFgC,EAGhC0E,WAHgC,CAAlC;AAKD,WAZmB;AAcpB;AACA;;;AACA1E,UAAAA,cAAc,CAACrU,KAAf,IAAwB1B,UAAxB;AACD,SAzCyB;AA4C1B;AACA;;;AACA,cAAMy3B,WAAW,GAAG1hB,cAAc,CAAC6G,aAAnC;;AACA,YAAI6a,WAAW,KAAK,IAApB,EAA0B;AACxB;AACA;AACAA,UAAAA,WAAW,CAAC4B,SAAZ,GAAwB,IAAxB;AACA5B,UAAAA,WAAW,CAACI,IAAZ,GAAmB,IAAnB;AACAJ,UAAAA,WAAW,CAAC5L,UAAZ,GAAyB,IAAzB;AACD;;AACDzD,QAAAA,mBAAmB,CAACrS,cAAD,EAAiB6R,mBAAmB,CAACp5B,OAArC,CAAnB;;AAEA,YAAI4xC,YAAJ,EAAkB;AAChB;AACD,SAFD,MAEO;AACL;AACA;AACA;AACA,iBAAO,IAAP;AACD;AACF;;AACD,SAAK/vC,kBAAL;AACA,SAAKC,qBAAL;AAA4B;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAylB,QAAAA,cAAc,CAACtK,KAAf,GAAuBzC,OAAvB;AACA,eAAOmyB,wBAAwB,CAAC3sC,OAAD,EAAUunB,cAAV,EAA0B0E,WAA1B,CAA/B;AACD;AA7LH;;AAsMA,SAAOggB,4BAA4B,CAACjsC,OAAD,EAAUunB,cAAV,EAA0B0E,WAA1B,CAAnC;AACD;;AAED,SAAS4lB,SAAT,CACE7xC,OADF,EAEEunB,cAFF,EAGE0E,WAHF,EAIgB;AACd;AAkBA,MAAIjsB,OAAO,KAAK,IAAhB,EAAsB;AACpB,UAAM0jB,QAAQ,GAAG1jB,OAAO,CAAC4yB,aAAzB;AACA,UAAMjP,QAAQ,GAAG4D,cAAc,CAAC6L,YAAhC;;AAEA,QACE1P,QAAQ,KAAKC,QAAb,IACA4tB,iBAAuB,EADvB;AAGC1mB,IAAAA,CAAiD,KAHlD,CADF,EAKE;AACA;AACA;AACA+gB,MAAAA,gBAAgB,GAAG,IAAnB;AACD,KATD,MASO;AACL;AACA;AACA,YAAMY,2BAA2B,GAAGC,6BAA6B,CAC/DzsC,OAD+D,EAE/DisB,WAF+D,CAAjE;;AAIA,UACE,CAACugB,2BAAD;AAEA;AACA,OAACjlB,cAAc,CAACrU,KAAf,GAAuB1B,UAAxB,MAAwCR,OAJ1C,EAKE;AACA;AACA46B,QAAAA,gBAAgB,GAAG,KAAnB;AACA,eAAO8F,sCAAsC,CAC3C1xC,OAD2C,EAE3CunB,cAF2C,EAG3C0E,WAH2C,CAA7C;AAKD;;AACD,UAAI,CAACjsB,OAAO,CAACkT,KAAR,GAAgBf,4BAAjB,MAAmDnB,OAAvD,EAAgE;AAC9D;AACA;AACA46B,QAAAA,gBAAgB,GAAG,IAAnB;AACD,OAJD,MAIO;AACL;AACA;AACA;AACA;AACAA,QAAAA,gBAAgB,GAAG,KAAnB;AACD;AACF;AACF,GA9CD,MA8CO;AACLA,IAAAA,gBAAgB,GAAG,KAAnB;AACD,GAnEa;AAsEd;AACA;AACA;AACA;;;AACArkB,EAAAA,cAAc,CAACtK,KAAf,GAAuBzC,OAAvB;;AAEA,UAAQ+M,cAAc,CAAC1jB,GAAvB;AACE,SAAKnD,sBAAL;AAA6B;AAC3B,eAAO4tC,2BAA2B,CAChCtuC,OADgC,EAEhCunB,cAFgC,EAGhCA,cAAc,CAAC/uB,IAHiB,EAIhCyzB,WAJgC,CAAlC;AAMD;;AACD,SAAKzqB,aAAL;AAAoB;AAClB,cAAM0xB,WAAW,GAAG3L,cAAc,CAAC2L,WAAnC;AACA,eAAO6a,kBAAkB,CACvB/tC,OADuB,EAEvBunB,cAFuB,EAGvB2L,WAHuB,EAIvBjH,WAJuB,CAAzB;AAMD;;AACD,SAAKzrB,iBAAL;AAAwB;AACtB,cAAMgnB,SAAS,GAAGD,cAAc,CAAC/uB,IAAjC;AACA,cAAMs5C,eAAe,GAAGvqB,cAAc,CAAC6L,YAAvC;AACA,cAAM+a,aAAa,GACjB5mB,cAAc,CAAC2L,WAAf,KAA+B1L,SAA/B,GACIsqB,eADJ,GAEI3mB,mBAAmB,CAAC3D,SAAD,EAAYsqB,eAAZ,CAHzB;AAIA,eAAOpF,uBAAuB,CAC5B1sC,OAD4B,EAE5BunB,cAF4B,EAG5BC,SAH4B,EAI5B2mB,aAJ4B,EAK5BliB,WAL4B,CAA9B;AAOD;;AACD,SAAKxrB,cAAL;AAAqB;AACnB,cAAM+mB,SAAS,GAAGD,cAAc,CAAC/uB,IAAjC;AACA,cAAMs5C,eAAe,GAAGvqB,cAAc,CAAC6L,YAAvC;AACA,cAAM+a,aAAa,GACjB5mB,cAAc,CAAC2L,WAAf,KAA+B1L,SAA/B,GACIsqB,eADJ,GAEI3mB,mBAAmB,CAAC3D,SAAD,EAAYsqB,eAAZ,CAHzB;AAIA,eAAOzE,oBAAoB,CACzBrtC,OADyB,EAEzBunB,cAFyB,EAGzBC,SAHyB,EAIzB2mB,aAJyB,EAKzBliB,WALyB,CAA3B;AAOD;;AACD,SAAKtrB,QAAL;AACE,aAAOitC,cAAc,CAAC5tC,OAAD,EAAUunB,cAAV,EAA0B0E,WAA1B,CAArB;;AACF,SAAKprB,aAAL;AACE,aAAO8nC,qBAAmB,CAAC3oC,OAAD,EAAUunB,cAAV,EAA0B0E,WAA1B,CAA1B;;AACF,SAAKnrB,QAAL;AACE,aAAO8nC,gBAAc,CAAC5oC,AAAD,CAArB;;AACF,SAAKqB,iBAAL;AACE,aAAO0tC,uBAAuB,CAAC/uC,OAAD,EAAUunB,cAAV,EAA0B0E,WAA1B,CAA9B;;AACF,SAAKrrB,UAAL;AACE,aAAOswC,qBAAqB,CAAClxC,OAAD,EAAUunB,cAAV,EAA0B0E,WAA1B,CAA5B;;AACF,SAAK9qB,UAAL;AAAiB;AACf,cAAM3I,IAAI,GAAG+uB,cAAc,CAAC/uB,IAA5B;AACA,cAAMs5C,eAAe,GAAGvqB,cAAc,CAAC6L,YAAvC;AACA,cAAM+a,aAAa,GACjB5mB,cAAc,CAAC2L,WAAf,KAA+B16B,IAA/B,GACIs5C,eADJ,GAEI3mB,mBAAmB,CAAC3yB,IAAD,EAAOs5C,eAAP,CAHzB;AAIA,eAAO9F,gBAAgB,CACrBhsC,OADqB,EAErBunB,cAFqB,EAGrB/uB,IAHqB,EAIrB21C,aAJqB,EAKrBliB,WALqB,CAAvB;AAOD;;AACD,SAAKlrB,QAAL;AACE,aAAOk1B,cAAc,CAACj2B,OAAD,EAAUunB,cAAV,EAA0B0E,WAA1B,CAArB;;AACF,SAAKjrB,IAAL;AACE,aAAOmsC,UAAU,CAACntC,OAAD,EAAUunB,cAAV,EAA0B0E,WAA1B,CAAjB;;AACF,SAAK7qB,QAAL;AACE,aAAOgsC,cAAc,CAACptC,OAAD,EAAUunB,cAAV,EAA0B0E,WAA1B,CAArB;;AACF,SAAK/qB,eAAL;AACE,aAAOiwC,qBAAqB,CAACnxC,OAAD,EAAUunB,cAAV,EAA0B0E,WAA1B,CAA5B;;AACF,SAAKhrB,eAAL;AACE,aAAOuwC,qBAAqB,CAACxxC,OAAD,EAAUunB,cAAV,EAA0B0E,WAA1B,CAA5B;;AACF,SAAK3qB,aAAL;AAAoB;AAClB,cAAM9I,IAAI,GAAG+uB,cAAc,CAAC/uB,IAA5B;AACA,cAAMs5C,eAAe,GAAGvqB,cAAc,CAAC6L,YAAvC,CAFkB;;AAIlB,YAAI+a,aAAa,GAAGhjB,mBAAmB,CAAC3yB,IAAD,EAAOs5C,eAAP,CAAvC;;AAcA3D,QAAAA,aAAa,GAAGhjB,mBAAmB,CAAC3yB,IAAI,CAACA,IAAN,EAAY21C,aAAZ,CAAnC;AACA,eAAOjC,mBAAmB,CACxBlsC,OADwB,EAExBunB,cAFwB,EAGxB/uB,IAHwB,EAIxB21C,aAJwB,EAKxBliB,WALwB,CAA1B;AAOD;;AACD,SAAK1qB,mBAAL;AAA0B;AACxB,eAAO+qC,yBAAyB,CAC9BtsC,OAD8B,EAE9BunB,cAF8B,EAG9BA,cAAc,CAAC/uB,IAHe,EAI9B+uB,cAAc,CAAC6L,YAJe,EAK9BnH,WAL8B,CAAhC;AAOD;;AACD,SAAKxqB,wBAAL;AAA+B;AAC7B,cAAM+lB,SAAS,GAAGD,cAAc,CAAC/uB,IAAjC;AACA,cAAMs5C,eAAe,GAAGvqB,cAAc,CAAC6L,YAAvC;AACA,cAAM+a,aAAa,GACjB5mB,cAAc,CAAC2L,WAAf,KAA+B1L,SAA/B,GACIsqB,eADJ,GAEI3mB,mBAAmB,CAAC3D,SAAD,EAAYsqB,eAAZ,CAHzB;AAIA,eAAOzD,6BAA6B,CAClCruC,OADkC,EAElCunB,cAFkC,EAGlCC,SAHkC,EAIlC2mB,aAJkC,EAKlCliB,WALkC,CAApC;AAOD;;AACD,SAAKtqB,qBAAL;AAA4B;AAC1B,eAAOkvC,2BAA2B,CAAC7wC,OAAD,EAAUunB,cAAV,EAA0B0E,WAA1B,CAAlC;AACD;;AACD,SAAKrqB,cAAL;AAAqB;AACnB;AAGA;AACD;;AACD,SAAKC,kBAAL;AAAyB;AACvB,eAAO8qC,wBAAwB,CAAC3sC,OAAD,EAAUunB,cAAV,EAA0B0E,WAA1B,CAA/B;AACD;;AACD,SAAKnqB,qBAAL;AAA4B;AAC1B,eAAOorC,2BAA2B,CAACltC,OAAD,EAAUunB,cAAV,EAA0B0E,WAA1B,CAAlC;AACD;AApJH;;AA5Ec;AAAA,+CA4OZ1E,cAAc,CAAC1jB,GA5OH;AAAA;AA8Of;;ACvsHD,SAASkuC,UAAT,CAAoBxqB,cAApB,EAA2C0E,WAA3C,EAA+D;AAC7D,UAAQ1E,cAAc,CAAC1jB,GAAvB;AACE,SAAKpD,cAAL;AAAqB;AACnB,cAAM+mB,SAAS,GAAGD,cAAc,CAAC/uB,IAAjC;;AACA,YAAIqxC,iBAAuB,CAACriB,SAAD,CAA3B,EAAwC;AACtCsiB,UAAAA,UAAgB,CAACviB,AAAD,CAAhB;AACD;;AACD,cAAMrU,KAAK,GAAGqU,cAAc,CAACrU,KAA7B;;AACA,YAAIA,KAAK,GAAGhB,aAAZ,EAA2B;AACzBqV,UAAAA,cAAc,CAACrU,KAAf,GAAwBA,KAAK,GAAG,CAAChB,aAAV,GAA2BV,UAAlD;;AAOA,iBAAO+V,cAAP;AACD;;AACD,eAAO,IAAP;AACD;;AACD,SAAK5mB,QAAL;AAAe;AACb;AAOAi4B,QAAAA,gBAAgB,CAACrR,AAAD,CAAhB;AACAyiB,QAAAA,wBAA8B,CAACziB,AAAD,CAA9B;AACA0iB,QAAAA,2BAAwC;AACxC,cAAM/2B,KAAK,GAAGqU,cAAc,CAACrU,KAA7B;;AAXa,cAaX,CAACA,KAAK,GAAG1B,UAAT,MAAyBR,OAbd;AAAA;AAAA;;AAiBbuW,QAAAA,cAAc,CAACrU,KAAf,GAAwBA,KAAK,GAAG,CAAChB,aAAV,GAA2BV,UAAlD;AACA,eAAO+V,cAAP;AACD;;AACD,SAAK1mB,aAAL;AAAoB;AAClB;AACAk4B,QAAAA,cAAc,CAACxR,cAAD,CAAd;AACA,eAAO,IAAP;AACD;;AACD,SAAKlmB,iBAAL;AAAwB;AACtBy4B,QAAAA,kBAAkB,CAACvS,AAAD,CAAlB;;AAaA,cAAMrU,KAAK,GAAGqU,cAAc,CAACrU,KAA7B;;AACA,YAAIA,KAAK,GAAGhB,aAAZ,EAA2B;AACzBqV,UAAAA,cAAc,CAACrU,KAAf,GAAwBA,KAAK,GAAG,CAAChB,aAAV,GAA2BV,UAAlD,CADyB;;AASzB,iBAAO+V,cAAP;AACD;;AACD,eAAO,IAAP;AACD;;AACD,SAAK5lB,qBAAL;AAA4B;AAC1Bm4B,QAAAA,kBAAkB,CAACvS,AAAD,CAAlB,CAD0B;AAG1B;;AACA,eAAO,IAAP;AACD;;AACD,SAAK3mB,UAAL;AACEg4B,MAAAA,gBAAgB,CAACrR,AAAD,CAAhB;AACA,aAAO,IAAP;;AACF,SAAKrmB,eAAL;AACE,YAAMjL,OAA0B,GAAGsxB,cAAc,CAAC/uB,IAAf,CAAoBuX,QAAvD;AACA+b,MAAAA,WAAW,CAAC71B,OAAD,AAAA,CAAX;AACA,aAAO,IAAP;;AACF,SAAK4L,kBAAL;AACA,SAAKC,qBAAL;AACE0pC,MAAAA,cAAc,CAACjkB,AAAD,CAAd;;AAOA,aAAO,IAAP;;AACF,SAAKxlB,cAAL;AACE;AAIA,aAAO,IAAP;;AACF;AACE,aAAO,IAAP;AAtGJ;AAwGD;;AAED,SAASiwC,qBAAT,CAA+BC,eAA/B,EAAuDhmB,WAAvD,EAA2E;AACzE,UAAQgmB,eAAe,CAACpuC,GAAxB;AACE,SAAKpD,cAAL;AAAqB;AACnB,cAAM0nB,iBAAiB,GAAG8pB,eAAe,CAACz5C,IAAhB,CAAqB2vB,iBAA/C;;AACA,YAAIA,iBAAiB,KAAK,IAAtB,IAA8BA,iBAAiB,KAAKzvB,SAAxD,EAAmE;AACjEoxC,UAAAA,UAAgB,CAACmI,AAAD,CAAhB;AACD;;AACD;AACD;;AACD,SAAKtxC,QAAL;AAAe;AACb;AAOAi4B,QAAAA,gBAAgB,CAACqZ,AAAD,CAAhB;AACAjI,QAAAA,wBAA8B,CAACiI,AAAD,CAA9B;AACAhI,QAAAA,2BAAwC;AACxC;AACD;;AACD,SAAKppC,aAAL;AAAoB;AAClBk4B,QAAAA,cAAc,CAACkZ,eAAD,CAAd;AACA;AACD;;AACD,SAAKrxC,UAAL;AACEg4B,MAAAA,gBAAgB,CAACqZ,AAAD,CAAhB;AACA;;AACF,SAAK5wC,iBAAL;AACEy4B,MAAAA,kBAAkB,CAACmY,AAAD,CAAlB;AACA;;AACF,SAAKtwC,qBAAL;AACEm4B,MAAAA,kBAAkB,CAACmY,AAAD,CAAlB;AACA;;AACF,SAAK/wC,eAAL;AACE,YAAMjL,OAA0B,GAAGg8C,eAAe,CAACz5C,IAAhB,CAAqBuX,QAAxD;AACA+b,MAAAA,WAAW,CAAC71B,OAAD,AAAA,CAAX;AACA;;AACF,SAAK4L,kBAAL;AACA,SAAKC,qBAAL;AACE0pC,MAAAA,cAAc,CAACyG,AAAD,CAAd;;AAQA;AAhDJ;AA0DD;;AClED,MAAMC,eAAe,GAAG,OAAOC,OAAP,KAAmB,UAAnB,GAAgCA,OAAhC,GAA0C3K,GAAlE;AAEA,IAAI4K,UAAwB,GAAG,IAA/B;;AAoBA,MAAMC,iCAAiC,GAAG,UAASryC,OAAT,EAAkB1D,QAAlB,EAA4B;AACpEA,EAAAA,QAAQ,CAACwI,KAAT,GAAiB9E,OAAO,CAAC4yB,aAAzB;AACAt2B,EAAAA,QAAQ,CAAC01B,KAAT,GAAiBhyB,OAAO,CAACouB,aAAzB;;AACA,EAWO;AACL9xB,IAAAA,QAAQ,CAACg2C,oBAAT;AACD;AACF,CAjBD;;;AAiCA,SAASC,8BAAT,CACEvyC,OADF,EAEEwyC,sBAFF,EAGEl2C,QAHF,EAIE;AACA,MAAI;AACF+1C,IAAAA,iCAAiC,CAACryC,OAAD,EAAU1D,QAAV,CAAjC;AACD,GAFD,CAEE,OAAOvF,KAAP,EAAc;AACd07C,AACAC,IAAAA,uBAAuB,CAAC1yC,OAAD,EAAUwyC,sBAAV,EAAkCz7C,KAAlC,CAAvB;AACD;AACF;;AA0BD,SAAS47C,eAAT,CAAyB3yC,OAAzB,EAAyCwyC,sBAAzC,EAA+E;AAC7E,QAAM3e,GAAG,GAAG7zB,OAAO,CAAC6zB,GAApB;;AACA,MAAIA,GAAG,KAAK,IAAZ,EAAkB;AAChB,QAAI,OAAOA,GAAP,KAAe,UAAnB,EAA+B;AAC7B,UAAI;AACF,YACEnjB,mBAAmB,IACnBE,yBADA,IAEA5Q,OAAO,CAAC81B,IAAR,GAAe1b,WAHjB,EAIE;AACA,cAAI;AACFsrB,YAAAA,sBAAsB;AACtB7R,YAAAA,GAAG,CAAC,IAAD,CAAH;AACD,WAHD,SAGU;AACR4R,YAAAA,0BAA0B,CAACzlC,OAAD,CAA1B;AACD;AACF,SAXD,MAWO;AACL6zB,UAAAA,GAAG,CAAC,IAAD,CAAH;AACD;AACF,OAfD,CAeE,OAAO98B,KAAP,EAAc;AACd07C,AACAC,QAAAA,uBAAuB,CAAC1yC,OAAD,EAAUwyC,sBAAV,EAAkCz7C,KAAlC,CAAvB;AACD;AACF,KApBD,MAoBO;AACL88B,MAAAA,GAAG,CAAC7zB,OAAJ,GAAc,IAAd;AACD;AACF;AACF;;AAED,SAAS4yC,iBAAT,CACE5yC,OADF,EAEEwyC,sBAFF,EAGEhR,OAHF,EAIE;AACA,MAAI;AACFA,IAAAA,OAAO;AACR,GAFD,CAEE,OAAOzqC,KAAP,EAAc;AACd07C,AACAC,IAAAA,uBAAuB,CAAC1yC,OAAD,EAAUwyC,sBAAV,EAAkCz7C,KAAlC,CAAvB;AACD;AACF;;AAED,IAAI87C,qBAAmC,GAAG,IAA1C;AACA,IAAIC,iCAA0C,GAAG,KAAjD;AAEA,AAAO,SAASC,2BAAT,CACL95B,IADK,EAELu3B,UAFK,EAGL;AACAqC,EAAAA,qBAAqB,GAAGtvB,gBAAgB,CAACtK,IAAI,CAACuK,aAAN,CAAxC;AAEA4uB,EAAAA,UAAU,GAAG5B,UAAb;AACAwC,EAAAA,iCAAiC,GAJjC;;AAOA,QAAMC,UAAU,GAAGH,iCAAnB;AACAA,EAAAA,iCAAiC,GAAG,KAApC;AACAD,EAAAA,qBAAqB,GAAG,IAAxB;AAEA,SAAOI,UAAP;AACD;;AAED,SAASD,iCAAT,GAA6C;AAC3C,SAAOZ,UAAU,KAAK,IAAtB,EAA4B;AAC1B,UAAM3hC,KAAK,GAAG2hC,UAAd,CAD0B;AAI1B;AAYA,UAAMx+B,KAAK,GAAGnD,KAAK,CAACmD,KAApB;;AACA,QACE,CAACnD,KAAK,CAACk5B,YAAN,GAAqBp3B,kBAAtB,MAA8CvB,OAA9C,IACA4C,KAAK,KAAK,IAFZ,EAGE;AACAs/B,MAAAA,0BAA0B,CAACt/B,KAAD,EAAQnD,KAAR,CAA1B;AACA2hC,MAAAA,UAAU,GAAGx+B,KAAb;AACD,KAND,MAMO;AACLu/B,MAAAA,oCAAoC;AACrC;AACF;AACF;;AAED,SAASA,oCAAT,GAAgD;AAC9C,SAAOf,UAAU,KAAK,IAAtB,EAA4B;AAC1B,UAAM3hC,KAAK,GAAG2hC,UAAd;AACAgB;AACA,QAAI;AACFC,MAAAA,kCAAkC,CAAC5iC,KAAD,CAAlC;AACD,KAFD,CAEE,OAAO1Z,KAAP,EAAc;AACd07C,AACAC,MAAAA,uBAAuB,CAACjiC,KAAD,EAAQA,KAAK,CAAC7M,MAAd,EAAsB7M,KAAtB,CAAvB;AACD;AAGD,UAAM8c,OAAO,GAAGpD,KAAK,CAACoD,OAAtB;;AACA,QAAIA,OAAO,KAAK,IAAhB,EAAsB;AACpBq/B,MAAAA,0BAA0B,CAACr/B,OAAD,EAAUpD,KAAK,CAAC7M,MAAhB,CAA1B;AACAwuC,MAAAA,UAAU,GAAGv+B,OAAb;AACA;AACD;;AAEDu+B,IAAAA,UAAU,GAAG3hC,KAAK,CAAC7M,MAAnB;AACD;AACF;;AAED,SAASyvC,kCAAT,CAA4C9iB,YAA5C,EAAiE;AAC/D,QAAMvwB,OAAO,GAAGuwB,YAAY,CAACjsB,SAA7B;AACA,QAAM4O,KAAK,GAAGqd,YAAY,CAACrd,KAA3B;;AAiBA,MAAI,CAACA,KAAK,GAAGxB,QAAT,MAAuBV,OAA3B,EAAoC;AAClCoiC;AAEA,YAAQ7iB,YAAY,CAAC1sB,GAArB;AACE,WAAKrD,iBAAL;AACA,WAAKW,UAAL;AACA,WAAKI,mBAAL;AAA0B;AACxB;AACD;;AACD,WAAKd,cAAL;AAAqB;AACnB,cAAIT,OAAO,KAAK,IAAhB,EAAsB;AACpB,kBAAMiW,SAAS,GAAGjW,OAAO,CAAC4yB,aAA1B;AACA,kBAAMvD,SAAS,GAAGrvB,OAAO,CAACouB,aAA1B;AACA,kBAAM9xB,QAAQ,GAAGi0B,YAAY,CAAC1rB,SAA9B,CAHoB;AAKpB;AA6BA,kBAAMu6B,QAAQ,GAAG9iC,QAAQ,CAACk2B,uBAAT,CACfjC,YAAY,CAAC2C,WAAb,KAA6B3C,YAAY,CAAC/3B,IAA1C,GACIyd,SADJ,GAEIkV,mBAAmB,CAACoF,YAAY,CAAC/3B,IAAd,EAAoByd,SAApB,CAHR,EAIfoZ,SAJe,CAAjB;;AAiBA/yB,YAAAA,QAAQ,CAACg3C,mCAAT,GAA+ClU,QAA/C;AACD;;AACD;AACD;;AACD,WAAKz+B,QAAL;AAAe;AACb,UAAsB;AACpB,kBAAMsY,IAAI,GAAGsX,YAAY,CAAC1rB,SAA1B;AACAghB,YAAAA,cAAc,CAAC5M,IAAI,CAACuK,aAAN,CAAd;AACD;;AACD;AACD;;AACD,WAAK3iB,aAAL;AACA,WAAKC,QAAL;AACA,WAAKF,UAAL;AACA,WAAKa,wBAAL;AACE;AACA;;AACF;AAAS;AAAA;AAAA;AAAA;AAMR;AAjFH;AAqFD;AACF;;AAeD,SAAS8xC,2BAAT,CACErgC,KADF,EAEEqd,YAFF,EAGEiiB,sBAHF,EAIE;AACA,QAAM5lB,WAAgD,GAAI2D,YAAY,CAAC3D,WAAvE;AACA,QAAMyQ,UAAU,GAAGzQ,WAAW,KAAK,IAAhB,GAAuBA,WAAW,CAACyQ,UAAnC,GAAgD,IAAnE;;AACA,MAAIA,UAAU,KAAK,IAAnB,EAAyB;AACvB,UAAMsE,WAAW,GAAGtE,UAAU,CAACp9B,IAA/B;AACA,QAAIwwB,MAAM,GAAGkR,WAAb;;AACA,OAAG;AACD,UAAI,CAAClR,MAAM,CAAC5sB,GAAP,GAAaqP,KAAd,MAAyBA,KAA7B,EAAoC;AAClC;AACA,cAAMsuB,OAAO,GAAG/Q,MAAM,CAAC+Q,OAAvB;AACA/Q,QAAAA,MAAM,CAAC+Q,OAAP,GAAiB9oC,SAAjB;;AACA,YAAI8oC,OAAO,KAAK9oC,SAAhB,EAA2B;AACzBk6C,UAAAA,iBAAiB,CAACriB,YAAD,EAAeiiB,sBAAf,EAAuChR,OAAvC,CAAjB;AACD;AACF;;AACD/Q,MAAAA,MAAM,GAAGA,MAAM,CAACxwB,IAAhB;AACD,KAVD,QAUSwwB,MAAM,KAAKkR,WAVpB;AAWD;AACF;;AAED,SAAS6R,yBAAT,CAAmC3vC,GAAnC,EAAgD0sB,YAAhD,EAAqE;AACnE,QAAM3D,WAAgD,GAAI2D,YAAY,CAAC3D,WAAvE;AACA,QAAMyQ,UAAU,GAAGzQ,WAAW,KAAK,IAAhB,GAAuBA,WAAW,CAACyQ,UAAnC,GAAgD,IAAnE;;AACA,MAAIA,UAAU,KAAK,IAAnB,EAAyB;AACvB,UAAMsE,WAAW,GAAGtE,UAAU,CAACp9B,IAA/B;AACA,QAAIwwB,MAAM,GAAGkR,WAAb;;AACA,OAAG;AACD,UAAI,CAAClR,MAAM,CAAC5sB,GAAP,GAAaA,GAAd,MAAuBA,GAA3B,EAAgC;AAC9B;AACA,cAAMuS,MAAM,GAAGqa,MAAM,CAACra,MAAtB;AACAqa,QAAAA,MAAM,CAAC+Q,OAAP,GAAiBprB,MAAM,EAAvB;AAkCD;;AACDqa,MAAAA,MAAM,GAAGA,MAAM,CAACxwB,IAAhB;AACD,KAxCD,QAwCSwwB,MAAM,KAAKkR,WAxCpB;AAyCD;AACF;;AAsDD,SAAS8R,yBAAT,CACEC,YADF,EAEE1zC,OAFF,EAGEuwB,YAHF,EAIEojB,cAJF,EAKQ;AACN,MAAI,CAACpjB,YAAY,CAACrd,KAAb,GAAqBR,UAAtB,MAAsC1B,OAA1C,EAAmD;AACjD,YAAQuf,YAAY,CAAC1sB,GAArB;AACE,WAAKrD,iBAAL;AACA,WAAKW,UAAL;AACA,WAAKI,mBAAL;AAA0B;AACxB,UAGE;AACA;AACA;AACA;AACA;AACA,YAcO;AACLiyC,cAAAA,yBAAyB,CAAC/Q,MAAU,GAAGR,SAAd,EAA6B1R,YAA7B,CAAzB;AACD;AACF;;AACD;AACD;;AACD,WAAK9vB,cAAL;AAAqB;AACnB,gBAAMnE,QAAQ,GAAGi0B,YAAY,CAAC1rB,SAA9B;;AACA,cAAI0rB,YAAY,CAACrd,KAAb,GAAqB/B,MAAzB,EAAiC;AAC/B,YAAgC;AAC9B,kBAAInR,OAAO,KAAK,IAAhB,EAAsB;AACpB;AA8BA,gBAWO;AACL1D,kBAAAA,QAAQ,CAACm2B,iBAAT;AACD;AACF,eA7CD,MA6CO;AACL,sBAAMxc,SAAS,GACbsa,YAAY,CAAC2C,WAAb,KAA6B3C,YAAY,CAAC/3B,IAA1C,GACIwH,OAAO,CAAC4yB,aADZ,GAEIzH,mBAAmB,CACjBoF,YAAY,CAAC/3B,IADI,EAEjBwH,OAAO,CAAC4yB,aAFS,CAHzB;AAOA,sBAAMvD,SAAS,GAAGrvB,OAAO,CAACouB,aAA1B,CARK;AAUL;AA6BA,gBAeO;AACL9xB,kBAAAA,QAAQ,CAACg3B,kBAAT,CACErd,SADF,EAEEoZ,SAFF,EAGE/yB,QAAQ,CAACg3C,mCAHX;AAKD;AACF;AACF;AACF,WAhHkB;AAmHnB;;;AACA,gBAAM1mB,WAEE,GAAI2D,YAAY,CAAC3D,WAFzB;;AAGA,cAAIA,WAAW,KAAK,IAApB,EAA0B;AACxB,AA4BA;AACA;;;AACA0D,YAAAA,iBAAiB,CAACC,YAAD,EAAe3D,WAAf,EAA4BtwB,QAA5B,CAAjB;AACD;;AACD;AACD;;AACD,WAAKqE,QAAL;AAAe;AACb;AACA;AACA,gBAAMisB,WAEE,GAAI2D,YAAY,CAAC3D,WAFzB;;AAGA,cAAIA,WAAW,KAAK,IAApB,EAA0B;AACxB,gBAAItwB,QAAQ,GAAG,IAAf;;AACA,gBAAIi0B,YAAY,CAAC3c,KAAb,KAAuB,IAA3B,EAAiC;AAC/B,sBAAQ2c,YAAY,CAAC3c,KAAb,CAAmB/P,GAA3B;AACE,qBAAKhD,aAAL;AACEvE,kBAAAA,QAAQ,GAAGgnB,iBAAiB,CAACiN,YAAY,CAAC3c,KAAb,CAAmB/O,SAApB,CAA5B;AACA;;AACF,qBAAKpE,cAAL;AACEnE,kBAAAA,QAAQ,GAAGi0B,YAAY,CAAC3c,KAAb,CAAmB/O,SAA9B;AACA;AANJ;AAQD;;AACDyrB,YAAAA,iBAAiB,CAACC,YAAD,EAAe3D,WAAf,EAA4BtwB,QAA5B,CAAjB;AACD;;AACD;AACD;;AACD,WAAKuE,aAAL;AAAoB;AAClB,gBAAMvE,QAAkB,GAAGi0B,YAAY,CAAC1rB,SAAxC,CADkB;AAIlB;AACA;AACA;;AACA,cAAI7E,OAAO,KAAK,IAAZ,IAAoBuwB,YAAY,CAACrd,KAAb,GAAqB/B,MAA7C,EAAqD;AACnD,kBAAM3Y,IAAI,GAAG+3B,YAAY,CAAC/3B,IAA1B;AACA,kBAAMsM,KAAK,GAAGyrB,YAAY,CAACqC,aAA3B;AACAghB,AACD;;AAED;AACD;;AACD,WAAK9yC,QAAL;AAAe;AACb;AACA;AACD;;AACD,WAAKF,UAAL;AAAiB;AACf;AACA;AACD;;AACD,WAAKQ,QAAL;AAAe;AACb;AAyDA;AACD;;AACD,WAAKC,iBAAL;AAAwB;AACtBwyC,AACA;AACD;;AACD,WAAKlyC,qBAAL;AACA,WAAKF,wBAAL;AACA,WAAKG,cAAL;AACA,WAAKC,kBAAL;AACA,WAAKC,qBAAL;AACE;;AACF;AAAA;AAAA;AAAA;;AA7SF;AAoTD;;AAED,EAAwE;AACtE,IAMO;AACL,UAAIyuB,YAAY,CAACrd,KAAb,GAAqBzB,GAAzB,EAA8B;AAC5BqiC,QAAAA,eAAe,CAACvjB,YAAD,CAAf;AACD;AACF;AACF;AACF;;AAwCD,SAASwjB,uBAAT,CAAiCxjB,YAAjC,EAA+CuY,QAA/C,EAAyD;AACvD;AACA,MAAIkL,eAAe,GAAG,IAAtB;;AAEA,EAAsB;AACpB;AACA;AACA,QAAIjhC,IAAW,GAAGwd,YAAlB;;AACA,WAAO,IAAP,EAAa;AACX,UAAIxd,IAAI,CAAClP,GAAL,KAAahD,aAAjB,EAAgC;AAC9B,YAAImzC,eAAe,KAAK,IAAxB,EAA8B;AAC5BA,UAAAA,eAAe,GAAGjhC,IAAlB;AAEA,gBAAMzW,QAAQ,GAAGyW,IAAI,CAAClO,SAAtB;;AACA,cAAIikC,QAAJ,EAAc;AACZvjB,YAAAA,YAAY,CAACjpB,QAAD,CAAZ;AACD,WAFD,MAEO;AACLspB,YAAAA,cAAc,CAAC7S,IAAI,CAAClO,SAAN,EAAiBkO,IAAI,CAAC6f,aAAtB,CAAd;AACD;AACF;AACF,OAXD,MAWO,IAAI7f,IAAI,CAAClP,GAAL,KAAa/C,QAAjB,EAA2B;AAChC,YAAIkzC,eAAe,KAAK,IAAxB,EAA8B;AAC5B,gBAAM13C,QAAQ,GAAGyW,IAAI,CAAClO,SAAtB;;AACA,cAAIikC,QAAJ,EAAc;AACZpjB,YAAAA,gBAAgB,CAACppB,AAAD,CAAhB;AACD,WAFD,MAEO;AACLypB,YAAAA,kBAAkB,CAACzpB,QAAD,EAAWyW,IAAI,CAAC6f,aAAhB,CAAlB;AACD;AACF;AACF,OATM,MASA,IACL,CAAC7f,IAAI,CAAClP,GAAL,KAAahC,kBAAb,IACCkR,IAAI,CAAClP,GAAL,KAAa/B,qBADf,KAECiR,IAAI,CAACqb,aAAN,KAAyC,IAFzC,IAGArb,IAAI,KAAKwd,YAJJ,EAKL,CALK,MAQA,IAAIxd,IAAI,CAACa,KAAL,KAAe,IAAnB,EAAyB;AAC9Bb,QAAAA,IAAI,CAACa,KAAL,CAAWhQ,MAAX,GAAoBmP,IAApB;AACAA,QAAAA,IAAI,GAAGA,IAAI,CAACa,KAAZ;AACA;AACD;;AAED,UAAIb,IAAI,KAAKwd,YAAb,EAA2B;AACzB;AACD;;AACD,aAAOxd,IAAI,CAACc,OAAL,KAAiB,IAAxB,EAA8B;AAC5B,YAAId,IAAI,CAACnP,MAAL,KAAgB,IAAhB,IAAwBmP,IAAI,CAACnP,MAAL,KAAgB2sB,YAA5C,EAA0D;AACxD;AACD;;AAED,YAAIyjB,eAAe,KAAKjhC,IAAxB,EAA8B;AAC5BihC,UAAAA,eAAe,GAAG,IAAlB;AACD;;AAEDjhC,QAAAA,IAAI,GAAGA,IAAI,CAACnP,MAAZ;AACD;;AAED,UAAIowC,eAAe,KAAKjhC,IAAxB,EAA8B;AAC5BihC,QAAAA,eAAe,GAAG,IAAlB;AACD;;AAEDjhC,MAAAA,IAAI,CAACc,OAAL,CAAajQ,MAAb,GAAsBmP,IAAI,CAACnP,MAA3B;AACAmP,MAAAA,IAAI,GAAGA,IAAI,CAACc,OAAZ;AACD;AACF;AACF;;AAED,SAASigC,eAAT,CAAyBvjB,YAAzB,EAA8C;AAC5C,QAAMsD,GAAG,GAAGtD,YAAY,CAACsD,GAAzB;;AACA,MAAIA,GAAG,KAAK,IAAZ,EAAkB;AAChB,UAAMv3B,QAAQ,GAAGi0B,YAAY,CAAC1rB,SAA9B;AACA,QAAIovC,aAAJ;;AACA,YAAQ1jB,YAAY,CAAC1sB,GAArB;AACE,WAAKhD,aAAL;AACEozC,QAAAA,aAAa,GAAG3wB,iBAAiB,CAAChnB,QAAD,CAAjC;AACA;;AACF;AACE23C,QAAAA,aAAa,GAAG33C,QAAhB;AALJ,KAHgB;;AAchB,QAAI,OAAOu3B,GAAP,KAAe,UAAnB,EAA+B;AAC7B,MAWO;AACLA,QAAAA,GAAG,CAACogB,aAAD,CAAH;AACD;AACF,KAfD,MAeO;AACL;AAUApgB,MAAAA,GAAG,CAAC7zB,OAAJ,GAAci0C,aAAd;AACD;AACF;AACF;;AAED,SAASC,eAAT,CAAyBl0C,OAAzB,EAAyC;AACvC,QAAMm0C,UAAU,GAAGn0C,OAAO,CAAC6zB,GAA3B;;AACA,MAAIsgB,UAAU,KAAK,IAAnB,EAAyB;AACvB,QAAI,OAAOA,UAAP,KAAsB,UAA1B,EAAsC;AACpC,MAWO;AACLA,QAAAA,UAAU,CAAC,IAAD,CAAV;AACD;AACF,KAfD,MAeO;AACLA,MAAAA,UAAU,CAACn0C,OAAX,GAAqB,IAArB;AACD;AACF;AACF;AAGD;AACA;;;AACA,SAASo0C,aAAT,CACEV,YADF,EAEE1zC,OAFF,EAGEwyC,sBAHF,EAIQ;AACNx4B,EAAAA,eAAe,CAACha,OAAD,CAAf;;AAEA,UAAQA,OAAO,CAAC6D,GAAhB;AACE,SAAKrD,iBAAL;AACA,SAAKW,UAAL;AACA,SAAKG,aAAL;AACA,SAAKC,mBAAL;AAA0B;AACxB,cAAMqrB,WAAgD,GAAI5sB,OAAO,CAAC4sB,WAAlE;;AACA,YAAIA,WAAW,KAAK,IAApB,EAA0B;AACxB,gBAAMyQ,UAAU,GAAGzQ,WAAW,CAACyQ,UAA/B;;AACA,cAAIA,UAAU,KAAK,IAAnB,EAAyB;AACvB,kBAAMsE,WAAW,GAAGtE,UAAU,CAACp9B,IAA/B;AAEA,gBAAIwwB,MAAM,GAAGkR,WAAb;;AACA,eAAG;AAAA,8BACsBlR,MADtB;AAAA,oBACM+Q,OADN,WACMA,OADN;AAAA,oBACe39B,GADf,WACeA,GADf;;AAED,kBAAI29B,OAAO,KAAK9oC,SAAhB,EAA2B;AACzB,oBAAI,CAACmL,GAAG,GAAG4+B,MAAP,MAAuB4R,SAA3B,EAAyC;AACvC,kBAQO;AACLzB,oBAAAA,iBAAiB,CAAC5yC,OAAD,EAAUwyC,sBAAV,EAAkChR,OAAlC,CAAjB;AACD;AACF;AACF;;AACD/Q,cAAAA,MAAM,GAAGA,MAAM,CAACxwB,IAAhB;AACD,aAlBD,QAkBSwwB,MAAM,KAAKkR,WAlBpB;AAmBD;AACF;;AACD;AACD;;AACD,SAAKlhC,cAAL;AAAqB;AACnBkyC,QAAAA,eAAe,CAAC3yC,OAAD,EAAUwyC,sBAAV,CAAf;AACA,cAAMl2C,QAAQ,GAAG0D,OAAO,CAAC6E,SAAzB;;AACA,YAAI,OAAOvI,QAAQ,CAACg2C,oBAAhB,KAAyC,UAA7C,EAAyD;AACvDC,UAAAA,8BAA8B,CAC5BvyC,OAD4B,EAE5BwyC,sBAF4B,EAG5Bl2C,QAH4B,CAA9B;AAKD;;AACD;AACD;;AACD,SAAKuE,aAAL;AAAoB;AAClB8xC,QAAAA,eAAe,CAAC3yC,OAAD,EAAUwyC,sBAAV,CAAf;AACA;AACD;;AACD,SAAK5xC,UAAL;AAAiB;AACf;AACA;AACA;AACA,QAAsB;AACpB0zC,UAAAA,qBAAqB,CAACZ,YAAD,EAAe1zC,OAAf,EAAwBwyC,sBAAxB,CAArB;AACD,SAFD;;AAKA;AACD;;AACD,SAAK9wC,kBAAL;AAAyB;AACvB;AASA;AACD;;AACD,SAAKE,cAAL;AAAqB;AACnB;AAGA;AACD;AA/EH;AAiFD;;AAED,SAAS2yC,oBAAT,CACEb,YADF,EAEEz6B,IAFF,EAGEu5B,sBAHF,EAIQ;AACN;AACA;AACA;AACA;AACA;AACA,MAAIz/B,IAAW,GAAGkG,IAAlB;;AACA,SAAO,IAAP,EAAa;AACXm7B,IAAAA,aAAa,CAACV,YAAD,EAAe3gC,IAAf,EAAqBy/B,sBAArB,CAAb,CADW;AAGX;;AACA,QACEz/B,IAAI,CAACa,KAAL,KAAe,IAAf;AAEA;AACC,KAAqBb,IAAI,CAAClP,GAAL,KAAajD,UAHnC,CADF,EAKE;AACAmS,MAAAA,IAAI,CAACa,KAAL,CAAWhQ,MAAX,GAAoBmP,IAApB;AACAA,MAAAA,IAAI,GAAGA,IAAI,CAACa,KAAZ;AACA;AACD;;AACD,QAAIb,IAAI,KAAKkG,IAAb,EAAmB;AACjB;AACD;;AACD,WAAOlG,IAAI,CAACc,OAAL,KAAiB,IAAxB,EAA8B;AAC5B,UAAId,IAAI,CAACnP,MAAL,KAAgB,IAAhB,IAAwBmP,IAAI,CAACnP,MAAL,KAAgBqV,IAA5C,EAAkD;AAChD;AACD;;AACDlG,MAAAA,IAAI,GAAGA,IAAI,CAACnP,MAAZ;AACD;;AACDmP,IAAAA,IAAI,CAACc,OAAL,CAAajQ,MAAb,GAAsBmP,IAAI,CAACnP,MAA3B;AACAmP,IAAAA,IAAI,GAAGA,IAAI,CAACc,OAAZ;AACD;AACF;;AAED,SAAS2gC,mBAAT,CAA6B/jC,KAA7B,EAA2C;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAMnM,SAAS,GAAGmM,KAAK,CAACnM,SAAxB;;AACA,MAAIA,SAAS,KAAK,IAAlB,EAAwB;AACtBA,IAAAA,SAAS,CAACV,MAAV,GAAmB,IAAnB;AACD;;AACD6M,EAAAA,KAAK,CAAC7M,MAAN,GAAe,IAAf;AACD;;AAED,SAAS6wC,uBAAT,CAAiChkC,KAAjC,EAA+C;AAC7C,QAAMnM,SAAS,GAAGmM,KAAK,CAACnM,SAAxB;;AACA,MAAIA,SAAS,KAAK,IAAlB,EAAwB;AACtBmM,IAAAA,KAAK,CAACnM,SAAN,GAAkB,IAAlB;AACAmwC,IAAAA,uBAAuB,CAACnwC,SAAD,CAAvB;AACD,GAL4C;AAQ7C;;;AACA,EAeO;AACL;AACA;AACA;AACA;AACA;AACA;AACAmM,IAAAA,KAAK,CAACmD,KAAN,GAAc,IAAd;AACAnD,IAAAA,KAAK,CAACmkB,SAAN,GAAkB,IAAlB;AACAnkB,IAAAA,KAAK,CAACoD,OAAN,GAAgB,IAAhB,CATK;AAYL;AACA;AACA;;AACA,QAAIpD,KAAK,CAAC5M,GAAN,KAAchD,aAAlB,EAAiC;AAC/B,YAAM6zC,YAAsB,GAAGjkC,KAAK,CAAC5L,SAArC;AAID;;AACD4L,IAAAA,KAAK,CAAC5L,SAAN,GAAkB,IAAlB,CArBK;AAwBL;AASA,IAAkC;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA4L,MAAAA,KAAK,CAAC7M,MAAN,GAAe,IAAf;AACA6M,MAAAA,KAAK,CAAC3N,YAAN,GAAqB,IAArB;AACA2N,MAAAA,KAAK,CAACmiB,aAAN,GAAsB,IAAtB;AACAniB,MAAAA,KAAK,CAAC2d,aAAN,GAAsB,IAAtB;AACA3d,MAAAA,KAAK,CAAC2iB,YAAN,GAAqB,IAArB;AACA3iB,MAAAA,KAAK,CAAC5L,SAAN,GAAkB,IAAlB,CAbgC;;AAehC4L,MAAAA,KAAK,CAACmc,WAAN,GAAoB,IAApB;AACD;AACF;AACF;;AA+CD,SAAS+nB,kBAAT,CAA4BlkC,KAA5B,EAAiD;AAC/C,MAAIuD,MAAM,GAAGvD,KAAK,CAAC7M,MAAnB;;AACA,SAAOoQ,MAAM,KAAK,IAAlB,EAAwB;AACtB,QAAI4gC,YAAY,CAAC5gC,MAAD,CAAhB,EAA0B;AACxB,aAAOA,MAAP;AACD;;AACDA,IAAAA,MAAM,GAAGA,MAAM,CAACpQ,MAAhB;AACD;;AAP8C;AAAA;AAAA;AAahD;;AAED,SAASgxC,YAAT,CAAsBnkC,KAAtB,EAA6C;AAC3C,SACEA,KAAK,CAAC5M,GAAN,KAAchD,aAAd,IACA4P,KAAK,CAAC5M,GAAN,KAAclD,QADd,IAEA8P,KAAK,CAAC5M,GAAN,KAAcjD,UAHhB;AAKD;;AAED,SAASi0C,cAAT,CAAwBpkC,KAAxB,EAAiD;AAC/C;AACA;AACA;AACA;AACA,MAAIsC,IAAW,GAAGtC,KAAlB;;AACAqkC,EAAAA,QAAQ,EAAE,OAAO,IAAP,EAAa;AACrB;AACA,WAAO/hC,IAAI,CAACc,OAAL,KAAiB,IAAxB,EAA8B;AAC5B,UAAId,IAAI,CAACnP,MAAL,KAAgB,IAAhB,IAAwBgxC,YAAY,CAAC7hC,IAAI,CAACnP,MAAN,CAAxC,EAAuD;AACrD;AACA;AACA,eAAO,IAAP;AACD;;AACDmP,MAAAA,IAAI,GAAGA,IAAI,CAACnP,MAAZ;AACD;;AACDmP,IAAAA,IAAI,CAACc,OAAL,CAAajQ,MAAb,GAAsBmP,IAAI,CAACnP,MAA3B;AACAmP,IAAAA,IAAI,GAAGA,IAAI,CAACc,OAAZ;;AACA,WACEd,IAAI,CAAClP,GAAL,KAAahD,aAAb,IACAkS,IAAI,CAAClP,GAAL,KAAa/C,QADb,IAEAiS,IAAI,CAAClP,GAAL,KAAanC,kBAHf,EAIE;AACA;AACA;AACA,UAAIqR,IAAI,CAACG,KAAL,GAAahC,SAAjB,EAA4B;AAC1B;AACA,iBAAS4jC,QAAT;AACD,OAND;AAQA;;;AACA,UAAI/hC,IAAI,CAACa,KAAL,KAAe,IAAf,IAAuBb,IAAI,CAAClP,GAAL,KAAajD,UAAxC,EAAoD;AAClD,iBAASk0C,QAAT;AACD,OAFD,MAEO;AACL/hC,QAAAA,IAAI,CAACa,KAAL,CAAWhQ,MAAX,GAAoBmP,IAApB;AACAA,QAAAA,IAAI,GAAGA,IAAI,CAACa,KAAZ;AACD;AACF,KA/BoB;;;AAiCrB,QAAI,EAAEb,IAAI,CAACG,KAAL,GAAahC,SAAf,CAAJ,EAA+B;AAC7B;AACA,aAAO6B,IAAI,CAAClO,SAAZ;AACD;AACF;AACF;;AAED,SAASkwC,eAAT,CAAyBxkB,YAAzB,EAAoD;AAClD;;AAKA,QAAMykB,WAAW,GAAGL,kBAAkB,CAACpkB,YAAD,CAAtC,CANkD;;AASlD,MAAIvc,MAAJ;AACA,MAAIihC,WAAJ;AACA,QAAMC,eAAe,GAAGF,WAAW,CAACnwC,SAApC;;AACA,UAAQmwC,WAAW,CAACnxC,GAApB;AACE,SAAKhD,aAAL;AACEmT,MAAAA,MAAM,GAAGkhC,eAAT;AACAD,MAAAA,WAAW,GAAG,KAAd;AACA;;AACF,SAAKt0C,QAAL;AACEqT,MAAAA,MAAM,GAAGkhC,eAAe,CAAC1xB,aAAzB;AACAyxB,MAAAA,WAAW,GAAG,IAAd;AACA;;AACF,SAAKr0C,UAAL;AACEoT,MAAAA,MAAM,GAAGkhC,eAAe,CAAC1xB,aAAzB;AACAyxB,MAAAA,WAAW,GAAG,IAAd;AACA;AACF;;AACA;AAAA;AAAA;AAAA;;AAdF;;AAqBA,MAAID,WAAW,CAAC9hC,KAAZ,GAAoB5B,YAAxB,EAAsC;AACpC;AAGA0jC,IAAAA,WAAW,CAAC9hC,KAAZ,IAAqB,CAAC5B,YAAtB;AACD;;AAED,QAAM6jC,MAAM,GAAGN,cAAc,CAACtkB,YAAD,CAA7B,CAxCkD;AA0ClD;;AACA,MAAI0kB,WAAJ,EAAiB;AACfG,IAAAA,wCAAwC,CAAC7kB,YAAD,EAAe4kB,MAAf,EAAuBnhC,MAAvB,CAAxC;AACD,GAFD,MAEO;AACLqhC,IAAAA,2BAA2B,CAAC9kB,YAAD,EAAe4kB,MAAf,EAAuBnhC,MAAvB,CAA3B;AACD;AACF;;AAED,SAASohC,wCAAT,CACEriC,IADF,EAEEoiC,MAFF,EAGEnhC,MAHF,EAIQ;AAAA,QACCnQ,GADD,GACQkP,IADR,CACClP,GADD;AAEN,QAAMyxC,MAAM,GAAGzxC,GAAG,KAAKhD,aAAR,IAAyBgD,GAAG,KAAK/C,QAAhD;;AACA,MAAIw0C,MAAJ,EAAY;AACV,UAAMzwC,SAAS,GAAGkO,IAAI,CAAClO,SAAvB;;AACA,QAAIswC,MAAJ,EAAY;AACVhwB,MAAAA,uBAAuB,CAACnR,MAAD,AAAA,CAAvB;AACD,KAFD,MAEO;AACLyQ,MAAAA,sBAAsB,CAACzQ,MAAD,EAASnP,SAAT,CAAtB;AACD;AACF,GAPD,MAOO,IAAIhB,GAAG,KAAKjD,UAAZ,EAAwB,CAAxB,MAIA;AACL,UAAMgT,KAAK,GAAGb,IAAI,CAACa,KAAnB;;AACA,QAAIA,KAAK,KAAK,IAAd,EAAoB;AAClBwhC,MAAAA,wCAAwC,CAACxhC,KAAD,EAAQuhC,MAAR,EAAgBnhC,MAAhB,CAAxC;AACA,UAAIH,OAAO,GAAGD,KAAK,CAACC,OAApB;;AACA,aAAOA,OAAO,KAAK,IAAnB,EAAyB;AACvBuhC,QAAAA,wCAAwC,CAACvhC,OAAD,EAAUshC,MAAV,EAAkBnhC,MAAlB,CAAxC;AACAH,QAAAA,OAAO,GAAGA,OAAO,CAACA,OAAlB;AACD;AACF;AACF;AACF;;AAED,SAASwhC,2BAAT,CACEtiC,IADF,EAEEoiC,MAFF,EAGEnhC,MAHF,EAIQ;AAAA,QACCnQ,GADD,GACQkP,IADR,CACClP,GADD;AAEN,QAAMyxC,MAAM,GAAGzxC,GAAG,KAAKhD,aAAR,IAAyBgD,GAAG,KAAK/C,QAAhD;;AACA,MAAIw0C,MAAJ,EAAY;AACV,UAAMzwC,SAAS,GAAGkO,IAAI,CAAClO,SAAvB;;AACA,QAAIswC,MAAJ,EAAY;AACVnwB,MAAAA,YAAY,CAAChR,MAAD,EAASnP,SAAT,EAAoBswC,MAApB,CAAZ;AACD,KAFD,MAEO;AACL/wB,MAAAA,WAAW,CAACpQ,MAAD,EAASnP,SAAT,CAAX;AACD;AACF,GAPD,MAOO,IAAIhB,GAAG,KAAKjD,UAAZ,EAAwB,CAAxB,MAIA;AACL,UAAMgT,KAAK,GAAGb,IAAI,CAACa,KAAnB;;AACA,QAAIA,KAAK,KAAK,IAAd,EAAoB;AAClByhC,MAAAA,2BAA2B,CAACzhC,KAAD,EAAQuhC,MAAR,EAAgBnhC,MAAhB,CAA3B;AACA,UAAIH,OAAO,GAAGD,KAAK,CAACC,OAApB;;AACA,aAAOA,OAAO,KAAK,IAAnB,EAAyB;AACvBwhC,QAAAA,2BAA2B,CAACxhC,OAAD,EAAUshC,MAAV,EAAkBnhC,MAAlB,CAA3B;AACAH,QAAAA,OAAO,GAAGA,OAAO,CAACA,OAAlB;AACD;AACF;AACF;AACF;;AAED,SAASygC,qBAAT,CACEZ,YADF,EAEE1zC,OAFF,EAGEwyC,sBAHF,EAIQ;AACN;AACA;AACA,MAAIz/B,IAAW,GAAG/S,OAAlB,CAHM;AAMN;;AACA,MAAIu1C,oBAAoB,GAAG,KAA3B,CAPM;;AAUN,MAAIthC,aAAJ;AACA,MAAIuhC,wBAAJ;;AAEA,SAAO,IAAP,EAAa;AACX,QAAI,CAACD,oBAAL,EAA2B;AACzB,UAAIvhC,MAAM,GAAGjB,IAAI,CAACnP,MAAlB;;AACA6xC,MAAAA,UAAU,EAAE,OAAO,IAAP,EAAa;AAAA,cAErBzhC,MAAM,KAAK,IAFU;AAAA;AAAA;;AAMvB,cAAMkhC,eAAe,GAAGlhC,MAAM,CAACnP,SAA/B;;AACA,gBAAQmP,MAAM,CAACnQ,GAAf;AACE,eAAKhD,aAAL;AACEoT,YAAAA,aAAa,GAAGihC,eAAhB;AACAM,YAAAA,wBAAwB,GAAG,KAA3B;AACA,kBAAMC,UAAN;;AACF,eAAK90C,QAAL;AACEsT,YAAAA,aAAa,GAAGihC,eAAe,CAAC1xB,aAAhC;AACAgyB,YAAAA,wBAAwB,GAAG,IAA3B;AACA,kBAAMC,UAAN;;AACF,eAAK70C,UAAL;AACEqT,YAAAA,aAAa,GAAGihC,eAAe,CAAC1xB,aAAhC;AACAgyB,YAAAA,wBAAwB,GAAG,IAA3B;AACA,kBAAMC,UAAN;AAZJ;;AAcAzhC,QAAAA,MAAM,GAAGA,MAAM,CAACpQ,MAAhB;AACD;;AACD2xC,MAAAA,oBAAoB,GAAG,IAAvB;AACD;;AAED,QAAIxiC,IAAI,CAAClP,GAAL,KAAahD,aAAb,IAA8BkS,IAAI,CAAClP,GAAL,KAAa/C,QAA/C,EAAyD;AACvDyzC,MAAAA,oBAAoB,CAACb,YAAD,EAAe3gC,IAAf,EAAqBy/B,sBAArB,CAApB,CADuD;AAGvD;;AACA,UAAIgD,wBAAJ,EAA8B;AAC5BnwB,QAAAA,wBAAwB,CACpBpR,aADoB,EAErBlB,IAAI,CAAClO,SAFgB,CAAxB;AAID,OALD,MAKO;AACLugB,QAAAA,WAAW,CACPnR,aADO,EAERlB,IAAI,CAAClO,SAFG,CAAX;AAID,OAdsD;;AAgBxD,KAhBD,MAgBO,AA0BA,IAAIkO,IAAI,CAAClP,GAAL,KAAajD,UAAjB,EAA6B;AAClC,UAAImS,IAAI,CAACa,KAAL,KAAe,IAAnB,EAAyB;AACvB;AACA;AACAK,QAAAA,aAAa,GAAGlB,IAAI,CAAClO,SAAL,CAAe2e,aAA/B;AACAgyB,QAAAA,wBAAwB,GAAG,IAA3B,CAJuB;;AAMvBziC,QAAAA,IAAI,CAACa,KAAL,CAAWhQ,MAAX,GAAoBmP,IAApB;AACAA,QAAAA,IAAI,GAAGA,IAAI,CAACa,KAAZ;AACA;AACD;AACF,KAXM,MAWA;AACLwgC,MAAAA,aAAa,CAACV,YAAD,EAAe3gC,IAAf,EAAqBy/B,sBAArB,CAAb,CADK;;AAGL,UAAIz/B,IAAI,CAACa,KAAL,KAAe,IAAnB,EAAyB;AACvBb,QAAAA,IAAI,CAACa,KAAL,CAAWhQ,MAAX,GAAoBmP,IAApB;AACAA,QAAAA,IAAI,GAAGA,IAAI,CAACa,KAAZ;AACA;AACD;AACF;;AACD,QAAIb,IAAI,KAAK/S,OAAb,EAAsB;AACpB;AACD;;AACD,WAAO+S,IAAI,CAACc,OAAL,KAAiB,IAAxB,EAA8B;AAC5B,UAAId,IAAI,CAACnP,MAAL,KAAgB,IAAhB,IAAwBmP,IAAI,CAACnP,MAAL,KAAgB5D,OAA5C,EAAqD;AACnD;AACD;;AACD+S,MAAAA,IAAI,GAAGA,IAAI,CAACnP,MAAZ;;AACA,UAAImP,IAAI,CAAClP,GAAL,KAAajD,UAAjB,EAA6B;AAC3B;AACA;AACA20C,QAAAA,oBAAoB,GAAG,KAAvB;AACD;AACF;;AACDxiC,IAAAA,IAAI,CAACc,OAAL,CAAajQ,MAAb,GAAsBmP,IAAI,CAACnP,MAA3B;AACAmP,IAAAA,IAAI,GAAGA,IAAI,CAACc,OAAZ;AACD;AACF;;AAED,SAAS6hC,cAAT,CACEhC,YADF,EAEE1zC,OAFF,EAGEwyC,sBAHF,EAIQ;AACN,EAAsB;AACpB;AACA;AACA8B,IAAAA,qBAAqB,CAACZ,YAAD,EAAe1zC,OAAf,EAAwBwyC,sBAAxB,CAArB;AACD,GAJD;;AASAgC,EAAAA,mBAAmB,CAACx0C,OAAD,CAAnB;AACD;;AAED,SAAS21C,UAAT,CAAoB31C,OAApB,EAA2CuwB,YAA3C,EAAsE;AACpE;AAyEA,UAAQA,YAAY,CAAC1sB,GAArB;AACE,SAAKrD,iBAAL;AACA,SAAKW,UAAL;AACA,SAAKG,aAAL;AACA,SAAKC,mBAAL;AAA0B;AACxB;AACA;AACA;AACA;AACA;AACA,QAeO;AACLgyC,UAAAA,2BAA2B,CACzB9Q,MAAU,GAAGR,SADY,EAEzB1R,YAFyB,EAGzBA,YAAY,CAAC3sB,MAHY,CAA3B;AAKD;;AACD;AACD;;AACD,SAAKnD,cAAL;AAAqB;AACnB;AACD;;AACD,SAAKI,aAAL;AAAoB;AAClB,cAAMvE,QAAkB,GAAGi0B,YAAY,CAAC1rB,SAAxC;;AACA,YAAIvI,QAAQ,IAAI,IAAhB,EAAsB;AACpB;AACA,gBAAMqnB,QAAQ,GAAG4M,YAAY,CAACqC,aAA9B,CAFoB;AAIpB;AACA;;AACA,gBAAMlP,QAAQ,GAAG1jB,OAAO,KAAK,IAAZ,GAAmBA,OAAO,CAAC4yB,aAA3B,GAA2CjP,QAA5D;AACA,gBAAMnrB,IAAI,GAAG+3B,YAAY,CAAC/3B,IAA1B,CAPoB;;AASpB,gBAAMsc,aAAmC,GAAIyb,YAAY,CAAC3D,WAA1D;AACA2D,UAAAA,YAAY,CAAC3D,WAAb,GAA2B,IAA3B;;AACA,cAAI9X,aAAa,KAAK,IAAtB,EAA4B;AAC1BgQ,YAAAA,YAAY,CACVxoB,QADU,EAEVwY,aAFU,EAGVtc,IAHU,EAIVkrB,QAJU,EAKVC,QALU,AAAA,CAAZ;AAQD;AACF;;AACD;AACD;;AACD,SAAK7iB,QAAL;AAAe;AAAA,cAEXyvB,YAAY,CAAC1rB,SAAb,KAA2B,IAFhB;AAAA;AAAA;;AAMb,cAAM8f,YAA0B,GAAG4L,YAAY,CAAC1rB,SAAhD;AACA,cAAMggB,OAAe,GAAG0L,YAAY,CAACqC,aAArC,CAPa;AASb;AACA;;AACA,cAAMhO,OAAe,GACnB5kB,OAAO,KAAK,IAAZ,GAAmBA,OAAO,CAAC4yB,aAA3B,GAA2C/N,OAD7C;AAEAH,QAAAA,gBAAgB,CAACC,YAAD,EAAeC,OAAf,EAAwBC,OAAxB,CAAhB;AACA;AACD;;AACD,SAAKlkB,QAAL;AAAe;AACb;AAQA;AACD;;AACD,SAAKS,QAAL;AAAe;AACb;AACD;;AACD,SAAKC,iBAAL;AAAwB;AACtBu0C,QAAAA,sBAAsB,CAACrlB,YAAD,CAAtB;AACAslB,QAAAA,4BAA4B,CAACtlB,YAAD,CAA5B;AACA;AACD;;AACD,SAAK5uB,qBAAL;AAA4B;AAC1Bk0C,QAAAA,4BAA4B,CAACtlB,YAAD,CAA5B;AACA;AACD;;AACD,SAAK9uB,wBAAL;AAA+B;AAC7B;AACD;AAxGH;;AA1EoE;AAAA;AAAA;AAiMrE;;AAED,SAASm0C,sBAAT,CAAgCrlB,YAAhC,EAAqD;AACnD;AACA,QAAMZ,QAA8B,GAAGY,YAAY,CAACnC,aAApD;AAcD;;AAiCD,SAASynB,4BAAT,CAAsCtlB,YAAtC,EAA2D;AACzD;AACA;AACA;AACA,QAAM4X,SAA+B,GAAI5X,YAAY,CAAC3D,WAAtD;;AACA,MAAIub,SAAS,KAAK,IAAlB,EAAwB;AACtB5X,IAAAA,YAAY,CAAC3D,WAAb,GAA2B,IAA3B;AACA,QAAIkpB,UAAU,GAAGvlB,YAAY,CAAC1rB,SAA9B;;AACA,QAAIixC,UAAU,KAAK,IAAnB,EAAyB;AACvBA,MAAAA,UAAU,GAAGvlB,YAAY,CAAC1rB,SAAb,GAAyB,IAAIqtC,eAAJ,EAAtC;AACD;;AACD/J,IAAAA,SAAS,CAACvoC,OAAV,CAAkBynC,QAAQ,IAAI;AAC5B;AACA,YAAM0O,KAAK,GAAGC,oBAAoB,CAAChY,IAArB,CAA0B,IAA1B,EAAgCzN,YAAhC,EAA8C8W,QAA9C,CAAd;;AACA,UAAI,CAACyO,UAAU,CAACrO,GAAX,CAAeJ,QAAf,CAAL,EAA+B;AAC7ByO,QAAAA,UAAU,CAACpO,GAAX,CAAeL,QAAf;;AAeAA,QAAAA,QAAQ,CAACQ,IAAT,CAAckO,KAAd,EAAqBA,KAArB;AACD;AACF,KArBD;AAsBD;AACF;AAGD;AAgBA,SAASE,sBAAT,CAAgCj2C,OAAhC,EAAgD;AAC9C;AAGAslB,EAAAA,gBAAgB,CAACtlB,OAAO,CAAC6E,SAAT,CAAhB;AACD;;AAED,AAAO,SAASqxC,qBAAT,CACLj9B,IADK,EAELu3B,UAFK,EAGLmD,cAHK,EAIL;AACAwC,AAEA/D,EAAAA,UAAU,GAAG5B,UAAb;AAEA4F,EAAAA,2BAA2B,CAACn9B,IAAD,CAA3B;AAEAk9B,AAED;;AAED,SAASC,2BAAT,CAAqCn9B,IAArC,EAAsD;AACpD,SAAOm5B,UAAU,KAAK,IAAtB,EAA4B;AAC1B,UAAM3hC,KAAK,GAAG2hC,UAAd,CAD0B;;AAI1B,UAAMxd,SAAS,GAAGnkB,KAAK,CAACmkB,SAAxB;;AACA,QAAIA,SAAS,KAAK,IAAlB,EAAwB;AACtB,WAAK,IAAI57B,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG47B,SAAS,CAAC37B,MAA9B,EAAsCD,CAAC,EAAvC,EAA2C;AACzC,cAAM27B,aAAa,GAAGC,SAAS,CAAC57B,CAAD,CAA/B;;AACA,YAAI;AACF08C,UAAAA,cAAc,CAACz8B,IAAD,EAAO0b,aAAP,EAAsBlkB,KAAtB,CAAd;AACD,SAFD,CAEE,OAAO1Z,KAAP,EAAc;AACd07C,AACAC,UAAAA,uBAAuB,CAAC/d,aAAD,EAAgBlkB,KAAhB,EAAuB1Z,KAAvB,CAAvB;AACD;AACF;AACF;;AAED,UAAM6c,KAAK,GAAGnD,KAAK,CAACmD,KAApB;;AACA,QAAI,CAACnD,KAAK,CAACk5B,YAAN,GAAqBl3B,YAAtB,MAAwCzB,OAAxC,IAAmD4C,KAAK,KAAK,IAAjE,EAAuE;AACrEs/B,MAAAA,0BAA0B,CAACt/B,KAAD,EAAQnD,KAAR,CAA1B;AACA2hC,MAAAA,UAAU,GAAGx+B,KAAb;AACD,KAHD,MAGO;AACLyiC,MAAAA,8BAA8B,CAACp9B,IAAD,CAA9B;AACD;AACF;AACF;;AAED,SAASo9B,8BAAT,CAAwCp9B,IAAxC,EAAyD;AACvD,SAAOm5B,UAAU,KAAK,IAAtB,EAA4B;AAC1B,UAAM3hC,KAAK,GAAG2hC,UAAd;AACAgB;AACA,QAAI;AACFkD,MAAAA,4BAA4B,CAAC7lC,KAAD,EAAQwI,IAAR,CAA5B;AACD,KAFD,CAEE,OAAOliB,KAAP,EAAc;AACd07C,AACAC,MAAAA,uBAAuB,CAACjiC,KAAD,EAAQA,KAAK,CAAC7M,MAAd,EAAsB7M,KAAtB,CAAvB;AACD;AAGD,UAAM8c,OAAO,GAAGpD,KAAK,CAACoD,OAAtB;;AACA,QAAIA,OAAO,KAAK,IAAhB,EAAsB;AACpBq/B,MAAAA,0BAA0B,CAACr/B,OAAD,EAAUpD,KAAK,CAAC7M,MAAhB,CAA1B;AACAwuC,MAAAA,UAAU,GAAGv+B,OAAb;AACA;AACD;;AAEDu+B,IAAAA,UAAU,GAAG3hC,KAAK,CAAC7M,MAAnB;AACD;AACF;;AAED,SAAS0yC,4BAAT,CAAsC/lB,YAAtC,EAA2DtX,IAA3D,EAA4E;AAC1E;AACA;AACA;AACA;AACA,QAAM/F,KAAK,GAAGqd,YAAY,CAACrd,KAA3B;;AAEA,MAAIA,KAAK,GAAG5B,YAAZ,EAA0B;AACxB2kC,IAAAA,sBAAsB,CAAC1lB,YAAD,CAAtB;AACD;;AAED,MAAIrd,KAAK,GAAGzB,GAAZ,EAAiB;AACf,UAAMzR,OAAO,GAAGuwB,YAAY,CAACjsB,SAA7B;;AACA,QAAItE,OAAO,KAAK,IAAhB,EAAsB;AACpBk0C,MAAAA,eAAe,CAACl0C,OAAD,CAAf;AACD;AAQF;;AAED,MAAIkT,KAAK,GAAGpB,UAAZ,EAAwB;AACtB,YAAQye,YAAY,CAAC1sB,GAArB;AACE,WAAKxC,iBAAL;AAAwB;AACtB,gBAAMsuB,QAA+B,GAAGY,YAAY,CAACnC,aAArD;AACA,gBAAM0a,QAAQ,GAAGnZ,QAAQ,KAAK,IAA9B;;AACA,cAAImZ,QAAJ,EAAc;AACZ,kBAAM9oC,OAAO,GAAGuwB,YAAY,CAACjsB,SAA7B;AACA,kBAAMiyC,SAAS,GAAGv2C,OAAO,KAAK,IAAZ,IAAoBA,OAAO,CAACouB,aAAR,KAA0B,IAAhE;;AACA,gBAAI,CAACmoB,SAAL,EAAgB;AACd;AACAC,cAAAA,wBAAwB;AACzB;AACF;;AACD;AACD;;AACD,WAAK30C,kBAAL;AAAyB;AACvB,gBAAM8tB,QAA+B,GAAGY,YAAY,CAACnC,aAArD;AACA,gBAAM0a,QAAQ,GAAGnZ,QAAQ,KAAK,IAA9B;AACA,gBAAM3vB,OAAO,GAAGuwB,YAAY,CAACjsB,SAA7B;AACA,gBAAMiyC,SAAS,GAAGv2C,OAAO,KAAK,IAAZ,IAAoBA,OAAO,CAACouB,aAAR,KAA0B,IAAhE;AACA,gBAAMqoB,iBAAwB,GAAGlmB,YAAjC;;AAEA,UAAsB;AACpB;AACA;AACAwjB,YAAAA,uBAAuB,CAAC0C,iBAAD,EAAoB3N,QAApB,CAAvB;AACD;AAsBF;AA/CH;AAiDD,GA3EyE;AA8E1E;AACA;AACA;;;AACA,QAAM4N,YAAY,GAAGxjC,KAAK,IAAIhC,SAAS,GAAGC,MAAZ,GAAqBS,SAAzB,CAA1B;;AACA+kC,EAAAA,CAAO,QAAQD,YAAR;AACL,SAAKxlC,SAAL;AAAgB;AACd6jC,QAAAA,eAAe,CAACxkB,YAAD,CAAf,CADc;AAGd;AACA;AACA;;AACAA,QAAAA,YAAY,CAACrd,KAAb,IAAsB,CAAChC,SAAvB;AACA;AACD;;AACD,SAAKE,kBAAL;AAAyB;AACvB;AACA2jC,QAAAA,eAAe,CAACxkB,YAAD,CAAf,CAFuB;AAIvB;;AACAA,QAAAA,YAAY,CAACrd,KAAb,IAAsB,CAAChC,SAAvB,CALuB;;AAQvB,cAAMlR,OAAO,GAAGuwB,YAAY,CAACjsB,SAA7B;AACAqxC,QAAAA,UAAU,CAAC31C,OAAD,EAAUuwB,YAAV,CAAV;AACA;AACD;;AACD,SAAK3e,SAAL;AAAgB;AACd2e,QAAAA,YAAY,CAACrd,KAAb,IAAsB,CAACtB,SAAvB;AACA;AACD;;AACD,SAAKC,kBAAL;AAAyB;AACvB0e,QAAAA,YAAY,CAACrd,KAAb,IAAsB,CAACtB,SAAvB,CADuB;;AAIvB,cAAM5R,OAAO,GAAGuwB,YAAY,CAACjsB,SAA7B;AACAqxC,QAAAA,UAAU,CAAC31C,OAAD,EAAUuwB,YAAV,CAAV;AACA;AACD;;AACD,SAAKpf,MAAL;AAAa;AACX,cAAMnR,OAAO,GAAGuwB,YAAY,CAACjsB,SAA7B;AACAqxC,QAAAA,UAAU,CAAC31C,OAAD,EAAUuwB,YAAV,CAAV;AACA;AACD;AAtCI;AAwCR;;AAED,AAAO,SAASqmB,mBAAT,CACLrmB,YADK,EAELtX,IAFK,EAGL06B,cAHK,EAIC;AACNwC,AAEA/D,EAAAA,UAAU,GAAG7hB,YAAb;AAEAsmB,EAAAA,yBAAyB,CAACtmB,YAAD,EAAetX,IAAf,EAAqB06B,cAArB,CAAzB;AAEAwC,AAED;;AAED,SAASU,yBAAT,CACEC,WADF,EAEE79B,IAFF,EAGE06B,cAHF,EAIE;AACA;AACA,QAAMoD,YAAY,GAAG,CAACD,WAAW,CAAChhB,IAAZ,GAAmB3b,cAApB,MAAwCD,MAA7D;;AAEA,SAAOk4B,UAAU,KAAK,IAAtB,EAA4B;AAC1B,UAAM3hC,KAAK,GAAG2hC,UAAd;AACA,UAAM5B,UAAU,GAAG//B,KAAK,CAACmD,KAAzB;;AAuDA,QAAI,CAACnD,KAAK,CAACk5B,YAAN,GAAqBj3B,UAAtB,MAAsC1B,OAAtC,IAAiDw/B,UAAU,KAAK,IAApE,EAA0E;AACxE0C,MAAAA,0BAA0B,CAAC1C,UAAD,EAAa//B,KAAb,CAA1B;AACA2hC,MAAAA,UAAU,GAAG5B,UAAb;AACD,KAHD,MAGO;AACLwG,MAAAA,iCAAiC,CAACF,WAAD,EAAc79B,IAAd,EAAoB06B,cAApB,CAAjC;AACD;AACF;AACF;;AAED,SAASqD,iCAAT,CACEF,WADF,EAEE79B,IAFF,EAGE06B,cAHF,EAIE;AACA,SAAOvB,UAAU,KAAK,IAAtB,EAA4B;AAC1B,UAAM3hC,KAAK,GAAG2hC,UAAd;;AACA,QAAI,CAAC3hC,KAAK,CAACyC,KAAN,GAAcR,UAAf,MAA+B1B,OAAnC,EAA4C;AAC1C,YAAMhR,OAAO,GAAGyQ,KAAK,CAACnM,SAAtB;AACA8uC;AACA,UAAI;AACFK,QAAAA,yBAAyB,CAACx6B,IAAD,EAAOjZ,OAAP,EAAgByQ,KAAhB,EAAuBkjC,cAAvB,CAAzB;AACD,OAFD,CAEE,OAAO58C,KAAP,EAAc;AACd07C,AACAC,QAAAA,uBAAuB,CAACjiC,KAAD,EAAQA,KAAK,CAAC7M,MAAd,EAAsB7M,KAAtB,CAAvB;AACD;AAEF;;AAED,QAAI0Z,KAAK,KAAKqmC,WAAd,EAA2B;AACzB1E,MAAAA,UAAU,GAAG,IAAb;AACA;AACD;;AAED,UAAMv+B,OAAO,GAAGpD,KAAK,CAACoD,OAAtB;;AACA,QAAIA,OAAO,KAAK,IAAhB,EAAsB;AACpBq/B,MAAAA,0BAA0B,CAACr/B,OAAD,EAAUpD,KAAK,CAAC7M,MAAhB,CAA1B;AACAwuC,MAAAA,UAAU,GAAGv+B,OAAb;AACA;AACD;;AAEDu+B,IAAAA,UAAU,GAAG3hC,KAAK,CAAC7M,MAAnB;AACD;AACF;;AAgJD,AAAO,SAASqzC,yBAAT,CACLh+B,IADK,EAELsX,YAFK,EAGC;AACN6hB,EAAAA,UAAU,GAAG7hB,YAAb;AACA2mB,EAAAA,+BAA+B,CAAC3mB,YAAD,EAAetX,IAAf,CAA/B;AACD;;AAED,SAASi+B,+BAAT,CAAyCJ,WAAzC,EAA6D79B,IAA7D,EAA8E;AAC5E,SAAOm5B,UAAU,KAAK,IAAtB,EAA4B;AAC1B,UAAM3hC,KAAK,GAAG2hC,UAAd;AACA,UAAM5B,UAAU,GAAG//B,KAAK,CAACmD,KAAzB;;AACA,QAAI,CAACnD,KAAK,CAACk5B,YAAN,GAAqBh3B,WAAtB,MAAuC3B,OAAvC,IAAkDw/B,UAAU,KAAK,IAArE,EAA2E;AACzE0C,MAAAA,0BAA0B,CAAC1C,UAAD,EAAa//B,KAAb,CAA1B;AACA2hC,MAAAA,UAAU,GAAG5B,UAAb;AACD,KAHD,MAGO;AACL2G,MAAAA,kCAAkC,CAACL,WAAD,EAAc79B,IAAd,CAAlC;AACD;AACF;AACF;;AAED,SAASk+B,kCAAT,CACEL,WADF,EAEE79B,IAFF,EAGE;AACA,SAAOm5B,UAAU,KAAK,IAAtB,EAA4B;AAC1B,UAAM3hC,KAAK,GAAG2hC,UAAd;;AACA,QAAI,CAAC3hC,KAAK,CAACyC,KAAN,GAAcvB,OAAf,MAA4BX,OAAhC,EAAyC;AACvCoiC;AACA,UAAI;AACFgE,QAAAA,yBAAyB,CAACn+B,IAAD,EAAOxI,KAAP,CAAzB;AACD,OAFD,CAEE,OAAO1Z,KAAP,EAAc;AACd07C,AACAC,QAAAA,uBAAuB,CAACjiC,KAAD,EAAQA,KAAK,CAAC7M,MAAd,EAAsB7M,KAAtB,CAAvB;AACD;AAEF;;AAED,QAAI0Z,KAAK,KAAKqmC,WAAd,EAA2B;AACzB1E,MAAAA,UAAU,GAAG,IAAb;AACA;AACD;;AAED,UAAMv+B,OAAO,GAAGpD,KAAK,CAACoD,OAAtB;;AACA,QAAIA,OAAO,KAAK,IAAhB,EAAsB;AACpBq/B,MAAAA,0BAA0B,CAACr/B,OAAD,EAAUpD,KAAK,CAAC7M,MAAhB,CAA1B;AACAwuC,MAAAA,UAAU,GAAGv+B,OAAb;AACA;AACD;;AAEDu+B,IAAAA,UAAU,GAAG3hC,KAAK,CAAC7M,MAAnB;AACD;AACF;;AAED,SAASwzC,yBAAT,CACE1D,YADF,EAEEnjB,YAFF,EAGQ;AACN,UAAQA,YAAY,CAAC1sB,GAArB;AACE,SAAKrD,iBAAL;AACA,SAAKW,UAAL;AACA,SAAKI,mBAAL;AAA0B;AACxB,QAWO;AACLiyC,UAAAA,yBAAyB,CAAClR,SAAW,GAAGL,SAAf,EAA8B1R,YAA9B,CAAzB;AACD;;AACD;AACD;AAnBH;AAqBD;;AAED,AAAO,SAAS8mB,2BAAT,CAAqC7G,UAArC,EAA8D;AACnE4B,EAAAA,UAAU,GAAG5B,UAAb;AACA8G,EAAAA,iCAAiC;AAClC;;AAED,SAASA,iCAAT,GAA6C;AAC3C,SAAOlF,UAAU,KAAK,IAAtB,EAA4B;AAC1B,UAAM3hC,KAAK,GAAG2hC,UAAd;AACA,UAAMx+B,KAAK,GAAGnD,KAAK,CAACmD,KAApB;;AAEA,QAAI,CAACw+B,UAAU,CAACl/B,KAAX,GAAmB7B,aAApB,MAAuCL,OAA3C,EAAoD;AAClD,YAAM4jB,SAAS,GAAGnkB,KAAK,CAACmkB,SAAxB;;AACA,UAAIA,SAAS,KAAK,IAAlB,EAAwB;AACtB,aAAK,IAAI57B,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG47B,SAAS,CAAC37B,MAA9B,EAAsCD,CAAC,EAAvC,EAA2C;AACzC,gBAAMu+C,aAAa,GAAG3iB,SAAS,CAAC57B,CAAD,CAA/B;AACAo5C,UAAAA,UAAU,GAAGmF,aAAb;AACAC,UAAAA,oDAAoD,CAClDD,aADkD,EAElD9mC,KAFkD,CAApD;AAID;;AAED,QAAkC;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAMgnC,aAAa,GAAGhnC,KAAK,CAACnM,SAA5B;;AACA,cAAImzC,aAAa,KAAK,IAAtB,EAA4B;AAC1B,gBAAIC,aAAa,GAAGD,aAAa,CAAC7jC,KAAlC;;AACA,gBAAI8jC,aAAa,KAAK,IAAtB,EAA4B;AAC1BD,cAAAA,aAAa,CAAC7jC,KAAd,GAAsB,IAAtB;;AACA,iBAAG;AACD,sBAAM+jC,eAAe,GAAGD,aAAa,CAAC7jC,OAAtC;AACA6jC,gBAAAA,aAAa,CAAC7jC,OAAd,GAAwB,IAAxB;AACA6jC,gBAAAA,aAAa,GAAGC,eAAhB;AACD,eAJD,QAISD,aAAa,KAAK,IAJ3B;AAKD;AACF;AACF;;AAEDtF,QAAAA,UAAU,GAAG3hC,KAAb;AACD;AACF;;AAED,QAAI,CAACA,KAAK,CAACk5B,YAAN,GAAqBh3B,WAAtB,MAAuC3B,OAAvC,IAAkD4C,KAAK,KAAK,IAAhE,EAAsE;AACpEs/B,MAAAA,0BAA0B,CAACt/B,KAAD,EAAQnD,KAAR,CAA1B;AACA2hC,MAAAA,UAAU,GAAGx+B,KAAb;AACD,KAHD,MAGO;AACLgkC,MAAAA,oCAAoC;AACrC;AACF;AACF;;AAED,SAASA,oCAAT,GAAgD;AAC9C,SAAOxF,UAAU,KAAK,IAAtB,EAA4B;AAC1B,UAAM3hC,KAAK,GAAG2hC,UAAd;;AACA,QAAI,CAAC3hC,KAAK,CAACyC,KAAN,GAAcvB,OAAf,MAA4BX,OAAhC,EAAyC;AACvCoiC,AACAyE,MAAAA,2BAA2B,CAACpnC,KAAD,CAA3B;AACAqnC,AACD;;AAED,UAAMjkC,OAAO,GAAGpD,KAAK,CAACoD,OAAtB;;AACA,QAAIA,OAAO,KAAK,IAAhB,EAAsB;AACpBq/B,MAAAA,0BAA0B,CAACr/B,OAAD,EAAUpD,KAAK,CAAC7M,MAAhB,CAA1B;AACAwuC,MAAAA,UAAU,GAAGv+B,OAAb;AACA;AACD;;AAEDu+B,IAAAA,UAAU,GAAG3hC,KAAK,CAAC7M,MAAnB;AACD;AACF;;AAED,SAASi0C,2BAAT,CAAqCtnB,YAArC,EAAgE;AAC9D,UAAQA,YAAY,CAAC1sB,GAArB;AACE,SAAKrD,iBAAL;AACA,SAAKW,UAAL;AACA,SAAKI,mBAAL;AAA0B;AACxB,QAYO;AACLgyC,UAAAA,2BAA2B,CACzBjR,SAAW,GAAGL,SADW,EAEzB1R,YAFyB,EAGzBA,YAAY,CAAC3sB,MAHY,CAA3B;AAKD;;AACD;AACD;AAxBH;AA0BD;;AAED,SAAS4zC,oDAAT,CACEO,kBADF,EAEEvF,sBAFF,EAGE;AACA,SAAOJ,UAAU,KAAK,IAAtB,EAA4B;AAC1B,UAAM3hC,KAAK,GAAG2hC,UAAd,CAD0B;AAI1B,AAEA4F,IAAAA,4CAA4C,CAACvnC,KAAD,EAAQ+hC,sBAAR,CAA5C;AACAsF,AAEA,UAAMlkC,KAAK,GAAGnD,KAAK,CAACmD,KAApB,CAT0B;AAW1B;;AACA,QAAIA,KAAK,KAAK,IAAd,EAAoB;AAClBs/B,MAAAA,0BAA0B,CAACt/B,KAAD,EAAQnD,KAAR,CAA1B;AACA2hC,MAAAA,UAAU,GAAGx+B,KAAb;AACD,KAHD,MAGO;AACLqkC,MAAAA,uDAAuD,CACrDF,kBADqD,CAAvD;AAGD;AACF;AACF;;AAED,SAASE,uDAAT,CACEF,kBADF,EAEE;AACA,SAAO3F,UAAU,KAAK,IAAtB,EAA4B;AAC1B,UAAM3hC,KAAK,GAAG2hC,UAAd;AACA,UAAMv+B,OAAO,GAAGpD,KAAK,CAACoD,OAAtB;AACA,UAAM6f,WAAW,GAAGjjB,KAAK,CAAC7M,MAA1B;;AAEA,IAAkC;AAChC;AACA;AACA;AACA6wC,MAAAA,uBAAuB,CAAChkC,KAAD,CAAvB;;AACA,UAAIA,KAAK,KAAKsnC,kBAAd,EAAkC;AAChC3F,QAAAA,UAAU,GAAG,IAAb;AACA;AACD;AACF,KATD;;AAmBA,QAAIv+B,OAAO,KAAK,IAAhB,EAAsB;AACpBq/B,MAAAA,0BAA0B,CAACr/B,OAAD,EAAU6f,WAAV,CAA1B;AACA0e,MAAAA,UAAU,GAAGv+B,OAAb;AACA;AACD;;AAEDu+B,IAAAA,UAAU,GAAG1e,WAAb;AACD;AACF;;AAED,SAASskB,4CAAT,CACEh4C,OADF,EAEEwyC,sBAFF,EAGQ;AACN,UAAQxyC,OAAO,CAAC6D,GAAhB;AACE,SAAKrD,iBAAL;AACA,SAAKW,UAAL;AACA,SAAKI,mBAAL;AAA0B;AACxB,QAYO;AACLgyC,UAAAA,2BAA2B,CACzBjR,SADyB,EAEzBtiC,OAFyB,EAGzBwyC,sBAHyB,CAA3B;AAKD;;AACD;AACD;AAxBH;AA0BD;;AAGD,SAASU,0BAAT,CAAoCziC,KAApC,EAA2CynC,mBAA3C,EAAgE;AAC9D,AAWA;;;AACAznC,EAAAA,KAAK,CAAC7M,MAAN,GAAes0C,mBAAf;AACD;;ACz/ED,MAAMC,IAAI,GAAGp3B,IAAI,CAACo3B,IAAlB;MAGEhyB,2BAIE3Y,qBAJF2Y;MACAtT,sBAGErF,qBAHFqF;MACAkX,4BAEEvc,qBAFFuc;MACAquB,uBACE5qC,qBADF4qC;AAKF,AAAO,MAAMC,SAAS;AAAG;AAAkB,MAApC;AACP,MAAMC,cAAc;AAAG;AAAoB,MAA3C;AACA,MAAMC,aAAa;AAAG;AAAqB,MAA3C;AACA,MAAMC,aAAa;AAAG;AAAqB,MAA3C;AACA,AAAO,MAAMC,eAAe;AAAG;AAAY,MAApC;AAGP,MAAMC,cAAc,GAAG,CAAvB;AACA,MAAMC,gBAAgB,GAAG,CAAzB;AACA,MAAMC,WAAW,GAAG,CAApB;AACA,MAAMC,aAAa,GAAG,CAAtB;AACA,MAAMC,sBAAsB,GAAG,CAA/B;AACA,MAAMC,aAAa,GAAG,CAAtB;;AAGA,IAAIC,gBAAkC,GAAGX,SAAzC;;AAEA,IAAIY,kBAAoC,GAAG,IAA3C;;AAEA,IAAI1xB,cAA4B,GAAG,IAAnC;;AAEA,IAAI2xB,6BAAoC,GAAG1+B,OAA3C;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,AAAO,IAAImxB,kBAAyB,GAAGnxB,OAAhC;AACP,MAAM2+B,wBAA4C,GAAGpyB,YAAY,CAACvM,OAAD,CAAjE;;AAGA,IAAI4+B,4BAA4C,GAAGV,cAAnD;;AAEA,IAAIW,4BAAmC,GAAG,IAA1C;AAEA;AACA;AACA;;AACA,IAAIC,+BAAsC,GAAG9+B,OAA7C;AAEA;;AACA,IAAI++B,8BAAqC,GAAG/+B,OAA5C;;AAEA,IAAIg/B,8BAAqC,GAAGh/B,OAA5C;;AAEA,IAAIi/B,6BAAoC,GAAGj/B,OAA3C;AAGA;;AACA,IAAIk/B,4BAAoC,GAAG,CAA3C;AACA,MAAMC,oBAA4B,GAAG,GAArC;AAGA;;AACA,IAAIC,kCAA0C,GAAGC,QAAjD;AAEA;;AACA,MAAMC,iBAAiB,GAAG,GAA1B;;AAEA,SAASC,gBAAT,GAA4B;AAC1BH,EAAAA,kCAAkC,GAAGz/C,GAAG,KAAK2/C,iBAA7C;AACD;;AAED,AAAO,SAAS5O,mBAAT,GAAuC;AAC5C,SAAO0O,kCAAP;AACD;AAED,IAAII,gBAAgB,GAAG,KAAvB;AACA,IAAIC,kBAAkB,GAAG,IAAzB;AACA,IAAIC,sCAAyD,GAAG,IAAhE;AAGA,AAGA,IAAIC,0BAAmC,GAAG,KAA1C;AACA,IAAIC,6BAA+C,GAAG,IAAtD;AACA,IAAIC,0BAAiC,GAAG7/B,OAAxC;AACA;AAGA,MAAM8/B,mBAAmB,GAAG,EAA5B;AACA,IAAIC,iBAAyB,GAAG,CAAhC;AACA,IAAIC,qBAAuC,GAAG,IAA9C;AAEA,AAIA;AACA;;AACA,IAAIC,gBAAwB,GAAG59B,WAA/B;AACA,IAAI69B,0BAAiC,GAAGlgC,OAAxC;AAEA,AAAO,SAAS+kB,qBAAT,GAAmD;AACxD,SAAO0Z,kBAAP;AACD;AAED,AAAO,SAASjoB,gBAAT,GAA4B;AACjC,MAAI,CAACgoB,gBAAgB,IAAIT,aAAa,GAAGC,aAApB,CAAjB,MAAyDH,SAA7D,EAAwE;AACtE;AACA,WAAOl+C,GAAG,EAAV;AACD,GAJgC;;;AAMjC,MAAIsgD,gBAAgB,KAAK59B,WAAzB,EAAsC;AACpC;AACA,WAAO49B,gBAAP;AACD,GATgC;;;AAWjCA,EAAAA,gBAAgB,GAAGtgD,GAAG,EAAtB;AACA,SAAOsgD,gBAAP;AACD;AAED,AAIO,SAASxpB,iBAAT,CAA2BxgB,KAA3B,EAA+C;AACpD;AACA,QAAMqlB,IAAI,GAAGrlB,KAAK,CAACqlB,IAAnB;;AACA,MAAI,CAACA,IAAI,GAAG3b,cAAR,MAA4BD,MAAhC,EAAwC;AACtC,WAAQQ,QAAR;AACD,GAFD,MAEO,IACL,CACA,CAACs+B,gBAAgB,GAAGT,aAApB,MAAuCF,SADvC,IAEAa,6BAA6B,KAAK1+B,OAH7B,EAIL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAO+E,iBAAiB,CAAC25B,6BAAD,CAAxB;AACD;;AAED,QAAMyB,YAAY,GAAG1wB,wBAAwB,OAAOD,YAApD;;AACA,MAAI2wB,YAAJ,EAAkB;AAChB,AAQA;AACA;AACA;AACA;AACA;AACA;;;AACA,QAAID,0BAA0B,KAAKjgC,MAAnC,EAA2C;AACzC;AACAigC,MAAAA,0BAA0B,GAAGr7B,uBAAuB,EAApD;AACD;;AACD,WAAOq7B,0BAAP;AACD,GA3CmD;AA8CpD;AACA;AACA;AACA;AACA;;;AACA,QAAMr6B,UAAgB,GAAIe,wBAAwB,EAAlD;;AACA,MAAIf,UAAU,KAAK5F,MAAnB,EAA2B;AACzB,WAAO4F,UAAP;AACD,GAtDmD;AAyDpD;AACA;AACA;AACA;AACA;;;AACA,QAAMu6B,SAAe,GAAIz2B,uBAAuB,EAAhD;AACA,SAAOy2B,SAAP;AACD;;AAED,SAASC,gBAAT,CAA0BpqC,KAA1B,EAAwC;AACtC;AACA;AACA;AAEA;AACA,QAAMqlB,IAAI,GAAGrlB,KAAK,CAACqlB,IAAnB;;AACA,MAAI,CAACA,IAAI,GAAG3b,cAAR,MAA4BD,MAAhC,EAAwC;AACtC,WAAQQ,QAAR;AACD;;AAED,SAAO4E,kBAAkB,EAAzB;AACD;;AAED,AAAO,SAAS4R,qBAAT,CACLzgB,KADK,EAELyN,IAFK,EAGLI,SAHK,EAIa;AAClBw8B,EAAAA,qBAAqB;AACrBC,AAEA,QAAM9hC,IAAI,GAAG+hC,6BAA6B,CAACvqC,KAAD,EAAQyN,IAAR,CAA1C;;AACA,MAAIjF,IAAI,KAAK,IAAb,EAAmB;AACjB,WAAO,IAAP;AACD;;;AASDmH,EAAAA,eAAe,CAACnH,IAAD,EAAOiF,IAAP,EAAaI,SAAb,CAAf;;;AAuBA,MAAIrF,IAAI,KAAKggC,kBAAb,EAAiC;AAC/B;AACA;AACA;AACA;AACA;AACA,QACEgC,CACA,CAACjC,gBAAgB,GAAGT,aAApB,MAAuCF,SAFzC,EAGE;AACAmB,MAAAA,8BAA8B,GAAG35B,UAAU,CACzC25B,8BADyC,EAEzCt7B,IAFyC,CAA3C;AAID;;AACD,QAAIk7B,4BAA4B,KAAKN,sBAArC,EAA6D;AAC3D;AACA;AACA;AACA;AACA;AACA;AACAx4B,MAAAA,mBAAiB,CAACrH,IAAD,EAAOigC,6BAAP,CAAjB;AACD;AACF;;AAEDgC,EAAAA,qBAAqB,CAACjiC,IAAD,EAAOqF,SAAP,CAArB;;AACA,MACEJ,IAAI,KAAKxD,QAAT,IACAs+B,gBAAgB,KAAKX,SADrB,IAEA,CAAC5nC,KAAK,CAACqlB,IAAN,GAAa3b,cAAd,MAAkCD,MAFlC;AAIA,IAAE2Q,KAAO,CAAT,CALF,EAME;AACA;AACA;AACA;AACA;AACA;AACAkvB,IAAAA,gBAAgB;AAChBrwB,IAAAA,kCAAkC;AACnC;;AAED,SAAOzQ,IAAP;AACD;AAGD;AACA;AACA;;AACA,SAAS+hC,6BAAT,CACEjT,WADF,EAEE7pB,IAFF,EAGoB;AAClB;AACA6pB,EAAAA,WAAW,CAAC9qB,KAAZ,GAAoB4C,UAAU,CAACkoB,WAAW,CAAC9qB,KAAb,EAAoBiB,IAApB,CAA9B;AACA,MAAI5Z,SAAS,GAAGyjC,WAAW,CAACzjC,SAA5B;;AACA,MAAIA,SAAS,KAAK,IAAlB,EAAwB;AACtBA,IAAAA,SAAS,CAAC2Y,KAAV,GAAkB4C,UAAU,CAACvb,SAAS,CAAC2Y,KAAX,EAAkBiB,IAAlB,CAA5B;AACD;;;AAUD,MAAInL,IAAI,GAAGg1B,WAAX;AACA,MAAI/zB,MAAM,GAAG+zB,WAAW,CAACnkC,MAAzB;;AACA,SAAOoQ,MAAM,KAAK,IAAlB,EAAwB;AACtBA,IAAAA,MAAM,CAACkY,UAAP,GAAoBrM,UAAU,CAAC7L,MAAM,CAACkY,UAAR,EAAoBhO,IAApB,CAA9B;AACA5Z,IAAAA,SAAS,GAAG0P,MAAM,CAAC1P,SAAnB;;AACA,QAAIA,SAAS,KAAK,IAAlB,EAAwB;AACtBA,MAAAA,SAAS,CAAC4nB,UAAV,GAAuBrM,UAAU,CAACvb,SAAS,CAAC4nB,UAAX,EAAuBhO,IAAvB,CAAjC;AACD,KAFD;;AASAnL,IAAAA,IAAI,GAAGiB,MAAP;AACAA,IAAAA,MAAM,GAAGA,MAAM,CAACpQ,MAAhB;AACD;;AACD,MAAImP,IAAI,CAAClP,GAAL,KAAalD,QAAjB,EAA2B;AACzB,UAAMsY,IAAe,GAAGlG,IAAI,CAAClO,SAA7B;AACA,WAAOoU,IAAP;AACD,GAHD,MAGO;AACL,WAAO,IAAP;AACD;AACF;;AAED,AAAO,SAAS2V,mBAAT,CAA6Bne,KAA7B,EAA2CyN,IAA3C,EAAuD;AAC5D;AAEE;AACA;AACA+6B,IAAAA,kBAAkB,KAAK,IAAvB,IACA,CAACxoC,KAAK,CAACqlB,IAAN,GAAa3b,cAAd,MAAkCD,MADlC;AAGA;AACA;AACA;AACC+gC,IAAAA,CACC,CAACjC,gBAAgB,GAAGT,aAApB,MAAuCF,SAPzC;AAJF;AAaD;AAGD;AACA;AACA;AACA;;AACA,SAAS6C,qBAAT,CAA+BjiC,IAA/B,EAAgDuF,WAAhD,EAAqE;AACnE,QAAM28B,oBAAoB,GAAGliC,IAAI,CAACmiC,YAAlC,CADmE;AAInE;;AACA38B,EAAAA,yBAAyB,CAACxF,IAAD,EAAOuF,WAAP,CAAzB,CALmE;;AAQnE,QAAMlB,SAAS,GAAGH,YAAY,CAC5BlE,IAD4B,EAE5BA,IAAI,KAAKggC,kBAAT,GAA8BC,6BAA9B,GAA8D1+B,OAFlC,CAA9B;;AAKA,MAAI8C,SAAS,KAAK9C,OAAlB,EAA2B;AACzB;AACA,QAAI2gC,oBAAoB,KAAK,IAA7B,EAAmC;AACjCrjC,MAAAA,gBAAc,CAACqjC,oBAAD,CAAd;AACD;;AACDliC,IAAAA,IAAI,CAACmiC,YAAL,GAAoB,IAApB;AACAniC,IAAAA,IAAI,CAACoiC,gBAAL,GAAwB5gC,MAAxB;AACA;AACD,GArBkE;;;AAwBnE,QAAM6gC,mBAAmB,GAAGp+B,sBAAsB,CAACI,SAAD,CAAlD,CAxBmE;;AA2BnE,QAAMi+B,wBAAwB,GAAGtiC,IAAI,CAACoiC,gBAAtC;;AACA,MACEE,wBAAwB,KAAKD,mBAA7B;AAEA;AACA;AACA,IACEzwB,KAAO,CAAP,CADF,CALF,EAUE;AACA;;AAcA;AACD;;AAED,MAAIswB,oBAAoB,IAAI,IAA5B,EAAkC;AAChC;AACArjC,IAAAA,gBAAc,CAACqjC,oBAAD,CAAd;AACD,GA3DkE;;;AA8DnE,MAAIK,eAAJ;;AACA,MAAIF,mBAAmB,KAAK5gC,QAA5B,EAAsC;AACpC;AACA;AACA,QAAIzB,IAAI,CAACpV,GAAL,KAAaslB,UAAjB,EAA6B;AAC3B;AAGAM,MAAAA,0BAA0B,CAACgyB,qBAAqB,CAACzd,IAAtB,CAA2B,IAA3B,EAAiC/kB,IAAjC,CAAD,CAA1B;AACD,KALD,MAKO;AACLuQ,MAAAA,oBAAoB,CAACiyB,qBAAqB,CAACzd,IAAtB,CAA2B,IAA3B,EAAiC/kB,IAAjC,CAAD,CAApB;AACD;;AACD,IAUO;AACL;AACArB,MAAAA,kBAAgB,CAAC2B,iBAAD,EAA6BoQ,kBAA7B,CAAhB;AACD;;AACD6xB,IAAAA,eAAe,GAAG,IAAlB;AACD,GA1BD,MA0BO;AACL,QAAIE,sBAAJ;;AACA,YAAQh6B,oBAAoB,CAACpE,SAAD,CAA5B;AACE,WAAKhE,qBAAL;AACEoiC,QAAAA,sBAAsB,GAAGniC,iBAAzB;AACA;;AACF,WAAKC,uBAAL;AACEkiC,QAAAA,sBAAsB,GAAGjiC,oBAAzB;AACA;;AACF,WAAKC,oBAAL;AACEgiC,QAAAA,sBAAsB,GAAG/hC,cAAzB;AACA;;AACF,WAAKC,iBAAL;AACE8hC,QAAAA,sBAAsB,GAAG7hC,YAAzB;AACA;;AACF;AACE6hC,QAAAA,sBAAsB,GAAG/hC,cAAzB;AACA;AAfJ;;AAiBA6hC,IAAAA,eAAe,GAAG5jC,kBAAgB,CAChC8jC,sBADgC,EAEhCC,2BAA2B,CAAC3d,IAA5B,CAAiC,IAAjC,EAAuC/kB,IAAvC,CAFgC,CAAlC;AAID;;AAEDA,EAAAA,IAAI,CAACoiC,gBAAL,GAAwBC,mBAAxB;AACAriC,EAAAA,IAAI,CAACmiC,YAAL,GAAoBI,eAApB;AACD;AAGD;;;AACA,SAASG,2BAAT,CAAqC1iC,IAArC,EAA2C2iC,UAA3C,EAAuD;AACrD,AAKA;;;AACAnB,EAAAA,gBAAgB,GAAG59B,WAAnB;AACA69B,EAAAA,0BAA0B,GAAGlgC,OAA7B;;AARqD,QAWnD,CAACw+B,gBAAgB,IAAIT,aAAa,GAAGC,aAApB,CAAjB,MAAyDH,SAXN;AAAA;AAAA;AAgBrD;;;AACA,QAAMwD,oBAAoB,GAAG5iC,IAAI,CAACmiC,YAAlC;AACA,QAAMU,sBAAsB,GAAGC,mBAAmB,EAAlD;;AACA,MAAID,sBAAJ,EAA4B;AAC1B;AACA;AACA,QAAI7iC,IAAI,CAACmiC,YAAL,KAAsBS,oBAA1B,EAAgD;AAC9C;AACA;AACA;AACA,aAAO,IAAP;AACD,KALD;AAQD,GA9BoD;AAiCrD;;;AACA,MAAI5+B,KAAK,GAAGE,YAAY,CACtBlE,IADsB,EAEtBA,IAAI,KAAKggC,kBAAT,GAA8BC,6BAA9B,GAA8D1+B,OAFxC,CAAxB;;AAIA,MAAIyC,KAAK,KAAKzC,OAAd,EAAuB;AACrB;AACA,WAAO,IAAP;AACD,GAzCoD;AA4CrD;AACA;AACA;AACA;AACA;;;AACA,MAAIwhC,UAAU,GACZ98B,eAAe,CAACjG,IAAD,EAAOgE,KAAP,CAAf,KACCg/B,CAAqC,CAACL,UADvC,IAEIM,oBAAoB,CAACjjC,IAAD,EAAOgE,KAAP,CAFxB,GAGIk/B,cAAc,CAACljC,IAAD,EAAOgE,KAAP,CAJpB;;AAKA,MAAI++B,UAAU,KAAKtD,cAAnB,EAAmC;AACjC,QAAIsD,UAAU,KAAKpD,WAAnB,EAAgC;AAC9B,YAAMwD,oBAAoB,GAAGpD,gBAA7B;AACAA,MAAAA,gBAAgB,IAAIP,eAApB,CAF8B;AAK9B;;AACA,UAAIx/B,IAAI,CAACmxB,OAAT,EAAkB;AAChBnxB,QAAAA,IAAI,CAACmxB,OAAL,GAAe,KAAf;;AAIAvkB,QAAAA,cAAc,CAAC5M,IAAI,CAACuK,aAAN,CAAd;AACD,OAZ6B;AAe9B;AACA;AACA;;;AACA,YAAM64B,eAAe,GAAGx9B,mCAAmC,CAAC5F,IAAD,CAA3D;;AACA,UAAIojC,eAAe,KAAK7hC,OAAxB,EAAiC;AAC/ByC,QAAAA,KAAK,GAAGo/B,eAAR;AACAL,QAAAA,UAAU,GAAGG,cAAc,CAACljC,IAAD,EAAOojC,eAAP,CAA3B;AACD;;AAEDrD,MAAAA,gBAAgB,GAAGoD,oBAAnB;AACD;;AAED,QAAIJ,UAAU,KAAKrD,gBAAnB,EAAqC;AACnC,YAAM2D,UAAU,GAAGjD,4BAAnB;AACAkD,MAAAA,iBAAiB,CAACtjC,IAAD,EAAOuB,OAAP,CAAjB;AACA8F,MAAAA,mBAAiB,CAACrH,IAAD,EAAOgE,KAAP,CAAjB;AACAi+B,MAAAA,qBAAqB,CAACjiC,IAAD,EAAO9e,GAAG,EAAV,CAArB;AACA,YAAMmiD,UAAN;AACD,KAlCgC;AAqCjC;;;AACA,UAAM/rB,YAAmB,GAAItX,IAAI,CAACjZ,OAAL,CAAasE,SAA1C;AACA2U,IAAAA,IAAI,CAACsX,YAAL,GAAoBA,YAApB;AACAtX,IAAAA,IAAI,CAACujC,aAAL,GAAqBv/B,KAArB;AACAw/B,IAAAA,sBAAsB,CAACxjC,IAAD,EAAO+iC,UAAP,EAAmB/+B,KAAnB,CAAtB;AACD;;AAEDi+B,EAAAA,qBAAqB,CAACjiC,IAAD,EAAO9e,GAAG,EAAV,CAArB;;AACA,MAAI8e,IAAI,CAACmiC,YAAL,KAAsBS,oBAA1B,EAAgD;AAC9C;AACA;AACA,WAAOF,2BAA2B,CAAC3d,IAA5B,CAAiC,IAAjC,EAAuC/kB,IAAvC,CAAP;AACD;;AACD,SAAO,IAAP;AACD;;AAED,SAASwjC,sBAAT,CAAgCxjC,IAAhC,EAAsC+iC,UAAtC,EAAkD/+B,KAAlD,EAAyD;AACvD,UAAQ++B,UAAR;AACE,SAAKtD,cAAL;AACA,SAAKC,gBAAL;AAAuB;AAAA;AAAA;AAAA;AAEtB;AACD;AACA;AACA;;AACA,SAAKC,WAAL;AAAkB;AAChB;AACA;AACA8D,QAAAA,UAAU,CAACzjC,IAAD,CAAV;AACA;AACD;;AACD,SAAK4/B,aAAL;AAAoB;AAClBv4B,QAAAA,mBAAiB,CAACrH,IAAD,EAAOgE,KAAP,CAAjB,CADkB;AAIlB;;AAEA,YACE+B,mBAAmB,CAAC/B,KAAD,CAAnB;AAEA,SAAC0/B,8BAA8B,EAHjC,EAIE;AACA;AACA;AACA,gBAAMC,cAAc,GAClBlD,4BAA4B,GAAGC,oBAA/B,GAAsDx/C,GAAG,EAD3D,CAHA;;AAMA,cAAIyiD,cAAc,GAAG,EAArB,EAAyB;AACvB,kBAAMt/B,SAAS,GAAGH,YAAY,CAAClE,IAAD,EAAOuB,OAAP,CAA9B;;AACA,gBAAI8C,SAAS,KAAK9C,OAAlB,EAA2B;AACzB;AACA;AACD;;AACD,kBAAM+C,cAAc,GAAGtE,IAAI,CAACsE,cAA5B;;AACA,gBAAI,CAACoC,eAAe,CAACpC,cAAD,EAAiBN,KAAjB,CAApB,EAA6C;AAC3C;AACA;AACA;AACA;AACA,oBAAMqB,SAAS,GAAG0S,gBAAgB,EAAlC;AACAzQ,cAAAA,cAAc,CAACtH,IAAD,EAAOsE,cAAP,AAAA,CAAd;AACA;AACD,aAfsB;AAkBvB;AACA;;;AACAtE,YAAAA,IAAI,CAAC4jC,aAAL,GAAqBh5B,eAAe,CAClC64B,UAAU,CAAC1e,IAAX,CAAgB,IAAhB,EAAsB/kB,IAAtB,CADkC,EAElC2jC,cAFkC,CAApC;AAIA;AACD;AACF,SA1CiB;;;AA4ClBF,QAAAA,UAAU,CAACzjC,IAAD,CAAV;AACA;AACD;;AACD,SAAK6/B,sBAAL;AAA6B;AAC3Bx4B,QAAAA,mBAAiB,CAACrH,IAAD,EAAOgE,KAAP,CAAjB;;AAEA,YAAIgC,uBAAuB,CAAChC,KAAD,CAA3B,EAAoC;AAClC;AACA;AACA;AACA;AACD;;AAED,QAAuC;AACrC;AACA;AACA;AACA;AACA;AACA;AAEA,gBAAMoB,mBAAmB,GAAGF,sBAAsB,CAAClF,IAAD,EAAOgE,KAAP,CAAlD;AACA,gBAAM6/B,WAAW,GAAGz+B,mBAApB;AACA,gBAAM0+B,aAAa,GAAG5iD,GAAG,KAAK2iD,WAA9B;AACA,gBAAMF,cAAc,GAAGI,GAAG,CAACD,aAAD,CAAH,GAAqBA,aAA5C,CAXqC;;AAcrC,cAAIH,cAAc,GAAG,EAArB,EAAyB;AACvB;AACA;AACA3jC,YAAAA,IAAI,CAAC4jC,aAAL,GAAqBh5B,eAAe,CAClC64B,UAAU,CAAC1e,IAAX,CAAgB,IAAhB,EAAsB/kB,IAAtB,CADkC,EAElC2jC,cAFkC,CAApC;AAIA;AACD;AACF,SAjC0B;;;AAoC3BF,QAAAA,UAAU,CAACzjC,IAAD,CAAV;AACA;AACD;;AACD,SAAK8/B,aAAL;AAAoB;AAClB;AACA2D,QAAAA,UAAU,CAACzjC,IAAD,CAAV;AACA;AACD;;AACD;AAAS;AAAA;AAAA;AAAA;AAER;AA3GH;AA6GD;;AAED,SAASqH,mBAAT,CAA2BrH,IAA3B,EAAiCsE,cAAjC,EAAiD;AAC/C;AACA;AACA;AACA;AACAA,EAAAA,cAAc,GAAGuC,WAAW,CAACvC,cAAD,EAAiBk8B,6BAAjB,CAA5B;AACAl8B,EAAAA,cAAc,GAAGuC,WAAW,CAACvC,cAAD,EAAiBi8B,8BAAjB,CAA5B;AACAyD,EAAAA,iBAAyC,CAAChkC,IAAD,EAAOsE,cAAP,CAAzC;AACD;AAGD;;;AACA,SAASk+B,qBAAT,CAA+BxiC,IAA/B,EAAqC;AACnC;AADmC,QAMjC,CAAC+/B,gBAAgB,IAAIT,aAAa,GAAGC,aAApB,CAAjB,MAAyDH,SANxB;AAAA;AAAA;;AAUnC0D,EAAAA,mBAAmB;AAEnB,MAAI9+B,KAAK,GAAGE,YAAY,CAAClE,IAAD,EAAOuB,OAAP,CAAxB;;AACA,MAAI,CAACkF,gBAAgB,CAACzC,KAAD,EAAQvC,QAAR,CAArB,EAAwC;AACtC;AACAwgC,IAAAA,qBAAqB,CAACjiC,IAAD,EAAO9e,GAAG,EAAV,CAArB;AACA,WAAO,IAAP;AACD;;AAED,MAAI6hD,UAAU,GAAGG,cAAc,CAACljC,IAAD,EAAOgE,KAAP,CAA/B;;AACA,MAAIhE,IAAI,CAACpV,GAAL,KAAaslB,UAAb,IAA2B6yB,UAAU,KAAKpD,WAA9C,EAA2D;AACzD,UAAMwD,oBAAoB,GAAGpD,gBAA7B;AACAA,IAAAA,gBAAgB,IAAIP,eAApB,CAFyD;AAKzD;;AACA,QAAIx/B,IAAI,CAACmxB,OAAT,EAAkB;AAChBnxB,MAAAA,IAAI,CAACmxB,OAAL,GAAe,KAAf;;AAIAvkB,MAAAA,cAAc,CAAC5M,IAAI,CAACuK,aAAN,CAAd;AACD,KAZwD;AAezD;AACA;AACA;;;AACA,UAAM64B,eAAe,GAAGx9B,mCAAmC,CAAC5F,IAAD,CAA3D;;AACA,QAAIojC,eAAe,KAAK7hC,OAAxB,EAAiC;AAC/ByC,MAAAA,KAAK,GAAGo/B,eAAR;AACAL,MAAAA,UAAU,GAAGG,cAAc,CAACljC,IAAD,EAAOgE,KAAP,CAA3B;AACD;;AAED+7B,IAAAA,gBAAgB,GAAGoD,oBAAnB;AACD;;AAED,MAAIJ,UAAU,KAAKrD,gBAAnB,EAAqC;AACnC,UAAM2D,UAAU,GAAGjD,4BAAnB;AACAkD,IAAAA,iBAAiB,CAACtjC,IAAD,EAAOuB,OAAP,CAAjB;AACA8F,IAAAA,mBAAiB,CAACrH,IAAD,EAAOgE,KAAP,CAAjB;AACAi+B,IAAAA,qBAAqB,CAACjiC,IAAD,EAAO9e,GAAG,EAAV,CAArB;AACA,UAAMmiD,UAAN;AACD,GArDkC;AAwDnC;;;AACA,QAAM/rB,YAAmB,GAAItX,IAAI,CAACjZ,OAAL,CAAasE,SAA1C;AACA2U,EAAAA,IAAI,CAACsX,YAAL,GAAoBA,YAApB;AACAtX,EAAAA,IAAI,CAACujC,aAAL,GAAqBv/B,KAArB;AACAy/B,EAAAA,UAAU,CAACzjC,IAAD,CAAV,CA5DmC;AA+DnC;;AACAiiC,EAAAA,qBAAqB,CAACjiC,IAAD,EAAO9e,GAAG,EAAV,CAArB;AAEA,SAAO,IAAP;AACD;AA8BM,SAASwQ,gBAAT,CAA8BlG,EAA9B,EAA0CvO,CAA1C,EAAmD;AACxD,QAAMkmD,oBAAoB,GAAGpD,gBAA7B;AACAA,EAAAA,gBAAgB,IAAIV,cAApB;;AACA,MAAI;AACF,WAAO7zC,EAAE,CAACvO,CAAD,CAAT;AACD,GAFD,SAEU;AACR8iD,IAAAA,gBAAgB,GAAGoD,oBAAnB,CADQ;AAGR;;AACA,QACEpD,gBAAgB,KAAKX,SAArB;AAEA,MAAExtB,KAAO,CAAT,CAHF,EAIE;AACAkvB,MAAAA,gBAAgB;AAChBrwB,MAAAA,kCAAkC;AACnC;AACF;AACF;AAED,AA0GO,SAASqjB,eAAT,CAAyBt8B,KAAzB,EAAuCwM,KAAvC,EAAqD;AAC1DigC,EAAAA,IAAW,CAAC/D,wBAAD,EAA2BxN,kBAA3B,AAAA,CAAX;AACAA,EAAAA,kBAAkB,GAAG9rB,UAAU,CAAC8rB,kBAAD,EAAqB1uB,KAArB,CAA/B;AACAq8B,EAAAA,+BAA+B,GAAGz5B,UAAU,CAC1Cy5B,+BAD0C,EAE1Cr8B,KAF0C,CAA5C;AAID;AAED,AAAO,SAASuuB,cAAT,CAAwB/6B,KAAxB,EAAsC;AAC3Ck7B,EAAAA,kBAAkB,GAAGwN,wBAAwB,CAACn5C,OAA9C;AACAm9C,EAAAA,GAAY,CAAChE,wBAAD,AAAA,CAAZ;AACD;;AAED,SAASoD,iBAAT,CAA2BtjC,IAA3B,EAA4CgE,KAA5C,EAA0D;AACxDhE,EAAAA,IAAI,CAACsX,YAAL,GAAoB,IAApB;AACAtX,EAAAA,IAAI,CAACujC,aAAL,GAAqBhiC,OAArB;AAEA,QAAMqiC,aAAa,GAAG5jC,IAAI,CAAC4jC,aAA3B;;AACA,MAAIA,aAAa,KAAK54B,SAAtB,EAAiC;AAC/B;AACA;AACAhL,IAAAA,IAAI,CAAC4jC,aAAL,GAAqB54B,SAArB,CAH+B;;AAK/BF,IAAAA,aAAa,CAAC84B,aAAD,CAAb;AACD;;AAED,MAAIt1B,cAAc,KAAK,IAAvB,EAA6B;AAC3B,QAAI0qB,eAAe,GAAG1qB,cAAc,CAAC3jB,MAArC;;AACA,WAAOquC,eAAe,KAAK,IAA3B,EAAiC;AAC/BD,MAAAA,qBAAqB,CAACC,eAAD,AAAA,CAArB;AACAA,MAAAA,eAAe,GAAGA,eAAe,CAACruC,MAAlC;AACD;AACF;;AACDq1C,EAAAA,kBAAkB,GAAGhgC,IAArB;AACAsO,EAAAA,cAAc,GAAG4N,oBAAoB,CAAClc,IAAI,CAACjZ,OAAN,EAAe,IAAf,CAArC;AACAk5C,EAAAA,6BAA6B,GAAGvN,kBAAkB,GAAG2N,+BAA+B,GAAGr8B,KAAvF;AACAm8B,EAAAA,4BAA4B,GAAGV,cAA/B;AACAW,EAAAA,4BAA4B,GAAG,IAA/B;AACAE,EAAAA,8BAA8B,GAAG/+B,OAAjC;AACAg/B,EAAAA,8BAA8B,GAAGh/B,OAAjC;AACAi/B,EAAAA,6BAA6B,GAAGj/B,OAAhC;AAEAgT,EAAAA,yBAAyB;AAK1B;;AAED,SAAS4vB,WAAT,CAAqBnkC,IAArB,EAA2BokC,WAA3B,EAA8C;AAC5C,KAAG;AACD,QAAIC,WAAW,GAAG/1B,cAAlB;;AACA,QAAI;AACF;AACAmE,MAAAA,wBAAwB;AACxBmR,MAAAA,oBAAoB;AACpBib,MAAAA,iBAA2B,GAJzB;AAMF;;AACAjlC,MAAAA,mBAAiB,CAAC7S,OAAlB,GAA4B,IAA5B;;AAEA,UAAIs9C,WAAW,KAAK,IAAhB,IAAwBA,WAAW,CAAC15C,MAAZ,KAAuB,IAAnD,EAAyD;AACvD;AACA;AACA;AACA;AACAw1C,QAAAA,4BAA4B,GAAGT,gBAA/B;AACAU,QAAAA,4BAA4B,GAAGgE,WAA/B,CANuD;AAQvD;AACA;AACA;AACA;AACA;;AACA91B,QAAAA,cAAc,GAAG,IAAjB;AACA;AACD;;AAED,UAAI7W,mBAAmB,IAAI4sC,WAAW,CAACxnB,IAAZ,GAAmB1b,WAA9C,EAA2D;AACzD;AACA;AACA;AACAmrB,QAAAA,wCAAwC,CAAC+X,WAAD,EAAc,IAAd,CAAxC;AACD;;AAEDxV,MAAAA,cAAc,CACZ7uB,IADY,EAEZqkC,WAAW,CAAC15C,MAFA,EAGZ05C,WAHY,EAIZD,WAJY,EAKZnE,6BALY,CAAd;AAOAqE,MAAAA,kBAAkB,CAACD,WAAD,CAAlB;AACD,KAzCD,CAyCE,OAAOE,qBAAP,EAA8B;AAC9B;AACAH,MAAAA,WAAW,GAAGG,qBAAd;;AACA,UAAIj2B,cAAc,KAAK+1B,WAAnB,IAAkCA,WAAW,KAAK,IAAtD,EAA4D;AAC1D;AACA;AACAA,QAAAA,WAAW,GAAGA,WAAW,CAAC15C,MAA1B;AACA2jB,QAAAA,cAAc,GAAG+1B,WAAjB;AACD,OALD,MAKO;AACLA,QAAAA,WAAW,GAAG/1B,cAAd;AACD;;AACD;AACD,KAvDA;;;AAyDD;AACD,GA1DD,QA0DS,IA1DT;AA2DD;;AAED,SAASk2B,cAAT,GAA0B;AACxB,QAAMC,cAAc,GAAGv3B,wBAAsB,CAACnmB,OAA9C;AACAmmB,EAAAA,wBAAsB,CAACnmB,OAAvB,GAAiCw8B,qBAAjC;;AACA,MAAIkhB,cAAc,KAAK,IAAvB,EAA6B;AAC3B;AACA;AACA;AACA,WAAOlhB,qBAAP;AACD,GALD,MAKO;AACL,WAAOkhB,cAAP;AACD;AACF;;AAED,SAASC,aAAT,CAAuBD,cAAvB,EAAuC;AACrCv3B,EAAAA,wBAAsB,CAACnmB,OAAvB,GAAiC09C,cAAjC;AACD;;AAED,AAAO,SAASlH,wBAAT,GAAoC;AACzCkD,EAAAA,4BAA4B,GAAGv/C,GAAG,EAAlC;AACD;AAED,AAAO,SAAS+1B,sBAAT,CAAgChS,IAAhC,EAA0D;AAC/Dq7B,EAAAA,8BAA8B,GAAG15B,UAAU,CACzC3B,IADyC,EAEzCq7B,8BAFyC,CAA3C;AAID;AAED,AAAO,SAAS9O,gBAAT,GAAkC;AACvC,MAAI2O,4BAA4B,KAAKV,cAArC,EAAqD;AACnDU,IAAAA,4BAA4B,GAAGP,aAA/B;AACD;AACF;AAED,AAAO,SAASnO,+BAAT,GAAiD;AACtD,MACE0O,4BAA4B,KAAKV,cAAjC,IACAU,4BAA4B,KAAKP,aAFnC,EAGE;AACAO,IAAAA,4BAA4B,GAAGN,sBAA/B;AACD,GANqD;AAStD;;;AACA,MACEG,kBAAkB,KAAK,IAAvB,KACCl6B,mBAAmB,CAACw6B,8BAAD,CAAnB,IACCx6B,mBAAmB,CAACy6B,8BAAD,CAFrB,CADF,EAIE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAl5B,IAAAA,mBAAiB,CAAC24B,kBAAD,EAAqBC,6BAArB,CAAjB;AACD;AACF;AAED,AAAO,SAAS7Q,cAAT,GAA0B;AAC/B,MAAI+Q,4BAA4B,KAAKL,aAArC,EAAoD;AAClDK,IAAAA,4BAA4B,GAAGR,WAA/B;AACD;AACF;AAGD;;AACA,AAAO,SAAS7N,wBAAT,GAA6C;AAClD;AACA;AACA,SAAOqO,4BAA4B,KAAKV,cAAxC;AACD;;AAED,SAASyD,cAAT,CAAwBljC,IAAxB,EAAyCgE,KAAzC,EAAuD;AACrD,QAAMm/B,oBAAoB,GAAGpD,gBAA7B;AACAA,EAAAA,gBAAgB,IAAIT,aAApB;AACA,QAAMmF,cAAc,GAAGD,cAAc,EAArC,CAHqD;AAMrD;;AACA,MAAIxE,kBAAkB,KAAKhgC,IAAvB,IAA+BigC,6BAA6B,KAAKj8B,KAArE,EAA4E;AAC1E;AAgBAs/B,IAAAA,iBAAiB,CAACtjC,IAAD,EAAOgE,KAAP,CAAjB;AACD;;AAYD,KAAG;AACD,QAAI;AACF2gC,MAAAA,YAAY;AACZ;AACD,KAHD,CAGE,OAAOP,WAAP,EAAoB;AACpBD,MAAAA,WAAW,CAACnkC,IAAD,EAAOokC,WAAP,CAAX;AACD;AACF,GAPD,QAOS,IAPT;;AAQA3xB,EAAAA,wBAAwB;AAExBstB,EAAAA,gBAAgB,GAAGoD,oBAAnB;AACAuB,EAAAA,aAAa,CAACD,cAAD,CAAb;;AAEA,MAAIn2B,cAAc,KAAK,IAAvB,EAA6B;AAC3B;AAD2B;AAAA;AAAA;AAO5B;;;AAaD0xB,EAAAA,kBAAkB,GAAG,IAArB;AACAC,EAAAA,6BAA6B,GAAG1+B,OAAhC;AAEA,SAAO4+B,4BAAP;AACD;;AAGD;;;AACA,SAASwE,YAAT,GAAwB;AACtB;AACA,SAAOr2B,cAAc,KAAK,IAA1B,EAAgC;AAC9Bs2B,IAAAA,iBAAiB,CAACt2B,cAAD,CAAjB;AACD;AACF;;AAED,SAAS20B,oBAAT,CAA8BjjC,IAA9B,EAA+CgE,KAA/C,EAA6D;AAC3D,QAAMm/B,oBAAoB,GAAGpD,gBAA7B;AACAA,EAAAA,gBAAgB,IAAIT,aAApB;AACA,QAAMmF,cAAc,GAAGD,cAAc,EAArC,CAH2D;AAM3D;;AACA,MAAIxE,kBAAkB,KAAKhgC,IAAvB,IAA+BigC,6BAA6B,KAAKj8B,KAArE,EAA4E;AAC1E;AAgBA88B,IAAAA,gBAAgB;AAChBwC,IAAAA,iBAAiB,CAACtjC,IAAD,EAAOgE,KAAP,CAAjB;AACD;;AAYD,KAAG;AACD,QAAI;AACF6gC,MAAAA,kBAAkB;AAClB;AACD,KAHD,CAGE,OAAOT,WAAP,EAAoB;AACpBD,MAAAA,WAAW,CAACnkC,IAAD,EAAOokC,WAAP,CAAX;AACD;AACF,GAPD,QAOS,IAPT;;AAQA3xB,EAAAA,wBAAwB;AAExBiyB,EAAAA,aAAa,CAACD,cAAD,CAAb;AACA1E,EAAAA,gBAAgB,GAAGoD,oBAAnB;;;AASA,MAAI70B,cAAc,KAAK,IAAvB,EAA6B;AAC3B;AAIA,WAAOmxB,cAAP;AACD,GAND,MAMO;AACL;;AAMAO,IAAAA,kBAAkB,GAAG,IAArB;AACAC,IAAAA,6BAA6B,GAAG1+B,OAAhC,CARK;;AAWL,WAAO4+B,4BAAP;AACD;AACF;AAED;;;AACA,SAAS0E,kBAAT,GAA8B;AAC5B;AACA,SAAOv2B,cAAc,KAAK,IAAnB,IAA2B,CAACxP,WAAW,EAA9C,EAAkD;AAChD8lC,IAAAA,iBAAiB,CAACt2B,cAAD,CAAjB;AACD;AACF;;AAED,SAASs2B,iBAAT,CAA2BE,UAA3B,EAAoD;AAClD;AACA;AACA;AACA,QAAM/9C,OAAO,GAAG+9C,UAAU,CAACz5C,SAA3B;AACA8uC,AAEA,MAAInzC,IAAJ;;AACA,EAIO;AACLA,IAAAA,IAAI,GAAG4xC,WAAS,CAAC7xC,OAAD,EAAU+9C,UAAV,EAAsBpS,kBAAtB,CAAhB;AACD;AAGDoS,EAAAA,UAAU,CAACnrB,aAAX,GAA2BmrB,UAAU,CAAC3qB,YAAtC;;AACA,MAAInzB,IAAI,KAAK,IAAb,EAAmB;AACjB;AACAs9C,IAAAA,kBAAkB,CAACQ,UAAD,CAAlB;AACD,GAHD,MAGO;AACLx2B,IAAAA,cAAc,GAAGtnB,IAAjB;AACD;;AAED4S,EAAAA,mBAAiB,CAAC7S,OAAlB,GAA4B,IAA5B;AACD;;AAED,SAASu9C,kBAAT,CAA4BQ,UAA5B,EAAqD;AACnD;AACA;AACA,MAAIvU,aAAa,GAAGuU,UAApB;;AACA,KAAG;AACD;AACA;AACA;AACA,UAAM/9C,OAAO,GAAGwpC,aAAa,CAACllC,SAA9B;AACA,UAAMovB,WAAW,GAAG8V,aAAa,CAAC5lC,MAAlC,CALC;;AAQD,QAAI,CAAC4lC,aAAa,CAACt2B,KAAd,GAAsBjB,UAAvB,MAAuCjB,OAA3C,EAAoD;AAClDoiC,AACA,UAAInzC,IAAJ;;AACA,MAGE;AACAA,QAAAA,IAAI,GAAG2pC,YAAY,CAAC5pC,OAAD,EAAUwpC,aAAV,EAAyBmC,kBAAzB,CAAnB;AACD,OALD;;AAaA,UAAI1rC,IAAI,KAAK,IAAb,EAAmB;AACjB;AACAsnB,QAAAA,cAAc,GAAGtnB,IAAjB;AACA;AACD;AACF,KArBD,MAqBO;AACL;AACA;AACA;AACA,YAAMA,IAAI,GAAG8xC,UAAU,CAACvI,aAAD,AAAA,CAAvB,CAJK;;AAQL,UAAIvpC,IAAI,KAAK,IAAb,EAAmB;AACjB;AACA;AACA;AACA;AACAA,QAAAA,IAAI,CAACiT,KAAL,IAAclB,cAAd;AACAuV,QAAAA,cAAc,GAAGtnB,IAAjB;AACA;AACD;;AAmBD,UAAIyzB,WAAW,KAAK,IAApB,EAA0B;AACxB;AACAA,QAAAA,WAAW,CAACxgB,KAAZ,IAAqBjB,UAArB;AACAyhB,QAAAA,WAAW,CAACiW,YAAZ,GAA2B34B,OAA3B;AACA0iB,QAAAA,WAAW,CAACkB,SAAZ,GAAwB,IAAxB;AACD;AACF;;AAED,UAAMopB,YAAY,GAAGxU,aAAa,CAAC31B,OAAnC;;AACA,QAAImqC,YAAY,KAAK,IAArB,EAA2B;AACzB;AACAz2B,MAAAA,cAAc,GAAGy2B,YAAjB;AACA;AACD,KA7EA;;;AA+EDxU,IAAAA,aAAa,GAAG9V,WAAhB,CA/EC;;AAiFDnM,IAAAA,cAAc,GAAGiiB,aAAjB;AACD,GAlFD,QAkFSA,aAAa,KAAK,IAlF3B,EAJmD;;;AAyFnD,MAAI4P,4BAA4B,KAAKV,cAArC,EAAqD;AACnDU,IAAAA,4BAA4B,GAAGL,aAA/B;AACD;AACF;;AAED,SAAS2D,UAAT,CAAoBzjC,IAApB,EAA0B;AACxB;AACA;AACA,QAAMglC,0BAA0B,GAAG78B,wBAAwB,EAA3D;AACA,QAAMuiB,cAAc,GAAG5Z,yBAAuB,CAACG,UAA/C;;AACA,MAAI;AACFH,IAAAA,yBAAuB,CAACG,UAAxB,GAAqC,CAArC;AACA7I,IAAAA,wBAAwB,CAAC/H,qBAAD,CAAxB;AACA4kC,IAAAA,cAAc,CAACjlC,IAAD,EAAOglC,0BAAP,CAAd;AACD,GAJD,SAIU;AACRl0B,IAAAA,yBAAuB,CAACG,UAAxB,GAAqCyZ,cAArC;AACAtiB,IAAAA,wBAAwB,CAAC48B,0BAAD,CAAxB;AACD;;AAED,SAAO,IAAP;AACD;;AAED,SAASC,cAAT,CAAwBjlC,IAAxB,EAA8BklC,mBAA9B,EAAmD;AACjD,KAAG;AACD;AACA;AACA;AACA;AACA;AACA;AACApC,IAAAA,mBAAmB;AACpB,GARD,QAQS3B,6BAA6B,KAAK,IAR3C;;AADiD,QAa/C,CAACpB,gBAAgB,IAAIT,aAAa,GAAGC,aAApB,CAAjB,MAAyDH,SAbV;AAAA;AAAA;;AAiBjD,QAAM9nB,YAAY,GAAGtX,IAAI,CAACsX,YAA1B;AACA,QAAMtT,KAAK,GAAGhE,IAAI,CAACujC,aAAnB;;AAYA,MAAIjsB,YAAY,KAAK,IAArB,EAA2B;AACzB;AAUA,WAAO,IAAP;AACD,GAZD;;AAsBAtX,EAAAA,IAAI,CAACsX,YAAL,GAAoB,IAApB;AACAtX,EAAAA,IAAI,CAACujC,aAAL,GAAqBhiC,OAArB;;AArDiD,QAwD/C+V,YAAY,KAAKtX,IAAI,CAACjZ,OAxDyB;AAAA;AAAA;AA8DjD;;;AACAiZ,EAAAA,IAAI,CAACmiC,YAAL,GAAoB,IAApB;AACAniC,EAAAA,IAAI,CAACoiC,gBAAL,GAAwB5gC,MAAxB,CAhEiD;AAmEjD;;AACA,MAAIkG,cAAc,GAAGd,UAAU,CAAC0Q,YAAY,CAACtT,KAAd,EAAqBsT,YAAY,CAACrE,UAAlC,CAA/B;AACAxL,EAAAA,gBAAgB,CAACzH,IAAD,EAAO0H,cAAP,CAAhB;;AAEA,MAAI1H,IAAI,KAAKggC,kBAAb,EAAiC;AAC/B;AACAA,IAAAA,kBAAkB,GAAG,IAArB;AACA1xB,IAAAA,cAAc,GAAG,IAAjB;AACA2xB,IAAAA,6BAA6B,GAAG1+B,OAAhC;AACD,GALD,AAvEiD;AAmFjD;AACA;AACA;AACA;;;AACA,MACE,CAAC+V,YAAY,CAACoZ,YAAb,GAA4Bh3B,WAA7B,MAA8C3B,OAA9C,IACA,CAACuf,YAAY,CAACrd,KAAb,GAAqBP,WAAtB,MAAuC3B,OAFzC,EAGE;AACA,QAAI,CAACmpC,0BAAL,EAAiC;AAC/BA,MAAAA,0BAA0B,GAAG,IAA7B;AACAviC,MAAAA,kBAAgB,CAAC+B,cAAD,EAA0B,MAAM;AAC9CoiC,QAAAA,mBAAmB;AACnB,eAAO,IAAP;AACD,OAHe,CAAhB;AAID;AACF,GAlGgD;AAqGjD;AACA;AACA;AACA;;;AACA,QAAMqC,iBAAiB,GACrB,CAAC7tB,YAAY,CAACoZ,YAAb,IACEp3B,kBAAkB,GAAGE,YAArB,GAAoCC,UAApC,GAAiDC,WADnD,CAAD,MAEA3B,OAHF;AAIA,QAAMqtC,aAAa,GACjB,CAAC9tB,YAAY,CAACrd,KAAb,IACEX,kBAAkB,GAAGE,YAArB,GAAoCC,UAApC,GAAiDC,WADnD,CAAD,MAEA3B,OAHF;;AAKA,MAAIotC,iBAAiB,IAAIC,aAAzB,EAAwC;AACtC,UAAM1a,cAAc,GAAG5Z,yBAAuB,CAACG,UAA/C;AACAH,IAAAA,yBAAuB,CAACG,UAAxB,GAAqC,CAArC;AACA,UAAM8Z,gBAAgB,GAAG5iB,wBAAwB,EAAjD;AACAC,IAAAA,wBAAwB,CAAC/H,qBAAD,CAAxB;AAEA,UAAM8iC,oBAAoB,GAAGpD,gBAA7B;AACAA,IAAAA,gBAAgB,IAAIR,aAApB,CAPsC;;AAUtC3lC,IAAAA,mBAAiB,CAAC7S,OAAlB,GAA4B,IAA5B,CAVsC;AAatC;AACA;AAEA;AACA;AACA;;AACA,UAAM8yC,iCAAiC,GAAGC,2BAA2B,CACnE95B,IADmE,EAEnEsX,YAFmE,CAArE;;;AAkBA2lB,IAAAA,qBAAqB,CAACj9B,IAAD,EAAOsX,YAAP,AAAA,CAArB;;AAOA3M,IAAAA,gBAAgB,CAAC3K,IAAI,CAACuK,aAAN,CAAhB,CA5CsC;AA+CtC;AACA;AACA;;AACAvK,IAAAA,IAAI,CAACjZ,OAAL,GAAeuwB,YAAf,CAlDsC;AAqDtC;AAUAqmB,IAAAA,mBAAmB,CAACrmB,YAAD,EAAetX,IAAf,EAAqBgE,KAArB,CAAnB;AAgBA;;;AACAjF,IAAAA,YAAY;AAEZghC,IAAAA,gBAAgB,GAAGoD,oBAAnB,CAlFsC;;AAqFtC/6B,IAAAA,wBAAwB,CAAC2iB,gBAAD,CAAxB;AACAja,IAAAA,yBAAuB,CAACG,UAAxB,GAAqCyZ,cAArC;AACD,GAvFD,MAuFO;AACL;AACA1qB,IAAAA,IAAI,CAACjZ,OAAL,GAAeuwB,YAAf,CAFK;AAIL,AAKD;;AAID,MAAI4pB,0BAAJ,EAAgC;AAC9B;AACA;AACAA,IAAAA,0BAA0B,GAAG,KAA7B;AACAC,IAAAA,6BAA6B,GAAGnhC,IAAhC;AACAohC,IAAAA,0BAA0B,GAAGp9B,KAA7B;AACD,GA5NgD;;;AA+NjD0D,EAAAA,cAAc,GAAG1H,IAAI,CAACoE,YAAtB,CA/NiD;AAkOjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAIsD,cAAc,KAAKnG,OAAvB,EAAgC;AAC9B;AACA;AACA0/B,IAAAA,sCAAsC,GAAG,IAAzC;AACD;;AAQDoE,EAAAA,YAAoB,CAAC/tB,YAAY,CAAC1rB,SAAd,EAAyBs5C,mBAAzB,CAApB;AAaA;;;AACAjD,EAAAA,qBAAqB,CAACjiC,IAAD,EAAO9e,GAAG,EAAV,CAArB;;AAEA,MAAI6/C,gBAAJ,EAAsB;AACpBA,IAAAA,gBAAgB,GAAG,KAAnB;AACA,UAAMjjD,KAAK,GAAGkjD,kBAAd;AACAA,IAAAA,kBAAkB,GAAG,IAArB;AACA,UAAMljD,KAAN;AACD,GA5QgD;AA+QjD;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,MACE2oB,gBAAgB,CAAC26B,0BAAD,EAA6B3/B,QAA7B,CAAhB,IACAzB,IAAI,CAACpV,GAAL,KAAaslB,UAFf,EAGE;AACA4yB,IAAAA,mBAAmB;AACpB,GA3RgD;;;AA8RjDp7B,EAAAA,cAAc,GAAG1H,IAAI,CAACoE,YAAtB;;AACA,MAAIqC,gBAAgB,CAACiB,cAAD,EAAkBjG,QAAlB,CAApB,EAAwD;AACtD,AAKA;;;AACA,QAAIzB,IAAI,KAAKuhC,qBAAb,EAAoC;AAClCD,MAAAA,iBAAiB;AAClB,KAFD,MAEO;AACLA,MAAAA,iBAAiB,GAAG,CAApB;AACAC,MAAAA,qBAAqB,GAAGvhC,IAAxB;AACD;AACF,GAbD,MAaO;AACLshC,IAAAA,iBAAiB,GAAG,CAApB;AACD,GA9SgD;;;AAiTjD5wB,EAAAA,kBAAkB;;AAYlB,SAAO,IAAP;AACD;;AAED,AAAO,SAASoyB,mBAAT,GAAwC;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA,MAAI3B,6BAA6B,KAAK,IAAtC,EAA4C;AAC1C,UAAMmE,cAAc,GAAG78B,oBAAoB,CAAC24B,0BAAD,CAA3C;AACA,UAAMmE,QAAQ,GAAGh9B,kBAAkB,CAAC9H,oBAAD,EAAuB6kC,cAAvB,CAAnC;AACA,UAAM5a,cAAc,GAAG5Z,yBAAuB,CAACG,UAA/C;AACA,UAAM8Z,gBAAgB,GAAG5iB,wBAAwB,EAAjD;;AACA,QAAI;AACF2I,MAAAA,yBAAuB,CAACG,UAAxB,GAAqC,CAArC;AACA7I,MAAAA,wBAAwB,CAACm9B,QAAD,CAAxB;AACA,aAAOC,uBAAuB,EAA9B;AACD,KAJD,SAIU;AACRp9B,MAAAA,wBAAwB,CAAC2iB,gBAAD,CAAxB;AACAja,MAAAA,yBAAuB,CAACG,UAAxB,GAAqCyZ,cAArC;AACD;AACF;;AACD,SAAO,KAAP;AACD;AAED;AAaA,SAAS8a,uBAAT,GAAmC;AACjC,MAAIrE,6BAA6B,KAAK,IAAtC,EAA4C;AAC1C,WAAO,KAAP;AACD;;AAED,QAAMnhC,IAAI,GAAGmhC,6BAAb;AACA,AACAA,EAAAA,6BAA6B,GAAG,IAAhC,CAPiC;AASjC;AACA;;AACAC,EAAAA,0BAA0B,GAAG7/B,OAA7B;;AAXiC,QAc/B,CAACw+B,gBAAgB,IAAIT,aAAa,GAAGC,aAApB,CAAjB,MAAyDH,SAd1B;AAAA;AAAA;;AA4BjC,QAAM+D,oBAAoB,GAAGpD,gBAA7B;AACAA,EAAAA,gBAAgB,IAAIR,aAApB;AAEAnB,EAAAA,2BAA2B,CAACp+B,IAAI,CAACjZ,OAAN,CAA3B;AACAi3C,EAAAA,yBAAyB,CAACh+B,IAAD,EAAOA,IAAI,CAACjZ,OAAZ,CAAzB,CAhCiC;;AA0DjCg5C,EAAAA,gBAAgB,GAAGoD,oBAAnB;AAEAzyB,EAAAA,kBAAkB,GA5De;AA+DjC;AAKA+0B,EAAAA,gBAAwB,CAACzlC,IAAD,CAAxB;;AAOA,SAAO,IAAP;AACD;;AAED,AAAO,SAASqvB,kCAAT,CAA4ChsC,QAA5C,EAAsE;AAC3E,SACE49C,sCAAsC,KAAK,IAA3C,IACAA,sCAAsC,CAACzS,GAAvC,CAA2CnrC,QAA3C,CAFF;AAID;AAED,AAAO,SAAS6qC,+BAAT,CAAyC7qC,QAAzC,EAA0D;AAC/D,MAAI49C,sCAAsC,KAAK,IAA/C,EAAqD;AACnDA,IAAAA,sCAAsC,GAAG,IAAI1S,GAAJ,CAAQ,CAAClrC,QAAD,CAAR,CAAzC;AACD,GAFD,MAEO;AACL49C,IAAAA,sCAAsC,CAACxS,GAAvC,CAA2CprC,QAA3C;AACD;AACF;;AAED,SAASqiD,2BAAT,CAAqC5nD,KAArC,EAAmD;AACjD,MAAI,CAACijD,gBAAL,EAAuB;AACrBA,IAAAA,gBAAgB,GAAG,IAAnB;AACAC,IAAAA,kBAAkB,GAAGljD,KAArB;AACD;AACF;;AACD,AAAO,MAAMgwC,eAAe,GAAG4X,2BAAxB;;AAEP,SAASC,6BAAT,CACEC,SADF,EAEE9W,WAFF,EAGEhxC,KAHF,EAIE;AACA,QAAMgvC,SAAS,GAAGJ,mBAAmB,CAAC5uC,KAAD,EAAQgxC,WAAR,CAArC;AACA,QAAMtb,MAAM,GAAGqa,qBAAqB,CAAC+X,SAAD,EAAY9Y,SAAZ,EAAwBrrB,QAAxB,CAApC;AACAiU,EAAAA,aAAa,CAACkwB,SAAD,EAAYpyB,MAAZ,AAAA,CAAb;AACA,QAAMnO,SAAS,GAAG0S,gBAAgB,EAAlC;AACA,QAAM/X,IAAI,GAAG+hC,6BAA6B,CAAC6D,SAAD,EAAankC,QAAb,CAA1C;;AACA,MAAIzB,IAAI,KAAK,IAAb,EAAmB;AACjBmH,IAAAA,eAAe,CAACnH,IAAD,EAAOyB,QAAP,EAAiB4D,SAAjB,CAAf;AACA48B,IAAAA,qBAAqB,CAACjiC,IAAD,EAAOqF,SAAP,CAArB;AACD;AACF;;AAED,AAAO,SAASo0B,uBAAT,CACL3K,WADK,EAELyK,sBAFK,EAGLz7C,KAHK,EAIL;AACA,MAAIgxC,WAAW,CAAClkC,GAAZ,KAAoBlD,QAAxB,EAAkC;AAChC;AACA;AACAi+C,IAAAA,6BAA6B,CAAC7W,WAAD,EAAcA,WAAd,EAA2BhxC,KAA3B,CAA7B;AACA;AACD;;AAED,MAAI0Z,KAAK,GAAG,IAAZ;;AACA,EAEO;AACLA,IAAAA,KAAK,GAAGs3B,WAAW,CAACnkC,MAApB;AACD;;AAED,SAAO6M,KAAK,KAAK,IAAjB,EAAuB;AACrB,QAAIA,KAAK,CAAC5M,GAAN,KAAclD,QAAlB,EAA4B;AAC1Bi+C,MAAAA,6BAA6B,CAACnuC,KAAD,EAAQs3B,WAAR,EAAqBhxC,KAArB,CAA7B;AACA;AACD,KAHD,MAGO,IAAI0Z,KAAK,CAAC5M,GAAN,KAAcpD,cAAlB,EAAkC;AACvC,YAAMkmB,IAAI,GAAGlW,KAAK,CAACjY,IAAnB;AACA,YAAM8D,QAAQ,GAAGmU,KAAK,CAAC5L,SAAvB;;AACA,UACE,OAAO8hB,IAAI,CAACsgB,wBAAZ,KAAyC,UAAzC,IACC,OAAO3qC,QAAQ,CAAC4qC,iBAAhB,KAAsC,UAAtC,IACC,CAACoB,kCAAkC,CAAChsC,QAAD,CAHvC,EAIE;AACA,cAAMypC,SAAS,GAAGJ,mBAAmB,CAAC5uC,KAAD,EAAQgxC,WAAR,CAArC;AACA,cAAMtb,MAAM,GAAGua,sBAAsB,CACnCv2B,KADmC,EAEnCs1B,SAFmC,EAGlCrrB,QAHkC,CAArC;AAKAiU,QAAAA,aAAa,CAACle,KAAD,EAAQgc,MAAR,AAAA,CAAb;AACA,cAAMnO,SAAS,GAAG0S,gBAAgB,EAAlC;AACA,cAAM/X,IAAI,GAAG+hC,6BAA6B,CAACvqC,KAAD,EAASiK,QAAT,CAA1C;;AACA,YAAIzB,IAAI,KAAK,IAAb,EAAmB;AACjBmH,UAAAA,eAAe,CAACnH,IAAD,EAAOyB,QAAP,EAAiB4D,SAAjB,CAAf;AACA48B,UAAAA,qBAAqB,CAACjiC,IAAD,EAAOqF,SAAP,CAArB;AACD;;AACD;AACD;AACF;;AACD7N,IAAAA,KAAK,GAAGA,KAAK,CAAC7M,MAAd;AACD;AAiBF;AAED,AAAO,SAASgkC,iBAAT,CACL3uB,IADK,EAELouB,QAFK,EAGL7pB,WAHK,EAIL;AACA,QAAM8pB,SAAS,GAAGruB,IAAI,CAACquB,SAAvB;;AACA,MAAIA,SAAS,KAAK,IAAlB,EAAwB;AACtB;AACA;AACAA,IAAAA,SAAS,CAACt9B,MAAV,CAAiBq9B,QAAjB;AACD;;AAED,QAAM/oB,SAAS,GAAG0S,gBAAgB,EAAlC;AACAzQ,EAAAA,cAAc,CAACtH,IAAD,EAAOuE,WAAP,AAAA,CAAd;;AAEA,MACEy7B,kBAAkB,KAAKhgC,IAAvB,IACA0G,eAAe,CAACu5B,6BAAD,EAAgC17B,WAAhC,CAFjB,EAGE;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA,QACE47B,4BAA4B,KAAKN,sBAAjC,IACCM,4BAA4B,KAAKP,aAAjC,IACC75B,mBAAmB,CAACk6B,6BAAD,CADpB,IAEC/+C,GAAG,KAAKu/C,4BAAR,GAAuCC,oBAJ3C,EAKE;AACA;AACA4C,MAAAA,iBAAiB,CAACtjC,IAAD,EAAOuB,OAAP,CAAjB;AACD,KARD,MAQO;AACL;AACA;AACAi/B,MAAAA,6BAA6B,GAAG55B,UAAU,CACxC45B,6BADwC,EAExCj8B,WAFwC,CAA1C;AAID;AACF;;AAED09B,EAAAA,qBAAqB,CAACjiC,IAAD,EAAOqF,SAAP,CAArB;AACD;;AAED,SAASwgC,qBAAT,CAA+BC,aAA/B,EAAqDvQ,SAArD,EAAsE;AACpE;AACA;AACA;AACA;AACA,MAAIA,SAAS,KAAK/zB,MAAlB,EAA0B;AACxB;AACA;AACA+zB,IAAAA,SAAS,GAAGqM,gBAAgB,CAACkE,aAAD,CAA5B;AACD,GATmE;;;AAWpE,QAAMzgC,SAAS,GAAG0S,gBAAgB,EAAlC;AACA,QAAM/X,IAAI,GAAG+hC,6BAA6B,CAAC+D,aAAD,EAAgBvQ,SAAhB,CAA1C;;AACA,MAAIv1B,IAAI,KAAK,IAAb,EAAmB;AACjBmH,IAAAA,eAAe,CAACnH,IAAD,EAAOu1B,SAAP,EAAkBlwB,SAAlB,CAAf;AACA48B,IAAAA,qBAAqB,CAACjiC,IAAD,EAAOqF,SAAP,CAArB;AACD;AACF;AAWM,SAAS03B,oBAAT,CAA8B+I,aAA9B,EAAoD1X,QAApD,EAAwE;AAC7E,MAAImH,SAAS,GAAG/zB,MAAhB,CAD6E;;AAE7E,MAAIq7B,UAAJ;;AACA,EAmBO;AACLA,IAAAA,UAAU,GAAGiJ,aAAa,CAACl6C,SAA3B;AACD;;AAED,MAAIixC,UAAU,KAAK,IAAnB,EAAyB;AACvB;AACA;AACAA,IAAAA,UAAU,CAAC9rC,MAAX,CAAkBq9B,QAAlB;AACD;;AAEDyX,EAAAA,qBAAqB,CAACC,aAAD,EAAgBvQ,SAAhB,CAArB;AACD;AAGD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASwO,GAAT,CAAagC,WAAb,EAAkC;AAChC,SAAOA,WAAW,GAAG,GAAd,GACH,GADG,GAEHA,WAAW,GAAG,GAAd,GACA,GADA,GAEAA,WAAW,GAAG,IAAd,GACA,IADA,GAEAA,WAAW,GAAG,IAAd,GACA,IADA,GAEAA,WAAW,GAAG,IAAd,GACA,IADA,GAEAA,WAAW,GAAG,IAAd,GACA,IADA,GAEA7G,IAAI,CAAC6G,WAAW,GAAG,IAAf,CAAJ,GAA2B,IAZ/B;AAaD;;AAED,SAASlE,qBAAT,GAAiC;AAC/B,MAAIP,iBAAiB,GAAGD,mBAAxB,EAA6C;AAC3CC,IAAAA,iBAAiB,GAAG,CAApB;AACAC,IAAAA,qBAAqB,GAAG,IAAxB;;AAF2C;AAAA;AAAA;AAU5C;AAaF;;AAkID,IAAI3I,WAAJ;;AACA,AAwEO;AACLA,EAAAA,WAAS,GAAGoN,SAAZ;AACD;;AAuED,SAASrnC,kBAAT,CAA0BsnC,aAA1B,EAAyCz/C,QAAzC,EAAmD;AACjD,EAUO;AACL;AACA,WAAO0/C,gBAA0B,CAACD,aAAD,EAAgBz/C,QAAhB,CAAjC;AACD;AACF;;AAED,SAASqY,gBAAT,CAAwBsjC,YAAxB,EAAsC;AACpC;;AAIA,SAAOgE,cAAwB,CAAChE,YAAD,CAA/B;AACD;;AAED,SAASuB,8BAAT,GAA0C;AACxC;AACA,SAAO9xB,KAAO,CAAd;AACD;;ACrgFD,SAASw0B,SAAT,CACEx7C,GADF,EAEEuvB,YAFF,EAGE/lB,GAHF,EAIEyoB,IAJF,EAKE;AACA;AACA,OAAKjyB,GAAL,GAAWA,GAAX;AACA,OAAKwJ,GAAL,GAAWA,GAAX;AACA,OAAK6lB,WAAL,GAAmB,IAAnB;AACA,OAAK16B,IAAL,GAAY,IAAZ;AACA,OAAKqM,SAAL,GAAiB,IAAjB,CANA;;AASA,OAAKjB,MAAL,GAAc,IAAd;AACA,OAAKgQ,KAAL,GAAa,IAAb;AACA,OAAKC,OAAL,GAAe,IAAf;AACA,OAAKlI,KAAL,GAAa,CAAb;AAEA,OAAKkoB,GAAL,GAAW,IAAX;AAEA,OAAKT,YAAL,GAAoBA,YAApB;AACA,OAAKR,aAAL,GAAqB,IAArB;AACA,OAAKhG,WAAL,GAAmB,IAAnB;AACA,OAAKwB,aAAL,GAAqB,IAArB;AACA,OAAKtrB,YAAL,GAAoB,IAApB;AAEA,OAAKgzB,IAAL,GAAYA,IAAZ,CAtBA;;AAyBA,OAAK5iB,KAAL,GAAalC,OAAb;AACA,OAAK24B,YAAL,GAAoB34B,OAApB;AACA,OAAK4jB,SAAL,GAAiB,IAAjB;AAEA,OAAK3X,KAAL,GAAazC,OAAb;AACA,OAAK0R,UAAL,GAAkB1R,OAAlB;AAEA,OAAKlW,SAAL,GAAiB,IAAjB;AAwCD;AAGD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAMg7C,WAAW,GAAG,UAClBz7C,GADkB,EAElBuvB,YAFkB,EAGlB/lB,GAHkB,EAIlByoB,IAJkB,EAKX;AACP;AACA,SAAO,IAAIupB,SAAJ,CAAcx7C,GAAd,EAAmBuvB,YAAnB,EAAiC/lB,GAAjC,EAAsCyoB,IAAtC,CAAP;AACD,CARD;;AAUA,SAASypB,eAAT,CAAyB/3B,SAAzB,EAA8C;AAC5C,QAAM9wB,SAAS,GAAG8wB,SAAS,CAAC9wB,SAA5B;AACA,SAAO,CAAC,EAAEA,SAAS,IAAIA,SAAS,CAAC8oD,gBAAzB,CAAR;AACD;;AAED,AAAO,SAASrT,yBAAT,CAAmC3zC,IAAnC,EAA8C;AACnD,SACE,OAAOA,IAAP,KAAgB,UAAhB,IACA,CAAC+mD,eAAe,CAAC/mD,IAAD,CADhB,IAEAA,IAAI,CAAC6yB,YAAL,KAAsB3yB,SAHxB;AAKD;AAED,AAAO,SAASw1C,uBAAT,CAAiC1mB,SAAjC,EAA+D;AACpE,MAAI,OAAOA,SAAP,KAAqB,UAAzB,EAAqC;AACnC,WAAO+3B,eAAe,CAAC/3B,SAAD,CAAf,GAA6B/mB,cAA7B,GAA8CD,iBAArD;AACD,GAFD,MAEO,IAAIgnB,SAAS,KAAK9uB,SAAd,IAA2B8uB,SAAS,KAAK,IAA7C,EAAmD;AACxD,UAAM3X,QAAQ,GAAG2X,SAAS,CAAC3X,QAA3B;;AACA,QAAIA,QAAQ,KAAK5B,sBAAjB,EAAyC;AACvC,aAAO9M,UAAP;AACD;;AACD,QAAI0O,QAAQ,KAAKzB,eAAjB,EAAkC;AAChC,aAAO9M,aAAP;AACD;AACF;;AACD,SAAOZ,sBAAP;AACD;;AAGD,AAAO,SAASy0B,oBAAT,CAA8Bn1B,OAA9B,EAA8CozB,YAA9C,EAAwE;AAC7E,MAAI7L,cAAc,GAAGvnB,OAAO,CAACsE,SAA7B;;AACA,MAAIijB,cAAc,KAAK,IAAvB,EAA6B;AAC3B;AACA;AACA;AACA;AACA;AACAA,IAAAA,cAAc,GAAG+3B,WAAW,CAC1Bt/C,OAAO,CAAC6D,GADkB,EAE1BuvB,YAF0B,EAG1BpzB,OAAO,CAACqN,GAHkB,EAI1BrN,OAAO,CAAC81B,IAJkB,CAA5B;AAMAvO,IAAAA,cAAc,CAAC2L,WAAf,GAA6BlzB,OAAO,CAACkzB,WAArC;AACA3L,IAAAA,cAAc,CAAC/uB,IAAf,GAAsBwH,OAAO,CAACxH,IAA9B;AACA+uB,IAAAA,cAAc,CAAC1iB,SAAf,GAA2B7E,OAAO,CAAC6E,SAAnC;;AAUA0iB,IAAAA,cAAc,CAACjjB,SAAf,GAA2BtE,OAA3B;AACAA,IAAAA,OAAO,CAACsE,SAAR,GAAoBijB,cAApB;AACD,GA1BD,MA0BO;AACLA,IAAAA,cAAc,CAAC6L,YAAf,GAA8BA,YAA9B,CADK;;AAGL7L,IAAAA,cAAc,CAAC/uB,IAAf,GAAsBwH,OAAO,CAACxH,IAA9B,CAHK;AAML;;AACA+uB,IAAAA,cAAc,CAACrU,KAAf,GAAuBlC,OAAvB,CAPK;;AAULuW,IAAAA,cAAc,CAACoiB,YAAf,GAA8B34B,OAA9B;AACAuW,IAAAA,cAAc,CAACqN,SAAf,GAA2B,IAA3B;AAUD,GAjD4E;AAoD7E;;;AACArN,EAAAA,cAAc,CAACrU,KAAf,GAAuBlT,OAAO,CAACkT,KAAR,GAAgBN,UAAvC;AACA2U,EAAAA,cAAc,CAAC2E,UAAf,GAA4BlsB,OAAO,CAACksB,UAApC;AACA3E,EAAAA,cAAc,CAACtK,KAAf,GAAuBjd,OAAO,CAACid,KAA/B;AAEAsK,EAAAA,cAAc,CAAC3T,KAAf,GAAuB5T,OAAO,CAAC4T,KAA/B;AACA2T,EAAAA,cAAc,CAACqL,aAAf,GAA+B5yB,OAAO,CAAC4yB,aAAvC;AACArL,EAAAA,cAAc,CAAC6G,aAAf,GAA+BpuB,OAAO,CAACouB,aAAvC;AACA7G,EAAAA,cAAc,CAACqF,WAAf,GAA6B5sB,OAAO,CAAC4sB,WAArC,CA5D6E;AA+D7E;;AACA,QAAM6yB,mBAAmB,GAAGz/C,OAAO,CAAC8C,YAApC;AACAykB,EAAAA,cAAc,CAACzkB,YAAf,GACE28C,mBAAmB,KAAK,IAAxB,GACI,IADJ,GAEI;AACExiC,IAAAA,KAAK,EAAEwiC,mBAAmB,CAACxiC,KAD7B;AAEEuP,IAAAA,YAAY,EAAEizB,mBAAmB,CAACjzB;AAFpC,GAHN,CAjE6E;;AA0E7EjF,EAAAA,cAAc,CAAC1T,OAAf,GAAyB7T,OAAO,CAAC6T,OAAjC;AACA0T,EAAAA,cAAc,CAAC5b,KAAf,GAAuB3L,OAAO,CAAC2L,KAA/B;AACA4b,EAAAA,cAAc,CAACsM,GAAf,GAAqB7zB,OAAO,CAAC6zB,GAA7B;;AA0BA,SAAOtM,cAAP;AACD;;AAGD,AAAO,SAAS2Q,mBAAT,CAA6B3Q,cAA7B,EAAoD0E,WAApD,EAAwE;AAC7E;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA1E,EAAAA,cAAc,CAACrU,KAAf,IAAwBN,UAAU,GAAG1B,SAArC,CAX6E;;AAe7E,QAAMlR,OAAO,GAAGunB,cAAc,CAACjjB,SAA/B;;AACA,MAAItE,OAAO,KAAK,IAAhB,EAAsB;AACpB;AACAunB,IAAAA,cAAc,CAAC2E,UAAf,GAA4B1R,OAA5B;AACA+M,IAAAA,cAAc,CAACtK,KAAf,GAAuBgP,WAAvB;AAEA1E,IAAAA,cAAc,CAAC3T,KAAf,GAAuB,IAAvB;AACA2T,IAAAA,cAAc,CAACoiB,YAAf,GAA8B34B,OAA9B;AACAuW,IAAAA,cAAc,CAACqL,aAAf,GAA+B,IAA/B;AACArL,IAAAA,cAAc,CAAC6G,aAAf,GAA+B,IAA/B;AACA7G,IAAAA,cAAc,CAACqF,WAAf,GAA6B,IAA7B;AAEArF,IAAAA,cAAc,CAACzkB,YAAf,GAA8B,IAA9B;AAEAykB,IAAAA,cAAc,CAAC1iB,SAAf,GAA2B,IAA3B;AAQD,GArBD,MAqBO;AACL;AACA0iB,IAAAA,cAAc,CAAC2E,UAAf,GAA4BlsB,OAAO,CAACksB,UAApC;AACA3E,IAAAA,cAAc,CAACtK,KAAf,GAAuBjd,OAAO,CAACid,KAA/B;AAEAsK,IAAAA,cAAc,CAAC3T,KAAf,GAAuB5T,OAAO,CAAC4T,KAA/B;AACA2T,IAAAA,cAAc,CAACoiB,YAAf,GAA8B34B,OAA9B;AACAuW,IAAAA,cAAc,CAACqN,SAAf,GAA2B,IAA3B;AACArN,IAAAA,cAAc,CAACqL,aAAf,GAA+B5yB,OAAO,CAAC4yB,aAAvC;AACArL,IAAAA,cAAc,CAAC6G,aAAf,GAA+BpuB,OAAO,CAACouB,aAAvC;AACA7G,IAAAA,cAAc,CAACqF,WAAf,GAA6B5sB,OAAO,CAAC4sB,WAArC,CAVK;;AAYLrF,IAAAA,cAAc,CAAC/uB,IAAf,GAAsBwH,OAAO,CAACxH,IAA9B,CAZK;AAeL;;AACA,UAAMinD,mBAAmB,GAAGz/C,OAAO,CAAC8C,YAApC;AACAykB,IAAAA,cAAc,CAACzkB,YAAf,GACE28C,mBAAmB,KAAK,IAAxB,GACI,IADJ,GAEI;AACExiC,MAAAA,KAAK,EAAEwiC,mBAAmB,CAACxiC,KAD7B;AAEEuP,MAAAA,YAAY,EAAEizB,mBAAmB,CAACjzB;AAFpC,KAHN;AAcD;;AAED,SAAOjF,cAAP;AACD;AAED,AAAO,SAASm4B,mBAAT,CACL77C,GADK,EAEL87C,YAFK,EAGLC,kCAHK,EAIE;AACP,MAAI9pB,IAAJ;;AACA,MAAIjyB,GAAG,KAAKulB,cAAZ,EAA4B;AAC1B0M,IAAAA,IAAI,GAAG3b,cAAP;;AACA,QAAIwlC,YAAY,KAAK,IAArB,EAA2B;AACzB7pB,MAAAA,IAAI,IAAIxb,gBAAR;AAKD,KAND;AAkBD,GApBD,MAoBO;AACLwb,IAAAA,IAAI,GAAG5b,MAAP;AACD;;AASD,SAAOolC,WAAW,CAAC3+C,QAAD,EAAW,IAAX,EAAiB,IAAjB,EAAuBm1B,IAAvB,CAAlB;AACD;AAED,AAAO,SAASyW,2BAAT,CACL/zC,IADK;AAEL6U,GAFK,EAGL+lB,YAHK,EAILW,KAJK,EAKL+B,IALK,EAML7Y,KANK,EAOE;AACP,MAAI4iC,QAAQ,GAAGn/C,sBAAf,CADO;;AAGP,MAAI2rC,YAAY,GAAG7zC,IAAnB;;AACA,MAAI,OAAOA,IAAP,KAAgB,UAApB,EAAgC;AAC9B,QAAI+mD,eAAe,CAAC/mD,IAAD,CAAnB,EAA2B;AACzBqnD,MAAAA,QAAQ,GAAGp/C,cAAX;AAID,KALD;AAUD,GAXD,MAWO,IAAI,OAAOjI,IAAP,KAAgB,QAApB,EAA8B;AACnCqnD,IAAAA,QAAQ,GAAGh/C,aAAX;AACD,GAFM,MAEA;AACLi/C,IAAAA,MAAM,EAAE,QAAQtnD,IAAR;AACN,WAAKoV,mBAAL;AACE,eAAO4oB,uBAAuB,CAACpD,YAAY,CAAC9O,QAAd,EAAwBwR,IAAxB,EAA8B7Y,KAA9B,EAAqC5P,GAArC,CAA9B;;AACF,WAAKkB,6BAAL;AACEsxC,QAAAA,QAAQ,GAAG7+C,IAAX;AACA80B,QAAAA,IAAI,IAAIzb,gBAAR;AACA;;AACF,WAAKxM,sBAAL;AACEgyC,QAAAA,QAAQ,GAAG7+C,IAAX;AACA80B,QAAAA,IAAI,IAAIxb,gBAAR;;AAKA;;AACF,WAAKxM,mBAAL;AACE,eAAOiyC,uBAAuB,CAAC3sB,YAAD,EAAe0C,IAAf,EAAqB7Y,KAArB,EAA4B5P,GAA5B,CAA9B;;AACF,WAAKa,mBAAL;AACE,eAAO8xC,uBAAuB,CAAC5sB,YAAD,EAAe0C,IAAf,EAAqB7Y,KAArB,EAA4B5P,GAA5B,CAA9B;;AACF,WAAKc,wBAAL;AACE,eAAO8xC,2BAA2B,CAAC7sB,YAAD,EAAe0C,IAAf,EAAqB7Y,KAArB,EAA4B5P,GAA5B,CAAlC;;AACF,WAAKmB,oBAAL;AACE,eAAO0hC,wBAAwB,CAAC9c,YAAD,EAAe0C,IAAf,EAAqB7Y,KAArB,EAA4B5P,GAA5B,CAA/B;;AACF,WAAKoB,wBAAL;AACE,eAAOyxC,2BAA2B,CAAC9sB,YAAD,EAAe0C,IAAf,EAAqB7Y,KAArB,EAA4B5P,GAA5B,CAAlC;;AACF,WAAKiB,gBAAL;AACE;AAGF;;AACA,WAAKI,gBAAL;AACE;AAGF;;AACA;AAAS;AACP,cAAI,OAAOlW,IAAP,KAAgB,QAAhB,IAA4BA,IAAI,KAAK,IAAzC,EAA+C;AAC7C,oBAAQA,IAAI,CAACqX,QAAb;AACE,mBAAK9B,mBAAL;AACE8xC,gBAAAA,QAAQ,GAAG3+C,eAAX;AACA,sBAAM4+C,MAAN;;AACF,mBAAK9xC,kBAAL;AACE;AACA6xC,gBAAAA,QAAQ,GAAG5+C,eAAX;AACA,sBAAM6+C,MAAN;;AACF,mBAAK7xC,sBAAL;AACE4xC,gBAAAA,QAAQ,GAAG1+C,UAAX;;AAIA,sBAAM2+C,MAAN;;AACF,mBAAK1xC,eAAL;AACEyxC,gBAAAA,QAAQ,GAAGv+C,aAAX;AACA,sBAAMw+C,MAAN;;AACF,mBAAKzxC,eAAL;AACEwxC,gBAAAA,QAAQ,GAAGr+C,aAAX;AACA6qC,gBAAAA,YAAY,GAAG,IAAf;AACA,sBAAMyT,MAAN;AApBJ;AAsBD;;AACD,cAAI/0B,IAAI,GAAG,EAAX;;AAzBO;AAAA,2JAgDLvyB,IAAI,IAAI,IAAR,GAAeA,IAAf,GAAsB,OAAOA,IAhDxB,UAiDLuyB,IAjDK;AAAA;AAmDR;AAtFK;AAwFT;;AAED,QAAMta,KAAK,GAAG6uC,WAAW,CAACO,QAAD,EAAWzsB,YAAX,EAAyB/lB,GAAzB,EAA8ByoB,IAA9B,CAAzB;AACArlB,EAAAA,KAAK,CAACyiB,WAAN,GAAoB16B,IAApB;AACAiY,EAAAA,KAAK,CAACjY,IAAN,GAAa6zC,YAAb;AACA57B,EAAAA,KAAK,CAACwM,KAAN,GAAcA,KAAd;;AAMA,SAAOxM,KAAP;AACD;AAED,AAmBO,SAASylB,sBAAT,CACLvC,OADK,EAELmC,IAFK,EAGL7Y,KAHK,EAIE;AACP,MAAI8W,KAAK,GAAG,IAAZ;;AAIA,QAAMv7B,IAAI,GAAGm7B,OAAO,CAACn7B,IAArB;AACA,QAAM6U,GAAG,GAAGsmB,OAAO,CAACtmB,GAApB;AACA,QAAM+lB,YAAY,GAAGO,OAAO,CAAC7uB,KAA7B;AACA,QAAM2L,KAAK,GAAG87B,2BAA2B,CACvC/zC,IADuC,EAEvC6U,GAFuC,EAGvC+lB,YAHuC,EAIvCW,KAJuC,EAKvC+B,IALuC,EAMvC7Y,KANuC,CAAzC;;AAYA,SAAOxM,KAAP;AACD;AAED,AAAO,SAAS+lB,uBAAT,CACL2pB,QADK,EAELrqB,IAFK,EAGL7Y,KAHK,EAIL5P,GAJK,EAKE;AACP,QAAMoD,KAAK,GAAG6uC,WAAW,CAACv+C,QAAD,EAAWo/C,QAAX,EAAqB9yC,GAArB,EAA0ByoB,IAA1B,CAAzB;AACArlB,EAAAA,KAAK,CAACwM,KAAN,GAAcA,KAAd;AACA,SAAOxM,KAAP;AACD;;AAgBD,SAASsvC,uBAAT,CACE3sB,YADF,EAEE0C,IAFF,EAGE7Y,KAHF,EAIE5P,GAJF,EAKS;AACP;AASA,QAAMoD,KAAK,GAAG6uC,WAAW,CAACl+C,QAAD,EAAWgyB,YAAX,EAAyB/lB,GAAzB,EAA8ByoB,IAAI,GAAG1b,WAArC,CAAzB;AACA3J,EAAAA,KAAK,CAACyiB,WAAN,GAAoBplB,mBAApB;AACA2C,EAAAA,KAAK,CAACwM,KAAN,GAAcA,KAAd;;AASA,SAAOxM,KAAP;AACD;;AAED,AAAO,SAASuvC,uBAAT,CACL5sB,YADK,EAEL0C,IAFK,EAGL7Y,KAHK,EAIL5P,GAJK,EAKL;AACA,QAAMoD,KAAK,GAAG6uC,WAAW,CAACj+C,iBAAD,EAAoB+xB,YAApB,EAAkC/lB,GAAlC,EAAuCyoB,IAAvC,CAAzB;AACArlB,EAAAA,KAAK,CAACyiB,WAAN,GAAoBhlB,mBAApB;AACAuC,EAAAA,KAAK,CAACwM,KAAN,GAAcA,KAAd;AACA,SAAOxM,KAAP;AACD;AAED,AAAO,SAASwvC,2BAAT,CACL7sB,YADK,EAEL0C,IAFK,EAGL7Y,KAHK,EAIL5P,GAJK,EAKL;AACA,QAAMoD,KAAK,GAAG6uC,WAAW,CAAC39C,qBAAD,EAAwByxB,YAAxB,EAAsC/lB,GAAtC,EAA2CyoB,IAA3C,CAAzB;AACArlB,EAAAA,KAAK,CAACyiB,WAAN,GAAoB/kB,wBAApB;AACAsC,EAAAA,KAAK,CAACwM,KAAN,GAAcA,KAAd;AACA,SAAOxM,KAAP;AACD;AAED,AAAO,SAASy/B,wBAAT,CACL9c,YADK,EAEL0C,IAFK,EAGL7Y,KAHK,EAIL5P,GAJK,EAKL;AACA,QAAMoD,KAAK,GAAG6uC,WAAW,CAACz9C,kBAAD,EAAqBuxB,YAArB,EAAmC/lB,GAAnC,EAAwCyoB,IAAxC,CAAzB;AACArlB,EAAAA,KAAK,CAACyiB,WAAN,GAAoB1kB,oBAApB;AACAiC,EAAAA,KAAK,CAACwM,KAAN,GAAcA,KAAd;AACA,SAAOxM,KAAP;AACD;AAED,AAAO,SAASyvC,2BAAT,CACL9sB,YADK,EAEL0C,IAFK,EAGL7Y,KAHK,EAIL5P,GAJK,EAKL;AACA,QAAMoD,KAAK,GAAG6uC,WAAW,CAACx9C,qBAAD,EAAwBsxB,YAAxB,EAAsC/lB,GAAtC,EAA2CyoB,IAA3C,CAAzB;AACArlB,EAAAA,KAAK,CAACyiB,WAAN,GAAoBzkB,wBAApB;AACAgC,EAAAA,KAAK,CAACwM,KAAN,GAAcA,KAAd;AACA,SAAOxM,KAAP;AACD;AAED,AAYO,SAASolB,mBAAT,CACLuqB,OADK,EAELtqB,IAFK,EAGL7Y,KAHK,EAIE;AACP,QAAMxM,KAAK,GAAG6uC,WAAW,CAACx+C,QAAD,EAAWs/C,OAAX,EAAoB,IAApB,EAA0BtqB,IAA1B,CAAzB;AACArlB,EAAAA,KAAK,CAACwM,KAAN,GAAcA,KAAd;AACA,SAAOxM,KAAP;AACD;AAED,AAcO,SAAS6lB,qBAAT,CACLF,MADK,EAELN,IAFK,EAGL7Y,KAHK,EAIE;AACP,QAAMmW,YAAY,GAAGgD,MAAM,CAAC9R,QAAP,KAAoB,IAApB,GAA2B8R,MAAM,CAAC9R,QAAlC,GAA6C,EAAlE;AACA,QAAM7T,KAAK,GAAG6uC,WAAW,CAAC1+C,UAAD,EAAawyB,YAAb,EAA2BgD,MAAM,CAAC/oB,GAAlC,EAAuCyoB,IAAvC,CAAzB;AACArlB,EAAAA,KAAK,CAACwM,KAAN,GAAcA,KAAd;AACAxM,EAAAA,KAAK,CAAC5L,SAAN,GAAkB;AAChB2e,IAAAA,aAAa,EAAE4S,MAAM,CAAC5S,aADN;AAEhB68B,IAAAA,eAAe,EAAE,IAFD;AAEO;AACvBhqB,IAAAA,cAAc,EAAED,MAAM,CAACC;AAHP,GAAlB;AAKA,SAAO5lB,KAAP;AACD;;ACtvBD,SAAS6vC,aAAT,CAAuB98B,aAAvB,EAAsC3f,GAAtC,EAA2CumC,OAA3C,EAAoD;AAClD,OAAKvmC,GAAL,GAAWA,GAAX;AACA,OAAK2f,aAAL,GAAqBA,aAArB;AACA,OAAK68B,eAAL,GAAuB,IAAvB;AACA,OAAKrgD,OAAL,GAAe,IAAf;AACA,OAAKsnC,SAAL,GAAiB,IAAjB;AACA,OAAK/W,YAAL,GAAoB,IAApB;AACA,OAAKssB,aAAL,GAAqB54B,SAArB;AACA,OAAKhuB,OAAL,GAAe,IAAf;AACA,OAAKi0C,cAAL,GAAsB,IAAtB;AACA,OAAKE,OAAL,GAAeA,OAAf;AACA,OAAKgR,YAAL,GAAoB,IAApB;AACA,OAAKC,gBAAL,GAAwB5gC,MAAxB;AACA,OAAK2D,UAAL,GAAkB6B,aAAa,CAACzF,OAAD,CAA/B;AACA,OAAKkE,eAAL,GAAuBuB,aAAa,CAACpD,WAAD,CAApC;AAEA,OAAKQ,YAAL,GAAoB7C,OAApB;AACA,OAAK+C,cAAL,GAAsB/C,OAAtB;AACA,OAAKgD,WAAL,GAAmBhD,OAAnB;AACA,OAAKoE,YAAL,GAAoBpE,OAApB;AACA,OAAKiG,gBAAL,GAAwBjG,OAAxB;AACA,OAAKgiC,aAAL,GAAqBhiC,OAArB;AAEA,OAAKuD,cAAL,GAAsBvD,OAAtB;AACA,OAAKwD,aAAL,GAAqBiC,aAAa,CAACzF,OAAD,CAAlC;AAsCD;;AAED,AAAO,SAAS+lC,eAAT,CACL/8B,aADK,EAEL3f,GAFK,EAGLumC,OAHK,EAILoW,kBAJK,EAKLb,YALK,EAMLC,kCANK,EAOM;AACX,QAAM3mC,IAAe,GAAI,IAAIqnC,aAAJ,CAAkB98B,aAAlB,EAAiC3f,GAAjC,EAAsCumC,OAAtC,CAAzB;AAMA;;;AACA,QAAMqW,kBAAkB,GAAGf,mBAAmB,CAC5C77C,GAD4C,EAE5C87C,YAF4C,AAAA,CAA9C;AAKA1mC,EAAAA,IAAI,CAACjZ,OAAL,GAAeygD,kBAAf;AACAA,EAAAA,kBAAkB,CAAC57C,SAAnB,GAA+BoU,IAA/B;;AAEA,EAQO;AACL,UAAM0kB,YAAY,GAAG;AACnBhK,MAAAA,OAAO,EAAE;AADU,KAArB;AAGA8sB,IAAAA,kBAAkB,CAACryB,aAAnB,GAAmCuP,YAAnC;AACD;;AAEDzP,EAAAA,qBAAqB,CAACuyB,kBAAD,CAArB;AAEA,SAAOxnC,IAAP;AACD;;AC3HM,SAASynC,YAAT,CACLp8B,QADK,EAELd,aAFK;AAIL6S,cAJK,EAMQ;AAAA,MADbhpB,GACa,uEADE,IACF;AACb,SAAO;AACL;AACAwC,IAAAA,QAAQ,EAAElC,iBAFL;AAGLN,IAAAA,GAAG,EAAEA,GAAG,IAAI,IAAP,GAAc,IAAd,GAAqB,KAAKA,GAH1B;AAILiX,IAAAA,QAJK;AAKLd,IAAAA,aALK;AAML6S,IAAAA;AANK,GAAP;AAQD;;AC8GD,SAASsqB,oBAAT,CACEC,eADF,EAEU;AACR,MAAI,CAACA,eAAL,EAAsB;AACpB,WAAO15B,kBAAP;AACD;;AAED,QAAMzW,KAAK,GAAG6C,GAAW,CAACstC,eAAD,CAAzB;AACA,QAAMn4B,aAAa,GAAGS,0BAA0B,CAACzY,KAAD,CAAhD;;AAEA,MAAIA,KAAK,CAAC5M,GAAN,KAAcpD,cAAlB,EAAkC;AAChC,UAAM+mB,SAAS,GAAG/W,KAAK,CAACjY,IAAxB;;AACA,QAAIqxC,iBAAuB,CAACriB,SAAD,CAA3B,EAAwC;AACtC,aAAOgB,mBAAmB,CAAC/X,KAAD,EAAQ+W,SAAR,EAAmBiB,aAAnB,CAA1B;AACD;AACF;;AAED,SAAOA,aAAP;AACD;;AAED,SAASo4B,gBAAT,CAA0BxtC,SAA1B,EAAoE;AAClE,QAAM5C,KAAK,GAAG6C,GAAW,CAACD,SAAD,CAAzB;;AACA,MAAI5C,KAAK,KAAK/X,SAAd,EAAyB;AACvB,QAAI,OAAO2a,SAAS,CAACrD,MAAjB,KAA4B,UAAhC,EAA4C;AAAA;AAAA;AAAA;AAE3C,KAFD,MAEO;AAAA;AAAA,4EAIH3U,MAAM,CAACqvB,IAAP,CAAYrX,SAAZ,CAJG;AAAA;AAMN;AACF;;AACD,QAAMytC,SAAS,GAAG/sC,oBAAoB,CAACtD,KAAD,CAAtC;;AACA,MAAIqwC,SAAS,KAAK,IAAlB,EAAwB;AACtB,WAAO,IAAP;AACD;;AACD,SAAOA,SAAS,CAACj8C,SAAjB;AACD;;AAsED,AAAO,SAASk8C,eAAT,CACLv9B,aADK,EAEL3f,GAFK,EAGLumC,OAHK,EAILoW,kBAJK,EAKLb,YALK,EAMLC,kCANK,EAOO;AACZ,SAAOW,eAAe,CACpB/8B,aADoB,EAEpB3f,GAFoB,EAGpBumC,OAHoB,EAIpBoW,kBAJoB,EAKpBb,YALoB,AAAA,CAAtB;AAQD;AAED,AAAO,SAASqB,eAAT,CACLrtB,OADK,EAEL7N,SAFK,EAGL86B,eAHK,EAILnhD,QAJK,EAKC;AACN;AAGA,QAAMO,OAAO,GAAG8lB,SAAS,CAAC9lB,OAA1B;AACA,QAAMse,SAAS,GAAG0S,gBAAgB,EAAlC;AACA,QAAM9S,IAAI,GAAG+S,iBAAiB,CAACjxB,OAAD,CAA9B;;AAMA,QAAM/J,OAAO,GAAG0qD,oBAAoB,CAACC,eAAD,CAApC;;AACA,MAAI96B,SAAS,CAAC7vB,OAAV,KAAsB,IAA1B,EAAgC;AAC9B6vB,IAAAA,SAAS,CAAC7vB,OAAV,GAAoBA,OAApB;AACD,GAFD,MAEO;AACL6vB,IAAAA,SAAS,CAACokB,cAAV,GAA2Bj0C,OAA3B;AACD;;AAmBD,QAAMw2B,MAAM,GAAGC,YAAY,CAACpO,SAAD,EAAYJ,IAAZ,CAA3B,CApCM;AAsCN;;AACAuO,EAAAA,MAAM,CAACtc,OAAP,GAAiB;AAACwjB,IAAAA;AAAD,GAAjB;AAEAl0B,EAAAA,QAAQ,GAAGA,QAAQ,KAAK/G,SAAb,GAAyB,IAAzB,GAAgC+G,QAA3C;;AACA,MAAIA,QAAQ,KAAK,IAAjB,EAAuB;AACrB;AASAgtB,IAAAA,MAAM,CAAChtB,QAAP,GAAkBA,QAAlB;AACD;;AAEDkvB,EAAAA,aAAa,CAAC3uB,OAAD,EAAUysB,MAAV,AAAA,CAAb;AACA,QAAMxT,IAAI,GAAGiY,qBAAqB,CAAClxB,OAAD,EAAUke,IAAV,EAAgBI,SAAhB,CAAlC;;AACA,MAAIrF,IAAI,KAAK,IAAb,EAAmB;AACjB4V,IAAAA,mBAAmB,CAAC5V,IAAD,EAAOjZ,OAAP,EAAgBke,IAAhB,CAAnB;AACD;;AAED,SAAOA,IAAP;AACD;AAED,AAUO,SAAS+iC,qBAAT,CACLn7B,SADK,EAE8C;AACnD,QAAMo7B,cAAc,GAAGp7B,SAAS,CAAC9lB,OAAjC;;AACA,MAAI,CAACkhD,cAAc,CAACttC,KAApB,EAA2B;AACzB,WAAO,IAAP;AACD;;AACD,UAAQstC,cAAc,CAACttC,KAAf,CAAqB/P,GAA7B;AACE,SAAKhD,aAAL;AACE,aAAOyiB,iBAAiB,CAAC49B,cAAc,CAACttC,KAAf,CAAqB/O,SAAtB,CAAxB;;AACF;AACE,aAAOq8C,cAAc,CAACttC,KAAf,CAAqB/O,SAA5B;AAJJ;AAMD;AAED,AA+GA,IAAIs8C,iBAAiB,GAAG,IAAxB;AACA,IAAIC,2BAA2B,GAAG,IAAlC;AACA,IAAIC,2BAA2B,GAAG,IAAlC;AACA,IAAIC,aAAa,GAAG,IAApB;AACA,IAAIC,uBAAuB,GAAG,IAA9B;AACA,IAAIC,uBAAuB,GAAG,IAA9B;AACA,IAAIC,cAAc,GAAG,IAArB;AACA,IAAIC,eAAe,GAAG,IAAtB;AACA,IAAIC,kBAAkB,GAAG,IAAzB;;AA+NA,SAASC,uBAAT,CAAiCnxC,KAAjC,EAA+E;AAC7E,QAAMqwC,SAAS,GAAG/sC,oBAAoB,CAACtD,KAAD,CAAtC;;AACA,MAAIqwC,SAAS,KAAK,IAAlB,EAAwB;AACtB,WAAO,IAAP;AACD;;AACD,SAAOA,SAAS,CAACj8C,SAAjB;AACD;;AAED,SAASg9C,4BAAT,CACEvlD,QADF,EAEgB;AACd,SAAO,IAAP;AACD;AA8BM,SAASwlD,kBAAT,CAA4BC,cAA5B,EAAqE;AAAA,QACnEC,uBADmE,GACxCD,cADwC,CACnEC,uBADmE;AAAA,QAEnE77B,sBAFmE,GAEzC3Y,oBAFyC,CAEnE2Y,sBAFmE;AAI1E,SAAO5N,eAAe,CAAC;AACrB0pC,IAAAA,UAAU,EAAEF,cAAc,CAACE,UADN;AAErB3mB,IAAAA,OAAO,EAAEymB,cAAc,CAACzmB,OAFH;AAGrB4mB,IAAAA,mBAAmB,EAAEH,cAAc,CAACG,mBAHf;AAIrBC,IAAAA,cAAc,EAAEJ,cAAc,CAACI,cAJV;AAKrBhB,IAAAA,iBALqB;AAMrBC,IAAAA,2BANqB;AAOrBC,IAAAA,2BAPqB;AAQrBC,IAAAA,aARqB;AASrBC,IAAAA,uBATqB;AAUrBC,IAAAA,uBAVqB;AAWrBE,IAAAA,eAXqB;AAYrBC,IAAAA,kBAZqB;AAarBF,IAAAA,cAbqB;AAcrBW,IAAAA,oBAAoB,EAAEj8B,sBAdD;AAerBy7B,IAAAA,uBAfqB;AAgBrBI,IAAAA,uBAAuB,EACrBA,uBAAuB,IAAIH,4BAjBR;AAkBrB;AACAQ,IAAAA,2BAA2B,EAAEx3B,CAAwC,IAnBhD;AAoBrBy3B,IAAAA,eAAe,EAAEz3B,CAA4B,IApBxB;AAqBrB03B,IAAAA,YAAY,EAAE13B,CAAyB,IArBlB;AAsBrB23B,IAAAA,iBAAiB,EAAE33B,CAA8B,IAtB5B;AAuBrB;AACA43B,IAAAA,eAAe,EAAE53B,CAAuC,IAxBnC;AAyBrB63B,IAAAA,eAAe,EAAE73B,CAAuC,IAzBnC;AA0BrB;AACA;AACA83B,IAAAA,iBAAiB,EAAEC;AA5BE,GAAD,CAAtB;AA8BD;;ICvuBGC,2BAAJ;AACA;AA+GA,IAAIC,0BAAJ;AACA,IAAIC,8BAAJ;;AAEA,AAsGO;AACLD,EAAAA,0BAA0B,GAAG,MAAM;AAAA;AAAA;AAAA;AAKlC,GALD;;AAOAC,EAAAA,8BAA8B,GAAG,CAC/BC,cAD+B,EAE/BC,aAF+B,EAG/BC,SAH+B,EAI/BC,SAJ+B,EAK/B1jD,QAL+B,KAMtB;AAAA;AAAA;AAAA;AAKV,GAXD;AAYD;;AC7ND,MAAMoT,mBAAiB,GAAGrF,oBAAoB,CAACqF,iBAA/C;;AAEA,SAASuwC,2BAAT,CACEC,iBADF,EAE2C;AACzC;AAiBA,MAAIA,iBAAiB,IAAI,IAAzB,EAA+B;AAC7B,WAAO,IAAP;AACD;;AACD,MAAIA,iBAAiB,CAACh5C,UAAtB,EAAkC;AAChC,WAAOg5C,iBAAP;AACD;;AACD,MAAIA,iBAAiB,CAAC/4C,SAAlB,IAA+B+4C,iBAAiB,CAAC/4C,SAAlB,CAA4BD,UAA/D,EAA2E;AACzE,WAAOg5C,iBAAiB,CAAC/4C,SAAzB;AACD;;AACD,MAAIoqC,YAAJ;;AACA,EAKO;AACLA,IAAAA,YAAY,GAAGmM,gBAAgB,CAACwC,iBAAD,CAA/B;AACD;;AAED,MAAI3O,YAAY,IAAI,IAApB,EAA0B;AACxB,WAAOA,YAAP;AACD;;AACD,MAAKA,YAAD,CAAoBpqC,SAAxB,EAAmC;AACjC;AACA,WAAQoqC,YAAD,CAAoBpqC,SAA3B;AACD,GA3CwC;;;AA6CzC,SAAOoqC,YAAP;AACD;;AAED,SAASsO,cAAT,CAAwBK,iBAAxB,EAAyD;AACvD;AAiBA,MAAIA,iBAAiB,IAAI,IAAzB,EAA+B;AAC7B,WAAO,IAAP;AACD;;AACD,MAAI,OAAOA,iBAAP,KAA6B,QAAjC,EAA2C;AACzC;AACA,WAAOA,iBAAP;AACD;;AACD,MAAIA,iBAAiB,CAACh5C,UAAtB,EAAkC;AAChC,WAAOg5C,iBAAiB,CAACh5C,UAAzB;AACD;;AACD,MAAIg5C,iBAAiB,CAAC/4C,SAAlB,IAA+B+4C,iBAAiB,CAAC/4C,SAAlB,CAA4BD,UAA/D,EAA2E;AACzE,WAAOg5C,iBAAiB,CAAC/4C,SAAlB,CAA4BD,UAAnC;AACD;;AACD,MAAIqqC,YAAJ;;AACA,EAKO;AACLA,IAAAA,YAAY,GAAGmM,gBAAgB,CAACwC,iBAAD,CAA/B;AACD;;AAED,MAAI3O,YAAY,IAAI,IAApB,EAA0B;AACxB,WAAOA,YAAP;AACD;;AACD,MAAKA,YAAD,CAAoBpqC,SAAxB,EAAmC;AACjC;AACA,WAAQoqC,YAAD,CAAoBpqC,SAApB,CAA8BD,UAArC;AACD;;AACD,SAAOqqC,YAAY,CAACrqC,UAApB;AACD;;AAED,SAASi5C,eAAT,CAAyBC,MAAzB,EAAsCC,OAAtC,EAAuDC,IAAvD,EAAyE;AACvE,MAAIF,MAAM,CAACl5C,UAAP,IAAqB,IAAzB,EAA+B;AAC7B;AAMA;AACD;;AAED,MAAIk5C,MAAM,CAACG,uBAAP,IAAkC,IAAtC,EAA4C;AAAA,UACnC7+C,SADmC,GACtB0+C,MAAM,CAACG,uBADe,CACnC7+C,SADmC;;AAE1C,QAAIA,SAAS,IAAI,IAAjB,EAAuB;AACrB8+C,MAAAA,qBAAqB,CAACL,eAAtB,CAAsCz+C,SAAS,CAACkO,IAAhD,EAAsDywC,OAAtD,EAA+DC,IAA/D;AACD;AACF,GALD,MAKO;AACLz2C,IAAAA,qCAAS,CAAC42C,0BAAV,CAAqCL,MAAM,CAACl5C,UAA5C,EAAwDm5C,OAAxD,EAAiEC,IAAjE;AACD;AACF;;AAED,SAASI,sBAAT,CAAgCN,MAAhC,EAA6CO,SAA7C,EAAgE;AAC9D,MAAIP,MAAM,CAACl5C,UAAP,IAAqB,IAAzB,EAA+B;AAC7B;AAMA;AACD;;AAED,MAAIk5C,MAAM,CAACG,uBAAP,IAAkC,IAAtC,EAA4C;AAAA,UACnC7+C,SADmC,GACtB0+C,MAAM,CAACG,uBADe,CACnC7+C,SADmC;;AAE1C,QAAIA,SAAS,IAAI,IAAjB,EAAuB;AACrB8+C,MAAAA,qBAAqB,CAACE,sBAAtB,CAA6Ch/C,SAAS,CAACkO,IAAvD,EAA6D+wC,SAA7D;AACD;AACF,GALD,MAKO;AACLC,IAAAA,wDAA4B,CAACR,MAAM,CAACl5C,UAAR,EAAoBy5C,SAApB,CAA5B;AACD;AACF;;AAED,SAAS9zC,MAAT,CACE2jB,OADF,EAEEqwB,YAFF,EAGEvkD,QAHF,EAI4B;AAC1B,MAAIwZ,IAAI,GAAGgrC,KAAK,CAAC/5C,GAAN,CAAU85C,YAAV,CAAX;;AAEA,MAAI,CAAC/qC,IAAL,EAAW;AACT;AACA;AACAA,IAAAA,IAAI,GAAG8nC,eAAe,CAACiD,YAAD,EAAe76B,UAAf,EAA2B,KAA3B,EAAkC,IAAlC,EAAwC,KAAxC,AAAA,CAAtB;AACA86B,IAAAA,KAAK,CAACn6C,GAAN,CAAUk6C,YAAV,EAAwB/qC,IAAxB;AACD;;AACD+nC,EAAAA,eAAe,CAACrtB,OAAD,EAAU1a,IAAV,EAAgB,IAAhB,EAAsBxZ,QAAtB,CAAf,CAT0B;;AAY1B,SAAOwhD,qBAAqB,CAAChoC,IAAD,CAA5B;AACD;;AAED,SAASirC,sBAAT,CAAgCF,YAAhC,EAAsD;AACpD,QAAM/qC,IAAI,GAAGgrC,KAAK,CAAC/5C,GAAN,CAAU85C,YAAV,CAAb;;AACA,MAAI/qC,IAAJ,EAAU;AACR;AACA+nC,IAAAA,eAAe,CAAC,IAAD,EAAO/nC,IAAP,EAAa,IAAb,EAAmB,MAAM;AACtCgrC,MAAAA,KAAK,CAACj6C,MAAN,CAAag6C,YAAb;AACD,KAFc,CAAf;AAGD;AACF;;AAED,SAASG,wCAAT,CAAkDH,YAAlD,EAAwE;AACtEE,EAAAA,sBAAsB,CAACF,YAAD,CAAtB,CADsE;;AAItEh3C,EAAAA,qCAAS,CAACo3C,cAAV,CAAyBJ,YAAzB;AACD;;AAED,SAAStD,cAAT,CACEp8B,QADF,EAEE0/B,YAFF,EAIE;AAAA,MADA32C,GACA,uEADe,IACf;AACA,SAAOg3C,YAAgB,CAAC//B,QAAD,EAAW0/B,YAAX,EAAyB,IAAzB,EAA+B32C,GAA/B,CAAvB;AACD;;AAEDzC,yBAAyB,CAACJ,gBAAD,CAAzB;;AAEA,SAAS85C,sCAAT,CAAgDC,QAAhD,EAA0E;AACxE,QAAM9zC,KAAK,GAAG+zC,kBAA0B,CAACD,QAAD,CAAxC;;AACA,MAAI,CAAC9zC,KAAL,EAAY;AACV,WAAO,EAAP;AACD;;AACD,SAAOqa,2BAA2B,CAACra,KAAD,CAAlC;AACD;;AAED,MAAMwzC,KAAK,GAAG,IAAIv6C,GAAJ,EAAd;AAEA,MAAM+6C,SAAS,GAAG;AAChBH,EAAAA;AADgB,CAAlB;AAIA,AAkBAxC,kBAAkB,CAAC;AACjBE,EAAAA,uBAAuB,EAAEwC,kBADR;AAEjBvC,EAAAA,UAAU,EAAEp3B,CAAc,CAFT;AAGjByQ,EAAAA,OAAO,EAAEsnB,YAHQ;AAIjBV,EAAAA,mBAAmB,EAAE,uBAJJ;AAKjBC,EAAAA,cAAc,EAAE;AACdW,IAAAA,0BAA0B,EAAEA,0BADd;AAEdC,IAAAA,8BAA8B,EAAEA,8BAA8B,CAAC/kB,IAA/B,CAC9B,IAD8B,EAE9BglB,cAF8B;AAFlB;AALC,CAAD,CAAlB;;;;;;;;;;;;;;"}