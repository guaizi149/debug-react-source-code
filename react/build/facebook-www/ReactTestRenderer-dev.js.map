{"version":3,"file":"ReactTestRenderer-dev.js","sources":["../../packages/shared/forks/consoleWithStackDev.www.js","../../packages/shared/ReactInstanceMap.js","../../packages/shared/ReactSharedInternals.js","../../packages/react-reconciler/src/ReactWorkTags.js","../../packages/shared/ReactSymbols.js","../../packages/shared/getComponentNameFromType.js","../../packages/react-reconciler/src/getComponentNameFromFiber.js","../../packages/shared/forks/ReactFeatureFlags.test-renderer.www.js","../../packages/react-reconciler/src/ReactFiberFlags.js","../../packages/react-reconciler/src/ReactFiberTreeReflection.js","../../packages/shared/isArray.js","../../packages/react-reconciler/src/Scheduler.js","../../packages/react-reconciler/src/ReactFiberDevToolsHook.old.js","../../packages/react-reconciler/src/ReactTypeOfMode.js","../../packages/react-reconciler/src/ReactFiberLane.old.js","../../packages/react-reconciler/src/ReactEventPriorities.old.js","../../packages/react-reconciler/src/ReactFiberHostConfigWithNoHydration.js","../../packages/react-test-renderer/src/ReactTestHostConfig.js","../../packages/shared/ConsolePatchingDev.js","../../packages/shared/ReactComponentStackFrame.js","../../packages/shared/hasOwnProperty.js","../../packages/shared/checkPropTypes.js","../../packages/react-reconciler/src/ReactFiberStack.old.js","../../packages/react-reconciler/src/ReactFiberContext.old.js","../../packages/react-reconciler/src/ReactRootTags.js","../../packages/react-reconciler/src/ReactFiberSyncTaskQueue.old.js","../../packages/shared/ReactVersion.js","../../packages/react-reconciler/src/ReactFiberTransition.js","../../packages/shared/objectIs.js","../../packages/shared/shallowEqual.js","../../packages/react-reconciler/src/ReactFiberComponentStack.js","../../packages/react-reconciler/src/ReactCurrentFiber.js","../../packages/react-reconciler/src/ReactStrictModeWarnings.old.js","../../packages/react-reconciler/src/ReactFiberLazyComponent.old.js","../../packages/react-reconciler/src/ReactFiberNewContext.old.js","../../packages/react-reconciler/src/ReactFiberInterleavedUpdates.old.js","../../packages/react-reconciler/src/ReactUpdateQueue.old.js","../../packages/react-reconciler/src/ReactFiberClassComponent.old.js","../../packages/react-reconciler/src/ReactChildFiber.old.js","../../packages/react-reconciler/src/ReactFiberHostContext.old.js","../../packages/react-reconciler/src/ReactFiberSuspenseContext.old.js","../../packages/react-reconciler/src/ReactFiberSuspenseComponent.old.js","../../packages/react-reconciler/src/ReactHookEffectTags.js","../../packages/react-reconciler/src/ReactFiberHydrationContext.old.js","../../packages/react-reconciler/src/ReactMutableSource.old.js","../../packages/react-reconciler/src/ReactFiberCacheComponent.old.js","../../packages/react-reconciler/src/ReactFiberHooks.old.js","../../packages/react-reconciler/src/ReactProfilerTimer.old.js","../../packages/react-reconciler/src/ReactCapturedValue.js","../../packages/react-reconciler/src/forks/ReactFiberErrorDialog.www.js","../../packages/react-reconciler/src/ReactFiberErrorLogger.js","../../packages/react-reconciler/src/ReactFiberThrow.old.js","../../packages/react-reconciler/src/ReactFiberScope.old.js","../../packages/react-reconciler/src/ReactFiberCompleteWork.old.js","../../packages/react-reconciler/src/ReactFiberBeginWork.old.js","../../packages/react-reconciler/src/ReactFiberUnwindWork.old.js","../../packages/shared/forks/invokeGuardedCallbackImpl.www.js","../../packages/shared/ReactErrorUtils.js","../../packages/react-reconciler/src/ReactFiberCommitWork.old.js","../../packages/react-reconciler/src/ReactTestSelectors.js","../../packages/react-reconciler/src/ReactFiberWorkLoop.old.js","../../packages/react-reconciler/src/ReactFiberHotReloading.old.js","../../packages/react-reconciler/src/ReactFiber.old.js","../../packages/react-reconciler/src/ReactFiberRoot.old.js","../../packages/react-reconciler/src/ReactFiberReconciler.old.js","../../packages/react-test-renderer/src/ReactTestRenderer.js"],"sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n// This refers to a WWW module.\nconst warningWWW = require('warning');\n\nlet suppressWarning = false;\nexport function setSuppressWarning(newSuppressWarning) {\n  if (__DEV__) {\n    suppressWarning = newSuppressWarning;\n  }\n}\n\nexport function warn(format, ...args) {\n  if (__DEV__) {\n    if (!suppressWarning) {\n      printWarning('warn', format, args);\n    }\n  }\n}\n\nexport function error(format, ...args) {\n  if (__DEV__) {\n    if (!suppressWarning) {\n      printWarning('error', format, args);\n    }\n  }\n}\n\nfunction printWarning(level, format, args) {\n  if (__DEV__) {\n    const React = require('react');\n    const ReactSharedInternals =\n      React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;\n    // Defensive in case this is fired before React is initialized.\n    if (ReactSharedInternals != null) {\n      const ReactDebugCurrentFrame =\n        ReactSharedInternals.ReactDebugCurrentFrame;\n      const stack = ReactDebugCurrentFrame.getStackAddendum();\n      if (stack !== '') {\n        format += '%s';\n        args.push(stack);\n      }\n    }\n    // TODO: don't ignore level and pass it down somewhere too.\n    args.unshift(format);\n    args.unshift(false);\n    warningWWW.apply(null, args);\n  }\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n/**\n * `ReactInstanceMap` maintains a mapping from a public facing stateful\n * instance (key) and the internal representation (value). This allows public\n * methods to accept the user facing instance as an argument and map them back\n * to internal methods.\n *\n * Note that this module is currently shared and assumed to be stateless.\n * If this becomes an actual Map, that will break.\n */\n\n/**\n * This API should be called `delete` but we'd have to make sure to always\n * transform these to strings for IE support. When this transform is fully\n * supported we can rename it.\n */\nexport function remove(key) {\n  key._reactInternals = undefined;\n}\n\nexport function get(key) {\n  return key._reactInternals;\n}\n\nexport function has(key) {\n  return key._reactInternals !== undefined;\n}\n\nexport function set(key, value) {\n  key._reactInternals = value;\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport * as React from 'react';\n\nconst ReactSharedInternals =\n  React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;\n\nexport default ReactSharedInternals;\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nexport type WorkTag =\n  | 0\n  | 1\n  | 2\n  | 3\n  | 4\n  | 5\n  | 6\n  | 7\n  | 8\n  | 9\n  | 10\n  | 11\n  | 12\n  | 13\n  | 14\n  | 15\n  | 16\n  | 17\n  | 18\n  | 19\n  | 20\n  | 21\n  | 22\n  | 23\n  | 24;\n\nexport const FunctionComponent = 0;\nexport const ClassComponent = 1;\nexport const IndeterminateComponent = 2; // Before we know whether it is function or class\nexport const HostRoot = 3; // Root of a host tree. Could be nested inside another node.\nexport const HostPortal = 4; // A subtree. Could be an entry point to a different renderer.\nexport const HostComponent = 5;\nexport const HostText = 6;\nexport const Fragment = 7;\nexport const Mode = 8;\nexport const ContextConsumer = 9;\nexport const ContextProvider = 10;\nexport const ForwardRef = 11;\nexport const Profiler = 12;\nexport const SuspenseComponent = 13;\nexport const MemoComponent = 14;\nexport const SimpleMemoComponent = 15;\nexport const LazyComponent = 16;\nexport const IncompleteClassComponent = 17;\nexport const DehydratedFragment = 18;\nexport const SuspenseListComponent = 19;\nexport const ScopeComponent = 21;\nexport const OffscreenComponent = 22;\nexport const LegacyHiddenComponent = 23;\nexport const CacheComponent = 24;\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\n// ATTENTION\n// When adding new symbols to this file,\n// Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'\n\n// The Symbol used to tag the ReactElement-like types. If there is no native Symbol\n// nor polyfill, then a plain number is used for performance.\nexport let REACT_ELEMENT_TYPE = 0xeac7;\nexport let REACT_PORTAL_TYPE = 0xeaca;\nexport let REACT_FRAGMENT_TYPE = 0xeacb;\nexport let REACT_STRICT_MODE_TYPE = 0xeacc;\nexport let REACT_PROFILER_TYPE = 0xead2;\nexport let REACT_PROVIDER_TYPE = 0xeacd;\nexport let REACT_CONTEXT_TYPE = 0xeace;\nexport let REACT_FORWARD_REF_TYPE = 0xead0;\nexport let REACT_SUSPENSE_TYPE = 0xead1;\nexport let REACT_SUSPENSE_LIST_TYPE = 0xead8;\nexport let REACT_MEMO_TYPE = 0xead3;\nexport let REACT_LAZY_TYPE = 0xead4;\nexport let REACT_SCOPE_TYPE = 0xead7;\nexport let REACT_OPAQUE_ID_TYPE = 0xeae0;\nexport let REACT_DEBUG_TRACING_MODE_TYPE = 0xeae1;\nexport let REACT_OFFSCREEN_TYPE = 0xeae2;\nexport let REACT_LEGACY_HIDDEN_TYPE = 0xeae3;\nexport let REACT_CACHE_TYPE = 0xeae4;\n\nif (typeof Symbol === 'function' && Symbol.for) {\n  const symbolFor = Symbol.for;\n  REACT_ELEMENT_TYPE = symbolFor('react.element');\n  REACT_PORTAL_TYPE = symbolFor('react.portal');\n  REACT_FRAGMENT_TYPE = symbolFor('react.fragment');\n  REACT_STRICT_MODE_TYPE = symbolFor('react.strict_mode');\n  REACT_PROFILER_TYPE = symbolFor('react.profiler');\n  REACT_PROVIDER_TYPE = symbolFor('react.provider');\n  REACT_CONTEXT_TYPE = symbolFor('react.context');\n  REACT_FORWARD_REF_TYPE = symbolFor('react.forward_ref');\n  REACT_SUSPENSE_TYPE = symbolFor('react.suspense');\n  REACT_SUSPENSE_LIST_TYPE = symbolFor('react.suspense_list');\n  REACT_MEMO_TYPE = symbolFor('react.memo');\n  REACT_LAZY_TYPE = symbolFor('react.lazy');\n  REACT_SCOPE_TYPE = symbolFor('react.scope');\n  REACT_OPAQUE_ID_TYPE = symbolFor('react.opaque.id');\n  REACT_DEBUG_TRACING_MODE_TYPE = symbolFor('react.debug_trace_mode');\n  REACT_OFFSCREEN_TYPE = symbolFor('react.offscreen');\n  REACT_LEGACY_HIDDEN_TYPE = symbolFor('react.legacy_hidden');\n  REACT_CACHE_TYPE = symbolFor('react.cache');\n}\n\nconst MAYBE_ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;\nconst FAUX_ITERATOR_SYMBOL = '@@iterator';\n\nexport function getIteratorFn(maybeIterable: ?any): ?() => ?Iterator<*> {\n  if (maybeIterable === null || typeof maybeIterable !== 'object') {\n    return null;\n  }\n  const maybeIterator =\n    (MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL]) ||\n    maybeIterable[FAUX_ITERATOR_SYMBOL];\n  if (typeof maybeIterator === 'function') {\n    return maybeIterator;\n  }\n  return null;\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {LazyComponent} from 'react/src/ReactLazy';\nimport type {ReactContext, ReactProviderType} from 'shared/ReactTypes';\n\nimport {\n  REACT_CONTEXT_TYPE,\n  REACT_FORWARD_REF_TYPE,\n  REACT_FRAGMENT_TYPE,\n  REACT_PORTAL_TYPE,\n  REACT_MEMO_TYPE,\n  REACT_PROFILER_TYPE,\n  REACT_PROVIDER_TYPE,\n  REACT_STRICT_MODE_TYPE,\n  REACT_SUSPENSE_TYPE,\n  REACT_SUSPENSE_LIST_TYPE,\n  REACT_LAZY_TYPE,\n  REACT_CACHE_TYPE,\n} from 'shared/ReactSymbols';\n\n// Keep in sync with react-reconciler/getComponentNameFromFiber\nfunction getWrappedName(\n  outerType: mixed,\n  innerType: any,\n  wrapperName: string,\n): string {\n  const displayName = (outerType: any).displayName;\n  if (displayName) {\n    return displayName;\n  }\n  const functionName = innerType.displayName || innerType.name || '';\n  return functionName !== '' ? `${wrapperName}(${functionName})` : wrapperName;\n}\n\n// Keep in sync with react-reconciler/getComponentNameFromFiber\nfunction getContextName(type: ReactContext<any>) {\n  return type.displayName || 'Context';\n}\n\n// Note that the reconciler package should generally prefer to use getComponentNameFromFiber() instead.\nexport default function getComponentNameFromType(type: mixed): string | null {\n  if (type == null) {\n    // Host root, text node or just invalid type.\n    return null;\n  }\n  if (__DEV__) {\n    if (typeof (type: any).tag === 'number') {\n      console.error(\n        'Received an unexpected object in getComponentNameFromType(). ' +\n          'This is likely a bug in React. Please file an issue.',\n      );\n    }\n  }\n  if (typeof type === 'function') {\n    return (type: any).displayName || type.name || null;\n  }\n  if (typeof type === 'string') {\n    return type;\n  }\n  switch (type) {\n    case REACT_FRAGMENT_TYPE:\n      return 'Fragment';\n    case REACT_PORTAL_TYPE:\n      return 'Portal';\n    case REACT_PROFILER_TYPE:\n      return 'Profiler';\n    case REACT_STRICT_MODE_TYPE:\n      return 'StrictMode';\n    case REACT_SUSPENSE_TYPE:\n      return 'Suspense';\n    case REACT_SUSPENSE_LIST_TYPE:\n      return 'SuspenseList';\n    case REACT_CACHE_TYPE:\n      return 'Cache';\n  }\n  if (typeof type === 'object') {\n    switch (type.$$typeof) {\n      case REACT_CONTEXT_TYPE:\n        const context: ReactContext<any> = (type: any);\n        return getContextName(context) + '.Consumer';\n      case REACT_PROVIDER_TYPE:\n        const provider: ReactProviderType<any> = (type: any);\n        return getContextName(provider._context) + '.Provider';\n      case REACT_FORWARD_REF_TYPE:\n        return getWrappedName(type, type.render, 'ForwardRef');\n      case REACT_MEMO_TYPE:\n        const outerName = (type: any).displayName || null;\n        if (outerName !== null) {\n          return outerName;\n        }\n        return getComponentNameFromType(type.type) || 'Memo';\n      case REACT_LAZY_TYPE: {\n        const lazyComponent: LazyComponent<any, any> = (type: any);\n        const payload = lazyComponent._payload;\n        const init = lazyComponent._init;\n        try {\n          return getComponentNameFromType(init(payload));\n        } catch (x) {\n          return null;\n        }\n      }\n    }\n  }\n  return null;\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {ReactContext, ReactProviderType} from 'shared/ReactTypes';\n\nimport {\n  FunctionComponent,\n  ClassComponent,\n  IndeterminateComponent,\n  HostRoot,\n  HostPortal,\n  HostComponent,\n  HostText,\n  Fragment,\n  Mode,\n  ContextConsumer,\n  ContextProvider,\n  ForwardRef,\n  Profiler,\n  SuspenseComponent,\n  MemoComponent,\n  SimpleMemoComponent,\n  LazyComponent,\n  IncompleteClassComponent,\n  DehydratedFragment,\n  SuspenseListComponent,\n  ScopeComponent,\n  OffscreenComponent,\n  LegacyHiddenComponent,\n  CacheComponent,\n} from 'react-reconciler/src/ReactWorkTags';\nimport getComponentNameFromType from 'shared/getComponentNameFromType';\nimport {REACT_STRICT_MODE_TYPE} from 'shared/ReactSymbols';\n\n// Keep in sync with shared/getComponentNameFromType\nfunction getWrappedName(\n  outerType: mixed,\n  innerType: any,\n  wrapperName: string,\n): string {\n  const functionName = innerType.displayName || innerType.name || '';\n  return (\n    (outerType: any).displayName ||\n    (functionName !== '' ? `${wrapperName}(${functionName})` : wrapperName)\n  );\n}\n\n// Keep in sync with shared/getComponentNameFromType\nfunction getContextName(type: ReactContext<any>) {\n  return type.displayName || 'Context';\n}\n\nexport default function getComponentNameFromFiber(fiber: Fiber): string | null {\n  const {tag, type} = fiber;\n  switch (tag) {\n    case CacheComponent:\n      return 'Cache';\n    case ContextConsumer:\n      const context: ReactContext<any> = (type: any);\n      return getContextName(context) + '.Consumer';\n    case ContextProvider:\n      const provider: ReactProviderType<any> = (type: any);\n      return getContextName(provider._context) + '.Provider';\n    case DehydratedFragment:\n      return 'DehydratedFragment';\n    case ForwardRef:\n      return getWrappedName(type, type.render, 'ForwardRef');\n    case Fragment:\n      return 'Fragment';\n    case HostComponent:\n      // Host component type is the display name (e.g. \"div\", \"View\")\n      return type;\n    case HostPortal:\n      return 'Portal';\n    case HostRoot:\n      return 'Root';\n    case HostText:\n      return 'Text';\n    case LazyComponent:\n      // Name comes from the type in this case; we don't have a tag.\n      return getComponentNameFromType(type);\n    case LegacyHiddenComponent:\n      return 'LegacyHidden';\n    case Mode:\n      if (type === REACT_STRICT_MODE_TYPE) {\n        // Don't be less specific than shared/getComponentNameFromType\n        return 'StrictMode';\n      }\n      return 'Mode';\n    case OffscreenComponent:\n      return 'Offscreen';\n    case Profiler:\n      return 'Profiler';\n    case ScopeComponent:\n      return 'Scope';\n    case SuspenseComponent:\n      return 'Suspense';\n    case SuspenseListComponent:\n      return 'SuspenseList';\n\n    // The display name for this tags come from the user-provided type:\n    case ClassComponent:\n    case FunctionComponent:\n    case IncompleteClassComponent:\n    case IndeterminateComponent:\n    case MemoComponent:\n    case SimpleMemoComponent:\n      if (typeof type === 'function') {\n        return (type: any).displayName || type.name || null;\n      }\n      if (typeof type === 'string') {\n        return type;\n      }\n      break;\n  }\n\n  return null;\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport typeof * as FeatureFlagsType from 'shared/ReactFeatureFlags';\nimport typeof * as ExportsType from './ReactFeatureFlags.test-renderer.www';\n\nexport const debugRenderPhaseSideEffectsForStrictMode = false;\nexport const enableDebugTracing = false;\nexport const enableSchedulingProfiler = false;\nexport const warnAboutDeprecatedLifecycles = true;\nexport const replayFailedUnitOfWorkWithInvokeGuardedCallback = false;\nexport const enableProfilerTimer = __PROFILE__;\nexport const enableProfilerCommitHooks = __PROFILE__;\nexport const enableProfilerNestedUpdatePhase = __PROFILE__;\nexport const enableProfilerNestedUpdateScheduledHook = false;\nexport const enableUpdaterTracking = false;\nexport const enableSuspenseServerRenderer = false;\nexport const enableSelectiveHydration = false;\nexport const enableLazyElements = false;\nexport const enableCache = false;\nexport const enableSchedulerDebugging = false;\nexport const disableJavaScriptURLs = false;\nexport const disableInputAttributeSyncing = false;\nexport const enableScopeAPI = true;\nexport const enableCreateEventHandleAPI = false;\nexport const enableSuspenseCallback = true;\nexport const warnAboutDefaultPropsOnFunctionComponents = false;\nexport const warnAboutStringRefs = false;\nexport const disableLegacyContext = false;\nexport const disableSchedulerTimeoutBasedOnReactExpirationTime = false;\nexport const enableTrustedTypesIntegration = false;\nexport const disableTextareaChildren = false;\nexport const disableModulePatternComponents = true;\nexport const warnUnstableRenderSubtreeIntoContainer = false;\nexport const warnAboutSpreadingKeyToJSX = false;\nexport const warnOnSubscriptionInsideStartTransition = false;\nexport const enableComponentStackLocations = true;\nexport const enableLegacyFBSupport = false;\nexport const enableFilterEmptyStringAttributesDOM = false;\nexport const disableNativeComponentFrames = false;\nexport const skipUnmountedBoundaries = false;\nexport const deletedTreeCleanUpLevel = 3;\nexport const enableSuspenseLayoutEffectSemantics = false;\nexport const enableGetInspectorDataForInstanceInProduction = false;\nexport const enableNewReconciler = false;\nexport const deferRenderPhaseUpdateToNextBatch = false;\n\nexport const enableStrictEffects = true;\nexport const createRootStrictEffectsByDefault = false;\nexport const enableUseRefAccessWarning = false;\n\nexport const enableRecursiveCommitTraversal = false;\nexport const disableSchedulerTimeoutInWorkLoop = false;\nexport const enableLazyContextPropagation = false;\nexport const enableSyncDefaultUpdates = true;\nexport const allowConcurrentByDefault = true;\nexport const enablePersistentOffscreenHostContainer = false;\n\nexport const consoleManagedByDevToolsDuringStrictMode = false;\n\n// Flow magic to verify the exports of this file match the original version.\n// eslint-disable-next-line no-unused-vars\ntype Check<_X, Y: _X, X: Y = _X> = null;\n// eslint-disable-next-line no-unused-expressions\n(null: Check<ExportsType, FeatureFlagsType>);\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport {enableCreateEventHandleAPI} from 'shared/ReactFeatureFlags';\n\nexport type Flags = number;\n\n// Don't change these two values. They're used by React Dev Tools.\nexport const NoFlags = /*                      */ 0b00000000000000000000000;\nexport const PerformedWork = /*                */ 0b00000000000000000000001;\n\n// You can change the rest (and add more).\nexport const Placement = /*                    */ 0b00000000000000000000010;\nexport const Update = /*                       */ 0b00000000000000000000100;\nexport const PlacementAndUpdate = /*           */ Placement | Update;\nexport const Deletion = /*                     */ 0b00000000000000000001000;\nexport const ChildDeletion = /*                */ 0b00000000000000000010000;\nexport const ContentReset = /*                 */ 0b00000000000000000100000;\nexport const Callback = /*                     */ 0b00000000000000001000000;\nexport const DidCapture = /*                   */ 0b00000000000000010000000;\nexport const Ref = /*                          */ 0b00000000000000100000000;\nexport const Snapshot = /*                     */ 0b00000000000001000000000;\nexport const Passive = /*                      */ 0b00000000000010000000000;\nexport const Hydrating = /*                    */ 0b00000000000100000000000;\nexport const HydratingAndUpdate = /*           */ Hydrating | Update;\nexport const Visibility = /*                   */ 0b00000000001000000000000;\n\nexport const LifecycleEffectMask = Passive | Update | Callback | Ref | Snapshot;\n\n// Union of all commit flags (flags with the lifetime of a particular commit)\nexport const HostEffectMask = /*               */ 0b00000000001111111111111;\n\n// These are not really side effects, but we still reuse this field.\nexport const Incomplete = /*                   */ 0b00000000010000000000000;\nexport const ShouldCapture = /*                */ 0b00000000100000000000000;\nexport const ForceUpdateForLegacySuspense = /* */ 0b00000001000000000000000;\nexport const DidPropagateContext = /*          */ 0b00000010000000000000000;\nexport const NeedsPropagation = /*             */ 0b00000100000000000000000;\n\n// Static tags describe aspects of a fiber that are not specific to a render,\n// e.g. a fiber uses a passive effect (even if there are no updates on this particular render).\n// This enables us to defer more work in the unmount case,\n// since we can defer traversing the tree during layout to look for Passive effects,\n// and instead rely on the static flag as a signal that there may be cleanup work.\nexport const RefStatic = /*                    */ 0b00001000000000000000000;\nexport const LayoutStatic = /*                 */ 0b00010000000000000000000;\nexport const PassiveStatic = /*                */ 0b00100000000000000000000;\n\n// These flags allow us to traverse to fibers that have effects on mount\n// without traversing the entire tree after every commit for\n// double invoking\nexport const MountLayoutDev = /*               */ 0b01000000000000000000000;\nexport const MountPassiveDev = /*              */ 0b10000000000000000000000;\n\n// Groups of flags that are used in the commit phase to skip over trees that\n// don't contain effects, by checking subtreeFlags.\n\nexport const BeforeMutationMask =\n  // TODO: Remove Update flag from before mutation phase by re-landing Visibility\n  // flag logic (see #20043)\n  Update |\n  Snapshot |\n  (enableCreateEventHandleAPI\n    ? // createEventHandle needs to visit deleted and hidden trees to\n      // fire beforeblur\n      // TODO: Only need to visit Deletions during BeforeMutation phase if an\n      // element is focused.\n      ChildDeletion | Visibility\n    : 0);\n\nexport const MutationMask =\n  Placement |\n  Update |\n  ChildDeletion |\n  ContentReset |\n  Ref |\n  Hydrating |\n  Visibility;\nexport const LayoutMask = Update | Callback | Ref | Visibility;\n\n// TODO: Split into PassiveMountMask and PassiveUnmountMask\nexport const PassiveMask = Passive | ChildDeletion;\n\n// Union of tags that don't get reset on clones.\n// This allows certain concepts to persist without recalculating them,\n// e.g. whether a subtree contains passive effects or portals.\nexport const StaticMask = LayoutStatic | PassiveStatic | RefStatic;\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Fiber} from './ReactInternalTypes';\nimport type {Container, SuspenseInstance} from './ReactFiberHostConfig';\nimport type {SuspenseState} from './ReactFiberSuspenseComponent.old';\n\nimport invariant from 'shared/invariant';\n\nimport {get as getInstance} from 'shared/ReactInstanceMap';\nimport ReactSharedInternals from 'shared/ReactSharedInternals';\nimport getComponentNameFromFiber from 'react-reconciler/src/getComponentNameFromFiber';\nimport {\n  ClassComponent,\n  HostComponent,\n  HostRoot,\n  HostPortal,\n  HostText,\n  SuspenseComponent,\n} from './ReactWorkTags';\nimport {NoFlags, Placement, Hydrating} from './ReactFiberFlags';\n\nconst ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;\n\nexport function getNearestMountedFiber(fiber: Fiber): null | Fiber {\n  let node = fiber;\n  let nearestMounted = fiber;\n  if (!fiber.alternate) {\n    // If there is no alternate, this might be a new tree that isn't inserted\n    // yet. If it is, then it will have a pending insertion effect on it.\n    let nextNode = node;\n    do {\n      node = nextNode;\n      if ((node.flags & (Placement | Hydrating)) !== NoFlags) {\n        // This is an insertion or in-progress hydration. The nearest possible\n        // mounted fiber is the parent but we need to continue to figure out\n        // if that one is still mounted.\n        nearestMounted = node.return;\n      }\n      nextNode = node.return;\n    } while (nextNode);\n  } else {\n    while (node.return) {\n      node = node.return;\n    }\n  }\n  if (node.tag === HostRoot) {\n    // TODO: Check if this was a nested HostRoot when used with\n    // renderContainerIntoSubtree.\n    return nearestMounted;\n  }\n  // If we didn't hit the root, that means that we're in an disconnected tree\n  // that has been unmounted.\n  return null;\n}\n\nexport function getSuspenseInstanceFromFiber(\n  fiber: Fiber,\n): null | SuspenseInstance {\n  if (fiber.tag === SuspenseComponent) {\n    let suspenseState: SuspenseState | null = fiber.memoizedState;\n    if (suspenseState === null) {\n      const current = fiber.alternate;\n      if (current !== null) {\n        suspenseState = current.memoizedState;\n      }\n    }\n    if (suspenseState !== null) {\n      return suspenseState.dehydrated;\n    }\n  }\n  return null;\n}\n\nexport function getContainerFromFiber(fiber: Fiber): null | Container {\n  return fiber.tag === HostRoot\n    ? (fiber.stateNode.containerInfo: Container)\n    : null;\n}\n\nexport function isFiberMounted(fiber: Fiber): boolean {\n  return getNearestMountedFiber(fiber) === fiber;\n}\n\nexport function isMounted(component: React$Component<any, any>): boolean {\n  if (__DEV__) {\n    const owner = (ReactCurrentOwner.current: any);\n    if (owner !== null && owner.tag === ClassComponent) {\n      const ownerFiber: Fiber = owner;\n      const instance = ownerFiber.stateNode;\n      if (!instance._warnedAboutRefsInRender) {\n        console.error(\n          '%s is accessing isMounted inside its render() function. ' +\n            'render() should be a pure function of props and state. It should ' +\n            'never access something that requires stale data from the previous ' +\n            'render, such as refs. Move this logic to componentDidMount and ' +\n            'componentDidUpdate instead.',\n          getComponentNameFromFiber(ownerFiber) || 'A component',\n        );\n      }\n      instance._warnedAboutRefsInRender = true;\n    }\n  }\n\n  const fiber: ?Fiber = getInstance(component);\n  if (!fiber) {\n    return false;\n  }\n  return getNearestMountedFiber(fiber) === fiber;\n}\n\nfunction assertIsMounted(fiber) {\n  invariant(\n    getNearestMountedFiber(fiber) === fiber,\n    'Unable to find node on an unmounted component.',\n  );\n}\n\nexport function findCurrentFiberUsingSlowPath(fiber: Fiber): Fiber | null {\n  const alternate = fiber.alternate;\n  if (!alternate) {\n    // If there is no alternate, then we only need to check if it is mounted.\n    const nearestMounted = getNearestMountedFiber(fiber);\n    invariant(\n      nearestMounted !== null,\n      'Unable to find node on an unmounted component.',\n    );\n    if (nearestMounted !== fiber) {\n      return null;\n    }\n    return fiber;\n  }\n  // If we have two possible branches, we'll walk backwards up to the root\n  // to see what path the root points to. On the way we may hit one of the\n  // special cases and we'll deal with them.\n  let a: Fiber = fiber;\n  let b: Fiber = alternate;\n  while (true) {\n    const parentA = a.return;\n    if (parentA === null) {\n      // We're at the root.\n      break;\n    }\n    const parentB = parentA.alternate;\n    if (parentB === null) {\n      // There is no alternate. This is an unusual case. Currently, it only\n      // happens when a Suspense component is hidden. An extra fragment fiber\n      // is inserted in between the Suspense fiber and its children. Skip\n      // over this extra fragment fiber and proceed to the next parent.\n      const nextParent = parentA.return;\n      if (nextParent !== null) {\n        a = b = nextParent;\n        continue;\n      }\n      // If there's no parent, we're at the root.\n      break;\n    }\n\n    // If both copies of the parent fiber point to the same child, we can\n    // assume that the child is current. This happens when we bailout on low\n    // priority: the bailed out fiber's child reuses the current child.\n    if (parentA.child === parentB.child) {\n      let child = parentA.child;\n      while (child) {\n        if (child === a) {\n          // We've determined that A is the current branch.\n          assertIsMounted(parentA);\n          return fiber;\n        }\n        if (child === b) {\n          // We've determined that B is the current branch.\n          assertIsMounted(parentA);\n          return alternate;\n        }\n        child = child.sibling;\n      }\n      // We should never have an alternate for any mounting node. So the only\n      // way this could possibly happen is if this was unmounted, if at all.\n      invariant(false, 'Unable to find node on an unmounted component.');\n    }\n\n    if (a.return !== b.return) {\n      // The return pointer of A and the return pointer of B point to different\n      // fibers. We assume that return pointers never criss-cross, so A must\n      // belong to the child set of A.return, and B must belong to the child\n      // set of B.return.\n      a = parentA;\n      b = parentB;\n    } else {\n      // The return pointers point to the same fiber. We'll have to use the\n      // default, slow path: scan the child sets of each parent alternate to see\n      // which child belongs to which set.\n      //\n      // Search parent A's child set\n      let didFindChild = false;\n      let child = parentA.child;\n      while (child) {\n        if (child === a) {\n          didFindChild = true;\n          a = parentA;\n          b = parentB;\n          break;\n        }\n        if (child === b) {\n          didFindChild = true;\n          b = parentA;\n          a = parentB;\n          break;\n        }\n        child = child.sibling;\n      }\n      if (!didFindChild) {\n        // Search parent B's child set\n        child = parentB.child;\n        while (child) {\n          if (child === a) {\n            didFindChild = true;\n            a = parentB;\n            b = parentA;\n            break;\n          }\n          if (child === b) {\n            didFindChild = true;\n            b = parentB;\n            a = parentA;\n            break;\n          }\n          child = child.sibling;\n        }\n        invariant(\n          didFindChild,\n          'Child was not found in either parent set. This indicates a bug ' +\n            'in React related to the return pointer. Please file an issue.',\n        );\n      }\n    }\n\n    invariant(\n      a.alternate === b,\n      \"Return fibers should always be each others' alternates. \" +\n        'This error is likely caused by a bug in React. Please file an issue.',\n    );\n  }\n  // If the root is not a host container, we're in a disconnected tree. I.e.\n  // unmounted.\n  invariant(\n    a.tag === HostRoot,\n    'Unable to find node on an unmounted component.',\n  );\n  if (a.stateNode.current === a) {\n    // We've determined that A is the current branch.\n    return fiber;\n  }\n  // Otherwise B has to be current branch.\n  return alternate;\n}\n\nexport function findCurrentHostFiber(parent: Fiber): Fiber | null {\n  const currentParent = findCurrentFiberUsingSlowPath(parent);\n  return currentParent !== null\n    ? findCurrentHostFiberImpl(currentParent)\n    : null;\n}\n\nfunction findCurrentHostFiberImpl(node: Fiber) {\n  // Next we'll drill down this component to find the first HostComponent/Text.\n  if (node.tag === HostComponent || node.tag === HostText) {\n    return node;\n  }\n\n  let child = node.child;\n  while (child !== null) {\n    const match = findCurrentHostFiberImpl(child);\n    if (match !== null) {\n      return match;\n    }\n    child = child.sibling;\n  }\n\n  return null;\n}\n\nexport function findCurrentHostFiberWithNoPortals(parent: Fiber): Fiber | null {\n  const currentParent = findCurrentFiberUsingSlowPath(parent);\n  return currentParent !== null\n    ? findCurrentHostFiberWithNoPortalsImpl(currentParent)\n    : null;\n}\n\nfunction findCurrentHostFiberWithNoPortalsImpl(node: Fiber) {\n  // Next we'll drill down this component to find the first HostComponent/Text.\n  if (node.tag === HostComponent || node.tag === HostText) {\n    return node;\n  }\n\n  let child = node.child;\n  while (child !== null) {\n    if (child.tag !== HostPortal) {\n      const match = findCurrentHostFiberWithNoPortalsImpl(child);\n      if (match !== null) {\n        return match;\n      }\n    }\n    child = child.sibling;\n  }\n\n  return null;\n}\n\nexport function isFiberSuspenseAndTimedOut(fiber: Fiber): boolean {\n  const memoizedState = fiber.memoizedState;\n  return (\n    fiber.tag === SuspenseComponent &&\n    memoizedState !== null &&\n    memoizedState.dehydrated === null\n  );\n}\n\nexport function doesFiberContain(\n  parentFiber: Fiber,\n  childFiber: Fiber,\n): boolean {\n  let node = childFiber;\n  const parentFiberAlternate = parentFiber.alternate;\n  while (node !== null) {\n    if (node === parentFiber || node === parentFiberAlternate) {\n      return true;\n    }\n    node = node.return;\n  }\n  return false;\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\ndeclare function isArray(a: mixed): boolean %checks(Array.isArray(a));\n\nconst isArrayImpl = Array.isArray;\n\n// eslint-disable-next-line no-redeclare\nfunction isArray(a: mixed): boolean {\n  return isArrayImpl(a);\n}\n\nexport default isArray;\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\n// This module only exists as an ESM wrapper around the external CommonJS\n// Scheduler dependency. Notice that we're intentionally not using named imports\n// because Rollup would use dynamic dispatch for CommonJS interop named imports.\n// When we switch to ESM, we can delete this module.\nimport * as Scheduler from 'scheduler';\n\nexport const scheduleCallback = Scheduler.unstable_scheduleCallback;\nexport const cancelCallback = Scheduler.unstable_cancelCallback;\nexport const shouldYield = Scheduler.unstable_shouldYield;\nexport const requestPaint = Scheduler.unstable_requestPaint;\nexport const now = Scheduler.unstable_now;\nexport const getCurrentPriorityLevel =\n  Scheduler.unstable_getCurrentPriorityLevel;\nexport const ImmediatePriority = Scheduler.unstable_ImmediatePriority;\nexport const UserBlockingPriority = Scheduler.unstable_UserBlockingPriority;\nexport const NormalPriority = Scheduler.unstable_NormalPriority;\nexport const LowPriority = Scheduler.unstable_LowPriority;\nexport const IdlePriority = Scheduler.unstable_IdlePriority;\nexport type SchedulerCallback = (isSync: boolean) => SchedulerCallback | null;\n\n// this doesn't actually exist on the scheduler, but it *does*\n// on scheduler/unstable_mock, which we'll need for internal testing\nexport const unstable_yieldValue = Scheduler.unstable_yieldValue;\nexport const unstable_setDisableYieldValue =\n  Scheduler.unstable_setDisableYieldValue;\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport {enableProfilerTimer} from 'shared/ReactFeatureFlags';\n\nimport type {Fiber, FiberRoot} from './ReactInternalTypes';\nimport type {ReactNodeList} from 'shared/ReactTypes';\nimport type {EventPriority} from './ReactEventPriorities.old';\n\nimport {DidCapture} from './ReactFiberFlags';\nimport {\n  DiscreteEventPriority,\n  ContinuousEventPriority,\n  DefaultEventPriority,\n  IdleEventPriority,\n} from './ReactEventPriorities.old';\nimport {\n  ImmediatePriority as ImmediateSchedulerPriority,\n  UserBlockingPriority as UserBlockingSchedulerPriority,\n  NormalPriority as NormalSchedulerPriority,\n  IdlePriority as IdleSchedulerPriority,\n} from './Scheduler';\n\ndeclare var __REACT_DEVTOOLS_GLOBAL_HOOK__: Object | void;\n\nlet rendererID = null;\nlet injectedHook = null;\nlet hasLoggedError = false;\n\nexport const isDevToolsPresent =\n  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined';\n\nexport function injectInternals(internals: Object): boolean {\n  if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined') {\n    // No DevTools\n    return false;\n  }\n  const hook = __REACT_DEVTOOLS_GLOBAL_HOOK__;\n  if (hook.isDisabled) {\n    // This isn't a real property on the hook, but it can be set to opt out\n    // of DevTools integration and associated warnings and logs.\n    // https://github.com/facebook/react/issues/3877\n    return true;\n  }\n  if (!hook.supportsFiber) {\n    if (__DEV__) {\n      console.error(\n        'The installed version of React DevTools is too old and will not work ' +\n          'with the current version of React. Please update React DevTools. ' +\n          'https://reactjs.org/link/react-devtools',\n      );\n    }\n    // DevTools exists, even though it doesn't support Fiber.\n    return true;\n  }\n  try {\n    rendererID = hook.inject(internals);\n    // We have successfully injected, so now it is safe to set up hooks.\n    injectedHook = hook;\n  } catch (err) {\n    // Catch all errors because it is unsafe to throw during initialization.\n    if (__DEV__) {\n      console.error('React instrumentation encountered an error: %s.', err);\n    }\n  }\n  if (hook.checkDCE) {\n    // This is the real DevTools.\n    return true;\n  } else {\n    // This is likely a hook installed by Fast Refresh runtime.\n    return false;\n  }\n}\n\nexport function onScheduleRoot(root: FiberRoot, children: ReactNodeList) {\n  if (__DEV__) {\n    if (\n      injectedHook &&\n      typeof injectedHook.onScheduleFiberRoot === 'function'\n    ) {\n      try {\n        injectedHook.onScheduleFiberRoot(rendererID, root, children);\n      } catch (err) {\n        if (__DEV__ && !hasLoggedError) {\n          hasLoggedError = true;\n          console.error('React instrumentation encountered an error: %s', err);\n        }\n      }\n    }\n  }\n}\n\nexport function onCommitRoot(root: FiberRoot, eventPriority: EventPriority) {\n  if (injectedHook && typeof injectedHook.onCommitFiberRoot === 'function') {\n    try {\n      const didError = (root.current.flags & DidCapture) === DidCapture;\n      if (enableProfilerTimer) {\n        let schedulerPriority;\n        switch (eventPriority) {\n          case DiscreteEventPriority:\n            schedulerPriority = ImmediateSchedulerPriority;\n            break;\n          case ContinuousEventPriority:\n            schedulerPriority = UserBlockingSchedulerPriority;\n            break;\n          case DefaultEventPriority:\n            schedulerPriority = NormalSchedulerPriority;\n            break;\n          case IdleEventPriority:\n            schedulerPriority = IdleSchedulerPriority;\n            break;\n          default:\n            schedulerPriority = NormalSchedulerPriority;\n            break;\n        }\n        injectedHook.onCommitFiberRoot(\n          rendererID,\n          root,\n          schedulerPriority,\n          didError,\n        );\n      } else {\n        injectedHook.onCommitFiberRoot(rendererID, root, undefined, didError);\n      }\n    } catch (err) {\n      if (__DEV__) {\n        if (!hasLoggedError) {\n          hasLoggedError = true;\n          console.error('React instrumentation encountered an error: %s', err);\n        }\n      }\n    }\n  }\n}\n\nexport function onPostCommitRoot(root: FiberRoot) {\n  if (\n    injectedHook &&\n    typeof injectedHook.onPostCommitFiberRoot === 'function'\n  ) {\n    try {\n      injectedHook.onPostCommitFiberRoot(rendererID, root);\n    } catch (err) {\n      if (__DEV__) {\n        if (!hasLoggedError) {\n          hasLoggedError = true;\n          console.error('React instrumentation encountered an error: %s', err);\n        }\n      }\n    }\n  }\n}\n\nexport function onCommitUnmount(fiber: Fiber) {\n  if (injectedHook && typeof injectedHook.onCommitFiberUnmount === 'function') {\n    try {\n      injectedHook.onCommitFiberUnmount(rendererID, fiber);\n    } catch (err) {\n      if (__DEV__) {\n        if (!hasLoggedError) {\n          hasLoggedError = true;\n          console.error('React instrumentation encountered an error: %s', err);\n        }\n      }\n    }\n  }\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nexport type TypeOfMode = number;\n\nexport const NoMode = /*                         */ 0b000000;\n// TODO: Remove ConcurrentMode by reading from the root tag instead\nexport const ConcurrentMode = /*                 */ 0b000001;\nexport const ProfileMode = /*                    */ 0b000010;\nexport const DebugTracingMode = /*               */ 0b000100;\nexport const StrictLegacyMode = /*               */ 0b001000;\nexport const StrictEffectsMode = /*              */ 0b010000;\nexport const ConcurrentUpdatesByDefaultMode = /* */ 0b100000;\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {FiberRoot} from './ReactInternalTypes';\n\n// TODO: Ideally these types would be opaque but that doesn't work well with\n// our reconciler fork infra, since these leak into non-reconciler packages.\n\nexport type Lanes = number;\nexport type Lane = number;\nexport type LaneMap<T> = Array<T>;\n\nimport {\n  enableCache,\n  enableSchedulingProfiler,\n  enableUpdaterTracking,\n  allowConcurrentByDefault,\n} from 'shared/ReactFeatureFlags';\nimport {isDevToolsPresent} from './ReactFiberDevToolsHook.old';\nimport {ConcurrentUpdatesByDefaultMode, NoMode} from './ReactTypeOfMode';\n\n// Lane values below should be kept in sync with getLabelForLane(), used by react-devtools-scheduling-profiler.\n// If those values are changed that package should be rebuilt and redeployed.\n\nexport const TotalLanes = 31;\n\nexport const NoLanes: Lanes = /*                        */ 0b0000000000000000000000000000000;\nexport const NoLane: Lane = /*                          */ 0b0000000000000000000000000000000;\n\nexport const SyncLane: Lane = /*                        */ 0b0000000000000000000000000000001;\n\nexport const InputContinuousHydrationLane: Lane = /*    */ 0b0000000000000000000000000000010;\nexport const InputContinuousLane: Lanes = /*            */ 0b0000000000000000000000000000100;\n\nexport const DefaultHydrationLane: Lane = /*            */ 0b0000000000000000000000000001000;\nexport const DefaultLane: Lanes = /*                    */ 0b0000000000000000000000000010000;\n\nconst TransitionHydrationLane: Lane = /*                */ 0b0000000000000000000000000100000;\nconst TransitionLanes: Lanes = /*                       */ 0b0000000001111111111111111000000;\nconst TransitionLane1: Lane = /*                        */ 0b0000000000000000000000001000000;\nconst TransitionLane2: Lane = /*                        */ 0b0000000000000000000000010000000;\nconst TransitionLane3: Lane = /*                        */ 0b0000000000000000000000100000000;\nconst TransitionLane4: Lane = /*                        */ 0b0000000000000000000001000000000;\nconst TransitionLane5: Lane = /*                        */ 0b0000000000000000000010000000000;\nconst TransitionLane6: Lane = /*                        */ 0b0000000000000000000100000000000;\nconst TransitionLane7: Lane = /*                        */ 0b0000000000000000001000000000000;\nconst TransitionLane8: Lane = /*                        */ 0b0000000000000000010000000000000;\nconst TransitionLane9: Lane = /*                        */ 0b0000000000000000100000000000000;\nconst TransitionLane10: Lane = /*                       */ 0b0000000000000001000000000000000;\nconst TransitionLane11: Lane = /*                       */ 0b0000000000000010000000000000000;\nconst TransitionLane12: Lane = /*                       */ 0b0000000000000100000000000000000;\nconst TransitionLane13: Lane = /*                       */ 0b0000000000001000000000000000000;\nconst TransitionLane14: Lane = /*                       */ 0b0000000000010000000000000000000;\nconst TransitionLane15: Lane = /*                       */ 0b0000000000100000000000000000000;\nconst TransitionLane16: Lane = /*                       */ 0b0000000001000000000000000000000;\n\nconst RetryLanes: Lanes = /*                            */ 0b0000111110000000000000000000000;\nconst RetryLane1: Lane = /*                             */ 0b0000000010000000000000000000000;\nconst RetryLane2: Lane = /*                             */ 0b0000000100000000000000000000000;\nconst RetryLane3: Lane = /*                             */ 0b0000001000000000000000000000000;\nconst RetryLane4: Lane = /*                             */ 0b0000010000000000000000000000000;\nconst RetryLane5: Lane = /*                             */ 0b0000100000000000000000000000000;\n\nexport const SomeRetryLane: Lane = RetryLane1;\n\nexport const SelectiveHydrationLane: Lane = /*          */ 0b0001000000000000000000000000000;\n\nconst NonIdleLanes = /*                                 */ 0b0001111111111111111111111111111;\n\nexport const IdleHydrationLane: Lane = /*               */ 0b0010000000000000000000000000000;\nexport const IdleLane: Lanes = /*                       */ 0b0100000000000000000000000000000;\n\nexport const OffscreenLane: Lane = /*                   */ 0b1000000000000000000000000000000;\n\n// This function is used for the experimental scheduling profiler (react-devtools-scheduling-profiler)\n// It should be kept in sync with the Lanes values above.\nexport function getLabelForLane(lane: Lane): string | void {\n  if (enableSchedulingProfiler) {\n    if (lane & SyncLane) {\n      return 'Sync';\n    }\n    if (lane & InputContinuousHydrationLane) {\n      return 'InputContinuousHydration';\n    }\n    if (lane & InputContinuousLane) {\n      return 'InputContinuous';\n    }\n    if (lane & DefaultHydrationLane) {\n      return 'DefaultHydration';\n    }\n    if (lane & DefaultLane) {\n      return 'Default';\n    }\n    if (lane & TransitionHydrationLane) {\n      return 'TransitionHydration';\n    }\n    if (lane & TransitionLanes) {\n      return 'Transition';\n    }\n    if (lane & RetryLanes) {\n      return 'Retry';\n    }\n    if (lane & SelectiveHydrationLane) {\n      return 'SelectiveHydration';\n    }\n    if (lane & IdleHydrationLane) {\n      return 'IdleHydration';\n    }\n    if (lane & IdleLane) {\n      return 'Idle';\n    }\n    if (lane & OffscreenLane) {\n      return 'Offscreen';\n    }\n  }\n}\n\nexport const NoTimestamp = -1;\n\nlet nextTransitionLane: Lane = TransitionLane1;\nlet nextRetryLane: Lane = RetryLane1;\n\nfunction getHighestPriorityLanes(lanes: Lanes | Lane): Lanes {\n  switch (getHighestPriorityLane(lanes)) {\n    case SyncLane:\n      return SyncLane;\n    case InputContinuousHydrationLane:\n      return InputContinuousHydrationLane;\n    case InputContinuousLane:\n      return InputContinuousLane;\n    case DefaultHydrationLane:\n      return DefaultHydrationLane;\n    case DefaultLane:\n      return DefaultLane;\n    case TransitionHydrationLane:\n      return TransitionHydrationLane;\n    case TransitionLane1:\n    case TransitionLane2:\n    case TransitionLane3:\n    case TransitionLane4:\n    case TransitionLane5:\n    case TransitionLane6:\n    case TransitionLane7:\n    case TransitionLane8:\n    case TransitionLane9:\n    case TransitionLane10:\n    case TransitionLane11:\n    case TransitionLane12:\n    case TransitionLane13:\n    case TransitionLane14:\n    case TransitionLane15:\n    case TransitionLane16:\n      return lanes & TransitionLanes;\n    case RetryLane1:\n    case RetryLane2:\n    case RetryLane3:\n    case RetryLane4:\n    case RetryLane5:\n      return lanes & RetryLanes;\n    case SelectiveHydrationLane:\n      return SelectiveHydrationLane;\n    case IdleHydrationLane:\n      return IdleHydrationLane;\n    case IdleLane:\n      return IdleLane;\n    case OffscreenLane:\n      return OffscreenLane;\n    default:\n      if (__DEV__) {\n        console.error(\n          'Should have found matching lanes. This is a bug in React.',\n        );\n      }\n      // This shouldn't be reachable, but as a fallback, return the entire bitmask.\n      return lanes;\n  }\n}\n\nexport function getNextLanes(root: FiberRoot, wipLanes: Lanes): Lanes {\n  // Early bailout if there's no pending work left.\n  const pendingLanes = root.pendingLanes;\n  if (pendingLanes === NoLanes) {\n    return NoLanes;\n  }\n\n  let nextLanes = NoLanes;\n\n  const suspendedLanes = root.suspendedLanes;\n  const pingedLanes = root.pingedLanes;\n\n  // Do not work on any idle work until all the non-idle work has finished,\n  // even if the work is suspended.\n  const nonIdlePendingLanes = pendingLanes & NonIdleLanes;\n  if (nonIdlePendingLanes !== NoLanes) {\n    const nonIdleUnblockedLanes = nonIdlePendingLanes & ~suspendedLanes;\n    if (nonIdleUnblockedLanes !== NoLanes) {\n      nextLanes = getHighestPriorityLanes(nonIdleUnblockedLanes);\n    } else {\n      const nonIdlePingedLanes = nonIdlePendingLanes & pingedLanes;\n      if (nonIdlePingedLanes !== NoLanes) {\n        nextLanes = getHighestPriorityLanes(nonIdlePingedLanes);\n      }\n    }\n  } else {\n    // The only remaining work is Idle.\n    const unblockedLanes = pendingLanes & ~suspendedLanes;\n    if (unblockedLanes !== NoLanes) {\n      nextLanes = getHighestPriorityLanes(unblockedLanes);\n    } else {\n      if (pingedLanes !== NoLanes) {\n        nextLanes = getHighestPriorityLanes(pingedLanes);\n      }\n    }\n  }\n\n  if (nextLanes === NoLanes) {\n    // This should only be reachable if we're suspended\n    // TODO: Consider warning in this path if a fallback timer is not scheduled.\n    return NoLanes;\n  }\n\n  // If we're already in the middle of a render, switching lanes will interrupt\n  // it and we'll lose our progress. We should only do this if the new lanes are\n  // higher priority.\n  if (\n    wipLanes !== NoLanes &&\n    wipLanes !== nextLanes &&\n    // If we already suspended with a delay, then interrupting is fine. Don't\n    // bother waiting until the root is complete.\n    (wipLanes & suspendedLanes) === NoLanes\n  ) {\n    const nextLane = getHighestPriorityLane(nextLanes);\n    const wipLane = getHighestPriorityLane(wipLanes);\n    if (\n      // Tests whether the next lane is equal or lower priority than the wip\n      // one. This works because the bits decrease in priority as you go left.\n      nextLane >= wipLane ||\n      // Default priority updates should not interrupt transition updates. The\n      // only difference between default updates and transition updates is that\n      // default updates do not support refresh transitions.\n      (nextLane === DefaultLane && (wipLane & TransitionLanes) !== NoLanes)\n    ) {\n      // Keep working on the existing in-progress tree. Do not interrupt.\n      return wipLanes;\n    }\n  }\n\n  if (\n    allowConcurrentByDefault &&\n    (root.current.mode & ConcurrentUpdatesByDefaultMode) !== NoMode\n  ) {\n    // Do nothing, use the lanes as they were assigned.\n  } else if ((nextLanes & InputContinuousLane) !== NoLanes) {\n    // When updates are sync by default, we entangle continuous priority updates\n    // and default updates, so they render in the same batch. The only reason\n    // they use separate lanes is because continuous updates should interrupt\n    // transitions, but default updates should not.\n    nextLanes |= pendingLanes & DefaultLane;\n  }\n\n  // Check for entangled lanes and add them to the batch.\n  //\n  // A lane is said to be entangled with another when it's not allowed to render\n  // in a batch that does not also include the other lane. Typically we do this\n  // when multiple updates have the same source, and we only want to respond to\n  // the most recent event from that source.\n  //\n  // Note that we apply entanglements *after* checking for partial work above.\n  // This means that if a lane is entangled during an interleaved event while\n  // it's already rendering, we won't interrupt it. This is intentional, since\n  // entanglement is usually \"best effort\": we'll try our best to render the\n  // lanes in the same batch, but it's not worth throwing out partially\n  // completed work in order to do it.\n  // TODO: Reconsider this. The counter-argument is that the partial work\n  // represents an intermediate state, which we don't want to show to the user.\n  // And by spending extra time finishing it, we're increasing the amount of\n  // time it takes to show the final state, which is what they are actually\n  // waiting for.\n  //\n  // For those exceptions where entanglement is semantically important, like\n  // useMutableSource, we should ensure that there is no partial work at the\n  // time we apply the entanglement.\n  const entangledLanes = root.entangledLanes;\n  if (entangledLanes !== NoLanes) {\n    const entanglements = root.entanglements;\n    let lanes = nextLanes & entangledLanes;\n    while (lanes > 0) {\n      const index = pickArbitraryLaneIndex(lanes);\n      const lane = 1 << index;\n\n      nextLanes |= entanglements[index];\n\n      lanes &= ~lane;\n    }\n  }\n\n  return nextLanes;\n}\n\nexport function getMostRecentEventTime(root: FiberRoot, lanes: Lanes): number {\n  const eventTimes = root.eventTimes;\n\n  let mostRecentEventTime = NoTimestamp;\n  while (lanes > 0) {\n    const index = pickArbitraryLaneIndex(lanes);\n    const lane = 1 << index;\n\n    const eventTime = eventTimes[index];\n    if (eventTime > mostRecentEventTime) {\n      mostRecentEventTime = eventTime;\n    }\n\n    lanes &= ~lane;\n  }\n\n  return mostRecentEventTime;\n}\n\nfunction computeExpirationTime(lane: Lane, currentTime: number) {\n  switch (lane) {\n    case SyncLane:\n    case InputContinuousHydrationLane:\n    case InputContinuousLane:\n      // User interactions should expire slightly more quickly.\n      //\n      // NOTE: This is set to the corresponding constant as in Scheduler.js.\n      // When we made it larger, a product metric in www regressed, suggesting\n      // there's a user interaction that's being starved by a series of\n      // synchronous updates. If that theory is correct, the proper solution is\n      // to fix the starvation. However, this scenario supports the idea that\n      // expiration times are an important safeguard when starvation\n      // does happen.\n      return currentTime + 250;\n    case DefaultHydrationLane:\n    case DefaultLane:\n    case TransitionHydrationLane:\n    case TransitionLane1:\n    case TransitionLane2:\n    case TransitionLane3:\n    case TransitionLane4:\n    case TransitionLane5:\n    case TransitionLane6:\n    case TransitionLane7:\n    case TransitionLane8:\n    case TransitionLane9:\n    case TransitionLane10:\n    case TransitionLane11:\n    case TransitionLane12:\n    case TransitionLane13:\n    case TransitionLane14:\n    case TransitionLane15:\n    case TransitionLane16:\n      return currentTime + 5000;\n    case RetryLane1:\n    case RetryLane2:\n    case RetryLane3:\n    case RetryLane4:\n    case RetryLane5:\n      // TODO: Retries should be allowed to expire if they are CPU bound for\n      // too long, but when I made this change it caused a spike in browser\n      // crashes. There must be some other underlying bug; not super urgent but\n      // ideally should figure out why and fix it. Unfortunately we don't have\n      // a repro for the crashes, only detected via production metrics.\n      return NoTimestamp;\n    case SelectiveHydrationLane:\n    case IdleHydrationLane:\n    case IdleLane:\n    case OffscreenLane:\n      // Anything idle priority or lower should never expire.\n      return NoTimestamp;\n    default:\n      if (__DEV__) {\n        console.error(\n          'Should have found matching lanes. This is a bug in React.',\n        );\n      }\n      return NoTimestamp;\n  }\n}\n\nexport function markStarvedLanesAsExpired(\n  root: FiberRoot,\n  currentTime: number,\n): void {\n  // TODO: This gets called every time we yield. We can optimize by storing\n  // the earliest expiration time on the root. Then use that to quickly bail out\n  // of this function.\n\n  const pendingLanes = root.pendingLanes;\n  const suspendedLanes = root.suspendedLanes;\n  const pingedLanes = root.pingedLanes;\n  const expirationTimes = root.expirationTimes;\n\n  // Iterate through the pending lanes and check if we've reached their\n  // expiration time. If so, we'll assume the update is being starved and mark\n  // it as expired to force it to finish.\n  let lanes = pendingLanes;\n  while (lanes > 0) {\n    const index = pickArbitraryLaneIndex(lanes);\n    const lane = 1 << index;\n\n    const expirationTime = expirationTimes[index];\n    if (expirationTime === NoTimestamp) {\n      // Found a pending lane with no expiration time. If it's not suspended, or\n      // if it's pinged, assume it's CPU-bound. Compute a new expiration time\n      // using the current time.\n      if (\n        (lane & suspendedLanes) === NoLanes ||\n        (lane & pingedLanes) !== NoLanes\n      ) {\n        // Assumes timestamps are monotonically increasing.\n        expirationTimes[index] = computeExpirationTime(lane, currentTime);\n      }\n    } else if (expirationTime <= currentTime) {\n      // This lane expired\n      root.expiredLanes |= lane;\n    }\n\n    lanes &= ~lane;\n  }\n}\n\n// This returns the highest priority pending lanes regardless of whether they\n// are suspended.\nexport function getHighestPriorityPendingLanes(root: FiberRoot) {\n  return getHighestPriorityLanes(root.pendingLanes);\n}\n\nexport function getLanesToRetrySynchronouslyOnError(root: FiberRoot): Lanes {\n  const everythingButOffscreen = root.pendingLanes & ~OffscreenLane;\n  if (everythingButOffscreen !== NoLanes) {\n    return everythingButOffscreen;\n  }\n  if (everythingButOffscreen & OffscreenLane) {\n    return OffscreenLane;\n  }\n  return NoLanes;\n}\n\nexport function includesNonIdleWork(lanes: Lanes) {\n  return (lanes & NonIdleLanes) !== NoLanes;\n}\nexport function includesOnlyRetries(lanes: Lanes) {\n  return (lanes & RetryLanes) === lanes;\n}\nexport function includesOnlyTransitions(lanes: Lanes) {\n  return (lanes & TransitionLanes) === lanes;\n}\n\nexport function shouldTimeSlice(root: FiberRoot, lanes: Lanes) {\n  if ((lanes & root.expiredLanes) !== NoLanes) {\n    // At least one of these lanes expired. To prevent additional starvation,\n    // finish rendering without yielding execution.\n    return false;\n  }\n\n  if (\n    allowConcurrentByDefault &&\n    (root.current.mode & ConcurrentUpdatesByDefaultMode) !== NoMode\n  ) {\n    // Concurrent updates by default always use time slicing.\n    return true;\n  }\n\n  const SyncDefaultLanes =\n    InputContinuousHydrationLane |\n    InputContinuousLane |\n    DefaultHydrationLane |\n    DefaultLane;\n  return (lanes & SyncDefaultLanes) === NoLanes;\n}\n\nexport function isTransitionLane(lane: Lane) {\n  return (lane & TransitionLanes) !== 0;\n}\n\nexport function claimNextTransitionLane(): Lane {\n  // Cycle through the lanes, assigning each new transition to the next lane.\n  // In most cases, this means every transition gets its own lane, until we\n  // run out of lanes and cycle back to the beginning.\n  const lane = nextTransitionLane;\n  nextTransitionLane <<= 1;\n  if ((nextTransitionLane & TransitionLanes) === 0) {\n    nextTransitionLane = TransitionLane1;\n  }\n  return lane;\n}\n\nexport function claimNextRetryLane(): Lane {\n  const lane = nextRetryLane;\n  nextRetryLane <<= 1;\n  if ((nextRetryLane & RetryLanes) === 0) {\n    nextRetryLane = RetryLane1;\n  }\n  return lane;\n}\n\nexport function getHighestPriorityLane(lanes: Lanes): Lane {\n  return lanes & -lanes;\n}\n\nexport function pickArbitraryLane(lanes: Lanes): Lane {\n  // This wrapper function gets inlined. Only exists so to communicate that it\n  // doesn't matter which bit is selected; you can pick any bit without\n  // affecting the algorithms where its used. Here I'm using\n  // getHighestPriorityLane because it requires the fewest operations.\n  return getHighestPriorityLane(lanes);\n}\n\nfunction pickArbitraryLaneIndex(lanes: Lanes) {\n  return 31 - clz32(lanes);\n}\n\nfunction laneToIndex(lane: Lane) {\n  return pickArbitraryLaneIndex(lane);\n}\n\nexport function includesSomeLane(a: Lanes | Lane, b: Lanes | Lane) {\n  return (a & b) !== NoLanes;\n}\n\nexport function isSubsetOfLanes(set: Lanes, subset: Lanes | Lane) {\n  return (set & subset) === subset;\n}\n\nexport function mergeLanes(a: Lanes | Lane, b: Lanes | Lane): Lanes {\n  return a | b;\n}\n\nexport function removeLanes(set: Lanes, subset: Lanes | Lane): Lanes {\n  return set & ~subset;\n}\n\nexport function intersectLanes(a: Lanes | Lane, b: Lanes | Lane): Lanes {\n  return a & b;\n}\n\n// Seems redundant, but it changes the type from a single lane (used for\n// updates) to a group of lanes (used for flushing work).\nexport function laneToLanes(lane: Lane): Lanes {\n  return lane;\n}\n\nexport function higherPriorityLane(a: Lane, b: Lane) {\n  // This works because the bit ranges decrease in priority as you go left.\n  return a !== NoLane && a < b ? a : b;\n}\n\nexport function createLaneMap<T>(initial: T): LaneMap<T> {\n  // Intentionally pushing one by one.\n  // https://v8.dev/blog/elements-kinds#avoid-creating-holes\n  const laneMap = [];\n  for (let i = 0; i < TotalLanes; i++) {\n    laneMap.push(initial);\n  }\n  return laneMap;\n}\n\nexport function markRootUpdated(\n  root: FiberRoot,\n  updateLane: Lane,\n  eventTime: number,\n) {\n  root.pendingLanes |= updateLane;\n\n  // If there are any suspended transitions, it's possible this new update\n  // could unblock them. Clear the suspended lanes so that we can try rendering\n  // them again.\n  //\n  // TODO: We really only need to unsuspend only lanes that are in the\n  // `subtreeLanes` of the updated fiber, or the update lanes of the return\n  // path. This would exclude suspended updates in an unrelated sibling tree,\n  // since there's no way for this update to unblock it.\n  //\n  // We don't do this if the incoming update is idle, because we never process\n  // idle updates until after all the regular updates have finished; there's no\n  // way it could unblock a transition.\n  if (updateLane !== IdleLane) {\n    root.suspendedLanes = NoLanes;\n    root.pingedLanes = NoLanes;\n  }\n\n  const eventTimes = root.eventTimes;\n  const index = laneToIndex(updateLane);\n  // We can always overwrite an existing timestamp because we prefer the most\n  // recent event, and we assume time is monotonically increasing.\n  eventTimes[index] = eventTime;\n}\n\nexport function markRootSuspended(root: FiberRoot, suspendedLanes: Lanes) {\n  root.suspendedLanes |= suspendedLanes;\n  root.pingedLanes &= ~suspendedLanes;\n\n  // The suspended lanes are no longer CPU-bound. Clear their expiration times.\n  const expirationTimes = root.expirationTimes;\n  let lanes = suspendedLanes;\n  while (lanes > 0) {\n    const index = pickArbitraryLaneIndex(lanes);\n    const lane = 1 << index;\n\n    expirationTimes[index] = NoTimestamp;\n\n    lanes &= ~lane;\n  }\n}\n\nexport function markRootPinged(\n  root: FiberRoot,\n  pingedLanes: Lanes,\n  eventTime: number,\n) {\n  root.pingedLanes |= root.suspendedLanes & pingedLanes;\n}\n\nexport function markRootMutableRead(root: FiberRoot, updateLane: Lane) {\n  root.mutableReadLanes |= updateLane & root.pendingLanes;\n}\n\nexport function markRootFinished(root: FiberRoot, remainingLanes: Lanes) {\n  const noLongerPendingLanes = root.pendingLanes & ~remainingLanes;\n\n  root.pendingLanes = remainingLanes;\n\n  // Let's try everything again\n  root.suspendedLanes = 0;\n  root.pingedLanes = 0;\n\n  root.expiredLanes &= remainingLanes;\n  root.mutableReadLanes &= remainingLanes;\n\n  root.entangledLanes &= remainingLanes;\n\n  if (enableCache) {\n    const pooledCacheLanes = (root.pooledCacheLanes &= remainingLanes);\n    if (pooledCacheLanes === NoLanes) {\n      // None of the remaining work relies on the cache pool. Clear it so\n      // subsequent requests get a new cache.\n      root.pooledCache = null;\n    }\n  }\n\n  const entanglements = root.entanglements;\n  const eventTimes = root.eventTimes;\n  const expirationTimes = root.expirationTimes;\n\n  // Clear the lanes that no longer have pending work\n  let lanes = noLongerPendingLanes;\n  while (lanes > 0) {\n    const index = pickArbitraryLaneIndex(lanes);\n    const lane = 1 << index;\n\n    entanglements[index] = NoLanes;\n    eventTimes[index] = NoTimestamp;\n    expirationTimes[index] = NoTimestamp;\n\n    lanes &= ~lane;\n  }\n}\n\nexport function markRootEntangled(root: FiberRoot, entangledLanes: Lanes) {\n  // In addition to entangling each of the given lanes with each other, we also\n  // have to consider _transitive_ entanglements. For each lane that is already\n  // entangled with *any* of the given lanes, that lane is now transitively\n  // entangled with *all* the given lanes.\n  //\n  // Translated: If C is entangled with A, then entangling A with B also\n  // entangles C with B.\n  //\n  // If this is hard to grasp, it might help to intentionally break this\n  // function and look at the tests that fail in ReactTransition-test.js. Try\n  // commenting out one of the conditions below.\n\n  const rootEntangledLanes = (root.entangledLanes |= entangledLanes);\n  const entanglements = root.entanglements;\n  let lanes = rootEntangledLanes;\n  while (lanes) {\n    const index = pickArbitraryLaneIndex(lanes);\n    const lane = 1 << index;\n    if (\n      // Is this one of the newly entangled lanes?\n      (lane & entangledLanes) |\n      // Is this lane transitively entangled with the newly entangled lanes?\n      (entanglements[index] & entangledLanes)\n    ) {\n      entanglements[index] |= entangledLanes;\n    }\n    lanes &= ~lane;\n  }\n}\n\nexport function getBumpedLaneForHydration(\n  root: FiberRoot,\n  renderLanes: Lanes,\n): Lane {\n  const renderLane = getHighestPriorityLane(renderLanes);\n\n  let lane;\n  switch (renderLane) {\n    case InputContinuousLane:\n      lane = InputContinuousHydrationLane;\n      break;\n    case DefaultLane:\n      lane = DefaultHydrationLane;\n      break;\n    case TransitionLane1:\n    case TransitionLane2:\n    case TransitionLane3:\n    case TransitionLane4:\n    case TransitionLane5:\n    case TransitionLane6:\n    case TransitionLane7:\n    case TransitionLane8:\n    case TransitionLane9:\n    case TransitionLane10:\n    case TransitionLane11:\n    case TransitionLane12:\n    case TransitionLane13:\n    case TransitionLane14:\n    case TransitionLane15:\n    case TransitionLane16:\n    case RetryLane1:\n    case RetryLane2:\n    case RetryLane3:\n    case RetryLane4:\n    case RetryLane5:\n      lane = TransitionHydrationLane;\n      break;\n    case IdleLane:\n      lane = IdleHydrationLane;\n      break;\n    default:\n      // Everything else is already either a hydration lane, or shouldn't\n      // be retried at a hydration lane.\n      lane = NoLane;\n      break;\n  }\n\n  // Check if the lane we chose is suspended. If so, that indicates that we\n  // already attempted and failed to hydrate at that level. Also check if we're\n  // already rendering that lane, which is rare but could happen.\n  if ((lane & (root.suspendedLanes | renderLanes)) !== NoLane) {\n    // Give up trying to hydrate and fall back to client render.\n    return NoLane;\n  }\n\n  return lane;\n}\n\nexport function addFiberToLanesMap(\n  root: FiberRoot,\n  fiber: Fiber,\n  lanes: Lanes | Lane,\n) {\n  if (!enableUpdaterTracking) {\n    return;\n  }\n  if (!isDevToolsPresent) {\n    return;\n  }\n  const pendingUpdatersLaneMap = root.pendingUpdatersLaneMap;\n  while (lanes > 0) {\n    const index = laneToIndex(lanes);\n    const lane = 1 << index;\n\n    const updaters = pendingUpdatersLaneMap[index];\n    updaters.add(fiber);\n\n    lanes &= ~lane;\n  }\n}\n\nexport function movePendingFibersToMemoized(root: FiberRoot, lanes: Lanes) {\n  if (!enableUpdaterTracking) {\n    return;\n  }\n  if (!isDevToolsPresent) {\n    return;\n  }\n  const pendingUpdatersLaneMap = root.pendingUpdatersLaneMap;\n  const memoizedUpdaters = root.memoizedUpdaters;\n  while (lanes > 0) {\n    const index = laneToIndex(lanes);\n    const lane = 1 << index;\n\n    const updaters = pendingUpdatersLaneMap[index];\n    if (updaters.size > 0) {\n      updaters.forEach(fiber => {\n        const alternate = fiber.alternate;\n        if (alternate === null || !memoizedUpdaters.has(alternate)) {\n          memoizedUpdaters.add(fiber);\n        }\n      });\n      updaters.clear();\n    }\n\n    lanes &= ~lane;\n  }\n}\n\nconst clz32 = Math.clz32 ? Math.clz32 : clz32Fallback;\n\n// Count leading zeros. Only used on lanes, so assume input is an integer.\n// Based on:\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/clz32\nconst log = Math.log;\nconst LN2 = Math.LN2;\nfunction clz32Fallback(lanes: Lanes | Lane) {\n  if (lanes === 0) {\n    return 32;\n  }\n  return (31 - ((log(lanes) / LN2) | 0)) | 0;\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Lane, Lanes} from './ReactFiberLane.old';\n\nimport {\n  NoLane,\n  SyncLane,\n  InputContinuousLane,\n  DefaultLane,\n  IdleLane,\n  getHighestPriorityLane,\n  includesNonIdleWork,\n} from './ReactFiberLane.old';\n\nexport opaque type EventPriority = Lane;\n\nexport const DiscreteEventPriority: EventPriority = SyncLane;\nexport const ContinuousEventPriority: EventPriority = InputContinuousLane;\nexport const DefaultEventPriority: EventPriority = DefaultLane;\nexport const IdleEventPriority: EventPriority = IdleLane;\n\nlet currentUpdatePriority: EventPriority = NoLane;\n\nexport function getCurrentUpdatePriority(): EventPriority {\n  return currentUpdatePriority;\n}\n\nexport function setCurrentUpdatePriority(newPriority: EventPriority) {\n  currentUpdatePriority = newPriority;\n}\n\nexport function runWithPriority<T>(priority: EventPriority, fn: () => T): T {\n  const previousPriority = currentUpdatePriority;\n  try {\n    currentUpdatePriority = priority;\n    return fn();\n  } finally {\n    currentUpdatePriority = previousPriority;\n  }\n}\n\nexport function higherEventPriority(\n  a: EventPriority,\n  b: EventPriority,\n): EventPriority {\n  return a !== 0 && a < b ? a : b;\n}\n\nexport function lowerEventPriority(\n  a: EventPriority,\n  b: EventPriority,\n): EventPriority {\n  return a === 0 || a > b ? a : b;\n}\n\nexport function isHigherEventPriority(\n  a: EventPriority,\n  b: EventPriority,\n): boolean {\n  return a !== 0 && a < b;\n}\n\nexport function lanesToEventPriority(lanes: Lanes): EventPriority {\n  const lane = getHighestPriorityLane(lanes);\n  if (!isHigherEventPriority(DiscreteEventPriority, lane)) {\n    return DiscreteEventPriority;\n  }\n  if (!isHigherEventPriority(ContinuousEventPriority, lane)) {\n    return ContinuousEventPriority;\n  }\n  if (includesNonIdleWork(lane)) {\n    return DefaultEventPriority;\n  }\n  return IdleEventPriority;\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport invariant from 'shared/invariant';\n\n// Renderers that don't support hydration\n// can re-export everything from this module.\n\nfunction shim(...args: any) {\n  invariant(\n    false,\n    'The current renderer does not support hydration. ' +\n      'This error is likely caused by a bug in React. ' +\n      'Please file an issue.',\n  );\n}\n\n// Hydration (when unsupported)\nexport type SuspenseInstance = mixed;\nexport const supportsHydration = false;\nexport const canHydrateInstance = shim;\nexport const canHydrateTextInstance = shim;\nexport const canHydrateSuspenseInstance = shim;\nexport const isSuspenseInstancePending = shim;\nexport const isSuspenseInstanceFallback = shim;\nexport const registerSuspenseInstanceRetry = shim;\nexport const getNextHydratableSibling = shim;\nexport const getFirstHydratableChild = shim;\nexport const hydrateInstance = shim;\nexport const hydrateTextInstance = shim;\nexport const hydrateSuspenseInstance = shim;\nexport const getNextHydratableInstanceAfterSuspenseInstance = shim;\nexport const commitHydratedContainer = shim;\nexport const commitHydratedSuspenseInstance = shim;\nexport const clearSuspenseBoundary = shim;\nexport const clearSuspenseBoundaryFromContainer = shim;\nexport const shouldDeleteUnhydratedTailInstances = shim;\nexport const didNotMatchHydratedContainerTextInstance = shim;\nexport const didNotMatchHydratedTextInstance = shim;\nexport const didNotHydrateContainerInstance = shim;\nexport const didNotHydrateInstance = shim;\nexport const didNotFindHydratableContainerInstance = shim;\nexport const didNotFindHydratableContainerTextInstance = shim;\nexport const didNotFindHydratableContainerSuspenseInstance = shim;\nexport const didNotFindHydratableInstance = shim;\nexport const didNotFindHydratableTextInstance = shim;\nexport const didNotFindHydratableSuspenseInstance = shim;\nexport const errorHydratingContainer = shim;\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport {REACT_OPAQUE_ID_TYPE} from 'shared/ReactSymbols';\nimport isArray from 'shared/isArray';\nimport {DefaultEventPriority} from 'react-reconciler/src/ReactEventPriorities';\n\nexport type Type = string;\nexport type Props = Object;\nexport type Container = {|\n  children: Array<Instance | TextInstance>,\n  createNodeMock: Function,\n  tag: 'CONTAINER',\n|};\nexport type Instance = {|\n  type: string,\n  props: Object,\n  isHidden: boolean,\n  children: Array<Instance | TextInstance>,\n  internalInstanceHandle: Object,\n  rootContainerInstance: Container,\n  tag: 'INSTANCE',\n|};\nexport type TextInstance = {|\n  text: string,\n  isHidden: boolean,\n  tag: 'TEXT',\n|};\nexport type HydratableInstance = Instance | TextInstance;\nexport type PublicInstance = Instance | TextInstance;\nexport type HostContext = Object;\nexport type UpdatePayload = Object;\nexport type ChildSet = void; // Unused\nexport type TimeoutHandle = TimeoutID;\nexport type NoTimeout = -1;\nexport type EventResponder = any;\nexport opaque type OpaqueIDType =\n  | string\n  | {\n      toString: () => string | void,\n      valueOf: () => string | void,\n    };\n\nexport type RendererInspectionConfig = $ReadOnly<{||}>;\n\nexport * from 'react-reconciler/src/ReactFiberHostConfigWithNoPersistence';\nexport * from 'react-reconciler/src/ReactFiberHostConfigWithNoHydration';\nexport * from 'react-reconciler/src/ReactFiberHostConfigWithNoTestSelectors';\nexport * from 'react-reconciler/src/ReactFiberHostConfigWithNoMicrotasks';\n\nconst NO_CONTEXT = {};\nconst UPDATE_SIGNAL = {};\nconst nodeToInstanceMap = new WeakMap();\n\nif (__DEV__) {\n  Object.freeze(NO_CONTEXT);\n  Object.freeze(UPDATE_SIGNAL);\n}\n\nexport function getPublicInstance(inst: Instance | TextInstance): * {\n  switch (inst.tag) {\n    case 'INSTANCE':\n      const createNodeMock = inst.rootContainerInstance.createNodeMock;\n      const mockNode = createNodeMock({\n        type: inst.type,\n        props: inst.props,\n      });\n      if (typeof mockNode === 'object' && mockNode !== null) {\n        nodeToInstanceMap.set(mockNode, inst);\n      }\n      return mockNode;\n    default:\n      return inst;\n  }\n}\n\nexport function appendChild(\n  parentInstance: Instance | Container,\n  child: Instance | TextInstance,\n): void {\n  if (__DEV__) {\n    if (!isArray(parentInstance.children)) {\n      console.error(\n        'An invalid container has been provided. ' +\n          'This may indicate that another renderer is being used in addition to the test renderer. ' +\n          '(For example, ReactDOM.createPortal inside of a ReactTestRenderer tree.) ' +\n          'This is not supported.',\n      );\n    }\n  }\n  const index = parentInstance.children.indexOf(child);\n  if (index !== -1) {\n    parentInstance.children.splice(index, 1);\n  }\n  parentInstance.children.push(child);\n}\n\nexport function insertBefore(\n  parentInstance: Instance | Container,\n  child: Instance | TextInstance,\n  beforeChild: Instance | TextInstance,\n): void {\n  const index = parentInstance.children.indexOf(child);\n  if (index !== -1) {\n    parentInstance.children.splice(index, 1);\n  }\n  const beforeIndex = parentInstance.children.indexOf(beforeChild);\n  parentInstance.children.splice(beforeIndex, 0, child);\n}\n\nexport function removeChild(\n  parentInstance: Instance | Container,\n  child: Instance | TextInstance,\n): void {\n  const index = parentInstance.children.indexOf(child);\n  parentInstance.children.splice(index, 1);\n}\n\nexport function clearContainer(container: Container): void {\n  container.children.splice(0);\n}\n\nexport function getRootHostContext(\n  rootContainerInstance: Container,\n): HostContext {\n  return NO_CONTEXT;\n}\n\nexport function getChildHostContext(\n  parentHostContext: HostContext,\n  type: string,\n  rootContainerInstance: Container,\n): HostContext {\n  return NO_CONTEXT;\n}\n\nexport function prepareForCommit(containerInfo: Container): null | Object {\n  // noop\n  return null;\n}\n\nexport function resetAfterCommit(containerInfo: Container): void {\n  // noop\n}\n\nexport function createInstance(\n  type: string,\n  props: Props,\n  rootContainerInstance: Container,\n  hostContext: Object,\n  internalInstanceHandle: Object,\n): Instance {\n  return {\n    type,\n    props,\n    isHidden: false,\n    children: [],\n    internalInstanceHandle,\n    rootContainerInstance,\n    tag: 'INSTANCE',\n  };\n}\n\nexport function appendInitialChild(\n  parentInstance: Instance,\n  child: Instance | TextInstance,\n): void {\n  const index = parentInstance.children.indexOf(child);\n  if (index !== -1) {\n    parentInstance.children.splice(index, 1);\n  }\n  parentInstance.children.push(child);\n}\n\nexport function finalizeInitialChildren(\n  testElement: Instance,\n  type: string,\n  props: Props,\n  rootContainerInstance: Container,\n  hostContext: Object,\n): boolean {\n  return false;\n}\n\nexport function prepareUpdate(\n  testElement: Instance,\n  type: string,\n  oldProps: Props,\n  newProps: Props,\n  rootContainerInstance: Container,\n  hostContext: Object,\n): null | {...} {\n  return UPDATE_SIGNAL;\n}\n\nexport function shouldSetTextContent(type: string, props: Props): boolean {\n  return false;\n}\n\nexport function createTextInstance(\n  text: string,\n  rootContainerInstance: Container,\n  hostContext: Object,\n  internalInstanceHandle: Object,\n): TextInstance {\n  return {\n    text,\n    isHidden: false,\n    tag: 'TEXT',\n  };\n}\n\nexport function getCurrentEventPriority(): * {\n  return DefaultEventPriority;\n}\n\nexport const isPrimaryRenderer = false;\nexport const warnsIfNotActing = true;\n\nexport const scheduleTimeout = setTimeout;\nexport const cancelTimeout = clearTimeout;\n\nexport const noTimeout = -1;\n\n// -------------------\n//     Mutation\n// -------------------\n\nexport const supportsMutation = true;\n\nexport function commitUpdate(\n  instance: Instance,\n  updatePayload: {...},\n  type: string,\n  oldProps: Props,\n  newProps: Props,\n  internalInstanceHandle: Object,\n): void {\n  instance.type = type;\n  instance.props = newProps;\n}\n\nexport function commitMount(\n  instance: Instance,\n  type: string,\n  newProps: Props,\n  internalInstanceHandle: Object,\n): void {\n  // noop\n}\n\nexport function commitTextUpdate(\n  textInstance: TextInstance,\n  oldText: string,\n  newText: string,\n): void {\n  textInstance.text = newText;\n}\n\nexport function resetTextContent(testElement: Instance): void {\n  // noop\n}\n\nexport const appendChildToContainer = appendChild;\nexport const insertInContainerBefore = insertBefore;\nexport const removeChildFromContainer = removeChild;\n\nexport function hideInstance(instance: Instance): void {\n  instance.isHidden = true;\n}\n\nexport function hideTextInstance(textInstance: TextInstance): void {\n  textInstance.isHidden = true;\n}\n\nexport function unhideInstance(instance: Instance, props: Props): void {\n  instance.isHidden = false;\n}\n\nexport function unhideTextInstance(\n  textInstance: TextInstance,\n  text: string,\n): void {\n  textInstance.isHidden = false;\n}\n\nexport function getInstanceFromNode(mockNode: Object) {\n  const instance = nodeToInstanceMap.get(mockNode);\n  if (instance !== undefined) {\n    return instance.internalInstanceHandle;\n  }\n  return null;\n}\n\nlet clientId: number = 0;\nexport function makeClientId(): OpaqueIDType {\n  return 'c_' + (clientId++).toString(36);\n}\n\nexport function makeClientIdInDEV(warnOnAccessInDEV: () => void): OpaqueIDType {\n  const id = 'c_' + (clientId++).toString(36);\n  return {\n    toString() {\n      warnOnAccessInDEV();\n      return id;\n    },\n    valueOf() {\n      warnOnAccessInDEV();\n      return id;\n    },\n  };\n}\n\nexport function isOpaqueHydratingObject(value: mixed): boolean {\n  return (\n    value !== null &&\n    typeof value === 'object' &&\n    value.$$typeof === REACT_OPAQUE_ID_TYPE\n  );\n}\n\nexport function makeOpaqueHydratingObject(\n  attemptToReadValue: () => void,\n): OpaqueIDType {\n  return {\n    $$typeof: REACT_OPAQUE_ID_TYPE,\n    toString: attemptToReadValue,\n    valueOf: attemptToReadValue,\n  };\n}\n\nexport function beforeActiveInstanceBlur(internalInstanceHandle: Object) {\n  // noop\n}\n\nexport function afterActiveInstanceBlur() {\n  // noop\n}\n\nexport function preparePortalMount(portalInstance: Instance): void {\n  // noop\n}\n\nexport function prepareScopeUpdate(scopeInstance: Object, inst: Object): void {\n  nodeToInstanceMap.set(scopeInstance, inst);\n}\n\nexport function getInstanceFromScope(scopeInstance: Object): null | Object {\n  return nodeToInstanceMap.get(scopeInstance) || null;\n}\n\nexport function detachDeletedInstance(node: Instance): void {\n  // noop\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\n// Helpers to patch console.logs to avoid logging during side-effect free\n// replaying on render function. This currently only patches the object\n// lazily which won't cover if the log function was extracted eagerly.\n// We could also eagerly patch the method.\n\nlet disabledDepth = 0;\nlet prevLog;\nlet prevInfo;\nlet prevWarn;\nlet prevError;\nlet prevGroup;\nlet prevGroupCollapsed;\nlet prevGroupEnd;\n\nfunction disabledLog() {}\ndisabledLog.__reactDisabledLog = true;\n\nexport function disableLogs(): void {\n  if (__DEV__) {\n    if (disabledDepth === 0) {\n      /* eslint-disable react-internal/no-production-logging */\n      prevLog = console.log;\n      prevInfo = console.info;\n      prevWarn = console.warn;\n      prevError = console.error;\n      prevGroup = console.group;\n      prevGroupCollapsed = console.groupCollapsed;\n      prevGroupEnd = console.groupEnd;\n      // https://github.com/facebook/react/issues/19099\n      const props = {\n        configurable: true,\n        enumerable: true,\n        value: disabledLog,\n        writable: true,\n      };\n      // $FlowFixMe Flow thinks console is immutable.\n      Object.defineProperties(console, {\n        info: props,\n        log: props,\n        warn: props,\n        error: props,\n        group: props,\n        groupCollapsed: props,\n        groupEnd: props,\n      });\n      /* eslint-enable react-internal/no-production-logging */\n    }\n    disabledDepth++;\n  }\n}\n\nexport function reenableLogs(): void {\n  if (__DEV__) {\n    disabledDepth--;\n    if (disabledDepth === 0) {\n      /* eslint-disable react-internal/no-production-logging */\n      const props = {\n        configurable: true,\n        enumerable: true,\n        writable: true,\n      };\n      // $FlowFixMe Flow thinks console is immutable.\n      Object.defineProperties(console, {\n        log: {...props, value: prevLog},\n        info: {...props, value: prevInfo},\n        warn: {...props, value: prevWarn},\n        error: {...props, value: prevError},\n        group: {...props, value: prevGroup},\n        groupCollapsed: {...props, value: prevGroupCollapsed},\n        groupEnd: {...props, value: prevGroupEnd},\n      });\n      /* eslint-enable react-internal/no-production-logging */\n    }\n    if (disabledDepth < 0) {\n      console.error(\n        'disabledDepth fell below zero. ' +\n          'This is a bug in React. Please file an issue.',\n      );\n    }\n  }\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Source} from 'shared/ReactElementType';\nimport type {LazyComponent} from 'react/src/ReactLazy';\n\nimport {\n  enableComponentStackLocations,\n  disableNativeComponentFrames,\n} from 'shared/ReactFeatureFlags';\n\nimport {\n  REACT_SUSPENSE_TYPE,\n  REACT_SUSPENSE_LIST_TYPE,\n  REACT_FORWARD_REF_TYPE,\n  REACT_MEMO_TYPE,\n  REACT_LAZY_TYPE,\n} from 'shared/ReactSymbols';\n\nimport {disableLogs, reenableLogs} from 'shared/ConsolePatchingDev';\n\nimport ReactSharedInternals from 'shared/ReactSharedInternals';\n\nconst {ReactCurrentDispatcher} = ReactSharedInternals;\n\nlet prefix;\nexport function describeBuiltInComponentFrame(\n  name: string,\n  source: void | null | Source,\n  ownerFn: void | null | Function,\n): string {\n  if (enableComponentStackLocations) {\n    if (prefix === undefined) {\n      // Extract the VM specific prefix used by each line.\n      try {\n        throw Error();\n      } catch (x) {\n        const match = x.stack.trim().match(/\\n( *(at )?)/);\n        prefix = (match && match[1]) || '';\n      }\n    }\n    // We use the prefix to ensure our stacks line up with native stack frames.\n    return '\\n' + prefix + name;\n  } else {\n    let ownerName = null;\n    if (__DEV__ && ownerFn) {\n      ownerName = ownerFn.displayName || ownerFn.name || null;\n    }\n    return describeComponentFrame(name, source, ownerName);\n  }\n}\n\nlet reentry = false;\nlet componentFrameCache;\nif (__DEV__) {\n  const PossiblyWeakMap = typeof WeakMap === 'function' ? WeakMap : Map;\n  componentFrameCache = new PossiblyWeakMap();\n}\n\nexport function describeNativeComponentFrame(\n  fn: Function,\n  construct: boolean,\n): string {\n  // If something asked for a stack inside a fake render, it should get ignored.\n  if (disableNativeComponentFrames || !fn || reentry) {\n    return '';\n  }\n\n  if (__DEV__) {\n    const frame = componentFrameCache.get(fn);\n    if (frame !== undefined) {\n      return frame;\n    }\n  }\n\n  let control;\n\n  reentry = true;\n  const previousPrepareStackTrace = Error.prepareStackTrace;\n  // $FlowFixMe It does accept undefined.\n  Error.prepareStackTrace = undefined;\n  let previousDispatcher;\n  if (__DEV__) {\n    previousDispatcher = ReactCurrentDispatcher.current;\n    // Set the dispatcher in DEV because this might be call in the render function\n    // for warnings.\n    ReactCurrentDispatcher.current = null;\n    disableLogs();\n  }\n  try {\n    // This should throw.\n    if (construct) {\n      // Something should be setting the props in the constructor.\n      const Fake = function() {\n        throw Error();\n      };\n      // $FlowFixMe\n      Object.defineProperty(Fake.prototype, 'props', {\n        set: function() {\n          // We use a throwing setter instead of frozen or non-writable props\n          // because that won't throw in a non-strict mode function.\n          throw Error();\n        },\n      });\n      if (typeof Reflect === 'object' && Reflect.construct) {\n        // We construct a different control for this case to include any extra\n        // frames added by the construct call.\n        try {\n          Reflect.construct(Fake, []);\n        } catch (x) {\n          control = x;\n        }\n        Reflect.construct(fn, [], Fake);\n      } else {\n        try {\n          Fake.call();\n        } catch (x) {\n          control = x;\n        }\n        fn.call(Fake.prototype);\n      }\n    } else {\n      try {\n        throw Error();\n      } catch (x) {\n        control = x;\n      }\n      fn();\n    }\n  } catch (sample) {\n    // This is inlined manually because closure doesn't do it for us.\n    if (sample && control && typeof sample.stack === 'string') {\n      // This extracts the first frame from the sample that isn't also in the control.\n      // Skipping one frame that we assume is the frame that calls the two.\n      const sampleLines = sample.stack.split('\\n');\n      const controlLines = control.stack.split('\\n');\n      let s = sampleLines.length - 1;\n      let c = controlLines.length - 1;\n      while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {\n        // We expect at least one stack frame to be shared.\n        // Typically this will be the root most one. However, stack frames may be\n        // cut off due to maximum stack limits. In this case, one maybe cut off\n        // earlier than the other. We assume that the sample is longer or the same\n        // and there for cut off earlier. So we should find the root most frame in\n        // the sample somewhere in the control.\n        c--;\n      }\n      for (; s >= 1 && c >= 0; s--, c--) {\n        // Next we find the first one that isn't the same which should be the\n        // frame that called our sample function and the control.\n        if (sampleLines[s] !== controlLines[c]) {\n          // In V8, the first line is describing the message but other VMs don't.\n          // If we're about to return the first line, and the control is also on the same\n          // line, that's a pretty good indicator that our sample threw at same line as\n          // the control. I.e. before we entered the sample frame. So we ignore this result.\n          // This can happen if you passed a class to function component, or non-function.\n          if (s !== 1 || c !== 1) {\n            do {\n              s--;\n              c--;\n              // We may still have similar intermediate frames from the construct call.\n              // The next one that isn't the same should be our match though.\n              if (c < 0 || sampleLines[s] !== controlLines[c]) {\n                // V8 adds a \"new\" prefix for native classes. Let's remove it to make it prettier.\n                const frame = '\\n' + sampleLines[s].replace(' at new ', ' at ');\n                if (__DEV__) {\n                  if (typeof fn === 'function') {\n                    componentFrameCache.set(fn, frame);\n                  }\n                }\n                // Return the line we found.\n                return frame;\n              }\n            } while (s >= 1 && c >= 0);\n          }\n          break;\n        }\n      }\n    }\n  } finally {\n    reentry = false;\n    if (__DEV__) {\n      ReactCurrentDispatcher.current = previousDispatcher;\n      reenableLogs();\n    }\n    Error.prepareStackTrace = previousPrepareStackTrace;\n  }\n  // Fallback to just using the name if we couldn't make it throw.\n  const name = fn ? fn.displayName || fn.name : '';\n  const syntheticFrame = name ? describeBuiltInComponentFrame(name) : '';\n  if (__DEV__) {\n    if (typeof fn === 'function') {\n      componentFrameCache.set(fn, syntheticFrame);\n    }\n  }\n  return syntheticFrame;\n}\n\nconst BEFORE_SLASH_RE = /^(.*)[\\\\\\/]/;\n\nfunction describeComponentFrame(\n  name: null | string,\n  source: void | null | Source,\n  ownerName: null | string,\n) {\n  let sourceInfo = '';\n  if (__DEV__ && source) {\n    const path = source.fileName;\n    let fileName = path.replace(BEFORE_SLASH_RE, '');\n    // In DEV, include code for a common special case:\n    // prefer \"folder/index.js\" instead of just \"index.js\".\n    if (/^index\\./.test(fileName)) {\n      const match = path.match(BEFORE_SLASH_RE);\n      if (match) {\n        const pathBeforeSlash = match[1];\n        if (pathBeforeSlash) {\n          const folderName = pathBeforeSlash.replace(BEFORE_SLASH_RE, '');\n          fileName = folderName + '/' + fileName;\n        }\n      }\n    }\n    sourceInfo = ' (at ' + fileName + ':' + source.lineNumber + ')';\n  } else if (ownerName) {\n    sourceInfo = ' (created by ' + ownerName + ')';\n  }\n  return '\\n    in ' + (name || 'Unknown') + sourceInfo;\n}\n\nexport function describeClassComponentFrame(\n  ctor: Function,\n  source: void | null | Source,\n  ownerFn: void | null | Function,\n): string {\n  if (enableComponentStackLocations) {\n    return describeNativeComponentFrame(ctor, true);\n  } else {\n    return describeFunctionComponentFrame(ctor, source, ownerFn);\n  }\n}\n\nexport function describeFunctionComponentFrame(\n  fn: Function,\n  source: void | null | Source,\n  ownerFn: void | null | Function,\n): string {\n  if (enableComponentStackLocations) {\n    return describeNativeComponentFrame(fn, false);\n  } else {\n    if (!fn) {\n      return '';\n    }\n    const name = fn.displayName || fn.name || null;\n    let ownerName = null;\n    if (__DEV__ && ownerFn) {\n      ownerName = ownerFn.displayName || ownerFn.name || null;\n    }\n    return describeComponentFrame(name, source, ownerName);\n  }\n}\n\nfunction shouldConstruct(Component: Function) {\n  const prototype = Component.prototype;\n  return !!(prototype && prototype.isReactComponent);\n}\n\nexport function describeUnknownElementTypeFrameInDEV(\n  type: any,\n  source: void | null | Source,\n  ownerFn: void | null | Function,\n): string {\n  if (!__DEV__) {\n    return '';\n  }\n  if (type == null) {\n    return '';\n  }\n  if (typeof type === 'function') {\n    if (enableComponentStackLocations) {\n      return describeNativeComponentFrame(type, shouldConstruct(type));\n    } else {\n      return describeFunctionComponentFrame(type, source, ownerFn);\n    }\n  }\n  if (typeof type === 'string') {\n    return describeBuiltInComponentFrame(type, source, ownerFn);\n  }\n  switch (type) {\n    case REACT_SUSPENSE_TYPE:\n      return describeBuiltInComponentFrame('Suspense', source, ownerFn);\n    case REACT_SUSPENSE_LIST_TYPE:\n      return describeBuiltInComponentFrame('SuspenseList', source, ownerFn);\n  }\n  if (typeof type === 'object') {\n    switch (type.$$typeof) {\n      case REACT_FORWARD_REF_TYPE:\n        return describeFunctionComponentFrame(type.render, source, ownerFn);\n      case REACT_MEMO_TYPE:\n        // Memo may contain any component type so we recursively resolve it.\n        return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);\n      case REACT_LAZY_TYPE: {\n        const lazyComponent: LazyComponent<any, any> = (type: any);\n        const payload = lazyComponent._payload;\n        const init = lazyComponent._init;\n        try {\n          // Lazy may contain any component type so we recursively resolve it.\n          return describeUnknownElementTypeFrameInDEV(\n            init(payload),\n            source,\n            ownerFn,\n          );\n        } catch (x) {}\n      }\n    }\n  }\n  return '';\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nconst hasOwnProperty = Object.prototype.hasOwnProperty;\n\nexport default hasOwnProperty;\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nconst loggedTypeFailures = {};\n\nimport {describeUnknownElementTypeFrameInDEV} from 'shared/ReactComponentStackFrame';\n\nimport ReactSharedInternals from 'shared/ReactSharedInternals';\nimport hasOwnProperty from 'shared/hasOwnProperty';\n\nconst ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;\n\nfunction setCurrentlyValidatingElement(element) {\n  if (__DEV__) {\n    if (element) {\n      const owner = element._owner;\n      const stack = describeUnknownElementTypeFrameInDEV(\n        element.type,\n        element._source,\n        owner ? owner.type : null,\n      );\n      ReactDebugCurrentFrame.setExtraStackFrame(stack);\n    } else {\n      ReactDebugCurrentFrame.setExtraStackFrame(null);\n    }\n  }\n}\n\nexport default function checkPropTypes(\n  typeSpecs: Object,\n  values: Object,\n  location: string,\n  componentName: ?string,\n  element?: any,\n): void {\n  if (__DEV__) {\n    // $FlowFixMe This is okay but Flow doesn't know it.\n    const has = Function.call.bind(hasOwnProperty);\n    for (const typeSpecName in typeSpecs) {\n      if (has(typeSpecs, typeSpecName)) {\n        let error;\n        // Prop type validation may throw. In case they do, we don't want to\n        // fail the render phase where it didn't fail before. So we log it.\n        // After these have been cleaned up, we'll let them throw.\n        try {\n          // This is intentionally an invariant that gets caught. It's the same\n          // behavior as without this statement except with a better message.\n          if (typeof typeSpecs[typeSpecName] !== 'function') {\n            const err = Error(\n              (componentName || 'React class') +\n                ': ' +\n                location +\n                ' type `' +\n                typeSpecName +\n                '` is invalid; ' +\n                'it must be a function, usually from the `prop-types` package, but received `' +\n                typeof typeSpecs[typeSpecName] +\n                '`.' +\n                'This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.',\n            );\n            err.name = 'Invariant Violation';\n            throw err;\n          }\n          error = typeSpecs[typeSpecName](\n            values,\n            typeSpecName,\n            componentName,\n            location,\n            null,\n            'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED',\n          );\n        } catch (ex) {\n          error = ex;\n        }\n        if (error && !(error instanceof Error)) {\n          setCurrentlyValidatingElement(element);\n          console.error(\n            '%s: type specification of %s' +\n              ' `%s` is invalid; the type checker ' +\n              'function must return `null` or an `Error` but returned a %s. ' +\n              'You may have forgotten to pass an argument to the type checker ' +\n              'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' +\n              'shape all require an argument).',\n            componentName || 'React class',\n            location,\n            typeSpecName,\n            typeof error,\n          );\n          setCurrentlyValidatingElement(null);\n        }\n        if (error instanceof Error && !(error.message in loggedTypeFailures)) {\n          // Only monitor this failure once because there tends to be a lot of the\n          // same error.\n          loggedTypeFailures[error.message] = true;\n          setCurrentlyValidatingElement(element);\n          console.error('Failed %s type: %s', location, error.message);\n          setCurrentlyValidatingElement(null);\n        }\n      }\n    }\n  }\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Fiber} from './ReactInternalTypes';\n\nexport type StackCursor<T> = {|current: T|};\n\nconst valueStack: Array<any> = [];\n\nlet fiberStack: Array<Fiber | null>;\n\nif (__DEV__) {\n  fiberStack = [];\n}\n\nlet index = -1;\n\nfunction createCursor<T>(defaultValue: T): StackCursor<T> {\n  return {\n    current: defaultValue,\n  };\n}\n\nfunction isEmpty(): boolean {\n  return index === -1;\n}\n\nfunction pop<T>(cursor: StackCursor<T>, fiber: Fiber): void {\n  if (index < 0) {\n    if (__DEV__) {\n      console.error('Unexpected pop.');\n    }\n    return;\n  }\n\n  if (__DEV__) {\n    if (fiber !== fiberStack[index]) {\n      console.error('Unexpected Fiber popped.');\n    }\n  }\n\n  cursor.current = valueStack[index];\n\n  valueStack[index] = null;\n\n  if (__DEV__) {\n    fiberStack[index] = null;\n  }\n\n  index--;\n}\n\nfunction push<T>(cursor: StackCursor<T>, value: T, fiber: Fiber): void {\n  index++;\n\n  valueStack[index] = cursor.current;\n\n  if (__DEV__) {\n    fiberStack[index] = fiber;\n  }\n\n  cursor.current = value;\n}\n\nfunction checkThatStackIsEmpty() {\n  if (__DEV__) {\n    if (index !== -1) {\n      console.error(\n        'Expected an empty stack. Something was not reset properly.',\n      );\n    }\n  }\n}\n\nfunction resetStackAfterFatalErrorInDev() {\n  if (__DEV__) {\n    index = -1;\n    valueStack.length = 0;\n    fiberStack.length = 0;\n  }\n}\n\nexport {\n  createCursor,\n  isEmpty,\n  pop,\n  push,\n  // DEV only:\n  checkThatStackIsEmpty,\n  resetStackAfterFatalErrorInDev,\n};\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Fiber} from './ReactInternalTypes';\nimport type {StackCursor} from './ReactFiberStack.old';\n\nimport {isFiberMounted} from './ReactFiberTreeReflection';\nimport {disableLegacyContext} from 'shared/ReactFeatureFlags';\nimport {ClassComponent, HostRoot} from './ReactWorkTags';\nimport getComponentNameFromFiber from 'react-reconciler/src/getComponentNameFromFiber';\nimport invariant from 'shared/invariant';\nimport checkPropTypes from 'shared/checkPropTypes';\n\nimport {createCursor, push, pop} from './ReactFiberStack.old';\n\nlet warnedAboutMissingGetChildContext;\n\nif (__DEV__) {\n  warnedAboutMissingGetChildContext = {};\n}\n\nexport const emptyContextObject = {};\nif (__DEV__) {\n  Object.freeze(emptyContextObject);\n}\n\n// A cursor to the current merged context object on the stack.\nconst contextStackCursor: StackCursor<Object> = createCursor(\n  emptyContextObject,\n);\n// A cursor to a boolean indicating whether the context has changed.\nconst didPerformWorkStackCursor: StackCursor<boolean> = createCursor(false);\n// Keep track of the previous context object that was on the stack.\n// We use this to get access to the parent context after we have already\n// pushed the next context provider, and now need to merge their contexts.\nlet previousContext: Object = emptyContextObject;\n\nfunction getUnmaskedContext(\n  workInProgress: Fiber,\n  Component: Function,\n  didPushOwnContextIfProvider: boolean,\n): Object {\n  if (disableLegacyContext) {\n    return emptyContextObject;\n  } else {\n    if (didPushOwnContextIfProvider && isContextProvider(Component)) {\n      // If the fiber is a context provider itself, when we read its context\n      // we may have already pushed its own child context on the stack. A context\n      // provider should not \"see\" its own child context. Therefore we read the\n      // previous (parent) context instead for a context provider.\n      return previousContext;\n    }\n    return contextStackCursor.current;\n  }\n}\n\nfunction cacheContext(\n  workInProgress: Fiber,\n  unmaskedContext: Object,\n  maskedContext: Object,\n): void {\n  if (disableLegacyContext) {\n    return;\n  } else {\n    const instance = workInProgress.stateNode;\n    instance.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext;\n    instance.__reactInternalMemoizedMaskedChildContext = maskedContext;\n  }\n}\n\nfunction getMaskedContext(\n  workInProgress: Fiber,\n  unmaskedContext: Object,\n): Object {\n  if (disableLegacyContext) {\n    return emptyContextObject;\n  } else {\n    const type = workInProgress.type;\n    const contextTypes = type.contextTypes;\n    if (!contextTypes) {\n      return emptyContextObject;\n    }\n\n    // Avoid recreating masked context unless unmasked context has changed.\n    // Failing to do this will result in unnecessary calls to componentWillReceiveProps.\n    // This may trigger infinite loops if componentWillReceiveProps calls setState.\n    const instance = workInProgress.stateNode;\n    if (\n      instance &&\n      instance.__reactInternalMemoizedUnmaskedChildContext === unmaskedContext\n    ) {\n      return instance.__reactInternalMemoizedMaskedChildContext;\n    }\n\n    const context = {};\n    for (const key in contextTypes) {\n      context[key] = unmaskedContext[key];\n    }\n\n    if (__DEV__) {\n      const name = getComponentNameFromFiber(workInProgress) || 'Unknown';\n      checkPropTypes(contextTypes, context, 'context', name);\n    }\n\n    // Cache unmasked context so we can avoid recreating masked context unless necessary.\n    // Context is created before the class component is instantiated so check for instance.\n    if (instance) {\n      cacheContext(workInProgress, unmaskedContext, context);\n    }\n\n    return context;\n  }\n}\n\nfunction hasContextChanged(): boolean {\n  if (disableLegacyContext) {\n    return false;\n  } else {\n    return didPerformWorkStackCursor.current;\n  }\n}\n\nfunction isContextProvider(type: Function): boolean {\n  if (disableLegacyContext) {\n    return false;\n  } else {\n    const childContextTypes = type.childContextTypes;\n    return childContextTypes !== null && childContextTypes !== undefined;\n  }\n}\n\nfunction popContext(fiber: Fiber): void {\n  if (disableLegacyContext) {\n    return;\n  } else {\n    pop(didPerformWorkStackCursor, fiber);\n    pop(contextStackCursor, fiber);\n  }\n}\n\nfunction popTopLevelContextObject(fiber: Fiber): void {\n  if (disableLegacyContext) {\n    return;\n  } else {\n    pop(didPerformWorkStackCursor, fiber);\n    pop(contextStackCursor, fiber);\n  }\n}\n\nfunction pushTopLevelContextObject(\n  fiber: Fiber,\n  context: Object,\n  didChange: boolean,\n): void {\n  if (disableLegacyContext) {\n    return;\n  } else {\n    invariant(\n      contextStackCursor.current === emptyContextObject,\n      'Unexpected context found on stack. ' +\n        'This error is likely caused by a bug in React. Please file an issue.',\n    );\n\n    push(contextStackCursor, context, fiber);\n    push(didPerformWorkStackCursor, didChange, fiber);\n  }\n}\n\nfunction processChildContext(\n  fiber: Fiber,\n  type: any,\n  parentContext: Object,\n): Object {\n  if (disableLegacyContext) {\n    return parentContext;\n  } else {\n    const instance = fiber.stateNode;\n    const childContextTypes = type.childContextTypes;\n\n    // TODO (bvaughn) Replace this behavior with an invariant() in the future.\n    // It has only been added in Fiber to match the (unintentional) behavior in Stack.\n    if (typeof instance.getChildContext !== 'function') {\n      if (__DEV__) {\n        const componentName = getComponentNameFromFiber(fiber) || 'Unknown';\n\n        if (!warnedAboutMissingGetChildContext[componentName]) {\n          warnedAboutMissingGetChildContext[componentName] = true;\n          console.error(\n            '%s.childContextTypes is specified but there is no getChildContext() method ' +\n              'on the instance. You can either define getChildContext() on %s or remove ' +\n              'childContextTypes from it.',\n            componentName,\n            componentName,\n          );\n        }\n      }\n      return parentContext;\n    }\n\n    const childContext = instance.getChildContext();\n    for (const contextKey in childContext) {\n      invariant(\n        contextKey in childContextTypes,\n        '%s.getChildContext(): key \"%s\" is not defined in childContextTypes.',\n        getComponentNameFromFiber(fiber) || 'Unknown',\n        contextKey,\n      );\n    }\n    if (__DEV__) {\n      const name = getComponentNameFromFiber(fiber) || 'Unknown';\n      checkPropTypes(childContextTypes, childContext, 'child context', name);\n    }\n\n    return {...parentContext, ...childContext};\n  }\n}\n\nfunction pushContextProvider(workInProgress: Fiber): boolean {\n  if (disableLegacyContext) {\n    return false;\n  } else {\n    const instance = workInProgress.stateNode;\n    // We push the context as early as possible to ensure stack integrity.\n    // If the instance does not exist yet, we will push null at first,\n    // and replace it on the stack later when invalidating the context.\n    const memoizedMergedChildContext =\n      (instance && instance.__reactInternalMemoizedMergedChildContext) ||\n      emptyContextObject;\n\n    // Remember the parent context so we can merge with it later.\n    // Inherit the parent's did-perform-work value to avoid inadvertently blocking updates.\n    previousContext = contextStackCursor.current;\n    push(contextStackCursor, memoizedMergedChildContext, workInProgress);\n    push(\n      didPerformWorkStackCursor,\n      didPerformWorkStackCursor.current,\n      workInProgress,\n    );\n\n    return true;\n  }\n}\n\nfunction invalidateContextProvider(\n  workInProgress: Fiber,\n  type: any,\n  didChange: boolean,\n): void {\n  if (disableLegacyContext) {\n    return;\n  } else {\n    const instance = workInProgress.stateNode;\n    invariant(\n      instance,\n      'Expected to have an instance by this point. ' +\n        'This error is likely caused by a bug in React. Please file an issue.',\n    );\n\n    if (didChange) {\n      // Merge parent and own context.\n      // Skip this if we're not updating due to sCU.\n      // This avoids unnecessarily recomputing memoized values.\n      const mergedContext = processChildContext(\n        workInProgress,\n        type,\n        previousContext,\n      );\n      instance.__reactInternalMemoizedMergedChildContext = mergedContext;\n\n      // Replace the old (or empty) context with the new one.\n      // It is important to unwind the context in the reverse order.\n      pop(didPerformWorkStackCursor, workInProgress);\n      pop(contextStackCursor, workInProgress);\n      // Now push the new context and mark that it has changed.\n      push(contextStackCursor, mergedContext, workInProgress);\n      push(didPerformWorkStackCursor, didChange, workInProgress);\n    } else {\n      pop(didPerformWorkStackCursor, workInProgress);\n      push(didPerformWorkStackCursor, didChange, workInProgress);\n    }\n  }\n}\n\nfunction findCurrentUnmaskedContext(fiber: Fiber): Object {\n  if (disableLegacyContext) {\n    return emptyContextObject;\n  } else {\n    // Currently this is only used with renderSubtreeIntoContainer; not sure if it\n    // makes sense elsewhere\n    invariant(\n      isFiberMounted(fiber) && fiber.tag === ClassComponent,\n      'Expected subtree parent to be a mounted class component. ' +\n        'This error is likely caused by a bug in React. Please file an issue.',\n    );\n\n    let node = fiber;\n    do {\n      switch (node.tag) {\n        case HostRoot:\n          return node.stateNode.context;\n        case ClassComponent: {\n          const Component = node.type;\n          if (isContextProvider(Component)) {\n            return node.stateNode.__reactInternalMemoizedMergedChildContext;\n          }\n          break;\n        }\n      }\n      node = node.return;\n    } while (node !== null);\n    invariant(\n      false,\n      'Found unexpected detached subtree parent. ' +\n        'This error is likely caused by a bug in React. Please file an issue.',\n    );\n  }\n}\n\nexport {\n  getUnmaskedContext,\n  cacheContext,\n  getMaskedContext,\n  hasContextChanged,\n  popContext,\n  popTopLevelContextObject,\n  pushTopLevelContextObject,\n  processChildContext,\n  isContextProvider,\n  pushContextProvider,\n  invalidateContextProvider,\n  findCurrentUnmaskedContext,\n};\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nexport type RootTag = 0 | 1;\n\nexport const LegacyRoot = 0;\nexport const ConcurrentRoot = 1;\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {SchedulerCallback} from './Scheduler';\n\nimport {\n  DiscreteEventPriority,\n  getCurrentUpdatePriority,\n  setCurrentUpdatePriority,\n} from './ReactEventPriorities.old';\nimport {ImmediatePriority, scheduleCallback} from './Scheduler';\n\nlet syncQueue: Array<SchedulerCallback> | null = null;\nlet includesLegacySyncCallbacks: boolean = false;\nlet isFlushingSyncQueue: boolean = false;\n\nexport function scheduleSyncCallback(callback: SchedulerCallback) {\n  // Push this callback into an internal queue. We'll flush these either in\n  // the next tick, or earlier if something calls `flushSyncCallbackQueue`.\n  if (syncQueue === null) {\n    syncQueue = [callback];\n  } else {\n    // Push onto existing queue. Don't need to schedule a callback because\n    // we already scheduled one when we created the queue.\n    syncQueue.push(callback);\n  }\n}\n\nexport function scheduleLegacySyncCallback(callback: SchedulerCallback) {\n  includesLegacySyncCallbacks = true;\n  scheduleSyncCallback(callback);\n}\n\nexport function flushSyncCallbacksOnlyInLegacyMode() {\n  // Only flushes the queue if there's a legacy sync callback scheduled.\n  // TODO: There's only a single type of callback: performSyncOnWorkOnRoot. So\n  // it might make more sense for the queue to be a list of roots instead of a\n  // list of generic callbacks. Then we can have two: one for legacy roots, one\n  // for concurrent roots. And this method would only flush the legacy ones.\n  if (includesLegacySyncCallbacks) {\n    flushSyncCallbacks();\n  }\n}\n\nexport function flushSyncCallbacks() {\n  if (!isFlushingSyncQueue && syncQueue !== null) {\n    // Prevent re-entrance.\n    isFlushingSyncQueue = true;\n    let i = 0;\n    const previousUpdatePriority = getCurrentUpdatePriority();\n    try {\n      const isSync = true;\n      const queue = syncQueue;\n      // TODO: Is this necessary anymore? The only user code that runs in this\n      // queue is in the render or commit phases.\n      setCurrentUpdatePriority(DiscreteEventPriority);\n      for (; i < queue.length; i++) {\n        let callback = queue[i];\n        do {\n          callback = callback(isSync);\n        } while (callback !== null);\n      }\n      syncQueue = null;\n      includesLegacySyncCallbacks = false;\n    } catch (error) {\n      // If something throws, leave the remaining callbacks on the queue.\n      if (syncQueue !== null) {\n        syncQueue = syncQueue.slice(i + 1);\n      }\n      // Resume flushing in the next tick\n      scheduleCallback(ImmediatePriority, flushSyncCallbacks);\n      throw error;\n    } finally {\n      setCurrentUpdatePriority(previousUpdatePriority);\n      isFlushingSyncQueue = false;\n    }\n  }\n  return null;\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n// TODO: this is special because it gets imported during build.\n//\n// TODO: 17.0.3 has not been released to NPM;\n// It exists as a placeholder so that DevTools can support work tag changes between releases.\n// When we next publish a release (either 17.0.3 or 17.1.0), update the matching TODO in backend/renderer.js\n// TODO: This module is used both by the release scripts and to expose a version\n// at runtime. We should instead inject the version number as part of the build\n// process, and use the ReactVersions.js module as the single source of truth.\nexport default '17.0.3';\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport ReactSharedInternals from 'shared/ReactSharedInternals';\n\nconst {ReactCurrentBatchConfig} = ReactSharedInternals;\n\nexport const NoTransition = 0;\n\nexport function requestCurrentTransition(): number {\n  return ReactCurrentBatchConfig.transition;\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\n/**\n * inlined Object.is polyfill to avoid requiring consumers ship their own\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is\n */\nfunction is(x: any, y: any) {\n  return (\n    (x === y && (x !== 0 || 1 / x === 1 / y)) || (x !== x && y !== y) // eslint-disable-line no-self-compare\n  );\n}\n\nconst objectIs: (x: any, y: any) => boolean =\n  typeof Object.is === 'function' ? Object.is : is;\n\nexport default objectIs;\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport is from './objectIs';\nimport hasOwnProperty from './hasOwnProperty';\n\n/**\n * Performs equality by iterating through keys on an object and returning false\n * when any key has values which are not strictly equal between the arguments.\n * Returns true when the values of all keys are strictly equal.\n */\nfunction shallowEqual(objA: mixed, objB: mixed): boolean {\n  if (is(objA, objB)) {\n    return true;\n  }\n\n  if (\n    typeof objA !== 'object' ||\n    objA === null ||\n    typeof objB !== 'object' ||\n    objB === null\n  ) {\n    return false;\n  }\n\n  const keysA = Object.keys(objA);\n  const keysB = Object.keys(objB);\n\n  if (keysA.length !== keysB.length) {\n    return false;\n  }\n\n  // Test for A's keys different from B.\n  for (let i = 0; i < keysA.length; i++) {\n    if (\n      !hasOwnProperty.call(objB, keysA[i]) ||\n      !is(objA[keysA[i]], objB[keysA[i]])\n    ) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nexport default shallowEqual;\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Fiber} from './ReactInternalTypes';\n\nimport {\n  HostComponent,\n  LazyComponent,\n  SuspenseComponent,\n  SuspenseListComponent,\n  FunctionComponent,\n  IndeterminateComponent,\n  ForwardRef,\n  SimpleMemoComponent,\n  ClassComponent,\n} from './ReactWorkTags';\nimport {\n  describeBuiltInComponentFrame,\n  describeFunctionComponentFrame,\n  describeClassComponentFrame,\n} from 'shared/ReactComponentStackFrame';\n\nfunction describeFiber(fiber: Fiber): string {\n  const owner: null | Function = __DEV__\n    ? fiber._debugOwner\n      ? fiber._debugOwner.type\n      : null\n    : null;\n  const source = __DEV__ ? fiber._debugSource : null;\n  switch (fiber.tag) {\n    case HostComponent:\n      return describeBuiltInComponentFrame(fiber.type, source, owner);\n    case LazyComponent:\n      return describeBuiltInComponentFrame('Lazy', source, owner);\n    case SuspenseComponent:\n      return describeBuiltInComponentFrame('Suspense', source, owner);\n    case SuspenseListComponent:\n      return describeBuiltInComponentFrame('SuspenseList', source, owner);\n    case FunctionComponent:\n    case IndeterminateComponent:\n    case SimpleMemoComponent:\n      return describeFunctionComponentFrame(fiber.type, source, owner);\n    case ForwardRef:\n      return describeFunctionComponentFrame(fiber.type.render, source, owner);\n    case ClassComponent:\n      return describeClassComponentFrame(fiber.type, source, owner);\n    default:\n      return '';\n  }\n}\n\nexport function getStackByFiberInDevAndProd(workInProgress: Fiber): string {\n  try {\n    let info = '';\n    let node = workInProgress;\n    do {\n      info += describeFiber(node);\n      node = node.return;\n    } while (node);\n    return info;\n  } catch (x) {\n    return '\\nError generating stack: ' + x.message + '\\n' + x.stack;\n  }\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Fiber} from './ReactInternalTypes';\n\nimport ReactSharedInternals from 'shared/ReactSharedInternals';\nimport {getStackByFiberInDevAndProd} from './ReactFiberComponentStack';\nimport getComponentNameFromFiber from 'react-reconciler/src/getComponentNameFromFiber';\n\nconst ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;\n\nexport let current: Fiber | null = null;\nexport let isRendering: boolean = false;\n\nexport function getCurrentFiberOwnerNameInDevOrNull(): string | null {\n  if (__DEV__) {\n    if (current === null) {\n      return null;\n    }\n    const owner = current._debugOwner;\n    if (owner !== null && typeof owner !== 'undefined') {\n      return getComponentNameFromFiber(owner);\n    }\n  }\n  return null;\n}\n\nfunction getCurrentFiberStackInDev(): string {\n  if (__DEV__) {\n    if (current === null) {\n      return '';\n    }\n    // Safe because if current fiber exists, we are reconciling,\n    // and it is guaranteed to be the work-in-progress version.\n    return getStackByFiberInDevAndProd(current);\n  }\n  return '';\n}\n\nexport function resetCurrentFiber() {\n  if (__DEV__) {\n    ReactDebugCurrentFrame.getCurrentStack = null;\n    current = null;\n    isRendering = false;\n  }\n}\n\nexport function setCurrentFiber(fiber: Fiber) {\n  if (__DEV__) {\n    ReactDebugCurrentFrame.getCurrentStack = getCurrentFiberStackInDev;\n    current = fiber;\n    isRendering = false;\n  }\n}\n\nexport function setIsRendering(rendering: boolean) {\n  if (__DEV__) {\n    isRendering = rendering;\n  }\n}\n\nexport function getIsRendering() {\n  if (__DEV__) {\n    return isRendering;\n  }\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Fiber} from './ReactInternalTypes';\n\nimport {\n  resetCurrentFiber as resetCurrentDebugFiberInDEV,\n  setCurrentFiber as setCurrentDebugFiberInDEV,\n} from './ReactCurrentFiber';\nimport getComponentNameFromFiber from 'react-reconciler/src/getComponentNameFromFiber';\nimport {StrictLegacyMode} from './ReactTypeOfMode';\n\ntype FiberArray = Array<Fiber>;\ntype FiberToFiberComponentsMap = Map<Fiber, FiberArray>;\n\nconst ReactStrictModeWarnings = {\n  recordUnsafeLifecycleWarnings(fiber: Fiber, instance: any): void {},\n  flushPendingUnsafeLifecycleWarnings(): void {},\n  recordLegacyContextWarning(fiber: Fiber, instance: any): void {},\n  flushLegacyContextWarning(): void {},\n  discardPendingWarnings(): void {},\n};\n\nif (__DEV__) {\n  const findStrictRoot = (fiber: Fiber): Fiber | null => {\n    let maybeStrictRoot = null;\n\n    let node = fiber;\n    while (node !== null) {\n      if (node.mode & StrictLegacyMode) {\n        maybeStrictRoot = node;\n      }\n      node = node.return;\n    }\n\n    return maybeStrictRoot;\n  };\n\n  const setToSortedString = set => {\n    const array = [];\n    set.forEach(value => {\n      array.push(value);\n    });\n    return array.sort().join(', ');\n  };\n\n  let pendingComponentWillMountWarnings: Array<Fiber> = [];\n  let pendingUNSAFE_ComponentWillMountWarnings: Array<Fiber> = [];\n  let pendingComponentWillReceivePropsWarnings: Array<Fiber> = [];\n  let pendingUNSAFE_ComponentWillReceivePropsWarnings: Array<Fiber> = [];\n  let pendingComponentWillUpdateWarnings: Array<Fiber> = [];\n  let pendingUNSAFE_ComponentWillUpdateWarnings: Array<Fiber> = [];\n\n  // Tracks components we have already warned about.\n  const didWarnAboutUnsafeLifecycles = new Set();\n\n  ReactStrictModeWarnings.recordUnsafeLifecycleWarnings = (\n    fiber: Fiber,\n    instance: any,\n  ) => {\n    // Dedupe strategy: Warn once per component.\n    if (didWarnAboutUnsafeLifecycles.has(fiber.type)) {\n      return;\n    }\n\n    if (\n      typeof instance.componentWillMount === 'function' &&\n      // Don't warn about react-lifecycles-compat polyfilled components.\n      instance.componentWillMount.__suppressDeprecationWarning !== true\n    ) {\n      pendingComponentWillMountWarnings.push(fiber);\n    }\n\n    if (\n      fiber.mode & StrictLegacyMode &&\n      typeof instance.UNSAFE_componentWillMount === 'function'\n    ) {\n      pendingUNSAFE_ComponentWillMountWarnings.push(fiber);\n    }\n\n    if (\n      typeof instance.componentWillReceiveProps === 'function' &&\n      instance.componentWillReceiveProps.__suppressDeprecationWarning !== true\n    ) {\n      pendingComponentWillReceivePropsWarnings.push(fiber);\n    }\n\n    if (\n      fiber.mode & StrictLegacyMode &&\n      typeof instance.UNSAFE_componentWillReceiveProps === 'function'\n    ) {\n      pendingUNSAFE_ComponentWillReceivePropsWarnings.push(fiber);\n    }\n\n    if (\n      typeof instance.componentWillUpdate === 'function' &&\n      instance.componentWillUpdate.__suppressDeprecationWarning !== true\n    ) {\n      pendingComponentWillUpdateWarnings.push(fiber);\n    }\n\n    if (\n      fiber.mode & StrictLegacyMode &&\n      typeof instance.UNSAFE_componentWillUpdate === 'function'\n    ) {\n      pendingUNSAFE_ComponentWillUpdateWarnings.push(fiber);\n    }\n  };\n\n  ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings = () => {\n    // We do an initial pass to gather component names\n    const componentWillMountUniqueNames = new Set();\n    if (pendingComponentWillMountWarnings.length > 0) {\n      pendingComponentWillMountWarnings.forEach(fiber => {\n        componentWillMountUniqueNames.add(\n          getComponentNameFromFiber(fiber) || 'Component',\n        );\n        didWarnAboutUnsafeLifecycles.add(fiber.type);\n      });\n      pendingComponentWillMountWarnings = [];\n    }\n\n    const UNSAFE_componentWillMountUniqueNames = new Set();\n    if (pendingUNSAFE_ComponentWillMountWarnings.length > 0) {\n      pendingUNSAFE_ComponentWillMountWarnings.forEach(fiber => {\n        UNSAFE_componentWillMountUniqueNames.add(\n          getComponentNameFromFiber(fiber) || 'Component',\n        );\n        didWarnAboutUnsafeLifecycles.add(fiber.type);\n      });\n      pendingUNSAFE_ComponentWillMountWarnings = [];\n    }\n\n    const componentWillReceivePropsUniqueNames = new Set();\n    if (pendingComponentWillReceivePropsWarnings.length > 0) {\n      pendingComponentWillReceivePropsWarnings.forEach(fiber => {\n        componentWillReceivePropsUniqueNames.add(\n          getComponentNameFromFiber(fiber) || 'Component',\n        );\n        didWarnAboutUnsafeLifecycles.add(fiber.type);\n      });\n\n      pendingComponentWillReceivePropsWarnings = [];\n    }\n\n    const UNSAFE_componentWillReceivePropsUniqueNames = new Set();\n    if (pendingUNSAFE_ComponentWillReceivePropsWarnings.length > 0) {\n      pendingUNSAFE_ComponentWillReceivePropsWarnings.forEach(fiber => {\n        UNSAFE_componentWillReceivePropsUniqueNames.add(\n          getComponentNameFromFiber(fiber) || 'Component',\n        );\n        didWarnAboutUnsafeLifecycles.add(fiber.type);\n      });\n\n      pendingUNSAFE_ComponentWillReceivePropsWarnings = [];\n    }\n\n    const componentWillUpdateUniqueNames = new Set();\n    if (pendingComponentWillUpdateWarnings.length > 0) {\n      pendingComponentWillUpdateWarnings.forEach(fiber => {\n        componentWillUpdateUniqueNames.add(\n          getComponentNameFromFiber(fiber) || 'Component',\n        );\n        didWarnAboutUnsafeLifecycles.add(fiber.type);\n      });\n\n      pendingComponentWillUpdateWarnings = [];\n    }\n\n    const UNSAFE_componentWillUpdateUniqueNames = new Set();\n    if (pendingUNSAFE_ComponentWillUpdateWarnings.length > 0) {\n      pendingUNSAFE_ComponentWillUpdateWarnings.forEach(fiber => {\n        UNSAFE_componentWillUpdateUniqueNames.add(\n          getComponentNameFromFiber(fiber) || 'Component',\n        );\n        didWarnAboutUnsafeLifecycles.add(fiber.type);\n      });\n\n      pendingUNSAFE_ComponentWillUpdateWarnings = [];\n    }\n\n    // Finally, we flush all the warnings\n    // UNSAFE_ ones before the deprecated ones, since they'll be 'louder'\n    if (UNSAFE_componentWillMountUniqueNames.size > 0) {\n      const sortedNames = setToSortedString(\n        UNSAFE_componentWillMountUniqueNames,\n      );\n      console.error(\n        'Using UNSAFE_componentWillMount in strict mode is not recommended and may indicate bugs in your code. ' +\n          'See https://reactjs.org/link/unsafe-component-lifecycles for details.\\n\\n' +\n          '* Move code with side effects to componentDidMount, and set initial state in the constructor.\\n' +\n          '\\nPlease update the following components: %s',\n        sortedNames,\n      );\n    }\n\n    if (UNSAFE_componentWillReceivePropsUniqueNames.size > 0) {\n      const sortedNames = setToSortedString(\n        UNSAFE_componentWillReceivePropsUniqueNames,\n      );\n      console.error(\n        'Using UNSAFE_componentWillReceiveProps in strict mode is not recommended ' +\n          'and may indicate bugs in your code. ' +\n          'See https://reactjs.org/link/unsafe-component-lifecycles for details.\\n\\n' +\n          '* Move data fetching code or side effects to componentDidUpdate.\\n' +\n          \"* If you're updating state whenever props change, \" +\n          'refactor your code to use memoization techniques or move it to ' +\n          'static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\\n' +\n          '\\nPlease update the following components: %s',\n        sortedNames,\n      );\n    }\n\n    if (UNSAFE_componentWillUpdateUniqueNames.size > 0) {\n      const sortedNames = setToSortedString(\n        UNSAFE_componentWillUpdateUniqueNames,\n      );\n      console.error(\n        'Using UNSAFE_componentWillUpdate in strict mode is not recommended ' +\n          'and may indicate bugs in your code. ' +\n          'See https://reactjs.org/link/unsafe-component-lifecycles for details.\\n\\n' +\n          '* Move data fetching code or side effects to componentDidUpdate.\\n' +\n          '\\nPlease update the following components: %s',\n        sortedNames,\n      );\n    }\n\n    if (componentWillMountUniqueNames.size > 0) {\n      const sortedNames = setToSortedString(componentWillMountUniqueNames);\n\n      console.warn(\n        'componentWillMount has been renamed, and is not recommended for use. ' +\n          'See https://reactjs.org/link/unsafe-component-lifecycles for details.\\n\\n' +\n          '* Move code with side effects to componentDidMount, and set initial state in the constructor.\\n' +\n          '* Rename componentWillMount to UNSAFE_componentWillMount to suppress ' +\n          'this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. ' +\n          'To rename all deprecated lifecycles to their new names, you can run ' +\n          '`npx react-codemod rename-unsafe-lifecycles` in your project source folder.\\n' +\n          '\\nPlease update the following components: %s',\n        sortedNames,\n      );\n    }\n\n    if (componentWillReceivePropsUniqueNames.size > 0) {\n      const sortedNames = setToSortedString(\n        componentWillReceivePropsUniqueNames,\n      );\n\n      console.warn(\n        'componentWillReceiveProps has been renamed, and is not recommended for use. ' +\n          'See https://reactjs.org/link/unsafe-component-lifecycles for details.\\n\\n' +\n          '* Move data fetching code or side effects to componentDidUpdate.\\n' +\n          \"* If you're updating state whenever props change, refactor your \" +\n          'code to use memoization techniques or move it to ' +\n          'static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\\n' +\n          '* Rename componentWillReceiveProps to UNSAFE_componentWillReceiveProps to suppress ' +\n          'this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. ' +\n          'To rename all deprecated lifecycles to their new names, you can run ' +\n          '`npx react-codemod rename-unsafe-lifecycles` in your project source folder.\\n' +\n          '\\nPlease update the following components: %s',\n        sortedNames,\n      );\n    }\n\n    if (componentWillUpdateUniqueNames.size > 0) {\n      const sortedNames = setToSortedString(componentWillUpdateUniqueNames);\n\n      console.warn(\n        'componentWillUpdate has been renamed, and is not recommended for use. ' +\n          'See https://reactjs.org/link/unsafe-component-lifecycles for details.\\n\\n' +\n          '* Move data fetching code or side effects to componentDidUpdate.\\n' +\n          '* Rename componentWillUpdate to UNSAFE_componentWillUpdate to suppress ' +\n          'this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. ' +\n          'To rename all deprecated lifecycles to their new names, you can run ' +\n          '`npx react-codemod rename-unsafe-lifecycles` in your project source folder.\\n' +\n          '\\nPlease update the following components: %s',\n        sortedNames,\n      );\n    }\n  };\n\n  let pendingLegacyContextWarning: FiberToFiberComponentsMap = new Map();\n\n  // Tracks components we have already warned about.\n  const didWarnAboutLegacyContext = new Set();\n\n  ReactStrictModeWarnings.recordLegacyContextWarning = (\n    fiber: Fiber,\n    instance: any,\n  ) => {\n    const strictRoot = findStrictRoot(fiber);\n    if (strictRoot === null) {\n      console.error(\n        'Expected to find a StrictMode component in a strict mode tree. ' +\n          'This error is likely caused by a bug in React. Please file an issue.',\n      );\n      return;\n    }\n\n    // Dedup strategy: Warn once per component.\n    if (didWarnAboutLegacyContext.has(fiber.type)) {\n      return;\n    }\n\n    let warningsForRoot = pendingLegacyContextWarning.get(strictRoot);\n\n    if (\n      fiber.type.contextTypes != null ||\n      fiber.type.childContextTypes != null ||\n      (instance !== null && typeof instance.getChildContext === 'function')\n    ) {\n      if (warningsForRoot === undefined) {\n        warningsForRoot = [];\n        pendingLegacyContextWarning.set(strictRoot, warningsForRoot);\n      }\n      warningsForRoot.push(fiber);\n    }\n  };\n\n  ReactStrictModeWarnings.flushLegacyContextWarning = () => {\n    ((pendingLegacyContextWarning: any): FiberToFiberComponentsMap).forEach(\n      (fiberArray: FiberArray, strictRoot) => {\n        if (fiberArray.length === 0) {\n          return;\n        }\n        const firstFiber = fiberArray[0];\n\n        const uniqueNames = new Set();\n        fiberArray.forEach(fiber => {\n          uniqueNames.add(getComponentNameFromFiber(fiber) || 'Component');\n          didWarnAboutLegacyContext.add(fiber.type);\n        });\n\n        const sortedNames = setToSortedString(uniqueNames);\n\n        try {\n          setCurrentDebugFiberInDEV(firstFiber);\n          console.error(\n            'Legacy context API has been detected within a strict-mode tree.' +\n              '\\n\\nThe old API will be supported in all 16.x releases, but applications ' +\n              'using it should migrate to the new version.' +\n              '\\n\\nPlease update the following components: %s' +\n              '\\n\\nLearn more about this warning here: https://reactjs.org/link/legacy-context',\n            sortedNames,\n          );\n        } finally {\n          resetCurrentDebugFiberInDEV();\n        }\n      },\n    );\n  };\n\n  ReactStrictModeWarnings.discardPendingWarnings = () => {\n    pendingComponentWillMountWarnings = [];\n    pendingUNSAFE_ComponentWillMountWarnings = [];\n    pendingComponentWillReceivePropsWarnings = [];\n    pendingUNSAFE_ComponentWillReceivePropsWarnings = [];\n    pendingComponentWillUpdateWarnings = [];\n    pendingUNSAFE_ComponentWillUpdateWarnings = [];\n    pendingLegacyContextWarning = new Map();\n  };\n}\n\nexport default ReactStrictModeWarnings;\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nexport function resolveDefaultProps(Component: any, baseProps: Object): Object {\n  if (Component && Component.defaultProps) {\n    // Resolve default props. Taken from ReactElement\n    const props = Object.assign({}, baseProps);\n    const defaultProps = Component.defaultProps;\n    for (const propName in defaultProps) {\n      if (props[propName] === undefined) {\n        props[propName] = defaultProps[propName];\n      }\n    }\n    return props;\n  }\n  return baseProps;\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {ReactContext, ReactProviderType} from 'shared/ReactTypes';\nimport type {\n  Fiber,\n  ContextDependency,\n  Dependencies,\n} from './ReactInternalTypes';\nimport type {StackCursor} from './ReactFiberStack.old';\nimport type {Lanes} from './ReactFiberLane.old';\nimport type {SharedQueue} from './ReactUpdateQueue.old';\n\nimport {isPrimaryRenderer} from './ReactFiberHostConfig';\nimport {createCursor, push, pop} from './ReactFiberStack.old';\nimport {\n  ContextProvider,\n  ClassComponent,\n  DehydratedFragment,\n} from './ReactWorkTags';\nimport {\n  NoLanes,\n  NoTimestamp,\n  isSubsetOfLanes,\n  includesSomeLane,\n  mergeLanes,\n  pickArbitraryLane,\n} from './ReactFiberLane.old';\nimport {\n  NoFlags,\n  DidPropagateContext,\n  NeedsPropagation,\n} from './ReactFiberFlags';\n\nimport invariant from 'shared/invariant';\nimport is from 'shared/objectIs';\nimport {createUpdate, ForceUpdate} from './ReactUpdateQueue.old';\nimport {markWorkInProgressReceivedUpdate} from './ReactFiberBeginWork.old';\nimport {\n  enableSuspenseServerRenderer,\n  enableLazyContextPropagation,\n} from 'shared/ReactFeatureFlags';\n\nconst valueCursor: StackCursor<mixed> = createCursor(null);\n\nlet rendererSigil;\nif (__DEV__) {\n  // Use this to detect multiple renderers using the same context\n  rendererSigil = {};\n}\n\nlet currentlyRenderingFiber: Fiber | null = null;\nlet lastContextDependency: ContextDependency<mixed> | null = null;\nlet lastFullyObservedContext: ReactContext<any> | null = null;\n\nlet isDisallowedContextReadInDEV: boolean = false;\n\nexport function resetContextDependencies(): void {\n  // This is called right before React yields execution, to ensure `readContext`\n  // cannot be called outside the render phase.\n  currentlyRenderingFiber = null;\n  lastContextDependency = null;\n  lastFullyObservedContext = null;\n  if (__DEV__) {\n    isDisallowedContextReadInDEV = false;\n  }\n}\n\nexport function enterDisallowedContextReadInDEV(): void {\n  if (__DEV__) {\n    isDisallowedContextReadInDEV = true;\n  }\n}\n\nexport function exitDisallowedContextReadInDEV(): void {\n  if (__DEV__) {\n    isDisallowedContextReadInDEV = false;\n  }\n}\n\nexport function pushProvider<T>(\n  providerFiber: Fiber,\n  context: ReactContext<T>,\n  nextValue: T,\n): void {\n  if (isPrimaryRenderer) {\n    push(valueCursor, context._currentValue, providerFiber);\n\n    context._currentValue = nextValue;\n    if (__DEV__) {\n      if (\n        context._currentRenderer !== undefined &&\n        context._currentRenderer !== null &&\n        context._currentRenderer !== rendererSigil\n      ) {\n        console.error(\n          'Detected multiple renderers concurrently rendering the ' +\n            'same context provider. This is currently unsupported.',\n        );\n      }\n      context._currentRenderer = rendererSigil;\n    }\n  } else {\n    push(valueCursor, context._currentValue2, providerFiber);\n\n    context._currentValue2 = nextValue;\n    if (__DEV__) {\n      if (\n        context._currentRenderer2 !== undefined &&\n        context._currentRenderer2 !== null &&\n        context._currentRenderer2 !== rendererSigil\n      ) {\n        console.error(\n          'Detected multiple renderers concurrently rendering the ' +\n            'same context provider. This is currently unsupported.',\n        );\n      }\n      context._currentRenderer2 = rendererSigil;\n    }\n  }\n}\n\nexport function popProvider(\n  context: ReactContext<any>,\n  providerFiber: Fiber,\n): void {\n  const currentValue = valueCursor.current;\n  pop(valueCursor, providerFiber);\n  if (isPrimaryRenderer) {\n    context._currentValue = currentValue;\n  } else {\n    context._currentValue2 = currentValue;\n  }\n}\n\nexport function scheduleWorkOnParentPath(\n  parent: Fiber | null,\n  renderLanes: Lanes,\n) {\n  // Update the child lanes of all the ancestors, including the alternates.\n  let node = parent;\n  while (node !== null) {\n    const alternate = node.alternate;\n    if (!isSubsetOfLanes(node.childLanes, renderLanes)) {\n      node.childLanes = mergeLanes(node.childLanes, renderLanes);\n      if (alternate !== null) {\n        alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes);\n      }\n    } else if (\n      alternate !== null &&\n      !isSubsetOfLanes(alternate.childLanes, renderLanes)\n    ) {\n      alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes);\n    } else {\n      // Neither alternate was updated, which means the rest of the\n      // ancestor path already has sufficient priority.\n      break;\n    }\n    node = node.return;\n  }\n}\n\nexport function propagateContextChange<T>(\n  workInProgress: Fiber,\n  context: ReactContext<T>,\n  renderLanes: Lanes,\n): void {\n  if (enableLazyContextPropagation) {\n    // TODO: This path is only used by Cache components. Update\n    // lazilyPropagateParentContextChanges to look for Cache components so they\n    // can take advantage of lazy propagation.\n    const forcePropagateEntireTree = true;\n    propagateContextChanges(\n      workInProgress,\n      [context],\n      renderLanes,\n      forcePropagateEntireTree,\n    );\n  } else {\n    propagateContextChange_eager(workInProgress, context, renderLanes);\n  }\n}\n\nfunction propagateContextChange_eager<T>(\n  workInProgress: Fiber,\n  context: ReactContext<T>,\n  renderLanes: Lanes,\n): void {\n  // Only used by eager implementation\n  if (enableLazyContextPropagation) {\n    return;\n  }\n  let fiber = workInProgress.child;\n  if (fiber !== null) {\n    // Set the return pointer of the child to the work-in-progress fiber.\n    fiber.return = workInProgress;\n  }\n  while (fiber !== null) {\n    let nextFiber;\n\n    // Visit this fiber.\n    const list = fiber.dependencies;\n    if (list !== null) {\n      nextFiber = fiber.child;\n\n      let dependency = list.firstContext;\n      while (dependency !== null) {\n        // Check if the context matches.\n        if (dependency.context === context) {\n          // Match! Schedule an update on this fiber.\n          if (fiber.tag === ClassComponent) {\n            // Schedule a force update on the work-in-progress.\n            const lane = pickArbitraryLane(renderLanes);\n            const update = createUpdate(NoTimestamp, lane);\n            update.tag = ForceUpdate;\n            // TODO: Because we don't have a work-in-progress, this will add the\n            // update to the current fiber, too, which means it will persist even if\n            // this render is thrown away. Since it's a race condition, not sure it's\n            // worth fixing.\n\n            // Inlined `enqueueUpdate` to remove interleaved update check\n            const updateQueue = fiber.updateQueue;\n            if (updateQueue === null) {\n              // Only occurs if the fiber has been unmounted.\n            } else {\n              const sharedQueue: SharedQueue<any> = (updateQueue: any).shared;\n              const pending = sharedQueue.pending;\n              if (pending === null) {\n                // This is the first update. Create a circular list.\n                update.next = update;\n              } else {\n                update.next = pending.next;\n                pending.next = update;\n              }\n              sharedQueue.pending = update;\n            }\n          }\n\n          fiber.lanes = mergeLanes(fiber.lanes, renderLanes);\n          const alternate = fiber.alternate;\n          if (alternate !== null) {\n            alternate.lanes = mergeLanes(alternate.lanes, renderLanes);\n          }\n          scheduleWorkOnParentPath(fiber.return, renderLanes);\n\n          // Mark the updated lanes on the list, too.\n          list.lanes = mergeLanes(list.lanes, renderLanes);\n\n          // Since we already found a match, we can stop traversing the\n          // dependency list.\n          break;\n        }\n        dependency = dependency.next;\n      }\n    } else if (fiber.tag === ContextProvider) {\n      // Don't scan deeper if this is a matching provider\n      nextFiber = fiber.type === workInProgress.type ? null : fiber.child;\n    } else if (\n      enableSuspenseServerRenderer &&\n      fiber.tag === DehydratedFragment\n    ) {\n      // If a dehydrated suspense boundary is in this subtree, we don't know\n      // if it will have any context consumers in it. The best we can do is\n      // mark it as having updates.\n      const parentSuspense = fiber.return;\n      invariant(\n        parentSuspense !== null,\n        'We just came from a parent so we must have had a parent. This is a bug in React.',\n      );\n      parentSuspense.lanes = mergeLanes(parentSuspense.lanes, renderLanes);\n      const alternate = parentSuspense.alternate;\n      if (alternate !== null) {\n        alternate.lanes = mergeLanes(alternate.lanes, renderLanes);\n      }\n      // This is intentionally passing this fiber as the parent\n      // because we want to schedule this fiber as having work\n      // on its children. We'll use the childLanes on\n      // this fiber to indicate that a context has changed.\n      scheduleWorkOnParentPath(parentSuspense, renderLanes);\n      nextFiber = fiber.sibling;\n    } else {\n      // Traverse down.\n      nextFiber = fiber.child;\n    }\n\n    if (nextFiber !== null) {\n      // Set the return pointer of the child to the work-in-progress fiber.\n      nextFiber.return = fiber;\n    } else {\n      // No child. Traverse to next sibling.\n      nextFiber = fiber;\n      while (nextFiber !== null) {\n        if (nextFiber === workInProgress) {\n          // We're back to the root of this subtree. Exit.\n          nextFiber = null;\n          break;\n        }\n        const sibling = nextFiber.sibling;\n        if (sibling !== null) {\n          // Set the return pointer of the sibling to the work-in-progress fiber.\n          sibling.return = nextFiber.return;\n          nextFiber = sibling;\n          break;\n        }\n        // No more siblings. Traverse up.\n        nextFiber = nextFiber.return;\n      }\n    }\n    fiber = nextFiber;\n  }\n}\n\nfunction propagateContextChanges<T>(\n  workInProgress: Fiber,\n  contexts: Array<any>,\n  renderLanes: Lanes,\n  forcePropagateEntireTree: boolean,\n): void {\n  // Only used by lazy implementation\n  if (!enableLazyContextPropagation) {\n    return;\n  }\n  let fiber = workInProgress.child;\n  if (fiber !== null) {\n    // Set the return pointer of the child to the work-in-progress fiber.\n    fiber.return = workInProgress;\n  }\n  while (fiber !== null) {\n    let nextFiber;\n\n    // Visit this fiber.\n    const list = fiber.dependencies;\n    if (list !== null) {\n      nextFiber = fiber.child;\n\n      let dep = list.firstContext;\n      findChangedDep: while (dep !== null) {\n        // Assigning these to constants to help Flow\n        const dependency = dep;\n        const consumer = fiber;\n        findContext: for (let i = 0; i < contexts.length; i++) {\n          const context: ReactContext<T> = contexts[i];\n          // Check if the context matches.\n          // TODO: Compare selected values to bail out early.\n          if (dependency.context === context) {\n            // Match! Schedule an update on this fiber.\n\n            // In the lazy implementation, don't mark a dirty flag on the\n            // dependency itself. Not all changes are propagated, so we can't\n            // rely on the propagation function alone to determine whether\n            // something has changed; the consumer will check. In the future, we\n            // could add back a dirty flag as an optimization to avoid double\n            // checking, but until we have selectors it's not really worth\n            // the trouble.\n            consumer.lanes = mergeLanes(consumer.lanes, renderLanes);\n            const alternate = consumer.alternate;\n            if (alternate !== null) {\n              alternate.lanes = mergeLanes(alternate.lanes, renderLanes);\n            }\n            scheduleWorkOnParentPath(consumer.return, renderLanes);\n\n            if (!forcePropagateEntireTree) {\n              // During lazy propagation, when we find a match, we can defer\n              // propagating changes to the children, because we're going to\n              // visit them during render. We should continue propagating the\n              // siblings, though\n              nextFiber = null;\n            }\n\n            // Since we already found a match, we can stop traversing the\n            // dependency list.\n            break findChangedDep;\n          }\n        }\n        dep = dependency.next;\n      }\n    } else if (\n      enableSuspenseServerRenderer &&\n      fiber.tag === DehydratedFragment\n    ) {\n      // If a dehydrated suspense boundary is in this subtree, we don't know\n      // if it will have any context consumers in it. The best we can do is\n      // mark it as having updates.\n      const parentSuspense = fiber.return;\n      invariant(\n        parentSuspense !== null,\n        'We just came from a parent so we must have had a parent. This is a bug in React.',\n      );\n      parentSuspense.lanes = mergeLanes(parentSuspense.lanes, renderLanes);\n      const alternate = parentSuspense.alternate;\n      if (alternate !== null) {\n        alternate.lanes = mergeLanes(alternate.lanes, renderLanes);\n      }\n      // This is intentionally passing this fiber as the parent\n      // because we want to schedule this fiber as having work\n      // on its children. We'll use the childLanes on\n      // this fiber to indicate that a context has changed.\n      scheduleWorkOnParentPath(parentSuspense, renderLanes);\n      nextFiber = null;\n    } else {\n      // Traverse down.\n      nextFiber = fiber.child;\n    }\n\n    if (nextFiber !== null) {\n      // Set the return pointer of the child to the work-in-progress fiber.\n      nextFiber.return = fiber;\n    } else {\n      // No child. Traverse to next sibling.\n      nextFiber = fiber;\n      while (nextFiber !== null) {\n        if (nextFiber === workInProgress) {\n          // We're back to the root of this subtree. Exit.\n          nextFiber = null;\n          break;\n        }\n        const sibling = nextFiber.sibling;\n        if (sibling !== null) {\n          // Set the return pointer of the sibling to the work-in-progress fiber.\n          sibling.return = nextFiber.return;\n          nextFiber = sibling;\n          break;\n        }\n        // No more siblings. Traverse up.\n        nextFiber = nextFiber.return;\n      }\n    }\n    fiber = nextFiber;\n  }\n}\n\nexport function lazilyPropagateParentContextChanges(\n  current: Fiber,\n  workInProgress: Fiber,\n  renderLanes: Lanes,\n) {\n  const forcePropagateEntireTree = false;\n  propagateParentContextChanges(\n    current,\n    workInProgress,\n    renderLanes,\n    forcePropagateEntireTree,\n  );\n}\n\n// Used for propagating a deferred tree (Suspense, Offscreen). We must propagate\n// to the entire subtree, because we won't revisit it until after the current\n// render has completed, at which point we'll have lost track of which providers\n// have changed.\nexport function propagateParentContextChangesToDeferredTree(\n  current: Fiber,\n  workInProgress: Fiber,\n  renderLanes: Lanes,\n) {\n  const forcePropagateEntireTree = true;\n  propagateParentContextChanges(\n    current,\n    workInProgress,\n    renderLanes,\n    forcePropagateEntireTree,\n  );\n}\n\nfunction propagateParentContextChanges(\n  current: Fiber,\n  workInProgress: Fiber,\n  renderLanes: Lanes,\n  forcePropagateEntireTree: boolean,\n) {\n  if (!enableLazyContextPropagation) {\n    return;\n  }\n\n  // Collect all the parent providers that changed. Since this is usually small\n  // number, we use an Array instead of Set.\n  let contexts = null;\n  let parent = workInProgress;\n  let isInsidePropagationBailout = false;\n  while (parent !== null) {\n    if (!isInsidePropagationBailout) {\n      if ((parent.flags & NeedsPropagation) !== NoFlags) {\n        isInsidePropagationBailout = true;\n      } else if ((parent.flags & DidPropagateContext) !== NoFlags) {\n        break;\n      }\n    }\n\n    if (parent.tag === ContextProvider) {\n      const currentParent = parent.alternate;\n      invariant(\n        currentParent !== null,\n        'Should have a current fiber. This is a bug in React.',\n      );\n      const oldProps = currentParent.memoizedProps;\n      if (oldProps !== null) {\n        const providerType: ReactProviderType<any> = parent.type;\n        const context: ReactContext<any> = providerType._context;\n\n        const newProps = parent.pendingProps;\n        const newValue = newProps.value;\n\n        const oldValue = oldProps.value;\n\n        if (!is(newValue, oldValue)) {\n          if (contexts !== null) {\n            contexts.push(context);\n          } else {\n            contexts = [context];\n          }\n        }\n      }\n    }\n    parent = parent.return;\n  }\n\n  if (contexts !== null) {\n    // If there were any changed providers, search through the children and\n    // propagate their changes.\n    propagateContextChanges(\n      workInProgress,\n      contexts,\n      renderLanes,\n      forcePropagateEntireTree,\n    );\n  }\n\n  // This is an optimization so that we only propagate once per subtree. If a\n  // deeply nested child bails out, and it calls this propagation function, it\n  // uses this flag to know that the remaining ancestor providers have already\n  // been propagated.\n  //\n  // NOTE: This optimization is only necessary because we sometimes enter the\n  // begin phase of nodes that don't have any work scheduled on them —\n  // specifically, the siblings of a node that _does_ have scheduled work. The\n  // siblings will bail out and call this function again, even though we already\n  // propagated content changes to it and its subtree. So we use this flag to\n  // mark that the parent providers already propagated.\n  //\n  // Unfortunately, though, we need to ignore this flag when we're inside a\n  // tree whose context propagation was deferred — that's what the\n  // `NeedsPropagation` flag is for.\n  //\n  // If we could instead bail out before entering the siblings' begin phase,\n  // then we could remove both `DidPropagateContext` and `NeedsPropagation`.\n  // Consider this as part of the next refactor to the fiber tree structure.\n  workInProgress.flags |= DidPropagateContext;\n}\n\nexport function checkIfContextChanged(currentDependencies: Dependencies) {\n  if (!enableLazyContextPropagation) {\n    return false;\n  }\n  // Iterate over the current dependencies to see if something changed. This\n  // only gets called if props and state has already bailed out, so it's a\n  // relatively uncommon path, except at the root of a changed subtree.\n  // Alternatively, we could move these comparisons into `readContext`, but\n  // that's a much hotter path, so I think this is an appropriate trade off.\n  let dependency = currentDependencies.firstContext;\n  while (dependency !== null) {\n    const context = dependency.context;\n    const newValue = isPrimaryRenderer\n      ? context._currentValue\n      : context._currentValue2;\n    const oldValue = dependency.memoizedValue;\n    if (!is(newValue, oldValue)) {\n      return true;\n    }\n    dependency = dependency.next;\n  }\n  return false;\n}\n\nexport function prepareToReadContext(\n  workInProgress: Fiber,\n  renderLanes: Lanes,\n): void {\n  currentlyRenderingFiber = workInProgress;\n  lastContextDependency = null;\n  lastFullyObservedContext = null;\n\n  const dependencies = workInProgress.dependencies;\n  if (dependencies !== null) {\n    if (enableLazyContextPropagation) {\n      // Reset the work-in-progress list\n      dependencies.firstContext = null;\n    } else {\n      const firstContext = dependencies.firstContext;\n      if (firstContext !== null) {\n        if (includesSomeLane(dependencies.lanes, renderLanes)) {\n          // Context list has a pending update. Mark that this fiber performed work.\n          markWorkInProgressReceivedUpdate();\n        }\n        // Reset the work-in-progress list\n        dependencies.firstContext = null;\n      }\n    }\n  }\n}\n\nexport function readContext<T>(context: ReactContext<T>): T {\n  if (__DEV__) {\n    // This warning would fire if you read context inside a Hook like useMemo.\n    // Unlike the class check below, it's not enforced in production for perf.\n    if (isDisallowedContextReadInDEV) {\n      console.error(\n        'Context can only be read while React is rendering. ' +\n          'In classes, you can read it in the render method or getDerivedStateFromProps. ' +\n          'In function components, you can read it directly in the function body, but not ' +\n          'inside Hooks like useReducer() or useMemo().',\n      );\n    }\n  }\n\n  const value = isPrimaryRenderer\n    ? context._currentValue\n    : context._currentValue2;\n\n  if (lastFullyObservedContext === context) {\n    // Nothing to do. We already observe everything in this context.\n  } else {\n    const contextItem = {\n      context: ((context: any): ReactContext<mixed>),\n      memoizedValue: value,\n      next: null,\n    };\n\n    if (lastContextDependency === null) {\n      invariant(\n        currentlyRenderingFiber !== null,\n        'Context can only be read while React is rendering. ' +\n          'In classes, you can read it in the render method or getDerivedStateFromProps. ' +\n          'In function components, you can read it directly in the function body, but not ' +\n          'inside Hooks like useReducer() or useMemo().',\n      );\n\n      // This is the first dependency for this component. Create a new list.\n      lastContextDependency = contextItem;\n      currentlyRenderingFiber.dependencies = {\n        lanes: NoLanes,\n        firstContext: contextItem,\n      };\n      if (enableLazyContextPropagation) {\n        currentlyRenderingFiber.flags |= NeedsPropagation;\n      }\n    } else {\n      // Append a new context item.\n      lastContextDependency = lastContextDependency.next = contextItem;\n    }\n  }\n  return value;\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {UpdateQueue as HookQueue} from './ReactFiberHooks.old';\nimport type {SharedQueue as ClassQueue} from './ReactUpdateQueue.old';\n\n// An array of all update queues that received updates during the current\n// render. When this render exits, either because it finishes or because it is\n// interrupted, the interleaved updates will be transferred onto the main part\n// of the queue.\nlet interleavedQueues: Array<\n  HookQueue<any, any> | ClassQueue<any>,\n> | null = null;\n\nexport function pushInterleavedQueue(\n  queue: HookQueue<any, any> | ClassQueue<any>,\n) {\n  if (interleavedQueues === null) {\n    interleavedQueues = [queue];\n  } else {\n    interleavedQueues.push(queue);\n  }\n}\n\nexport function enqueueInterleavedUpdates() {\n  // Transfer the interleaved updates onto the main queue. Each queue has a\n  // `pending` field and an `interleaved` field. When they are not null, they\n  // point to the last node in a circular linked list. We need to append the\n  // interleaved list to the end of the pending list by joining them into a\n  // single, circular list.\n  if (interleavedQueues !== null) {\n    for (let i = 0; i < interleavedQueues.length; i++) {\n      const queue = interleavedQueues[i];\n      const lastInterleavedUpdate = queue.interleaved;\n      if (lastInterleavedUpdate !== null) {\n        queue.interleaved = null;\n        const firstInterleavedUpdate = lastInterleavedUpdate.next;\n        const lastPendingUpdate = queue.pending;\n        if (lastPendingUpdate !== null) {\n          const firstPendingUpdate = lastPendingUpdate.next;\n          lastPendingUpdate.next = (firstInterleavedUpdate: any);\n          lastInterleavedUpdate.next = (firstPendingUpdate: any);\n        }\n        queue.pending = (lastInterleavedUpdate: any);\n      }\n    }\n    interleavedQueues = null;\n  }\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\n// UpdateQueue is a linked list of prioritized updates.\n//\n// Like fibers, update queues come in pairs: a current queue, which represents\n// the visible state of the screen, and a work-in-progress queue, which can be\n// mutated and processed asynchronously before it is committed — a form of\n// double buffering. If a work-in-progress render is discarded before finishing,\n// we create a new work-in-progress by cloning the current queue.\n//\n// Both queues share a persistent, singly-linked list structure. To schedule an\n// update, we append it to the end of both queues. Each queue maintains a\n// pointer to first update in the persistent list that hasn't been processed.\n// The work-in-progress pointer always has a position equal to or greater than\n// the current queue, since we always work on that one. The current queue's\n// pointer is only updated during the commit phase, when we swap in the\n// work-in-progress.\n//\n// For example:\n//\n//   Current pointer:           A - B - C - D - E - F\n//   Work-in-progress pointer:              D - E - F\n//                                          ^\n//                                          The work-in-progress queue has\n//                                          processed more updates than current.\n//\n// The reason we append to both queues is because otherwise we might drop\n// updates without ever processing them. For example, if we only add updates to\n// the work-in-progress queue, some updates could be lost whenever a work-in\n// -progress render restarts by cloning from current. Similarly, if we only add\n// updates to the current queue, the updates will be lost whenever an already\n// in-progress queue commits and swaps with the current queue. However, by\n// adding to both queues, we guarantee that the update will be part of the next\n// work-in-progress. (And because the work-in-progress queue becomes the\n// current queue once it commits, there's no danger of applying the same\n// update twice.)\n//\n// Prioritization\n// --------------\n//\n// Updates are not sorted by priority, but by insertion; new updates are always\n// appended to the end of the list.\n//\n// The priority is still important, though. When processing the update queue\n// during the render phase, only the updates with sufficient priority are\n// included in the result. If we skip an update because it has insufficient\n// priority, it remains in the queue to be processed later, during a lower\n// priority render. Crucially, all updates subsequent to a skipped update also\n// remain in the queue *regardless of their priority*. That means high priority\n// updates are sometimes processed twice, at two separate priorities. We also\n// keep track of a base state, that represents the state before the first\n// update in the queue is applied.\n//\n// For example:\n//\n//   Given a base state of '', and the following queue of updates\n//\n//     A1 - B2 - C1 - D2\n//\n//   where the number indicates the priority, and the update is applied to the\n//   previous state by appending a letter, React will process these updates as\n//   two separate renders, one per distinct priority level:\n//\n//   First render, at priority 1:\n//     Base state: ''\n//     Updates: [A1, C1]\n//     Result state: 'AC'\n//\n//   Second render, at priority 2:\n//     Base state: 'A'            <-  The base state does not include C1,\n//                                    because B2 was skipped.\n//     Updates: [B2, C1, D2]      <-  C1 was rebased on top of B2\n//     Result state: 'ABCD'\n//\n// Because we process updates in insertion order, and rebase high priority\n// updates when preceding updates are skipped, the final result is deterministic\n// regardless of priority. Intermediate state may vary according to system\n// resources, but the final state is always the same.\n\nimport type {Fiber, FiberRoot} from './ReactInternalTypes';\nimport type {Lanes, Lane} from './ReactFiberLane.old';\n\nimport {\n  NoLane,\n  NoLanes,\n  isSubsetOfLanes,\n  mergeLanes,\n  isTransitionLane,\n  intersectLanes,\n  markRootEntangled,\n} from './ReactFiberLane.old';\nimport {\n  enterDisallowedContextReadInDEV,\n  exitDisallowedContextReadInDEV,\n} from './ReactFiberNewContext.old';\nimport {Callback, ShouldCapture, DidCapture} from './ReactFiberFlags';\n\nimport {debugRenderPhaseSideEffectsForStrictMode} from 'shared/ReactFeatureFlags';\n\nimport {StrictLegacyMode} from './ReactTypeOfMode';\nimport {\n  markSkippedUpdateLanes,\n  isInterleavedUpdate,\n} from './ReactFiberWorkLoop.old';\nimport {pushInterleavedQueue} from './ReactFiberInterleavedUpdates.old';\nimport {setIsStrictModeForDevtools} from './ReactFiberReconciler';\n\nimport invariant from 'shared/invariant';\n\nexport type Update<State> = {|\n  // TODO: Temporary field. Will remove this by storing a map of\n  // transition -> event time on the root.\n  eventTime: number,\n  lane: Lane,\n\n  tag: 0 | 1 | 2 | 3,\n  payload: any,\n  callback: (() => mixed) | null,\n\n  next: Update<State> | null,\n|};\n\nexport type SharedQueue<State> = {|\n  pending: Update<State> | null,\n  interleaved: Update<State> | null,\n  lanes: Lanes,\n|};\n\nexport type UpdateQueue<State> = {|\n  baseState: State,\n  firstBaseUpdate: Update<State> | null,\n  lastBaseUpdate: Update<State> | null,\n  shared: SharedQueue<State>,\n  effects: Array<Update<State>> | null,\n|};\n\nexport const UpdateState = 0;\nexport const ReplaceState = 1;\nexport const ForceUpdate = 2;\nexport const CaptureUpdate = 3;\n\n// Global state that is reset at the beginning of calling `processUpdateQueue`.\n// It should only be read right after calling `processUpdateQueue`, via\n// `checkHasForceUpdateAfterProcessing`.\nlet hasForceUpdate = false;\n\nlet didWarnUpdateInsideUpdate;\nlet currentlyProcessingQueue;\nexport let resetCurrentlyProcessingQueue;\nif (__DEV__) {\n  didWarnUpdateInsideUpdate = false;\n  currentlyProcessingQueue = null;\n  resetCurrentlyProcessingQueue = () => {\n    currentlyProcessingQueue = null;\n  };\n}\n\nexport function initializeUpdateQueue<State>(fiber: Fiber): void {\n  const queue: UpdateQueue<State> = {\n    baseState: fiber.memoizedState,\n    firstBaseUpdate: null,\n    lastBaseUpdate: null,\n    shared: {\n      pending: null,\n      interleaved: null,\n      lanes: NoLanes,\n    },\n    effects: null,\n  };\n  fiber.updateQueue = queue;\n}\n\nexport function cloneUpdateQueue<State>(\n  current: Fiber,\n  workInProgress: Fiber,\n): void {\n  // Clone the update queue from current. Unless it's already a clone.\n  const queue: UpdateQueue<State> = (workInProgress.updateQueue: any);\n  const currentQueue: UpdateQueue<State> = (current.updateQueue: any);\n  if (queue === currentQueue) {\n    const clone: UpdateQueue<State> = {\n      baseState: currentQueue.baseState,\n      firstBaseUpdate: currentQueue.firstBaseUpdate,\n      lastBaseUpdate: currentQueue.lastBaseUpdate,\n      shared: currentQueue.shared,\n      effects: currentQueue.effects,\n    };\n    workInProgress.updateQueue = clone;\n  }\n}\n\nexport function createUpdate(eventTime: number, lane: Lane): Update<*> {\n  const update: Update<*> = {\n    eventTime,\n    lane,\n\n    tag: UpdateState,\n    payload: null,\n    callback: null,\n\n    next: null,\n  };\n  return update;\n}\n\nexport function enqueueUpdate<State>(\n  fiber: Fiber,\n  update: Update<State>,\n  lane: Lane,\n) {\n  const updateQueue = fiber.updateQueue;\n  if (updateQueue === null) {\n    // Only occurs if the fiber has been unmounted.\n    return;\n  }\n\n  const sharedQueue: SharedQueue<State> = (updateQueue: any).shared;\n\n  if (isInterleavedUpdate(fiber, lane)) {\n    const interleaved = sharedQueue.interleaved;\n    if (interleaved === null) {\n      // This is the first update. Create a circular list.\n      update.next = update;\n      // At the end of the current render, this queue's interleaved updates will\n      // be transferred to the pending queue.\n      pushInterleavedQueue(sharedQueue);\n    } else {\n      update.next = interleaved.next;\n      interleaved.next = update;\n    }\n    sharedQueue.interleaved = update;\n  } else {\n    const pending = sharedQueue.pending;\n    if (pending === null) {\n      // This is the first update. Create a circular list.\n      update.next = update;\n    } else {\n      update.next = pending.next;\n      pending.next = update;\n    }\n    sharedQueue.pending = update;\n  }\n\n  if (__DEV__) {\n    if (\n      currentlyProcessingQueue === sharedQueue &&\n      !didWarnUpdateInsideUpdate\n    ) {\n      console.error(\n        'An update (setState, replaceState, or forceUpdate) was scheduled ' +\n          'from inside an update function. Update functions should be pure, ' +\n          'with zero side-effects. Consider using componentDidUpdate or a ' +\n          'callback.',\n      );\n      didWarnUpdateInsideUpdate = true;\n    }\n  }\n}\n\nexport function entangleTransitions(root: FiberRoot, fiber: Fiber, lane: Lane) {\n  const updateQueue = fiber.updateQueue;\n  if (updateQueue === null) {\n    // Only occurs if the fiber has been unmounted.\n    return;\n  }\n\n  const sharedQueue: SharedQueue<mixed> = (updateQueue: any).shared;\n  if (isTransitionLane(lane)) {\n    let queueLanes = sharedQueue.lanes;\n\n    // If any entangled lanes are no longer pending on the root, then they must\n    // have finished. We can remove them from the shared queue, which represents\n    // a superset of the actually pending lanes. In some cases we may entangle\n    // more than we need to, but that's OK. In fact it's worse if we *don't*\n    // entangle when we should.\n    queueLanes = intersectLanes(queueLanes, root.pendingLanes);\n\n    // Entangle the new transition lane with the other transition lanes.\n    const newQueueLanes = mergeLanes(queueLanes, lane);\n    sharedQueue.lanes = newQueueLanes;\n    // Even if queue.lanes already include lane, we don't know for certain if\n    // the lane finished since the last time we entangled it. So we need to\n    // entangle it again, just to be sure.\n    markRootEntangled(root, newQueueLanes);\n  }\n}\n\nexport function enqueueCapturedUpdate<State>(\n  workInProgress: Fiber,\n  capturedUpdate: Update<State>,\n) {\n  // Captured updates are updates that are thrown by a child during the render\n  // phase. They should be discarded if the render is aborted. Therefore,\n  // we should only put them on the work-in-progress queue, not the current one.\n  let queue: UpdateQueue<State> = (workInProgress.updateQueue: any);\n\n  // Check if the work-in-progress queue is a clone.\n  const current = workInProgress.alternate;\n  if (current !== null) {\n    const currentQueue: UpdateQueue<State> = (current.updateQueue: any);\n    if (queue === currentQueue) {\n      // The work-in-progress queue is the same as current. This happens when\n      // we bail out on a parent fiber that then captures an error thrown by\n      // a child. Since we want to append the update only to the work-in\n      // -progress queue, we need to clone the updates. We usually clone during\n      // processUpdateQueue, but that didn't happen in this case because we\n      // skipped over the parent when we bailed out.\n      let newFirst = null;\n      let newLast = null;\n      const firstBaseUpdate = queue.firstBaseUpdate;\n      if (firstBaseUpdate !== null) {\n        // Loop through the updates and clone them.\n        let update = firstBaseUpdate;\n        do {\n          const clone: Update<State> = {\n            eventTime: update.eventTime,\n            lane: update.lane,\n\n            tag: update.tag,\n            payload: update.payload,\n            callback: update.callback,\n\n            next: null,\n          };\n          if (newLast === null) {\n            newFirst = newLast = clone;\n          } else {\n            newLast.next = clone;\n            newLast = clone;\n          }\n          update = update.next;\n        } while (update !== null);\n\n        // Append the captured update the end of the cloned list.\n        if (newLast === null) {\n          newFirst = newLast = capturedUpdate;\n        } else {\n          newLast.next = capturedUpdate;\n          newLast = capturedUpdate;\n        }\n      } else {\n        // There are no base updates.\n        newFirst = newLast = capturedUpdate;\n      }\n      queue = {\n        baseState: currentQueue.baseState,\n        firstBaseUpdate: newFirst,\n        lastBaseUpdate: newLast,\n        shared: currentQueue.shared,\n        effects: currentQueue.effects,\n      };\n      workInProgress.updateQueue = queue;\n      return;\n    }\n  }\n\n  // Append the update to the end of the list.\n  const lastBaseUpdate = queue.lastBaseUpdate;\n  if (lastBaseUpdate === null) {\n    queue.firstBaseUpdate = capturedUpdate;\n  } else {\n    lastBaseUpdate.next = capturedUpdate;\n  }\n  queue.lastBaseUpdate = capturedUpdate;\n}\n\nfunction getStateFromUpdate<State>(\n  workInProgress: Fiber,\n  queue: UpdateQueue<State>,\n  update: Update<State>,\n  prevState: State,\n  nextProps: any,\n  instance: any,\n): any {\n  switch (update.tag) {\n    case ReplaceState: {\n      const payload = update.payload;\n      if (typeof payload === 'function') {\n        // Updater function\n        if (__DEV__) {\n          enterDisallowedContextReadInDEV();\n        }\n        const nextState = payload.call(instance, prevState, nextProps);\n        if (__DEV__) {\n          if (\n            debugRenderPhaseSideEffectsForStrictMode &&\n            workInProgress.mode & StrictLegacyMode\n          ) {\n            setIsStrictModeForDevtools(true);\n            try {\n              payload.call(instance, prevState, nextProps);\n            } finally {\n              setIsStrictModeForDevtools(false);\n            }\n          }\n          exitDisallowedContextReadInDEV();\n        }\n        return nextState;\n      }\n      // State object\n      return payload;\n    }\n    case CaptureUpdate: {\n      workInProgress.flags =\n        (workInProgress.flags & ~ShouldCapture) | DidCapture;\n    }\n    // Intentional fallthrough\n    case UpdateState: {\n      const payload = update.payload;\n      let partialState;\n      if (typeof payload === 'function') {\n        // Updater function\n        if (__DEV__) {\n          enterDisallowedContextReadInDEV();\n        }\n        partialState = payload.call(instance, prevState, nextProps);\n        if (__DEV__) {\n          if (\n            debugRenderPhaseSideEffectsForStrictMode &&\n            workInProgress.mode & StrictLegacyMode\n          ) {\n            setIsStrictModeForDevtools(true);\n            try {\n              payload.call(instance, prevState, nextProps);\n            } finally {\n              setIsStrictModeForDevtools(false);\n            }\n          }\n          exitDisallowedContextReadInDEV();\n        }\n      } else {\n        // Partial state object\n        partialState = payload;\n      }\n      if (partialState === null || partialState === undefined) {\n        // Null and undefined are treated as no-ops.\n        return prevState;\n      }\n      // Merge the partial state and the previous state.\n      return Object.assign({}, prevState, partialState);\n    }\n    case ForceUpdate: {\n      hasForceUpdate = true;\n      return prevState;\n    }\n  }\n  return prevState;\n}\n\nexport function processUpdateQueue<State>(\n  workInProgress: Fiber,\n  props: any,\n  instance: any,\n  renderLanes: Lanes,\n): void {\n  // This is always non-null on a ClassComponent or HostRoot\n  const queue: UpdateQueue<State> = (workInProgress.updateQueue: any);\n\n  hasForceUpdate = false;\n\n  if (__DEV__) {\n    currentlyProcessingQueue = queue.shared;\n  }\n\n  let firstBaseUpdate = queue.firstBaseUpdate;\n  let lastBaseUpdate = queue.lastBaseUpdate;\n\n  // Check if there are pending updates. If so, transfer them to the base queue.\n  let pendingQueue = queue.shared.pending;\n  if (pendingQueue !== null) {\n    queue.shared.pending = null;\n\n    // The pending queue is circular. Disconnect the pointer between first\n    // and last so that it's non-circular.\n    const lastPendingUpdate = pendingQueue;\n    const firstPendingUpdate = lastPendingUpdate.next;\n    lastPendingUpdate.next = null;\n    // Append pending updates to base queue\n    if (lastBaseUpdate === null) {\n      firstBaseUpdate = firstPendingUpdate;\n    } else {\n      lastBaseUpdate.next = firstPendingUpdate;\n    }\n    lastBaseUpdate = lastPendingUpdate;\n\n    // If there's a current queue, and it's different from the base queue, then\n    // we need to transfer the updates to that queue, too. Because the base\n    // queue is a singly-linked list with no cycles, we can append to both\n    // lists and take advantage of structural sharing.\n    // TODO: Pass `current` as argument\n    const current = workInProgress.alternate;\n    if (current !== null) {\n      // This is always non-null on a ClassComponent or HostRoot\n      const currentQueue: UpdateQueue<State> = (current.updateQueue: any);\n      const currentLastBaseUpdate = currentQueue.lastBaseUpdate;\n      if (currentLastBaseUpdate !== lastBaseUpdate) {\n        if (currentLastBaseUpdate === null) {\n          currentQueue.firstBaseUpdate = firstPendingUpdate;\n        } else {\n          currentLastBaseUpdate.next = firstPendingUpdate;\n        }\n        currentQueue.lastBaseUpdate = lastPendingUpdate;\n      }\n    }\n  }\n\n  // These values may change as we process the queue.\n  if (firstBaseUpdate !== null) {\n    // Iterate through the list of updates to compute the result.\n    let newState = queue.baseState;\n    // TODO: Don't need to accumulate this. Instead, we can remove renderLanes\n    // from the original lanes.\n    let newLanes = NoLanes;\n\n    let newBaseState = null;\n    let newFirstBaseUpdate = null;\n    let newLastBaseUpdate = null;\n\n    let update = firstBaseUpdate;\n    do {\n      const updateLane = update.lane;\n      const updateEventTime = update.eventTime;\n      if (!isSubsetOfLanes(renderLanes, updateLane)) {\n        // Priority is insufficient. Skip this update. If this is the first\n        // skipped update, the previous update/state is the new base\n        // update/state.\n        const clone: Update<State> = {\n          eventTime: updateEventTime,\n          lane: updateLane,\n\n          tag: update.tag,\n          payload: update.payload,\n          callback: update.callback,\n\n          next: null,\n        };\n        if (newLastBaseUpdate === null) {\n          newFirstBaseUpdate = newLastBaseUpdate = clone;\n          newBaseState = newState;\n        } else {\n          newLastBaseUpdate = newLastBaseUpdate.next = clone;\n        }\n        // Update the remaining priority in the queue.\n        newLanes = mergeLanes(newLanes, updateLane);\n      } else {\n        // This update does have sufficient priority.\n\n        if (newLastBaseUpdate !== null) {\n          const clone: Update<State> = {\n            eventTime: updateEventTime,\n            // This update is going to be committed so we never want uncommit\n            // it. Using NoLane works because 0 is a subset of all bitmasks, so\n            // this will never be skipped by the check above.\n            lane: NoLane,\n\n            tag: update.tag,\n            payload: update.payload,\n            callback: update.callback,\n\n            next: null,\n          };\n          newLastBaseUpdate = newLastBaseUpdate.next = clone;\n        }\n\n        // Process this update.\n        newState = getStateFromUpdate(\n          workInProgress,\n          queue,\n          update,\n          newState,\n          props,\n          instance,\n        );\n        const callback = update.callback;\n        if (\n          callback !== null &&\n          // If the update was already committed, we should not queue its\n          // callback again.\n          update.lane !== NoLane\n        ) {\n          workInProgress.flags |= Callback;\n          const effects = queue.effects;\n          if (effects === null) {\n            queue.effects = [update];\n          } else {\n            effects.push(update);\n          }\n        }\n      }\n      update = update.next;\n      if (update === null) {\n        pendingQueue = queue.shared.pending;\n        if (pendingQueue === null) {\n          break;\n        } else {\n          // An update was scheduled from inside a reducer. Add the new\n          // pending updates to the end of the list and keep processing.\n          const lastPendingUpdate = pendingQueue;\n          // Intentionally unsound. Pending updates form a circular list, but we\n          // unravel them when transferring them to the base queue.\n          const firstPendingUpdate = ((lastPendingUpdate.next: any): Update<State>);\n          lastPendingUpdate.next = null;\n          update = firstPendingUpdate;\n          queue.lastBaseUpdate = lastPendingUpdate;\n          queue.shared.pending = null;\n        }\n      }\n    } while (true);\n\n    if (newLastBaseUpdate === null) {\n      newBaseState = newState;\n    }\n\n    queue.baseState = ((newBaseState: any): State);\n    queue.firstBaseUpdate = newFirstBaseUpdate;\n    queue.lastBaseUpdate = newLastBaseUpdate;\n\n    // Interleaved updates are stored on a separate queue. We aren't going to\n    // process them during this render, but we do need to track which lanes\n    // are remaining.\n    const lastInterleaved = queue.shared.interleaved;\n    if (lastInterleaved !== null) {\n      let interleaved = lastInterleaved;\n      do {\n        newLanes = mergeLanes(newLanes, interleaved.lane);\n        interleaved = ((interleaved: any).next: Update<State>);\n      } while (interleaved !== lastInterleaved);\n    } else if (firstBaseUpdate === null) {\n      // `queue.lanes` is used for entangling transitions. We can set it back to\n      // zero once the queue is empty.\n      queue.shared.lanes = NoLanes;\n    }\n\n    // Set the remaining expiration time to be whatever is remaining in the queue.\n    // This should be fine because the only two other things that contribute to\n    // expiration time are props and context. We're already in the middle of the\n    // begin phase by the time we start processing the queue, so we've already\n    // dealt with the props. Context in components that specify\n    // shouldComponentUpdate is tricky; but we'll have to account for\n    // that regardless.\n    markSkippedUpdateLanes(newLanes);\n    workInProgress.lanes = newLanes;\n    workInProgress.memoizedState = newState;\n  }\n\n  if (__DEV__) {\n    currentlyProcessingQueue = null;\n  }\n}\n\nfunction callCallback(callback, context) {\n  invariant(\n    typeof callback === 'function',\n    'Invalid argument passed as callback. Expected a function. Instead ' +\n      'received: %s',\n    callback,\n  );\n  callback.call(context);\n}\n\nexport function resetHasForceUpdateBeforeProcessing() {\n  hasForceUpdate = false;\n}\n\nexport function checkHasForceUpdateAfterProcessing(): boolean {\n  return hasForceUpdate;\n}\n\nexport function commitUpdateQueue<State>(\n  finishedWork: Fiber,\n  finishedQueue: UpdateQueue<State>,\n  instance: any,\n): void {\n  // Commit the effects\n  const effects = finishedQueue.effects;\n  finishedQueue.effects = null;\n  if (effects !== null) {\n    for (let i = 0; i < effects.length; i++) {\n      const effect = effects[i];\n      const callback = effect.callback;\n      if (callback !== null) {\n        effect.callback = null;\n        callCallback(callback, instance);\n      }\n    }\n  }\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Fiber} from './ReactInternalTypes';\nimport type {Lanes} from './ReactFiberLane.old';\nimport type {UpdateQueue} from './ReactUpdateQueue.old';\nimport type {Flags} from './ReactFiberFlags';\n\nimport * as React from 'react';\nimport {\n  LayoutStatic,\n  MountLayoutDev,\n  Update,\n  Snapshot,\n} from './ReactFiberFlags';\nimport {\n  debugRenderPhaseSideEffectsForStrictMode,\n  disableLegacyContext,\n  enableDebugTracing,\n  enableSchedulingProfiler,\n  warnAboutDeprecatedLifecycles,\n  enableStrictEffects,\n  enableLazyContextPropagation,\n  enableSuspenseLayoutEffectSemantics,\n} from 'shared/ReactFeatureFlags';\nimport ReactStrictModeWarnings from './ReactStrictModeWarnings.old';\nimport {isMounted} from './ReactFiberTreeReflection';\nimport {get as getInstance, set as setInstance} from 'shared/ReactInstanceMap';\nimport shallowEqual from 'shared/shallowEqual';\nimport getComponentNameFromFiber from 'react-reconciler/src/getComponentNameFromFiber';\nimport getComponentNameFromType from 'shared/getComponentNameFromType';\nimport invariant from 'shared/invariant';\nimport isArray from 'shared/isArray';\nimport {REACT_CONTEXT_TYPE, REACT_PROVIDER_TYPE} from 'shared/ReactSymbols';\nimport {setIsStrictModeForDevtools} from './ReactFiberReconciler';\n\nimport {resolveDefaultProps} from './ReactFiberLazyComponent.old';\nimport {\n  DebugTracingMode,\n  NoMode,\n  StrictLegacyMode,\n  StrictEffectsMode,\n} from './ReactTypeOfMode';\n\nimport {\n  enqueueUpdate,\n  entangleTransitions,\n  processUpdateQueue,\n  checkHasForceUpdateAfterProcessing,\n  resetHasForceUpdateBeforeProcessing,\n  createUpdate,\n  ReplaceState,\n  ForceUpdate,\n  initializeUpdateQueue,\n  cloneUpdateQueue,\n} from './ReactUpdateQueue.old';\nimport {NoLanes} from './ReactFiberLane.old';\nimport {\n  cacheContext,\n  getMaskedContext,\n  getUnmaskedContext,\n  hasContextChanged,\n  emptyContextObject,\n} from './ReactFiberContext.old';\nimport {readContext, checkIfContextChanged} from './ReactFiberNewContext.old';\nimport {\n  requestEventTime,\n  requestUpdateLane,\n  scheduleUpdateOnFiber,\n} from './ReactFiberWorkLoop.old';\nimport {logForceUpdateScheduled, logStateUpdateScheduled} from './DebugTracing';\n\nimport {\n  markForceUpdateScheduled,\n  markStateUpdateScheduled,\n} from './SchedulingProfiler';\n\nconst fakeInternalInstance = {};\n\n// React.Component uses a shared frozen object by default.\n// We'll use it to determine whether we need to initialize legacy refs.\nexport const emptyRefsObject = new React.Component().refs;\n\nlet didWarnAboutStateAssignmentForComponent;\nlet didWarnAboutUninitializedState;\nlet didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate;\nlet didWarnAboutLegacyLifecyclesAndDerivedState;\nlet didWarnAboutUndefinedDerivedState;\nlet warnOnUndefinedDerivedState;\nlet warnOnInvalidCallback;\nlet didWarnAboutDirectlyAssigningPropsToState;\nlet didWarnAboutContextTypeAndContextTypes;\nlet didWarnAboutInvalidateContextType;\n\nif (__DEV__) {\n  didWarnAboutStateAssignmentForComponent = new Set();\n  didWarnAboutUninitializedState = new Set();\n  didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = new Set();\n  didWarnAboutLegacyLifecyclesAndDerivedState = new Set();\n  didWarnAboutDirectlyAssigningPropsToState = new Set();\n  didWarnAboutUndefinedDerivedState = new Set();\n  didWarnAboutContextTypeAndContextTypes = new Set();\n  didWarnAboutInvalidateContextType = new Set();\n\n  const didWarnOnInvalidCallback = new Set();\n\n  warnOnInvalidCallback = function(callback: mixed, callerName: string) {\n    if (callback === null || typeof callback === 'function') {\n      return;\n    }\n    const key = callerName + '_' + (callback: any);\n    if (!didWarnOnInvalidCallback.has(key)) {\n      didWarnOnInvalidCallback.add(key);\n      console.error(\n        '%s(...): Expected the last optional `callback` argument to be a ' +\n          'function. Instead received: %s.',\n        callerName,\n        callback,\n      );\n    }\n  };\n\n  warnOnUndefinedDerivedState = function(type, partialState) {\n    if (partialState === undefined) {\n      const componentName = getComponentNameFromType(type) || 'Component';\n      if (!didWarnAboutUndefinedDerivedState.has(componentName)) {\n        didWarnAboutUndefinedDerivedState.add(componentName);\n        console.error(\n          '%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. ' +\n            'You have returned undefined.',\n          componentName,\n        );\n      }\n    }\n  };\n\n  // This is so gross but it's at least non-critical and can be removed if\n  // it causes problems. This is meant to give a nicer error message for\n  // ReactDOM15.unstable_renderSubtreeIntoContainer(reactDOM16Component,\n  // ...)) which otherwise throws a \"_processChildContext is not a function\"\n  // exception.\n  Object.defineProperty(fakeInternalInstance, '_processChildContext', {\n    enumerable: false,\n    value: function() {\n      invariant(\n        false,\n        '_processChildContext is not available in React 16+. This likely ' +\n          'means you have multiple copies of React and are attempting to nest ' +\n          'a React 15 tree inside a React 16 tree using ' +\n          \"unstable_renderSubtreeIntoContainer, which isn't supported. Try \" +\n          'to make sure you have only one copy of React (and ideally, switch ' +\n          'to ReactDOM.createPortal).',\n      );\n    },\n  });\n  Object.freeze(fakeInternalInstance);\n}\n\nfunction applyDerivedStateFromProps(\n  workInProgress: Fiber,\n  ctor: any,\n  getDerivedStateFromProps: (props: any, state: any) => any,\n  nextProps: any,\n) {\n  const prevState = workInProgress.memoizedState;\n  let partialState = getDerivedStateFromProps(nextProps, prevState);\n  if (__DEV__) {\n    if (\n      debugRenderPhaseSideEffectsForStrictMode &&\n      workInProgress.mode & StrictLegacyMode\n    ) {\n      setIsStrictModeForDevtools(true);\n      try {\n        // Invoke the function an extra time to help detect side-effects.\n        partialState = getDerivedStateFromProps(nextProps, prevState);\n      } finally {\n        setIsStrictModeForDevtools(false);\n      }\n    }\n    warnOnUndefinedDerivedState(ctor, partialState);\n  }\n  // Merge the partial state and the previous state.\n  const memoizedState =\n    partialState === null || partialState === undefined\n      ? prevState\n      : Object.assign({}, prevState, partialState);\n  workInProgress.memoizedState = memoizedState;\n\n  // Once the update queue is empty, persist the derived state onto the\n  // base state.\n  if (workInProgress.lanes === NoLanes) {\n    // Queue is always non-null for classes\n    const updateQueue: UpdateQueue<any> = (workInProgress.updateQueue: any);\n    updateQueue.baseState = memoizedState;\n  }\n}\n\nconst classComponentUpdater = {\n  isMounted,\n  enqueueSetState(inst, payload, callback) {\n    const fiber = getInstance(inst);\n    const eventTime = requestEventTime();\n    const lane = requestUpdateLane(fiber);\n\n    const update = createUpdate(eventTime, lane);\n    update.payload = payload;\n    if (callback !== undefined && callback !== null) {\n      if (__DEV__) {\n        warnOnInvalidCallback(callback, 'setState');\n      }\n      update.callback = callback;\n    }\n\n    enqueueUpdate(fiber, update, lane);\n    const root = scheduleUpdateOnFiber(fiber, lane, eventTime);\n    if (root !== null) {\n      entangleTransitions(root, fiber, lane);\n    }\n\n    if (__DEV__) {\n      if (enableDebugTracing) {\n        if (fiber.mode & DebugTracingMode) {\n          const name = getComponentNameFromFiber(fiber) || 'Unknown';\n          logStateUpdateScheduled(name, lane, payload);\n        }\n      }\n    }\n\n    if (enableSchedulingProfiler) {\n      markStateUpdateScheduled(fiber, lane);\n    }\n  },\n  enqueueReplaceState(inst, payload, callback) {\n    const fiber = getInstance(inst);\n    const eventTime = requestEventTime();\n    const lane = requestUpdateLane(fiber);\n\n    const update = createUpdate(eventTime, lane);\n    update.tag = ReplaceState;\n    update.payload = payload;\n\n    if (callback !== undefined && callback !== null) {\n      if (__DEV__) {\n        warnOnInvalidCallback(callback, 'replaceState');\n      }\n      update.callback = callback;\n    }\n\n    enqueueUpdate(fiber, update, lane);\n    const root = scheduleUpdateOnFiber(fiber, lane, eventTime);\n    if (root !== null) {\n      entangleTransitions(root, fiber, lane);\n    }\n\n    if (__DEV__) {\n      if (enableDebugTracing) {\n        if (fiber.mode & DebugTracingMode) {\n          const name = getComponentNameFromFiber(fiber) || 'Unknown';\n          logStateUpdateScheduled(name, lane, payload);\n        }\n      }\n    }\n\n    if (enableSchedulingProfiler) {\n      markStateUpdateScheduled(fiber, lane);\n    }\n  },\n  enqueueForceUpdate(inst, callback) {\n    const fiber = getInstance(inst);\n    const eventTime = requestEventTime();\n    const lane = requestUpdateLane(fiber);\n\n    const update = createUpdate(eventTime, lane);\n    update.tag = ForceUpdate;\n\n    if (callback !== undefined && callback !== null) {\n      if (__DEV__) {\n        warnOnInvalidCallback(callback, 'forceUpdate');\n      }\n      update.callback = callback;\n    }\n\n    enqueueUpdate(fiber, update, lane);\n    const root = scheduleUpdateOnFiber(fiber, lane, eventTime);\n    if (root !== null) {\n      entangleTransitions(root, fiber, lane);\n    }\n\n    if (__DEV__) {\n      if (enableDebugTracing) {\n        if (fiber.mode & DebugTracingMode) {\n          const name = getComponentNameFromFiber(fiber) || 'Unknown';\n          logForceUpdateScheduled(name, lane);\n        }\n      }\n    }\n\n    if (enableSchedulingProfiler) {\n      markForceUpdateScheduled(fiber, lane);\n    }\n  },\n};\n\nfunction checkShouldComponentUpdate(\n  workInProgress,\n  ctor,\n  oldProps,\n  newProps,\n  oldState,\n  newState,\n  nextContext,\n) {\n  const instance = workInProgress.stateNode;\n  if (typeof instance.shouldComponentUpdate === 'function') {\n    let shouldUpdate = instance.shouldComponentUpdate(\n      newProps,\n      newState,\n      nextContext,\n    );\n    if (__DEV__) {\n      if (\n        debugRenderPhaseSideEffectsForStrictMode &&\n        workInProgress.mode & StrictLegacyMode\n      ) {\n        setIsStrictModeForDevtools(true);\n        try {\n          // Invoke the function an extra time to help detect side-effects.\n          shouldUpdate = instance.shouldComponentUpdate(\n            newProps,\n            newState,\n            nextContext,\n          );\n        } finally {\n          setIsStrictModeForDevtools(false);\n        }\n      }\n      if (shouldUpdate === undefined) {\n        console.error(\n          '%s.shouldComponentUpdate(): Returned undefined instead of a ' +\n            'boolean value. Make sure to return true or false.',\n          getComponentNameFromType(ctor) || 'Component',\n        );\n      }\n    }\n\n    return shouldUpdate;\n  }\n\n  if (ctor.prototype && ctor.prototype.isPureReactComponent) {\n    return (\n      !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState)\n    );\n  }\n\n  return true;\n}\n\nfunction checkClassInstance(workInProgress: Fiber, ctor: any, newProps: any) {\n  const instance = workInProgress.stateNode;\n  if (__DEV__) {\n    const name = getComponentNameFromType(ctor) || 'Component';\n    const renderPresent = instance.render;\n\n    if (!renderPresent) {\n      if (ctor.prototype && typeof ctor.prototype.render === 'function') {\n        console.error(\n          '%s(...): No `render` method found on the returned component ' +\n            'instance: did you accidentally return an object from the constructor?',\n          name,\n        );\n      } else {\n        console.error(\n          '%s(...): No `render` method found on the returned component ' +\n            'instance: you may have forgotten to define `render`.',\n          name,\n        );\n      }\n    }\n\n    if (\n      instance.getInitialState &&\n      !instance.getInitialState.isReactClassApproved &&\n      !instance.state\n    ) {\n      console.error(\n        'getInitialState was defined on %s, a plain JavaScript class. ' +\n          'This is only supported for classes created using React.createClass. ' +\n          'Did you mean to define a state property instead?',\n        name,\n      );\n    }\n    if (\n      instance.getDefaultProps &&\n      !instance.getDefaultProps.isReactClassApproved\n    ) {\n      console.error(\n        'getDefaultProps was defined on %s, a plain JavaScript class. ' +\n          'This is only supported for classes created using React.createClass. ' +\n          'Use a static property to define defaultProps instead.',\n        name,\n      );\n    }\n    if (instance.propTypes) {\n      console.error(\n        'propTypes was defined as an instance property on %s. Use a static ' +\n          'property to define propTypes instead.',\n        name,\n      );\n    }\n    if (instance.contextType) {\n      console.error(\n        'contextType was defined as an instance property on %s. Use a static ' +\n          'property to define contextType instead.',\n        name,\n      );\n    }\n\n    if (disableLegacyContext) {\n      if (ctor.childContextTypes) {\n        console.error(\n          '%s uses the legacy childContextTypes API which is no longer supported. ' +\n            'Use React.createContext() instead.',\n          name,\n        );\n      }\n      if (ctor.contextTypes) {\n        console.error(\n          '%s uses the legacy contextTypes API which is no longer supported. ' +\n            'Use React.createContext() with static contextType instead.',\n          name,\n        );\n      }\n    } else {\n      if (instance.contextTypes) {\n        console.error(\n          'contextTypes was defined as an instance property on %s. Use a static ' +\n            'property to define contextTypes instead.',\n          name,\n        );\n      }\n\n      if (\n        ctor.contextType &&\n        ctor.contextTypes &&\n        !didWarnAboutContextTypeAndContextTypes.has(ctor)\n      ) {\n        didWarnAboutContextTypeAndContextTypes.add(ctor);\n        console.error(\n          '%s declares both contextTypes and contextType static properties. ' +\n            'The legacy contextTypes property will be ignored.',\n          name,\n        );\n      }\n    }\n\n    if (typeof instance.componentShouldUpdate === 'function') {\n      console.error(\n        '%s has a method called ' +\n          'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' +\n          'The name is phrased as a question because the function is ' +\n          'expected to return a value.',\n        name,\n      );\n    }\n    if (\n      ctor.prototype &&\n      ctor.prototype.isPureReactComponent &&\n      typeof instance.shouldComponentUpdate !== 'undefined'\n    ) {\n      console.error(\n        '%s has a method called shouldComponentUpdate(). ' +\n          'shouldComponentUpdate should not be used when extending React.PureComponent. ' +\n          'Please extend React.Component if shouldComponentUpdate is used.',\n        getComponentNameFromType(ctor) || 'A pure component',\n      );\n    }\n    if (typeof instance.componentDidUnmount === 'function') {\n      console.error(\n        '%s has a method called ' +\n          'componentDidUnmount(). But there is no such lifecycle method. ' +\n          'Did you mean componentWillUnmount()?',\n        name,\n      );\n    }\n    if (typeof instance.componentDidReceiveProps === 'function') {\n      console.error(\n        '%s has a method called ' +\n          'componentDidReceiveProps(). But there is no such lifecycle method. ' +\n          'If you meant to update the state in response to changing props, ' +\n          'use componentWillReceiveProps(). If you meant to fetch data or ' +\n          'run side-effects or mutations after React has updated the UI, use componentDidUpdate().',\n        name,\n      );\n    }\n    if (typeof instance.componentWillRecieveProps === 'function') {\n      console.error(\n        '%s has a method called ' +\n          'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?',\n        name,\n      );\n    }\n    if (typeof instance.UNSAFE_componentWillRecieveProps === 'function') {\n      console.error(\n        '%s has a method called ' +\n          'UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?',\n        name,\n      );\n    }\n    const hasMutatedProps = instance.props !== newProps;\n    if (instance.props !== undefined && hasMutatedProps) {\n      console.error(\n        '%s(...): When calling super() in `%s`, make sure to pass ' +\n          \"up the same props that your component's constructor was passed.\",\n        name,\n        name,\n      );\n    }\n    if (instance.defaultProps) {\n      console.error(\n        'Setting defaultProps as an instance property on %s is not supported and will be ignored.' +\n          ' Instead, define defaultProps as a static property on %s.',\n        name,\n        name,\n      );\n    }\n\n    if (\n      typeof instance.getSnapshotBeforeUpdate === 'function' &&\n      typeof instance.componentDidUpdate !== 'function' &&\n      !didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(ctor)\n    ) {\n      didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(ctor);\n      console.error(\n        '%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). ' +\n          'This component defines getSnapshotBeforeUpdate() only.',\n        getComponentNameFromType(ctor),\n      );\n    }\n\n    if (typeof instance.getDerivedStateFromProps === 'function') {\n      console.error(\n        '%s: getDerivedStateFromProps() is defined as an instance method ' +\n          'and will be ignored. Instead, declare it as a static method.',\n        name,\n      );\n    }\n    if (typeof instance.getDerivedStateFromError === 'function') {\n      console.error(\n        '%s: getDerivedStateFromError() is defined as an instance method ' +\n          'and will be ignored. Instead, declare it as a static method.',\n        name,\n      );\n    }\n    if (typeof ctor.getSnapshotBeforeUpdate === 'function') {\n      console.error(\n        '%s: getSnapshotBeforeUpdate() is defined as a static method ' +\n          'and will be ignored. Instead, declare it as an instance method.',\n        name,\n      );\n    }\n    const state = instance.state;\n    if (state && (typeof state !== 'object' || isArray(state))) {\n      console.error('%s.state: must be set to an object or null', name);\n    }\n    if (\n      typeof instance.getChildContext === 'function' &&\n      typeof ctor.childContextTypes !== 'object'\n    ) {\n      console.error(\n        '%s.getChildContext(): childContextTypes must be defined in order to ' +\n          'use getChildContext().',\n        name,\n      );\n    }\n  }\n}\n\nfunction adoptClassInstance(workInProgress: Fiber, instance: any): void {\n  instance.updater = classComponentUpdater;\n  workInProgress.stateNode = instance;\n  // The instance needs access to the fiber so that it can schedule updates\n  setInstance(instance, workInProgress);\n  if (__DEV__) {\n    instance._reactInternalInstance = fakeInternalInstance;\n  }\n}\n\nfunction constructClassInstance(\n  workInProgress: Fiber,\n  ctor: any,\n  props: any,\n): any {\n  let isLegacyContextConsumer = false;\n  let unmaskedContext = emptyContextObject;\n  let context = emptyContextObject;\n  const contextType = ctor.contextType;\n\n  if (__DEV__) {\n    if ('contextType' in ctor) {\n      const isValid =\n        // Allow null for conditional declaration\n        contextType === null ||\n        (contextType !== undefined &&\n          contextType.$$typeof === REACT_CONTEXT_TYPE &&\n          contextType._context === undefined); // Not a <Context.Consumer>\n\n      if (!isValid && !didWarnAboutInvalidateContextType.has(ctor)) {\n        didWarnAboutInvalidateContextType.add(ctor);\n\n        let addendum = '';\n        if (contextType === undefined) {\n          addendum =\n            ' However, it is set to undefined. ' +\n            'This can be caused by a typo or by mixing up named and default imports. ' +\n            'This can also happen due to a circular dependency, so ' +\n            'try moving the createContext() call to a separate file.';\n        } else if (typeof contextType !== 'object') {\n          addendum = ' However, it is set to a ' + typeof contextType + '.';\n        } else if (contextType.$$typeof === REACT_PROVIDER_TYPE) {\n          addendum = ' Did you accidentally pass the Context.Provider instead?';\n        } else if (contextType._context !== undefined) {\n          // <Context.Consumer>\n          addendum = ' Did you accidentally pass the Context.Consumer instead?';\n        } else {\n          addendum =\n            ' However, it is set to an object with keys {' +\n            Object.keys(contextType).join(', ') +\n            '}.';\n        }\n        console.error(\n          '%s defines an invalid contextType. ' +\n            'contextType should point to the Context object returned by React.createContext().%s',\n          getComponentNameFromType(ctor) || 'Component',\n          addendum,\n        );\n      }\n    }\n  }\n\n  if (typeof contextType === 'object' && contextType !== null) {\n    context = readContext((contextType: any));\n  } else if (!disableLegacyContext) {\n    unmaskedContext = getUnmaskedContext(workInProgress, ctor, true);\n    const contextTypes = ctor.contextTypes;\n    isLegacyContextConsumer =\n      contextTypes !== null && contextTypes !== undefined;\n    context = isLegacyContextConsumer\n      ? getMaskedContext(workInProgress, unmaskedContext)\n      : emptyContextObject;\n  }\n\n  let instance = new ctor(props, context);\n  // Instantiate twice to help detect side-effects.\n  if (__DEV__) {\n    if (\n      debugRenderPhaseSideEffectsForStrictMode &&\n      workInProgress.mode & StrictLegacyMode\n    ) {\n      setIsStrictModeForDevtools(true);\n      try {\n        instance = new ctor(props, context); // eslint-disable-line no-new\n      } finally {\n        setIsStrictModeForDevtools(false);\n      }\n    }\n  }\n\n  const state = (workInProgress.memoizedState =\n    instance.state !== null && instance.state !== undefined\n      ? instance.state\n      : null);\n  adoptClassInstance(workInProgress, instance);\n\n  if (__DEV__) {\n    if (typeof ctor.getDerivedStateFromProps === 'function' && state === null) {\n      const componentName = getComponentNameFromType(ctor) || 'Component';\n      if (!didWarnAboutUninitializedState.has(componentName)) {\n        didWarnAboutUninitializedState.add(componentName);\n        console.error(\n          '`%s` uses `getDerivedStateFromProps` but its initial state is ' +\n            '%s. This is not recommended. Instead, define the initial state by ' +\n            'assigning an object to `this.state` in the constructor of `%s`. ' +\n            'This ensures that `getDerivedStateFromProps` arguments have a consistent shape.',\n          componentName,\n          instance.state === null ? 'null' : 'undefined',\n          componentName,\n        );\n      }\n    }\n\n    // If new component APIs are defined, \"unsafe\" lifecycles won't be called.\n    // Warn about these lifecycles if they are present.\n    // Don't warn about react-lifecycles-compat polyfilled methods though.\n    if (\n      typeof ctor.getDerivedStateFromProps === 'function' ||\n      typeof instance.getSnapshotBeforeUpdate === 'function'\n    ) {\n      let foundWillMountName = null;\n      let foundWillReceivePropsName = null;\n      let foundWillUpdateName = null;\n      if (\n        typeof instance.componentWillMount === 'function' &&\n        instance.componentWillMount.__suppressDeprecationWarning !== true\n      ) {\n        foundWillMountName = 'componentWillMount';\n      } else if (typeof instance.UNSAFE_componentWillMount === 'function') {\n        foundWillMountName = 'UNSAFE_componentWillMount';\n      }\n      if (\n        typeof instance.componentWillReceiveProps === 'function' &&\n        instance.componentWillReceiveProps.__suppressDeprecationWarning !== true\n      ) {\n        foundWillReceivePropsName = 'componentWillReceiveProps';\n      } else if (\n        typeof instance.UNSAFE_componentWillReceiveProps === 'function'\n      ) {\n        foundWillReceivePropsName = 'UNSAFE_componentWillReceiveProps';\n      }\n      if (\n        typeof instance.componentWillUpdate === 'function' &&\n        instance.componentWillUpdate.__suppressDeprecationWarning !== true\n      ) {\n        foundWillUpdateName = 'componentWillUpdate';\n      } else if (typeof instance.UNSAFE_componentWillUpdate === 'function') {\n        foundWillUpdateName = 'UNSAFE_componentWillUpdate';\n      }\n      if (\n        foundWillMountName !== null ||\n        foundWillReceivePropsName !== null ||\n        foundWillUpdateName !== null\n      ) {\n        const componentName = getComponentNameFromType(ctor) || 'Component';\n        const newApiName =\n          typeof ctor.getDerivedStateFromProps === 'function'\n            ? 'getDerivedStateFromProps()'\n            : 'getSnapshotBeforeUpdate()';\n        if (!didWarnAboutLegacyLifecyclesAndDerivedState.has(componentName)) {\n          didWarnAboutLegacyLifecyclesAndDerivedState.add(componentName);\n          console.error(\n            'Unsafe legacy lifecycles will not be called for components using new component APIs.\\n\\n' +\n              '%s uses %s but also contains the following legacy lifecycles:%s%s%s\\n\\n' +\n              'The above lifecycles should be removed. Learn more about this warning here:\\n' +\n              'https://reactjs.org/link/unsafe-component-lifecycles',\n            componentName,\n            newApiName,\n            foundWillMountName !== null ? `\\n  ${foundWillMountName}` : '',\n            foundWillReceivePropsName !== null\n              ? `\\n  ${foundWillReceivePropsName}`\n              : '',\n            foundWillUpdateName !== null ? `\\n  ${foundWillUpdateName}` : '',\n          );\n        }\n      }\n    }\n  }\n\n  // Cache unmasked context so we can avoid recreating masked context unless necessary.\n  // ReactFiberContext usually updates this cache but can't for newly-created instances.\n  if (isLegacyContextConsumer) {\n    cacheContext(workInProgress, unmaskedContext, context);\n  }\n\n  return instance;\n}\n\nfunction callComponentWillMount(workInProgress, instance) {\n  const oldState = instance.state;\n\n  if (typeof instance.componentWillMount === 'function') {\n    instance.componentWillMount();\n  }\n  if (typeof instance.UNSAFE_componentWillMount === 'function') {\n    instance.UNSAFE_componentWillMount();\n  }\n\n  if (oldState !== instance.state) {\n    if (__DEV__) {\n      console.error(\n        '%s.componentWillMount(): Assigning directly to this.state is ' +\n          \"deprecated (except inside a component's \" +\n          'constructor). Use setState instead.',\n        getComponentNameFromFiber(workInProgress) || 'Component',\n      );\n    }\n    classComponentUpdater.enqueueReplaceState(instance, instance.state, null);\n  }\n}\n\nfunction callComponentWillReceiveProps(\n  workInProgress,\n  instance,\n  newProps,\n  nextContext,\n) {\n  const oldState = instance.state;\n  if (typeof instance.componentWillReceiveProps === 'function') {\n    instance.componentWillReceiveProps(newProps, nextContext);\n  }\n  if (typeof instance.UNSAFE_componentWillReceiveProps === 'function') {\n    instance.UNSAFE_componentWillReceiveProps(newProps, nextContext);\n  }\n\n  if (instance.state !== oldState) {\n    if (__DEV__) {\n      const componentName =\n        getComponentNameFromFiber(workInProgress) || 'Component';\n      if (!didWarnAboutStateAssignmentForComponent.has(componentName)) {\n        didWarnAboutStateAssignmentForComponent.add(componentName);\n        console.error(\n          '%s.componentWillReceiveProps(): Assigning directly to ' +\n            \"this.state is deprecated (except inside a component's \" +\n            'constructor). Use setState instead.',\n          componentName,\n        );\n      }\n    }\n    classComponentUpdater.enqueueReplaceState(instance, instance.state, null);\n  }\n}\n\n// Invokes the mount life-cycles on a previously never rendered instance.\nfunction mountClassInstance(\n  workInProgress: Fiber,\n  ctor: any,\n  newProps: any,\n  renderLanes: Lanes,\n): void {\n  if (__DEV__) {\n    checkClassInstance(workInProgress, ctor, newProps);\n  }\n\n  const instance = workInProgress.stateNode;\n  instance.props = newProps;\n  instance.state = workInProgress.memoizedState;\n  instance.refs = emptyRefsObject;\n\n  initializeUpdateQueue(workInProgress);\n\n  const contextType = ctor.contextType;\n  if (typeof contextType === 'object' && contextType !== null) {\n    instance.context = readContext(contextType);\n  } else if (disableLegacyContext) {\n    instance.context = emptyContextObject;\n  } else {\n    const unmaskedContext = getUnmaskedContext(workInProgress, ctor, true);\n    instance.context = getMaskedContext(workInProgress, unmaskedContext);\n  }\n\n  if (__DEV__) {\n    if (instance.state === newProps) {\n      const componentName = getComponentNameFromType(ctor) || 'Component';\n      if (!didWarnAboutDirectlyAssigningPropsToState.has(componentName)) {\n        didWarnAboutDirectlyAssigningPropsToState.add(componentName);\n        console.error(\n          '%s: It is not recommended to assign props directly to state ' +\n            \"because updates to props won't be reflected in state. \" +\n            'In most cases, it is better to use props directly.',\n          componentName,\n        );\n      }\n    }\n\n    if (workInProgress.mode & StrictLegacyMode) {\n      ReactStrictModeWarnings.recordLegacyContextWarning(\n        workInProgress,\n        instance,\n      );\n    }\n\n    if (warnAboutDeprecatedLifecycles) {\n      ReactStrictModeWarnings.recordUnsafeLifecycleWarnings(\n        workInProgress,\n        instance,\n      );\n    }\n  }\n\n  instance.state = workInProgress.memoizedState;\n\n  const getDerivedStateFromProps = ctor.getDerivedStateFromProps;\n  if (typeof getDerivedStateFromProps === 'function') {\n    applyDerivedStateFromProps(\n      workInProgress,\n      ctor,\n      getDerivedStateFromProps,\n      newProps,\n    );\n    instance.state = workInProgress.memoizedState;\n  }\n\n  // In order to support react-lifecycles-compat polyfilled components,\n  // Unsafe lifecycles should not be invoked for components using the new APIs.\n  if (\n    typeof ctor.getDerivedStateFromProps !== 'function' &&\n    typeof instance.getSnapshotBeforeUpdate !== 'function' &&\n    (typeof instance.UNSAFE_componentWillMount === 'function' ||\n      typeof instance.componentWillMount === 'function')\n  ) {\n    callComponentWillMount(workInProgress, instance);\n    // If we had additional state updates during this life-cycle, let's\n    // process them now.\n    processUpdateQueue(workInProgress, newProps, instance, renderLanes);\n    instance.state = workInProgress.memoizedState;\n  }\n\n  if (typeof instance.componentDidMount === 'function') {\n    let fiberFlags: Flags = Update;\n    if (enableSuspenseLayoutEffectSemantics) {\n      fiberFlags |= LayoutStatic;\n    }\n    if (\n      __DEV__ &&\n      enableStrictEffects &&\n      (workInProgress.mode & StrictEffectsMode) !== NoMode\n    ) {\n      fiberFlags |= MountLayoutDev;\n    }\n    workInProgress.flags |= fiberFlags;\n  }\n}\n\nfunction resumeMountClassInstance(\n  workInProgress: Fiber,\n  ctor: any,\n  newProps: any,\n  renderLanes: Lanes,\n): boolean {\n  const instance = workInProgress.stateNode;\n\n  const oldProps = workInProgress.memoizedProps;\n  instance.props = oldProps;\n\n  const oldContext = instance.context;\n  const contextType = ctor.contextType;\n  let nextContext = emptyContextObject;\n  if (typeof contextType === 'object' && contextType !== null) {\n    nextContext = readContext(contextType);\n  } else if (!disableLegacyContext) {\n    const nextLegacyUnmaskedContext = getUnmaskedContext(\n      workInProgress,\n      ctor,\n      true,\n    );\n    nextContext = getMaskedContext(workInProgress, nextLegacyUnmaskedContext);\n  }\n\n  const getDerivedStateFromProps = ctor.getDerivedStateFromProps;\n  const hasNewLifecycles =\n    typeof getDerivedStateFromProps === 'function' ||\n    typeof instance.getSnapshotBeforeUpdate === 'function';\n\n  // Note: During these life-cycles, instance.props/instance.state are what\n  // ever the previously attempted to render - not the \"current\". However,\n  // during componentDidUpdate we pass the \"current\" props.\n\n  // In order to support react-lifecycles-compat polyfilled components,\n  // Unsafe lifecycles should not be invoked for components using the new APIs.\n  if (\n    !hasNewLifecycles &&\n    (typeof instance.UNSAFE_componentWillReceiveProps === 'function' ||\n      typeof instance.componentWillReceiveProps === 'function')\n  ) {\n    if (oldProps !== newProps || oldContext !== nextContext) {\n      callComponentWillReceiveProps(\n        workInProgress,\n        instance,\n        newProps,\n        nextContext,\n      );\n    }\n  }\n\n  resetHasForceUpdateBeforeProcessing();\n\n  const oldState = workInProgress.memoizedState;\n  let newState = (instance.state = oldState);\n  processUpdateQueue(workInProgress, newProps, instance, renderLanes);\n  newState = workInProgress.memoizedState;\n  if (\n    oldProps === newProps &&\n    oldState === newState &&\n    !hasContextChanged() &&\n    !checkHasForceUpdateAfterProcessing()\n  ) {\n    // If an update was already in progress, we should schedule an Update\n    // effect even though we're bailing out, so that cWU/cDU are called.\n    if (typeof instance.componentDidMount === 'function') {\n      let fiberFlags: Flags = Update;\n      if (enableSuspenseLayoutEffectSemantics) {\n        fiberFlags |= LayoutStatic;\n      }\n      if (\n        __DEV__ &&\n        enableStrictEffects &&\n        (workInProgress.mode & StrictEffectsMode) !== NoMode\n      ) {\n        fiberFlags |= MountLayoutDev;\n      }\n      workInProgress.flags |= fiberFlags;\n    }\n    return false;\n  }\n\n  if (typeof getDerivedStateFromProps === 'function') {\n    applyDerivedStateFromProps(\n      workInProgress,\n      ctor,\n      getDerivedStateFromProps,\n      newProps,\n    );\n    newState = workInProgress.memoizedState;\n  }\n\n  const shouldUpdate =\n    checkHasForceUpdateAfterProcessing() ||\n    checkShouldComponentUpdate(\n      workInProgress,\n      ctor,\n      oldProps,\n      newProps,\n      oldState,\n      newState,\n      nextContext,\n    );\n\n  if (shouldUpdate) {\n    // In order to support react-lifecycles-compat polyfilled components,\n    // Unsafe lifecycles should not be invoked for components using the new APIs.\n    if (\n      !hasNewLifecycles &&\n      (typeof instance.UNSAFE_componentWillMount === 'function' ||\n        typeof instance.componentWillMount === 'function')\n    ) {\n      if (typeof instance.componentWillMount === 'function') {\n        instance.componentWillMount();\n      }\n      if (typeof instance.UNSAFE_componentWillMount === 'function') {\n        instance.UNSAFE_componentWillMount();\n      }\n    }\n    if (typeof instance.componentDidMount === 'function') {\n      let fiberFlags: Flags = Update;\n      if (enableSuspenseLayoutEffectSemantics) {\n        fiberFlags |= LayoutStatic;\n      }\n      if (\n        __DEV__ &&\n        enableStrictEffects &&\n        (workInProgress.mode & StrictEffectsMode) !== NoMode\n      ) {\n        fiberFlags |= MountLayoutDev;\n      }\n      workInProgress.flags |= fiberFlags;\n    }\n  } else {\n    // If an update was already in progress, we should schedule an Update\n    // effect even though we're bailing out, so that cWU/cDU are called.\n    if (typeof instance.componentDidMount === 'function') {\n      let fiberFlags: Flags = Update;\n      if (enableSuspenseLayoutEffectSemantics) {\n        fiberFlags |= LayoutStatic;\n      }\n      if (\n        __DEV__ &&\n        enableStrictEffects &&\n        (workInProgress.mode & StrictEffectsMode) !== NoMode\n      ) {\n        fiberFlags |= MountLayoutDev;\n      }\n      workInProgress.flags |= fiberFlags;\n    }\n\n    // If shouldComponentUpdate returned false, we should still update the\n    // memoized state to indicate that this work can be reused.\n    workInProgress.memoizedProps = newProps;\n    workInProgress.memoizedState = newState;\n  }\n\n  // Update the existing instance's state, props, and context pointers even\n  // if shouldComponentUpdate returns false.\n  instance.props = newProps;\n  instance.state = newState;\n  instance.context = nextContext;\n\n  return shouldUpdate;\n}\n\n// Invokes the update life-cycles and returns false if it shouldn't rerender.\nfunction updateClassInstance(\n  current: Fiber,\n  workInProgress: Fiber,\n  ctor: any,\n  newProps: any,\n  renderLanes: Lanes,\n): boolean {\n  const instance = workInProgress.stateNode;\n\n  cloneUpdateQueue(current, workInProgress);\n\n  const unresolvedOldProps = workInProgress.memoizedProps;\n  const oldProps =\n    workInProgress.type === workInProgress.elementType\n      ? unresolvedOldProps\n      : resolveDefaultProps(workInProgress.type, unresolvedOldProps);\n  instance.props = oldProps;\n  const unresolvedNewProps = workInProgress.pendingProps;\n\n  const oldContext = instance.context;\n  const contextType = ctor.contextType;\n  let nextContext = emptyContextObject;\n  if (typeof contextType === 'object' && contextType !== null) {\n    nextContext = readContext(contextType);\n  } else if (!disableLegacyContext) {\n    const nextUnmaskedContext = getUnmaskedContext(workInProgress, ctor, true);\n    nextContext = getMaskedContext(workInProgress, nextUnmaskedContext);\n  }\n\n  const getDerivedStateFromProps = ctor.getDerivedStateFromProps;\n  const hasNewLifecycles =\n    typeof getDerivedStateFromProps === 'function' ||\n    typeof instance.getSnapshotBeforeUpdate === 'function';\n\n  // Note: During these life-cycles, instance.props/instance.state are what\n  // ever the previously attempted to render - not the \"current\". However,\n  // during componentDidUpdate we pass the \"current\" props.\n\n  // In order to support react-lifecycles-compat polyfilled components,\n  // Unsafe lifecycles should not be invoked for components using the new APIs.\n  if (\n    !hasNewLifecycles &&\n    (typeof instance.UNSAFE_componentWillReceiveProps === 'function' ||\n      typeof instance.componentWillReceiveProps === 'function')\n  ) {\n    if (\n      unresolvedOldProps !== unresolvedNewProps ||\n      oldContext !== nextContext\n    ) {\n      callComponentWillReceiveProps(\n        workInProgress,\n        instance,\n        newProps,\n        nextContext,\n      );\n    }\n  }\n\n  resetHasForceUpdateBeforeProcessing();\n\n  const oldState = workInProgress.memoizedState;\n  let newState = (instance.state = oldState);\n  processUpdateQueue(workInProgress, newProps, instance, renderLanes);\n  newState = workInProgress.memoizedState;\n\n  if (\n    unresolvedOldProps === unresolvedNewProps &&\n    oldState === newState &&\n    !hasContextChanged() &&\n    !checkHasForceUpdateAfterProcessing() &&\n    !(\n      enableLazyContextPropagation &&\n      current !== null &&\n      current.dependencies !== null &&\n      checkIfContextChanged(current.dependencies)\n    )\n  ) {\n    // If an update was already in progress, we should schedule an Update\n    // effect even though we're bailing out, so that cWU/cDU are called.\n    if (typeof instance.componentDidUpdate === 'function') {\n      if (\n        unresolvedOldProps !== current.memoizedProps ||\n        oldState !== current.memoizedState\n      ) {\n        workInProgress.flags |= Update;\n      }\n    }\n    if (typeof instance.getSnapshotBeforeUpdate === 'function') {\n      if (\n        unresolvedOldProps !== current.memoizedProps ||\n        oldState !== current.memoizedState\n      ) {\n        workInProgress.flags |= Snapshot;\n      }\n    }\n    return false;\n  }\n\n  if (typeof getDerivedStateFromProps === 'function') {\n    applyDerivedStateFromProps(\n      workInProgress,\n      ctor,\n      getDerivedStateFromProps,\n      newProps,\n    );\n    newState = workInProgress.memoizedState;\n  }\n\n  const shouldUpdate =\n    checkHasForceUpdateAfterProcessing() ||\n    checkShouldComponentUpdate(\n      workInProgress,\n      ctor,\n      oldProps,\n      newProps,\n      oldState,\n      newState,\n      nextContext,\n    ) ||\n    // TODO: In some cases, we'll end up checking if context has changed twice,\n    // both before and after `shouldComponentUpdate` has been called. Not ideal,\n    // but I'm loath to refactor this function. This only happens for memoized\n    // components so it's not that common.\n    (enableLazyContextPropagation &&\n      current !== null &&\n      current.dependencies !== null &&\n      checkIfContextChanged(current.dependencies));\n\n  if (shouldUpdate) {\n    // In order to support react-lifecycles-compat polyfilled components,\n    // Unsafe lifecycles should not be invoked for components using the new APIs.\n    if (\n      !hasNewLifecycles &&\n      (typeof instance.UNSAFE_componentWillUpdate === 'function' ||\n        typeof instance.componentWillUpdate === 'function')\n    ) {\n      if (typeof instance.componentWillUpdate === 'function') {\n        instance.componentWillUpdate(newProps, newState, nextContext);\n      }\n      if (typeof instance.UNSAFE_componentWillUpdate === 'function') {\n        instance.UNSAFE_componentWillUpdate(newProps, newState, nextContext);\n      }\n    }\n    if (typeof instance.componentDidUpdate === 'function') {\n      workInProgress.flags |= Update;\n    }\n    if (typeof instance.getSnapshotBeforeUpdate === 'function') {\n      workInProgress.flags |= Snapshot;\n    }\n  } else {\n    // If an update was already in progress, we should schedule an Update\n    // effect even though we're bailing out, so that cWU/cDU are called.\n    if (typeof instance.componentDidUpdate === 'function') {\n      if (\n        unresolvedOldProps !== current.memoizedProps ||\n        oldState !== current.memoizedState\n      ) {\n        workInProgress.flags |= Update;\n      }\n    }\n    if (typeof instance.getSnapshotBeforeUpdate === 'function') {\n      if (\n        unresolvedOldProps !== current.memoizedProps ||\n        oldState !== current.memoizedState\n      ) {\n        workInProgress.flags |= Snapshot;\n      }\n    }\n\n    // If shouldComponentUpdate returned false, we should still update the\n    // memoized props/state to indicate that this work can be reused.\n    workInProgress.memoizedProps = newProps;\n    workInProgress.memoizedState = newState;\n  }\n\n  // Update the existing instance's state, props, and context pointers even\n  // if shouldComponentUpdate returns false.\n  instance.props = newProps;\n  instance.state = newState;\n  instance.context = nextContext;\n\n  return shouldUpdate;\n}\n\nexport {\n  adoptClassInstance,\n  constructClassInstance,\n  mountClassInstance,\n  resumeMountClassInstance,\n  updateClassInstance,\n};\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {ReactElement} from 'shared/ReactElementType';\nimport type {ReactPortal} from 'shared/ReactTypes';\nimport type {Fiber} from './ReactInternalTypes';\nimport type {Lanes} from './ReactFiberLane.old';\n\nimport getComponentNameFromFiber from 'react-reconciler/src/getComponentNameFromFiber';\nimport {Placement, ChildDeletion} from './ReactFiberFlags';\nimport {\n  getIteratorFn,\n  REACT_ELEMENT_TYPE,\n  REACT_FRAGMENT_TYPE,\n  REACT_PORTAL_TYPE,\n  REACT_LAZY_TYPE,\n} from 'shared/ReactSymbols';\nimport {ClassComponent, HostText, HostPortal, Fragment} from './ReactWorkTags';\nimport invariant from 'shared/invariant';\nimport isArray from 'shared/isArray';\nimport {\n  warnAboutStringRefs,\n  enableLazyElements,\n} from 'shared/ReactFeatureFlags';\n\nimport {\n  createWorkInProgress,\n  resetWorkInProgress,\n  createFiberFromElement,\n  createFiberFromFragment,\n  createFiberFromText,\n  createFiberFromPortal,\n} from './ReactFiber.old';\nimport {emptyRefsObject} from './ReactFiberClassComponent.old';\nimport {isCompatibleFamilyForHotReloading} from './ReactFiberHotReloading.old';\nimport {StrictLegacyMode} from './ReactTypeOfMode';\n\nlet didWarnAboutMaps;\nlet didWarnAboutGenerators;\nlet didWarnAboutStringRefs;\nlet ownerHasKeyUseWarning;\nlet ownerHasFunctionTypeWarning;\nlet warnForMissingKey = (child: mixed, returnFiber: Fiber) => {};\n\nif (__DEV__) {\n  didWarnAboutMaps = false;\n  didWarnAboutGenerators = false;\n  didWarnAboutStringRefs = {};\n\n  /**\n   * Warn if there's no key explicitly set on dynamic arrays of children or\n   * object keys are not valid. This allows us to keep track of children between\n   * updates.\n   */\n  ownerHasKeyUseWarning = {};\n  ownerHasFunctionTypeWarning = {};\n\n  warnForMissingKey = (child: mixed, returnFiber: Fiber) => {\n    if (child === null || typeof child !== 'object') {\n      return;\n    }\n    if (!child._store || child._store.validated || child.key != null) {\n      return;\n    }\n    invariant(\n      typeof child._store === 'object',\n      'React Component in warnForMissingKey should have a _store. ' +\n        'This error is likely caused by a bug in React. Please file an issue.',\n    );\n    child._store.validated = true;\n\n    const componentName = getComponentNameFromFiber(returnFiber) || 'Component';\n\n    if (ownerHasKeyUseWarning[componentName]) {\n      return;\n    }\n    ownerHasKeyUseWarning[componentName] = true;\n\n    console.error(\n      'Each child in a list should have a unique ' +\n        '\"key\" prop. See https://reactjs.org/link/warning-keys for ' +\n        'more information.',\n    );\n  };\n}\n\nfunction coerceRef(\n  returnFiber: Fiber,\n  current: Fiber | null,\n  element: ReactElement,\n) {\n  const mixedRef = element.ref;\n  if (\n    mixedRef !== null &&\n    typeof mixedRef !== 'function' &&\n    typeof mixedRef !== 'object'\n  ) {\n    if (__DEV__) {\n      // TODO: Clean this up once we turn on the string ref warning for\n      // everyone, because the strict mode case will no longer be relevant\n      if (\n        (returnFiber.mode & StrictLegacyMode || warnAboutStringRefs) &&\n        // We warn in ReactElement.js if owner and self are equal for string refs\n        // because these cannot be automatically converted to an arrow function\n        // using a codemod. Therefore, we don't have to warn about string refs again.\n        !(\n          element._owner &&\n          element._self &&\n          element._owner.stateNode !== element._self\n        )\n      ) {\n        const componentName =\n          getComponentNameFromFiber(returnFiber) || 'Component';\n        if (!didWarnAboutStringRefs[componentName]) {\n          if (warnAboutStringRefs) {\n            console.error(\n              'Component \"%s\" contains the string ref \"%s\". Support for string refs ' +\n                'will be removed in a future major release. We recommend using ' +\n                'useRef() or createRef() instead. ' +\n                'Learn more about using refs safely here: ' +\n                'https://reactjs.org/link/strict-mode-string-ref',\n              componentName,\n              mixedRef,\n            );\n          } else {\n            console.error(\n              'A string ref, \"%s\", has been found within a strict mode tree. ' +\n                'String refs are a source of potential bugs and should be avoided. ' +\n                'We recommend using useRef() or createRef() instead. ' +\n                'Learn more about using refs safely here: ' +\n                'https://reactjs.org/link/strict-mode-string-ref',\n              mixedRef,\n            );\n          }\n          didWarnAboutStringRefs[componentName] = true;\n        }\n      }\n    }\n\n    if (element._owner) {\n      const owner: ?Fiber = (element._owner: any);\n      let inst;\n      if (owner) {\n        const ownerFiber = ((owner: any): Fiber);\n        invariant(\n          ownerFiber.tag === ClassComponent,\n          'Function components cannot have string refs. ' +\n            'We recommend using useRef() instead. ' +\n            'Learn more about using refs safely here: ' +\n            'https://reactjs.org/link/strict-mode-string-ref',\n        );\n        inst = ownerFiber.stateNode;\n      }\n      invariant(\n        inst,\n        'Missing owner for string ref %s. This error is likely caused by a ' +\n          'bug in React. Please file an issue.',\n        mixedRef,\n      );\n      const stringRef = '' + mixedRef;\n      // Check if previous string ref matches new string ref\n      if (\n        current !== null &&\n        current.ref !== null &&\n        typeof current.ref === 'function' &&\n        current.ref._stringRef === stringRef\n      ) {\n        return current.ref;\n      }\n      const ref = function(value) {\n        let refs = inst.refs;\n        if (refs === emptyRefsObject) {\n          // This is a lazy pooled frozen object, so we need to initialize.\n          refs = inst.refs = {};\n        }\n        if (value === null) {\n          delete refs[stringRef];\n        } else {\n          refs[stringRef] = value;\n        }\n      };\n      ref._stringRef = stringRef;\n      return ref;\n    } else {\n      invariant(\n        typeof mixedRef === 'string',\n        'Expected ref to be a function, a string, an object returned by React.createRef(), or null.',\n      );\n      invariant(\n        element._owner,\n        'Element ref was specified as a string (%s) but no owner was set. This could happen for one of' +\n          ' the following reasons:\\n' +\n          '1. You may be adding a ref to a function component\\n' +\n          \"2. You may be adding a ref to a component that was not created inside a component's render method\\n\" +\n          '3. You have multiple copies of React loaded\\n' +\n          'See https://reactjs.org/link/refs-must-have-owner for more information.',\n        mixedRef,\n      );\n    }\n  }\n  return mixedRef;\n}\n\nfunction throwOnInvalidObjectType(returnFiber: Fiber, newChild: Object) {\n  const childString = Object.prototype.toString.call(newChild);\n  invariant(\n    false,\n    'Objects are not valid as a React child (found: %s). ' +\n      'If you meant to render a collection of children, use an array ' +\n      'instead.',\n    childString === '[object Object]'\n      ? 'object with keys {' + Object.keys(newChild).join(', ') + '}'\n      : childString,\n  );\n}\n\nfunction warnOnFunctionType(returnFiber: Fiber) {\n  if (__DEV__) {\n    const componentName = getComponentNameFromFiber(returnFiber) || 'Component';\n\n    if (ownerHasFunctionTypeWarning[componentName]) {\n      return;\n    }\n    ownerHasFunctionTypeWarning[componentName] = true;\n\n    console.error(\n      'Functions are not valid as a React child. This may happen if ' +\n        'you return a Component instead of <Component /> from render. ' +\n        'Or maybe you meant to call this function rather than return it.',\n    );\n  }\n}\n\nfunction resolveLazy(lazyType) {\n  const payload = lazyType._payload;\n  const init = lazyType._init;\n  return init(payload);\n}\n\n// This wrapper function exists because I expect to clone the code in each path\n// to be able to optimize each path individually by branching early. This needs\n// a compiler or we can do it manually. Helpers that don't need this branching\n// live outside of this function.\nfunction ChildReconciler(shouldTrackSideEffects) {\n  function deleteChild(returnFiber: Fiber, childToDelete: Fiber): void {\n    if (!shouldTrackSideEffects) {\n      // Noop.\n      return;\n    }\n    const deletions = returnFiber.deletions;\n    if (deletions === null) {\n      returnFiber.deletions = [childToDelete];\n      returnFiber.flags |= ChildDeletion;\n    } else {\n      deletions.push(childToDelete);\n    }\n  }\n\n  function deleteRemainingChildren(\n    returnFiber: Fiber,\n    currentFirstChild: Fiber | null,\n  ): null {\n    if (!shouldTrackSideEffects) {\n      // Noop.\n      return null;\n    }\n\n    // TODO: For the shouldClone case, this could be micro-optimized a bit by\n    // assuming that after the first child we've already added everything.\n    let childToDelete = currentFirstChild;\n    while (childToDelete !== null) {\n      deleteChild(returnFiber, childToDelete);\n      childToDelete = childToDelete.sibling;\n    }\n    return null;\n  }\n\n  function mapRemainingChildren(\n    returnFiber: Fiber,\n    currentFirstChild: Fiber,\n  ): Map<string | number, Fiber> {\n    // Add the remaining children to a temporary map so that we can find them by\n    // keys quickly. Implicit (null) keys get added to this set with their index\n    // instead.\n    const existingChildren: Map<string | number, Fiber> = new Map();\n\n    let existingChild = currentFirstChild;\n    while (existingChild !== null) {\n      if (existingChild.key !== null) {\n        existingChildren.set(existingChild.key, existingChild);\n      } else {\n        existingChildren.set(existingChild.index, existingChild);\n      }\n      existingChild = existingChild.sibling;\n    }\n    return existingChildren;\n  }\n\n  function useFiber(fiber: Fiber, pendingProps: mixed): Fiber {\n    // We currently set sibling to null and index to 0 here because it is easy\n    // to forget to do before returning it. E.g. for the single child case.\n    const clone = createWorkInProgress(fiber, pendingProps);\n    clone.index = 0;\n    clone.sibling = null;\n    return clone;\n  }\n\n  function placeChild(\n    newFiber: Fiber,\n    lastPlacedIndex: number,\n    newIndex: number,\n  ): number {\n    newFiber.index = newIndex;\n    if (!shouldTrackSideEffects) {\n      // Noop.\n      return lastPlacedIndex;\n    }\n    const current = newFiber.alternate;\n    if (current !== null) {\n      const oldIndex = current.index;\n      if (oldIndex < lastPlacedIndex) {\n        // This is a move.\n        newFiber.flags |= Placement;\n        return lastPlacedIndex;\n      } else {\n        // This item can stay in place.\n        return oldIndex;\n      }\n    } else {\n      // This is an insertion.\n      newFiber.flags |= Placement;\n      return lastPlacedIndex;\n    }\n  }\n\n  function placeSingleChild(newFiber: Fiber): Fiber {\n    // This is simpler for the single child case. We only need to do a\n    // placement for inserting new children.\n    if (shouldTrackSideEffects && newFiber.alternate === null) {\n      newFiber.flags |= Placement;\n    }\n    return newFiber;\n  }\n\n  function updateTextNode(\n    returnFiber: Fiber,\n    current: Fiber | null,\n    textContent: string,\n    lanes: Lanes,\n  ) {\n    if (current === null || current.tag !== HostText) {\n      // Insert\n      const created = createFiberFromText(textContent, returnFiber.mode, lanes);\n      created.return = returnFiber;\n      return created;\n    } else {\n      // Update\n      const existing = useFiber(current, textContent);\n      existing.return = returnFiber;\n      return existing;\n    }\n  }\n\n  function updateElement(\n    returnFiber: Fiber,\n    current: Fiber | null,\n    element: ReactElement,\n    lanes: Lanes,\n  ): Fiber {\n    const elementType = element.type;\n    if (elementType === REACT_FRAGMENT_TYPE) {\n      return updateFragment(\n        returnFiber,\n        current,\n        element.props.children,\n        lanes,\n        element.key,\n      );\n    }\n    if (current !== null) {\n      if (\n        current.elementType === elementType ||\n        // Keep this check inline so it only runs on the false path:\n        (__DEV__\n          ? isCompatibleFamilyForHotReloading(current, element)\n          : false) ||\n        // Lazy types should reconcile their resolved type.\n        // We need to do this after the Hot Reloading check above,\n        // because hot reloading has different semantics than prod because\n        // it doesn't resuspend. So we can't let the call below suspend.\n        (enableLazyElements &&\n          typeof elementType === 'object' &&\n          elementType !== null &&\n          elementType.$$typeof === REACT_LAZY_TYPE &&\n          resolveLazy(elementType) === current.type)\n      ) {\n        // Move based on index\n        const existing = useFiber(current, element.props);\n        existing.ref = coerceRef(returnFiber, current, element);\n        existing.return = returnFiber;\n        if (__DEV__) {\n          existing._debugSource = element._source;\n          existing._debugOwner = element._owner;\n        }\n        return existing;\n      }\n    }\n    // Insert\n    const created = createFiberFromElement(element, returnFiber.mode, lanes);\n    created.ref = coerceRef(returnFiber, current, element);\n    created.return = returnFiber;\n    return created;\n  }\n\n  function updatePortal(\n    returnFiber: Fiber,\n    current: Fiber | null,\n    portal: ReactPortal,\n    lanes: Lanes,\n  ): Fiber {\n    if (\n      current === null ||\n      current.tag !== HostPortal ||\n      current.stateNode.containerInfo !== portal.containerInfo ||\n      current.stateNode.implementation !== portal.implementation\n    ) {\n      // Insert\n      const created = createFiberFromPortal(portal, returnFiber.mode, lanes);\n      created.return = returnFiber;\n      return created;\n    } else {\n      // Update\n      const existing = useFiber(current, portal.children || []);\n      existing.return = returnFiber;\n      return existing;\n    }\n  }\n\n  function updateFragment(\n    returnFiber: Fiber,\n    current: Fiber | null,\n    fragment: Iterable<*>,\n    lanes: Lanes,\n    key: null | string,\n  ): Fiber {\n    if (current === null || current.tag !== Fragment) {\n      // Insert\n      const created = createFiberFromFragment(\n        fragment,\n        returnFiber.mode,\n        lanes,\n        key,\n      );\n      created.return = returnFiber;\n      return created;\n    } else {\n      // Update\n      const existing = useFiber(current, fragment);\n      existing.return = returnFiber;\n      return existing;\n    }\n  }\n\n  function createChild(\n    returnFiber: Fiber,\n    newChild: any,\n    lanes: Lanes,\n  ): Fiber | null {\n    if (typeof newChild === 'string' || typeof newChild === 'number') {\n      // Text nodes don't have keys. If the previous node is implicitly keyed\n      // we can continue to replace it without aborting even if it is not a text\n      // node.\n      const created = createFiberFromText(\n        '' + newChild,\n        returnFiber.mode,\n        lanes,\n      );\n      created.return = returnFiber;\n      return created;\n    }\n\n    if (typeof newChild === 'object' && newChild !== null) {\n      switch (newChild.$$typeof) {\n        case REACT_ELEMENT_TYPE: {\n          const created = createFiberFromElement(\n            newChild,\n            returnFiber.mode,\n            lanes,\n          );\n          created.ref = coerceRef(returnFiber, null, newChild);\n          created.return = returnFiber;\n          return created;\n        }\n        case REACT_PORTAL_TYPE: {\n          const created = createFiberFromPortal(\n            newChild,\n            returnFiber.mode,\n            lanes,\n          );\n          created.return = returnFiber;\n          return created;\n        }\n        case REACT_LAZY_TYPE: {\n          if (enableLazyElements) {\n            const payload = newChild._payload;\n            const init = newChild._init;\n            return createChild(returnFiber, init(payload), lanes);\n          }\n        }\n      }\n\n      if (isArray(newChild) || getIteratorFn(newChild)) {\n        const created = createFiberFromFragment(\n          newChild,\n          returnFiber.mode,\n          lanes,\n          null,\n        );\n        created.return = returnFiber;\n        return created;\n      }\n\n      throwOnInvalidObjectType(returnFiber, newChild);\n    }\n\n    if (__DEV__) {\n      if (typeof newChild === 'function') {\n        warnOnFunctionType(returnFiber);\n      }\n    }\n\n    return null;\n  }\n\n  function updateSlot(\n    returnFiber: Fiber,\n    oldFiber: Fiber | null,\n    newChild: any,\n    lanes: Lanes,\n  ): Fiber | null {\n    // Update the fiber if the keys match, otherwise return null.\n\n    const key = oldFiber !== null ? oldFiber.key : null;\n\n    if (typeof newChild === 'string' || typeof newChild === 'number') {\n      // Text nodes don't have keys. If the previous node is implicitly keyed\n      // we can continue to replace it without aborting even if it is not a text\n      // node.\n      if (key !== null) {\n        return null;\n      }\n      return updateTextNode(returnFiber, oldFiber, '' + newChild, lanes);\n    }\n\n    if (typeof newChild === 'object' && newChild !== null) {\n      switch (newChild.$$typeof) {\n        case REACT_ELEMENT_TYPE: {\n          if (newChild.key === key) {\n            return updateElement(returnFiber, oldFiber, newChild, lanes);\n          } else {\n            return null;\n          }\n        }\n        case REACT_PORTAL_TYPE: {\n          if (newChild.key === key) {\n            return updatePortal(returnFiber, oldFiber, newChild, lanes);\n          } else {\n            return null;\n          }\n        }\n        case REACT_LAZY_TYPE: {\n          if (enableLazyElements) {\n            const payload = newChild._payload;\n            const init = newChild._init;\n            return updateSlot(returnFiber, oldFiber, init(payload), lanes);\n          }\n        }\n      }\n\n      if (isArray(newChild) || getIteratorFn(newChild)) {\n        if (key !== null) {\n          return null;\n        }\n\n        return updateFragment(returnFiber, oldFiber, newChild, lanes, null);\n      }\n\n      throwOnInvalidObjectType(returnFiber, newChild);\n    }\n\n    if (__DEV__) {\n      if (typeof newChild === 'function') {\n        warnOnFunctionType(returnFiber);\n      }\n    }\n\n    return null;\n  }\n\n  function updateFromMap(\n    existingChildren: Map<string | number, Fiber>,\n    returnFiber: Fiber,\n    newIdx: number,\n    newChild: any,\n    lanes: Lanes,\n  ): Fiber | null {\n    if (typeof newChild === 'string' || typeof newChild === 'number') {\n      // Text nodes don't have keys, so we neither have to check the old nor\n      // new node for the key. If both are text nodes, they match.\n      const matchedFiber = existingChildren.get(newIdx) || null;\n      return updateTextNode(returnFiber, matchedFiber, '' + newChild, lanes);\n    }\n\n    if (typeof newChild === 'object' && newChild !== null) {\n      switch (newChild.$$typeof) {\n        case REACT_ELEMENT_TYPE: {\n          const matchedFiber =\n            existingChildren.get(\n              newChild.key === null ? newIdx : newChild.key,\n            ) || null;\n          return updateElement(returnFiber, matchedFiber, newChild, lanes);\n        }\n        case REACT_PORTAL_TYPE: {\n          const matchedFiber =\n            existingChildren.get(\n              newChild.key === null ? newIdx : newChild.key,\n            ) || null;\n          return updatePortal(returnFiber, matchedFiber, newChild, lanes);\n        }\n        case REACT_LAZY_TYPE:\n          if (enableLazyElements) {\n            const payload = newChild._payload;\n            const init = newChild._init;\n            return updateFromMap(\n              existingChildren,\n              returnFiber,\n              newIdx,\n              init(payload),\n              lanes,\n            );\n          }\n      }\n\n      if (isArray(newChild) || getIteratorFn(newChild)) {\n        const matchedFiber = existingChildren.get(newIdx) || null;\n        return updateFragment(returnFiber, matchedFiber, newChild, lanes, null);\n      }\n\n      throwOnInvalidObjectType(returnFiber, newChild);\n    }\n\n    if (__DEV__) {\n      if (typeof newChild === 'function') {\n        warnOnFunctionType(returnFiber);\n      }\n    }\n\n    return null;\n  }\n\n  /**\n   * Warns if there is a duplicate or missing key\n   */\n  function warnOnInvalidKey(\n    child: mixed,\n    knownKeys: Set<string> | null,\n    returnFiber: Fiber,\n  ): Set<string> | null {\n    if (__DEV__) {\n      if (typeof child !== 'object' || child === null) {\n        return knownKeys;\n      }\n      switch (child.$$typeof) {\n        case REACT_ELEMENT_TYPE:\n        case REACT_PORTAL_TYPE:\n          warnForMissingKey(child, returnFiber);\n          const key = child.key;\n          if (typeof key !== 'string') {\n            break;\n          }\n          if (knownKeys === null) {\n            knownKeys = new Set();\n            knownKeys.add(key);\n            break;\n          }\n          if (!knownKeys.has(key)) {\n            knownKeys.add(key);\n            break;\n          }\n          console.error(\n            'Encountered two children with the same key, `%s`. ' +\n              'Keys should be unique so that components maintain their identity ' +\n              'across updates. Non-unique keys may cause children to be ' +\n              'duplicated and/or omitted — the behavior is unsupported and ' +\n              'could change in a future version.',\n            key,\n          );\n          break;\n        case REACT_LAZY_TYPE:\n          if (enableLazyElements) {\n            const payload = child._payload;\n            const init = (child._init: any);\n            warnOnInvalidKey(init(payload), knownKeys, returnFiber);\n            break;\n          }\n        // We intentionally fallthrough here if enableLazyElements is not on.\n        // eslint-disable-next-lined no-fallthrough\n        default:\n          break;\n      }\n    }\n    return knownKeys;\n  }\n\n  function reconcileChildrenArray(\n    returnFiber: Fiber,\n    currentFirstChild: Fiber | null,\n    newChildren: Array<*>,\n    lanes: Lanes,\n  ): Fiber | null {\n    // This algorithm can't optimize by searching from both ends since we\n    // don't have backpointers on fibers. I'm trying to see how far we can get\n    // with that model. If it ends up not being worth the tradeoffs, we can\n    // add it later.\n\n    // Even with a two ended optimization, we'd want to optimize for the case\n    // where there are few changes and brute force the comparison instead of\n    // going for the Map. It'd like to explore hitting that path first in\n    // forward-only mode and only go for the Map once we notice that we need\n    // lots of look ahead. This doesn't handle reversal as well as two ended\n    // search but that's unusual. Besides, for the two ended optimization to\n    // work on Iterables, we'd need to copy the whole set.\n\n    // In this first iteration, we'll just live with hitting the bad case\n    // (adding everything to a Map) in for every insert/move.\n\n    // If you change this code, also update reconcileChildrenIterator() which\n    // uses the same algorithm.\n\n    if (__DEV__) {\n      // First, validate keys.\n      let knownKeys = null;\n      for (let i = 0; i < newChildren.length; i++) {\n        const child = newChildren[i];\n        knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);\n      }\n    }\n\n    let resultingFirstChild: Fiber | null = null;\n    let previousNewFiber: Fiber | null = null;\n\n    let oldFiber = currentFirstChild;\n    let lastPlacedIndex = 0;\n    let newIdx = 0;\n    let nextOldFiber = null;\n    for (; oldFiber !== null && newIdx < newChildren.length; newIdx++) {\n      if (oldFiber.index > newIdx) {\n        nextOldFiber = oldFiber;\n        oldFiber = null;\n      } else {\n        nextOldFiber = oldFiber.sibling;\n      }\n      const newFiber = updateSlot(\n        returnFiber,\n        oldFiber,\n        newChildren[newIdx],\n        lanes,\n      );\n      if (newFiber === null) {\n        // TODO: This breaks on empty slots like null children. That's\n        // unfortunate because it triggers the slow path all the time. We need\n        // a better way to communicate whether this was a miss or null,\n        // boolean, undefined, etc.\n        if (oldFiber === null) {\n          oldFiber = nextOldFiber;\n        }\n        break;\n      }\n      if (shouldTrackSideEffects) {\n        if (oldFiber && newFiber.alternate === null) {\n          // We matched the slot, but we didn't reuse the existing fiber, so we\n          // need to delete the existing child.\n          deleteChild(returnFiber, oldFiber);\n        }\n      }\n      lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);\n      if (previousNewFiber === null) {\n        // TODO: Move out of the loop. This only happens for the first run.\n        resultingFirstChild = newFiber;\n      } else {\n        // TODO: Defer siblings if we're not at the right index for this slot.\n        // I.e. if we had null values before, then we want to defer this\n        // for each null value. However, we also don't want to call updateSlot\n        // with the previous one.\n        previousNewFiber.sibling = newFiber;\n      }\n      previousNewFiber = newFiber;\n      oldFiber = nextOldFiber;\n    }\n\n    if (newIdx === newChildren.length) {\n      // We've reached the end of the new children. We can delete the rest.\n      deleteRemainingChildren(returnFiber, oldFiber);\n      return resultingFirstChild;\n    }\n\n    if (oldFiber === null) {\n      // If we don't have any more existing children we can choose a fast path\n      // since the rest will all be insertions.\n      for (; newIdx < newChildren.length; newIdx++) {\n        const newFiber = createChild(returnFiber, newChildren[newIdx], lanes);\n        if (newFiber === null) {\n          continue;\n        }\n        lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);\n        if (previousNewFiber === null) {\n          // TODO: Move out of the loop. This only happens for the first run.\n          resultingFirstChild = newFiber;\n        } else {\n          previousNewFiber.sibling = newFiber;\n        }\n        previousNewFiber = newFiber;\n      }\n      return resultingFirstChild;\n    }\n\n    // Add all children to a key map for quick lookups.\n    const existingChildren = mapRemainingChildren(returnFiber, oldFiber);\n\n    // Keep scanning and use the map to restore deleted items as moves.\n    for (; newIdx < newChildren.length; newIdx++) {\n      const newFiber = updateFromMap(\n        existingChildren,\n        returnFiber,\n        newIdx,\n        newChildren[newIdx],\n        lanes,\n      );\n      if (newFiber !== null) {\n        if (shouldTrackSideEffects) {\n          if (newFiber.alternate !== null) {\n            // The new fiber is a work in progress, but if there exists a\n            // current, that means that we reused the fiber. We need to delete\n            // it from the child list so that we don't add it to the deletion\n            // list.\n            existingChildren.delete(\n              newFiber.key === null ? newIdx : newFiber.key,\n            );\n          }\n        }\n        lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);\n        if (previousNewFiber === null) {\n          resultingFirstChild = newFiber;\n        } else {\n          previousNewFiber.sibling = newFiber;\n        }\n        previousNewFiber = newFiber;\n      }\n    }\n\n    if (shouldTrackSideEffects) {\n      // Any existing children that weren't consumed above were deleted. We need\n      // to add them to the deletion list.\n      existingChildren.forEach(child => deleteChild(returnFiber, child));\n    }\n\n    return resultingFirstChild;\n  }\n\n  function reconcileChildrenIterator(\n    returnFiber: Fiber,\n    currentFirstChild: Fiber | null,\n    newChildrenIterable: Iterable<*>,\n    lanes: Lanes,\n  ): Fiber | null {\n    // This is the same implementation as reconcileChildrenArray(),\n    // but using the iterator instead.\n\n    const iteratorFn = getIteratorFn(newChildrenIterable);\n    invariant(\n      typeof iteratorFn === 'function',\n      'An object is not an iterable. This error is likely caused by a bug in ' +\n        'React. Please file an issue.',\n    );\n\n    if (__DEV__) {\n      // We don't support rendering Generators because it's a mutation.\n      // See https://github.com/facebook/react/issues/12995\n      if (\n        typeof Symbol === 'function' &&\n        // $FlowFixMe Flow doesn't know about toStringTag\n        newChildrenIterable[Symbol.toStringTag] === 'Generator'\n      ) {\n        if (!didWarnAboutGenerators) {\n          console.error(\n            'Using Generators as children is unsupported and will likely yield ' +\n              'unexpected results because enumerating a generator mutates it. ' +\n              'You may convert it to an array with `Array.from()` or the ' +\n              '`[...spread]` operator before rendering. Keep in mind ' +\n              'you might need to polyfill these features for older browsers.',\n          );\n        }\n        didWarnAboutGenerators = true;\n      }\n\n      // Warn about using Maps as children\n      if ((newChildrenIterable: any).entries === iteratorFn) {\n        if (!didWarnAboutMaps) {\n          console.error(\n            'Using Maps as children is not supported. ' +\n              'Use an array of keyed ReactElements instead.',\n          );\n        }\n        didWarnAboutMaps = true;\n      }\n\n      // First, validate keys.\n      // We'll get a different iterator later for the main pass.\n      const newChildren = iteratorFn.call(newChildrenIterable);\n      if (newChildren) {\n        let knownKeys = null;\n        let step = newChildren.next();\n        for (; !step.done; step = newChildren.next()) {\n          const child = step.value;\n          knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);\n        }\n      }\n    }\n\n    const newChildren = iteratorFn.call(newChildrenIterable);\n    invariant(newChildren != null, 'An iterable object provided no iterator.');\n\n    let resultingFirstChild: Fiber | null = null;\n    let previousNewFiber: Fiber | null = null;\n\n    let oldFiber = currentFirstChild;\n    let lastPlacedIndex = 0;\n    let newIdx = 0;\n    let nextOldFiber = null;\n\n    let step = newChildren.next();\n    for (\n      ;\n      oldFiber !== null && !step.done;\n      newIdx++, step = newChildren.next()\n    ) {\n      if (oldFiber.index > newIdx) {\n        nextOldFiber = oldFiber;\n        oldFiber = null;\n      } else {\n        nextOldFiber = oldFiber.sibling;\n      }\n      const newFiber = updateSlot(returnFiber, oldFiber, step.value, lanes);\n      if (newFiber === null) {\n        // TODO: This breaks on empty slots like null children. That's\n        // unfortunate because it triggers the slow path all the time. We need\n        // a better way to communicate whether this was a miss or null,\n        // boolean, undefined, etc.\n        if (oldFiber === null) {\n          oldFiber = nextOldFiber;\n        }\n        break;\n      }\n      if (shouldTrackSideEffects) {\n        if (oldFiber && newFiber.alternate === null) {\n          // We matched the slot, but we didn't reuse the existing fiber, so we\n          // need to delete the existing child.\n          deleteChild(returnFiber, oldFiber);\n        }\n      }\n      lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);\n      if (previousNewFiber === null) {\n        // TODO: Move out of the loop. This only happens for the first run.\n        resultingFirstChild = newFiber;\n      } else {\n        // TODO: Defer siblings if we're not at the right index for this slot.\n        // I.e. if we had null values before, then we want to defer this\n        // for each null value. However, we also don't want to call updateSlot\n        // with the previous one.\n        previousNewFiber.sibling = newFiber;\n      }\n      previousNewFiber = newFiber;\n      oldFiber = nextOldFiber;\n    }\n\n    if (step.done) {\n      // We've reached the end of the new children. We can delete the rest.\n      deleteRemainingChildren(returnFiber, oldFiber);\n      return resultingFirstChild;\n    }\n\n    if (oldFiber === null) {\n      // If we don't have any more existing children we can choose a fast path\n      // since the rest will all be insertions.\n      for (; !step.done; newIdx++, step = newChildren.next()) {\n        const newFiber = createChild(returnFiber, step.value, lanes);\n        if (newFiber === null) {\n          continue;\n        }\n        lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);\n        if (previousNewFiber === null) {\n          // TODO: Move out of the loop. This only happens for the first run.\n          resultingFirstChild = newFiber;\n        } else {\n          previousNewFiber.sibling = newFiber;\n        }\n        previousNewFiber = newFiber;\n      }\n      return resultingFirstChild;\n    }\n\n    // Add all children to a key map for quick lookups.\n    const existingChildren = mapRemainingChildren(returnFiber, oldFiber);\n\n    // Keep scanning and use the map to restore deleted items as moves.\n    for (; !step.done; newIdx++, step = newChildren.next()) {\n      const newFiber = updateFromMap(\n        existingChildren,\n        returnFiber,\n        newIdx,\n        step.value,\n        lanes,\n      );\n      if (newFiber !== null) {\n        if (shouldTrackSideEffects) {\n          if (newFiber.alternate !== null) {\n            // The new fiber is a work in progress, but if there exists a\n            // current, that means that we reused the fiber. We need to delete\n            // it from the child list so that we don't add it to the deletion\n            // list.\n            existingChildren.delete(\n              newFiber.key === null ? newIdx : newFiber.key,\n            );\n          }\n        }\n        lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);\n        if (previousNewFiber === null) {\n          resultingFirstChild = newFiber;\n        } else {\n          previousNewFiber.sibling = newFiber;\n        }\n        previousNewFiber = newFiber;\n      }\n    }\n\n    if (shouldTrackSideEffects) {\n      // Any existing children that weren't consumed above were deleted. We need\n      // to add them to the deletion list.\n      existingChildren.forEach(child => deleteChild(returnFiber, child));\n    }\n\n    return resultingFirstChild;\n  }\n\n  function reconcileSingleTextNode(\n    returnFiber: Fiber,\n    currentFirstChild: Fiber | null,\n    textContent: string,\n    lanes: Lanes,\n  ): Fiber {\n    // There's no need to check for keys on text nodes since we don't have a\n    // way to define them.\n    if (currentFirstChild !== null && currentFirstChild.tag === HostText) {\n      // We already have an existing node so let's just update it and delete\n      // the rest.\n      deleteRemainingChildren(returnFiber, currentFirstChild.sibling);\n      const existing = useFiber(currentFirstChild, textContent);\n      existing.return = returnFiber;\n      return existing;\n    }\n    // The existing first child is not a text node so we need to create one\n    // and delete the existing ones.\n    deleteRemainingChildren(returnFiber, currentFirstChild);\n    const created = createFiberFromText(textContent, returnFiber.mode, lanes);\n    created.return = returnFiber;\n    return created;\n  }\n\n  function reconcileSingleElement(\n    returnFiber: Fiber,\n    currentFirstChild: Fiber | null,\n    element: ReactElement,\n    lanes: Lanes,\n  ): Fiber {\n    const key = element.key;\n    let child = currentFirstChild;\n    while (child !== null) {\n      // TODO: If key === null and child.key === null, then this only applies to\n      // the first item in the list.\n      if (child.key === key) {\n        const elementType = element.type;\n        if (elementType === REACT_FRAGMENT_TYPE) {\n          if (child.tag === Fragment) {\n            deleteRemainingChildren(returnFiber, child.sibling);\n            const existing = useFiber(child, element.props.children);\n            existing.return = returnFiber;\n            if (__DEV__) {\n              existing._debugSource = element._source;\n              existing._debugOwner = element._owner;\n            }\n            return existing;\n          }\n        } else {\n          if (\n            child.elementType === elementType ||\n            // Keep this check inline so it only runs on the false path:\n            (__DEV__\n              ? isCompatibleFamilyForHotReloading(child, element)\n              : false) ||\n            // Lazy types should reconcile their resolved type.\n            // We need to do this after the Hot Reloading check above,\n            // because hot reloading has different semantics than prod because\n            // it doesn't resuspend. So we can't let the call below suspend.\n            (enableLazyElements &&\n              typeof elementType === 'object' &&\n              elementType !== null &&\n              elementType.$$typeof === REACT_LAZY_TYPE &&\n              resolveLazy(elementType) === child.type)\n          ) {\n            deleteRemainingChildren(returnFiber, child.sibling);\n            const existing = useFiber(child, element.props);\n            existing.ref = coerceRef(returnFiber, child, element);\n            existing.return = returnFiber;\n            if (__DEV__) {\n              existing._debugSource = element._source;\n              existing._debugOwner = element._owner;\n            }\n            return existing;\n          }\n        }\n        // Didn't match.\n        deleteRemainingChildren(returnFiber, child);\n        break;\n      } else {\n        deleteChild(returnFiber, child);\n      }\n      child = child.sibling;\n    }\n\n    if (element.type === REACT_FRAGMENT_TYPE) {\n      const created = createFiberFromFragment(\n        element.props.children,\n        returnFiber.mode,\n        lanes,\n        element.key,\n      );\n      created.return = returnFiber;\n      return created;\n    } else {\n      const created = createFiberFromElement(element, returnFiber.mode, lanes);\n      created.ref = coerceRef(returnFiber, currentFirstChild, element);\n      created.return = returnFiber;\n      return created;\n    }\n  }\n\n  function reconcileSinglePortal(\n    returnFiber: Fiber,\n    currentFirstChild: Fiber | null,\n    portal: ReactPortal,\n    lanes: Lanes,\n  ): Fiber {\n    const key = portal.key;\n    let child = currentFirstChild;\n    while (child !== null) {\n      // TODO: If key === null and child.key === null, then this only applies to\n      // the first item in the list.\n      if (child.key === key) {\n        if (\n          child.tag === HostPortal &&\n          child.stateNode.containerInfo === portal.containerInfo &&\n          child.stateNode.implementation === portal.implementation\n        ) {\n          deleteRemainingChildren(returnFiber, child.sibling);\n          const existing = useFiber(child, portal.children || []);\n          existing.return = returnFiber;\n          return existing;\n        } else {\n          deleteRemainingChildren(returnFiber, child);\n          break;\n        }\n      } else {\n        deleteChild(returnFiber, child);\n      }\n      child = child.sibling;\n    }\n\n    const created = createFiberFromPortal(portal, returnFiber.mode, lanes);\n    created.return = returnFiber;\n    return created;\n  }\n\n  // This API will tag the children with the side-effect of the reconciliation\n  // itself. They will be added to the side-effect list as we pass through the\n  // children and the parent.\n  function reconcileChildFibers(\n    returnFiber: Fiber,\n    currentFirstChild: Fiber | null,\n    newChild: any,\n    lanes: Lanes,\n  ): Fiber | null {\n    // This function is not recursive.\n    // If the top level item is an array, we treat it as a set of children,\n    // not as a fragment. Nested arrays on the other hand will be treated as\n    // fragment nodes. Recursion happens at the normal flow.\n\n    // Handle top level unkeyed fragments as if they were arrays.\n    // This leads to an ambiguity between <>{[...]}</> and <>...</>.\n    // We treat the ambiguous cases above the same.\n    const isUnkeyedTopLevelFragment =\n      typeof newChild === 'object' &&\n      newChild !== null &&\n      newChild.type === REACT_FRAGMENT_TYPE &&\n      newChild.key === null;\n    if (isUnkeyedTopLevelFragment) {\n      newChild = newChild.props.children;\n    }\n\n    // Handle object types\n    if (typeof newChild === 'object' && newChild !== null) {\n      switch (newChild.$$typeof) {\n        case REACT_ELEMENT_TYPE:\n          return placeSingleChild(\n            reconcileSingleElement(\n              returnFiber,\n              currentFirstChild,\n              newChild,\n              lanes,\n            ),\n          );\n        case REACT_PORTAL_TYPE:\n          return placeSingleChild(\n            reconcileSinglePortal(\n              returnFiber,\n              currentFirstChild,\n              newChild,\n              lanes,\n            ),\n          );\n        case REACT_LAZY_TYPE:\n          if (enableLazyElements) {\n            const payload = newChild._payload;\n            const init = newChild._init;\n            // TODO: This function is supposed to be non-recursive.\n            return reconcileChildFibers(\n              returnFiber,\n              currentFirstChild,\n              init(payload),\n              lanes,\n            );\n          }\n      }\n\n      if (isArray(newChild)) {\n        return reconcileChildrenArray(\n          returnFiber,\n          currentFirstChild,\n          newChild,\n          lanes,\n        );\n      }\n\n      if (getIteratorFn(newChild)) {\n        return reconcileChildrenIterator(\n          returnFiber,\n          currentFirstChild,\n          newChild,\n          lanes,\n        );\n      }\n\n      throwOnInvalidObjectType(returnFiber, newChild);\n    }\n\n    if (typeof newChild === 'string' || typeof newChild === 'number') {\n      return placeSingleChild(\n        reconcileSingleTextNode(\n          returnFiber,\n          currentFirstChild,\n          '' + newChild,\n          lanes,\n        ),\n      );\n    }\n\n    if (__DEV__) {\n      if (typeof newChild === 'function') {\n        warnOnFunctionType(returnFiber);\n      }\n    }\n\n    // Remaining cases are all treated as empty.\n    return deleteRemainingChildren(returnFiber, currentFirstChild);\n  }\n\n  return reconcileChildFibers;\n}\n\nexport const reconcileChildFibers = ChildReconciler(true);\nexport const mountChildFibers = ChildReconciler(false);\n\nexport function cloneChildFibers(\n  current: Fiber | null,\n  workInProgress: Fiber,\n): void {\n  invariant(\n    current === null || workInProgress.child === current.child,\n    'Resuming work not yet implemented.',\n  );\n\n  if (workInProgress.child === null) {\n    return;\n  }\n\n  let currentChild = workInProgress.child;\n  let newChild = createWorkInProgress(currentChild, currentChild.pendingProps);\n  workInProgress.child = newChild;\n\n  newChild.return = workInProgress;\n  while (currentChild.sibling !== null) {\n    currentChild = currentChild.sibling;\n    newChild = newChild.sibling = createWorkInProgress(\n      currentChild,\n      currentChild.pendingProps,\n    );\n    newChild.return = workInProgress;\n  }\n  newChild.sibling = null;\n}\n\n// Reset a workInProgress child set to prepare it for a second pass.\nexport function resetChildFibers(workInProgress: Fiber, lanes: Lanes): void {\n  let child = workInProgress.child;\n  while (child !== null) {\n    resetWorkInProgress(child, lanes);\n    child = child.sibling;\n  }\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Fiber} from './ReactInternalTypes';\nimport type {StackCursor} from './ReactFiberStack.old';\nimport type {Container, HostContext} from './ReactFiberHostConfig';\n\nimport invariant from 'shared/invariant';\n\nimport {getChildHostContext, getRootHostContext} from './ReactFiberHostConfig';\nimport {createCursor, push, pop} from './ReactFiberStack.old';\n\ndeclare class NoContextT {}\nconst NO_CONTEXT: NoContextT = ({}: any);\n\nconst contextStackCursor: StackCursor<HostContext | NoContextT> = createCursor(\n  NO_CONTEXT,\n);\nconst contextFiberStackCursor: StackCursor<Fiber | NoContextT> = createCursor(\n  NO_CONTEXT,\n);\nconst rootInstanceStackCursor: StackCursor<\n  Container | NoContextT,\n> = createCursor(NO_CONTEXT);\n\nfunction requiredContext<Value>(c: Value | NoContextT): Value {\n  invariant(\n    c !== NO_CONTEXT,\n    'Expected host context to exist. This error is likely caused by a bug ' +\n      'in React. Please file an issue.',\n  );\n  return (c: any);\n}\n\nfunction getRootHostContainer(): Container {\n  const rootInstance = requiredContext(rootInstanceStackCursor.current);\n  return rootInstance;\n}\n\nfunction pushHostContainer(fiber: Fiber, nextRootInstance: Container) {\n  // Push current root instance onto the stack;\n  // This allows us to reset root when portals are popped.\n  push(rootInstanceStackCursor, nextRootInstance, fiber);\n  // Track the context and the Fiber that provided it.\n  // This enables us to pop only Fibers that provide unique contexts.\n  push(contextFiberStackCursor, fiber, fiber);\n\n  // Finally, we need to push the host context to the stack.\n  // However, we can't just call getRootHostContext() and push it because\n  // we'd have a different number of entries on the stack depending on\n  // whether getRootHostContext() throws somewhere in renderer code or not.\n  // So we push an empty value first. This lets us safely unwind on errors.\n  push(contextStackCursor, NO_CONTEXT, fiber);\n  const nextRootContext = getRootHostContext(nextRootInstance);\n  // Now that we know this function doesn't throw, replace it.\n  pop(contextStackCursor, fiber);\n  push(contextStackCursor, nextRootContext, fiber);\n}\n\nfunction popHostContainer(fiber: Fiber) {\n  pop(contextStackCursor, fiber);\n  pop(contextFiberStackCursor, fiber);\n  pop(rootInstanceStackCursor, fiber);\n}\n\nfunction getHostContext(): HostContext {\n  const context = requiredContext(contextStackCursor.current);\n  return context;\n}\n\nfunction pushHostContext(fiber: Fiber): void {\n  const rootInstance: Container = requiredContext(\n    rootInstanceStackCursor.current,\n  );\n  const context: HostContext = requiredContext(contextStackCursor.current);\n  const nextContext = getChildHostContext(context, fiber.type, rootInstance);\n\n  // Don't push this Fiber's context unless it's unique.\n  if (context === nextContext) {\n    return;\n  }\n\n  // Track the context and the Fiber that provided it.\n  // This enables us to pop only Fibers that provide unique contexts.\n  push(contextFiberStackCursor, fiber, fiber);\n  push(contextStackCursor, nextContext, fiber);\n}\n\nfunction popHostContext(fiber: Fiber): void {\n  // Do not pop unless this Fiber provided the current context.\n  // pushHostContext() only pushes Fibers that provide unique contexts.\n  if (contextFiberStackCursor.current !== fiber) {\n    return;\n  }\n\n  pop(contextStackCursor, fiber);\n  pop(contextFiberStackCursor, fiber);\n}\n\nexport {\n  getHostContext,\n  getRootHostContainer,\n  popHostContainer,\n  popHostContext,\n  pushHostContainer,\n  pushHostContext,\n};\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Fiber} from './ReactInternalTypes';\nimport type {StackCursor} from './ReactFiberStack.old';\n\nimport {createCursor, push, pop} from './ReactFiberStack.old';\n\nexport opaque type SuspenseContext = number;\nexport opaque type SubtreeSuspenseContext: SuspenseContext = number;\nexport opaque type ShallowSuspenseContext: SuspenseContext = number;\n\nconst DefaultSuspenseContext: SuspenseContext = 0b00;\n\n// The Suspense Context is split into two parts. The lower bits is\n// inherited deeply down the subtree. The upper bits only affect\n// this immediate suspense boundary and gets reset each new\n// boundary or suspense list.\nconst SubtreeSuspenseContextMask: SuspenseContext = 0b01;\n\n// Subtree Flags:\n\n// InvisibleParentSuspenseContext indicates that one of our parent Suspense\n// boundaries is not currently showing visible main content.\n// Either because it is already showing a fallback or is not mounted at all.\n// We can use this to determine if it is desirable to trigger a fallback at\n// the parent. If not, then we might need to trigger undesirable boundaries\n// and/or suspend the commit to avoid hiding the parent content.\nexport const InvisibleParentSuspenseContext: SubtreeSuspenseContext = 0b01;\n\n// Shallow Flags:\n\n// ForceSuspenseFallback can be used by SuspenseList to force newly added\n// items into their fallback state during one of the render passes.\nexport const ForceSuspenseFallback: ShallowSuspenseContext = 0b10;\n\nexport const suspenseStackCursor: StackCursor<SuspenseContext> = createCursor(\n  DefaultSuspenseContext,\n);\n\nexport function hasSuspenseContext(\n  parentContext: SuspenseContext,\n  flag: SuspenseContext,\n): boolean {\n  return (parentContext & flag) !== 0;\n}\n\nexport function setDefaultShallowSuspenseContext(\n  parentContext: SuspenseContext,\n): SuspenseContext {\n  return parentContext & SubtreeSuspenseContextMask;\n}\n\nexport function setShallowSuspenseContext(\n  parentContext: SuspenseContext,\n  shallowContext: ShallowSuspenseContext,\n): SuspenseContext {\n  return (parentContext & SubtreeSuspenseContextMask) | shallowContext;\n}\n\nexport function addSubtreeSuspenseContext(\n  parentContext: SuspenseContext,\n  subtreeContext: SubtreeSuspenseContext,\n): SuspenseContext {\n  return parentContext | subtreeContext;\n}\n\nexport function pushSuspenseContext(\n  fiber: Fiber,\n  newContext: SuspenseContext,\n): void {\n  push(suspenseStackCursor, newContext, fiber);\n}\n\nexport function popSuspenseContext(fiber: Fiber): void {\n  pop(suspenseStackCursor, fiber);\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {ReactNodeList, Wakeable} from 'shared/ReactTypes';\nimport type {Fiber} from './ReactInternalTypes';\nimport type {SuspenseInstance} from './ReactFiberHostConfig';\nimport type {Lane} from './ReactFiberLane.old';\nimport {SuspenseComponent, SuspenseListComponent} from './ReactWorkTags';\nimport {NoFlags, DidCapture} from './ReactFiberFlags';\nimport {\n  isSuspenseInstancePending,\n  isSuspenseInstanceFallback,\n} from './ReactFiberHostConfig';\n\nexport type SuspenseProps = {|\n  children?: ReactNodeList,\n  fallback?: ReactNodeList,\n\n  // TODO: Add \"unstable_\" prefix?\n  suspenseCallback?: (Set<Wakeable> | null) => mixed,\n\n  unstable_expectedLoadTime?: number,\n|};\n\n// A null SuspenseState represents an unsuspended normal Suspense boundary.\n// A non-null SuspenseState means that it is blocked for one reason or another.\n// - A non-null dehydrated field means it's blocked pending hydration.\n//   - A non-null dehydrated field can use isSuspenseInstancePending or\n//     isSuspenseInstanceFallback to query the reason for being dehydrated.\n// - A null dehydrated field means it's blocked by something suspending and\n//   we're currently showing a fallback instead.\nexport type SuspenseState = {|\n  // If this boundary is still dehydrated, we store the SuspenseInstance\n  // here to indicate that it is dehydrated (flag) and for quick access\n  // to check things like isSuspenseInstancePending.\n  dehydrated: null | SuspenseInstance,\n  // Represents the lane we should attempt to hydrate a dehydrated boundary at.\n  // OffscreenLane is the default for dehydrated boundaries.\n  // NoLane is the default for normal boundaries, which turns into \"normal\" pri.\n  retryLane: Lane,\n|};\n\nexport type SuspenseListTailMode = 'collapsed' | 'hidden' | void;\n\nexport type SuspenseListRenderState = {|\n  isBackwards: boolean,\n  // The currently rendering tail row.\n  rendering: null | Fiber,\n  // The absolute time when we started rendering the most recent tail row.\n  renderingStartTime: number,\n  // The last of the already rendered children.\n  last: null | Fiber,\n  // Remaining rows on the tail of the list.\n  tail: null | Fiber,\n  // Tail insertions setting.\n  tailMode: SuspenseListTailMode,\n|};\n\nexport function shouldCaptureSuspense(\n  workInProgress: Fiber,\n  hasInvisibleParent: boolean,\n): boolean {\n  // If it was the primary children that just suspended, capture and render the\n  // fallback. Otherwise, don't capture and bubble to the next boundary.\n  const nextState: SuspenseState | null = workInProgress.memoizedState;\n  if (nextState !== null) {\n    if (nextState.dehydrated !== null) {\n      // A dehydrated boundary always captures.\n      return true;\n    }\n    return false;\n  }\n  const props = workInProgress.memoizedProps;\n  // Regular boundaries always capture.\n  if (props.unstable_avoidThisFallback !== true) {\n    return true;\n  }\n  // If it's a boundary we should avoid, then we prefer to bubble up to the\n  // parent boundary if it is currently invisible.\n  if (hasInvisibleParent) {\n    return false;\n  }\n  // If the parent is not able to handle it, we must handle it.\n  return true;\n}\n\nexport function findFirstSuspended(row: Fiber): null | Fiber {\n  let node = row;\n  while (node !== null) {\n    if (node.tag === SuspenseComponent) {\n      const state: SuspenseState | null = node.memoizedState;\n      if (state !== null) {\n        const dehydrated: null | SuspenseInstance = state.dehydrated;\n        if (\n          dehydrated === null ||\n          isSuspenseInstancePending(dehydrated) ||\n          isSuspenseInstanceFallback(dehydrated)\n        ) {\n          return node;\n        }\n      }\n    } else if (\n      node.tag === SuspenseListComponent &&\n      // revealOrder undefined can't be trusted because it don't\n      // keep track of whether it suspended or not.\n      node.memoizedProps.revealOrder !== undefined\n    ) {\n      const didSuspend = (node.flags & DidCapture) !== NoFlags;\n      if (didSuspend) {\n        return node;\n      }\n    } else if (node.child !== null) {\n      node.child.return = node;\n      node = node.child;\n      continue;\n    }\n    if (node === row) {\n      return null;\n    }\n    while (node.sibling === null) {\n      if (node.return === null || node.return === row) {\n        return null;\n      }\n      node = node.return;\n    }\n    node.sibling.return = node.return;\n    node = node.sibling;\n  }\n  return null;\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nexport type HookFlags = number;\n\nexport const NoFlags = /*  */ 0b000;\n\n// Represents whether effect should fire.\nexport const HasEffect = /* */ 0b001;\n\n// Represents the phase in which the effect (not the clean-up) fires.\nexport const Layout = /*    */ 0b010;\nexport const Passive = /*   */ 0b100;\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Fiber} from './ReactInternalTypes';\nimport type {\n  Instance,\n  TextInstance,\n  HydratableInstance,\n  SuspenseInstance,\n  Container,\n  HostContext,\n} from './ReactFiberHostConfig';\nimport type {SuspenseState} from './ReactFiberSuspenseComponent.old';\n\nimport {\n  HostComponent,\n  HostText,\n  HostRoot,\n  SuspenseComponent,\n} from './ReactWorkTags';\nimport {ChildDeletion, Placement, Hydrating} from './ReactFiberFlags';\nimport invariant from 'shared/invariant';\n\nimport {\n  createFiberFromHostInstanceForDeletion,\n  createFiberFromDehydratedFragment,\n} from './ReactFiber.old';\nimport {\n  shouldSetTextContent,\n  supportsHydration,\n  canHydrateInstance,\n  canHydrateTextInstance,\n  canHydrateSuspenseInstance,\n  getNextHydratableSibling,\n  getFirstHydratableChild,\n  hydrateInstance,\n  hydrateTextInstance,\n  hydrateSuspenseInstance,\n  getNextHydratableInstanceAfterSuspenseInstance,\n  shouldDeleteUnhydratedTailInstances,\n  didNotMatchHydratedContainerTextInstance,\n  didNotMatchHydratedTextInstance,\n  didNotHydrateContainerInstance,\n  didNotHydrateInstance,\n  didNotFindHydratableContainerInstance,\n  didNotFindHydratableContainerTextInstance,\n  didNotFindHydratableContainerSuspenseInstance,\n  didNotFindHydratableInstance,\n  didNotFindHydratableTextInstance,\n  didNotFindHydratableSuspenseInstance,\n} from './ReactFiberHostConfig';\nimport {enableSuspenseServerRenderer} from 'shared/ReactFeatureFlags';\nimport {OffscreenLane} from './ReactFiberLane.old';\n\n// The deepest Fiber on the stack involved in a hydration context.\n// This may have been an insertion or a hydration.\nlet hydrationParentFiber: null | Fiber = null;\nlet nextHydratableInstance: null | HydratableInstance = null;\nlet isHydrating: boolean = false;\n\nfunction warnIfHydrating() {\n  if (__DEV__) {\n    if (isHydrating) {\n      console.error(\n        'We should not be hydrating here. This is a bug in React. Please file a bug.',\n      );\n    }\n  }\n}\n\nfunction enterHydrationState(fiber: Fiber): boolean {\n  if (!supportsHydration) {\n    return false;\n  }\n\n  const parentInstance = fiber.stateNode.containerInfo;\n  nextHydratableInstance = getFirstHydratableChild(parentInstance);\n  hydrationParentFiber = fiber;\n  isHydrating = true;\n  return true;\n}\n\nfunction reenterHydrationStateFromDehydratedSuspenseInstance(\n  fiber: Fiber,\n  suspenseInstance: SuspenseInstance,\n): boolean {\n  if (!supportsHydration) {\n    return false;\n  }\n  nextHydratableInstance = getNextHydratableSibling(suspenseInstance);\n  popToNextHostParent(fiber);\n  isHydrating = true;\n  return true;\n}\n\nfunction deleteHydratableInstance(\n  returnFiber: Fiber,\n  instance: HydratableInstance,\n) {\n  if (__DEV__) {\n    switch (returnFiber.tag) {\n      case HostRoot:\n        didNotHydrateContainerInstance(\n          returnFiber.stateNode.containerInfo,\n          instance,\n        );\n        break;\n      case HostComponent:\n        didNotHydrateInstance(\n          returnFiber.type,\n          returnFiber.memoizedProps,\n          returnFiber.stateNode,\n          instance,\n        );\n        break;\n    }\n  }\n\n  const childToDelete = createFiberFromHostInstanceForDeletion();\n  childToDelete.stateNode = instance;\n  childToDelete.return = returnFiber;\n\n  const deletions = returnFiber.deletions;\n  if (deletions === null) {\n    returnFiber.deletions = [childToDelete];\n    returnFiber.flags |= ChildDeletion;\n  } else {\n    deletions.push(childToDelete);\n  }\n}\n\nfunction insertNonHydratedInstance(returnFiber: Fiber, fiber: Fiber) {\n  fiber.flags = (fiber.flags & ~Hydrating) | Placement;\n  if (__DEV__) {\n    switch (returnFiber.tag) {\n      case HostRoot: {\n        const parentContainer = returnFiber.stateNode.containerInfo;\n        switch (fiber.tag) {\n          case HostComponent:\n            const type = fiber.type;\n            const props = fiber.pendingProps;\n            didNotFindHydratableContainerInstance(parentContainer, type, props);\n            break;\n          case HostText:\n            const text = fiber.pendingProps;\n            didNotFindHydratableContainerTextInstance(parentContainer, text);\n            break;\n          case SuspenseComponent:\n            didNotFindHydratableContainerSuspenseInstance(parentContainer);\n            break;\n        }\n        break;\n      }\n      case HostComponent: {\n        const parentType = returnFiber.type;\n        const parentProps = returnFiber.memoizedProps;\n        const parentInstance = returnFiber.stateNode;\n        switch (fiber.tag) {\n          case HostComponent:\n            const type = fiber.type;\n            const props = fiber.pendingProps;\n            didNotFindHydratableInstance(\n              parentType,\n              parentProps,\n              parentInstance,\n              type,\n              props,\n            );\n            break;\n          case HostText:\n            const text = fiber.pendingProps;\n            didNotFindHydratableTextInstance(\n              parentType,\n              parentProps,\n              parentInstance,\n              text,\n            );\n            break;\n          case SuspenseComponent:\n            didNotFindHydratableSuspenseInstance(\n              parentType,\n              parentProps,\n              parentInstance,\n            );\n            break;\n        }\n        break;\n      }\n      default:\n        return;\n    }\n  }\n}\n\nfunction tryHydrate(fiber, nextInstance) {\n  switch (fiber.tag) {\n    case HostComponent: {\n      const type = fiber.type;\n      const props = fiber.pendingProps;\n      const instance = canHydrateInstance(nextInstance, type, props);\n      if (instance !== null) {\n        fiber.stateNode = (instance: Instance);\n        return true;\n      }\n      return false;\n    }\n    case HostText: {\n      const text = fiber.pendingProps;\n      const textInstance = canHydrateTextInstance(nextInstance, text);\n      if (textInstance !== null) {\n        fiber.stateNode = (textInstance: TextInstance);\n        return true;\n      }\n      return false;\n    }\n    case SuspenseComponent: {\n      if (enableSuspenseServerRenderer) {\n        const suspenseInstance: null | SuspenseInstance = canHydrateSuspenseInstance(\n          nextInstance,\n        );\n        if (suspenseInstance !== null) {\n          const suspenseState: SuspenseState = {\n            dehydrated: suspenseInstance,\n            retryLane: OffscreenLane,\n          };\n          fiber.memoizedState = suspenseState;\n          // Store the dehydrated fragment as a child fiber.\n          // This simplifies the code for getHostSibling and deleting nodes,\n          // since it doesn't have to consider all Suspense boundaries and\n          // check if they're dehydrated ones or not.\n          const dehydratedFragment = createFiberFromDehydratedFragment(\n            suspenseInstance,\n          );\n          dehydratedFragment.return = fiber;\n          fiber.child = dehydratedFragment;\n          return true;\n        }\n      }\n      return false;\n    }\n    default:\n      return false;\n  }\n}\n\nfunction tryToClaimNextHydratableInstance(fiber: Fiber): void {\n  if (!isHydrating) {\n    return;\n  }\n  let nextInstance = nextHydratableInstance;\n  if (!nextInstance) {\n    // Nothing to hydrate. Make it an insertion.\n    insertNonHydratedInstance((hydrationParentFiber: any), fiber);\n    isHydrating = false;\n    hydrationParentFiber = fiber;\n    return;\n  }\n  const firstAttemptedInstance = nextInstance;\n  if (!tryHydrate(fiber, nextInstance)) {\n    // If we can't hydrate this instance let's try the next one.\n    // We use this as a heuristic. It's based on intuition and not data so it\n    // might be flawed or unnecessary.\n    nextInstance = getNextHydratableSibling(firstAttemptedInstance);\n    if (!nextInstance || !tryHydrate(fiber, nextInstance)) {\n      // Nothing to hydrate. Make it an insertion.\n      insertNonHydratedInstance((hydrationParentFiber: any), fiber);\n      isHydrating = false;\n      hydrationParentFiber = fiber;\n      return;\n    }\n    // We matched the next one, we'll now assume that the first one was\n    // superfluous and we'll delete it. Since we can't eagerly delete it\n    // we'll have to schedule a deletion. To do that, this node needs a dummy\n    // fiber associated with it.\n    deleteHydratableInstance(\n      (hydrationParentFiber: any),\n      firstAttemptedInstance,\n    );\n  }\n  hydrationParentFiber = fiber;\n  nextHydratableInstance = getFirstHydratableChild((nextInstance: any));\n}\n\nfunction prepareToHydrateHostInstance(\n  fiber: Fiber,\n  rootContainerInstance: Container,\n  hostContext: HostContext,\n): boolean {\n  if (!supportsHydration) {\n    invariant(\n      false,\n      'Expected prepareToHydrateHostInstance() to never be called. ' +\n        'This error is likely caused by a bug in React. Please file an issue.',\n    );\n  }\n\n  const instance: Instance = fiber.stateNode;\n  const updatePayload = hydrateInstance(\n    instance,\n    fiber.type,\n    fiber.memoizedProps,\n    rootContainerInstance,\n    hostContext,\n    fiber,\n  );\n  // TODO: Type this specific to this type of component.\n  fiber.updateQueue = (updatePayload: any);\n  // If the update payload indicates that there is a change or if there\n  // is a new ref we mark this as an update.\n  if (updatePayload !== null) {\n    return true;\n  }\n  return false;\n}\n\nfunction prepareToHydrateHostTextInstance(fiber: Fiber): boolean {\n  if (!supportsHydration) {\n    invariant(\n      false,\n      'Expected prepareToHydrateHostTextInstance() to never be called. ' +\n        'This error is likely caused by a bug in React. Please file an issue.',\n    );\n  }\n\n  const textInstance: TextInstance = fiber.stateNode;\n  const textContent: string = fiber.memoizedProps;\n  const shouldUpdate = hydrateTextInstance(textInstance, textContent, fiber);\n  if (__DEV__) {\n    if (shouldUpdate) {\n      // We assume that prepareToHydrateHostTextInstance is called in a context where the\n      // hydration parent is the parent host component of this host text.\n      const returnFiber = hydrationParentFiber;\n      if (returnFiber !== null) {\n        switch (returnFiber.tag) {\n          case HostRoot: {\n            const parentContainer = returnFiber.stateNode.containerInfo;\n            didNotMatchHydratedContainerTextInstance(\n              parentContainer,\n              textInstance,\n              textContent,\n            );\n            break;\n          }\n          case HostComponent: {\n            const parentType = returnFiber.type;\n            const parentProps = returnFiber.memoizedProps;\n            const parentInstance = returnFiber.stateNode;\n            didNotMatchHydratedTextInstance(\n              parentType,\n              parentProps,\n              parentInstance,\n              textInstance,\n              textContent,\n            );\n            break;\n          }\n        }\n      }\n    }\n  }\n  return shouldUpdate;\n}\n\nfunction prepareToHydrateHostSuspenseInstance(fiber: Fiber): void {\n  if (!supportsHydration) {\n    invariant(\n      false,\n      'Expected prepareToHydrateHostSuspenseInstance() to never be called. ' +\n        'This error is likely caused by a bug in React. Please file an issue.',\n    );\n  }\n\n  const suspenseState: null | SuspenseState = fiber.memoizedState;\n  const suspenseInstance: null | SuspenseInstance =\n    suspenseState !== null ? suspenseState.dehydrated : null;\n  invariant(\n    suspenseInstance,\n    'Expected to have a hydrated suspense instance. ' +\n      'This error is likely caused by a bug in React. Please file an issue.',\n  );\n  hydrateSuspenseInstance(suspenseInstance, fiber);\n}\n\nfunction skipPastDehydratedSuspenseInstance(\n  fiber: Fiber,\n): null | HydratableInstance {\n  if (!supportsHydration) {\n    invariant(\n      false,\n      'Expected skipPastDehydratedSuspenseInstance() to never be called. ' +\n        'This error is likely caused by a bug in React. Please file an issue.',\n    );\n  }\n  const suspenseState: null | SuspenseState = fiber.memoizedState;\n  const suspenseInstance: null | SuspenseInstance =\n    suspenseState !== null ? suspenseState.dehydrated : null;\n  invariant(\n    suspenseInstance,\n    'Expected to have a hydrated suspense instance. ' +\n      'This error is likely caused by a bug in React. Please file an issue.',\n  );\n  return getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance);\n}\n\nfunction popToNextHostParent(fiber: Fiber): void {\n  let parent = fiber.return;\n  while (\n    parent !== null &&\n    parent.tag !== HostComponent &&\n    parent.tag !== HostRoot &&\n    parent.tag !== SuspenseComponent\n  ) {\n    parent = parent.return;\n  }\n  hydrationParentFiber = parent;\n}\n\nfunction popHydrationState(fiber: Fiber): boolean {\n  if (!supportsHydration) {\n    return false;\n  }\n  if (fiber !== hydrationParentFiber) {\n    // We're deeper than the current hydration context, inside an inserted\n    // tree.\n    return false;\n  }\n  if (!isHydrating) {\n    // If we're not currently hydrating but we're in a hydration context, then\n    // we were an insertion and now need to pop up reenter hydration of our\n    // siblings.\n    popToNextHostParent(fiber);\n    isHydrating = true;\n    return false;\n  }\n\n  // If we have any remaining hydratable nodes, we need to delete them now.\n  // We only do this deeper than head and body since they tend to have random\n  // other nodes in them. We also ignore components with pure text content in\n  // side of them. We also don't delete anything inside the root container.\n  if (\n    fiber.tag !== HostRoot &&\n    (fiber.tag !== HostComponent ||\n      (shouldDeleteUnhydratedTailInstances(fiber.type) &&\n        !shouldSetTextContent(fiber.type, fiber.memoizedProps)))\n  ) {\n    let nextInstance = nextHydratableInstance;\n    while (nextInstance) {\n      deleteHydratableInstance(fiber, nextInstance);\n      nextInstance = getNextHydratableSibling(nextInstance);\n    }\n  }\n\n  popToNextHostParent(fiber);\n  if (fiber.tag === SuspenseComponent) {\n    nextHydratableInstance = skipPastDehydratedSuspenseInstance(fiber);\n  } else {\n    nextHydratableInstance = hydrationParentFiber\n      ? getNextHydratableSibling(fiber.stateNode)\n      : null;\n  }\n  return true;\n}\n\nfunction resetHydrationState(): void {\n  if (!supportsHydration) {\n    return;\n  }\n\n  hydrationParentFiber = null;\n  nextHydratableInstance = null;\n  isHydrating = false;\n}\n\nfunction getIsHydrating(): boolean {\n  return isHydrating;\n}\n\nexport {\n  warnIfHydrating,\n  enterHydrationState,\n  getIsHydrating,\n  reenterHydrationStateFromDehydratedSuspenseInstance,\n  resetHydrationState,\n  tryToClaimNextHydratableInstance,\n  prepareToHydrateHostInstance,\n  prepareToHydrateHostTextInstance,\n  prepareToHydrateHostSuspenseInstance,\n  popHydrationState,\n};\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {MutableSource, MutableSourceVersion} from 'shared/ReactTypes';\nimport type {FiberRoot} from './ReactInternalTypes';\n\nimport {isPrimaryRenderer} from './ReactFiberHostConfig';\n\n// Work in progress version numbers only apply to a single render,\n// and should be reset before starting a new render.\n// This tracks which mutable sources need to be reset after a render.\nconst workInProgressSources: Array<MutableSource<any>> = [];\n\nlet rendererSigil;\nif (__DEV__) {\n  // Used to detect multiple renderers using the same mutable source.\n  rendererSigil = {};\n}\n\nexport function markSourceAsDirty(mutableSource: MutableSource<any>): void {\n  workInProgressSources.push(mutableSource);\n}\n\nexport function resetWorkInProgressVersions(): void {\n  for (let i = 0; i < workInProgressSources.length; i++) {\n    const mutableSource = workInProgressSources[i];\n    if (isPrimaryRenderer) {\n      mutableSource._workInProgressVersionPrimary = null;\n    } else {\n      mutableSource._workInProgressVersionSecondary = null;\n    }\n  }\n  workInProgressSources.length = 0;\n}\n\nexport function getWorkInProgressVersion(\n  mutableSource: MutableSource<any>,\n): null | MutableSourceVersion {\n  if (isPrimaryRenderer) {\n    return mutableSource._workInProgressVersionPrimary;\n  } else {\n    return mutableSource._workInProgressVersionSecondary;\n  }\n}\n\nexport function setWorkInProgressVersion(\n  mutableSource: MutableSource<any>,\n  version: MutableSourceVersion,\n): void {\n  if (isPrimaryRenderer) {\n    mutableSource._workInProgressVersionPrimary = version;\n  } else {\n    mutableSource._workInProgressVersionSecondary = version;\n  }\n  workInProgressSources.push(mutableSource);\n}\n\nexport function warnAboutMultipleRenderersDEV(\n  mutableSource: MutableSource<any>,\n): void {\n  if (__DEV__) {\n    if (isPrimaryRenderer) {\n      if (mutableSource._currentPrimaryRenderer == null) {\n        mutableSource._currentPrimaryRenderer = rendererSigil;\n      } else if (mutableSource._currentPrimaryRenderer !== rendererSigil) {\n        console.error(\n          'Detected multiple renderers concurrently rendering the ' +\n            'same mutable source. This is currently unsupported.',\n        );\n      }\n    } else {\n      if (mutableSource._currentSecondaryRenderer == null) {\n        mutableSource._currentSecondaryRenderer = rendererSigil;\n      } else if (mutableSource._currentSecondaryRenderer !== rendererSigil) {\n        console.error(\n          'Detected multiple renderers concurrently rendering the ' +\n            'same mutable source. This is currently unsupported.',\n        );\n      }\n    }\n  }\n}\n\n// Eager reads the version of a mutable source and stores it on the root.\n// This ensures that the version used for server rendering matches the one\n// that is eventually read during hydration.\n// If they don't match there's a potential tear and a full deopt render is required.\nexport function registerMutableSourceForHydration(\n  root: FiberRoot,\n  mutableSource: MutableSource<any>,\n): void {\n  const getVersion = mutableSource._getVersion;\n  const version = getVersion(mutableSource._source);\n\n  // TODO Clear this data once all pending hydration work is finished.\n  // Retaining it forever may interfere with GC.\n  if (root.mutableSourceEagerHydrationData == null) {\n    root.mutableSourceEagerHydrationData = [mutableSource, version];\n  } else {\n    root.mutableSourceEagerHydrationData.push(mutableSource, version);\n  }\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {ReactContext} from 'shared/ReactTypes';\nimport type {FiberRoot} from './ReactInternalTypes';\nimport type {Lanes} from './ReactFiberLane.old';\nimport type {StackCursor} from './ReactFiberStack.old';\n\nimport {enableCache} from 'shared/ReactFeatureFlags';\nimport {REACT_CONTEXT_TYPE} from 'shared/ReactSymbols';\n\nimport {isPrimaryRenderer} from './ReactFiberHostConfig';\nimport {createCursor, push, pop} from './ReactFiberStack.old';\nimport {pushProvider, popProvider} from './ReactFiberNewContext.old';\n\nexport type Cache = Map<() => mixed, mixed>;\n\nexport type CacheComponentState = {|\n  +parent: Cache,\n  +cache: Cache,\n|};\n\nexport type SpawnedCachePool = {|\n  +parent: Cache,\n  +pool: Cache,\n|};\n\nexport const CacheContext: ReactContext<Cache> = enableCache\n  ? {\n      $$typeof: REACT_CONTEXT_TYPE,\n      // We don't use Consumer/Provider for Cache components. So we'll cheat.\n      Consumer: (null: any),\n      Provider: (null: any),\n      // We'll initialize these at the root.\n      _currentValue: (null: any),\n      _currentValue2: (null: any),\n      _threadCount: 0,\n    }\n  : (null: any);\n\nif (__DEV__ && enableCache) {\n  CacheContext._currentRenderer = null;\n  CacheContext._currentRenderer2 = null;\n}\n\n// The cache that newly mounted Cache boundaries should use. It's either\n// retrieved from the cache pool, or the result of a refresh.\nlet pooledCache: Cache | null = null;\n\n// When retrying a Suspense/Offscreen boundary, we override pooledCache with the\n// cache from the render that suspended.\nconst prevFreshCacheOnStack: StackCursor<Cache | null> = createCursor(null);\n\nexport function pushCacheProvider(workInProgress: Fiber, cache: Cache) {\n  if (!enableCache) {\n    return;\n  }\n  pushProvider(workInProgress, CacheContext, cache);\n}\n\nexport function popCacheProvider(workInProgress: Fiber, cache: Cache) {\n  if (!enableCache) {\n    return;\n  }\n  popProvider(CacheContext, workInProgress);\n}\n\nexport function requestCacheFromPool(renderLanes: Lanes): Cache {\n  if (!enableCache) {\n    return (null: any);\n  }\n  if (pooledCache !== null) {\n    return pooledCache;\n  }\n  // Create a fresh cache.\n  pooledCache = new Map();\n  return pooledCache;\n}\n\nexport function pushRootCachePool(root: FiberRoot) {\n  if (!enableCache) {\n    return;\n  }\n  // When we start rendering a tree, read the pooled cache for this render\n  // from `root.pooledCache`. If it's currently `null`, we will lazily\n  // initialize it the first type it's requested. However, we only mutate\n  // the root itself during the complete/unwind phase of the HostRoot.\n  pooledCache = root.pooledCache;\n}\n\nexport function popRootCachePool(root: FiberRoot, renderLanes: Lanes) {\n  if (!enableCache) {\n    return;\n  }\n  // The `pooledCache` variable points to the cache that was used for new\n  // cache boundaries during this render, if any. Stash it on the root so that\n  // parallel transitions may share the same cache. We will clear this field\n  // once all the transitions that depend on it (which we track with\n  // `pooledCacheLanes`) have committed.\n  root.pooledCache = pooledCache;\n  if (pooledCache !== null) {\n    root.pooledCacheLanes |= renderLanes;\n  }\n}\n\nexport function restoreSpawnedCachePool(\n  offscreenWorkInProgress: Fiber,\n  prevCachePool: SpawnedCachePool,\n): SpawnedCachePool | null {\n  if (!enableCache) {\n    return (null: any);\n  }\n  const nextParentCache = isPrimaryRenderer\n    ? CacheContext._currentValue\n    : CacheContext._currentValue2;\n  if (nextParentCache !== prevCachePool.parent) {\n    // There was a refresh. Don't bother restoring anything since the refresh\n    // will override it.\n    return null;\n  } else {\n    // No refresh. Resume with the previous cache. This will override the cache\n    // pool so that any new Cache boundaries in the subtree use this one instead\n    // of requesting a fresh one.\n    push(prevFreshCacheOnStack, pooledCache, offscreenWorkInProgress);\n    pooledCache = prevCachePool.pool;\n\n    // Return the cache pool to signal that we did in fact push it. We will\n    // assign this to the field on the fiber so we know to pop the context.\n    return prevCachePool;\n  }\n}\n\n// Note: Ideally, `popCachePool` would return this value, and then we would pass\n// it to `getSuspendedCachePool`. But factoring reasons, those two functions are\n// in different phases/files. They are always called in sequence, though, so we\n// can stash the value here temporarily.\nlet _suspendedPooledCache: Cache | null = null;\n\nexport function popCachePool(workInProgress: Fiber) {\n  if (!enableCache) {\n    return;\n  }\n  _suspendedPooledCache = pooledCache;\n  pooledCache = prevFreshCacheOnStack.current;\n  pop(prevFreshCacheOnStack, workInProgress);\n}\n\nexport function getSuspendedCachePool(): SpawnedCachePool | null {\n  if (!enableCache) {\n    return null;\n  }\n\n  // We check the cache on the stack first, since that's the one any new Caches\n  // would have accessed.\n  let pool = pooledCache;\n  if (pool === null) {\n    // There's no pooled cache above us in the stack. However, a child in the\n    // suspended tree may have requested a fresh cache pool. If so, we would\n    // have unwound it with `popCachePool`.\n    if (_suspendedPooledCache !== null) {\n      pool = _suspendedPooledCache;\n      _suspendedPooledCache = null;\n    } else {\n      // There's no suspended cache pool.\n      return null;\n    }\n  }\n\n  return {\n    // We must also save the parent, so that when we resume we can detect\n    // a refresh.\n    parent: isPrimaryRenderer\n      ? CacheContext._currentValue\n      : CacheContext._currentValue2,\n    pool,\n  };\n}\n\nexport function getOffscreenDeferredCachePool(): SpawnedCachePool | null {\n  if (!enableCache) {\n    return null;\n  }\n\n  if (pooledCache === null) {\n    // There's no deferred cache pool.\n    return null;\n  }\n\n  return {\n    // We must also store the parent, so that when we resume we can detect\n    // a refresh.\n    parent: isPrimaryRenderer\n      ? CacheContext._currentValue\n      : CacheContext._currentValue2,\n    pool: pooledCache,\n  };\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {\n  MutableSource,\n  MutableSourceGetSnapshotFn,\n  MutableSourceSubscribeFn,\n  ReactContext,\n} from 'shared/ReactTypes';\nimport type {Fiber, Dispatcher, HookType} from './ReactInternalTypes';\nimport type {Lanes, Lane} from './ReactFiberLane.old';\nimport type {HookFlags} from './ReactHookEffectTags';\nimport type {FiberRoot} from './ReactInternalTypes';\nimport type {OpaqueIDType} from './ReactFiberHostConfig';\nimport type {Cache} from './ReactFiberCacheComponent.old';\nimport type {Flags} from './ReactFiberFlags';\n\nimport ReactSharedInternals from 'shared/ReactSharedInternals';\nimport {\n  enableDebugTracing,\n  enableSchedulingProfiler,\n  enableNewReconciler,\n  enableCache,\n  enableUseRefAccessWarning,\n  enableStrictEffects,\n  enableLazyContextPropagation,\n  enableSuspenseLayoutEffectSemantics,\n} from 'shared/ReactFeatureFlags';\n\nimport {\n  NoMode,\n  ConcurrentMode,\n  DebugTracingMode,\n  StrictEffectsMode,\n} from './ReactTypeOfMode';\nimport {\n  NoLane,\n  SyncLane,\n  NoLanes,\n  isSubsetOfLanes,\n  mergeLanes,\n  removeLanes,\n  intersectLanes,\n  isTransitionLane,\n  markRootEntangled,\n  markRootMutableRead,\n  NoTimestamp,\n} from './ReactFiberLane.old';\nimport {\n  ContinuousEventPriority,\n  getCurrentUpdatePriority,\n  setCurrentUpdatePriority,\n  higherEventPriority,\n} from './ReactEventPriorities.old';\nimport {readContext, checkIfContextChanged} from './ReactFiberNewContext.old';\nimport {HostRoot, CacheComponent} from './ReactWorkTags';\nimport {\n  LayoutStatic as LayoutStaticEffect,\n  MountLayoutDev as MountLayoutDevEffect,\n  MountPassiveDev as MountPassiveDevEffect,\n  Passive as PassiveEffect,\n  PassiveStatic as PassiveStaticEffect,\n  StaticMask as StaticMaskEffect,\n  Update as UpdateEffect,\n} from './ReactFiberFlags';\nimport {\n  HasEffect as HookHasEffect,\n  Layout as HookLayout,\n  Passive as HookPassive,\n} from './ReactHookEffectTags';\nimport {\n  getWorkInProgressRoot,\n  scheduleUpdateOnFiber,\n  requestUpdateLane,\n  requestEventTime,\n  warnIfNotCurrentlyActingEffectsInDEV,\n  warnIfNotCurrentlyActingUpdatesInDev,\n  markSkippedUpdateLanes,\n  isInterleavedUpdate,\n} from './ReactFiberWorkLoop.old';\n\nimport invariant from 'shared/invariant';\nimport getComponentNameFromFiber from 'react-reconciler/src/getComponentNameFromFiber';\nimport is from 'shared/objectIs';\nimport isArray from 'shared/isArray';\nimport {\n  markWorkInProgressReceivedUpdate,\n  checkIfWorkInProgressReceivedUpdate,\n} from './ReactFiberBeginWork.old';\nimport {getIsHydrating} from './ReactFiberHydrationContext.old';\nimport {\n  makeClientId,\n  makeClientIdInDEV,\n  makeOpaqueHydratingObject,\n} from './ReactFiberHostConfig';\nimport {\n  getWorkInProgressVersion,\n  markSourceAsDirty,\n  setWorkInProgressVersion,\n  warnAboutMultipleRenderersDEV,\n} from './ReactMutableSource.old';\nimport {getIsRendering} from './ReactCurrentFiber';\nimport {logStateUpdateScheduled} from './DebugTracing';\nimport {markStateUpdateScheduled} from './SchedulingProfiler';\nimport {CacheContext} from './ReactFiberCacheComponent.old';\nimport {\n  createUpdate,\n  enqueueUpdate,\n  entangleTransitions,\n} from './ReactUpdateQueue.old';\nimport {pushInterleavedQueue} from './ReactFiberInterleavedUpdates.old';\nimport {getIsStrictModeForDevtools} from './ReactFiberReconciler.old';\nimport {warnOnSubscriptionInsideStartTransition} from 'shared/ReactFeatureFlags';\n\nconst {ReactCurrentDispatcher, ReactCurrentBatchConfig} = ReactSharedInternals;\n\ntype Update<S, A> = {|\n  lane: Lane,\n  action: A,\n  eagerReducer: ((S, A) => S) | null,\n  eagerState: S | null,\n  next: Update<S, A>,\n|};\n\nexport type UpdateQueue<S, A> = {|\n  pending: Update<S, A> | null,\n  interleaved: Update<S, A> | null,\n  lanes: Lanes,\n  dispatch: (A => mixed) | null,\n  lastRenderedReducer: ((S, A) => S) | null,\n  lastRenderedState: S | null,\n|};\n\nlet didWarnAboutMismatchedHooksForComponent;\nlet didWarnAboutUseOpaqueIdentifier;\nlet didWarnUncachedGetSnapshot;\nif (__DEV__) {\n  didWarnAboutUseOpaqueIdentifier = {};\n  didWarnAboutMismatchedHooksForComponent = new Set();\n}\n\nexport type Hook = {|\n  memoizedState: any,\n  baseState: any,\n  baseQueue: Update<any, any> | null,\n  queue: any,\n  next: Hook | null,\n|};\n\nexport type Effect = {|\n  tag: HookFlags,\n  create: () => (() => void) | void,\n  destroy: (() => void) | void,\n  deps: Array<mixed> | null,\n  next: Effect,\n|};\n\ntype StoreInstance<T> = {|\n  value: T,\n  getSnapshot: () => T,\n|};\n\nexport type FunctionComponentUpdateQueue = {|lastEffect: Effect | null|};\n\ntype BasicStateAction<S> = (S => S) | S;\n\ntype Dispatch<A> = A => void;\n\n// These are set right before calling the component.\nlet renderLanes: Lanes = NoLanes;\n// The work-in-progress fiber. I've named it differently to distinguish it from\n// the work-in-progress hook.\nlet currentlyRenderingFiber: Fiber = (null: any);\n\n// Hooks are stored as a linked list on the fiber's memoizedState field. The\n// current hook list is the list that belongs to the current fiber. The\n// work-in-progress hook list is a new list that will be added to the\n// work-in-progress fiber.\nlet currentHook: Hook | null = null;\nlet workInProgressHook: Hook | null = null;\n\n// Whether an update was scheduled at any point during the render phase. This\n// does not get reset if we do another render pass; only when we're completely\n// finished evaluating this component. This is an optimization so we know\n// whether we need to clear render phase updates after a throw.\nlet didScheduleRenderPhaseUpdate: boolean = false;\n// Where an update was scheduled only during the current render pass. This\n// gets reset after each attempt.\n// TODO: Maybe there's some way to consolidate this with\n// `didScheduleRenderPhaseUpdate`. Or with `numberOfReRenders`.\nlet didScheduleRenderPhaseUpdateDuringThisPass: boolean = false;\n\nconst RE_RENDER_LIMIT = 25;\n\n// In DEV, this is the name of the currently executing primitive hook\nlet currentHookNameInDev: ?HookType = null;\n\n// In DEV, this list ensures that hooks are called in the same order between renders.\n// The list stores the order of hooks used during the initial render (mount).\n// Subsequent renders (updates) reference this list.\nlet hookTypesDev: Array<HookType> | null = null;\nlet hookTypesUpdateIndexDev: number = -1;\n\n// In DEV, this tracks whether currently rendering component needs to ignore\n// the dependencies for Hooks that need them (e.g. useEffect or useMemo).\n// When true, such Hooks will always be \"remounted\". Only used during hot reload.\nlet ignorePreviousDependencies: boolean = false;\n\nfunction mountHookTypesDev() {\n  if (__DEV__) {\n    const hookName = ((currentHookNameInDev: any): HookType);\n\n    if (hookTypesDev === null) {\n      hookTypesDev = [hookName];\n    } else {\n      hookTypesDev.push(hookName);\n    }\n  }\n}\n\nfunction updateHookTypesDev() {\n  if (__DEV__) {\n    const hookName = ((currentHookNameInDev: any): HookType);\n\n    if (hookTypesDev !== null) {\n      hookTypesUpdateIndexDev++;\n      if (hookTypesDev[hookTypesUpdateIndexDev] !== hookName) {\n        warnOnHookMismatchInDev(hookName);\n      }\n    }\n  }\n}\n\nfunction checkDepsAreArrayDev(deps: mixed) {\n  if (__DEV__) {\n    if (deps !== undefined && deps !== null && !isArray(deps)) {\n      // Verify deps, but only on mount to avoid extra checks.\n      // It's unlikely their type would change as usually you define them inline.\n      console.error(\n        '%s received a final argument that is not an array (instead, received `%s`). When ' +\n          'specified, the final argument must be an array.',\n        currentHookNameInDev,\n        typeof deps,\n      );\n    }\n  }\n}\n\nfunction warnOnHookMismatchInDev(currentHookName: HookType) {\n  if (__DEV__) {\n    const componentName = getComponentNameFromFiber(currentlyRenderingFiber);\n    if (!didWarnAboutMismatchedHooksForComponent.has(componentName)) {\n      didWarnAboutMismatchedHooksForComponent.add(componentName);\n\n      if (hookTypesDev !== null) {\n        let table = '';\n\n        const secondColumnStart = 30;\n\n        for (let i = 0; i <= ((hookTypesUpdateIndexDev: any): number); i++) {\n          const oldHookName = hookTypesDev[i];\n          const newHookName =\n            i === ((hookTypesUpdateIndexDev: any): number)\n              ? currentHookName\n              : oldHookName;\n\n          let row = `${i + 1}. ${oldHookName}`;\n\n          // Extra space so second column lines up\n          // lol @ IE not supporting String#repeat\n          while (row.length < secondColumnStart) {\n            row += ' ';\n          }\n\n          row += newHookName + '\\n';\n\n          table += row;\n        }\n\n        console.error(\n          'React has detected a change in the order of Hooks called by %s. ' +\n            'This will lead to bugs and errors if not fixed. ' +\n            'For more information, read the Rules of Hooks: https://reactjs.org/link/rules-of-hooks\\n\\n' +\n            '   Previous render            Next render\\n' +\n            '   ------------------------------------------------------\\n' +\n            '%s' +\n            '   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n',\n          componentName,\n          table,\n        );\n      }\n    }\n  }\n}\n\nfunction throwInvalidHookError() {\n  invariant(\n    false,\n    'Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for' +\n      ' one of the following reasons:\\n' +\n      '1. You might have mismatching versions of React and the renderer (such as React DOM)\\n' +\n      '2. You might be breaking the Rules of Hooks\\n' +\n      '3. You might have more than one copy of React in the same app\\n' +\n      'See https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.',\n  );\n}\n\nfunction areHookInputsEqual(\n  nextDeps: Array<mixed>,\n  prevDeps: Array<mixed> | null,\n) {\n  if (__DEV__) {\n    if (ignorePreviousDependencies) {\n      // Only true when this component is being hot reloaded.\n      return false;\n    }\n  }\n\n  if (prevDeps === null) {\n    if (__DEV__) {\n      console.error(\n        '%s received a final argument during this render, but not during ' +\n          'the previous render. Even though the final argument is optional, ' +\n          'its type cannot change between renders.',\n        currentHookNameInDev,\n      );\n    }\n    return false;\n  }\n\n  if (__DEV__) {\n    // Don't bother comparing lengths in prod because these arrays should be\n    // passed inline.\n    if (nextDeps.length !== prevDeps.length) {\n      console.error(\n        'The final argument passed to %s changed size between renders. The ' +\n          'order and size of this array must remain constant.\\n\\n' +\n          'Previous: %s\\n' +\n          'Incoming: %s',\n        currentHookNameInDev,\n        `[${prevDeps.join(', ')}]`,\n        `[${nextDeps.join(', ')}]`,\n      );\n    }\n  }\n  for (let i = 0; i < prevDeps.length && i < nextDeps.length; i++) {\n    if (is(nextDeps[i], prevDeps[i])) {\n      continue;\n    }\n    return false;\n  }\n  return true;\n}\n\nexport function renderWithHooks<Props, SecondArg>(\n  current: Fiber | null,\n  workInProgress: Fiber,\n  Component: (p: Props, arg: SecondArg) => any,\n  props: Props,\n  secondArg: SecondArg,\n  nextRenderLanes: Lanes,\n): any {\n  renderLanes = nextRenderLanes;\n  currentlyRenderingFiber = workInProgress;\n\n  if (__DEV__) {\n    hookTypesDev =\n      current !== null\n        ? ((current._debugHookTypes: any): Array<HookType>)\n        : null;\n    hookTypesUpdateIndexDev = -1;\n    // Used for hot reloading:\n    ignorePreviousDependencies =\n      current !== null && current.type !== workInProgress.type;\n  }\n\n  workInProgress.memoizedState = null;\n  workInProgress.updateQueue = null;\n  workInProgress.lanes = NoLanes;\n\n  // The following should have already been reset\n  // currentHook = null;\n  // workInProgressHook = null;\n\n  // didScheduleRenderPhaseUpdate = false;\n\n  // TODO Warn if no hooks are used at all during mount, then some are used during update.\n  // Currently we will identify the update render as a mount because memoizedState === null.\n  // This is tricky because it's valid for certain types of components (e.g. React.lazy)\n\n  // Using memoizedState to differentiate between mount/update only works if at least one stateful hook is used.\n  // Non-stateful hooks (e.g. context) don't get added to memoizedState,\n  // so memoizedState would be null during updates and mounts.\n  if (__DEV__) {\n    if (current !== null && current.memoizedState !== null) {\n      ReactCurrentDispatcher.current = HooksDispatcherOnUpdateInDEV;\n    } else if (hookTypesDev !== null) {\n      // This dispatcher handles an edge case where a component is updating,\n      // but no stateful hooks have been used.\n      // We want to match the production code behavior (which will use HooksDispatcherOnMount),\n      // but with the extra DEV validation to ensure hooks ordering hasn't changed.\n      // This dispatcher does that.\n      ReactCurrentDispatcher.current = HooksDispatcherOnMountWithHookTypesInDEV;\n    } else {\n      ReactCurrentDispatcher.current = HooksDispatcherOnMountInDEV;\n    }\n  } else {\n    ReactCurrentDispatcher.current =\n      current === null || current.memoizedState === null\n        ? HooksDispatcherOnMount\n        : HooksDispatcherOnUpdate;\n  }\n\n  let children = Component(props, secondArg);\n\n  // Check if there was a render phase update\n  if (didScheduleRenderPhaseUpdateDuringThisPass) {\n    // Keep rendering in a loop for as long as render phase updates continue to\n    // be scheduled. Use a counter to prevent infinite loops.\n    let numberOfReRenders: number = 0;\n    do {\n      didScheduleRenderPhaseUpdateDuringThisPass = false;\n      invariant(\n        numberOfReRenders < RE_RENDER_LIMIT,\n        'Too many re-renders. React limits the number of renders to prevent ' +\n          'an infinite loop.',\n      );\n\n      numberOfReRenders += 1;\n      if (__DEV__) {\n        // Even when hot reloading, allow dependencies to stabilize\n        // after first render to prevent infinite render phase updates.\n        ignorePreviousDependencies = false;\n      }\n\n      // Start over from the beginning of the list\n      currentHook = null;\n      workInProgressHook = null;\n\n      workInProgress.updateQueue = null;\n\n      if (__DEV__) {\n        // Also validate hook order for cascading updates.\n        hookTypesUpdateIndexDev = -1;\n      }\n\n      ReactCurrentDispatcher.current = __DEV__\n        ? HooksDispatcherOnRerenderInDEV\n        : HooksDispatcherOnRerender;\n\n      children = Component(props, secondArg);\n    } while (didScheduleRenderPhaseUpdateDuringThisPass);\n  }\n\n  // We can assume the previous dispatcher is always this one, since we set it\n  // at the beginning of the render phase and there's no re-entrance.\n  ReactCurrentDispatcher.current = ContextOnlyDispatcher;\n\n  if (__DEV__) {\n    workInProgress._debugHookTypes = hookTypesDev;\n  }\n\n  // This check uses currentHook so that it works the same in DEV and prod bundles.\n  // hookTypesDev could catch more cases (e.g. context) but only in DEV bundles.\n  const didRenderTooFewHooks =\n    currentHook !== null && currentHook.next !== null;\n\n  renderLanes = NoLanes;\n  currentlyRenderingFiber = (null: any);\n\n  currentHook = null;\n  workInProgressHook = null;\n\n  if (__DEV__) {\n    currentHookNameInDev = null;\n    hookTypesDev = null;\n    hookTypesUpdateIndexDev = -1;\n\n    // Confirm that a static flag was not added or removed since the last\n    // render. If this fires, it suggests that we incorrectly reset the static\n    // flags in some other part of the codebase. This has happened before, for\n    // example, in the SuspenseList implementation.\n    if (\n      current !== null &&\n      (current.flags & StaticMaskEffect) !==\n        (workInProgress.flags & StaticMaskEffect) &&\n      // Disable this warning in legacy mode, because legacy Suspense is weird\n      // and creates false positives. To make this work in legacy mode, we'd\n      // need to mark fibers that commit in an incomplete state, somehow. For\n      // now I'll disable the warning that most of the bugs that would trigger\n      // it are either exclusive to concurrent mode or exist in both.\n      (current.mode & ConcurrentMode) !== NoMode\n    ) {\n      console.error(\n        'Internal React error: Expected static flag was missing. Please ' +\n          'notify the React team.',\n      );\n    }\n  }\n\n  didScheduleRenderPhaseUpdate = false;\n\n  invariant(\n    !didRenderTooFewHooks,\n    'Rendered fewer hooks than expected. This may be caused by an accidental ' +\n      'early return statement.',\n  );\n\n  if (enableLazyContextPropagation) {\n    if (current !== null) {\n      if (!checkIfWorkInProgressReceivedUpdate()) {\n        // If there were no changes to props or state, we need to check if there\n        // was a context change. We didn't already do this because there's no\n        // 1:1 correspondence between dependencies and hooks. Although, because\n        // there almost always is in the common case (`readContext` is an\n        // internal API), we could compare in there. OTOH, we only hit this case\n        // if everything else bails out, so on the whole it might be better to\n        // keep the comparison out of the common path.\n        const currentDependencies = current.dependencies;\n        if (\n          currentDependencies !== null &&\n          checkIfContextChanged(currentDependencies)\n        ) {\n          markWorkInProgressReceivedUpdate();\n        }\n      }\n    }\n  }\n\n  return children;\n}\n\nexport function bailoutHooks(\n  current: Fiber,\n  workInProgress: Fiber,\n  lanes: Lanes,\n) {\n  workInProgress.updateQueue = current.updateQueue;\n  // TODO: Don't need to reset the flags here, because they're reset in the\n  // complete phase (bubbleProperties).\n  if (\n    __DEV__ &&\n    enableStrictEffects &&\n    (workInProgress.mode & StrictEffectsMode) !== NoMode\n  ) {\n    workInProgress.flags &= ~(\n      MountPassiveDevEffect |\n      MountLayoutDevEffect |\n      PassiveEffect |\n      UpdateEffect\n    );\n  } else {\n    workInProgress.flags &= ~(PassiveEffect | UpdateEffect);\n  }\n  current.lanes = removeLanes(current.lanes, lanes);\n}\n\nexport function resetHooksAfterThrow(): void {\n  // We can assume the previous dispatcher is always this one, since we set it\n  // at the beginning of the render phase and there's no re-entrance.\n  ReactCurrentDispatcher.current = ContextOnlyDispatcher;\n\n  if (didScheduleRenderPhaseUpdate) {\n    // There were render phase updates. These are only valid for this render\n    // phase, which we are now aborting. Remove the updates from the queues so\n    // they do not persist to the next render. Do not remove updates from hooks\n    // that weren't processed.\n    //\n    // Only reset the updates from the queue if it has a clone. If it does\n    // not have a clone, that means it wasn't processed, and the updates were\n    // scheduled before we entered the render phase.\n    let hook: Hook | null = currentlyRenderingFiber.memoizedState;\n    while (hook !== null) {\n      const queue = hook.queue;\n      if (queue !== null) {\n        queue.pending = null;\n      }\n      hook = hook.next;\n    }\n    didScheduleRenderPhaseUpdate = false;\n  }\n\n  renderLanes = NoLanes;\n  currentlyRenderingFiber = (null: any);\n\n  currentHook = null;\n  workInProgressHook = null;\n\n  if (__DEV__) {\n    hookTypesDev = null;\n    hookTypesUpdateIndexDev = -1;\n\n    currentHookNameInDev = null;\n\n    isUpdatingOpaqueValueInRenderPhase = false;\n  }\n\n  didScheduleRenderPhaseUpdateDuringThisPass = false;\n}\n\nfunction mountWorkInProgressHook(): Hook {\n  const hook: Hook = {\n    memoizedState: null,\n\n    baseState: null,\n    baseQueue: null,\n    queue: null,\n\n    next: null,\n  };\n\n  if (workInProgressHook === null) {\n    // This is the first hook in the list\n    currentlyRenderingFiber.memoizedState = workInProgressHook = hook;\n  } else {\n    // Append to the end of the list\n    workInProgressHook = workInProgressHook.next = hook;\n  }\n  return workInProgressHook;\n}\n\nfunction updateWorkInProgressHook(): Hook {\n  // This function is used both for updates and for re-renders triggered by a\n  // render phase update. It assumes there is either a current hook we can\n  // clone, or a work-in-progress hook from a previous render pass that we can\n  // use as a base. When we reach the end of the base list, we must switch to\n  // the dispatcher used for mounts.\n  let nextCurrentHook: null | Hook;\n  if (currentHook === null) {\n    const current = currentlyRenderingFiber.alternate;\n    if (current !== null) {\n      nextCurrentHook = current.memoizedState;\n    } else {\n      nextCurrentHook = null;\n    }\n  } else {\n    nextCurrentHook = currentHook.next;\n  }\n\n  let nextWorkInProgressHook: null | Hook;\n  if (workInProgressHook === null) {\n    nextWorkInProgressHook = currentlyRenderingFiber.memoizedState;\n  } else {\n    nextWorkInProgressHook = workInProgressHook.next;\n  }\n\n  if (nextWorkInProgressHook !== null) {\n    // There's already a work-in-progress. Reuse it.\n    workInProgressHook = nextWorkInProgressHook;\n    nextWorkInProgressHook = workInProgressHook.next;\n\n    currentHook = nextCurrentHook;\n  } else {\n    // Clone from the current hook.\n\n    invariant(\n      nextCurrentHook !== null,\n      'Rendered more hooks than during the previous render.',\n    );\n    currentHook = nextCurrentHook;\n\n    const newHook: Hook = {\n      memoizedState: currentHook.memoizedState,\n\n      baseState: currentHook.baseState,\n      baseQueue: currentHook.baseQueue,\n      queue: currentHook.queue,\n\n      next: null,\n    };\n\n    if (workInProgressHook === null) {\n      // This is the first hook in the list.\n      currentlyRenderingFiber.memoizedState = workInProgressHook = newHook;\n    } else {\n      // Append to the end of the list.\n      workInProgressHook = workInProgressHook.next = newHook;\n    }\n  }\n  return workInProgressHook;\n}\n\nfunction createFunctionComponentUpdateQueue(): FunctionComponentUpdateQueue {\n  return {\n    lastEffect: null,\n  };\n}\n\nfunction basicStateReducer<S>(state: S, action: BasicStateAction<S>): S {\n  // $FlowFixMe: Flow doesn't like mixed types\n  return typeof action === 'function' ? action(state) : action;\n}\n\nfunction mountReducer<S, I, A>(\n  reducer: (S, A) => S,\n  initialArg: I,\n  init?: I => S,\n): [S, Dispatch<A>] {\n  const hook = mountWorkInProgressHook();\n  let initialState;\n  if (init !== undefined) {\n    initialState = init(initialArg);\n  } else {\n    initialState = ((initialArg: any): S);\n  }\n  hook.memoizedState = hook.baseState = initialState;\n  const queue: UpdateQueue<S, A> = {\n    pending: null,\n    interleaved: null,\n    lanes: NoLanes,\n    dispatch: null,\n    lastRenderedReducer: reducer,\n    lastRenderedState: (initialState: any),\n  };\n  hook.queue = queue;\n  const dispatch: Dispatch<A> = (queue.dispatch = (dispatchAction.bind(\n    null,\n    currentlyRenderingFiber,\n    queue,\n  ): any));\n  return [hook.memoizedState, dispatch];\n}\n\nfunction updateReducer<S, I, A>(\n  reducer: (S, A) => S,\n  initialArg: I,\n  init?: I => S,\n): [S, Dispatch<A>] {\n  const hook = updateWorkInProgressHook();\n  const queue = hook.queue;\n  invariant(\n    queue !== null,\n    'Should have a queue. This is likely a bug in React. Please file an issue.',\n  );\n\n  queue.lastRenderedReducer = reducer;\n\n  const current: Hook = (currentHook: any);\n\n  // The last rebase update that is NOT part of the base state.\n  let baseQueue = current.baseQueue;\n\n  // The last pending update that hasn't been processed yet.\n  const pendingQueue = queue.pending;\n  if (pendingQueue !== null) {\n    // We have new updates that haven't been processed yet.\n    // We'll add them to the base queue.\n    if (baseQueue !== null) {\n      // Merge the pending queue and the base queue.\n      const baseFirst = baseQueue.next;\n      const pendingFirst = pendingQueue.next;\n      baseQueue.next = pendingFirst;\n      pendingQueue.next = baseFirst;\n    }\n    if (__DEV__) {\n      if (current.baseQueue !== baseQueue) {\n        // Internal invariant that should never happen, but feasibly could in\n        // the future if we implement resuming, or some form of that.\n        console.error(\n          'Internal error: Expected work-in-progress queue to be a clone. ' +\n            'This is a bug in React.',\n        );\n      }\n    }\n    current.baseQueue = baseQueue = pendingQueue;\n    queue.pending = null;\n  }\n\n  if (baseQueue !== null) {\n    // We have a queue to process.\n    const first = baseQueue.next;\n    let newState = current.baseState;\n\n    let newBaseState = null;\n    let newBaseQueueFirst = null;\n    let newBaseQueueLast = null;\n    let update = first;\n    do {\n      const updateLane = update.lane;\n      if (!isSubsetOfLanes(renderLanes, updateLane)) {\n        // Priority is insufficient. Skip this update. If this is the first\n        // skipped update, the previous update/state is the new base\n        // update/state.\n        const clone: Update<S, A> = {\n          lane: updateLane,\n          action: update.action,\n          eagerReducer: update.eagerReducer,\n          eagerState: update.eagerState,\n          next: (null: any),\n        };\n        if (newBaseQueueLast === null) {\n          newBaseQueueFirst = newBaseQueueLast = clone;\n          newBaseState = newState;\n        } else {\n          newBaseQueueLast = newBaseQueueLast.next = clone;\n        }\n        // Update the remaining priority in the queue.\n        // TODO: Don't need to accumulate this. Instead, we can remove\n        // renderLanes from the original lanes.\n        currentlyRenderingFiber.lanes = mergeLanes(\n          currentlyRenderingFiber.lanes,\n          updateLane,\n        );\n        markSkippedUpdateLanes(updateLane);\n      } else {\n        // This update does have sufficient priority.\n\n        if (newBaseQueueLast !== null) {\n          const clone: Update<S, A> = {\n            // This update is going to be committed so we never want uncommit\n            // it. Using NoLane works because 0 is a subset of all bitmasks, so\n            // this will never be skipped by the check above.\n            lane: NoLane,\n            action: update.action,\n            eagerReducer: update.eagerReducer,\n            eagerState: update.eagerState,\n            next: (null: any),\n          };\n          newBaseQueueLast = newBaseQueueLast.next = clone;\n        }\n\n        // Process this update.\n        if (update.eagerReducer === reducer) {\n          // If this update was processed eagerly, and its reducer matches the\n          // current reducer, we can use the eagerly computed state.\n          newState = ((update.eagerState: any): S);\n        } else {\n          const action = update.action;\n          newState = reducer(newState, action);\n        }\n      }\n      update = update.next;\n    } while (update !== null && update !== first);\n\n    if (newBaseQueueLast === null) {\n      newBaseState = newState;\n    } else {\n      newBaseQueueLast.next = (newBaseQueueFirst: any);\n    }\n\n    // Mark that the fiber performed work, but only if the new state is\n    // different from the current state.\n    if (!is(newState, hook.memoizedState)) {\n      markWorkInProgressReceivedUpdate();\n    }\n\n    hook.memoizedState = newState;\n    hook.baseState = newBaseState;\n    hook.baseQueue = newBaseQueueLast;\n\n    queue.lastRenderedState = newState;\n  }\n\n  // Interleaved updates are stored on a separate queue. We aren't going to\n  // process them during this render, but we do need to track which lanes\n  // are remaining.\n  const lastInterleaved = queue.interleaved;\n  if (lastInterleaved !== null) {\n    let interleaved = lastInterleaved;\n    do {\n      const interleavedLane = interleaved.lane;\n      currentlyRenderingFiber.lanes = mergeLanes(\n        currentlyRenderingFiber.lanes,\n        interleavedLane,\n      );\n      markSkippedUpdateLanes(interleavedLane);\n      interleaved = ((interleaved: any).next: Update<S, A>);\n    } while (interleaved !== lastInterleaved);\n  } else if (baseQueue === null) {\n    // `queue.lanes` is used for entangling transitions. We can set it back to\n    // zero once the queue is empty.\n    queue.lanes = NoLanes;\n  }\n\n  const dispatch: Dispatch<A> = (queue.dispatch: any);\n  return [hook.memoizedState, dispatch];\n}\n\nfunction rerenderReducer<S, I, A>(\n  reducer: (S, A) => S,\n  initialArg: I,\n  init?: I => S,\n): [S, Dispatch<A>] {\n  const hook = updateWorkInProgressHook();\n  const queue = hook.queue;\n  invariant(\n    queue !== null,\n    'Should have a queue. This is likely a bug in React. Please file an issue.',\n  );\n\n  queue.lastRenderedReducer = reducer;\n\n  // This is a re-render. Apply the new render phase updates to the previous\n  // work-in-progress hook.\n  const dispatch: Dispatch<A> = (queue.dispatch: any);\n  const lastRenderPhaseUpdate = queue.pending;\n  let newState = hook.memoizedState;\n  if (lastRenderPhaseUpdate !== null) {\n    // The queue doesn't persist past this render pass.\n    queue.pending = null;\n\n    const firstRenderPhaseUpdate = lastRenderPhaseUpdate.next;\n    let update = firstRenderPhaseUpdate;\n    do {\n      // Process this render phase update. We don't have to check the\n      // priority because it will always be the same as the current\n      // render's.\n      const action = update.action;\n      newState = reducer(newState, action);\n      update = update.next;\n    } while (update !== firstRenderPhaseUpdate);\n\n    // Mark that the fiber performed work, but only if the new state is\n    // different from the current state.\n    if (!is(newState, hook.memoizedState)) {\n      markWorkInProgressReceivedUpdate();\n    }\n\n    hook.memoizedState = newState;\n    // Don't persist the state accumulated from the render phase updates to\n    // the base state unless the queue is empty.\n    // TODO: Not sure if this is the desired semantics, but it's what we\n    // do for gDSFP. I can't remember why.\n    if (hook.baseQueue === null) {\n      hook.baseState = newState;\n    }\n\n    queue.lastRenderedState = newState;\n  }\n  return [newState, dispatch];\n}\n\ntype MutableSourceMemoizedState<Source, Snapshot> = {|\n  refs: {\n    getSnapshot: MutableSourceGetSnapshotFn<Source, Snapshot>,\n    setSnapshot: Snapshot => void,\n  },\n  source: MutableSource<any>,\n  subscribe: MutableSourceSubscribeFn<Source, Snapshot>,\n|};\n\nfunction readFromUnsubscribedMutableSource<Source, Snapshot>(\n  root: FiberRoot,\n  source: MutableSource<Source>,\n  getSnapshot: MutableSourceGetSnapshotFn<Source, Snapshot>,\n): Snapshot {\n  if (__DEV__) {\n    warnAboutMultipleRenderersDEV(source);\n  }\n\n  const getVersion = source._getVersion;\n  const version = getVersion(source._source);\n\n  // Is it safe for this component to read from this source during the current render?\n  let isSafeToReadFromSource = false;\n\n  // Check the version first.\n  // If this render has already been started with a specific version,\n  // we can use it alone to determine if we can safely read from the source.\n  const currentRenderVersion = getWorkInProgressVersion(source);\n  if (currentRenderVersion !== null) {\n    // It's safe to read if the store hasn't been mutated since the last time\n    // we read something.\n    isSafeToReadFromSource = currentRenderVersion === version;\n  } else {\n    // If there's no version, then this is the first time we've read from the\n    // source during the current render pass, so we need to do a bit more work.\n    // What we need to determine is if there are any hooks that already\n    // subscribed to the source, and if so, whether there are any pending\n    // mutations that haven't been synchronized yet.\n    //\n    // If there are no pending mutations, then `root.mutableReadLanes` will be\n    // empty, and we know we can safely read.\n    //\n    // If there *are* pending mutations, we may still be able to safely read\n    // if the currently rendering lanes are inclusive of the pending mutation\n    // lanes, since that guarantees that the value we're about to read from\n    // the source is consistent with the values that we read during the most\n    // recent mutation.\n    isSafeToReadFromSource = isSubsetOfLanes(\n      renderLanes,\n      root.mutableReadLanes,\n    );\n\n    if (isSafeToReadFromSource) {\n      // If it's safe to read from this source during the current render,\n      // store the version in case other components read from it.\n      // A changed version number will let those components know to throw and restart the render.\n      setWorkInProgressVersion(source, version);\n    }\n  }\n\n  if (isSafeToReadFromSource) {\n    const snapshot = getSnapshot(source._source);\n    if (__DEV__) {\n      if (typeof snapshot === 'function') {\n        console.error(\n          'Mutable source should not return a function as the snapshot value. ' +\n            'Functions may close over mutable values and cause tearing.',\n        );\n      }\n    }\n    return snapshot;\n  } else {\n    // This handles the special case of a mutable source being shared between renderers.\n    // In that case, if the source is mutated between the first and second renderer,\n    // The second renderer don't know that it needs to reset the WIP version during unwind,\n    // (because the hook only marks sources as dirty if it's written to their WIP version).\n    // That would cause this tear check to throw again and eventually be visible to the user.\n    // We can avoid this infinite loop by explicitly marking the source as dirty.\n    //\n    // This can lead to tearing in the first renderer when it resumes,\n    // but there's nothing we can do about that (short of throwing here and refusing to continue the render).\n    markSourceAsDirty(source);\n\n    // Intentioally throw an error to force React to retry synchronously. During\n    // the synchronous retry, it will block interleaved mutations, so we should\n    // get a consistent read. Therefore, the following error should never be\n    // visible to the user.\n    //\n    // If it were to become visible to the user, it suggests one of two things:\n    // a bug in React, or (more likely), a mutation during the render phase that\n    // caused the second re-render attempt to be different from the first.\n    //\n    // We know it's the second case if the logs are currently disabled. So in\n    // dev, we can present a more accurate error message.\n    if (__DEV__) {\n      // eslint-disable-next-line react-internal/no-production-logging\n      if (getIsStrictModeForDevtools()) {\n        // If getIsStrictModeForDevtools is true, this is the dev-only double render\n        // This is only reachable if there was a mutation during render. Show a helpful\n        // error message.\n        //\n        // Something interesting to note: because we only double render in\n        // development, this error will never happen during production. This is\n        // actually true of all errors that occur during a double render,\n        // because if the first render had thrown, we would have exited the\n        // begin phase without double rendering. We should consider suppressing\n        // any error from a double render (with a warning) to more closely match\n        // the production behavior.\n        const componentName = getComponentNameFromFiber(\n          currentlyRenderingFiber,\n        );\n        invariant(\n          false,\n          'A mutable source was mutated while the %s component was rendering. ' +\n            'This is not supported. Move any mutations into event handlers ' +\n            'or effects.',\n          componentName,\n        );\n      }\n    }\n\n    // We expect this error not to be thrown during the synchronous retry,\n    // because we blocked interleaved mutations.\n    invariant(\n      false,\n      'Cannot read from mutable source during the current render without tearing. This may be a bug in React. Please file an issue.',\n    );\n  }\n}\n\nfunction useMutableSource<Source, Snapshot>(\n  hook: Hook,\n  source: MutableSource<Source>,\n  getSnapshot: MutableSourceGetSnapshotFn<Source, Snapshot>,\n  subscribe: MutableSourceSubscribeFn<Source, Snapshot>,\n): Snapshot {\n  const root = ((getWorkInProgressRoot(): any): FiberRoot);\n  invariant(\n    root !== null,\n    'Expected a work-in-progress root. This is a bug in React. Please file an issue.',\n  );\n\n  const getVersion = source._getVersion;\n  const version = getVersion(source._source);\n\n  const dispatcher = ReactCurrentDispatcher.current;\n\n  // eslint-disable-next-line prefer-const\n  let [currentSnapshot, setSnapshot] = dispatcher.useState(() =>\n    readFromUnsubscribedMutableSource(root, source, getSnapshot),\n  );\n  let snapshot = currentSnapshot;\n\n  // Grab a handle to the state hook as well.\n  // We use it to clear the pending update queue if we have a new source.\n  const stateHook = ((workInProgressHook: any): Hook);\n\n  const memoizedState = ((hook.memoizedState: any): MutableSourceMemoizedState<\n    Source,\n    Snapshot,\n  >);\n  const refs = memoizedState.refs;\n  const prevGetSnapshot = refs.getSnapshot;\n  const prevSource = memoizedState.source;\n  const prevSubscribe = memoizedState.subscribe;\n\n  const fiber = currentlyRenderingFiber;\n\n  hook.memoizedState = ({\n    refs,\n    source,\n    subscribe,\n  }: MutableSourceMemoizedState<Source, Snapshot>);\n\n  // Sync the values needed by our subscription handler after each commit.\n  dispatcher.useEffect(() => {\n    refs.getSnapshot = getSnapshot;\n\n    // Normally the dispatch function for a state hook never changes,\n    // but this hook recreates the queue in certain cases  to avoid updates from stale sources.\n    // handleChange() below needs to reference the dispatch function without re-subscribing,\n    // so we use a ref to ensure that it always has the latest version.\n    refs.setSnapshot = setSnapshot;\n\n    // Check for a possible change between when we last rendered now.\n    const maybeNewVersion = getVersion(source._source);\n    if (!is(version, maybeNewVersion)) {\n      const maybeNewSnapshot = getSnapshot(source._source);\n      if (__DEV__) {\n        if (typeof maybeNewSnapshot === 'function') {\n          console.error(\n            'Mutable source should not return a function as the snapshot value. ' +\n              'Functions may close over mutable values and cause tearing.',\n          );\n        }\n      }\n\n      if (!is(snapshot, maybeNewSnapshot)) {\n        setSnapshot(maybeNewSnapshot);\n\n        const lane = requestUpdateLane(fiber);\n        markRootMutableRead(root, lane);\n      }\n      // If the source mutated between render and now,\n      // there may be state updates already scheduled from the old source.\n      // Entangle the updates so that they render in the same batch.\n      markRootEntangled(root, root.mutableReadLanes);\n    }\n  }, [getSnapshot, source, subscribe]);\n\n  // If we got a new source or subscribe function, re-subscribe in a passive effect.\n  dispatcher.useEffect(() => {\n    const handleChange = () => {\n      const latestGetSnapshot = refs.getSnapshot;\n      const latestSetSnapshot = refs.setSnapshot;\n\n      try {\n        latestSetSnapshot(latestGetSnapshot(source._source));\n\n        // Record a pending mutable source update with the same expiration time.\n        const lane = requestUpdateLane(fiber);\n\n        markRootMutableRead(root, lane);\n      } catch (error) {\n        // A selector might throw after a source mutation.\n        // e.g. it might try to read from a part of the store that no longer exists.\n        // In this case we should still schedule an update with React.\n        // Worst case the selector will throw again and then an error boundary will handle it.\n        latestSetSnapshot(\n          (() => {\n            throw error;\n          }: any),\n        );\n      }\n    };\n\n    const unsubscribe = subscribe(source._source, handleChange);\n    if (__DEV__) {\n      if (typeof unsubscribe !== 'function') {\n        console.error(\n          'Mutable source subscribe function must return an unsubscribe function.',\n        );\n      }\n    }\n\n    return unsubscribe;\n  }, [source, subscribe]);\n\n  // If any of the inputs to useMutableSource change, reading is potentially unsafe.\n  //\n  // If either the source or the subscription have changed we can't can't trust the update queue.\n  // Maybe the source changed in a way that the old subscription ignored but the new one depends on.\n  //\n  // If the getSnapshot function changed, we also shouldn't rely on the update queue.\n  // It's possible that the underlying source was mutated between the when the last \"change\" event fired,\n  // and when the current render (with the new getSnapshot function) is processed.\n  //\n  // In both cases, we need to throw away pending updates (since they are no longer relevant)\n  // and treat reading from the source as we do in the mount case.\n  if (\n    !is(prevGetSnapshot, getSnapshot) ||\n    !is(prevSource, source) ||\n    !is(prevSubscribe, subscribe)\n  ) {\n    // Create a new queue and setState method,\n    // So if there are interleaved updates, they get pushed to the older queue.\n    // When this becomes current, the previous queue and dispatch method will be discarded,\n    // including any interleaving updates that occur.\n    const newQueue: UpdateQueue<Snapshot, BasicStateAction<Snapshot>> = {\n      pending: null,\n      interleaved: null,\n      lanes: NoLanes,\n      dispatch: null,\n      lastRenderedReducer: basicStateReducer,\n      lastRenderedState: snapshot,\n    };\n    newQueue.dispatch = setSnapshot = (dispatchAction.bind(\n      null,\n      currentlyRenderingFiber,\n      newQueue,\n    ): any);\n    stateHook.queue = newQueue;\n    stateHook.baseQueue = null;\n    snapshot = readFromUnsubscribedMutableSource(root, source, getSnapshot);\n    stateHook.memoizedState = stateHook.baseState = snapshot;\n  }\n\n  return snapshot;\n}\n\nfunction mountMutableSource<Source, Snapshot>(\n  source: MutableSource<Source>,\n  getSnapshot: MutableSourceGetSnapshotFn<Source, Snapshot>,\n  subscribe: MutableSourceSubscribeFn<Source, Snapshot>,\n): Snapshot {\n  const hook = mountWorkInProgressHook();\n  hook.memoizedState = ({\n    refs: {\n      getSnapshot,\n      setSnapshot: (null: any),\n    },\n    source,\n    subscribe,\n  }: MutableSourceMemoizedState<Source, Snapshot>);\n  return useMutableSource(hook, source, getSnapshot, subscribe);\n}\n\nfunction updateMutableSource<Source, Snapshot>(\n  source: MutableSource<Source>,\n  getSnapshot: MutableSourceGetSnapshotFn<Source, Snapshot>,\n  subscribe: MutableSourceSubscribeFn<Source, Snapshot>,\n): Snapshot {\n  const hook = updateWorkInProgressHook();\n  return useMutableSource(hook, source, getSnapshot, subscribe);\n}\n\nfunction mountSyncExternalStore<T>(\n  subscribe: (() => void) => () => void,\n  getSnapshot: () => T,\n): T {\n  const hook = mountWorkInProgressHook();\n  // Read the current snapshot from the store on every render. This breaks the\n  // normal rules of React, and only works because store updates are\n  // always synchronous.\n  const nextSnapshot = getSnapshot();\n  if (__DEV__) {\n    if (!didWarnUncachedGetSnapshot) {\n      if (nextSnapshot !== getSnapshot()) {\n        console.error(\n          'The result of getSnapshot should be cached to avoid an infinite loop',\n        );\n        didWarnUncachedGetSnapshot = true;\n      }\n    }\n  }\n  hook.memoizedState = nextSnapshot;\n  const inst: StoreInstance<T> = {\n    value: nextSnapshot,\n    getSnapshot,\n  };\n  hook.queue = inst;\n  return useSyncExternalStore(hook, inst, subscribe, getSnapshot, nextSnapshot);\n}\n\nfunction updateSyncExternalStore<T>(\n  subscribe: (() => void) => () => void,\n  getSnapshot: () => T,\n): T {\n  const hook = updateWorkInProgressHook();\n  // Read the current snapshot from the store on every render. This breaks the\n  // normal rules of React, and only works because store updates are\n  // always synchronous.\n  const nextSnapshot = getSnapshot();\n  if (__DEV__) {\n    if (!didWarnUncachedGetSnapshot) {\n      if (nextSnapshot !== getSnapshot()) {\n        console.error(\n          'The result of getSnapshot should be cached to avoid an infinite loop',\n        );\n        didWarnUncachedGetSnapshot = true;\n      }\n    }\n  }\n  const prevSnapshot = hook.memoizedState;\n  if (!is(prevSnapshot, nextSnapshot)) {\n    hook.memoizedState = nextSnapshot;\n    markWorkInProgressReceivedUpdate();\n  }\n  const inst = hook.queue;\n  return useSyncExternalStore(hook, inst, subscribe, getSnapshot, nextSnapshot);\n}\n\nfunction useSyncExternalStore<T>(\n  hook: Hook,\n  inst: StoreInstance<T>,\n  subscribe: (() => void) => () => void,\n  getSnapshot: () => T,\n  nextSnapshot: T,\n): T {\n  const fiber = currentlyRenderingFiber;\n  const dispatcher = ReactCurrentDispatcher.current;\n\n  // Track the latest getSnapshot function with a ref. This needs to be updated\n  // in the layout phase so we can access it during the tearing check that\n  // happens on subscribe.\n  // TODO: Circumvent SSR warning\n  dispatcher.useLayoutEffect(() => {\n    inst.value = nextSnapshot;\n    inst.getSnapshot = getSnapshot;\n\n    // Whenever getSnapshot or subscribe changes, we need to check in the\n    // commit phase if there was an interleaved mutation. In concurrent mode\n    // this can happen all the time, but even in synchronous mode, an earlier\n    // effect may have mutated the store.\n    // TODO: Move the tearing checks to an earlier, pre-commit phase so that the\n    // layout effects always observe a consistent tree.\n    if (checkIfSnapshotChanged(inst)) {\n      // Force a re-render.\n      forceStoreRerender(fiber);\n    }\n  }, [subscribe, nextSnapshot, getSnapshot]);\n\n  dispatcher.useEffect(() => {\n    const handleStoreChange = () => {\n      // TODO: Because there is no cross-renderer API for batching updates, it's\n      // up to the consumer of this library to wrap their subscription event\n      // with unstable_batchedUpdates. Should we try to detect when this isn't\n      // the case and print a warning in development?\n\n      // The store changed. Check if the snapshot changed since the last time we\n      // read from the store.\n      if (checkIfSnapshotChanged(inst)) {\n        // Force a re-render.\n        forceStoreRerender(fiber);\n      }\n    };\n    // Check for changes right before subscribing. Subsequent changes will be\n    // detected in the subscription handler.\n    handleStoreChange();\n    // Subscribe to the store and return a clean-up function.\n    return subscribe(handleStoreChange);\n  }, [subscribe]);\n\n  return nextSnapshot;\n}\n\nfunction checkIfSnapshotChanged(inst) {\n  const latestGetSnapshot = inst.getSnapshot;\n  const prevValue = inst.value;\n  try {\n    const nextValue = latestGetSnapshot();\n    return !is(prevValue, nextValue);\n  } catch (error) {\n    return true;\n  }\n}\n\nfunction forceStoreRerender(fiber) {\n  scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);\n}\n\nfunction mountState<S>(\n  initialState: (() => S) | S,\n): [S, Dispatch<BasicStateAction<S>>] {\n  const hook = mountWorkInProgressHook();\n  if (typeof initialState === 'function') {\n    // $FlowFixMe: Flow doesn't like mixed types\n    initialState = initialState();\n  }\n  hook.memoizedState = hook.baseState = initialState;\n  const queue: UpdateQueue<S, BasicStateAction<S>> = {\n    pending: null,\n    interleaved: null,\n    lanes: NoLanes,\n    dispatch: null,\n    lastRenderedReducer: basicStateReducer,\n    lastRenderedState: (initialState: any),\n  };\n  hook.queue = queue;\n  const dispatch: Dispatch<\n    BasicStateAction<S>,\n  > = (queue.dispatch = (dispatchAction.bind(\n    null,\n    currentlyRenderingFiber,\n    queue,\n  ): any));\n  return [hook.memoizedState, dispatch];\n}\n\nfunction updateState<S>(\n  initialState: (() => S) | S,\n): [S, Dispatch<BasicStateAction<S>>] {\n  return updateReducer(basicStateReducer, (initialState: any));\n}\n\nfunction rerenderState<S>(\n  initialState: (() => S) | S,\n): [S, Dispatch<BasicStateAction<S>>] {\n  return rerenderReducer(basicStateReducer, (initialState: any));\n}\n\nfunction pushEffect(tag, create, destroy, deps) {\n  const effect: Effect = {\n    tag,\n    create,\n    destroy,\n    deps,\n    // Circular\n    next: (null: any),\n  };\n  let componentUpdateQueue: null | FunctionComponentUpdateQueue = (currentlyRenderingFiber.updateQueue: any);\n  if (componentUpdateQueue === null) {\n    componentUpdateQueue = createFunctionComponentUpdateQueue();\n    currentlyRenderingFiber.updateQueue = (componentUpdateQueue: any);\n    componentUpdateQueue.lastEffect = effect.next = effect;\n  } else {\n    const lastEffect = componentUpdateQueue.lastEffect;\n    if (lastEffect === null) {\n      componentUpdateQueue.lastEffect = effect.next = effect;\n    } else {\n      const firstEffect = lastEffect.next;\n      lastEffect.next = effect;\n      effect.next = firstEffect;\n      componentUpdateQueue.lastEffect = effect;\n    }\n  }\n  return effect;\n}\n\nlet stackContainsErrorMessage: boolean | null = null;\n\nfunction getCallerStackFrame(): string {\n  const stackFrames = new Error('Error message').stack.split('\\n');\n\n  // Some browsers (e.g. Chrome) include the error message in the stack\n  // but others (e.g. Firefox) do not.\n  if (stackContainsErrorMessage === null) {\n    stackContainsErrorMessage = stackFrames[0].includes('Error message');\n  }\n\n  return stackContainsErrorMessage\n    ? stackFrames.slice(3, 4).join('\\n')\n    : stackFrames.slice(2, 3).join('\\n');\n}\n\nfunction mountRef<T>(initialValue: T): {|current: T|} {\n  const hook = mountWorkInProgressHook();\n  if (enableUseRefAccessWarning) {\n    if (__DEV__) {\n      // Support lazy initialization pattern shown in docs.\n      // We need to store the caller stack frame so that we don't warn on subsequent renders.\n      let hasBeenInitialized = initialValue != null;\n      let lazyInitGetterStack = null;\n      let didCheckForLazyInit = false;\n\n      // Only warn once per component+hook.\n      let didWarnAboutRead = false;\n      let didWarnAboutWrite = false;\n\n      let current = initialValue;\n      const ref = {\n        get current() {\n          if (!hasBeenInitialized) {\n            didCheckForLazyInit = true;\n            lazyInitGetterStack = getCallerStackFrame();\n          } else if (currentlyRenderingFiber !== null && !didWarnAboutRead) {\n            if (\n              lazyInitGetterStack === null ||\n              lazyInitGetterStack !== getCallerStackFrame()\n            ) {\n              didWarnAboutRead = true;\n              console.warn(\n                '%s: Unsafe read of a mutable value during render.\\n\\n' +\n                  'Reading from a ref during render is only safe if:\\n' +\n                  '1. The ref value has not been updated, or\\n' +\n                  '2. The ref holds a lazily-initialized value that is only set once.\\n',\n                getComponentNameFromFiber(currentlyRenderingFiber) || 'Unknown',\n              );\n            }\n          }\n          return current;\n        },\n        set current(value) {\n          if (currentlyRenderingFiber !== null && !didWarnAboutWrite) {\n            if (\n              hasBeenInitialized ||\n              (!hasBeenInitialized && !didCheckForLazyInit)\n            ) {\n              didWarnAboutWrite = true;\n              console.warn(\n                '%s: Unsafe write of a mutable value during render.\\n\\n' +\n                  'Writing to a ref during render is only safe if the ref holds ' +\n                  'a lazily-initialized value that is only set once.\\n',\n                getComponentNameFromFiber(currentlyRenderingFiber) || 'Unknown',\n              );\n            }\n          }\n\n          hasBeenInitialized = true;\n          current = value;\n        },\n      };\n      Object.seal(ref);\n      hook.memoizedState = ref;\n      return ref;\n    } else {\n      const ref = {current: initialValue};\n      hook.memoizedState = ref;\n      return ref;\n    }\n  } else {\n    const ref = {current: initialValue};\n    hook.memoizedState = ref;\n    return ref;\n  }\n}\n\nfunction updateRef<T>(initialValue: T): {|current: T|} {\n  const hook = updateWorkInProgressHook();\n  return hook.memoizedState;\n}\n\nfunction mountEffectImpl(fiberFlags, hookFlags, create, deps): void {\n  const hook = mountWorkInProgressHook();\n  const nextDeps = deps === undefined ? null : deps;\n  currentlyRenderingFiber.flags |= fiberFlags;\n  hook.memoizedState = pushEffect(\n    HookHasEffect | hookFlags,\n    create,\n    undefined,\n    nextDeps,\n  );\n}\n\nfunction updateEffectImpl(fiberFlags, hookFlags, create, deps): void {\n  const hook = updateWorkInProgressHook();\n  const nextDeps = deps === undefined ? null : deps;\n  let destroy = undefined;\n\n  if (currentHook !== null) {\n    const prevEffect = currentHook.memoizedState;\n    destroy = prevEffect.destroy;\n    if (nextDeps !== null) {\n      const prevDeps = prevEffect.deps;\n      if (areHookInputsEqual(nextDeps, prevDeps)) {\n        hook.memoizedState = pushEffect(hookFlags, create, destroy, nextDeps);\n        return;\n      }\n    }\n  }\n\n  currentlyRenderingFiber.flags |= fiberFlags;\n\n  hook.memoizedState = pushEffect(\n    HookHasEffect | hookFlags,\n    create,\n    destroy,\n    nextDeps,\n  );\n}\n\nfunction mountEffect(\n  create: () => (() => void) | void,\n  deps: Array<mixed> | void | null,\n): void {\n  if (__DEV__) {\n    // $FlowExpectedError - jest isn't a global, and isn't recognized outside of tests\n    if ('undefined' !== typeof jest) {\n      warnIfNotCurrentlyActingEffectsInDEV(currentlyRenderingFiber);\n    }\n  }\n  if (\n    __DEV__ &&\n    enableStrictEffects &&\n    (currentlyRenderingFiber.mode & StrictEffectsMode) !== NoMode\n  ) {\n    return mountEffectImpl(\n      MountPassiveDevEffect | PassiveEffect | PassiveStaticEffect,\n      HookPassive,\n      create,\n      deps,\n    );\n  } else {\n    return mountEffectImpl(\n      PassiveEffect | PassiveStaticEffect,\n      HookPassive,\n      create,\n      deps,\n    );\n  }\n}\n\nfunction updateEffect(\n  create: () => (() => void) | void,\n  deps: Array<mixed> | void | null,\n): void {\n  if (__DEV__) {\n    // $FlowExpectedError - jest isn't a global, and isn't recognized outside of tests\n    if ('undefined' !== typeof jest) {\n      warnIfNotCurrentlyActingEffectsInDEV(currentlyRenderingFiber);\n    }\n  }\n  return updateEffectImpl(PassiveEffect, HookPassive, create, deps);\n}\n\nfunction mountLayoutEffect(\n  create: () => (() => void) | void,\n  deps: Array<mixed> | void | null,\n): void {\n  let fiberFlags: Flags = UpdateEffect;\n  if (enableSuspenseLayoutEffectSemantics) {\n    fiberFlags |= LayoutStaticEffect;\n  }\n  if (\n    __DEV__ &&\n    enableStrictEffects &&\n    (currentlyRenderingFiber.mode & StrictEffectsMode) !== NoMode\n  ) {\n    fiberFlags |= MountLayoutDevEffect;\n  }\n  return mountEffectImpl(fiberFlags, HookLayout, create, deps);\n}\n\nfunction updateLayoutEffect(\n  create: () => (() => void) | void,\n  deps: Array<mixed> | void | null,\n): void {\n  return updateEffectImpl(UpdateEffect, HookLayout, create, deps);\n}\n\nfunction imperativeHandleEffect<T>(\n  create: () => T,\n  ref: {|current: T | null|} | ((inst: T | null) => mixed) | null | void,\n) {\n  if (typeof ref === 'function') {\n    const refCallback = ref;\n    const inst = create();\n    refCallback(inst);\n    return () => {\n      refCallback(null);\n    };\n  } else if (ref !== null && ref !== undefined) {\n    const refObject = ref;\n    if (__DEV__) {\n      if (!refObject.hasOwnProperty('current')) {\n        console.error(\n          'Expected useImperativeHandle() first argument to either be a ' +\n            'ref callback or React.createRef() object. Instead received: %s.',\n          'an object with keys {' + Object.keys(refObject).join(', ') + '}',\n        );\n      }\n    }\n    const inst = create();\n    refObject.current = inst;\n    return () => {\n      refObject.current = null;\n    };\n  }\n}\n\nfunction mountImperativeHandle<T>(\n  ref: {|current: T | null|} | ((inst: T | null) => mixed) | null | void,\n  create: () => T,\n  deps: Array<mixed> | void | null,\n): void {\n  if (__DEV__) {\n    if (typeof create !== 'function') {\n      console.error(\n        'Expected useImperativeHandle() second argument to be a function ' +\n          'that creates a handle. Instead received: %s.',\n        create !== null ? typeof create : 'null',\n      );\n    }\n  }\n\n  // TODO: If deps are provided, should we skip comparing the ref itself?\n  const effectDeps =\n    deps !== null && deps !== undefined ? deps.concat([ref]) : null;\n\n  let fiberFlags: Flags = UpdateEffect;\n  if (enableSuspenseLayoutEffectSemantics) {\n    fiberFlags |= LayoutStaticEffect;\n  }\n  if (\n    __DEV__ &&\n    enableStrictEffects &&\n    (currentlyRenderingFiber.mode & StrictEffectsMode) !== NoMode\n  ) {\n    fiberFlags |= MountLayoutDevEffect;\n  }\n  return mountEffectImpl(\n    fiberFlags,\n    HookLayout,\n    imperativeHandleEffect.bind(null, create, ref),\n    effectDeps,\n  );\n}\n\nfunction updateImperativeHandle<T>(\n  ref: {|current: T | null|} | ((inst: T | null) => mixed) | null | void,\n  create: () => T,\n  deps: Array<mixed> | void | null,\n): void {\n  if (__DEV__) {\n    if (typeof create !== 'function') {\n      console.error(\n        'Expected useImperativeHandle() second argument to be a function ' +\n          'that creates a handle. Instead received: %s.',\n        create !== null ? typeof create : 'null',\n      );\n    }\n  }\n\n  // TODO: If deps are provided, should we skip comparing the ref itself?\n  const effectDeps =\n    deps !== null && deps !== undefined ? deps.concat([ref]) : null;\n\n  return updateEffectImpl(\n    UpdateEffect,\n    HookLayout,\n    imperativeHandleEffect.bind(null, create, ref),\n    effectDeps,\n  );\n}\n\nfunction mountDebugValue<T>(value: T, formatterFn: ?(value: T) => mixed): void {\n  // This hook is normally a no-op.\n  // The react-debug-hooks package injects its own implementation\n  // so that e.g. DevTools can display custom hook values.\n}\n\nconst updateDebugValue = mountDebugValue;\n\nfunction mountCallback<T>(callback: T, deps: Array<mixed> | void | null): T {\n  const hook = mountWorkInProgressHook();\n  const nextDeps = deps === undefined ? null : deps;\n  hook.memoizedState = [callback, nextDeps];\n  return callback;\n}\n\nfunction updateCallback<T>(callback: T, deps: Array<mixed> | void | null): T {\n  const hook = updateWorkInProgressHook();\n  const nextDeps = deps === undefined ? null : deps;\n  const prevState = hook.memoizedState;\n  if (prevState !== null) {\n    if (nextDeps !== null) {\n      const prevDeps: Array<mixed> | null = prevState[1];\n      if (areHookInputsEqual(nextDeps, prevDeps)) {\n        return prevState[0];\n      }\n    }\n  }\n  hook.memoizedState = [callback, nextDeps];\n  return callback;\n}\n\nfunction mountMemo<T>(\n  nextCreate: () => T,\n  deps: Array<mixed> | void | null,\n): T {\n  const hook = mountWorkInProgressHook();\n  const nextDeps = deps === undefined ? null : deps;\n  const nextValue = nextCreate();\n  hook.memoizedState = [nextValue, nextDeps];\n  return nextValue;\n}\n\nfunction updateMemo<T>(\n  nextCreate: () => T,\n  deps: Array<mixed> | void | null,\n): T {\n  const hook = updateWorkInProgressHook();\n  const nextDeps = deps === undefined ? null : deps;\n  const prevState = hook.memoizedState;\n  if (prevState !== null) {\n    // Assume these are defined. If they're not, areHookInputsEqual will warn.\n    if (nextDeps !== null) {\n      const prevDeps: Array<mixed> | null = prevState[1];\n      if (areHookInputsEqual(nextDeps, prevDeps)) {\n        return prevState[0];\n      }\n    }\n  }\n  const nextValue = nextCreate();\n  hook.memoizedState = [nextValue, nextDeps];\n  return nextValue;\n}\n\nfunction mountDeferredValue<T>(value: T): T {\n  const [prevValue, setValue] = mountState(value);\n  mountEffect(() => {\n    const prevTransition = ReactCurrentBatchConfig.transition;\n    ReactCurrentBatchConfig.transition = 1;\n    try {\n      setValue(value);\n    } finally {\n      ReactCurrentBatchConfig.transition = prevTransition;\n    }\n  }, [value]);\n  return prevValue;\n}\n\nfunction updateDeferredValue<T>(value: T): T {\n  const [prevValue, setValue] = updateState(value);\n  updateEffect(() => {\n    const prevTransition = ReactCurrentBatchConfig.transition;\n    ReactCurrentBatchConfig.transition = 1;\n    try {\n      setValue(value);\n    } finally {\n      ReactCurrentBatchConfig.transition = prevTransition;\n    }\n  }, [value]);\n  return prevValue;\n}\n\nfunction rerenderDeferredValue<T>(value: T): T {\n  const [prevValue, setValue] = rerenderState(value);\n  updateEffect(() => {\n    const prevTransition = ReactCurrentBatchConfig.transition;\n    ReactCurrentBatchConfig.transition = 1;\n    try {\n      setValue(value);\n    } finally {\n      ReactCurrentBatchConfig.transition = prevTransition;\n    }\n  }, [value]);\n  return prevValue;\n}\n\nfunction startTransition(setPending, callback) {\n  const previousPriority = getCurrentUpdatePriority();\n  setCurrentUpdatePriority(\n    higherEventPriority(previousPriority, ContinuousEventPriority),\n  );\n\n  setPending(true);\n\n  const prevTransition = ReactCurrentBatchConfig.transition;\n  ReactCurrentBatchConfig.transition = 1;\n  try {\n    setPending(false);\n    callback();\n  } finally {\n    setCurrentUpdatePriority(previousPriority);\n    ReactCurrentBatchConfig.transition = prevTransition;\n    if (__DEV__) {\n      if (\n        prevTransition !== 1 &&\n        warnOnSubscriptionInsideStartTransition &&\n        ReactCurrentBatchConfig._updatedFibers\n      ) {\n        const updatedFibersCount = ReactCurrentBatchConfig._updatedFibers.size;\n        if (updatedFibersCount > 10) {\n          console.warn(\n            'Detected a large number of updates inside startTransition. ' +\n              'If this is due to a subscription please re-write it to use React provided hooks. ' +\n              'Otherwise concurrent mode guarantees are off the table.',\n          );\n        }\n        ReactCurrentBatchConfig._updatedFibers.clear();\n      }\n    }\n  }\n}\n\nfunction mountTransition(): [boolean, (() => void) => void] {\n  const [isPending, setPending] = mountState(false);\n  // The `start` method never changes.\n  const start = startTransition.bind(null, setPending);\n  const hook = mountWorkInProgressHook();\n  hook.memoizedState = start;\n  return [isPending, start];\n}\n\nfunction updateTransition(): [boolean, (() => void) => void] {\n  const [isPending] = updateState(false);\n  const hook = updateWorkInProgressHook();\n  const start = hook.memoizedState;\n  return [isPending, start];\n}\n\nfunction rerenderTransition(): [boolean, (() => void) => void] {\n  const [isPending] = rerenderState(false);\n  const hook = updateWorkInProgressHook();\n  const start = hook.memoizedState;\n  return [isPending, start];\n}\n\nlet isUpdatingOpaqueValueInRenderPhase = false;\nexport function getIsUpdatingOpaqueValueInRenderPhaseInDEV(): boolean | void {\n  if (__DEV__) {\n    return isUpdatingOpaqueValueInRenderPhase;\n  }\n}\n\nfunction warnOnOpaqueIdentifierAccessInDEV(fiber) {\n  if (__DEV__) {\n    // TODO: Should warn in effects and callbacks, too\n    const name = getComponentNameFromFiber(fiber) || 'Unknown';\n    if (getIsRendering() && !didWarnAboutUseOpaqueIdentifier[name]) {\n      console.error(\n        'The object passed back from useOpaqueIdentifier is meant to be ' +\n          'passed through to attributes only. Do not read the ' +\n          'value directly.',\n      );\n      didWarnAboutUseOpaqueIdentifier[name] = true;\n    }\n  }\n}\n\nfunction mountOpaqueIdentifier(): OpaqueIDType | void {\n  const makeId = __DEV__\n    ? makeClientIdInDEV.bind(\n        null,\n        warnOnOpaqueIdentifierAccessInDEV.bind(null, currentlyRenderingFiber),\n      )\n    : makeClientId;\n\n  if (getIsHydrating()) {\n    let didUpgrade = false;\n    const fiber = currentlyRenderingFiber;\n    const readValue = () => {\n      if (!didUpgrade) {\n        // Only upgrade once. This works even inside the render phase because\n        // the update is added to a shared queue, which outlasts the\n        // in-progress render.\n        didUpgrade = true;\n        if (__DEV__) {\n          isUpdatingOpaqueValueInRenderPhase = true;\n          setId(makeId());\n          isUpdatingOpaqueValueInRenderPhase = false;\n          warnOnOpaqueIdentifierAccessInDEV(fiber);\n        } else {\n          setId(makeId());\n        }\n      }\n      invariant(\n        false,\n        'The object passed back from useOpaqueIdentifier is meant to be ' +\n          'passed through to attributes only. Do not read the value directly.',\n      );\n    };\n    const id = makeOpaqueHydratingObject(readValue);\n\n    const setId = mountState(id)[1];\n\n    if ((currentlyRenderingFiber.mode & ConcurrentMode) === NoMode) {\n      if (\n        __DEV__ &&\n        enableStrictEffects &&\n        (currentlyRenderingFiber.mode & StrictEffectsMode) === NoMode\n      ) {\n        currentlyRenderingFiber.flags |= MountPassiveDevEffect | PassiveEffect;\n      } else {\n        currentlyRenderingFiber.flags |= PassiveEffect;\n      }\n      pushEffect(\n        HookHasEffect | HookPassive,\n        () => {\n          setId(makeId());\n        },\n        undefined,\n        null,\n      );\n    }\n    return id;\n  } else {\n    const id = makeId();\n    mountState(id);\n    return id;\n  }\n}\n\nfunction updateOpaqueIdentifier(): OpaqueIDType | void {\n  const id = updateState(undefined)[0];\n  return id;\n}\n\nfunction rerenderOpaqueIdentifier(): OpaqueIDType | void {\n  const id = rerenderState(undefined)[0];\n  return id;\n}\n\nfunction mountRefresh() {\n  const hook = mountWorkInProgressHook();\n  const refresh = (hook.memoizedState = refreshCache.bind(\n    null,\n    currentlyRenderingFiber,\n  ));\n  return refresh;\n}\n\nfunction updateRefresh() {\n  const hook = updateWorkInProgressHook();\n  return hook.memoizedState;\n}\n\nfunction refreshCache<T>(fiber: Fiber, seedKey: ?() => T, seedValue: T) {\n  // TODO: Does Cache work in legacy mode? Should decide and write a test.\n  // TODO: Consider warning if the refresh is at discrete priority, or if we\n  // otherwise suspect that it wasn't batched properly.\n  let provider = fiber.return;\n  while (provider !== null) {\n    switch (provider.tag) {\n      case CacheComponent:\n      case HostRoot: {\n        const lane = requestUpdateLane(provider);\n        const eventTime = requestEventTime();\n        const root = scheduleUpdateOnFiber(provider, lane, eventTime);\n        if (root !== null) {\n          entangleTransitions(root, provider, lane);\n        }\n\n        const seededCache = new Map();\n        if (seedKey !== null && seedKey !== undefined && root !== null) {\n          // Seed the cache with the value passed by the caller. This could be\n          // from a server mutation, or it could be a streaming response.\n          seededCache.set(seedKey, seedValue);\n        }\n\n        // Schedule an update on the cache boundary to trigger a refresh.\n        const refreshUpdate = createUpdate(eventTime, lane);\n        const payload = {\n          cache: seededCache,\n        };\n        refreshUpdate.payload = payload;\n        enqueueUpdate(provider, refreshUpdate, lane);\n        return;\n      }\n    }\n    provider = provider.return;\n  }\n  // TODO: Warn if unmounted?\n}\n\nfunction dispatchAction<S, A>(\n  fiber: Fiber,\n  queue: UpdateQueue<S, A>,\n  action: A,\n) {\n  if (__DEV__) {\n    if (typeof arguments[3] === 'function') {\n      console.error(\n        \"State updates from the useState() and useReducer() Hooks don't support the \" +\n          'second callback argument. To execute a side effect after ' +\n          'rendering, declare it in the component body with useEffect().',\n      );\n    }\n  }\n\n  const eventTime = requestEventTime();\n  const lane = requestUpdateLane(fiber);\n\n  const update: Update<S, A> = {\n    lane,\n    action,\n    eagerReducer: null,\n    eagerState: null,\n    next: (null: any),\n  };\n\n  const alternate = fiber.alternate;\n  if (\n    fiber === currentlyRenderingFiber ||\n    (alternate !== null && alternate === currentlyRenderingFiber)\n  ) {\n    // This is a render phase update. Stash it in a lazily-created map of\n    // queue -> linked list of updates. After this render pass, we'll restart\n    // and apply the stashed updates on top of the work-in-progress hook.\n    didScheduleRenderPhaseUpdateDuringThisPass = didScheduleRenderPhaseUpdate = true;\n    const pending = queue.pending;\n    if (pending === null) {\n      // This is the first update. Create a circular list.\n      update.next = update;\n    } else {\n      update.next = pending.next;\n      pending.next = update;\n    }\n    queue.pending = update;\n  } else {\n    if (isInterleavedUpdate(fiber, lane)) {\n      const interleaved = queue.interleaved;\n      if (interleaved === null) {\n        // This is the first update. Create a circular list.\n        update.next = update;\n        // At the end of the current render, this queue's interleaved updates will\n        // be transferred to the pending queue.\n        pushInterleavedQueue(queue);\n      } else {\n        update.next = interleaved.next;\n        interleaved.next = update;\n      }\n      queue.interleaved = update;\n    } else {\n      const pending = queue.pending;\n      if (pending === null) {\n        // This is the first update. Create a circular list.\n        update.next = update;\n      } else {\n        update.next = pending.next;\n        pending.next = update;\n      }\n      queue.pending = update;\n    }\n\n    if (\n      fiber.lanes === NoLanes &&\n      (alternate === null || alternate.lanes === NoLanes)\n    ) {\n      // The queue is currently empty, which means we can eagerly compute the\n      // next state before entering the render phase. If the new state is the\n      // same as the current state, we may be able to bail out entirely.\n      const lastRenderedReducer = queue.lastRenderedReducer;\n      if (lastRenderedReducer !== null) {\n        let prevDispatcher;\n        if (__DEV__) {\n          prevDispatcher = ReactCurrentDispatcher.current;\n          ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\n        }\n        try {\n          const currentState: S = (queue.lastRenderedState: any);\n          const eagerState = lastRenderedReducer(currentState, action);\n          // Stash the eagerly computed state, and the reducer used to compute\n          // it, on the update object. If the reducer hasn't changed by the\n          // time we enter the render phase, then the eager state can be used\n          // without calling the reducer again.\n          update.eagerReducer = lastRenderedReducer;\n          update.eagerState = eagerState;\n          if (is(eagerState, currentState)) {\n            // Fast path. We can bail out without scheduling React to re-render.\n            // It's still possible that we'll need to rebase this update later,\n            // if the component re-renders for a different reason and by that\n            // time the reducer has changed.\n            return;\n          }\n        } catch (error) {\n          // Suppress the error. It will throw again in the render phase.\n        } finally {\n          if (__DEV__) {\n            ReactCurrentDispatcher.current = prevDispatcher;\n          }\n        }\n      }\n    }\n    if (__DEV__) {\n      // $FlowExpectedError - jest isn't a global, and isn't recognized outside of tests\n      if ('undefined' !== typeof jest) {\n        warnIfNotCurrentlyActingUpdatesInDev(fiber);\n      }\n    }\n    const root = scheduleUpdateOnFiber(fiber, lane, eventTime);\n\n    if (isTransitionLane(lane) && root !== null) {\n      let queueLanes = queue.lanes;\n\n      // If any entangled lanes are no longer pending on the root, then they\n      // must have finished. We can remove them from the shared queue, which\n      // represents a superset of the actually pending lanes. In some cases we\n      // may entangle more than we need to, but that's OK. In fact it's worse if\n      // we *don't* entangle when we should.\n      queueLanes = intersectLanes(queueLanes, root.pendingLanes);\n\n      // Entangle the new transition lane with the other transition lanes.\n      const newQueueLanes = mergeLanes(queueLanes, lane);\n      queue.lanes = newQueueLanes;\n      // Even if queue.lanes already include lane, we don't know for certain if\n      // the lane finished since the last time we entangled it. So we need to\n      // entangle it again, just to be sure.\n      markRootEntangled(root, newQueueLanes);\n    }\n  }\n\n  if (__DEV__) {\n    if (enableDebugTracing) {\n      if (fiber.mode & DebugTracingMode) {\n        const name = getComponentNameFromFiber(fiber) || 'Unknown';\n        logStateUpdateScheduled(name, lane, action);\n      }\n    }\n  }\n\n  if (enableSchedulingProfiler) {\n    markStateUpdateScheduled(fiber, lane);\n  }\n}\n\nfunction getCacheForType<T>(resourceType: () => T): T {\n  if (!enableCache) {\n    invariant(false, 'Not implemented.');\n  }\n  const cache: Cache = readContext(CacheContext);\n  let cacheForType: T | void = (cache.get(resourceType): any);\n  if (cacheForType === undefined) {\n    cacheForType = resourceType();\n    cache.set(resourceType, cacheForType);\n  }\n  return cacheForType;\n}\n\nexport const ContextOnlyDispatcher: Dispatcher = {\n  readContext,\n\n  useCallback: throwInvalidHookError,\n  useContext: throwInvalidHookError,\n  useEffect: throwInvalidHookError,\n  useImperativeHandle: throwInvalidHookError,\n  useLayoutEffect: throwInvalidHookError,\n  useMemo: throwInvalidHookError,\n  useReducer: throwInvalidHookError,\n  useRef: throwInvalidHookError,\n  useState: throwInvalidHookError,\n  useDebugValue: throwInvalidHookError,\n  useDeferredValue: throwInvalidHookError,\n  useTransition: throwInvalidHookError,\n  useMutableSource: throwInvalidHookError,\n  useSyncExternalStore: throwInvalidHookError,\n  useOpaqueIdentifier: throwInvalidHookError,\n\n  unstable_isNewReconciler: enableNewReconciler,\n};\nif (enableCache) {\n  (ContextOnlyDispatcher: Dispatcher).getCacheForType = getCacheForType;\n  (ContextOnlyDispatcher: Dispatcher).useCacheRefresh = throwInvalidHookError;\n}\n\nconst HooksDispatcherOnMount: Dispatcher = {\n  readContext,\n\n  useCallback: mountCallback,\n  useContext: readContext,\n  useEffect: mountEffect,\n  useImperativeHandle: mountImperativeHandle,\n  useLayoutEffect: mountLayoutEffect,\n  useMemo: mountMemo,\n  useReducer: mountReducer,\n  useRef: mountRef,\n  useState: mountState,\n  useDebugValue: mountDebugValue,\n  useDeferredValue: mountDeferredValue,\n  useTransition: mountTransition,\n  useMutableSource: mountMutableSource,\n  useSyncExternalStore: mountSyncExternalStore,\n  useOpaqueIdentifier: mountOpaqueIdentifier,\n\n  unstable_isNewReconciler: enableNewReconciler,\n};\nif (enableCache) {\n  (HooksDispatcherOnMount: Dispatcher).getCacheForType = getCacheForType;\n  (HooksDispatcherOnMount: Dispatcher).useCacheRefresh = mountRefresh;\n}\n\nconst HooksDispatcherOnUpdate: Dispatcher = {\n  readContext,\n\n  useCallback: updateCallback,\n  useContext: readContext,\n  useEffect: updateEffect,\n  useImperativeHandle: updateImperativeHandle,\n  useLayoutEffect: updateLayoutEffect,\n  useMemo: updateMemo,\n  useReducer: updateReducer,\n  useRef: updateRef,\n  useState: updateState,\n  useDebugValue: updateDebugValue,\n  useDeferredValue: updateDeferredValue,\n  useTransition: updateTransition,\n  useMutableSource: updateMutableSource,\n  useSyncExternalStore: updateSyncExternalStore,\n  useOpaqueIdentifier: updateOpaqueIdentifier,\n\n  unstable_isNewReconciler: enableNewReconciler,\n};\nif (enableCache) {\n  (HooksDispatcherOnUpdate: Dispatcher).getCacheForType = getCacheForType;\n  (HooksDispatcherOnUpdate: Dispatcher).useCacheRefresh = updateRefresh;\n}\n\nconst HooksDispatcherOnRerender: Dispatcher = {\n  readContext,\n\n  useCallback: updateCallback,\n  useContext: readContext,\n  useEffect: updateEffect,\n  useImperativeHandle: updateImperativeHandle,\n  useLayoutEffect: updateLayoutEffect,\n  useMemo: updateMemo,\n  useReducer: rerenderReducer,\n  useRef: updateRef,\n  useState: rerenderState,\n  useDebugValue: updateDebugValue,\n  useDeferredValue: rerenderDeferredValue,\n  useTransition: rerenderTransition,\n  useMutableSource: updateMutableSource,\n  useSyncExternalStore: mountSyncExternalStore,\n  useOpaqueIdentifier: rerenderOpaqueIdentifier,\n\n  unstable_isNewReconciler: enableNewReconciler,\n};\nif (enableCache) {\n  (HooksDispatcherOnRerender: Dispatcher).getCacheForType = getCacheForType;\n  (HooksDispatcherOnRerender: Dispatcher).useCacheRefresh = updateRefresh;\n}\n\nlet HooksDispatcherOnMountInDEV: Dispatcher | null = null;\nlet HooksDispatcherOnMountWithHookTypesInDEV: Dispatcher | null = null;\nlet HooksDispatcherOnUpdateInDEV: Dispatcher | null = null;\nlet HooksDispatcherOnRerenderInDEV: Dispatcher | null = null;\nlet InvalidNestedHooksDispatcherOnMountInDEV: Dispatcher | null = null;\nlet InvalidNestedHooksDispatcherOnUpdateInDEV: Dispatcher | null = null;\nlet InvalidNestedHooksDispatcherOnRerenderInDEV: Dispatcher | null = null;\n\nif (__DEV__) {\n  const warnInvalidContextAccess = () => {\n    console.error(\n      'Context can only be read while React is rendering. ' +\n        'In classes, you can read it in the render method or getDerivedStateFromProps. ' +\n        'In function components, you can read it directly in the function body, but not ' +\n        'inside Hooks like useReducer() or useMemo().',\n    );\n  };\n\n  const warnInvalidHookAccess = () => {\n    console.error(\n      'Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. ' +\n        'You can only call Hooks at the top level of your React function. ' +\n        'For more information, see ' +\n        'https://reactjs.org/link/rules-of-hooks',\n    );\n  };\n\n  HooksDispatcherOnMountInDEV = {\n    readContext<T>(context: ReactContext<T>): T {\n      return readContext(context);\n    },\n    useCallback<T>(callback: T, deps: Array<mixed> | void | null): T {\n      currentHookNameInDev = 'useCallback';\n      mountHookTypesDev();\n      checkDepsAreArrayDev(deps);\n      return mountCallback(callback, deps);\n    },\n    useContext<T>(context: ReactContext<T>): T {\n      currentHookNameInDev = 'useContext';\n      mountHookTypesDev();\n      return readContext(context);\n    },\n    useEffect(\n      create: () => (() => void) | void,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useEffect';\n      mountHookTypesDev();\n      checkDepsAreArrayDev(deps);\n      return mountEffect(create, deps);\n    },\n    useImperativeHandle<T>(\n      ref: {|current: T | null|} | ((inst: T | null) => mixed) | null | void,\n      create: () => T,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useImperativeHandle';\n      mountHookTypesDev();\n      checkDepsAreArrayDev(deps);\n      return mountImperativeHandle(ref, create, deps);\n    },\n    useLayoutEffect(\n      create: () => (() => void) | void,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useLayoutEffect';\n      mountHookTypesDev();\n      checkDepsAreArrayDev(deps);\n      return mountLayoutEffect(create, deps);\n    },\n    useMemo<T>(create: () => T, deps: Array<mixed> | void | null): T {\n      currentHookNameInDev = 'useMemo';\n      mountHookTypesDev();\n      checkDepsAreArrayDev(deps);\n      const prevDispatcher = ReactCurrentDispatcher.current;\n      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;\n      try {\n        return mountMemo(create, deps);\n      } finally {\n        ReactCurrentDispatcher.current = prevDispatcher;\n      }\n    },\n    useReducer<S, I, A>(\n      reducer: (S, A) => S,\n      initialArg: I,\n      init?: I => S,\n    ): [S, Dispatch<A>] {\n      currentHookNameInDev = 'useReducer';\n      mountHookTypesDev();\n      const prevDispatcher = ReactCurrentDispatcher.current;\n      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;\n      try {\n        return mountReducer(reducer, initialArg, init);\n      } finally {\n        ReactCurrentDispatcher.current = prevDispatcher;\n      }\n    },\n    useRef<T>(initialValue: T): {|current: T|} {\n      currentHookNameInDev = 'useRef';\n      mountHookTypesDev();\n      return mountRef(initialValue);\n    },\n    useState<S>(\n      initialState: (() => S) | S,\n    ): [S, Dispatch<BasicStateAction<S>>] {\n      currentHookNameInDev = 'useState';\n      mountHookTypesDev();\n      const prevDispatcher = ReactCurrentDispatcher.current;\n      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;\n      try {\n        return mountState(initialState);\n      } finally {\n        ReactCurrentDispatcher.current = prevDispatcher;\n      }\n    },\n    useDebugValue<T>(value: T, formatterFn: ?(value: T) => mixed): void {\n      currentHookNameInDev = 'useDebugValue';\n      mountHookTypesDev();\n      return mountDebugValue(value, formatterFn);\n    },\n    useDeferredValue<T>(value: T): T {\n      currentHookNameInDev = 'useDeferredValue';\n      mountHookTypesDev();\n      return mountDeferredValue(value);\n    },\n    useTransition(): [boolean, (() => void) => void] {\n      currentHookNameInDev = 'useTransition';\n      mountHookTypesDev();\n      return mountTransition();\n    },\n    useMutableSource<Source, Snapshot>(\n      source: MutableSource<Source>,\n      getSnapshot: MutableSourceGetSnapshotFn<Source, Snapshot>,\n      subscribe: MutableSourceSubscribeFn<Source, Snapshot>,\n    ): Snapshot {\n      currentHookNameInDev = 'useMutableSource';\n      mountHookTypesDev();\n      return mountMutableSource(source, getSnapshot, subscribe);\n    },\n    useSyncExternalStore<T>(\n      subscribe: (() => void) => () => void,\n      getSnapshot: () => T,\n    ): T {\n      currentHookNameInDev = 'useSyncExternalStore';\n      mountHookTypesDev();\n      return mountSyncExternalStore(subscribe, getSnapshot);\n    },\n    useOpaqueIdentifier(): OpaqueIDType | void {\n      currentHookNameInDev = 'useOpaqueIdentifier';\n      mountHookTypesDev();\n      return mountOpaqueIdentifier();\n    },\n\n    unstable_isNewReconciler: enableNewReconciler,\n  };\n  if (enableCache) {\n    (HooksDispatcherOnMountInDEV: Dispatcher).getCacheForType = getCacheForType;\n    (HooksDispatcherOnMountInDEV: Dispatcher).useCacheRefresh = function useCacheRefresh() {\n      currentHookNameInDev = 'useCacheRefresh';\n      mountHookTypesDev();\n      return mountRefresh();\n    };\n  }\n\n  HooksDispatcherOnMountWithHookTypesInDEV = {\n    readContext<T>(context: ReactContext<T>): T {\n      return readContext(context);\n    },\n    useCallback<T>(callback: T, deps: Array<mixed> | void | null): T {\n      currentHookNameInDev = 'useCallback';\n      updateHookTypesDev();\n      return mountCallback(callback, deps);\n    },\n    useContext<T>(context: ReactContext<T>): T {\n      currentHookNameInDev = 'useContext';\n      updateHookTypesDev();\n      return readContext(context);\n    },\n    useEffect(\n      create: () => (() => void) | void,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useEffect';\n      updateHookTypesDev();\n      return mountEffect(create, deps);\n    },\n    useImperativeHandle<T>(\n      ref: {|current: T | null|} | ((inst: T | null) => mixed) | null | void,\n      create: () => T,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useImperativeHandle';\n      updateHookTypesDev();\n      return mountImperativeHandle(ref, create, deps);\n    },\n    useLayoutEffect(\n      create: () => (() => void) | void,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useLayoutEffect';\n      updateHookTypesDev();\n      return mountLayoutEffect(create, deps);\n    },\n    useMemo<T>(create: () => T, deps: Array<mixed> | void | null): T {\n      currentHookNameInDev = 'useMemo';\n      updateHookTypesDev();\n      const prevDispatcher = ReactCurrentDispatcher.current;\n      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;\n      try {\n        return mountMemo(create, deps);\n      } finally {\n        ReactCurrentDispatcher.current = prevDispatcher;\n      }\n    },\n    useReducer<S, I, A>(\n      reducer: (S, A) => S,\n      initialArg: I,\n      init?: I => S,\n    ): [S, Dispatch<A>] {\n      currentHookNameInDev = 'useReducer';\n      updateHookTypesDev();\n      const prevDispatcher = ReactCurrentDispatcher.current;\n      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;\n      try {\n        return mountReducer(reducer, initialArg, init);\n      } finally {\n        ReactCurrentDispatcher.current = prevDispatcher;\n      }\n    },\n    useRef<T>(initialValue: T): {|current: T|} {\n      currentHookNameInDev = 'useRef';\n      updateHookTypesDev();\n      return mountRef(initialValue);\n    },\n    useState<S>(\n      initialState: (() => S) | S,\n    ): [S, Dispatch<BasicStateAction<S>>] {\n      currentHookNameInDev = 'useState';\n      updateHookTypesDev();\n      const prevDispatcher = ReactCurrentDispatcher.current;\n      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;\n      try {\n        return mountState(initialState);\n      } finally {\n        ReactCurrentDispatcher.current = prevDispatcher;\n      }\n    },\n    useDebugValue<T>(value: T, formatterFn: ?(value: T) => mixed): void {\n      currentHookNameInDev = 'useDebugValue';\n      updateHookTypesDev();\n      return mountDebugValue(value, formatterFn);\n    },\n    useDeferredValue<T>(value: T): T {\n      currentHookNameInDev = 'useDeferredValue';\n      updateHookTypesDev();\n      return mountDeferredValue(value);\n    },\n    useTransition(): [boolean, (() => void) => void] {\n      currentHookNameInDev = 'useTransition';\n      updateHookTypesDev();\n      return mountTransition();\n    },\n    useMutableSource<Source, Snapshot>(\n      source: MutableSource<Source>,\n      getSnapshot: MutableSourceGetSnapshotFn<Source, Snapshot>,\n      subscribe: MutableSourceSubscribeFn<Source, Snapshot>,\n    ): Snapshot {\n      currentHookNameInDev = 'useMutableSource';\n      updateHookTypesDev();\n      return mountMutableSource(source, getSnapshot, subscribe);\n    },\n    useSyncExternalStore<T>(\n      subscribe: (() => void) => () => void,\n      getSnapshot: () => T,\n    ): T {\n      currentHookNameInDev = 'useSyncExternalStore';\n      updateHookTypesDev();\n      return mountSyncExternalStore(subscribe, getSnapshot);\n    },\n    useOpaqueIdentifier(): OpaqueIDType | void {\n      currentHookNameInDev = 'useOpaqueIdentifier';\n      updateHookTypesDev();\n      return mountOpaqueIdentifier();\n    },\n\n    unstable_isNewReconciler: enableNewReconciler,\n  };\n  if (enableCache) {\n    (HooksDispatcherOnMountWithHookTypesInDEV: Dispatcher).getCacheForType = getCacheForType;\n    (HooksDispatcherOnMountWithHookTypesInDEV: Dispatcher).useCacheRefresh = function useCacheRefresh() {\n      currentHookNameInDev = 'useCacheRefresh';\n      updateHookTypesDev();\n      return mountRefresh();\n    };\n  }\n\n  HooksDispatcherOnUpdateInDEV = {\n    readContext<T>(context: ReactContext<T>): T {\n      return readContext(context);\n    },\n    useCallback<T>(callback: T, deps: Array<mixed> | void | null): T {\n      currentHookNameInDev = 'useCallback';\n      updateHookTypesDev();\n      return updateCallback(callback, deps);\n    },\n    useContext<T>(context: ReactContext<T>): T {\n      currentHookNameInDev = 'useContext';\n      updateHookTypesDev();\n      return readContext(context);\n    },\n    useEffect(\n      create: () => (() => void) | void,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useEffect';\n      updateHookTypesDev();\n      return updateEffect(create, deps);\n    },\n    useImperativeHandle<T>(\n      ref: {|current: T | null|} | ((inst: T | null) => mixed) | null | void,\n      create: () => T,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useImperativeHandle';\n      updateHookTypesDev();\n      return updateImperativeHandle(ref, create, deps);\n    },\n    useLayoutEffect(\n      create: () => (() => void) | void,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useLayoutEffect';\n      updateHookTypesDev();\n      return updateLayoutEffect(create, deps);\n    },\n    useMemo<T>(create: () => T, deps: Array<mixed> | void | null): T {\n      currentHookNameInDev = 'useMemo';\n      updateHookTypesDev();\n      const prevDispatcher = ReactCurrentDispatcher.current;\n      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\n      try {\n        return updateMemo(create, deps);\n      } finally {\n        ReactCurrentDispatcher.current = prevDispatcher;\n      }\n    },\n    useReducer<S, I, A>(\n      reducer: (S, A) => S,\n      initialArg: I,\n      init?: I => S,\n    ): [S, Dispatch<A>] {\n      currentHookNameInDev = 'useReducer';\n      updateHookTypesDev();\n      const prevDispatcher = ReactCurrentDispatcher.current;\n      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\n      try {\n        return updateReducer(reducer, initialArg, init);\n      } finally {\n        ReactCurrentDispatcher.current = prevDispatcher;\n      }\n    },\n    useRef<T>(initialValue: T): {|current: T|} {\n      currentHookNameInDev = 'useRef';\n      updateHookTypesDev();\n      return updateRef(initialValue);\n    },\n    useState<S>(\n      initialState: (() => S) | S,\n    ): [S, Dispatch<BasicStateAction<S>>] {\n      currentHookNameInDev = 'useState';\n      updateHookTypesDev();\n      const prevDispatcher = ReactCurrentDispatcher.current;\n      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\n      try {\n        return updateState(initialState);\n      } finally {\n        ReactCurrentDispatcher.current = prevDispatcher;\n      }\n    },\n    useDebugValue<T>(value: T, formatterFn: ?(value: T) => mixed): void {\n      currentHookNameInDev = 'useDebugValue';\n      updateHookTypesDev();\n      return updateDebugValue(value, formatterFn);\n    },\n    useDeferredValue<T>(value: T): T {\n      currentHookNameInDev = 'useDeferredValue';\n      updateHookTypesDev();\n      return updateDeferredValue(value);\n    },\n    useTransition(): [boolean, (() => void) => void] {\n      currentHookNameInDev = 'useTransition';\n      updateHookTypesDev();\n      return updateTransition();\n    },\n    useMutableSource<Source, Snapshot>(\n      source: MutableSource<Source>,\n      getSnapshot: MutableSourceGetSnapshotFn<Source, Snapshot>,\n      subscribe: MutableSourceSubscribeFn<Source, Snapshot>,\n    ): Snapshot {\n      currentHookNameInDev = 'useMutableSource';\n      updateHookTypesDev();\n      return updateMutableSource(source, getSnapshot, subscribe);\n    },\n    useSyncExternalStore<T>(\n      subscribe: (() => void) => () => void,\n      getSnapshot: () => T,\n    ): T {\n      currentHookNameInDev = 'useSyncExternalStore';\n      updateHookTypesDev();\n      return updateSyncExternalStore(subscribe, getSnapshot);\n    },\n    useOpaqueIdentifier(): OpaqueIDType | void {\n      currentHookNameInDev = 'useOpaqueIdentifier';\n      updateHookTypesDev();\n      return updateOpaqueIdentifier();\n    },\n\n    unstable_isNewReconciler: enableNewReconciler,\n  };\n  if (enableCache) {\n    (HooksDispatcherOnUpdateInDEV: Dispatcher).getCacheForType = getCacheForType;\n    (HooksDispatcherOnUpdateInDEV: Dispatcher).useCacheRefresh = function useCacheRefresh() {\n      currentHookNameInDev = 'useCacheRefresh';\n      updateHookTypesDev();\n      return updateRefresh();\n    };\n  }\n\n  HooksDispatcherOnRerenderInDEV = {\n    readContext<T>(context: ReactContext<T>): T {\n      return readContext(context);\n    },\n\n    useCallback<T>(callback: T, deps: Array<mixed> | void | null): T {\n      currentHookNameInDev = 'useCallback';\n      updateHookTypesDev();\n      return updateCallback(callback, deps);\n    },\n    useContext<T>(context: ReactContext<T>): T {\n      currentHookNameInDev = 'useContext';\n      updateHookTypesDev();\n      return readContext(context);\n    },\n    useEffect(\n      create: () => (() => void) | void,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useEffect';\n      updateHookTypesDev();\n      return updateEffect(create, deps);\n    },\n    useImperativeHandle<T>(\n      ref: {|current: T | null|} | ((inst: T | null) => mixed) | null | void,\n      create: () => T,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useImperativeHandle';\n      updateHookTypesDev();\n      return updateImperativeHandle(ref, create, deps);\n    },\n    useLayoutEffect(\n      create: () => (() => void) | void,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useLayoutEffect';\n      updateHookTypesDev();\n      return updateLayoutEffect(create, deps);\n    },\n    useMemo<T>(create: () => T, deps: Array<mixed> | void | null): T {\n      currentHookNameInDev = 'useMemo';\n      updateHookTypesDev();\n      const prevDispatcher = ReactCurrentDispatcher.current;\n      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnRerenderInDEV;\n      try {\n        return updateMemo(create, deps);\n      } finally {\n        ReactCurrentDispatcher.current = prevDispatcher;\n      }\n    },\n    useReducer<S, I, A>(\n      reducer: (S, A) => S,\n      initialArg: I,\n      init?: I => S,\n    ): [S, Dispatch<A>] {\n      currentHookNameInDev = 'useReducer';\n      updateHookTypesDev();\n      const prevDispatcher = ReactCurrentDispatcher.current;\n      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnRerenderInDEV;\n      try {\n        return rerenderReducer(reducer, initialArg, init);\n      } finally {\n        ReactCurrentDispatcher.current = prevDispatcher;\n      }\n    },\n    useRef<T>(initialValue: T): {|current: T|} {\n      currentHookNameInDev = 'useRef';\n      updateHookTypesDev();\n      return updateRef(initialValue);\n    },\n    useState<S>(\n      initialState: (() => S) | S,\n    ): [S, Dispatch<BasicStateAction<S>>] {\n      currentHookNameInDev = 'useState';\n      updateHookTypesDev();\n      const prevDispatcher = ReactCurrentDispatcher.current;\n      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnRerenderInDEV;\n      try {\n        return rerenderState(initialState);\n      } finally {\n        ReactCurrentDispatcher.current = prevDispatcher;\n      }\n    },\n    useDebugValue<T>(value: T, formatterFn: ?(value: T) => mixed): void {\n      currentHookNameInDev = 'useDebugValue';\n      updateHookTypesDev();\n      return updateDebugValue(value, formatterFn);\n    },\n    useDeferredValue<T>(value: T): T {\n      currentHookNameInDev = 'useDeferredValue';\n      updateHookTypesDev();\n      return rerenderDeferredValue(value);\n    },\n    useTransition(): [boolean, (() => void) => void] {\n      currentHookNameInDev = 'useTransition';\n      updateHookTypesDev();\n      return rerenderTransition();\n    },\n    useMutableSource<Source, Snapshot>(\n      source: MutableSource<Source>,\n      getSnapshot: MutableSourceGetSnapshotFn<Source, Snapshot>,\n      subscribe: MutableSourceSubscribeFn<Source, Snapshot>,\n    ): Snapshot {\n      currentHookNameInDev = 'useMutableSource';\n      updateHookTypesDev();\n      return updateMutableSource(source, getSnapshot, subscribe);\n    },\n    useSyncExternalStore<T>(\n      subscribe: (() => void) => () => void,\n      getSnapshot: () => T,\n    ): T {\n      currentHookNameInDev = 'useSyncExternalStore';\n      updateHookTypesDev();\n      return updateSyncExternalStore(subscribe, getSnapshot);\n    },\n    useOpaqueIdentifier(): OpaqueIDType | void {\n      currentHookNameInDev = 'useOpaqueIdentifier';\n      updateHookTypesDev();\n      return rerenderOpaqueIdentifier();\n    },\n\n    unstable_isNewReconciler: enableNewReconciler,\n  };\n  if (enableCache) {\n    (HooksDispatcherOnRerenderInDEV: Dispatcher).getCacheForType = getCacheForType;\n    (HooksDispatcherOnRerenderInDEV: Dispatcher).useCacheRefresh = function useCacheRefresh() {\n      currentHookNameInDev = 'useCacheRefresh';\n      updateHookTypesDev();\n      return updateRefresh();\n    };\n  }\n\n  InvalidNestedHooksDispatcherOnMountInDEV = {\n    readContext<T>(context: ReactContext<T>): T {\n      warnInvalidContextAccess();\n      return readContext(context);\n    },\n    useCallback<T>(callback: T, deps: Array<mixed> | void | null): T {\n      currentHookNameInDev = 'useCallback';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      return mountCallback(callback, deps);\n    },\n    useContext<T>(context: ReactContext<T>): T {\n      currentHookNameInDev = 'useContext';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      return readContext(context);\n    },\n    useEffect(\n      create: () => (() => void) | void,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useEffect';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      return mountEffect(create, deps);\n    },\n    useImperativeHandle<T>(\n      ref: {|current: T | null|} | ((inst: T | null) => mixed) | null | void,\n      create: () => T,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useImperativeHandle';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      return mountImperativeHandle(ref, create, deps);\n    },\n    useLayoutEffect(\n      create: () => (() => void) | void,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useLayoutEffect';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      return mountLayoutEffect(create, deps);\n    },\n    useMemo<T>(create: () => T, deps: Array<mixed> | void | null): T {\n      currentHookNameInDev = 'useMemo';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      const prevDispatcher = ReactCurrentDispatcher.current;\n      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;\n      try {\n        return mountMemo(create, deps);\n      } finally {\n        ReactCurrentDispatcher.current = prevDispatcher;\n      }\n    },\n    useReducer<S, I, A>(\n      reducer: (S, A) => S,\n      initialArg: I,\n      init?: I => S,\n    ): [S, Dispatch<A>] {\n      currentHookNameInDev = 'useReducer';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      const prevDispatcher = ReactCurrentDispatcher.current;\n      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;\n      try {\n        return mountReducer(reducer, initialArg, init);\n      } finally {\n        ReactCurrentDispatcher.current = prevDispatcher;\n      }\n    },\n    useRef<T>(initialValue: T): {|current: T|} {\n      currentHookNameInDev = 'useRef';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      return mountRef(initialValue);\n    },\n    useState<S>(\n      initialState: (() => S) | S,\n    ): [S, Dispatch<BasicStateAction<S>>] {\n      currentHookNameInDev = 'useState';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      const prevDispatcher = ReactCurrentDispatcher.current;\n      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;\n      try {\n        return mountState(initialState);\n      } finally {\n        ReactCurrentDispatcher.current = prevDispatcher;\n      }\n    },\n    useDebugValue<T>(value: T, formatterFn: ?(value: T) => mixed): void {\n      currentHookNameInDev = 'useDebugValue';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      return mountDebugValue(value, formatterFn);\n    },\n    useDeferredValue<T>(value: T): T {\n      currentHookNameInDev = 'useDeferredValue';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      return mountDeferredValue(value);\n    },\n    useTransition(): [boolean, (() => void) => void] {\n      currentHookNameInDev = 'useTransition';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      return mountTransition();\n    },\n    useMutableSource<Source, Snapshot>(\n      source: MutableSource<Source>,\n      getSnapshot: MutableSourceGetSnapshotFn<Source, Snapshot>,\n      subscribe: MutableSourceSubscribeFn<Source, Snapshot>,\n    ): Snapshot {\n      currentHookNameInDev = 'useMutableSource';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      return mountMutableSource(source, getSnapshot, subscribe);\n    },\n    useSyncExternalStore<T>(\n      subscribe: (() => void) => () => void,\n      getSnapshot: () => T,\n    ): T {\n      currentHookNameInDev = 'useSyncExternalStore';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      return mountSyncExternalStore(subscribe, getSnapshot);\n    },\n    useOpaqueIdentifier(): OpaqueIDType | void {\n      currentHookNameInDev = 'useOpaqueIdentifier';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      return mountOpaqueIdentifier();\n    },\n\n    unstable_isNewReconciler: enableNewReconciler,\n  };\n  if (enableCache) {\n    (InvalidNestedHooksDispatcherOnMountInDEV: Dispatcher).getCacheForType = getCacheForType;\n    (InvalidNestedHooksDispatcherOnMountInDEV: Dispatcher).useCacheRefresh = function useCacheRefresh() {\n      currentHookNameInDev = 'useCacheRefresh';\n      updateHookTypesDev();\n      return mountRefresh();\n    };\n  }\n\n  InvalidNestedHooksDispatcherOnUpdateInDEV = {\n    readContext<T>(context: ReactContext<T>): T {\n      warnInvalidContextAccess();\n      return readContext(context);\n    },\n    useCallback<T>(callback: T, deps: Array<mixed> | void | null): T {\n      currentHookNameInDev = 'useCallback';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateCallback(callback, deps);\n    },\n    useContext<T>(context: ReactContext<T>): T {\n      currentHookNameInDev = 'useContext';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return readContext(context);\n    },\n    useEffect(\n      create: () => (() => void) | void,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useEffect';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateEffect(create, deps);\n    },\n    useImperativeHandle<T>(\n      ref: {|current: T | null|} | ((inst: T | null) => mixed) | null | void,\n      create: () => T,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useImperativeHandle';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateImperativeHandle(ref, create, deps);\n    },\n    useLayoutEffect(\n      create: () => (() => void) | void,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useLayoutEffect';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateLayoutEffect(create, deps);\n    },\n    useMemo<T>(create: () => T, deps: Array<mixed> | void | null): T {\n      currentHookNameInDev = 'useMemo';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      const prevDispatcher = ReactCurrentDispatcher.current;\n      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\n      try {\n        return updateMemo(create, deps);\n      } finally {\n        ReactCurrentDispatcher.current = prevDispatcher;\n      }\n    },\n    useReducer<S, I, A>(\n      reducer: (S, A) => S,\n      initialArg: I,\n      init?: I => S,\n    ): [S, Dispatch<A>] {\n      currentHookNameInDev = 'useReducer';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      const prevDispatcher = ReactCurrentDispatcher.current;\n      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\n      try {\n        return updateReducer(reducer, initialArg, init);\n      } finally {\n        ReactCurrentDispatcher.current = prevDispatcher;\n      }\n    },\n    useRef<T>(initialValue: T): {|current: T|} {\n      currentHookNameInDev = 'useRef';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateRef(initialValue);\n    },\n    useState<S>(\n      initialState: (() => S) | S,\n    ): [S, Dispatch<BasicStateAction<S>>] {\n      currentHookNameInDev = 'useState';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      const prevDispatcher = ReactCurrentDispatcher.current;\n      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\n      try {\n        return updateState(initialState);\n      } finally {\n        ReactCurrentDispatcher.current = prevDispatcher;\n      }\n    },\n    useDebugValue<T>(value: T, formatterFn: ?(value: T) => mixed): void {\n      currentHookNameInDev = 'useDebugValue';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateDebugValue(value, formatterFn);\n    },\n    useDeferredValue<T>(value: T): T {\n      currentHookNameInDev = 'useDeferredValue';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateDeferredValue(value);\n    },\n    useTransition(): [boolean, (() => void) => void] {\n      currentHookNameInDev = 'useTransition';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateTransition();\n    },\n    useMutableSource<Source, Snapshot>(\n      source: MutableSource<Source>,\n      getSnapshot: MutableSourceGetSnapshotFn<Source, Snapshot>,\n      subscribe: MutableSourceSubscribeFn<Source, Snapshot>,\n    ): Snapshot {\n      currentHookNameInDev = 'useMutableSource';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateMutableSource(source, getSnapshot, subscribe);\n    },\n    useSyncExternalStore<T>(\n      subscribe: (() => void) => () => void,\n      getSnapshot: () => T,\n    ): T {\n      currentHookNameInDev = 'useSyncExternalStore';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateSyncExternalStore(subscribe, getSnapshot);\n    },\n    useOpaqueIdentifier(): OpaqueIDType | void {\n      currentHookNameInDev = 'useOpaqueIdentifier';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateOpaqueIdentifier();\n    },\n\n    unstable_isNewReconciler: enableNewReconciler,\n  };\n  if (enableCache) {\n    (InvalidNestedHooksDispatcherOnUpdateInDEV: Dispatcher).getCacheForType = getCacheForType;\n    (InvalidNestedHooksDispatcherOnUpdateInDEV: Dispatcher).useCacheRefresh = function useCacheRefresh() {\n      currentHookNameInDev = 'useCacheRefresh';\n      updateHookTypesDev();\n      return updateRefresh();\n    };\n  }\n\n  InvalidNestedHooksDispatcherOnRerenderInDEV = {\n    readContext<T>(context: ReactContext<T>): T {\n      warnInvalidContextAccess();\n      return readContext(context);\n    },\n\n    useCallback<T>(callback: T, deps: Array<mixed> | void | null): T {\n      currentHookNameInDev = 'useCallback';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateCallback(callback, deps);\n    },\n    useContext<T>(context: ReactContext<T>): T {\n      currentHookNameInDev = 'useContext';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return readContext(context);\n    },\n    useEffect(\n      create: () => (() => void) | void,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useEffect';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateEffect(create, deps);\n    },\n    useImperativeHandle<T>(\n      ref: {|current: T | null|} | ((inst: T | null) => mixed) | null | void,\n      create: () => T,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useImperativeHandle';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateImperativeHandle(ref, create, deps);\n    },\n    useLayoutEffect(\n      create: () => (() => void) | void,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useLayoutEffect';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateLayoutEffect(create, deps);\n    },\n    useMemo<T>(create: () => T, deps: Array<mixed> | void | null): T {\n      currentHookNameInDev = 'useMemo';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      const prevDispatcher = ReactCurrentDispatcher.current;\n      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\n      try {\n        return updateMemo(create, deps);\n      } finally {\n        ReactCurrentDispatcher.current = prevDispatcher;\n      }\n    },\n    useReducer<S, I, A>(\n      reducer: (S, A) => S,\n      initialArg: I,\n      init?: I => S,\n    ): [S, Dispatch<A>] {\n      currentHookNameInDev = 'useReducer';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      const prevDispatcher = ReactCurrentDispatcher.current;\n      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\n      try {\n        return rerenderReducer(reducer, initialArg, init);\n      } finally {\n        ReactCurrentDispatcher.current = prevDispatcher;\n      }\n    },\n    useRef<T>(initialValue: T): {|current: T|} {\n      currentHookNameInDev = 'useRef';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateRef(initialValue);\n    },\n    useState<S>(\n      initialState: (() => S) | S,\n    ): [S, Dispatch<BasicStateAction<S>>] {\n      currentHookNameInDev = 'useState';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      const prevDispatcher = ReactCurrentDispatcher.current;\n      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\n      try {\n        return rerenderState(initialState);\n      } finally {\n        ReactCurrentDispatcher.current = prevDispatcher;\n      }\n    },\n    useDebugValue<T>(value: T, formatterFn: ?(value: T) => mixed): void {\n      currentHookNameInDev = 'useDebugValue';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateDebugValue(value, formatterFn);\n    },\n    useDeferredValue<T>(value: T): T {\n      currentHookNameInDev = 'useDeferredValue';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return rerenderDeferredValue(value);\n    },\n    useTransition(): [boolean, (() => void) => void] {\n      currentHookNameInDev = 'useTransition';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return rerenderTransition();\n    },\n    useMutableSource<Source, Snapshot>(\n      source: MutableSource<Source>,\n      getSnapshot: MutableSourceGetSnapshotFn<Source, Snapshot>,\n      subscribe: MutableSourceSubscribeFn<Source, Snapshot>,\n    ): Snapshot {\n      currentHookNameInDev = 'useMutableSource';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateMutableSource(source, getSnapshot, subscribe);\n    },\n    useSyncExternalStore<T>(\n      subscribe: (() => void) => () => void,\n      getSnapshot: () => T,\n    ): T {\n      currentHookNameInDev = 'useSyncExternalStore';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateSyncExternalStore(subscribe, getSnapshot);\n    },\n    useOpaqueIdentifier(): OpaqueIDType | void {\n      currentHookNameInDev = 'useOpaqueIdentifier';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return rerenderOpaqueIdentifier();\n    },\n\n    unstable_isNewReconciler: enableNewReconciler,\n  };\n  if (enableCache) {\n    (InvalidNestedHooksDispatcherOnRerenderInDEV: Dispatcher).getCacheForType = getCacheForType;\n    (InvalidNestedHooksDispatcherOnRerenderInDEV: Dispatcher).useCacheRefresh = function useCacheRefresh() {\n      currentHookNameInDev = 'useCacheRefresh';\n      updateHookTypesDev();\n      return updateRefresh();\n    };\n  }\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Fiber} from './ReactInternalTypes';\n\nimport {\n  enableProfilerCommitHooks,\n  enableProfilerNestedUpdatePhase,\n  enableProfilerTimer,\n} from 'shared/ReactFeatureFlags';\nimport {HostRoot, Profiler} from './ReactWorkTags';\n\n// Intentionally not named imports because Rollup would use dynamic dispatch for\n// CommonJS interop named imports.\nimport * as Scheduler from 'scheduler';\n\nconst {unstable_now: now} = Scheduler;\n\nexport type ProfilerTimer = {\n  getCommitTime(): number,\n  isCurrentUpdateNested(): boolean,\n  markNestedUpdateScheduled(): void,\n  recordCommitTime(): void,\n  startProfilerTimer(fiber: Fiber): void,\n  stopProfilerTimerIfRunning(fiber: Fiber): void,\n  stopProfilerTimerIfRunningAndRecordDelta(fiber: Fiber): void,\n  syncNestedUpdateFlag(): void,\n  ...\n};\n\nlet commitTime: number = 0;\nlet layoutEffectStartTime: number = -1;\nlet profilerStartTime: number = -1;\nlet passiveEffectStartTime: number = -1;\n\n/**\n * Tracks whether the current update was a nested/cascading update (scheduled from a layout effect).\n *\n * The overall sequence is:\n *   1. render\n *   2. commit (and call `onRender`, `onCommit`)\n *   3. check for nested updates\n *   4. flush passive effects (and call `onPostCommit`)\n *\n * Nested updates are identified in step 3 above,\n * but step 4 still applies to the work that was just committed.\n * We use two flags to track nested updates then:\n * one tracks whether the upcoming update is a nested update,\n * and the other tracks whether the current update was a nested update.\n * The first value gets synced to the second at the start of the render phase.\n */\nlet currentUpdateIsNested: boolean = false;\nlet nestedUpdateScheduled: boolean = false;\n\nfunction isCurrentUpdateNested(): boolean {\n  return currentUpdateIsNested;\n}\n\nfunction markNestedUpdateScheduled(): void {\n  if (enableProfilerNestedUpdatePhase) {\n    nestedUpdateScheduled = true;\n  }\n}\n\nfunction resetNestedUpdateFlag(): void {\n  if (enableProfilerNestedUpdatePhase) {\n    currentUpdateIsNested = false;\n    nestedUpdateScheduled = false;\n  }\n}\n\nfunction syncNestedUpdateFlag(): void {\n  if (enableProfilerNestedUpdatePhase) {\n    currentUpdateIsNested = nestedUpdateScheduled;\n    nestedUpdateScheduled = false;\n  }\n}\n\nfunction getCommitTime(): number {\n  return commitTime;\n}\n\nfunction recordCommitTime(): void {\n  if (!enableProfilerTimer) {\n    return;\n  }\n  commitTime = now();\n}\n\nfunction startProfilerTimer(fiber: Fiber): void {\n  if (!enableProfilerTimer) {\n    return;\n  }\n\n  profilerStartTime = now();\n\n  if (((fiber.actualStartTime: any): number) < 0) {\n    fiber.actualStartTime = now();\n  }\n}\n\nfunction stopProfilerTimerIfRunning(fiber: Fiber): void {\n  if (!enableProfilerTimer) {\n    return;\n  }\n  profilerStartTime = -1;\n}\n\nfunction stopProfilerTimerIfRunningAndRecordDelta(\n  fiber: Fiber,\n  overrideBaseTime: boolean,\n): void {\n  if (!enableProfilerTimer) {\n    return;\n  }\n\n  if (profilerStartTime >= 0) {\n    const elapsedTime = now() - profilerStartTime;\n    fiber.actualDuration += elapsedTime;\n    if (overrideBaseTime) {\n      fiber.selfBaseDuration = elapsedTime;\n    }\n    profilerStartTime = -1;\n  }\n}\n\nfunction recordLayoutEffectDuration(fiber: Fiber): void {\n  if (!enableProfilerTimer || !enableProfilerCommitHooks) {\n    return;\n  }\n\n  if (layoutEffectStartTime >= 0) {\n    const elapsedTime = now() - layoutEffectStartTime;\n\n    layoutEffectStartTime = -1;\n\n    // Store duration on the next nearest Profiler ancestor\n    // Or the root (for the DevTools Profiler to read)\n    let parentFiber = fiber.return;\n    while (parentFiber !== null) {\n      switch (parentFiber.tag) {\n        case HostRoot:\n          const root = parentFiber.stateNode;\n          root.effectDuration += elapsedTime;\n          return;\n        case Profiler:\n          const parentStateNode = parentFiber.stateNode;\n          parentStateNode.effectDuration += elapsedTime;\n          return;\n      }\n      parentFiber = parentFiber.return;\n    }\n  }\n}\n\nfunction recordPassiveEffectDuration(fiber: Fiber): void {\n  if (!enableProfilerTimer || !enableProfilerCommitHooks) {\n    return;\n  }\n\n  if (passiveEffectStartTime >= 0) {\n    const elapsedTime = now() - passiveEffectStartTime;\n\n    passiveEffectStartTime = -1;\n\n    // Store duration on the next nearest Profiler ancestor\n    // Or the root (for the DevTools Profiler to read)\n    let parentFiber = fiber.return;\n    while (parentFiber !== null) {\n      switch (parentFiber.tag) {\n        case HostRoot:\n          const root = parentFiber.stateNode;\n          if (root !== null) {\n            root.passiveEffectDuration += elapsedTime;\n          }\n          return;\n        case Profiler:\n          const parentStateNode = parentFiber.stateNode;\n          if (parentStateNode !== null) {\n            // Detached fibers have their state node cleared out.\n            // In this case, the return pointer is also cleared out,\n            // so we won't be able to report the time spent in this Profiler's subtree.\n            parentStateNode.passiveEffectDuration += elapsedTime;\n          }\n          return;\n      }\n      parentFiber = parentFiber.return;\n    }\n  }\n}\n\nfunction startLayoutEffectTimer(): void {\n  if (!enableProfilerTimer || !enableProfilerCommitHooks) {\n    return;\n  }\n  layoutEffectStartTime = now();\n}\n\nfunction startPassiveEffectTimer(): void {\n  if (!enableProfilerTimer || !enableProfilerCommitHooks) {\n    return;\n  }\n  passiveEffectStartTime = now();\n}\n\nfunction transferActualDuration(fiber: Fiber): void {\n  // Transfer time spent rendering these children so we don't lose it\n  // after we rerender. This is used as a helper in special cases\n  // where we should count the work of multiple passes.\n  let child = fiber.child;\n  while (child) {\n    fiber.actualDuration += child.actualDuration;\n    child = child.sibling;\n  }\n}\n\nexport {\n  getCommitTime,\n  isCurrentUpdateNested,\n  markNestedUpdateScheduled,\n  recordCommitTime,\n  recordLayoutEffectDuration,\n  recordPassiveEffectDuration,\n  resetNestedUpdateFlag,\n  startLayoutEffectTimer,\n  startPassiveEffectTimer,\n  startProfilerTimer,\n  stopProfilerTimerIfRunning,\n  stopProfilerTimerIfRunningAndRecordDelta,\n  syncNestedUpdateFlag,\n  transferActualDuration,\n};\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Fiber} from './ReactInternalTypes';\n\nimport {getStackByFiberInDevAndProd} from './ReactFiberComponentStack';\n\nexport type CapturedValue<T> = {|\n  value: T,\n  source: Fiber | null,\n  stack: string | null,\n|};\n\nexport function createCapturedValue<T>(\n  value: T,\n  source: Fiber,\n): CapturedValue<T> {\n  // If the value is an error, call this function immediately after it is thrown\n  // so the stack is accurate.\n  return {\n    value,\n    source,\n    stack: getStackByFiberInDevAndProd(source),\n  };\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Fiber} from '../ReactFiber.old';\nimport type {CapturedValue} from '../ReactCapturedValue';\n\nimport {ClassComponent} from '../ReactWorkTags';\n\nimport invariant from 'shared/invariant';\n\n// Provided by www\nconst ReactFiberErrorDialogWWW = require('ReactFiberErrorDialog');\ninvariant(\n  typeof ReactFiberErrorDialogWWW.showErrorDialog === 'function',\n  'Expected ReactFiberErrorDialog.showErrorDialog to be a function.',\n);\n\nexport function showErrorDialog(\n  boundary: Fiber,\n  errorInfo: CapturedValue<mixed>,\n): boolean {\n  const capturedError = {\n    componentStack: errorInfo.stack !== null ? errorInfo.stack : '',\n    error: errorInfo.value,\n    errorBoundary:\n      boundary !== null && boundary.tag === ClassComponent\n        ? boundary.stateNode\n        : null,\n  };\n  return ReactFiberErrorDialogWWW.showErrorDialog(capturedError);\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Fiber} from './ReactInternalTypes';\nimport type {CapturedValue} from './ReactCapturedValue';\n\nimport {showErrorDialog} from './ReactFiberErrorDialog';\nimport {ClassComponent} from './ReactWorkTags';\nimport getComponentNameFromFiber from 'react-reconciler/src/getComponentNameFromFiber';\nimport {HostRoot} from 'react-reconciler/src/ReactWorkTags';\n\nexport function logCapturedError(\n  boundary: Fiber,\n  errorInfo: CapturedValue<mixed>,\n): void {\n  try {\n    const logError = showErrorDialog(boundary, errorInfo);\n\n    // Allow injected showErrorDialog() to prevent default console.error logging.\n    // This enables renderers like ReactNative to better manage redbox behavior.\n    if (logError === false) {\n      return;\n    }\n\n    const error = (errorInfo.value: any);\n    if (__DEV__) {\n      const source = errorInfo.source;\n      const stack = errorInfo.stack;\n      const componentStack = stack !== null ? stack : '';\n      // Browsers support silencing uncaught errors by calling\n      // `preventDefault()` in window `error` handler.\n      // We record this information as an expando on the error.\n      if (error != null && error._suppressLogging) {\n        if (boundary.tag === ClassComponent) {\n          // The error is recoverable and was silenced.\n          // Ignore it and don't print the stack addendum.\n          // This is handy for testing error boundaries without noise.\n          return;\n        }\n        // The error is fatal. Since the silencing might have\n        // been accidental, we'll surface it anyway.\n        // However, the browser would have silenced the original error\n        // so we'll print it first, and then print the stack addendum.\n        console['error'](error); // Don't transform to our wrapper\n        // For a more detailed description of this block, see:\n        // https://github.com/facebook/react/pull/13384\n      }\n\n      const componentName = source ? getComponentNameFromFiber(source) : null;\n      const componentNameMessage = componentName\n        ? `The above error occurred in the <${componentName}> component:`\n        : 'The above error occurred in one of your React components:';\n\n      let errorBoundaryMessage;\n      if (boundary.tag === HostRoot) {\n        errorBoundaryMessage =\n          'Consider adding an error boundary to your tree to customize error handling behavior.\\n' +\n          'Visit https://reactjs.org/link/error-boundaries to learn more about error boundaries.';\n      } else {\n        const errorBoundaryName =\n          getComponentNameFromFiber(boundary) || 'Anonymous';\n        errorBoundaryMessage =\n          `React will try to recreate this component tree from scratch ` +\n          `using the error boundary you provided, ${errorBoundaryName}.`;\n      }\n      const combinedMessage =\n        `${componentNameMessage}\\n${componentStack}\\n\\n` +\n        `${errorBoundaryMessage}`;\n\n      // In development, we provide our own message with just the component stack.\n      // We don't include the original error message and JS stack because the browser\n      // has already printed it. Even if the application swallows the error, it is still\n      // displayed by the browser thanks to the DEV-only fake event trick in ReactErrorUtils.\n      console['error'](combinedMessage); // Don't transform to our wrapper\n    } else {\n      // In production, we print the error directly.\n      // This will include the message, the JS stack, and anything the browser wants to show.\n      // We pass the error object instead of custom message so that the browser displays the error natively.\n      console['error'](error); // Don't transform to our wrapper\n    }\n  } catch (e) {\n    // This method must not throw, or React internal state will get messed up.\n    // If console.error is overridden, or logCapturedError() shows a dialog that throws,\n    // we want to report this error outside of the normal stack as a last resort.\n    // https://github.com/facebook/react/issues/13188\n    setTimeout(() => {\n      throw e;\n    });\n  }\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Fiber} from './ReactInternalTypes';\nimport type {FiberRoot} from './ReactInternalTypes';\nimport type {Lane, Lanes} from './ReactFiberLane.old';\nimport type {CapturedValue} from './ReactCapturedValue';\nimport type {Update} from './ReactUpdateQueue.old';\nimport type {Wakeable} from 'shared/ReactTypes';\nimport type {SuspenseContext} from './ReactFiberSuspenseContext.old';\n\nimport getComponentNameFromFiber from 'react-reconciler/src/getComponentNameFromFiber';\nimport {\n  ClassComponent,\n  HostRoot,\n  SuspenseComponent,\n  IncompleteClassComponent,\n  FunctionComponent,\n  ForwardRef,\n  SimpleMemoComponent,\n} from './ReactWorkTags';\nimport {\n  DidCapture,\n  Incomplete,\n  NoFlags,\n  ShouldCapture,\n  LifecycleEffectMask,\n  ForceUpdateForLegacySuspense,\n} from './ReactFiberFlags';\nimport {\n  supportsPersistence,\n  getOffscreenContainerProps,\n} from './ReactFiberHostConfig';\nimport {shouldCaptureSuspense} from './ReactFiberSuspenseComponent.old';\nimport {NoMode, ConcurrentMode, DebugTracingMode} from './ReactTypeOfMode';\nimport {\n  enableDebugTracing,\n  enableSchedulingProfiler,\n  enableLazyContextPropagation,\n  enableUpdaterTracking,\n  enablePersistentOffscreenHostContainer,\n} from 'shared/ReactFeatureFlags';\nimport {createCapturedValue} from './ReactCapturedValue';\nimport {\n  enqueueCapturedUpdate,\n  createUpdate,\n  CaptureUpdate,\n  ForceUpdate,\n  enqueueUpdate,\n} from './ReactUpdateQueue.old';\nimport {markFailedErrorBoundaryForHotReloading} from './ReactFiberHotReloading.old';\nimport {\n  suspenseStackCursor,\n  InvisibleParentSuspenseContext,\n  hasSuspenseContext,\n} from './ReactFiberSuspenseContext.old';\nimport {\n  renderDidError,\n  onUncaughtError,\n  markLegacyErrorBoundaryAsFailed,\n  isAlreadyFailedLegacyErrorBoundary,\n  pingSuspendedRoot,\n  restorePendingUpdaters,\n} from './ReactFiberWorkLoop.old';\nimport {propagateParentContextChangesToDeferredTree} from './ReactFiberNewContext.old';\nimport {logCapturedError} from './ReactFiberErrorLogger';\nimport {logComponentSuspended} from './DebugTracing';\nimport {\n  markComponentRenderStopped,\n  markComponentSuspended,\n} from './SchedulingProfiler';\nimport {isDevToolsPresent} from './ReactFiberDevToolsHook.old';\nimport {\n  SyncLane,\n  NoTimestamp,\n  includesSomeLane,\n  mergeLanes,\n  pickArbitraryLane,\n} from './ReactFiberLane.old';\n\nconst PossiblyWeakMap = typeof WeakMap === 'function' ? WeakMap : Map;\n\nfunction createRootErrorUpdate(\n  fiber: Fiber,\n  errorInfo: CapturedValue<mixed>,\n  lane: Lane,\n): Update<mixed> {\n  const update = createUpdate(NoTimestamp, lane);\n  // Unmount the root by rendering null.\n  update.tag = CaptureUpdate;\n  // Caution: React DevTools currently depends on this property\n  // being called \"element\".\n  update.payload = {element: null};\n  const error = errorInfo.value;\n  update.callback = () => {\n    onUncaughtError(error);\n    logCapturedError(fiber, errorInfo);\n  };\n  return update;\n}\n\nfunction createClassErrorUpdate(\n  fiber: Fiber,\n  errorInfo: CapturedValue<mixed>,\n  lane: Lane,\n): Update<mixed> {\n  const update = createUpdate(NoTimestamp, lane);\n  update.tag = CaptureUpdate;\n  const getDerivedStateFromError = fiber.type.getDerivedStateFromError;\n  if (typeof getDerivedStateFromError === 'function') {\n    const error = errorInfo.value;\n    update.payload = () => {\n      return getDerivedStateFromError(error);\n    };\n    update.callback = () => {\n      if (__DEV__) {\n        markFailedErrorBoundaryForHotReloading(fiber);\n      }\n      logCapturedError(fiber, errorInfo);\n    };\n  }\n\n  const inst = fiber.stateNode;\n  if (inst !== null && typeof inst.componentDidCatch === 'function') {\n    update.callback = function callback() {\n      if (__DEV__) {\n        markFailedErrorBoundaryForHotReloading(fiber);\n      }\n      logCapturedError(fiber, errorInfo);\n      if (typeof getDerivedStateFromError !== 'function') {\n        // To preserve the preexisting retry behavior of error boundaries,\n        // we keep track of which ones already failed during this batch.\n        // This gets reset before we yield back to the browser.\n        // TODO: Warn in strict mode if getDerivedStateFromError is\n        // not defined.\n        markLegacyErrorBoundaryAsFailed(this);\n      }\n      const error = errorInfo.value;\n      const stack = errorInfo.stack;\n      this.componentDidCatch(error, {\n        componentStack: stack !== null ? stack : '',\n      });\n      if (__DEV__) {\n        if (typeof getDerivedStateFromError !== 'function') {\n          // If componentDidCatch is the only error boundary method defined,\n          // then it needs to call setState to recover from errors.\n          // If no state update is scheduled then the boundary will swallow the error.\n          if (!includesSomeLane(fiber.lanes, (SyncLane: Lane))) {\n            console.error(\n              '%s: Error boundaries should implement getDerivedStateFromError(). ' +\n                'In that method, return a state update to display an error message or fallback UI.',\n              getComponentNameFromFiber(fiber) || 'Unknown',\n            );\n          }\n        }\n      }\n    };\n  }\n  return update;\n}\n\nfunction attachPingListener(root: FiberRoot, wakeable: Wakeable, lanes: Lanes) {\n  // Attach a listener to the promise to \"ping\" the root and retry. But only if\n  // one does not already exist for the lanes we're currently rendering (which\n  // acts like a \"thread ID\" here).\n  let pingCache = root.pingCache;\n  let threadIDs;\n  if (pingCache === null) {\n    pingCache = root.pingCache = new PossiblyWeakMap();\n    threadIDs = new Set();\n    pingCache.set(wakeable, threadIDs);\n  } else {\n    threadIDs = pingCache.get(wakeable);\n    if (threadIDs === undefined) {\n      threadIDs = new Set();\n      pingCache.set(wakeable, threadIDs);\n    }\n  }\n  if (!threadIDs.has(lanes)) {\n    // Memoize using the thread ID to prevent redundant listeners.\n    threadIDs.add(lanes);\n    const ping = pingSuspendedRoot.bind(null, root, wakeable, lanes);\n    if (enableUpdaterTracking) {\n      if (isDevToolsPresent) {\n        // If we have pending work still, restore the original updaters\n        restorePendingUpdaters(root, lanes);\n      }\n    }\n    wakeable.then(ping, ping);\n  }\n}\n\nfunction throwException(\n  root: FiberRoot,\n  returnFiber: Fiber,\n  sourceFiber: Fiber,\n  value: mixed,\n  rootRenderLanes: Lanes,\n) {\n  // The source fiber did not complete.\n  sourceFiber.flags |= Incomplete;\n\n  if (enableUpdaterTracking) {\n    if (isDevToolsPresent) {\n      // If we have pending work still, restore the original updaters\n      restorePendingUpdaters(root, rootRenderLanes);\n    }\n  }\n\n  if (\n    value !== null &&\n    typeof value === 'object' &&\n    typeof value.then === 'function'\n  ) {\n    if (enableLazyContextPropagation) {\n      const currentSourceFiber = sourceFiber.alternate;\n      if (currentSourceFiber !== null) {\n        // Since we never visited the children of the suspended component, we\n        // need to propagate the context change now, to ensure that we visit\n        // them during the retry.\n        //\n        // We don't have to do this for errors because we retry errors without\n        // committing in between. So this is specific to Suspense.\n        propagateParentContextChangesToDeferredTree(\n          currentSourceFiber,\n          sourceFiber,\n          rootRenderLanes,\n        );\n      }\n    }\n\n    // This is a wakeable.\n    const wakeable: Wakeable = (value: any);\n\n    if (__DEV__) {\n      if (enableDebugTracing) {\n        if (sourceFiber.mode & DebugTracingMode) {\n          const name = getComponentNameFromFiber(sourceFiber) || 'Unknown';\n          logComponentSuspended(name, wakeable);\n        }\n      }\n    }\n\n    if (enableSchedulingProfiler) {\n      markComponentRenderStopped();\n      markComponentSuspended(sourceFiber, wakeable, rootRenderLanes);\n    }\n\n    // Reset the memoizedState to what it was before we attempted to render it.\n    // A legacy mode Suspense quirk, only relevant to hook components.\n    const tag = sourceFiber.tag;\n    if (\n      (sourceFiber.mode & ConcurrentMode) === NoMode &&\n      (tag === FunctionComponent ||\n        tag === ForwardRef ||\n        tag === SimpleMemoComponent)\n    ) {\n      const currentSource = sourceFiber.alternate;\n      if (currentSource) {\n        sourceFiber.updateQueue = currentSource.updateQueue;\n        sourceFiber.memoizedState = currentSource.memoizedState;\n        sourceFiber.lanes = currentSource.lanes;\n      } else {\n        sourceFiber.updateQueue = null;\n        sourceFiber.memoizedState = null;\n      }\n    }\n\n    const hasInvisibleParentBoundary = hasSuspenseContext(\n      suspenseStackCursor.current,\n      (InvisibleParentSuspenseContext: SuspenseContext),\n    );\n\n    // Schedule the nearest Suspense to re-render the timed out view.\n    let workInProgress = returnFiber;\n    do {\n      if (\n        workInProgress.tag === SuspenseComponent &&\n        shouldCaptureSuspense(workInProgress, hasInvisibleParentBoundary)\n      ) {\n        // Found the nearest boundary.\n\n        // Stash the promise on the boundary fiber. If the boundary times out, we'll\n        // attach another listener to flip the boundary back to its normal state.\n        const wakeables: Set<Wakeable> = (workInProgress.updateQueue: any);\n        if (wakeables === null) {\n          const updateQueue = (new Set(): any);\n          updateQueue.add(wakeable);\n          workInProgress.updateQueue = updateQueue;\n        } else {\n          wakeables.add(wakeable);\n        }\n\n        // If the boundary is in legacy mode, we should *not*\n        // suspend the commit. Pretend as if the suspended component rendered\n        // null and keep rendering. In the commit phase, we'll schedule a\n        // subsequent synchronous update to re-render the Suspense.\n        //\n        // Note: It doesn't matter whether the component that suspended was\n        // inside a concurrent mode tree. If the Suspense is outside of it, we\n        // should *not* suspend the commit.\n        //\n        // If the suspense boundary suspended itself suspended, we don't have to\n        // do this trick because nothing was partially started. We can just\n        // directly do a second pass over the fallback in this render and\n        // pretend we meant to render that directly.\n        if (\n          (workInProgress.mode & ConcurrentMode) === NoMode &&\n          workInProgress !== returnFiber\n        ) {\n          workInProgress.flags |= DidCapture;\n          sourceFiber.flags |= ForceUpdateForLegacySuspense;\n\n          // We're going to commit this fiber even though it didn't complete.\n          // But we shouldn't call any lifecycle methods or callbacks. Remove\n          // all lifecycle effect tags.\n          sourceFiber.flags &= ~(LifecycleEffectMask | Incomplete);\n\n          if (supportsPersistence && enablePersistentOffscreenHostContainer) {\n            // Another legacy Suspense quirk. In persistent mode, if this is the\n            // initial mount, override the props of the host container to hide\n            // its contents.\n            const currentSuspenseBoundary = workInProgress.alternate;\n            if (currentSuspenseBoundary === null) {\n              const offscreenFiber: Fiber = (workInProgress.child: any);\n              const offscreenContainer = offscreenFiber.child;\n              if (offscreenContainer !== null) {\n                const children = offscreenContainer.memoizedProps.children;\n                const containerProps = getOffscreenContainerProps(\n                  'hidden',\n                  children,\n                );\n                offscreenContainer.pendingProps = containerProps;\n                offscreenContainer.memoizedProps = containerProps;\n              }\n            }\n          }\n\n          if (sourceFiber.tag === ClassComponent) {\n            const currentSourceFiber = sourceFiber.alternate;\n            if (currentSourceFiber === null) {\n              // This is a new mount. Change the tag so it's not mistaken for a\n              // completed class component. For example, we should not call\n              // componentWillUnmount if it is deleted.\n              sourceFiber.tag = IncompleteClassComponent;\n            } else {\n              // When we try rendering again, we should not reuse the current fiber,\n              // since it's known to be in an inconsistent state. Use a force update to\n              // prevent a bail out.\n              const update = createUpdate(NoTimestamp, SyncLane);\n              update.tag = ForceUpdate;\n              enqueueUpdate(sourceFiber, update, SyncLane);\n            }\n          }\n\n          // The source fiber did not complete. Mark it with Sync priority to\n          // indicate that it still has pending work.\n          sourceFiber.lanes = mergeLanes(sourceFiber.lanes, SyncLane);\n\n          // Exit without suspending.\n          return;\n        }\n\n        // Confirmed that the boundary is in a concurrent mode tree. Continue\n        // with the normal suspend path.\n        //\n        // After this we'll use a set of heuristics to determine whether this\n        // render pass will run to completion or restart or \"suspend\" the commit.\n        // The actual logic for this is spread out in different places.\n        //\n        // This first principle is that if we're going to suspend when we complete\n        // a root, then we should also restart if we get an update or ping that\n        // might unsuspend it, and vice versa. The only reason to suspend is\n        // because you think you might want to restart before committing. However,\n        // it doesn't make sense to restart only while in the period we're suspended.\n        //\n        // Restarting too aggressively is also not good because it starves out any\n        // intermediate loading state. So we use heuristics to determine when.\n\n        // Suspense Heuristics\n        //\n        // If nothing threw a Promise or all the same fallbacks are already showing,\n        // then don't suspend/restart.\n        //\n        // If this is an initial render of a new tree of Suspense boundaries and\n        // those trigger a fallback, then don't suspend/restart. We want to ensure\n        // that we can show the initial loading state as quickly as possible.\n        //\n        // If we hit a \"Delayed\" case, such as when we'd switch from content back into\n        // a fallback, then we should always suspend/restart. Transitions apply\n        // to this case. If none is defined, JND is used instead.\n        //\n        // If we're already showing a fallback and it gets \"retried\", allowing us to show\n        // another level, but there's still an inner boundary that would show a fallback,\n        // then we suspend/restart for 500ms since the last time we showed a fallback\n        // anywhere in the tree. This effectively throttles progressive loading into a\n        // consistent train of commits. This also gives us an opportunity to restart to\n        // get to the completed state slightly earlier.\n        //\n        // If there's ambiguity due to batching it's resolved in preference of:\n        // 1) \"delayed\", 2) \"initial render\", 3) \"retry\".\n        //\n        // We want to ensure that a \"busy\" state doesn't get force committed. We want to\n        // ensure that new initial loading states can commit as soon as possible.\n\n        attachPingListener(root, wakeable, rootRenderLanes);\n\n        workInProgress.flags |= ShouldCapture;\n        // TODO: I think we can remove this, since we now use `DidCapture` in\n        // the begin phase to prevent an early bailout.\n        workInProgress.lanes = rootRenderLanes;\n\n        return;\n      }\n      // This boundary already captured during this render. Continue to the next\n      // boundary.\n      workInProgress = workInProgress.return;\n    } while (workInProgress !== null);\n    // No boundary was found. Fallthrough to error mode.\n    // TODO: Use invariant so the message is stripped in prod?\n    value = new Error(\n      (getComponentNameFromFiber(sourceFiber) || 'A React component') +\n        ' suspended while rendering, but no fallback UI was specified.\\n' +\n        '\\n' +\n        'Add a <Suspense fallback=...> component higher in the tree to ' +\n        'provide a loading indicator or placeholder to display.',\n    );\n  }\n\n  // We didn't find a boundary that could handle this type of exception. Start\n  // over and traverse parent path again, this time treating the exception\n  // as an error.\n  renderDidError();\n\n  value = createCapturedValue(value, sourceFiber);\n  let workInProgress = returnFiber;\n  do {\n    switch (workInProgress.tag) {\n      case HostRoot: {\n        const errorInfo = value;\n        workInProgress.flags |= ShouldCapture;\n        const lane = pickArbitraryLane(rootRenderLanes);\n        workInProgress.lanes = mergeLanes(workInProgress.lanes, lane);\n        const update = createRootErrorUpdate(workInProgress, errorInfo, lane);\n        enqueueCapturedUpdate(workInProgress, update);\n        return;\n      }\n      case ClassComponent:\n        // Capture and retry\n        const errorInfo = value;\n        const ctor = workInProgress.type;\n        const instance = workInProgress.stateNode;\n        if (\n          (workInProgress.flags & DidCapture) === NoFlags &&\n          (typeof ctor.getDerivedStateFromError === 'function' ||\n            (instance !== null &&\n              typeof instance.componentDidCatch === 'function' &&\n              !isAlreadyFailedLegacyErrorBoundary(instance)))\n        ) {\n          workInProgress.flags |= ShouldCapture;\n          const lane = pickArbitraryLane(rootRenderLanes);\n          workInProgress.lanes = mergeLanes(workInProgress.lanes, lane);\n          // Schedule the error boundary to re-render using updated state\n          const update = createClassErrorUpdate(\n            workInProgress,\n            errorInfo,\n            lane,\n          );\n          enqueueCapturedUpdate(workInProgress, update);\n          return;\n        }\n        break;\n      default:\n        break;\n    }\n    workInProgress = workInProgress.return;\n  } while (workInProgress !== null);\n}\n\nexport {throwException, createRootErrorUpdate, createClassErrorUpdate};\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Fiber} from './ReactInternalTypes';\nimport type {\n  ReactScopeInstance,\n  ReactContext,\n  ReactScopeQuery,\n} from 'shared/ReactTypes';\n\nimport {\n  getPublicInstance,\n  getInstanceFromNode,\n  getInstanceFromScope,\n} from './ReactFiberHostConfig';\nimport {isFiberSuspenseAndTimedOut} from './ReactFiberTreeReflection';\n\nimport {HostComponent, ScopeComponent, ContextProvider} from './ReactWorkTags';\nimport {enableScopeAPI} from 'shared/ReactFeatureFlags';\n\nfunction getSuspenseFallbackChild(fiber: Fiber): Fiber | null {\n  return ((((fiber.child: any): Fiber).sibling: any): Fiber).child;\n}\n\nconst emptyObject = {};\n\nfunction collectScopedNodes(\n  node: Fiber,\n  fn: ReactScopeQuery,\n  scopedNodes: Array<any>,\n): void {\n  if (enableScopeAPI) {\n    if (node.tag === HostComponent) {\n      const {type, memoizedProps, stateNode} = node;\n      const instance = getPublicInstance(stateNode);\n      if (\n        instance !== null &&\n        fn(type, memoizedProps || emptyObject, instance) === true\n      ) {\n        scopedNodes.push(instance);\n      }\n    }\n    let child = node.child;\n\n    if (isFiberSuspenseAndTimedOut(node)) {\n      child = getSuspenseFallbackChild(node);\n    }\n    if (child !== null) {\n      collectScopedNodesFromChildren(child, fn, scopedNodes);\n    }\n  }\n}\n\nfunction collectFirstScopedNode(\n  node: Fiber,\n  fn: ReactScopeQuery,\n): null | Object {\n  if (enableScopeAPI) {\n    if (node.tag === HostComponent) {\n      const {type, memoizedProps, stateNode} = node;\n      const instance = getPublicInstance(stateNode);\n      if (instance !== null && fn(type, memoizedProps, instance) === true) {\n        return instance;\n      }\n    }\n    let child = node.child;\n\n    if (isFiberSuspenseAndTimedOut(node)) {\n      child = getSuspenseFallbackChild(node);\n    }\n    if (child !== null) {\n      return collectFirstScopedNodeFromChildren(child, fn);\n    }\n  }\n  return null;\n}\n\nfunction collectScopedNodesFromChildren(\n  startingChild: Fiber,\n  fn: ReactScopeQuery,\n  scopedNodes: Array<any>,\n): void {\n  let child = startingChild;\n  while (child !== null) {\n    collectScopedNodes(child, fn, scopedNodes);\n    child = child.sibling;\n  }\n}\n\nfunction collectFirstScopedNodeFromChildren(\n  startingChild: Fiber,\n  fn: ReactScopeQuery,\n): Object | null {\n  let child = startingChild;\n  while (child !== null) {\n    const scopedNode = collectFirstScopedNode(child, fn);\n    if (scopedNode !== null) {\n      return scopedNode;\n    }\n    child = child.sibling;\n  }\n  return null;\n}\n\nfunction collectNearestContextValues<T>(\n  node: Fiber,\n  context: ReactContext<T>,\n  childContextValues: Array<T>,\n): void {\n  if (node.tag === ContextProvider && node.type._context === context) {\n    const contextValue = node.memoizedProps.value;\n    childContextValues.push(contextValue);\n  } else {\n    let child = node.child;\n\n    if (isFiberSuspenseAndTimedOut(node)) {\n      child = getSuspenseFallbackChild(node);\n    }\n    if (child !== null) {\n      collectNearestChildContextValues(child, context, childContextValues);\n    }\n  }\n}\n\nfunction collectNearestChildContextValues<T>(\n  startingChild: Fiber | null,\n  context: ReactContext<T>,\n  childContextValues: Array<T>,\n): void {\n  let child = startingChild;\n  while (child !== null) {\n    collectNearestContextValues(child, context, childContextValues);\n    child = child.sibling;\n  }\n}\n\nfunction DO_NOT_USE_queryAllNodes(fn: ReactScopeQuery): null | Array<Object> {\n  const currentFiber = getInstanceFromScope(this);\n  if (currentFiber === null) {\n    return null;\n  }\n  const child = currentFiber.child;\n  const scopedNodes = [];\n  if (child !== null) {\n    collectScopedNodesFromChildren(child, fn, scopedNodes);\n  }\n  return scopedNodes.length === 0 ? null : scopedNodes;\n}\n\nfunction DO_NOT_USE_queryFirstNode(fn: ReactScopeQuery): null | Object {\n  const currentFiber = getInstanceFromScope(this);\n  if (currentFiber === null) {\n    return null;\n  }\n  const child = currentFiber.child;\n  if (child !== null) {\n    return collectFirstScopedNodeFromChildren(child, fn);\n  }\n  return null;\n}\n\nfunction containsNode(node: Object): boolean {\n  let fiber = getInstanceFromNode(node);\n  while (fiber !== null) {\n    if (fiber.tag === ScopeComponent && fiber.stateNode === this) {\n      return true;\n    }\n    fiber = fiber.return;\n  }\n  return false;\n}\n\nfunction getChildContextValues<T>(context: ReactContext<T>): Array<T> {\n  const currentFiber = getInstanceFromScope(this);\n  if (currentFiber === null) {\n    return [];\n  }\n  const child = currentFiber.child;\n  const childContextValues = [];\n  if (child !== null) {\n    collectNearestChildContextValues(child, context, childContextValues);\n  }\n  return childContextValues;\n}\n\nexport function createScopeInstance(): ReactScopeInstance {\n  return {\n    DO_NOT_USE_queryAllNodes,\n    DO_NOT_USE_queryFirstNode,\n    containsNode,\n    getChildContextValues,\n  };\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Fiber} from './ReactInternalTypes';\nimport type {Lanes, Lane} from './ReactFiberLane.old';\nimport type {\n  ReactScopeInstance,\n  ReactContext,\n  Wakeable,\n} from 'shared/ReactTypes';\nimport type {FiberRoot} from './ReactInternalTypes';\nimport type {\n  Instance,\n  Type,\n  Props,\n  Container,\n  ChildSet,\n} from './ReactFiberHostConfig';\nimport type {\n  SuspenseState,\n  SuspenseListRenderState,\n} from './ReactFiberSuspenseComponent.old';\nimport type {SuspenseContext} from './ReactFiberSuspenseContext.old';\nimport type {OffscreenState} from './ReactFiberOffscreenComponent';\nimport type {Cache, SpawnedCachePool} from './ReactFiberCacheComponent.old';\n\nimport {resetWorkInProgressVersions as resetMutableSourceWorkInProgressVersions} from './ReactMutableSource.old';\n\nimport {now} from './Scheduler';\n\nimport {\n  IndeterminateComponent,\n  FunctionComponent,\n  ClassComponent,\n  HostRoot,\n  HostComponent,\n  HostText,\n  HostPortal,\n  ContextProvider,\n  ContextConsumer,\n  ForwardRef,\n  Fragment,\n  Mode,\n  Profiler,\n  SuspenseComponent,\n  SuspenseListComponent,\n  MemoComponent,\n  SimpleMemoComponent,\n  LazyComponent,\n  IncompleteClassComponent,\n  ScopeComponent,\n  OffscreenComponent,\n  LegacyHiddenComponent,\n  CacheComponent,\n} from './ReactWorkTags';\nimport {NoMode, ConcurrentMode, ProfileMode} from './ReactTypeOfMode';\nimport {\n  Ref,\n  RefStatic,\n  Placement,\n  Update,\n  Visibility,\n  NoFlags,\n  DidCapture,\n  Snapshot,\n  ChildDeletion,\n  StaticMask,\n  MutationMask,\n} from './ReactFiberFlags';\nimport invariant from 'shared/invariant';\n\nimport {\n  createInstance,\n  createTextInstance,\n  appendInitialChild,\n  finalizeInitialChildren,\n  prepareUpdate,\n  supportsMutation,\n  supportsPersistence,\n  cloneInstance,\n  cloneHiddenInstance,\n  cloneHiddenTextInstance,\n  createContainerChildSet,\n  appendChildToContainerChildSet,\n  finalizeContainerChildren,\n  preparePortalMount,\n  prepareScopeUpdate,\n} from './ReactFiberHostConfig';\nimport {\n  getRootHostContainer,\n  popHostContext,\n  getHostContext,\n  popHostContainer,\n} from './ReactFiberHostContext.old';\nimport {\n  suspenseStackCursor,\n  InvisibleParentSuspenseContext,\n  hasSuspenseContext,\n  popSuspenseContext,\n  pushSuspenseContext,\n  setShallowSuspenseContext,\n  ForceSuspenseFallback,\n  setDefaultShallowSuspenseContext,\n} from './ReactFiberSuspenseContext.old';\nimport {findFirstSuspended} from './ReactFiberSuspenseComponent.old';\nimport {\n  isContextProvider as isLegacyContextProvider,\n  popContext as popLegacyContext,\n  popTopLevelContextObject as popTopLevelLegacyContextObject,\n} from './ReactFiberContext.old';\nimport {popProvider} from './ReactFiberNewContext.old';\nimport {\n  prepareToHydrateHostInstance,\n  prepareToHydrateHostTextInstance,\n  prepareToHydrateHostSuspenseInstance,\n  popHydrationState,\n  resetHydrationState,\n  getIsHydrating,\n} from './ReactFiberHydrationContext.old';\nimport {\n  enableSuspenseCallback,\n  enableSuspenseServerRenderer,\n  enableScopeAPI,\n  enableProfilerTimer,\n  enableCache,\n  enableSuspenseLayoutEffectSemantics,\n  enablePersistentOffscreenHostContainer,\n} from 'shared/ReactFeatureFlags';\nimport {\n  renderDidSuspend,\n  renderDidSuspendDelayIfPossible,\n  renderHasNotSuspendedYet,\n  popRenderLanes,\n  getRenderTargetTime,\n  subtreeRenderLanes,\n} from './ReactFiberWorkLoop.old';\nimport {\n  OffscreenLane,\n  SomeRetryLane,\n  NoLanes,\n  includesSomeLane,\n  mergeLanes,\n} from './ReactFiberLane.old';\nimport {resetChildFibers} from './ReactChildFiber.old';\nimport {createScopeInstance} from './ReactFiberScope.old';\nimport {transferActualDuration} from './ReactProfilerTimer.old';\nimport {\n  popCacheProvider,\n  popRootCachePool,\n  popCachePool,\n} from './ReactFiberCacheComponent.old';\n\nfunction markUpdate(workInProgress: Fiber) {\n  // Tag the fiber with an update effect. This turns a Placement into\n  // a PlacementAndUpdate.\n  workInProgress.flags |= Update;\n}\n\nfunction markRef(workInProgress: Fiber) {\n  workInProgress.flags |= Ref;\n  if (enableSuspenseLayoutEffectSemantics) {\n    workInProgress.flags |= RefStatic;\n  }\n}\n\nfunction hadNoMutationsEffects(current: null | Fiber, completedWork: Fiber) {\n  const didBailout = current !== null && current.child === completedWork.child;\n  if (didBailout) {\n    return true;\n  }\n\n  if ((completedWork.flags & ChildDeletion) !== NoFlags) {\n    return false;\n  }\n\n  // TODO: If we move the `hadNoMutationsEffects` call after `bubbleProperties`\n  // then we only have to check the `completedWork.subtreeFlags`.\n  let child = completedWork.child;\n  while (child !== null) {\n    if (\n      (child.flags & MutationMask) !== NoFlags ||\n      (child.subtreeFlags & MutationMask) !== NoFlags\n    ) {\n      return false;\n    }\n    child = child.sibling;\n  }\n  return true;\n}\n\nlet appendAllChildren;\nlet updateHostContainer;\nlet updateHostComponent;\nlet updateHostText;\nif (supportsMutation) {\n  // Mutation mode\n\n  appendAllChildren = function(\n    parent: Instance,\n    workInProgress: Fiber,\n    needsVisibilityToggle: boolean,\n    isHidden: boolean,\n  ) {\n    // We only have the top Fiber that was created but we need recurse down its\n    // children to find all the terminal nodes.\n    let node = workInProgress.child;\n    while (node !== null) {\n      if (node.tag === HostComponent || node.tag === HostText) {\n        appendInitialChild(parent, node.stateNode);\n      } else if (node.tag === HostPortal) {\n        // If we have a portal child, then we don't want to traverse\n        // down its children. Instead, we'll get insertions from each child in\n        // the portal directly.\n      } else if (node.child !== null) {\n        node.child.return = node;\n        node = node.child;\n        continue;\n      }\n      if (node === workInProgress) {\n        return;\n      }\n      while (node.sibling === null) {\n        if (node.return === null || node.return === workInProgress) {\n          return;\n        }\n        node = node.return;\n      }\n      node.sibling.return = node.return;\n      node = node.sibling;\n    }\n  };\n\n  updateHostContainer = function(current: null | Fiber, workInProgress: Fiber) {\n    // Noop\n  };\n  updateHostComponent = function(\n    current: Fiber,\n    workInProgress: Fiber,\n    type: Type,\n    newProps: Props,\n    rootContainerInstance: Container,\n  ) {\n    // If we have an alternate, that means this is an update and we need to\n    // schedule a side-effect to do the updates.\n    const oldProps = current.memoizedProps;\n    if (oldProps === newProps) {\n      // In mutation mode, this is sufficient for a bailout because\n      // we won't touch this node even if children changed.\n      return;\n    }\n\n    // If we get updated because one of our children updated, we don't\n    // have newProps so we'll have to reuse them.\n    // TODO: Split the update API as separate for the props vs. children.\n    // Even better would be if children weren't special cased at all tho.\n    const instance: Instance = workInProgress.stateNode;\n    const currentHostContext = getHostContext();\n    // TODO: Experiencing an error where oldProps is null. Suggests a host\n    // component is hitting the resume path. Figure out why. Possibly\n    // related to `hidden`.\n    const updatePayload = prepareUpdate(\n      instance,\n      type,\n      oldProps,\n      newProps,\n      rootContainerInstance,\n      currentHostContext,\n    );\n    // TODO: Type this specific to this type of component.\n    workInProgress.updateQueue = (updatePayload: any);\n    // If the update payload indicates that there is a change or if there\n    // is a new ref we mark this as an update. All the work is done in commitWork.\n    if (updatePayload) {\n      markUpdate(workInProgress);\n    }\n  };\n  updateHostText = function(\n    current: Fiber,\n    workInProgress: Fiber,\n    oldText: string,\n    newText: string,\n  ) {\n    // If the text differs, mark it as an update. All the work in done in commitWork.\n    if (oldText !== newText) {\n      markUpdate(workInProgress);\n    }\n  };\n} else if (supportsPersistence) {\n  // Persistent host tree mode\n\n  appendAllChildren = function(\n    parent: Instance,\n    workInProgress: Fiber,\n    needsVisibilityToggle: boolean,\n    isHidden: boolean,\n  ) {\n    // We only have the top Fiber that was created but we need recurse down its\n    // children to find all the terminal nodes.\n    let node = workInProgress.child;\n    while (node !== null) {\n      // eslint-disable-next-line no-labels\n      branches: if (node.tag === HostComponent) {\n        let instance = node.stateNode;\n        if (needsVisibilityToggle && isHidden) {\n          // This child is inside a timed out tree. Hide it.\n          const props = node.memoizedProps;\n          const type = node.type;\n          instance = cloneHiddenInstance(instance, type, props, node);\n        }\n        appendInitialChild(parent, instance);\n      } else if (node.tag === HostText) {\n        let instance = node.stateNode;\n        if (needsVisibilityToggle && isHidden) {\n          // This child is inside a timed out tree. Hide it.\n          const text = node.memoizedProps;\n          instance = cloneHiddenTextInstance(instance, text, node);\n        }\n        appendInitialChild(parent, instance);\n      } else if (node.tag === HostPortal) {\n        // If we have a portal child, then we don't want to traverse\n        // down its children. Instead, we'll get insertions from each child in\n        // the portal directly.\n      } else if (\n        node.tag === OffscreenComponent &&\n        node.memoizedState !== null\n      ) {\n        // The children in this boundary are hidden. Toggle their visibility\n        // before appending.\n        const child = node.child;\n        if (child !== null) {\n          child.return = node;\n        }\n        if (enablePersistentOffscreenHostContainer) {\n          appendAllChildren(parent, node, false, false);\n        } else {\n          appendAllChildren(parent, node, true, true);\n        }\n      } else if (node.child !== null) {\n        node.child.return = node;\n        node = node.child;\n        continue;\n      }\n      // $FlowFixMe This is correct but Flow is confused by the labeled break.\n      node = (node: Fiber);\n      if (node === workInProgress) {\n        return;\n      }\n      while (node.sibling === null) {\n        if (node.return === null || node.return === workInProgress) {\n          return;\n        }\n        node = node.return;\n      }\n      node.sibling.return = node.return;\n      node = node.sibling;\n    }\n  };\n\n  // An unfortunate fork of appendAllChildren because we have two different parent types.\n  const appendAllChildrenToContainer = function(\n    containerChildSet: ChildSet,\n    workInProgress: Fiber,\n    needsVisibilityToggle: boolean,\n    isHidden: boolean,\n  ) {\n    // We only have the top Fiber that was created but we need recurse down its\n    // children to find all the terminal nodes.\n    let node = workInProgress.child;\n    while (node !== null) {\n      // eslint-disable-next-line no-labels\n      branches: if (node.tag === HostComponent) {\n        let instance = node.stateNode;\n        if (needsVisibilityToggle && isHidden) {\n          // This child is inside a timed out tree. Hide it.\n          const props = node.memoizedProps;\n          const type = node.type;\n          instance = cloneHiddenInstance(instance, type, props, node);\n        }\n        appendChildToContainerChildSet(containerChildSet, instance);\n      } else if (node.tag === HostText) {\n        let instance = node.stateNode;\n        if (needsVisibilityToggle && isHidden) {\n          // This child is inside a timed out tree. Hide it.\n          const text = node.memoizedProps;\n          instance = cloneHiddenTextInstance(instance, text, node);\n        }\n        appendChildToContainerChildSet(containerChildSet, instance);\n      } else if (node.tag === HostPortal) {\n        // If we have a portal child, then we don't want to traverse\n        // down its children. Instead, we'll get insertions from each child in\n        // the portal directly.\n      } else if (\n        node.tag === OffscreenComponent &&\n        node.memoizedState !== null\n      ) {\n        // The children in this boundary are hidden. Toggle their visibility\n        // before appending.\n        const child = node.child;\n        if (child !== null) {\n          child.return = node;\n        }\n        if (enablePersistentOffscreenHostContainer) {\n          appendAllChildrenToContainer(containerChildSet, node, false, false);\n        } else {\n          appendAllChildrenToContainer(containerChildSet, node, true, true);\n        }\n      } else if (node.child !== null) {\n        node.child.return = node;\n        node = node.child;\n        continue;\n      }\n      // $FlowFixMe This is correct but Flow is confused by the labeled break.\n      node = (node: Fiber);\n      if (node === workInProgress) {\n        return;\n      }\n      while (node.sibling === null) {\n        if (node.return === null || node.return === workInProgress) {\n          return;\n        }\n        node = node.return;\n      }\n      node.sibling.return = node.return;\n      node = node.sibling;\n    }\n  };\n  updateHostContainer = function(current: null | Fiber, workInProgress: Fiber) {\n    const portalOrRoot: {\n      containerInfo: Container,\n      pendingChildren: ChildSet,\n      ...\n    } = workInProgress.stateNode;\n    const childrenUnchanged = hadNoMutationsEffects(current, workInProgress);\n    if (childrenUnchanged) {\n      // No changes, just reuse the existing instance.\n    } else {\n      const container = portalOrRoot.containerInfo;\n      const newChildSet = createContainerChildSet(container);\n      // If children might have changed, we have to add them all to the set.\n      appendAllChildrenToContainer(newChildSet, workInProgress, false, false);\n      portalOrRoot.pendingChildren = newChildSet;\n      // Schedule an update on the container to swap out the container.\n      markUpdate(workInProgress);\n      finalizeContainerChildren(container, newChildSet);\n    }\n  };\n  updateHostComponent = function(\n    current: Fiber,\n    workInProgress: Fiber,\n    type: Type,\n    newProps: Props,\n    rootContainerInstance: Container,\n  ) {\n    const currentInstance = current.stateNode;\n    const oldProps = current.memoizedProps;\n    // If there are no effects associated with this node, then none of our children had any updates.\n    // This guarantees that we can reuse all of them.\n    const childrenUnchanged = hadNoMutationsEffects(current, workInProgress);\n    if (childrenUnchanged && oldProps === newProps) {\n      // No changes, just reuse the existing instance.\n      // Note that this might release a previous clone.\n      workInProgress.stateNode = currentInstance;\n      return;\n    }\n    const recyclableInstance: Instance = workInProgress.stateNode;\n    const currentHostContext = getHostContext();\n    let updatePayload = null;\n    if (oldProps !== newProps) {\n      updatePayload = prepareUpdate(\n        recyclableInstance,\n        type,\n        oldProps,\n        newProps,\n        rootContainerInstance,\n        currentHostContext,\n      );\n    }\n    if (childrenUnchanged && updatePayload === null) {\n      // No changes, just reuse the existing instance.\n      // Note that this might release a previous clone.\n      workInProgress.stateNode = currentInstance;\n      return;\n    }\n    const newInstance = cloneInstance(\n      currentInstance,\n      updatePayload,\n      type,\n      oldProps,\n      newProps,\n      workInProgress,\n      childrenUnchanged,\n      recyclableInstance,\n    );\n    if (\n      finalizeInitialChildren(\n        newInstance,\n        type,\n        newProps,\n        rootContainerInstance,\n        currentHostContext,\n      )\n    ) {\n      markUpdate(workInProgress);\n    }\n    workInProgress.stateNode = newInstance;\n    if (childrenUnchanged) {\n      // If there are no other effects in this tree, we need to flag this node as having one.\n      // Even though we're not going to use it for anything.\n      // Otherwise parents won't know that there are new children to propagate upwards.\n      markUpdate(workInProgress);\n    } else {\n      // If children might have changed, we have to add them all to the set.\n      appendAllChildren(newInstance, workInProgress, false, false);\n    }\n  };\n  updateHostText = function(\n    current: Fiber,\n    workInProgress: Fiber,\n    oldText: string,\n    newText: string,\n  ) {\n    if (oldText !== newText) {\n      // If the text content differs, we'll create a new text instance for it.\n      const rootContainerInstance = getRootHostContainer();\n      const currentHostContext = getHostContext();\n      workInProgress.stateNode = createTextInstance(\n        newText,\n        rootContainerInstance,\n        currentHostContext,\n        workInProgress,\n      );\n      // We'll have to mark it as having an effect, even though we won't use the effect for anything.\n      // This lets the parents know that at least one of their children has changed.\n      markUpdate(workInProgress);\n    } else {\n      workInProgress.stateNode = current.stateNode;\n    }\n  };\n} else {\n  // No host operations\n  updateHostContainer = function(current: null | Fiber, workInProgress: Fiber) {\n    // Noop\n  };\n  updateHostComponent = function(\n    current: Fiber,\n    workInProgress: Fiber,\n    type: Type,\n    newProps: Props,\n    rootContainerInstance: Container,\n  ) {\n    // Noop\n  };\n  updateHostText = function(\n    current: Fiber,\n    workInProgress: Fiber,\n    oldText: string,\n    newText: string,\n  ) {\n    // Noop\n  };\n}\n\nfunction cutOffTailIfNeeded(\n  renderState: SuspenseListRenderState,\n  hasRenderedATailFallback: boolean,\n) {\n  if (getIsHydrating()) {\n    // If we're hydrating, we should consume as many items as we can\n    // so we don't leave any behind.\n    return;\n  }\n  switch (renderState.tailMode) {\n    case 'hidden': {\n      // Any insertions at the end of the tail list after this point\n      // should be invisible. If there are already mounted boundaries\n      // anything before them are not considered for collapsing.\n      // Therefore we need to go through the whole tail to find if\n      // there are any.\n      let tailNode = renderState.tail;\n      let lastTailNode = null;\n      while (tailNode !== null) {\n        if (tailNode.alternate !== null) {\n          lastTailNode = tailNode;\n        }\n        tailNode = tailNode.sibling;\n      }\n      // Next we're simply going to delete all insertions after the\n      // last rendered item.\n      if (lastTailNode === null) {\n        // All remaining items in the tail are insertions.\n        renderState.tail = null;\n      } else {\n        // Detach the insertion after the last node that was already\n        // inserted.\n        lastTailNode.sibling = null;\n      }\n      break;\n    }\n    case 'collapsed': {\n      // Any insertions at the end of the tail list after this point\n      // should be invisible. If there are already mounted boundaries\n      // anything before them are not considered for collapsing.\n      // Therefore we need to go through the whole tail to find if\n      // there are any.\n      let tailNode = renderState.tail;\n      let lastTailNode = null;\n      while (tailNode !== null) {\n        if (tailNode.alternate !== null) {\n          lastTailNode = tailNode;\n        }\n        tailNode = tailNode.sibling;\n      }\n      // Next we're simply going to delete all insertions after the\n      // last rendered item.\n      if (lastTailNode === null) {\n        // All remaining items in the tail are insertions.\n        if (!hasRenderedATailFallback && renderState.tail !== null) {\n          // We suspended during the head. We want to show at least one\n          // row at the tail. So we'll keep on and cut off the rest.\n          renderState.tail.sibling = null;\n        } else {\n          renderState.tail = null;\n        }\n      } else {\n        // Detach the insertion after the last node that was already\n        // inserted.\n        lastTailNode.sibling = null;\n      }\n      break;\n    }\n  }\n}\n\nfunction bubbleProperties(completedWork: Fiber) {\n  const didBailout =\n    completedWork.alternate !== null &&\n    completedWork.alternate.child === completedWork.child;\n\n  let newChildLanes = NoLanes;\n  let subtreeFlags = NoFlags;\n\n  if (!didBailout) {\n    // Bubble up the earliest expiration time.\n    if (enableProfilerTimer && (completedWork.mode & ProfileMode) !== NoMode) {\n      // In profiling mode, resetChildExpirationTime is also used to reset\n      // profiler durations.\n      let actualDuration = completedWork.actualDuration;\n      let treeBaseDuration = ((completedWork.selfBaseDuration: any): number);\n\n      let child = completedWork.child;\n      while (child !== null) {\n        newChildLanes = mergeLanes(\n          newChildLanes,\n          mergeLanes(child.lanes, child.childLanes),\n        );\n\n        subtreeFlags |= child.subtreeFlags;\n        subtreeFlags |= child.flags;\n\n        // When a fiber is cloned, its actualDuration is reset to 0. This value will\n        // only be updated if work is done on the fiber (i.e. it doesn't bailout).\n        // When work is done, it should bubble to the parent's actualDuration. If\n        // the fiber has not been cloned though, (meaning no work was done), then\n        // this value will reflect the amount of time spent working on a previous\n        // render. In that case it should not bubble. We determine whether it was\n        // cloned by comparing the child pointer.\n        actualDuration += child.actualDuration;\n\n        treeBaseDuration += child.treeBaseDuration;\n        child = child.sibling;\n      }\n\n      completedWork.actualDuration = actualDuration;\n      completedWork.treeBaseDuration = treeBaseDuration;\n    } else {\n      let child = completedWork.child;\n      while (child !== null) {\n        newChildLanes = mergeLanes(\n          newChildLanes,\n          mergeLanes(child.lanes, child.childLanes),\n        );\n\n        subtreeFlags |= child.subtreeFlags;\n        subtreeFlags |= child.flags;\n\n        // Update the return pointer so the tree is consistent. This is a code\n        // smell because it assumes the commit phase is never concurrent with\n        // the render phase. Will address during refactor to alternate model.\n        child.return = completedWork;\n\n        child = child.sibling;\n      }\n    }\n\n    completedWork.subtreeFlags |= subtreeFlags;\n  } else {\n    // Bubble up the earliest expiration time.\n    if (enableProfilerTimer && (completedWork.mode & ProfileMode) !== NoMode) {\n      // In profiling mode, resetChildExpirationTime is also used to reset\n      // profiler durations.\n      let treeBaseDuration = ((completedWork.selfBaseDuration: any): number);\n\n      let child = completedWork.child;\n      while (child !== null) {\n        newChildLanes = mergeLanes(\n          newChildLanes,\n          mergeLanes(child.lanes, child.childLanes),\n        );\n\n        // \"Static\" flags share the lifetime of the fiber/hook they belong to,\n        // so we should bubble those up even during a bailout. All the other\n        // flags have a lifetime only of a single render + commit, so we should\n        // ignore them.\n        subtreeFlags |= child.subtreeFlags & StaticMask;\n        subtreeFlags |= child.flags & StaticMask;\n\n        treeBaseDuration += child.treeBaseDuration;\n        child = child.sibling;\n      }\n\n      completedWork.treeBaseDuration = treeBaseDuration;\n    } else {\n      let child = completedWork.child;\n      while (child !== null) {\n        newChildLanes = mergeLanes(\n          newChildLanes,\n          mergeLanes(child.lanes, child.childLanes),\n        );\n\n        // \"Static\" flags share the lifetime of the fiber/hook they belong to,\n        // so we should bubble those up even during a bailout. All the other\n        // flags have a lifetime only of a single render + commit, so we should\n        // ignore them.\n        subtreeFlags |= child.subtreeFlags & StaticMask;\n        subtreeFlags |= child.flags & StaticMask;\n\n        // Update the return pointer so the tree is consistent. This is a code\n        // smell because it assumes the commit phase is never concurrent with\n        // the render phase. Will address during refactor to alternate model.\n        child.return = completedWork;\n\n        child = child.sibling;\n      }\n    }\n\n    completedWork.subtreeFlags |= subtreeFlags;\n  }\n\n  completedWork.childLanes = newChildLanes;\n\n  return didBailout;\n}\n\nexport function completeSuspendedOffscreenHostContainer(\n  current: Fiber | null,\n  workInProgress: Fiber,\n) {\n  // This is a fork of the complete phase for HostComponent. We use it when\n  // a suspense tree is in its fallback state, because in that case the primary\n  // tree that includes the offscreen boundary is skipped over without a\n  // regular complete phase.\n  //\n  // We can optimize this path further by inlining the update logic for\n  // offscreen instances specifically, i.e. skipping the `prepareUpdate` call.\n  const rootContainerInstance = getRootHostContainer();\n  const type = workInProgress.type;\n  const newProps = workInProgress.memoizedProps;\n  if (current !== null) {\n    updateHostComponent(\n      current,\n      workInProgress,\n      type,\n      newProps,\n      rootContainerInstance,\n    );\n  } else {\n    const currentHostContext = getHostContext();\n    const instance = createInstance(\n      type,\n      newProps,\n      rootContainerInstance,\n      currentHostContext,\n      workInProgress,\n    );\n\n    appendAllChildren(instance, workInProgress, false, false);\n\n    workInProgress.stateNode = instance;\n\n    // Certain renderers require commit-time effects for initial mount.\n    // (eg DOM renderer supports auto-focus for certain elements).\n    // Make sure such renderers get scheduled for later work.\n    if (\n      finalizeInitialChildren(\n        instance,\n        type,\n        newProps,\n        rootContainerInstance,\n        currentHostContext,\n      )\n    ) {\n      markUpdate(workInProgress);\n    }\n\n    if (workInProgress.ref !== null) {\n      // If there is a ref on a host node we need to schedule a callback\n      markRef(workInProgress);\n    }\n  }\n  bubbleProperties(workInProgress);\n}\n\nfunction completeWork(\n  current: Fiber | null,\n  workInProgress: Fiber,\n  renderLanes: Lanes,\n): Fiber | null {\n  const newProps = workInProgress.pendingProps;\n\n  switch (workInProgress.tag) {\n    case IndeterminateComponent:\n    case LazyComponent:\n    case SimpleMemoComponent:\n    case FunctionComponent:\n    case ForwardRef:\n    case Fragment:\n    case Mode:\n    case Profiler:\n    case ContextConsumer:\n    case MemoComponent:\n      bubbleProperties(workInProgress);\n      return null;\n    case ClassComponent: {\n      const Component = workInProgress.type;\n      if (isLegacyContextProvider(Component)) {\n        popLegacyContext(workInProgress);\n      }\n      bubbleProperties(workInProgress);\n      return null;\n    }\n    case HostRoot: {\n      const fiberRoot = (workInProgress.stateNode: FiberRoot);\n      if (enableCache) {\n        popRootCachePool(fiberRoot, renderLanes);\n\n        const cache: Cache = workInProgress.memoizedState.cache;\n        popCacheProvider(workInProgress, cache);\n      }\n      popHostContainer(workInProgress);\n      popTopLevelLegacyContextObject(workInProgress);\n      resetMutableSourceWorkInProgressVersions();\n      if (fiberRoot.pendingContext) {\n        fiberRoot.context = fiberRoot.pendingContext;\n        fiberRoot.pendingContext = null;\n      }\n      if (current === null || current.child === null) {\n        // If we hydrated, pop so that we can delete any remaining children\n        // that weren't hydrated.\n        const wasHydrated = popHydrationState(workInProgress);\n        if (wasHydrated) {\n          // If we hydrated, then we'll need to schedule an update for\n          // the commit side-effects on the root.\n          markUpdate(workInProgress);\n        } else if (!fiberRoot.hydrate) {\n          // Schedule an effect to clear this container at the start of the next commit.\n          // This handles the case of React rendering into a container with previous children.\n          // It's also safe to do for updates too, because current.child would only be null\n          // if the previous render was null (so the the container would already be empty).\n          workInProgress.flags |= Snapshot;\n        }\n      }\n      updateHostContainer(current, workInProgress);\n      bubbleProperties(workInProgress);\n      return null;\n    }\n    case HostComponent: {\n      popHostContext(workInProgress);\n      const rootContainerInstance = getRootHostContainer();\n      const type = workInProgress.type;\n      if (current !== null && workInProgress.stateNode != null) {\n        updateHostComponent(\n          current,\n          workInProgress,\n          type,\n          newProps,\n          rootContainerInstance,\n        );\n\n        if (current.ref !== workInProgress.ref) {\n          markRef(workInProgress);\n        }\n      } else {\n        if (!newProps) {\n          invariant(\n            workInProgress.stateNode !== null,\n            'We must have new props for new mounts. This error is likely ' +\n              'caused by a bug in React. Please file an issue.',\n          );\n          // This can happen when we abort work.\n          bubbleProperties(workInProgress);\n          return null;\n        }\n\n        const currentHostContext = getHostContext();\n        // TODO: Move createInstance to beginWork and keep it on a context\n        // \"stack\" as the parent. Then append children as we go in beginWork\n        // or completeWork depending on whether we want to add them top->down or\n        // bottom->up. Top->down is faster in IE11.\n        const wasHydrated = popHydrationState(workInProgress);\n        if (wasHydrated) {\n          // TODO: Move this and createInstance step into the beginPhase\n          // to consolidate.\n          if (\n            prepareToHydrateHostInstance(\n              workInProgress,\n              rootContainerInstance,\n              currentHostContext,\n            )\n          ) {\n            // If changes to the hydrated node need to be applied at the\n            // commit-phase we mark this as such.\n            markUpdate(workInProgress);\n          }\n        } else {\n          const instance = createInstance(\n            type,\n            newProps,\n            rootContainerInstance,\n            currentHostContext,\n            workInProgress,\n          );\n\n          appendAllChildren(instance, workInProgress, false, false);\n\n          workInProgress.stateNode = instance;\n\n          // Certain renderers require commit-time effects for initial mount.\n          // (eg DOM renderer supports auto-focus for certain elements).\n          // Make sure such renderers get scheduled for later work.\n          if (\n            finalizeInitialChildren(\n              instance,\n              type,\n              newProps,\n              rootContainerInstance,\n              currentHostContext,\n            )\n          ) {\n            markUpdate(workInProgress);\n          }\n        }\n\n        if (workInProgress.ref !== null) {\n          // If there is a ref on a host node we need to schedule a callback\n          markRef(workInProgress);\n        }\n      }\n      bubbleProperties(workInProgress);\n      return null;\n    }\n    case HostText: {\n      const newText = newProps;\n      if (current && workInProgress.stateNode != null) {\n        const oldText = current.memoizedProps;\n        // If we have an alternate, that means this is an update and we need\n        // to schedule a side-effect to do the updates.\n        updateHostText(current, workInProgress, oldText, newText);\n      } else {\n        if (typeof newText !== 'string') {\n          invariant(\n            workInProgress.stateNode !== null,\n            'We must have new props for new mounts. This error is likely ' +\n              'caused by a bug in React. Please file an issue.',\n          );\n          // This can happen when we abort work.\n        }\n        const rootContainerInstance = getRootHostContainer();\n        const currentHostContext = getHostContext();\n        const wasHydrated = popHydrationState(workInProgress);\n        if (wasHydrated) {\n          if (prepareToHydrateHostTextInstance(workInProgress)) {\n            markUpdate(workInProgress);\n          }\n        } else {\n          workInProgress.stateNode = createTextInstance(\n            newText,\n            rootContainerInstance,\n            currentHostContext,\n            workInProgress,\n          );\n        }\n      }\n      bubbleProperties(workInProgress);\n      return null;\n    }\n    case SuspenseComponent: {\n      popSuspenseContext(workInProgress);\n      const nextState: null | SuspenseState = workInProgress.memoizedState;\n\n      if (enableSuspenseServerRenderer) {\n        if (nextState !== null && nextState.dehydrated !== null) {\n          if (current === null) {\n            const wasHydrated = popHydrationState(workInProgress);\n            invariant(\n              wasHydrated,\n              'A dehydrated suspense component was completed without a hydrated node. ' +\n                'This is probably a bug in React.',\n            );\n            prepareToHydrateHostSuspenseInstance(workInProgress);\n            bubbleProperties(workInProgress);\n            if (enableProfilerTimer) {\n              if ((workInProgress.mode & ProfileMode) !== NoMode) {\n                const isTimedOutSuspense = nextState !== null;\n                if (isTimedOutSuspense) {\n                  // Don't count time spent in a timed out Suspense subtree as part of the base duration.\n                  const primaryChildFragment = workInProgress.child;\n                  if (primaryChildFragment !== null) {\n                    // $FlowFixMe Flow doesn't support type casting in combination with the -= operator\n                    workInProgress.treeBaseDuration -= ((primaryChildFragment.treeBaseDuration: any): number);\n                  }\n                }\n              }\n            }\n            return null;\n          } else {\n            // We should never have been in a hydration state if we didn't have a current.\n            // However, in some of those paths, we might have reentered a hydration state\n            // and then we might be inside a hydration state. In that case, we'll need to exit out of it.\n            resetHydrationState();\n            if ((workInProgress.flags & DidCapture) === NoFlags) {\n              // This boundary did not suspend so it's now hydrated and unsuspended.\n              workInProgress.memoizedState = null;\n            }\n            // If nothing suspended, we need to schedule an effect to mark this boundary\n            // as having hydrated so events know that they're free to be invoked.\n            // It's also a signal to replay events and the suspense callback.\n            // If something suspended, schedule an effect to attach retry listeners.\n            // So we might as well always mark this.\n            workInProgress.flags |= Update;\n            bubbleProperties(workInProgress);\n            if (enableProfilerTimer) {\n              if ((workInProgress.mode & ProfileMode) !== NoMode) {\n                const isTimedOutSuspense = nextState !== null;\n                if (isTimedOutSuspense) {\n                  // Don't count time spent in a timed out Suspense subtree as part of the base duration.\n                  const primaryChildFragment = workInProgress.child;\n                  if (primaryChildFragment !== null) {\n                    // $FlowFixMe Flow doesn't support type casting in combination with the -= operator\n                    workInProgress.treeBaseDuration -= ((primaryChildFragment.treeBaseDuration: any): number);\n                  }\n                }\n              }\n            }\n            return null;\n          }\n        }\n      }\n\n      if ((workInProgress.flags & DidCapture) !== NoFlags) {\n        // Something suspended. Re-render with the fallback children.\n        workInProgress.lanes = renderLanes;\n        // Do not reset the effect list.\n        if (\n          enableProfilerTimer &&\n          (workInProgress.mode & ProfileMode) !== NoMode\n        ) {\n          transferActualDuration(workInProgress);\n        }\n        // Don't bubble properties in this case.\n        return workInProgress;\n      }\n\n      const nextDidTimeout = nextState !== null;\n      let prevDidTimeout = false;\n      if (current === null) {\n        popHydrationState(workInProgress);\n      } else {\n        const prevState: null | SuspenseState = current.memoizedState;\n        prevDidTimeout = prevState !== null;\n      }\n\n      // If the suspended state of the boundary changes, we need to schedule\n      // an effect to toggle the subtree's visibility. When we switch from\n      // fallback -> primary, the inner Offscreen fiber schedules this effect\n      // as part of its normal complete phase. But when we switch from\n      // primary -> fallback, the inner Offscreen fiber does not have a complete\n      // phase. So we need to schedule its effect here.\n      //\n      // We also use this flag to connect/disconnect the effects, but the same\n      // logic applies: when re-connecting, the Offscreen fiber's complete\n      // phase will handle scheduling the effect. It's only when the fallback\n      // is active that we have to do anything special.\n      if (nextDidTimeout && !prevDidTimeout) {\n        const offscreenFiber: Fiber = (workInProgress.child: any);\n        offscreenFiber.flags |= Visibility;\n\n        // TODO: This will still suspend a synchronous tree if anything\n        // in the concurrent tree already suspended during this render.\n        // This is a known bug.\n        if ((workInProgress.mode & ConcurrentMode) !== NoMode) {\n          // TODO: Move this back to throwException because this is too late\n          // if this is a large tree which is common for initial loads. We\n          // don't know if we should restart a render or not until we get\n          // this marker, and this is too late.\n          // If this render already had a ping or lower pri updates,\n          // and this is the first time we know we're going to suspend we\n          // should be able to immediately restart from within throwException.\n          const hasInvisibleChildContext =\n            current === null &&\n            workInProgress.memoizedProps.unstable_avoidThisFallback !== true;\n          if (\n            hasInvisibleChildContext ||\n            hasSuspenseContext(\n              suspenseStackCursor.current,\n              (InvisibleParentSuspenseContext: SuspenseContext),\n            )\n          ) {\n            // If this was in an invisible tree or a new render, then showing\n            // this boundary is ok.\n            renderDidSuspend();\n          } else {\n            // Otherwise, we're going to have to hide content so we should\n            // suspend for longer if possible.\n            renderDidSuspendDelayIfPossible();\n          }\n        }\n      }\n\n      const wakeables: Set<Wakeable> | null = (workInProgress.updateQueue: any);\n      if (wakeables !== null) {\n        // Schedule an effect to attach a retry listener to the promise.\n        // TODO: Move to passive phase\n        workInProgress.flags |= Update;\n      }\n\n      if (\n        enableSuspenseCallback &&\n        workInProgress.updateQueue !== null &&\n        workInProgress.memoizedProps.suspenseCallback != null\n      ) {\n        // Always notify the callback\n        // TODO: Move to passive phase\n        workInProgress.flags |= Update;\n      }\n      bubbleProperties(workInProgress);\n      if (enableProfilerTimer) {\n        if ((workInProgress.mode & ProfileMode) !== NoMode) {\n          if (nextDidTimeout) {\n            // Don't count time spent in a timed out Suspense subtree as part of the base duration.\n            const primaryChildFragment = workInProgress.child;\n            if (primaryChildFragment !== null) {\n              // $FlowFixMe Flow doesn't support type casting in combination with the -= operator\n              workInProgress.treeBaseDuration -= ((primaryChildFragment.treeBaseDuration: any): number);\n            }\n          }\n        }\n      }\n      return null;\n    }\n    case HostPortal:\n      popHostContainer(workInProgress);\n      updateHostContainer(current, workInProgress);\n      if (current === null) {\n        preparePortalMount(workInProgress.stateNode.containerInfo);\n      }\n      bubbleProperties(workInProgress);\n      return null;\n    case ContextProvider:\n      // Pop provider fiber\n      const context: ReactContext<any> = workInProgress.type._context;\n      popProvider(context, workInProgress);\n      bubbleProperties(workInProgress);\n      return null;\n    case IncompleteClassComponent: {\n      // Same as class component case. I put it down here so that the tags are\n      // sequential to ensure this switch is compiled to a jump table.\n      const Component = workInProgress.type;\n      if (isLegacyContextProvider(Component)) {\n        popLegacyContext(workInProgress);\n      }\n      bubbleProperties(workInProgress);\n      return null;\n    }\n    case SuspenseListComponent: {\n      popSuspenseContext(workInProgress);\n\n      const renderState: null | SuspenseListRenderState =\n        workInProgress.memoizedState;\n\n      if (renderState === null) {\n        // We're running in the default, \"independent\" mode.\n        // We don't do anything in this mode.\n        bubbleProperties(workInProgress);\n        return null;\n      }\n\n      let didSuspendAlready = (workInProgress.flags & DidCapture) !== NoFlags;\n\n      const renderedTail = renderState.rendering;\n      if (renderedTail === null) {\n        // We just rendered the head.\n        if (!didSuspendAlready) {\n          // This is the first pass. We need to figure out if anything is still\n          // suspended in the rendered set.\n\n          // If new content unsuspended, but there's still some content that\n          // didn't. Then we need to do a second pass that forces everything\n          // to keep showing their fallbacks.\n\n          // We might be suspended if something in this render pass suspended, or\n          // something in the previous committed pass suspended. Otherwise,\n          // there's no chance so we can skip the expensive call to\n          // findFirstSuspended.\n          const cannotBeSuspended =\n            renderHasNotSuspendedYet() &&\n            (current === null || (current.flags & DidCapture) === NoFlags);\n          if (!cannotBeSuspended) {\n            let row = workInProgress.child;\n            while (row !== null) {\n              const suspended = findFirstSuspended(row);\n              if (suspended !== null) {\n                didSuspendAlready = true;\n                workInProgress.flags |= DidCapture;\n                cutOffTailIfNeeded(renderState, false);\n\n                // If this is a newly suspended tree, it might not get committed as\n                // part of the second pass. In that case nothing will subscribe to\n                // its thenables. Instead, we'll transfer its thenables to the\n                // SuspenseList so that it can retry if they resolve.\n                // There might be multiple of these in the list but since we're\n                // going to wait for all of them anyway, it doesn't really matter\n                // which ones gets to ping. In theory we could get clever and keep\n                // track of how many dependencies remain but it gets tricky because\n                // in the meantime, we can add/remove/change items and dependencies.\n                // We might bail out of the loop before finding any but that\n                // doesn't matter since that means that the other boundaries that\n                // we did find already has their listeners attached.\n                const newThenables = suspended.updateQueue;\n                if (newThenables !== null) {\n                  workInProgress.updateQueue = newThenables;\n                  workInProgress.flags |= Update;\n                }\n\n                // Rerender the whole list, but this time, we'll force fallbacks\n                // to stay in place.\n                // Reset the effect flags before doing the second pass since that's now invalid.\n                // Reset the child fibers to their original state.\n                workInProgress.subtreeFlags = NoFlags;\n                resetChildFibers(workInProgress, renderLanes);\n\n                // Set up the Suspense Context to force suspense and immediately\n                // rerender the children.\n                pushSuspenseContext(\n                  workInProgress,\n                  setShallowSuspenseContext(\n                    suspenseStackCursor.current,\n                    ForceSuspenseFallback,\n                  ),\n                );\n                // Don't bubble properties in this case.\n                return workInProgress.child;\n              }\n              row = row.sibling;\n            }\n          }\n\n          if (renderState.tail !== null && now() > getRenderTargetTime()) {\n            // We have already passed our CPU deadline but we still have rows\n            // left in the tail. We'll just give up further attempts to render\n            // the main content and only render fallbacks.\n            workInProgress.flags |= DidCapture;\n            didSuspendAlready = true;\n\n            cutOffTailIfNeeded(renderState, false);\n\n            // Since nothing actually suspended, there will nothing to ping this\n            // to get it started back up to attempt the next item. While in terms\n            // of priority this work has the same priority as this current render,\n            // it's not part of the same transition once the transition has\n            // committed. If it's sync, we still want to yield so that it can be\n            // painted. Conceptually, this is really the same as pinging.\n            // We can use any RetryLane even if it's the one currently rendering\n            // since we're leaving it behind on this node.\n            workInProgress.lanes = SomeRetryLane;\n          }\n        } else {\n          cutOffTailIfNeeded(renderState, false);\n        }\n        // Next we're going to render the tail.\n      } else {\n        // Append the rendered row to the child list.\n        if (!didSuspendAlready) {\n          const suspended = findFirstSuspended(renderedTail);\n          if (suspended !== null) {\n            workInProgress.flags |= DidCapture;\n            didSuspendAlready = true;\n\n            // Ensure we transfer the update queue to the parent so that it doesn't\n            // get lost if this row ends up dropped during a second pass.\n            const newThenables = suspended.updateQueue;\n            if (newThenables !== null) {\n              workInProgress.updateQueue = newThenables;\n              workInProgress.flags |= Update;\n            }\n\n            cutOffTailIfNeeded(renderState, true);\n            // This might have been modified.\n            if (\n              renderState.tail === null &&\n              renderState.tailMode === 'hidden' &&\n              !renderedTail.alternate &&\n              !getIsHydrating() // We don't cut it if we're hydrating.\n            ) {\n              // We're done.\n              bubbleProperties(workInProgress);\n              return null;\n            }\n          } else if (\n            // The time it took to render last row is greater than the remaining\n            // time we have to render. So rendering one more row would likely\n            // exceed it.\n            now() * 2 - renderState.renderingStartTime >\n              getRenderTargetTime() &&\n            renderLanes !== OffscreenLane\n          ) {\n            // We have now passed our CPU deadline and we'll just give up further\n            // attempts to render the main content and only render fallbacks.\n            // The assumption is that this is usually faster.\n            workInProgress.flags |= DidCapture;\n            didSuspendAlready = true;\n\n            cutOffTailIfNeeded(renderState, false);\n\n            // Since nothing actually suspended, there will nothing to ping this\n            // to get it started back up to attempt the next item. While in terms\n            // of priority this work has the same priority as this current render,\n            // it's not part of the same transition once the transition has\n            // committed. If it's sync, we still want to yield so that it can be\n            // painted. Conceptually, this is really the same as pinging.\n            // We can use any RetryLane even if it's the one currently rendering\n            // since we're leaving it behind on this node.\n            workInProgress.lanes = SomeRetryLane;\n          }\n        }\n        if (renderState.isBackwards) {\n          // The effect list of the backwards tail will have been added\n          // to the end. This breaks the guarantee that life-cycles fire in\n          // sibling order but that isn't a strong guarantee promised by React.\n          // Especially since these might also just pop in during future commits.\n          // Append to the beginning of the list.\n          renderedTail.sibling = workInProgress.child;\n          workInProgress.child = renderedTail;\n        } else {\n          const previousSibling = renderState.last;\n          if (previousSibling !== null) {\n            previousSibling.sibling = renderedTail;\n          } else {\n            workInProgress.child = renderedTail;\n          }\n          renderState.last = renderedTail;\n        }\n      }\n\n      if (renderState.tail !== null) {\n        // We still have tail rows to render.\n        // Pop a row.\n        const next = renderState.tail;\n        renderState.rendering = next;\n        renderState.tail = next.sibling;\n        renderState.renderingStartTime = now();\n        next.sibling = null;\n\n        // Restore the context.\n        // TODO: We can probably just avoid popping it instead and only\n        // setting it the first time we go from not suspended to suspended.\n        let suspenseContext = suspenseStackCursor.current;\n        if (didSuspendAlready) {\n          suspenseContext = setShallowSuspenseContext(\n            suspenseContext,\n            ForceSuspenseFallback,\n          );\n        } else {\n          suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);\n        }\n        pushSuspenseContext(workInProgress, suspenseContext);\n        // Do a pass over the next row.\n        // Don't bubble properties in this case.\n        return next;\n      }\n      bubbleProperties(workInProgress);\n      return null;\n    }\n    case ScopeComponent: {\n      if (enableScopeAPI) {\n        if (current === null) {\n          const scopeInstance: ReactScopeInstance = createScopeInstance();\n          workInProgress.stateNode = scopeInstance;\n          prepareScopeUpdate(scopeInstance, workInProgress);\n          if (workInProgress.ref !== null) {\n            markRef(workInProgress);\n            markUpdate(workInProgress);\n          }\n        } else {\n          if (workInProgress.ref !== null) {\n            markUpdate(workInProgress);\n          }\n          if (current.ref !== workInProgress.ref) {\n            markRef(workInProgress);\n          }\n        }\n        bubbleProperties(workInProgress);\n        return null;\n      }\n      break;\n    }\n    case OffscreenComponent:\n    case LegacyHiddenComponent: {\n      popRenderLanes(workInProgress);\n      const nextState: OffscreenState | null = workInProgress.memoizedState;\n      const nextIsHidden = nextState !== null;\n\n      if (current !== null) {\n        const prevState: OffscreenState | null = current.memoizedState;\n        const prevIsHidden = prevState !== null;\n        if (\n          prevIsHidden !== nextIsHidden &&\n          newProps.mode !== 'unstable-defer-without-hiding' &&\n          // LegacyHidden doesn't do any hiding — it only pre-renders.\n          workInProgress.tag !== LegacyHiddenComponent\n        ) {\n          workInProgress.flags |= Visibility;\n        }\n      }\n\n      if (!nextIsHidden || (workInProgress.mode & ConcurrentMode) === NoMode) {\n        bubbleProperties(workInProgress);\n      } else {\n        // Don't bubble properties for hidden children unless we're rendering\n        // at offscreen priority.\n        if (includesSomeLane(subtreeRenderLanes, (OffscreenLane: Lane))) {\n          bubbleProperties(workInProgress);\n          if (supportsMutation) {\n            // Check if there was an insertion or update in the hidden subtree.\n            // If so, we need to hide those nodes in the commit phase, so\n            // schedule a visibility effect.\n            if (\n              workInProgress.tag !== LegacyHiddenComponent &&\n              workInProgress.subtreeFlags & (Placement | Update) &&\n              newProps.mode !== 'unstable-defer-without-hiding'\n            ) {\n              workInProgress.flags |= Visibility;\n            }\n          }\n        }\n      }\n\n      if (enableCache) {\n        const spawnedCachePool: SpawnedCachePool | null = (workInProgress.updateQueue: any);\n        if (spawnedCachePool !== null) {\n          popCachePool(workInProgress);\n        }\n      }\n\n      return null;\n    }\n    case CacheComponent: {\n      if (enableCache) {\n        const cache: Cache = workInProgress.memoizedState.cache;\n        popCacheProvider(workInProgress, cache);\n        bubbleProperties(workInProgress);\n        return null;\n      }\n    }\n  }\n  invariant(\n    false,\n    'Unknown unit of work tag (%s). This error is likely caused by a bug in ' +\n      'React. Please file an issue.',\n    workInProgress.tag,\n  );\n}\n\nexport {completeWork};\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {ReactProviderType, ReactContext} from 'shared/ReactTypes';\nimport type {LazyComponent as LazyComponentType} from 'react/src/ReactLazy';\nimport type {Fiber, FiberRoot} from './ReactInternalTypes';\nimport type {TypeOfMode} from './ReactTypeOfMode';\nimport type {Lanes, Lane} from './ReactFiberLane.old';\nimport type {MutableSource} from 'shared/ReactTypes';\nimport type {\n  SuspenseState,\n  SuspenseListRenderState,\n  SuspenseListTailMode,\n} from './ReactFiberSuspenseComponent.old';\nimport type {SuspenseContext} from './ReactFiberSuspenseContext.old';\nimport type {\n  OffscreenProps,\n  OffscreenState,\n} from './ReactFiberOffscreenComponent';\nimport type {\n  Cache,\n  CacheComponentState,\n  SpawnedCachePool,\n} from './ReactFiberCacheComponent.old';\nimport type {UpdateQueue} from './ReactUpdateQueue.old';\n\nimport checkPropTypes from 'shared/checkPropTypes';\nimport {\n  markComponentRenderStarted,\n  markComponentRenderStopped,\n} from './SchedulingProfiler';\nimport {\n  IndeterminateComponent,\n  FunctionComponent,\n  ClassComponent,\n  HostRoot,\n  HostComponent,\n  HostText,\n  HostPortal,\n  ForwardRef,\n  Fragment,\n  Mode,\n  ContextProvider,\n  ContextConsumer,\n  Profiler,\n  SuspenseComponent,\n  SuspenseListComponent,\n  MemoComponent,\n  SimpleMemoComponent,\n  LazyComponent,\n  IncompleteClassComponent,\n  ScopeComponent,\n  OffscreenComponent,\n  LegacyHiddenComponent,\n  CacheComponent,\n} from './ReactWorkTags';\nimport {\n  NoFlags,\n  PerformedWork,\n  Placement,\n  Hydrating,\n  ContentReset,\n  DidCapture,\n  Update,\n  Ref,\n  RefStatic,\n  ChildDeletion,\n  ForceUpdateForLegacySuspense,\n  StaticMask,\n  ShouldCapture,\n} from './ReactFiberFlags';\nimport ReactSharedInternals from 'shared/ReactSharedInternals';\nimport {\n  debugRenderPhaseSideEffectsForStrictMode,\n  disableLegacyContext,\n  disableModulePatternComponents,\n  enableProfilerCommitHooks,\n  enableProfilerTimer,\n  enableSuspenseServerRenderer,\n  warnAboutDefaultPropsOnFunctionComponents,\n  enableScopeAPI,\n  enableCache,\n  enableLazyContextPropagation,\n  enableSuspenseLayoutEffectSemantics,\n  enableSchedulingProfiler,\n  enablePersistentOffscreenHostContainer,\n} from 'shared/ReactFeatureFlags';\nimport invariant from 'shared/invariant';\nimport isArray from 'shared/isArray';\nimport shallowEqual from 'shared/shallowEqual';\nimport getComponentNameFromFiber from 'react-reconciler/src/getComponentNameFromFiber';\nimport getComponentNameFromType from 'shared/getComponentNameFromType';\nimport ReactStrictModeWarnings from './ReactStrictModeWarnings.old';\nimport {REACT_LAZY_TYPE, getIteratorFn} from 'shared/ReactSymbols';\nimport {\n  getCurrentFiberOwnerNameInDevOrNull,\n  setIsRendering,\n} from './ReactCurrentFiber';\nimport {\n  resolveFunctionForHotReloading,\n  resolveForwardRefForHotReloading,\n  resolveClassForHotReloading,\n} from './ReactFiberHotReloading.old';\n\nimport {\n  mountChildFibers,\n  reconcileChildFibers,\n  cloneChildFibers,\n} from './ReactChildFiber.old';\nimport {\n  processUpdateQueue,\n  cloneUpdateQueue,\n  initializeUpdateQueue,\n  enqueueCapturedUpdate,\n} from './ReactUpdateQueue.old';\nimport {\n  NoLane,\n  NoLanes,\n  SyncLane,\n  OffscreenLane,\n  DefaultHydrationLane,\n  SomeRetryLane,\n  NoTimestamp,\n  includesSomeLane,\n  laneToLanes,\n  removeLanes,\n  mergeLanes,\n  getBumpedLaneForHydration,\n  pickArbitraryLane,\n} from './ReactFiberLane.old';\nimport {\n  ConcurrentMode,\n  NoMode,\n  ProfileMode,\n  StrictLegacyMode,\n} from './ReactTypeOfMode';\nimport {\n  shouldSetTextContent,\n  isSuspenseInstancePending,\n  isSuspenseInstanceFallback,\n  registerSuspenseInstanceRetry,\n  supportsHydration,\n  isPrimaryRenderer,\n  supportsPersistence,\n  getOffscreenContainerProps,\n} from './ReactFiberHostConfig';\nimport type {SuspenseInstance} from './ReactFiberHostConfig';\nimport {\n  shouldError,\n  shouldSuspend,\n  setIsStrictModeForDevtools,\n} from './ReactFiberReconciler';\nimport {pushHostContext, pushHostContainer} from './ReactFiberHostContext.old';\nimport {\n  suspenseStackCursor,\n  pushSuspenseContext,\n  InvisibleParentSuspenseContext,\n  ForceSuspenseFallback,\n  hasSuspenseContext,\n  setDefaultShallowSuspenseContext,\n  addSubtreeSuspenseContext,\n  setShallowSuspenseContext,\n} from './ReactFiberSuspenseContext.old';\nimport {findFirstSuspended} from './ReactFiberSuspenseComponent.old';\nimport {\n  pushProvider,\n  propagateContextChange,\n  lazilyPropagateParentContextChanges,\n  propagateParentContextChangesToDeferredTree,\n  checkIfContextChanged,\n  readContext,\n  prepareToReadContext,\n  scheduleWorkOnParentPath,\n} from './ReactFiberNewContext.old';\nimport {renderWithHooks, bailoutHooks} from './ReactFiberHooks.old';\nimport {stopProfilerTimerIfRunning} from './ReactProfilerTimer.old';\nimport {\n  getMaskedContext,\n  getUnmaskedContext,\n  hasContextChanged as hasLegacyContextChanged,\n  pushContextProvider as pushLegacyContextProvider,\n  isContextProvider as isLegacyContextProvider,\n  pushTopLevelContextObject,\n  invalidateContextProvider,\n} from './ReactFiberContext.old';\nimport {\n  enterHydrationState,\n  reenterHydrationStateFromDehydratedSuspenseInstance,\n  resetHydrationState,\n  tryToClaimNextHydratableInstance,\n  warnIfHydrating,\n} from './ReactFiberHydrationContext.old';\nimport {\n  adoptClassInstance,\n  constructClassInstance,\n  mountClassInstance,\n  resumeMountClassInstance,\n  updateClassInstance,\n} from './ReactFiberClassComponent.old';\nimport {resolveDefaultProps} from './ReactFiberLazyComponent.old';\nimport {\n  resolveLazyComponentTag,\n  createFiberFromTypeAndProps,\n  createFiberFromFragment,\n  createFiberFromOffscreen,\n  createWorkInProgress,\n  createOffscreenHostContainerFiber,\n  isSimpleFunctionComponent,\n} from './ReactFiber.old';\nimport {\n  retryDehydratedSuspenseBoundary,\n  scheduleUpdateOnFiber,\n  renderDidSuspendDelayIfPossible,\n  markSkippedUpdateLanes,\n  getWorkInProgressRoot,\n  pushRenderLanes,\n  getExecutionContext,\n  RetryAfterError,\n  NoContext,\n} from './ReactFiberWorkLoop.old';\nimport {setWorkInProgressVersion} from './ReactMutableSource.old';\nimport {\n  requestCacheFromPool,\n  pushCacheProvider,\n  pushRootCachePool,\n  CacheContext,\n  getSuspendedCachePool,\n  restoreSpawnedCachePool,\n  getOffscreenDeferredCachePool,\n} from './ReactFiberCacheComponent.old';\nimport {createCapturedValue} from './ReactCapturedValue';\nimport {createClassErrorUpdate} from './ReactFiberThrow.old';\nimport {completeSuspendedOffscreenHostContainer} from './ReactFiberCompleteWork.old';\nimport is from 'shared/objectIs';\n\nconst ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;\n\nlet didReceiveUpdate: boolean = false;\n\nlet didWarnAboutBadClass;\nlet didWarnAboutModulePatternComponent;\nlet didWarnAboutContextTypeOnFunctionComponent;\nlet didWarnAboutGetDerivedStateOnFunctionComponent;\nlet didWarnAboutFunctionRefs;\nexport let didWarnAboutReassigningProps;\nlet didWarnAboutRevealOrder;\nlet didWarnAboutTailOptions;\nlet didWarnAboutDefaultPropsOnFunctionComponent;\n\nif (__DEV__) {\n  didWarnAboutBadClass = {};\n  didWarnAboutModulePatternComponent = {};\n  didWarnAboutContextTypeOnFunctionComponent = {};\n  didWarnAboutGetDerivedStateOnFunctionComponent = {};\n  didWarnAboutFunctionRefs = {};\n  didWarnAboutReassigningProps = false;\n  didWarnAboutRevealOrder = {};\n  didWarnAboutTailOptions = {};\n  didWarnAboutDefaultPropsOnFunctionComponent = {};\n}\n\nexport function reconcileChildren(\n  current: Fiber | null,\n  workInProgress: Fiber,\n  nextChildren: any,\n  renderLanes: Lanes,\n) {\n  if (current === null) {\n    // If this is a fresh new component that hasn't been rendered yet, we\n    // won't update its child set by applying minimal side-effects. Instead,\n    // we will add them all to the child before it gets rendered. That means\n    // we can optimize this reconciliation pass by not tracking side-effects.\n    workInProgress.child = mountChildFibers(\n      workInProgress,\n      null,\n      nextChildren,\n      renderLanes,\n    );\n  } else {\n    // If the current child is the same as the work in progress, it means that\n    // we haven't yet started any work on these children. Therefore, we use\n    // the clone algorithm to create a copy of all the current children.\n\n    // If we had any progressed work already, that is invalid at this point so\n    // let's throw it out.\n    workInProgress.child = reconcileChildFibers(\n      workInProgress,\n      current.child,\n      nextChildren,\n      renderLanes,\n    );\n  }\n}\n\nfunction forceUnmountCurrentAndReconcile(\n  current: Fiber,\n  workInProgress: Fiber,\n  nextChildren: any,\n  renderLanes: Lanes,\n) {\n  // This function is fork of reconcileChildren. It's used in cases where we\n  // want to reconcile without matching against the existing set. This has the\n  // effect of all current children being unmounted; even if the type and key\n  // are the same, the old child is unmounted and a new child is created.\n  //\n  // To do this, we're going to go through the reconcile algorithm twice. In\n  // the first pass, we schedule a deletion for all the current children by\n  // passing null.\n  workInProgress.child = reconcileChildFibers(\n    workInProgress,\n    current.child,\n    null,\n    renderLanes,\n  );\n  // In the second pass, we mount the new children. The trick here is that we\n  // pass null in place of where we usually pass the current child set. This has\n  // the effect of remounting all children regardless of whether their\n  // identities match.\n  workInProgress.child = reconcileChildFibers(\n    workInProgress,\n    null,\n    nextChildren,\n    renderLanes,\n  );\n}\n\nfunction updateForwardRef(\n  current: Fiber | null,\n  workInProgress: Fiber,\n  Component: any,\n  nextProps: any,\n  renderLanes: Lanes,\n) {\n  // TODO: current can be non-null here even if the component\n  // hasn't yet mounted. This happens after the first render suspends.\n  // We'll need to figure out if this is fine or can cause issues.\n\n  if (__DEV__) {\n    if (workInProgress.type !== workInProgress.elementType) {\n      // Lazy component props can't be validated in createElement\n      // because they're only guaranteed to be resolved here.\n      const innerPropTypes = Component.propTypes;\n      if (innerPropTypes) {\n        checkPropTypes(\n          innerPropTypes,\n          nextProps, // Resolved props\n          'prop',\n          getComponentNameFromType(Component),\n        );\n      }\n    }\n  }\n\n  const render = Component.render;\n  const ref = workInProgress.ref;\n\n  // The rest is a fork of updateFunctionComponent\n  let nextChildren;\n  prepareToReadContext(workInProgress, renderLanes);\n  if (enableSchedulingProfiler) {\n    markComponentRenderStarted(workInProgress);\n  }\n  if (__DEV__) {\n    ReactCurrentOwner.current = workInProgress;\n    setIsRendering(true);\n    nextChildren = renderWithHooks(\n      current,\n      workInProgress,\n      render,\n      nextProps,\n      ref,\n      renderLanes,\n    );\n    if (\n      debugRenderPhaseSideEffectsForStrictMode &&\n      workInProgress.mode & StrictLegacyMode\n    ) {\n      setIsStrictModeForDevtools(true);\n      try {\n        nextChildren = renderWithHooks(\n          current,\n          workInProgress,\n          render,\n          nextProps,\n          ref,\n          renderLanes,\n        );\n      } finally {\n        setIsStrictModeForDevtools(false);\n      }\n    }\n    setIsRendering(false);\n  } else {\n    nextChildren = renderWithHooks(\n      current,\n      workInProgress,\n      render,\n      nextProps,\n      ref,\n      renderLanes,\n    );\n  }\n  if (enableSchedulingProfiler) {\n    markComponentRenderStopped();\n  }\n\n  if (current !== null && !didReceiveUpdate) {\n    bailoutHooks(current, workInProgress, renderLanes);\n    return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);\n  }\n\n  // React DevTools reads this flag.\n  workInProgress.flags |= PerformedWork;\n  reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n  return workInProgress.child;\n}\n\nfunction updateMemoComponent(\n  current: Fiber | null,\n  workInProgress: Fiber,\n  Component: any,\n  nextProps: any,\n  renderLanes: Lanes,\n): null | Fiber {\n  if (current === null) {\n    const type = Component.type;\n    if (\n      isSimpleFunctionComponent(type) &&\n      Component.compare === null &&\n      // SimpleMemoComponent codepath doesn't resolve outer props either.\n      Component.defaultProps === undefined\n    ) {\n      let resolvedType = type;\n      if (__DEV__) {\n        resolvedType = resolveFunctionForHotReloading(type);\n      }\n      // If this is a plain function component without default props,\n      // and with only the default shallow comparison, we upgrade it\n      // to a SimpleMemoComponent to allow fast path updates.\n      workInProgress.tag = SimpleMemoComponent;\n      workInProgress.type = resolvedType;\n      if (__DEV__) {\n        validateFunctionComponentInDev(workInProgress, type);\n      }\n      return updateSimpleMemoComponent(\n        current,\n        workInProgress,\n        resolvedType,\n        nextProps,\n        renderLanes,\n      );\n    }\n    if (__DEV__) {\n      const innerPropTypes = type.propTypes;\n      if (innerPropTypes) {\n        // Inner memo component props aren't currently validated in createElement.\n        // We could move it there, but we'd still need this for lazy code path.\n        checkPropTypes(\n          innerPropTypes,\n          nextProps, // Resolved props\n          'prop',\n          getComponentNameFromType(type),\n        );\n      }\n    }\n    const child = createFiberFromTypeAndProps(\n      Component.type,\n      null,\n      nextProps,\n      workInProgress,\n      workInProgress.mode,\n      renderLanes,\n    );\n    child.ref = workInProgress.ref;\n    child.return = workInProgress;\n    workInProgress.child = child;\n    return child;\n  }\n  if (__DEV__) {\n    const type = Component.type;\n    const innerPropTypes = type.propTypes;\n    if (innerPropTypes) {\n      // Inner memo component props aren't currently validated in createElement.\n      // We could move it there, but we'd still need this for lazy code path.\n      checkPropTypes(\n        innerPropTypes,\n        nextProps, // Resolved props\n        'prop',\n        getComponentNameFromType(type),\n      );\n    }\n  }\n  const currentChild = ((current.child: any): Fiber); // This is always exactly one child\n  const hasScheduledUpdateOrContext = checkScheduledUpdateOrContext(\n    current,\n    renderLanes,\n  );\n  if (!hasScheduledUpdateOrContext) {\n    // This will be the props with resolved defaultProps,\n    // unlike current.memoizedProps which will be the unresolved ones.\n    const prevProps = currentChild.memoizedProps;\n    // Default to shallow comparison\n    let compare = Component.compare;\n    compare = compare !== null ? compare : shallowEqual;\n    if (compare(prevProps, nextProps) && current.ref === workInProgress.ref) {\n      return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);\n    }\n  }\n  // React DevTools reads this flag.\n  workInProgress.flags |= PerformedWork;\n  const newChild = createWorkInProgress(currentChild, nextProps);\n  newChild.ref = workInProgress.ref;\n  newChild.return = workInProgress;\n  workInProgress.child = newChild;\n  return newChild;\n}\n\nfunction updateSimpleMemoComponent(\n  current: Fiber | null,\n  workInProgress: Fiber,\n  Component: any,\n  nextProps: any,\n  renderLanes: Lanes,\n): null | Fiber {\n  // TODO: current can be non-null here even if the component\n  // hasn't yet mounted. This happens when the inner render suspends.\n  // We'll need to figure out if this is fine or can cause issues.\n\n  if (__DEV__) {\n    if (workInProgress.type !== workInProgress.elementType) {\n      // Lazy component props can't be validated in createElement\n      // because they're only guaranteed to be resolved here.\n      let outerMemoType = workInProgress.elementType;\n      if (outerMemoType.$$typeof === REACT_LAZY_TYPE) {\n        // We warn when you define propTypes on lazy()\n        // so let's just skip over it to find memo() outer wrapper.\n        // Inner props for memo are validated later.\n        const lazyComponent: LazyComponentType<any, any> = outerMemoType;\n        const payload = lazyComponent._payload;\n        const init = lazyComponent._init;\n        try {\n          outerMemoType = init(payload);\n        } catch (x) {\n          outerMemoType = null;\n        }\n        // Inner propTypes will be validated in the function component path.\n        const outerPropTypes = outerMemoType && (outerMemoType: any).propTypes;\n        if (outerPropTypes) {\n          checkPropTypes(\n            outerPropTypes,\n            nextProps, // Resolved (SimpleMemoComponent has no defaultProps)\n            'prop',\n            getComponentNameFromType(outerMemoType),\n          );\n        }\n      }\n    }\n  }\n  if (current !== null) {\n    const prevProps = current.memoizedProps;\n    if (\n      shallowEqual(prevProps, nextProps) &&\n      current.ref === workInProgress.ref &&\n      // Prevent bailout if the implementation changed due to hot reload.\n      (__DEV__ ? workInProgress.type === current.type : true)\n    ) {\n      didReceiveUpdate = false;\n      if (!checkScheduledUpdateOrContext(current, renderLanes)) {\n        // The pending lanes were cleared at the beginning of beginWork. We're\n        // about to bail out, but there might be other lanes that weren't\n        // included in the current render. Usually, the priority level of the\n        // remaining updates is accumulated during the evaluation of the\n        // component (i.e. when processing the update queue). But since since\n        // we're bailing out early *without* evaluating the component, we need\n        // to account for it here, too. Reset to the value of the current fiber.\n        // NOTE: This only applies to SimpleMemoComponent, not MemoComponent,\n        // because a MemoComponent fiber does not have hooks or an update queue;\n        // rather, it wraps around an inner component, which may or may not\n        // contains hooks.\n        // TODO: Move the reset at in beginWork out of the common path so that\n        // this is no longer necessary.\n        workInProgress.lanes = current.lanes;\n        return bailoutOnAlreadyFinishedWork(\n          current,\n          workInProgress,\n          renderLanes,\n        );\n      } else if ((current.flags & ForceUpdateForLegacySuspense) !== NoFlags) {\n        // This is a special case that only exists for legacy mode.\n        // See https://github.com/facebook/react/pull/19216.\n        didReceiveUpdate = true;\n      }\n    }\n  }\n  return updateFunctionComponent(\n    current,\n    workInProgress,\n    Component,\n    nextProps,\n    renderLanes,\n  );\n}\n\nfunction updateOffscreenComponent(\n  current: Fiber | null,\n  workInProgress: Fiber,\n  renderLanes: Lanes,\n) {\n  const nextProps: OffscreenProps = workInProgress.pendingProps;\n  const nextChildren = nextProps.children;\n\n  const prevState: OffscreenState | null =\n    current !== null ? current.memoizedState : null;\n\n  // If this is not null, this is a cache pool that was carried over from the\n  // previous render. We will push this to the cache pool context so that we can\n  // resume in-flight requests.\n  let spawnedCachePool: SpawnedCachePool | null = null;\n\n  if (\n    nextProps.mode === 'hidden' ||\n    nextProps.mode === 'unstable-defer-without-hiding'\n  ) {\n    // Rendering a hidden tree.\n    if ((workInProgress.mode & ConcurrentMode) === NoMode) {\n      // In legacy sync mode, don't defer the subtree. Render it now.\n      const nextState: OffscreenState = {\n        baseLanes: NoLanes,\n        cachePool: null,\n      };\n      workInProgress.memoizedState = nextState;\n      pushRenderLanes(workInProgress, renderLanes);\n    } else if (!includesSomeLane(renderLanes, (OffscreenLane: Lane))) {\n      // We're hidden, and we're not rendering at Offscreen. We will bail out\n      // and resume this tree later.\n      let nextBaseLanes;\n      if (prevState !== null) {\n        const prevBaseLanes = prevState.baseLanes;\n        nextBaseLanes = mergeLanes(prevBaseLanes, renderLanes);\n        if (enableCache) {\n          // Save the cache pool so we can resume later.\n          spawnedCachePool = getOffscreenDeferredCachePool();\n          // We don't need to push to the cache pool because we're about to\n          // bail out. There won't be a context mismatch because we only pop\n          // the cache pool if `updateQueue` is non-null.\n        }\n      } else {\n        nextBaseLanes = renderLanes;\n      }\n\n      // Schedule this fiber to re-render at offscreen priority. Then bailout.\n      workInProgress.lanes = workInProgress.childLanes = laneToLanes(\n        OffscreenLane,\n      );\n      const nextState: OffscreenState = {\n        baseLanes: nextBaseLanes,\n        cachePool: spawnedCachePool,\n      };\n      workInProgress.memoizedState = nextState;\n      workInProgress.updateQueue = null;\n      // We're about to bail out, but we need to push this to the stack anyway\n      // to avoid a push/pop misalignment.\n      pushRenderLanes(workInProgress, nextBaseLanes);\n\n      if (enableLazyContextPropagation && current !== null) {\n        // Since this tree will resume rendering in a separate render, we need\n        // to propagate parent contexts now so we don't lose track of which\n        // ones changed.\n        propagateParentContextChangesToDeferredTree(\n          current,\n          workInProgress,\n          renderLanes,\n        );\n      }\n\n      return null;\n    } else {\n      // This is the second render. The surrounding visible content has already\n      // committed. Now we resume rendering the hidden tree.\n\n      if (enableCache && prevState !== null) {\n        // If the render that spawned this one accessed the cache pool, resume\n        // using the same cache. Unless the parent changed, since that means\n        // there was a refresh.\n        const prevCachePool = prevState.cachePool;\n        if (prevCachePool !== null) {\n          spawnedCachePool = restoreSpawnedCachePool(\n            workInProgress,\n            prevCachePool,\n          );\n        }\n      }\n\n      // Rendering at offscreen, so we can clear the base lanes.\n      const nextState: OffscreenState = {\n        baseLanes: NoLanes,\n        cachePool: null,\n      };\n      workInProgress.memoizedState = nextState;\n      // Push the lanes that were skipped when we bailed out.\n      const subtreeRenderLanes =\n        prevState !== null ? prevState.baseLanes : renderLanes;\n      pushRenderLanes(workInProgress, subtreeRenderLanes);\n    }\n  } else {\n    // Rendering a visible tree.\n    let subtreeRenderLanes;\n    if (prevState !== null) {\n      // We're going from hidden -> visible.\n\n      subtreeRenderLanes = mergeLanes(prevState.baseLanes, renderLanes);\n\n      if (enableCache) {\n        // If the render that spawned this one accessed the cache pool, resume\n        // using the same cache. Unless the parent changed, since that means\n        // there was a refresh.\n        const prevCachePool = prevState.cachePool;\n        if (prevCachePool !== null) {\n          spawnedCachePool = restoreSpawnedCachePool(\n            workInProgress,\n            prevCachePool,\n          );\n        }\n      }\n\n      // Since we're not hidden anymore, reset the state\n      workInProgress.memoizedState = null;\n    } else {\n      // We weren't previously hidden, and we still aren't, so there's nothing\n      // special to do. Need to push to the stack regardless, though, to avoid\n      // a push/pop misalignment.\n      subtreeRenderLanes = renderLanes;\n    }\n    pushRenderLanes(workInProgress, subtreeRenderLanes);\n  }\n\n  if (enableCache) {\n    // If we have a cache pool from a previous render attempt, then this will be\n    // non-null. We use this to infer whether to push/pop the cache context.\n    workInProgress.updateQueue = spawnedCachePool;\n  }\n\n  if (enablePersistentOffscreenHostContainer && supportsPersistence) {\n    // In persistent mode, the offscreen children are wrapped in a host node.\n    // TODO: Optimize this to use the OffscreenComponent fiber instead of\n    // an extra HostComponent fiber. Need to make sure this doesn't break Fabric\n    // or some other infra that expects a HostComponent.\n    const isHidden =\n      nextProps.mode === 'hidden' &&\n      workInProgress.tag !== LegacyHiddenComponent;\n    const offscreenContainer = reconcileOffscreenHostContainer(\n      current,\n      workInProgress,\n      isHidden,\n      nextChildren,\n      renderLanes,\n    );\n    return offscreenContainer;\n  } else {\n    reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n    return workInProgress.child;\n  }\n}\n\nfunction reconcileOffscreenHostContainer(\n  currentOffscreen: Fiber | null,\n  offscreen: Fiber,\n  isHidden: boolean,\n  children: any,\n  renderLanes: Lanes,\n) {\n  const containerProps = getOffscreenContainerProps(\n    isHidden ? 'hidden' : 'visible',\n    children,\n  );\n  let hostContainer;\n  if (currentOffscreen === null) {\n    hostContainer = createOffscreenHostContainerFiber(\n      containerProps,\n      offscreen.mode,\n      renderLanes,\n      null,\n    );\n  } else {\n    const currentHostContainer = currentOffscreen.child;\n    if (currentHostContainer === null) {\n      hostContainer = createOffscreenHostContainerFiber(\n        containerProps,\n        offscreen.mode,\n        renderLanes,\n        null,\n      );\n      hostContainer.flags |= Placement;\n    } else {\n      hostContainer = createWorkInProgress(\n        currentHostContainer,\n        containerProps,\n      );\n    }\n  }\n  hostContainer.return = offscreen;\n  offscreen.child = hostContainer;\n  return hostContainer;\n}\n\n// Note: These happen to have identical begin phases, for now. We shouldn't hold\n// ourselves to this constraint, though. If the behavior diverges, we should\n// fork the function.\nconst updateLegacyHiddenComponent = updateOffscreenComponent;\n\nfunction updateCacheComponent(\n  current: Fiber | null,\n  workInProgress: Fiber,\n  renderLanes: Lanes,\n) {\n  if (!enableCache) {\n    return null;\n  }\n\n  prepareToReadContext(workInProgress, renderLanes);\n  const parentCache = readContext(CacheContext);\n\n  if (current === null) {\n    // Initial mount. Request a fresh cache from the pool.\n    const freshCache = requestCacheFromPool(renderLanes);\n    const initialState: CacheComponentState = {\n      parent: parentCache,\n      cache: freshCache,\n    };\n    workInProgress.memoizedState = initialState;\n    initializeUpdateQueue(workInProgress);\n    pushCacheProvider(workInProgress, freshCache);\n  } else {\n    // Check for updates\n    if (includesSomeLane(current.lanes, renderLanes)) {\n      cloneUpdateQueue(current, workInProgress);\n      processUpdateQueue(workInProgress, null, null, renderLanes);\n    }\n    const prevState: CacheComponentState = current.memoizedState;\n    const nextState: CacheComponentState = workInProgress.memoizedState;\n\n    // Compare the new parent cache to the previous to see detect there was\n    // a refresh.\n    if (prevState.parent !== parentCache) {\n      // Refresh in parent. Update the parent.\n      const derivedState: CacheComponentState = {\n        parent: parentCache,\n        cache: parentCache,\n      };\n\n      // Copied from getDerivedStateFromProps implementation. Once the update\n      // queue is empty, persist the derived state onto the base state.\n      workInProgress.memoizedState = derivedState;\n      if (workInProgress.lanes === NoLanes) {\n        const updateQueue: UpdateQueue<any> = (workInProgress.updateQueue: any);\n        workInProgress.memoizedState = updateQueue.baseState = derivedState;\n      }\n\n      pushCacheProvider(workInProgress, parentCache);\n      // No need to propagate a context change because the refreshed parent\n      // already did.\n    } else {\n      // The parent didn't refresh. Now check if this cache did.\n      const nextCache = nextState.cache;\n      pushCacheProvider(workInProgress, nextCache);\n      if (nextCache !== prevState.cache) {\n        // This cache refreshed. Propagate a context change.\n        propagateContextChange(workInProgress, CacheContext, renderLanes);\n      }\n    }\n  }\n\n  const nextChildren = workInProgress.pendingProps.children;\n  reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n  return workInProgress.child;\n}\n\nfunction updateFragment(\n  current: Fiber | null,\n  workInProgress: Fiber,\n  renderLanes: Lanes,\n) {\n  const nextChildren = workInProgress.pendingProps;\n  reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n  return workInProgress.child;\n}\n\nfunction updateMode(\n  current: Fiber | null,\n  workInProgress: Fiber,\n  renderLanes: Lanes,\n) {\n  const nextChildren = workInProgress.pendingProps.children;\n  reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n  return workInProgress.child;\n}\n\nfunction updateProfiler(\n  current: Fiber | null,\n  workInProgress: Fiber,\n  renderLanes: Lanes,\n) {\n  if (enableProfilerTimer) {\n    workInProgress.flags |= Update;\n\n    if (enableProfilerCommitHooks) {\n      // Reset effect durations for the next eventual effect phase.\n      // These are reset during render to allow the DevTools commit hook a chance to read them,\n      const stateNode = workInProgress.stateNode;\n      stateNode.effectDuration = 0;\n      stateNode.passiveEffectDuration = 0;\n    }\n  }\n  const nextProps = workInProgress.pendingProps;\n  const nextChildren = nextProps.children;\n  reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n  return workInProgress.child;\n}\n\nfunction markRef(current: Fiber | null, workInProgress: Fiber) {\n  const ref = workInProgress.ref;\n  if (\n    (current === null && ref !== null) ||\n    (current !== null && current.ref !== ref)\n  ) {\n    // Schedule a Ref effect\n    workInProgress.flags |= Ref;\n    if (enableSuspenseLayoutEffectSemantics) {\n      workInProgress.flags |= RefStatic;\n    }\n  }\n}\n\nfunction updateFunctionComponent(\n  current,\n  workInProgress,\n  Component,\n  nextProps: any,\n  renderLanes,\n) {\n  if (__DEV__) {\n    if (workInProgress.type !== workInProgress.elementType) {\n      // Lazy component props can't be validated in createElement\n      // because they're only guaranteed to be resolved here.\n      const innerPropTypes = Component.propTypes;\n      if (innerPropTypes) {\n        checkPropTypes(\n          innerPropTypes,\n          nextProps, // Resolved props\n          'prop',\n          getComponentNameFromType(Component),\n        );\n      }\n    }\n  }\n\n  let context;\n  if (!disableLegacyContext) {\n    const unmaskedContext = getUnmaskedContext(workInProgress, Component, true);\n    context = getMaskedContext(workInProgress, unmaskedContext);\n  }\n\n  let nextChildren;\n  prepareToReadContext(workInProgress, renderLanes);\n  if (enableSchedulingProfiler) {\n    markComponentRenderStarted(workInProgress);\n  }\n  if (__DEV__) {\n    ReactCurrentOwner.current = workInProgress;\n    setIsRendering(true);\n    nextChildren = renderWithHooks(\n      current,\n      workInProgress,\n      Component,\n      nextProps,\n      context,\n      renderLanes,\n    );\n    if (\n      debugRenderPhaseSideEffectsForStrictMode &&\n      workInProgress.mode & StrictLegacyMode\n    ) {\n      setIsStrictModeForDevtools(true);\n      try {\n        nextChildren = renderWithHooks(\n          current,\n          workInProgress,\n          Component,\n          nextProps,\n          context,\n          renderLanes,\n        );\n      } finally {\n        setIsStrictModeForDevtools(false);\n      }\n    }\n    setIsRendering(false);\n  } else {\n    nextChildren = renderWithHooks(\n      current,\n      workInProgress,\n      Component,\n      nextProps,\n      context,\n      renderLanes,\n    );\n  }\n  if (enableSchedulingProfiler) {\n    markComponentRenderStopped();\n  }\n\n  if (current !== null && !didReceiveUpdate) {\n    bailoutHooks(current, workInProgress, renderLanes);\n    return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);\n  }\n\n  // React DevTools reads this flag.\n  workInProgress.flags |= PerformedWork;\n  reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n  return workInProgress.child;\n}\n\nfunction updateClassComponent(\n  current: Fiber | null,\n  workInProgress: Fiber,\n  Component: any,\n  nextProps: any,\n  renderLanes: Lanes,\n) {\n  if (__DEV__) {\n    // This is used by DevTools to force a boundary to error.\n    switch (shouldError(workInProgress)) {\n      case false: {\n        const instance = workInProgress.stateNode;\n        const ctor = workInProgress.type;\n        // TODO This way of resetting the error boundary state is a hack.\n        // Is there a better way to do this?\n        const tempInstance = new ctor(\n          workInProgress.memoizedProps,\n          instance.context,\n        );\n        const state = tempInstance.state;\n        instance.updater.enqueueSetState(instance, state, null);\n        break;\n      }\n      case true: {\n        workInProgress.flags |= DidCapture;\n        workInProgress.flags |= ShouldCapture;\n        const error = new Error('Simulated error coming from DevTools');\n        const lane = pickArbitraryLane(renderLanes);\n        workInProgress.lanes = mergeLanes(workInProgress.lanes, lane);\n        // Schedule the error boundary to re-render using updated state\n        const update = createClassErrorUpdate(\n          workInProgress,\n          createCapturedValue(error, workInProgress),\n          lane,\n        );\n        enqueueCapturedUpdate(workInProgress, update);\n        break;\n      }\n    }\n\n    if (workInProgress.type !== workInProgress.elementType) {\n      // Lazy component props can't be validated in createElement\n      // because they're only guaranteed to be resolved here.\n      const innerPropTypes = Component.propTypes;\n      if (innerPropTypes) {\n        checkPropTypes(\n          innerPropTypes,\n          nextProps, // Resolved props\n          'prop',\n          getComponentNameFromType(Component),\n        );\n      }\n    }\n  }\n\n  // Push context providers early to prevent context stack mismatches.\n  // During mounting we don't know the child context yet as the instance doesn't exist.\n  // We will invalidate the child context in finishClassComponent() right after rendering.\n  let hasContext;\n  if (isLegacyContextProvider(Component)) {\n    hasContext = true;\n    pushLegacyContextProvider(workInProgress);\n  } else {\n    hasContext = false;\n  }\n  prepareToReadContext(workInProgress, renderLanes);\n\n  const instance = workInProgress.stateNode;\n  let shouldUpdate;\n  if (instance === null) {\n    if (current !== null) {\n      // A class component without an instance only mounts if it suspended\n      // inside a non-concurrent tree, in an inconsistent state. We want to\n      // treat it like a new mount, even though an empty version of it already\n      // committed. Disconnect the alternate pointers.\n      current.alternate = null;\n      workInProgress.alternate = null;\n      // Since this is conceptually a new fiber, schedule a Placement effect\n      workInProgress.flags |= Placement;\n    }\n    // In the initial pass we might need to construct the instance.\n    constructClassInstance(workInProgress, Component, nextProps);\n    mountClassInstance(workInProgress, Component, nextProps, renderLanes);\n    shouldUpdate = true;\n  } else if (current === null) {\n    // In a resume, we'll already have an instance we can reuse.\n    shouldUpdate = resumeMountClassInstance(\n      workInProgress,\n      Component,\n      nextProps,\n      renderLanes,\n    );\n  } else {\n    shouldUpdate = updateClassInstance(\n      current,\n      workInProgress,\n      Component,\n      nextProps,\n      renderLanes,\n    );\n  }\n  const nextUnitOfWork = finishClassComponent(\n    current,\n    workInProgress,\n    Component,\n    shouldUpdate,\n    hasContext,\n    renderLanes,\n  );\n  if (__DEV__) {\n    const inst = workInProgress.stateNode;\n    if (shouldUpdate && inst.props !== nextProps) {\n      if (!didWarnAboutReassigningProps) {\n        console.error(\n          'It looks like %s is reassigning its own `this.props` while rendering. ' +\n            'This is not supported and can lead to confusing bugs.',\n          getComponentNameFromFiber(workInProgress) || 'a component',\n        );\n      }\n      didWarnAboutReassigningProps = true;\n    }\n  }\n  return nextUnitOfWork;\n}\n\nfunction finishClassComponent(\n  current: Fiber | null,\n  workInProgress: Fiber,\n  Component: any,\n  shouldUpdate: boolean,\n  hasContext: boolean,\n  renderLanes: Lanes,\n) {\n  // Refs should update even if shouldComponentUpdate returns false\n  markRef(current, workInProgress);\n\n  const didCaptureError = (workInProgress.flags & DidCapture) !== NoFlags;\n\n  if (!shouldUpdate && !didCaptureError) {\n    // Context providers should defer to sCU for rendering\n    if (hasContext) {\n      invalidateContextProvider(workInProgress, Component, false);\n    }\n\n    return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);\n  }\n\n  const instance = workInProgress.stateNode;\n\n  // Rerender\n  ReactCurrentOwner.current = workInProgress;\n  let nextChildren;\n  if (\n    didCaptureError &&\n    typeof Component.getDerivedStateFromError !== 'function'\n  ) {\n    // If we captured an error, but getDerivedStateFromError is not defined,\n    // unmount all the children. componentDidCatch will schedule an update to\n    // re-render a fallback. This is temporary until we migrate everyone to\n    // the new API.\n    // TODO: Warn in a future release.\n    nextChildren = null;\n\n    if (enableProfilerTimer) {\n      stopProfilerTimerIfRunning(workInProgress);\n    }\n  } else {\n    if (enableSchedulingProfiler) {\n      markComponentRenderStarted(workInProgress);\n    }\n    if (__DEV__) {\n      setIsRendering(true);\n      nextChildren = instance.render();\n      if (\n        debugRenderPhaseSideEffectsForStrictMode &&\n        workInProgress.mode & StrictLegacyMode\n      ) {\n        setIsStrictModeForDevtools(true);\n        try {\n          instance.render();\n        } finally {\n          setIsStrictModeForDevtools(false);\n        }\n      }\n      setIsRendering(false);\n    } else {\n      nextChildren = instance.render();\n    }\n    if (enableSchedulingProfiler) {\n      markComponentRenderStopped();\n    }\n  }\n\n  // React DevTools reads this flag.\n  workInProgress.flags |= PerformedWork;\n  if (current !== null && didCaptureError) {\n    // If we're recovering from an error, reconcile without reusing any of\n    // the existing children. Conceptually, the normal children and the children\n    // that are shown on error are two different sets, so we shouldn't reuse\n    // normal children even if their identities match.\n    forceUnmountCurrentAndReconcile(\n      current,\n      workInProgress,\n      nextChildren,\n      renderLanes,\n    );\n  } else {\n    reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n  }\n\n  // Memoize state using the values we just used to render.\n  // TODO: Restructure so we never read values from the instance.\n  workInProgress.memoizedState = instance.state;\n\n  // The context might have changed so we need to recalculate it.\n  if (hasContext) {\n    invalidateContextProvider(workInProgress, Component, true);\n  }\n\n  return workInProgress.child;\n}\n\nfunction pushHostRootContext(workInProgress) {\n  const root = (workInProgress.stateNode: FiberRoot);\n  if (root.pendingContext) {\n    pushTopLevelContextObject(\n      workInProgress,\n      root.pendingContext,\n      root.pendingContext !== root.context,\n    );\n  } else if (root.context) {\n    // Should always be set\n    pushTopLevelContextObject(workInProgress, root.context, false);\n  }\n  pushHostContainer(workInProgress, root.containerInfo);\n}\n\nfunction updateHostRoot(current, workInProgress, renderLanes) {\n  pushHostRootContext(workInProgress);\n  const updateQueue = workInProgress.updateQueue;\n  invariant(\n    current !== null && updateQueue !== null,\n    'If the root does not have an updateQueue, we should have already ' +\n      'bailed out. This error is likely caused by a bug in React. Please ' +\n      'file an issue.',\n  );\n  const nextProps = workInProgress.pendingProps;\n  const prevState = workInProgress.memoizedState;\n  const prevChildren = prevState.element;\n  cloneUpdateQueue(current, workInProgress);\n  processUpdateQueue(workInProgress, nextProps, null, renderLanes);\n  const nextState = workInProgress.memoizedState;\n\n  const root: FiberRoot = workInProgress.stateNode;\n\n  if (enableCache) {\n    const nextCache: Cache = nextState.cache;\n    pushRootCachePool(root);\n    pushCacheProvider(workInProgress, nextCache);\n    if (nextCache !== prevState.cache) {\n      // The root cache refreshed.\n      propagateContextChange(workInProgress, CacheContext, renderLanes);\n    }\n  }\n\n  // Caution: React DevTools currently depends on this property\n  // being called \"element\".\n  const nextChildren = nextState.element;\n  if (nextChildren === prevChildren) {\n    resetHydrationState();\n    return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);\n  }\n  if (root.hydrate && enterHydrationState(workInProgress)) {\n    // If we don't have any current children this might be the first pass.\n    // We always try to hydrate. If this isn't a hydration pass there won't\n    // be any children to hydrate which is effectively the same thing as\n    // not hydrating.\n\n    if (supportsHydration) {\n      const mutableSourceEagerHydrationData =\n        root.mutableSourceEagerHydrationData;\n      if (mutableSourceEagerHydrationData != null) {\n        for (let i = 0; i < mutableSourceEagerHydrationData.length; i += 2) {\n          const mutableSource = ((mutableSourceEagerHydrationData[\n            i\n          ]: any): MutableSource<any>);\n          const version = mutableSourceEagerHydrationData[i + 1];\n          setWorkInProgressVersion(mutableSource, version);\n        }\n      }\n    }\n\n    const child = mountChildFibers(\n      workInProgress,\n      null,\n      nextChildren,\n      renderLanes,\n    );\n    workInProgress.child = child;\n\n    let node = child;\n    while (node) {\n      // Mark each child as hydrating. This is a fast path to know whether this\n      // tree is part of a hydrating tree. This is used to determine if a child\n      // node has fully mounted yet, and for scheduling event replaying.\n      // Conceptually this is similar to Placement in that a new subtree is\n      // inserted into the React tree here. It just happens to not need DOM\n      // mutations because it already exists.\n      node.flags = (node.flags & ~Placement) | Hydrating;\n      node = node.sibling;\n    }\n  } else {\n    // Otherwise reset hydration state in case we aborted and resumed another\n    // root.\n    reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n    resetHydrationState();\n  }\n  return workInProgress.child;\n}\n\nfunction updateHostComponent(\n  current: Fiber | null,\n  workInProgress: Fiber,\n  renderLanes: Lanes,\n) {\n  pushHostContext(workInProgress);\n\n  if (current === null) {\n    tryToClaimNextHydratableInstance(workInProgress);\n  }\n\n  const type = workInProgress.type;\n  const nextProps = workInProgress.pendingProps;\n  const prevProps = current !== null ? current.memoizedProps : null;\n\n  let nextChildren = nextProps.children;\n  const isDirectTextChild = shouldSetTextContent(type, nextProps);\n\n  if (isDirectTextChild) {\n    // We special case a direct text child of a host node. This is a common\n    // case. We won't handle it as a reified child. We will instead handle\n    // this in the host environment that also has access to this prop. That\n    // avoids allocating another HostText fiber and traversing it.\n    nextChildren = null;\n  } else if (prevProps !== null && shouldSetTextContent(type, prevProps)) {\n    // If we're switching from a direct text child to a normal child, or to\n    // empty, we need to schedule the text content to be reset.\n    workInProgress.flags |= ContentReset;\n  }\n\n  markRef(current, workInProgress);\n  reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n  return workInProgress.child;\n}\n\nfunction updateHostText(current, workInProgress) {\n  if (current === null) {\n    tryToClaimNextHydratableInstance(workInProgress);\n  }\n  // Nothing to do here. This is terminal. We'll do the completion step\n  // immediately after.\n  return null;\n}\n\nfunction mountLazyComponent(\n  _current,\n  workInProgress,\n  elementType,\n  renderLanes,\n) {\n  if (_current !== null) {\n    // A lazy component only mounts if it suspended inside a non-\n    // concurrent tree, in an inconsistent state. We want to treat it like\n    // a new mount, even though an empty version of it already committed.\n    // Disconnect the alternate pointers.\n    _current.alternate = null;\n    workInProgress.alternate = null;\n    // Since this is conceptually a new fiber, schedule a Placement effect\n    workInProgress.flags |= Placement;\n  }\n\n  const props = workInProgress.pendingProps;\n  const lazyComponent: LazyComponentType<any, any> = elementType;\n  const payload = lazyComponent._payload;\n  const init = lazyComponent._init;\n  let Component = init(payload);\n  // Store the unwrapped component in the type.\n  workInProgress.type = Component;\n  const resolvedTag = (workInProgress.tag = resolveLazyComponentTag(Component));\n  const resolvedProps = resolveDefaultProps(Component, props);\n  let child;\n  switch (resolvedTag) {\n    case FunctionComponent: {\n      if (__DEV__) {\n        validateFunctionComponentInDev(workInProgress, Component);\n        workInProgress.type = Component = resolveFunctionForHotReloading(\n          Component,\n        );\n      }\n      child = updateFunctionComponent(\n        null,\n        workInProgress,\n        Component,\n        resolvedProps,\n        renderLanes,\n      );\n      return child;\n    }\n    case ClassComponent: {\n      if (__DEV__) {\n        workInProgress.type = Component = resolveClassForHotReloading(\n          Component,\n        );\n      }\n      child = updateClassComponent(\n        null,\n        workInProgress,\n        Component,\n        resolvedProps,\n        renderLanes,\n      );\n      return child;\n    }\n    case ForwardRef: {\n      if (__DEV__) {\n        workInProgress.type = Component = resolveForwardRefForHotReloading(\n          Component,\n        );\n      }\n      child = updateForwardRef(\n        null,\n        workInProgress,\n        Component,\n        resolvedProps,\n        renderLanes,\n      );\n      return child;\n    }\n    case MemoComponent: {\n      if (__DEV__) {\n        if (workInProgress.type !== workInProgress.elementType) {\n          const outerPropTypes = Component.propTypes;\n          if (outerPropTypes) {\n            checkPropTypes(\n              outerPropTypes,\n              resolvedProps, // Resolved for outer only\n              'prop',\n              getComponentNameFromType(Component),\n            );\n          }\n        }\n      }\n      child = updateMemoComponent(\n        null,\n        workInProgress,\n        Component,\n        resolveDefaultProps(Component.type, resolvedProps), // The inner type can have defaults too\n        renderLanes,\n      );\n      return child;\n    }\n  }\n  let hint = '';\n  if (__DEV__) {\n    if (\n      Component !== null &&\n      typeof Component === 'object' &&\n      Component.$$typeof === REACT_LAZY_TYPE\n    ) {\n      hint = ' Did you wrap a component in React.lazy() more than once?';\n    }\n  }\n  // This message intentionally doesn't mention ForwardRef or MemoComponent\n  // because the fact that it's a separate type of work is an\n  // implementation detail.\n  invariant(\n    false,\n    'Element type is invalid. Received a promise that resolves to: %s. ' +\n      'Lazy element type must resolve to a class or function.%s',\n    Component,\n    hint,\n  );\n}\n\nfunction mountIncompleteClassComponent(\n  _current,\n  workInProgress,\n  Component,\n  nextProps,\n  renderLanes,\n) {\n  if (_current !== null) {\n    // An incomplete component only mounts if it suspended inside a non-\n    // concurrent tree, in an inconsistent state. We want to treat it like\n    // a new mount, even though an empty version of it already committed.\n    // Disconnect the alternate pointers.\n    _current.alternate = null;\n    workInProgress.alternate = null;\n    // Since this is conceptually a new fiber, schedule a Placement effect\n    workInProgress.flags |= Placement;\n  }\n\n  // Promote the fiber to a class and try rendering again.\n  workInProgress.tag = ClassComponent;\n\n  // The rest of this function is a fork of `updateClassComponent`\n\n  // Push context providers early to prevent context stack mismatches.\n  // During mounting we don't know the child context yet as the instance doesn't exist.\n  // We will invalidate the child context in finishClassComponent() right after rendering.\n  let hasContext;\n  if (isLegacyContextProvider(Component)) {\n    hasContext = true;\n    pushLegacyContextProvider(workInProgress);\n  } else {\n    hasContext = false;\n  }\n  prepareToReadContext(workInProgress, renderLanes);\n\n  constructClassInstance(workInProgress, Component, nextProps);\n  mountClassInstance(workInProgress, Component, nextProps, renderLanes);\n\n  return finishClassComponent(\n    null,\n    workInProgress,\n    Component,\n    true,\n    hasContext,\n    renderLanes,\n  );\n}\n\nfunction mountIndeterminateComponent(\n  _current,\n  workInProgress,\n  Component,\n  renderLanes,\n) {\n  if (_current !== null) {\n    // An indeterminate component only mounts if it suspended inside a non-\n    // concurrent tree, in an inconsistent state. We want to treat it like\n    // a new mount, even though an empty version of it already committed.\n    // Disconnect the alternate pointers.\n    _current.alternate = null;\n    workInProgress.alternate = null;\n    // Since this is conceptually a new fiber, schedule a Placement effect\n    workInProgress.flags |= Placement;\n  }\n\n  const props = workInProgress.pendingProps;\n  let context;\n  if (!disableLegacyContext) {\n    const unmaskedContext = getUnmaskedContext(\n      workInProgress,\n      Component,\n      false,\n    );\n    context = getMaskedContext(workInProgress, unmaskedContext);\n  }\n\n  prepareToReadContext(workInProgress, renderLanes);\n  let value;\n\n  if (enableSchedulingProfiler) {\n    markComponentRenderStarted(workInProgress);\n  }\n  if (__DEV__) {\n    if (\n      Component.prototype &&\n      typeof Component.prototype.render === 'function'\n    ) {\n      const componentName = getComponentNameFromType(Component) || 'Unknown';\n\n      if (!didWarnAboutBadClass[componentName]) {\n        console.error(\n          \"The <%s /> component appears to have a render method, but doesn't extend React.Component. \" +\n            'This is likely to cause errors. Change %s to extend React.Component instead.',\n          componentName,\n          componentName,\n        );\n        didWarnAboutBadClass[componentName] = true;\n      }\n    }\n\n    if (workInProgress.mode & StrictLegacyMode) {\n      ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress, null);\n    }\n\n    setIsRendering(true);\n    ReactCurrentOwner.current = workInProgress;\n    value = renderWithHooks(\n      null,\n      workInProgress,\n      Component,\n      props,\n      context,\n      renderLanes,\n    );\n    setIsRendering(false);\n  } else {\n    value = renderWithHooks(\n      null,\n      workInProgress,\n      Component,\n      props,\n      context,\n      renderLanes,\n    );\n  }\n  if (enableSchedulingProfiler) {\n    markComponentRenderStopped();\n  }\n\n  // React DevTools reads this flag.\n  workInProgress.flags |= PerformedWork;\n\n  if (__DEV__) {\n    // Support for module components is deprecated and is removed behind a flag.\n    // Whether or not it would crash later, we want to show a good message in DEV first.\n    if (\n      typeof value === 'object' &&\n      value !== null &&\n      typeof value.render === 'function' &&\n      value.$$typeof === undefined\n    ) {\n      const componentName = getComponentNameFromType(Component) || 'Unknown';\n      if (!didWarnAboutModulePatternComponent[componentName]) {\n        console.error(\n          'The <%s /> component appears to be a function component that returns a class instance. ' +\n            'Change %s to a class that extends React.Component instead. ' +\n            \"If you can't use a class try assigning the prototype on the function as a workaround. \" +\n            \"`%s.prototype = React.Component.prototype`. Don't use an arrow function since it \" +\n            'cannot be called with `new` by React.',\n          componentName,\n          componentName,\n          componentName,\n        );\n        didWarnAboutModulePatternComponent[componentName] = true;\n      }\n    }\n  }\n\n  if (\n    // Run these checks in production only if the flag is off.\n    // Eventually we'll delete this branch altogether.\n    !disableModulePatternComponents &&\n    typeof value === 'object' &&\n    value !== null &&\n    typeof value.render === 'function' &&\n    value.$$typeof === undefined\n  ) {\n    if (__DEV__) {\n      const componentName = getComponentNameFromType(Component) || 'Unknown';\n      if (!didWarnAboutModulePatternComponent[componentName]) {\n        console.error(\n          'The <%s /> component appears to be a function component that returns a class instance. ' +\n            'Change %s to a class that extends React.Component instead. ' +\n            \"If you can't use a class try assigning the prototype on the function as a workaround. \" +\n            \"`%s.prototype = React.Component.prototype`. Don't use an arrow function since it \" +\n            'cannot be called with `new` by React.',\n          componentName,\n          componentName,\n          componentName,\n        );\n        didWarnAboutModulePatternComponent[componentName] = true;\n      }\n    }\n\n    // Proceed under the assumption that this is a class instance\n    workInProgress.tag = ClassComponent;\n\n    // Throw out any hooks that were used.\n    workInProgress.memoizedState = null;\n    workInProgress.updateQueue = null;\n\n    // Push context providers early to prevent context stack mismatches.\n    // During mounting we don't know the child context yet as the instance doesn't exist.\n    // We will invalidate the child context in finishClassComponent() right after rendering.\n    let hasContext = false;\n    if (isLegacyContextProvider(Component)) {\n      hasContext = true;\n      pushLegacyContextProvider(workInProgress);\n    } else {\n      hasContext = false;\n    }\n\n    workInProgress.memoizedState =\n      value.state !== null && value.state !== undefined ? value.state : null;\n\n    initializeUpdateQueue(workInProgress);\n\n    adoptClassInstance(workInProgress, value);\n    mountClassInstance(workInProgress, Component, props, renderLanes);\n    return finishClassComponent(\n      null,\n      workInProgress,\n      Component,\n      true,\n      hasContext,\n      renderLanes,\n    );\n  } else {\n    // Proceed under the assumption that this is a function component\n    workInProgress.tag = FunctionComponent;\n    if (__DEV__) {\n      if (disableLegacyContext && Component.contextTypes) {\n        console.error(\n          '%s uses the legacy contextTypes API which is no longer supported. ' +\n            'Use React.createContext() with React.useContext() instead.',\n          getComponentNameFromType(Component) || 'Unknown',\n        );\n      }\n\n      if (\n        debugRenderPhaseSideEffectsForStrictMode &&\n        workInProgress.mode & StrictLegacyMode\n      ) {\n        setIsStrictModeForDevtools(true);\n        try {\n          value = renderWithHooks(\n            null,\n            workInProgress,\n            Component,\n            props,\n            context,\n            renderLanes,\n          );\n        } finally {\n          setIsStrictModeForDevtools(false);\n        }\n      }\n    }\n    reconcileChildren(null, workInProgress, value, renderLanes);\n    if (__DEV__) {\n      validateFunctionComponentInDev(workInProgress, Component);\n    }\n    return workInProgress.child;\n  }\n}\n\nfunction validateFunctionComponentInDev(workInProgress: Fiber, Component: any) {\n  if (__DEV__) {\n    if (Component) {\n      if (Component.childContextTypes) {\n        console.error(\n          '%s(...): childContextTypes cannot be defined on a function component.',\n          Component.displayName || Component.name || 'Component',\n        );\n      }\n    }\n    if (workInProgress.ref !== null) {\n      let info = '';\n      const ownerName = getCurrentFiberOwnerNameInDevOrNull();\n      if (ownerName) {\n        info += '\\n\\nCheck the render method of `' + ownerName + '`.';\n      }\n\n      let warningKey = ownerName || '';\n      const debugSource = workInProgress._debugSource;\n      if (debugSource) {\n        warningKey = debugSource.fileName + ':' + debugSource.lineNumber;\n      }\n      if (!didWarnAboutFunctionRefs[warningKey]) {\n        didWarnAboutFunctionRefs[warningKey] = true;\n        console.error(\n          'Function components cannot be given refs. ' +\n            'Attempts to access this ref will fail. ' +\n            'Did you mean to use React.forwardRef()?%s',\n          info,\n        );\n      }\n    }\n\n    if (\n      warnAboutDefaultPropsOnFunctionComponents &&\n      Component.defaultProps !== undefined\n    ) {\n      const componentName = getComponentNameFromType(Component) || 'Unknown';\n\n      if (!didWarnAboutDefaultPropsOnFunctionComponent[componentName]) {\n        console.error(\n          '%s: Support for defaultProps will be removed from function components ' +\n            'in a future major release. Use JavaScript default parameters instead.',\n          componentName,\n        );\n        didWarnAboutDefaultPropsOnFunctionComponent[componentName] = true;\n      }\n    }\n\n    if (typeof Component.getDerivedStateFromProps === 'function') {\n      const componentName = getComponentNameFromType(Component) || 'Unknown';\n\n      if (!didWarnAboutGetDerivedStateOnFunctionComponent[componentName]) {\n        console.error(\n          '%s: Function components do not support getDerivedStateFromProps.',\n          componentName,\n        );\n        didWarnAboutGetDerivedStateOnFunctionComponent[componentName] = true;\n      }\n    }\n\n    if (\n      typeof Component.contextType === 'object' &&\n      Component.contextType !== null\n    ) {\n      const componentName = getComponentNameFromType(Component) || 'Unknown';\n\n      if (!didWarnAboutContextTypeOnFunctionComponent[componentName]) {\n        console.error(\n          '%s: Function components do not support contextType.',\n          componentName,\n        );\n        didWarnAboutContextTypeOnFunctionComponent[componentName] = true;\n      }\n    }\n  }\n}\n\nconst SUSPENDED_MARKER: SuspenseState = {\n  dehydrated: null,\n  retryLane: NoLane,\n};\n\nfunction mountSuspenseOffscreenState(renderLanes: Lanes): OffscreenState {\n  return {\n    baseLanes: renderLanes,\n    cachePool: getSuspendedCachePool(),\n  };\n}\n\nfunction updateSuspenseOffscreenState(\n  prevOffscreenState: OffscreenState,\n  renderLanes: Lanes,\n): OffscreenState {\n  let cachePool: SpawnedCachePool | null = null;\n  if (enableCache) {\n    const prevCachePool: SpawnedCachePool | null = prevOffscreenState.cachePool;\n    if (prevCachePool !== null) {\n      const parentCache = isPrimaryRenderer\n        ? CacheContext._currentValue\n        : CacheContext._currentValue2;\n      if (prevCachePool.parent !== parentCache) {\n        // Detected a refresh in the parent. This overrides any previously\n        // suspended cache.\n        cachePool = {\n          parent: parentCache,\n          pool: parentCache,\n        };\n      } else {\n        // We can reuse the cache from last time. The only thing that would have\n        // overridden it is a parent refresh, which we checked for above.\n        cachePool = prevCachePool;\n      }\n    } else {\n      // If there's no previous cache pool, grab the current one.\n      cachePool = getSuspendedCachePool();\n    }\n  }\n  return {\n    baseLanes: mergeLanes(prevOffscreenState.baseLanes, renderLanes),\n    cachePool,\n  };\n}\n\n// TODO: Probably should inline this back\nfunction shouldRemainOnFallback(\n  suspenseContext: SuspenseContext,\n  current: null | Fiber,\n  workInProgress: Fiber,\n  renderLanes: Lanes,\n) {\n  // If we're already showing a fallback, there are cases where we need to\n  // remain on that fallback regardless of whether the content has resolved.\n  // For example, SuspenseList coordinates when nested content appears.\n  if (current !== null) {\n    const suspenseState: SuspenseState = current.memoizedState;\n    if (suspenseState === null) {\n      // Currently showing content. Don't hide it, even if ForceSuspenseFallback\n      // is true. More precise name might be \"ForceRemainSuspenseFallback\".\n      // Note: This is a factoring smell. Can't remain on a fallback if there's\n      // no fallback to remain on.\n      return false;\n    }\n  }\n\n  // Not currently showing content. Consult the Suspense context.\n  return hasSuspenseContext(\n    suspenseContext,\n    (ForceSuspenseFallback: SuspenseContext),\n  );\n}\n\nfunction getRemainingWorkInPrimaryTree(current: Fiber, renderLanes) {\n  // TODO: Should not remove render lanes that were pinged during this render\n  return removeLanes(current.childLanes, renderLanes);\n}\n\nfunction updateSuspenseComponent(current, workInProgress, renderLanes) {\n  const nextProps = workInProgress.pendingProps;\n\n  // This is used by DevTools to force a boundary to suspend.\n  if (__DEV__) {\n    if (shouldSuspend(workInProgress)) {\n      workInProgress.flags |= DidCapture;\n    }\n  }\n\n  let suspenseContext: SuspenseContext = suspenseStackCursor.current;\n\n  let showFallback = false;\n  const didSuspend = (workInProgress.flags & DidCapture) !== NoFlags;\n\n  if (\n    didSuspend ||\n    shouldRemainOnFallback(\n      suspenseContext,\n      current,\n      workInProgress,\n      renderLanes,\n    )\n  ) {\n    // Something in this boundary's subtree already suspended. Switch to\n    // rendering the fallback children.\n    showFallback = true;\n    workInProgress.flags &= ~DidCapture;\n  } else {\n    // Attempting the main content\n    if (\n      current === null ||\n      (current.memoizedState: null | SuspenseState) !== null\n    ) {\n      // This is a new mount or this boundary is already showing a fallback state.\n      // Mark this subtree context as having at least one invisible parent that could\n      // handle the fallback state.\n      // Avoided boundaries are not considered since they cannot handle preferred fallback states.\n      if (nextProps.unstable_avoidThisFallback !== true) {\n        suspenseContext = addSubtreeSuspenseContext(\n          suspenseContext,\n          InvisibleParentSuspenseContext,\n        );\n      }\n    }\n  }\n\n  suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);\n\n  pushSuspenseContext(workInProgress, suspenseContext);\n\n  // OK, the next part is confusing. We're about to reconcile the Suspense\n  // boundary's children. This involves some custom reconciliation logic. Two\n  // main reasons this is so complicated.\n  //\n  // First, Legacy Mode has different semantics for backwards compatibility. The\n  // primary tree will commit in an inconsistent state, so when we do the\n  // second pass to render the fallback, we do some exceedingly, uh, clever\n  // hacks to make that not totally break. Like transferring effects and\n  // deletions from hidden tree. In Concurrent Mode, it's much simpler,\n  // because we bailout on the primary tree completely and leave it in its old\n  // state, no effects. Same as what we do for Offscreen (except that\n  // Offscreen doesn't have the first render pass).\n  //\n  // Second is hydration. During hydration, the Suspense fiber has a slightly\n  // different layout, where the child points to a dehydrated fragment, which\n  // contains the DOM rendered by the server.\n  //\n  // Third, even if you set all that aside, Suspense is like error boundaries in\n  // that we first we try to render one tree, and if that fails, we render again\n  // and switch to a different tree. Like a try/catch block. So we have to track\n  // which branch we're currently rendering. Ideally we would model this using\n  // a stack.\n  if (current === null) {\n    // Initial mount\n    // If we're currently hydrating, try to hydrate this boundary.\n    tryToClaimNextHydratableInstance(workInProgress);\n    // This could've been a dehydrated suspense component.\n    if (enableSuspenseServerRenderer) {\n      const suspenseState: null | SuspenseState = workInProgress.memoizedState;\n      if (suspenseState !== null) {\n        const dehydrated = suspenseState.dehydrated;\n        if (dehydrated !== null) {\n          return mountDehydratedSuspenseComponent(\n            workInProgress,\n            dehydrated,\n            renderLanes,\n          );\n        }\n      }\n    }\n\n    const nextPrimaryChildren = nextProps.children;\n    const nextFallbackChildren = nextProps.fallback;\n    if (showFallback) {\n      const fallbackFragment = mountSuspenseFallbackChildren(\n        workInProgress,\n        nextPrimaryChildren,\n        nextFallbackChildren,\n        renderLanes,\n      );\n      const primaryChildFragment: Fiber = (workInProgress.child: any);\n      primaryChildFragment.memoizedState = mountSuspenseOffscreenState(\n        renderLanes,\n      );\n      workInProgress.memoizedState = SUSPENDED_MARKER;\n      return fallbackFragment;\n    } else if (typeof nextProps.unstable_expectedLoadTime === 'number') {\n      // This is a CPU-bound tree. Skip this tree and show a placeholder to\n      // unblock the surrounding content. Then immediately retry after the\n      // initial commit.\n      const fallbackFragment = mountSuspenseFallbackChildren(\n        workInProgress,\n        nextPrimaryChildren,\n        nextFallbackChildren,\n        renderLanes,\n      );\n      const primaryChildFragment: Fiber = (workInProgress.child: any);\n      primaryChildFragment.memoizedState = mountSuspenseOffscreenState(\n        renderLanes,\n      );\n      workInProgress.memoizedState = SUSPENDED_MARKER;\n\n      // Since nothing actually suspended, there will nothing to ping this to\n      // get it started back up to attempt the next item. While in terms of\n      // priority this work has the same priority as this current render, it's\n      // not part of the same transition once the transition has committed. If\n      // it's sync, we still want to yield so that it can be painted.\n      // Conceptually, this is really the same as pinging. We can use any\n      // RetryLane even if it's the one currently rendering since we're leaving\n      // it behind on this node.\n      workInProgress.lanes = SomeRetryLane;\n      return fallbackFragment;\n    } else {\n      return mountSuspensePrimaryChildren(\n        workInProgress,\n        nextPrimaryChildren,\n        renderLanes,\n      );\n    }\n  } else {\n    // This is an update.\n\n    // If the current fiber has a SuspenseState, that means it's already showing\n    // a fallback.\n    const prevState: null | SuspenseState = current.memoizedState;\n    if (prevState !== null) {\n      // The current tree is already showing a fallback\n\n      // Special path for hydration\n      if (enableSuspenseServerRenderer) {\n        const dehydrated = prevState.dehydrated;\n        if (dehydrated !== null) {\n          if (!didSuspend) {\n            return updateDehydratedSuspenseComponent(\n              current,\n              workInProgress,\n              dehydrated,\n              prevState,\n              renderLanes,\n            );\n          } else if (\n            (workInProgress.memoizedState: null | SuspenseState) !== null\n          ) {\n            // Something suspended and we should still be in dehydrated mode.\n            // Leave the existing child in place.\n            workInProgress.child = current.child;\n            // The dehydrated completion pass expects this flag to be there\n            // but the normal suspense pass doesn't.\n            workInProgress.flags |= DidCapture;\n            return null;\n          } else {\n            // Suspended but we should no longer be in dehydrated mode.\n            // Therefore we now have to render the fallback.\n            const nextPrimaryChildren = nextProps.children;\n            const nextFallbackChildren = nextProps.fallback;\n            const fallbackChildFragment = mountSuspenseFallbackAfterRetryWithoutHydrating(\n              current,\n              workInProgress,\n              nextPrimaryChildren,\n              nextFallbackChildren,\n              renderLanes,\n            );\n            const primaryChildFragment: Fiber = (workInProgress.child: any);\n            primaryChildFragment.memoizedState = mountSuspenseOffscreenState(\n              renderLanes,\n            );\n            workInProgress.memoizedState = SUSPENDED_MARKER;\n            return fallbackChildFragment;\n          }\n        }\n      }\n\n      if (showFallback) {\n        const nextFallbackChildren = nextProps.fallback;\n        const nextPrimaryChildren = nextProps.children;\n        const fallbackChildFragment = updateSuspenseFallbackChildren(\n          current,\n          workInProgress,\n          nextPrimaryChildren,\n          nextFallbackChildren,\n          renderLanes,\n        );\n        const primaryChildFragment: Fiber = (workInProgress.child: any);\n        const prevOffscreenState: OffscreenState | null = (current.child: any)\n          .memoizedState;\n        primaryChildFragment.memoizedState =\n          prevOffscreenState === null\n            ? mountSuspenseOffscreenState(renderLanes)\n            : updateSuspenseOffscreenState(prevOffscreenState, renderLanes);\n        primaryChildFragment.childLanes = getRemainingWorkInPrimaryTree(\n          current,\n          renderLanes,\n        );\n        workInProgress.memoizedState = SUSPENDED_MARKER;\n        return fallbackChildFragment;\n      } else {\n        const nextPrimaryChildren = nextProps.children;\n        const primaryChildFragment = updateSuspensePrimaryChildren(\n          current,\n          workInProgress,\n          nextPrimaryChildren,\n          renderLanes,\n        );\n        workInProgress.memoizedState = null;\n        return primaryChildFragment;\n      }\n    } else {\n      // The current tree is not already showing a fallback.\n      if (showFallback) {\n        // Timed out.\n        const nextFallbackChildren = nextProps.fallback;\n        const nextPrimaryChildren = nextProps.children;\n        const fallbackChildFragment = updateSuspenseFallbackChildren(\n          current,\n          workInProgress,\n          nextPrimaryChildren,\n          nextFallbackChildren,\n          renderLanes,\n        );\n        const primaryChildFragment: Fiber = (workInProgress.child: any);\n        const prevOffscreenState: OffscreenState | null = (current.child: any)\n          .memoizedState;\n        primaryChildFragment.memoizedState =\n          prevOffscreenState === null\n            ? mountSuspenseOffscreenState(renderLanes)\n            : updateSuspenseOffscreenState(prevOffscreenState, renderLanes);\n        primaryChildFragment.childLanes = getRemainingWorkInPrimaryTree(\n          current,\n          renderLanes,\n        );\n        // Skip the primary children, and continue working on the\n        // fallback children.\n        workInProgress.memoizedState = SUSPENDED_MARKER;\n        return fallbackChildFragment;\n      } else {\n        // Still haven't timed out. Continue rendering the children, like we\n        // normally do.\n        const nextPrimaryChildren = nextProps.children;\n        const primaryChildFragment = updateSuspensePrimaryChildren(\n          current,\n          workInProgress,\n          nextPrimaryChildren,\n          renderLanes,\n        );\n        workInProgress.memoizedState = null;\n        return primaryChildFragment;\n      }\n    }\n  }\n}\n\nfunction mountSuspensePrimaryChildren(\n  workInProgress,\n  primaryChildren,\n  renderLanes,\n) {\n  const mode = workInProgress.mode;\n  const primaryChildProps: OffscreenProps = {\n    mode: 'visible',\n    children: primaryChildren,\n  };\n  const primaryChildFragment = mountWorkInProgressOffscreenFiber(\n    primaryChildProps,\n    mode,\n    renderLanes,\n  );\n  primaryChildFragment.return = workInProgress;\n  workInProgress.child = primaryChildFragment;\n  return primaryChildFragment;\n}\n\nfunction mountSuspenseFallbackChildren(\n  workInProgress,\n  primaryChildren,\n  fallbackChildren,\n  renderLanes,\n) {\n  const mode = workInProgress.mode;\n  const progressedPrimaryFragment: Fiber | null = workInProgress.child;\n\n  const primaryChildProps: OffscreenProps = {\n    mode: 'hidden',\n    children: primaryChildren,\n  };\n\n  let primaryChildFragment;\n  let fallbackChildFragment;\n  if (\n    (mode & ConcurrentMode) === NoMode &&\n    progressedPrimaryFragment !== null\n  ) {\n    // In legacy mode, we commit the primary tree as if it successfully\n    // completed, even though it's in an inconsistent state.\n    primaryChildFragment = progressedPrimaryFragment;\n    primaryChildFragment.childLanes = NoLanes;\n    primaryChildFragment.pendingProps = primaryChildProps;\n\n    if (enableProfilerTimer && workInProgress.mode & ProfileMode) {\n      // Reset the durations from the first pass so they aren't included in the\n      // final amounts. This seems counterintuitive, since we're intentionally\n      // not measuring part of the render phase, but this makes it match what we\n      // do in Concurrent Mode.\n      primaryChildFragment.actualDuration = 0;\n      primaryChildFragment.actualStartTime = -1;\n      primaryChildFragment.selfBaseDuration = 0;\n      primaryChildFragment.treeBaseDuration = 0;\n    }\n\n    fallbackChildFragment = createFiberFromFragment(\n      fallbackChildren,\n      mode,\n      renderLanes,\n      null,\n    );\n  } else {\n    primaryChildFragment = mountWorkInProgressOffscreenFiber(\n      primaryChildProps,\n      mode,\n      NoLanes,\n    );\n    fallbackChildFragment = createFiberFromFragment(\n      fallbackChildren,\n      mode,\n      renderLanes,\n      null,\n    );\n  }\n\n  primaryChildFragment.return = workInProgress;\n  fallbackChildFragment.return = workInProgress;\n  primaryChildFragment.sibling = fallbackChildFragment;\n  workInProgress.child = primaryChildFragment;\n  return fallbackChildFragment;\n}\n\nfunction mountWorkInProgressOffscreenFiber(\n  offscreenProps: OffscreenProps,\n  mode: TypeOfMode,\n  renderLanes: Lanes,\n) {\n  // The props argument to `createFiberFromOffscreen` is `any` typed, so we use\n  // this wrapper function to constrain it.\n  return createFiberFromOffscreen(offscreenProps, mode, NoLanes, null);\n}\n\nfunction updateWorkInProgressOffscreenFiber(\n  current: Fiber,\n  offscreenProps: OffscreenProps,\n) {\n  // The props argument to `createWorkInProgress` is `any` typed, so we use this\n  // wrapper function to constrain it.\n  return createWorkInProgress(current, offscreenProps);\n}\n\nfunction updateSuspensePrimaryChildren(\n  current,\n  workInProgress,\n  primaryChildren,\n  renderLanes,\n) {\n  const currentPrimaryChildFragment: Fiber = (current.child: any);\n  const currentFallbackChildFragment: Fiber | null =\n    currentPrimaryChildFragment.sibling;\n\n  const primaryChildFragment = updateWorkInProgressOffscreenFiber(\n    currentPrimaryChildFragment,\n    {\n      mode: 'visible',\n      children: primaryChildren,\n    },\n  );\n  if ((workInProgress.mode & ConcurrentMode) === NoMode) {\n    primaryChildFragment.lanes = renderLanes;\n  }\n  primaryChildFragment.return = workInProgress;\n  primaryChildFragment.sibling = null;\n  if (currentFallbackChildFragment !== null) {\n    // Delete the fallback child fragment\n    const deletions = workInProgress.deletions;\n    if (deletions === null) {\n      workInProgress.deletions = [currentFallbackChildFragment];\n      workInProgress.flags |= ChildDeletion;\n    } else {\n      deletions.push(currentFallbackChildFragment);\n    }\n  }\n\n  workInProgress.child = primaryChildFragment;\n  return primaryChildFragment;\n}\n\nfunction updateSuspenseFallbackChildren(\n  current,\n  workInProgress,\n  primaryChildren,\n  fallbackChildren,\n  renderLanes,\n) {\n  const mode = workInProgress.mode;\n  const currentPrimaryChildFragment: Fiber = (current.child: any);\n  const currentFallbackChildFragment: Fiber | null =\n    currentPrimaryChildFragment.sibling;\n\n  const primaryChildProps: OffscreenProps = {\n    mode: 'hidden',\n    children: primaryChildren,\n  };\n\n  let primaryChildFragment;\n  if (\n    // In legacy mode, we commit the primary tree as if it successfully\n    // completed, even though it's in an inconsistent state.\n    (mode & ConcurrentMode) === NoMode &&\n    // Make sure we're on the second pass, i.e. the primary child fragment was\n    // already cloned. In legacy mode, the only case where this isn't true is\n    // when DevTools forces us to display a fallback; we skip the first render\n    // pass entirely and go straight to rendering the fallback. (In Concurrent\n    // Mode, SuspenseList can also trigger this scenario, but this is a legacy-\n    // only codepath.)\n    workInProgress.child !== currentPrimaryChildFragment\n  ) {\n    const progressedPrimaryFragment: Fiber = (workInProgress.child: any);\n    primaryChildFragment = progressedPrimaryFragment;\n    primaryChildFragment.childLanes = NoLanes;\n    primaryChildFragment.pendingProps = primaryChildProps;\n\n    if (enableProfilerTimer && workInProgress.mode & ProfileMode) {\n      // Reset the durations from the first pass so they aren't included in the\n      // final amounts. This seems counterintuitive, since we're intentionally\n      // not measuring part of the render phase, but this makes it match what we\n      // do in Concurrent Mode.\n      primaryChildFragment.actualDuration = 0;\n      primaryChildFragment.actualStartTime = -1;\n      primaryChildFragment.selfBaseDuration =\n        currentPrimaryChildFragment.selfBaseDuration;\n      primaryChildFragment.treeBaseDuration =\n        currentPrimaryChildFragment.treeBaseDuration;\n    }\n\n    if (enablePersistentOffscreenHostContainer && supportsPersistence) {\n      // In persistent mode, the offscreen children are wrapped in a host node.\n      // We need to complete it now, because we're going to skip over its normal\n      // complete phase and go straight to rendering the fallback.\n      const currentOffscreenContainer = currentPrimaryChildFragment.child;\n      const offscreenContainer: Fiber = (primaryChildFragment.child: any);\n      const containerProps = getOffscreenContainerProps(\n        'hidden',\n        primaryChildren,\n      );\n      offscreenContainer.pendingProps = containerProps;\n      offscreenContainer.memoizedProps = containerProps;\n      completeSuspendedOffscreenHostContainer(\n        currentOffscreenContainer,\n        offscreenContainer,\n      );\n    }\n\n    // The fallback fiber was added as a deletion during the first pass.\n    // However, since we're going to remain on the fallback, we no longer want\n    // to delete it.\n    workInProgress.deletions = null;\n  } else {\n    primaryChildFragment = updateWorkInProgressOffscreenFiber(\n      currentPrimaryChildFragment,\n      primaryChildProps,\n    );\n\n    if (enablePersistentOffscreenHostContainer && supportsPersistence) {\n      // In persistent mode, the offscreen children are wrapped in a host node.\n      // We need to complete it now, because we're going to skip over its normal\n      // complete phase and go straight to rendering the fallback.\n      const currentOffscreenContainer = currentPrimaryChildFragment.child;\n      if (currentOffscreenContainer !== null) {\n        const isHidden = true;\n        const offscreenContainer = reconcileOffscreenHostContainer(\n          currentPrimaryChildFragment,\n          primaryChildFragment,\n          isHidden,\n          primaryChildren,\n          renderLanes,\n        );\n        offscreenContainer.memoizedProps = offscreenContainer.pendingProps;\n        completeSuspendedOffscreenHostContainer(\n          currentOffscreenContainer,\n          offscreenContainer,\n        );\n      }\n    }\n\n    // Since we're reusing a current tree, we need to reuse the flags, too.\n    // (We don't do this in legacy mode, because in legacy mode we don't re-use\n    // the current tree; see previous branch.)\n    primaryChildFragment.subtreeFlags =\n      currentPrimaryChildFragment.subtreeFlags & StaticMask;\n  }\n  let fallbackChildFragment;\n  if (currentFallbackChildFragment !== null) {\n    fallbackChildFragment = createWorkInProgress(\n      currentFallbackChildFragment,\n      fallbackChildren,\n    );\n  } else {\n    fallbackChildFragment = createFiberFromFragment(\n      fallbackChildren,\n      mode,\n      renderLanes,\n      null,\n    );\n    // Needs a placement effect because the parent (the Suspense boundary) already\n    // mounted but this is a new fiber.\n    fallbackChildFragment.flags |= Placement;\n  }\n\n  fallbackChildFragment.return = workInProgress;\n  primaryChildFragment.return = workInProgress;\n  primaryChildFragment.sibling = fallbackChildFragment;\n  workInProgress.child = primaryChildFragment;\n\n  return fallbackChildFragment;\n}\n\nfunction retrySuspenseComponentWithoutHydrating(\n  current: Fiber,\n  workInProgress: Fiber,\n  renderLanes: Lanes,\n) {\n  // This will add the old fiber to the deletion list\n  reconcileChildFibers(workInProgress, current.child, null, renderLanes);\n\n  // We're now not suspended nor dehydrated.\n  const nextProps = workInProgress.pendingProps;\n  const primaryChildren = nextProps.children;\n  const primaryChildFragment = mountSuspensePrimaryChildren(\n    workInProgress,\n    primaryChildren,\n    renderLanes,\n  );\n  // Needs a placement effect because the parent (the Suspense boundary) already\n  // mounted but this is a new fiber.\n  primaryChildFragment.flags |= Placement;\n  workInProgress.memoizedState = null;\n\n  return primaryChildFragment;\n}\n\nfunction mountSuspenseFallbackAfterRetryWithoutHydrating(\n  current,\n  workInProgress,\n  primaryChildren,\n  fallbackChildren,\n  renderLanes,\n) {\n  const fiberMode = workInProgress.mode;\n  const primaryChildProps: OffscreenProps = {\n    mode: 'visible',\n    children: primaryChildren,\n  };\n  const primaryChildFragment = mountWorkInProgressOffscreenFiber(\n    primaryChildProps,\n    fiberMode,\n    NoLanes,\n  );\n  const fallbackChildFragment = createFiberFromFragment(\n    fallbackChildren,\n    fiberMode,\n    renderLanes,\n    null,\n  );\n  // Needs a placement effect because the parent (the Suspense\n  // boundary) already mounted but this is a new fiber.\n  fallbackChildFragment.flags |= Placement;\n\n  primaryChildFragment.return = workInProgress;\n  fallbackChildFragment.return = workInProgress;\n  primaryChildFragment.sibling = fallbackChildFragment;\n  workInProgress.child = primaryChildFragment;\n\n  if ((workInProgress.mode & ConcurrentMode) !== NoMode) {\n    // We will have dropped the effect list which contains the\n    // deletion. We need to reconcile to delete the current child.\n    reconcileChildFibers(workInProgress, current.child, null, renderLanes);\n  }\n\n  return fallbackChildFragment;\n}\n\nfunction mountDehydratedSuspenseComponent(\n  workInProgress: Fiber,\n  suspenseInstance: SuspenseInstance,\n  renderLanes: Lanes,\n): null | Fiber {\n  // During the first pass, we'll bail out and not drill into the children.\n  // Instead, we'll leave the content in place and try to hydrate it later.\n  if ((workInProgress.mode & ConcurrentMode) === NoMode) {\n    if (__DEV__) {\n      console.error(\n        'Cannot hydrate Suspense in legacy mode. Switch from ' +\n          'ReactDOM.hydrate(element, container) to ' +\n          'ReactDOM.createRoot(container, { hydrate: true })' +\n          '.render(element) or remove the Suspense components from ' +\n          'the server rendered components.',\n      );\n    }\n    workInProgress.lanes = laneToLanes(SyncLane);\n  } else if (isSuspenseInstanceFallback(suspenseInstance)) {\n    // This is a client-only boundary. Since we won't get any content from the server\n    // for this, we need to schedule that at a higher priority based on when it would\n    // have timed out. In theory we could render it in this pass but it would have the\n    // wrong priority associated with it and will prevent hydration of parent path.\n    // Instead, we'll leave work left on it to render it in a separate commit.\n\n    // TODO This time should be the time at which the server rendered response that is\n    // a parent to this boundary was displayed. However, since we currently don't have\n    // a protocol to transfer that time, we'll just estimate it by using the current\n    // time. This will mean that Suspense timeouts are slightly shifted to later than\n    // they should be.\n    // Schedule a normal pri update to render this content.\n    workInProgress.lanes = laneToLanes(DefaultHydrationLane);\n  } else {\n    // We'll continue hydrating the rest at offscreen priority since we'll already\n    // be showing the right content coming from the server, it is no rush.\n    workInProgress.lanes = laneToLanes(OffscreenLane);\n  }\n  return null;\n}\n\nfunction updateDehydratedSuspenseComponent(\n  current: Fiber,\n  workInProgress: Fiber,\n  suspenseInstance: SuspenseInstance,\n  suspenseState: SuspenseState,\n  renderLanes: Lanes,\n): null | Fiber {\n  // We should never be hydrating at this point because it is the first pass,\n  // but after we've already committed once.\n  warnIfHydrating();\n\n  if ((getExecutionContext() & RetryAfterError) !== NoContext) {\n    return retrySuspenseComponentWithoutHydrating(\n      current,\n      workInProgress,\n      renderLanes,\n    );\n  }\n\n  if ((workInProgress.mode & ConcurrentMode) === NoMode) {\n    return retrySuspenseComponentWithoutHydrating(\n      current,\n      workInProgress,\n      renderLanes,\n    );\n  }\n\n  if (isSuspenseInstanceFallback(suspenseInstance)) {\n    // This boundary is in a permanent fallback state. In this case, we'll never\n    // get an update and we'll never be able to hydrate the final content. Let's just try the\n    // client side render instead.\n    return retrySuspenseComponentWithoutHydrating(\n      current,\n      workInProgress,\n      renderLanes,\n    );\n  }\n\n  if (\n    enableLazyContextPropagation &&\n    // TODO: Factoring is a little weird, since we check this right below, too.\n    // But don't want to re-arrange the if-else chain until/unless this\n    // feature lands.\n    !didReceiveUpdate\n  ) {\n    // We need to check if any children have context before we decide to bail\n    // out, so propagate the changes now.\n    lazilyPropagateParentContextChanges(current, workInProgress, renderLanes);\n  }\n\n  // We use lanes to indicate that a child might depend on context, so if\n  // any context has changed, we need to treat is as if the input might have changed.\n  const hasContextChanged = includesSomeLane(renderLanes, current.childLanes);\n  if (didReceiveUpdate || hasContextChanged) {\n    // This boundary has changed since the first render. This means that we are now unable to\n    // hydrate it. We might still be able to hydrate it using a higher priority lane.\n    const root = getWorkInProgressRoot();\n    if (root !== null) {\n      const attemptHydrationAtLane = getBumpedLaneForHydration(\n        root,\n        renderLanes,\n      );\n      if (\n        attemptHydrationAtLane !== NoLane &&\n        attemptHydrationAtLane !== suspenseState.retryLane\n      ) {\n        // Intentionally mutating since this render will get interrupted. This\n        // is one of the very rare times where we mutate the current tree\n        // during the render phase.\n        suspenseState.retryLane = attemptHydrationAtLane;\n        // TODO: Ideally this would inherit the event time of the current render\n        const eventTime = NoTimestamp;\n        scheduleUpdateOnFiber(current, attemptHydrationAtLane, eventTime);\n      } else {\n        // We have already tried to ping at a higher priority than we're rendering with\n        // so if we got here, we must have failed to hydrate at those levels. We must\n        // now give up. Instead, we're going to delete the whole subtree and instead inject\n        // a new real Suspense boundary to take its place, which may render content\n        // or fallback. This might suspend for a while and if it does we might still have\n        // an opportunity to hydrate before this pass commits.\n      }\n    }\n\n    // If we have scheduled higher pri work above, this will probably just abort the render\n    // since we now have higher priority work, but in case it doesn't, we need to prepare to\n    // render something, if we time out. Even if that requires us to delete everything and\n    // skip hydration.\n    // Delay having to do this as long as the suspense timeout allows us.\n    renderDidSuspendDelayIfPossible();\n    return retrySuspenseComponentWithoutHydrating(\n      current,\n      workInProgress,\n      renderLanes,\n    );\n  } else if (isSuspenseInstancePending(suspenseInstance)) {\n    // This component is still pending more data from the server, so we can't hydrate its\n    // content. We treat it as if this component suspended itself. It might seem as if\n    // we could just try to render it client-side instead. However, this will perform a\n    // lot of unnecessary work and is unlikely to complete since it often will suspend\n    // on missing data anyway. Additionally, the server might be able to render more\n    // than we can on the client yet. In that case we'd end up with more fallback states\n    // on the client than if we just leave it alone. If the server times out or errors\n    // these should update this boundary to the permanent Fallback state instead.\n    // Mark it as having captured (i.e. suspended).\n    workInProgress.flags |= DidCapture;\n    // Leave the child in place. I.e. the dehydrated fragment.\n    workInProgress.child = current.child;\n    // Register a callback to retry this boundary once the server has sent the result.\n    const retry = retryDehydratedSuspenseBoundary.bind(null, current);\n    registerSuspenseInstanceRetry(suspenseInstance, retry);\n    return null;\n  } else {\n    // This is the first attempt.\n    reenterHydrationStateFromDehydratedSuspenseInstance(\n      workInProgress,\n      suspenseInstance,\n    );\n    const nextProps = workInProgress.pendingProps;\n    const primaryChildren = nextProps.children;\n    const primaryChildFragment = mountSuspensePrimaryChildren(\n      workInProgress,\n      primaryChildren,\n      renderLanes,\n    );\n    // Mark the children as hydrating. This is a fast path to know whether this\n    // tree is part of a hydrating tree. This is used to determine if a child\n    // node has fully mounted yet, and for scheduling event replaying.\n    // Conceptually this is similar to Placement in that a new subtree is\n    // inserted into the React tree here. It just happens to not need DOM\n    // mutations because it already exists.\n    primaryChildFragment.flags |= Hydrating;\n    return primaryChildFragment;\n  }\n}\n\nfunction scheduleWorkOnFiber(fiber: Fiber, renderLanes: Lanes) {\n  fiber.lanes = mergeLanes(fiber.lanes, renderLanes);\n  const alternate = fiber.alternate;\n  if (alternate !== null) {\n    alternate.lanes = mergeLanes(alternate.lanes, renderLanes);\n  }\n  scheduleWorkOnParentPath(fiber.return, renderLanes);\n}\n\nfunction propagateSuspenseContextChange(\n  workInProgress: Fiber,\n  firstChild: null | Fiber,\n  renderLanes: Lanes,\n): void {\n  // Mark any Suspense boundaries with fallbacks as having work to do.\n  // If they were previously forced into fallbacks, they may now be able\n  // to unblock.\n  let node = firstChild;\n  while (node !== null) {\n    if (node.tag === SuspenseComponent) {\n      const state: SuspenseState | null = node.memoizedState;\n      if (state !== null) {\n        scheduleWorkOnFiber(node, renderLanes);\n      }\n    } else if (node.tag === SuspenseListComponent) {\n      // If the tail is hidden there might not be an Suspense boundaries\n      // to schedule work on. In this case we have to schedule it on the\n      // list itself.\n      // We don't have to traverse to the children of the list since\n      // the list will propagate the change when it rerenders.\n      scheduleWorkOnFiber(node, renderLanes);\n    } else if (node.child !== null) {\n      node.child.return = node;\n      node = node.child;\n      continue;\n    }\n    if (node === workInProgress) {\n      return;\n    }\n    while (node.sibling === null) {\n      if (node.return === null || node.return === workInProgress) {\n        return;\n      }\n      node = node.return;\n    }\n    node.sibling.return = node.return;\n    node = node.sibling;\n  }\n}\n\nfunction findLastContentRow(firstChild: null | Fiber): null | Fiber {\n  // This is going to find the last row among these children that is already\n  // showing content on the screen, as opposed to being in fallback state or\n  // new. If a row has multiple Suspense boundaries, any of them being in the\n  // fallback state, counts as the whole row being in a fallback state.\n  // Note that the \"rows\" will be workInProgress, but any nested children\n  // will still be current since we haven't rendered them yet. The mounted\n  // order may not be the same as the new order. We use the new order.\n  let row = firstChild;\n  let lastContentRow: null | Fiber = null;\n  while (row !== null) {\n    const currentRow = row.alternate;\n    // New rows can't be content rows.\n    if (currentRow !== null && findFirstSuspended(currentRow) === null) {\n      lastContentRow = row;\n    }\n    row = row.sibling;\n  }\n  return lastContentRow;\n}\n\ntype SuspenseListRevealOrder = 'forwards' | 'backwards' | 'together' | void;\n\nfunction validateRevealOrder(revealOrder: SuspenseListRevealOrder) {\n  if (__DEV__) {\n    if (\n      revealOrder !== undefined &&\n      revealOrder !== 'forwards' &&\n      revealOrder !== 'backwards' &&\n      revealOrder !== 'together' &&\n      !didWarnAboutRevealOrder[revealOrder]\n    ) {\n      didWarnAboutRevealOrder[revealOrder] = true;\n      if (typeof revealOrder === 'string') {\n        switch (revealOrder.toLowerCase()) {\n          case 'together':\n          case 'forwards':\n          case 'backwards': {\n            console.error(\n              '\"%s\" is not a valid value for revealOrder on <SuspenseList />. ' +\n                'Use lowercase \"%s\" instead.',\n              revealOrder,\n              revealOrder.toLowerCase(),\n            );\n            break;\n          }\n          case 'forward':\n          case 'backward': {\n            console.error(\n              '\"%s\" is not a valid value for revealOrder on <SuspenseList />. ' +\n                'React uses the -s suffix in the spelling. Use \"%ss\" instead.',\n              revealOrder,\n              revealOrder.toLowerCase(),\n            );\n            break;\n          }\n          default:\n            console.error(\n              '\"%s\" is not a supported revealOrder on <SuspenseList />. ' +\n                'Did you mean \"together\", \"forwards\" or \"backwards\"?',\n              revealOrder,\n            );\n            break;\n        }\n      } else {\n        console.error(\n          '%s is not a supported value for revealOrder on <SuspenseList />. ' +\n            'Did you mean \"together\", \"forwards\" or \"backwards\"?',\n          revealOrder,\n        );\n      }\n    }\n  }\n}\n\nfunction validateTailOptions(\n  tailMode: SuspenseListTailMode,\n  revealOrder: SuspenseListRevealOrder,\n) {\n  if (__DEV__) {\n    if (tailMode !== undefined && !didWarnAboutTailOptions[tailMode]) {\n      if (tailMode !== 'collapsed' && tailMode !== 'hidden') {\n        didWarnAboutTailOptions[tailMode] = true;\n        console.error(\n          '\"%s\" is not a supported value for tail on <SuspenseList />. ' +\n            'Did you mean \"collapsed\" or \"hidden\"?',\n          tailMode,\n        );\n      } else if (revealOrder !== 'forwards' && revealOrder !== 'backwards') {\n        didWarnAboutTailOptions[tailMode] = true;\n        console.error(\n          '<SuspenseList tail=\"%s\" /> is only valid if revealOrder is ' +\n            '\"forwards\" or \"backwards\". ' +\n            'Did you mean to specify revealOrder=\"forwards\"?',\n          tailMode,\n        );\n      }\n    }\n  }\n}\n\nfunction validateSuspenseListNestedChild(childSlot: mixed, index: number) {\n  if (__DEV__) {\n    const isAnArray = isArray(childSlot);\n    const isIterable =\n      !isAnArray && typeof getIteratorFn(childSlot) === 'function';\n    if (isAnArray || isIterable) {\n      const type = isAnArray ? 'array' : 'iterable';\n      console.error(\n        'A nested %s was passed to row #%s in <SuspenseList />. Wrap it in ' +\n          'an additional SuspenseList to configure its revealOrder: ' +\n          '<SuspenseList revealOrder=...> ... ' +\n          '<SuspenseList revealOrder=...>{%s}</SuspenseList> ... ' +\n          '</SuspenseList>',\n        type,\n        index,\n        type,\n      );\n      return false;\n    }\n  }\n  return true;\n}\n\nfunction validateSuspenseListChildren(\n  children: mixed,\n  revealOrder: SuspenseListRevealOrder,\n) {\n  if (__DEV__) {\n    if (\n      (revealOrder === 'forwards' || revealOrder === 'backwards') &&\n      children !== undefined &&\n      children !== null &&\n      children !== false\n    ) {\n      if (isArray(children)) {\n        for (let i = 0; i < children.length; i++) {\n          if (!validateSuspenseListNestedChild(children[i], i)) {\n            return;\n          }\n        }\n      } else {\n        const iteratorFn = getIteratorFn(children);\n        if (typeof iteratorFn === 'function') {\n          const childrenIterator = iteratorFn.call(children);\n          if (childrenIterator) {\n            let step = childrenIterator.next();\n            let i = 0;\n            for (; !step.done; step = childrenIterator.next()) {\n              if (!validateSuspenseListNestedChild(step.value, i)) {\n                return;\n              }\n              i++;\n            }\n          }\n        } else {\n          console.error(\n            'A single row was passed to a <SuspenseList revealOrder=\"%s\" />. ' +\n              'This is not useful since it needs multiple rows. ' +\n              'Did you mean to pass multiple children or an array?',\n            revealOrder,\n          );\n        }\n      }\n    }\n  }\n}\n\nfunction initSuspenseListRenderState(\n  workInProgress: Fiber,\n  isBackwards: boolean,\n  tail: null | Fiber,\n  lastContentRow: null | Fiber,\n  tailMode: SuspenseListTailMode,\n): void {\n  const renderState: null | SuspenseListRenderState =\n    workInProgress.memoizedState;\n  if (renderState === null) {\n    workInProgress.memoizedState = ({\n      isBackwards: isBackwards,\n      rendering: null,\n      renderingStartTime: 0,\n      last: lastContentRow,\n      tail: tail,\n      tailMode: tailMode,\n    }: SuspenseListRenderState);\n  } else {\n    // We can reuse the existing object from previous renders.\n    renderState.isBackwards = isBackwards;\n    renderState.rendering = null;\n    renderState.renderingStartTime = 0;\n    renderState.last = lastContentRow;\n    renderState.tail = tail;\n    renderState.tailMode = tailMode;\n  }\n}\n\n// This can end up rendering this component multiple passes.\n// The first pass splits the children fibers into two sets. A head and tail.\n// We first render the head. If anything is in fallback state, we do another\n// pass through beginWork to rerender all children (including the tail) with\n// the force suspend context. If the first render didn't have anything in\n// in fallback state. Then we render each row in the tail one-by-one.\n// That happens in the completeWork phase without going back to beginWork.\nfunction updateSuspenseListComponent(\n  current: Fiber | null,\n  workInProgress: Fiber,\n  renderLanes: Lanes,\n) {\n  const nextProps = workInProgress.pendingProps;\n  const revealOrder: SuspenseListRevealOrder = nextProps.revealOrder;\n  const tailMode: SuspenseListTailMode = nextProps.tail;\n  const newChildren = nextProps.children;\n\n  validateRevealOrder(revealOrder);\n  validateTailOptions(tailMode, revealOrder);\n  validateSuspenseListChildren(newChildren, revealOrder);\n\n  reconcileChildren(current, workInProgress, newChildren, renderLanes);\n\n  let suspenseContext: SuspenseContext = suspenseStackCursor.current;\n\n  const shouldForceFallback = hasSuspenseContext(\n    suspenseContext,\n    (ForceSuspenseFallback: SuspenseContext),\n  );\n  if (shouldForceFallback) {\n    suspenseContext = setShallowSuspenseContext(\n      suspenseContext,\n      ForceSuspenseFallback,\n    );\n    workInProgress.flags |= DidCapture;\n  } else {\n    const didSuspendBefore =\n      current !== null && (current.flags & DidCapture) !== NoFlags;\n    if (didSuspendBefore) {\n      // If we previously forced a fallback, we need to schedule work\n      // on any nested boundaries to let them know to try to render\n      // again. This is the same as context updating.\n      propagateSuspenseContextChange(\n        workInProgress,\n        workInProgress.child,\n        renderLanes,\n      );\n    }\n    suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);\n  }\n  pushSuspenseContext(workInProgress, suspenseContext);\n\n  if ((workInProgress.mode & ConcurrentMode) === NoMode) {\n    // In legacy mode, SuspenseList doesn't work so we just\n    // use make it a noop by treating it as the default revealOrder.\n    workInProgress.memoizedState = null;\n  } else {\n    switch (revealOrder) {\n      case 'forwards': {\n        const lastContentRow = findLastContentRow(workInProgress.child);\n        let tail;\n        if (lastContentRow === null) {\n          // The whole list is part of the tail.\n          // TODO: We could fast path by just rendering the tail now.\n          tail = workInProgress.child;\n          workInProgress.child = null;\n        } else {\n          // Disconnect the tail rows after the content row.\n          // We're going to render them separately later.\n          tail = lastContentRow.sibling;\n          lastContentRow.sibling = null;\n        }\n        initSuspenseListRenderState(\n          workInProgress,\n          false, // isBackwards\n          tail,\n          lastContentRow,\n          tailMode,\n        );\n        break;\n      }\n      case 'backwards': {\n        // We're going to find the first row that has existing content.\n        // At the same time we're going to reverse the list of everything\n        // we pass in the meantime. That's going to be our tail in reverse\n        // order.\n        let tail = null;\n        let row = workInProgress.child;\n        workInProgress.child = null;\n        while (row !== null) {\n          const currentRow = row.alternate;\n          // New rows can't be content rows.\n          if (currentRow !== null && findFirstSuspended(currentRow) === null) {\n            // This is the beginning of the main content.\n            workInProgress.child = row;\n            break;\n          }\n          const nextRow = row.sibling;\n          row.sibling = tail;\n          tail = row;\n          row = nextRow;\n        }\n        // TODO: If workInProgress.child is null, we can continue on the tail immediately.\n        initSuspenseListRenderState(\n          workInProgress,\n          true, // isBackwards\n          tail,\n          null, // last\n          tailMode,\n        );\n        break;\n      }\n      case 'together': {\n        initSuspenseListRenderState(\n          workInProgress,\n          false, // isBackwards\n          null, // tail\n          null, // last\n          undefined,\n        );\n        break;\n      }\n      default: {\n        // The default reveal order is the same as not having\n        // a boundary.\n        workInProgress.memoizedState = null;\n      }\n    }\n  }\n  return workInProgress.child;\n}\n\nfunction updatePortalComponent(\n  current: Fiber | null,\n  workInProgress: Fiber,\n  renderLanes: Lanes,\n) {\n  pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);\n  const nextChildren = workInProgress.pendingProps;\n  if (current === null) {\n    // Portals are special because we don't append the children during mount\n    // but at commit. Therefore we need to track insertions which the normal\n    // flow doesn't do during mount. This doesn't happen at the root because\n    // the root always starts with a \"current\" with a null child.\n    // TODO: Consider unifying this with how the root works.\n    workInProgress.child = reconcileChildFibers(\n      workInProgress,\n      null,\n      nextChildren,\n      renderLanes,\n    );\n  } else {\n    reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n  }\n  return workInProgress.child;\n}\n\nlet hasWarnedAboutUsingNoValuePropOnContextProvider = false;\n\nfunction updateContextProvider(\n  current: Fiber | null,\n  workInProgress: Fiber,\n  renderLanes: Lanes,\n) {\n  const providerType: ReactProviderType<any> = workInProgress.type;\n  const context: ReactContext<any> = providerType._context;\n\n  const newProps = workInProgress.pendingProps;\n  const oldProps = workInProgress.memoizedProps;\n\n  const newValue = newProps.value;\n\n  if (__DEV__) {\n    if (!('value' in newProps)) {\n      if (!hasWarnedAboutUsingNoValuePropOnContextProvider) {\n        hasWarnedAboutUsingNoValuePropOnContextProvider = true;\n        console.error(\n          'The `value` prop is required for the `<Context.Provider>`. Did you misspell it or forget to pass it?',\n        );\n      }\n    }\n    const providerPropTypes = workInProgress.type.propTypes;\n\n    if (providerPropTypes) {\n      checkPropTypes(providerPropTypes, newProps, 'prop', 'Context.Provider');\n    }\n  }\n\n  pushProvider(workInProgress, context, newValue);\n\n  if (enableLazyContextPropagation) {\n    // In the lazy propagation implementation, we don't scan for matching\n    // consumers until something bails out, because until something bails out\n    // we're going to visit those nodes, anyway. The trade-off is that it shifts\n    // responsibility to the consumer to track whether something has changed.\n  } else {\n    if (oldProps !== null) {\n      const oldValue = oldProps.value;\n      if (is(oldValue, newValue)) {\n        // No change. Bailout early if children are the same.\n        if (\n          oldProps.children === newProps.children &&\n          !hasLegacyContextChanged()\n        ) {\n          return bailoutOnAlreadyFinishedWork(\n            current,\n            workInProgress,\n            renderLanes,\n          );\n        }\n      } else {\n        // The context value changed. Search for matching consumers and schedule\n        // them to update.\n        propagateContextChange(workInProgress, context, renderLanes);\n      }\n    }\n  }\n\n  const newChildren = newProps.children;\n  reconcileChildren(current, workInProgress, newChildren, renderLanes);\n  return workInProgress.child;\n}\n\nlet hasWarnedAboutUsingContextAsConsumer = false;\n\nfunction updateContextConsumer(\n  current: Fiber | null,\n  workInProgress: Fiber,\n  renderLanes: Lanes,\n) {\n  let context: ReactContext<any> = workInProgress.type;\n  // The logic below for Context differs depending on PROD or DEV mode. In\n  // DEV mode, we create a separate object for Context.Consumer that acts\n  // like a proxy to Context. This proxy object adds unnecessary code in PROD\n  // so we use the old behaviour (Context.Consumer references Context) to\n  // reduce size and overhead. The separate object references context via\n  // a property called \"_context\", which also gives us the ability to check\n  // in DEV mode if this property exists or not and warn if it does not.\n  if (__DEV__) {\n    if ((context: any)._context === undefined) {\n      // This may be because it's a Context (rather than a Consumer).\n      // Or it may be because it's older React where they're the same thing.\n      // We only want to warn if we're sure it's a new React.\n      if (context !== context.Consumer) {\n        if (!hasWarnedAboutUsingContextAsConsumer) {\n          hasWarnedAboutUsingContextAsConsumer = true;\n          console.error(\n            'Rendering <Context> directly is not supported and will be removed in ' +\n              'a future major release. Did you mean to render <Context.Consumer> instead?',\n          );\n        }\n      }\n    } else {\n      context = (context: any)._context;\n    }\n  }\n  const newProps = workInProgress.pendingProps;\n  const render = newProps.children;\n\n  if (__DEV__) {\n    if (typeof render !== 'function') {\n      console.error(\n        'A context consumer was rendered with multiple children, or a child ' +\n          \"that isn't a function. A context consumer expects a single child \" +\n          'that is a function. If you did pass a function, make sure there ' +\n          'is no trailing or leading whitespace around it.',\n      );\n    }\n  }\n\n  prepareToReadContext(workInProgress, renderLanes);\n  const newValue = readContext(context);\n  if (enableSchedulingProfiler) {\n    markComponentRenderStarted(workInProgress);\n  }\n  let newChildren;\n  if (__DEV__) {\n    ReactCurrentOwner.current = workInProgress;\n    setIsRendering(true);\n    newChildren = render(newValue);\n    setIsRendering(false);\n  } else {\n    newChildren = render(newValue);\n  }\n  if (enableSchedulingProfiler) {\n    markComponentRenderStopped();\n  }\n\n  // React DevTools reads this flag.\n  workInProgress.flags |= PerformedWork;\n  reconcileChildren(current, workInProgress, newChildren, renderLanes);\n  return workInProgress.child;\n}\n\nfunction updateScopeComponent(current, workInProgress, renderLanes) {\n  const nextProps = workInProgress.pendingProps;\n  const nextChildren = nextProps.children;\n\n  reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n  return workInProgress.child;\n}\n\nexport function markWorkInProgressReceivedUpdate() {\n  didReceiveUpdate = true;\n}\n\nexport function checkIfWorkInProgressReceivedUpdate() {\n  return didReceiveUpdate;\n}\n\nfunction bailoutOnAlreadyFinishedWork(\n  current: Fiber | null,\n  workInProgress: Fiber,\n  renderLanes: Lanes,\n): Fiber | null {\n  if (current !== null) {\n    // Reuse previous dependencies\n    workInProgress.dependencies = current.dependencies;\n  }\n\n  if (enableProfilerTimer) {\n    // Don't update \"base\" render times for bailouts.\n    stopProfilerTimerIfRunning(workInProgress);\n  }\n\n  markSkippedUpdateLanes(workInProgress.lanes);\n\n  // Check if the children have any pending work.\n  if (!includesSomeLane(renderLanes, workInProgress.childLanes)) {\n    // The children don't have any work either. We can skip them.\n    // TODO: Once we add back resuming, we should check if the children are\n    // a work-in-progress set. If so, we need to transfer their effects.\n\n    if (enableLazyContextPropagation && current !== null) {\n      // Before bailing out, check if there are any context changes in\n      // the children.\n      lazilyPropagateParentContextChanges(current, workInProgress, renderLanes);\n      if (!includesSomeLane(renderLanes, workInProgress.childLanes)) {\n        return null;\n      }\n    } else {\n      return null;\n    }\n  }\n\n  // This fiber doesn't have work, but its subtree does. Clone the child\n  // fibers and continue.\n  cloneChildFibers(current, workInProgress);\n  return workInProgress.child;\n}\n\nfunction remountFiber(\n  current: Fiber,\n  oldWorkInProgress: Fiber,\n  newWorkInProgress: Fiber,\n): Fiber | null {\n  if (__DEV__) {\n    const returnFiber = oldWorkInProgress.return;\n    if (returnFiber === null) {\n      throw new Error('Cannot swap the root fiber.');\n    }\n\n    // Disconnect from the old current.\n    // It will get deleted.\n    current.alternate = null;\n    oldWorkInProgress.alternate = null;\n\n    // Connect to the new tree.\n    newWorkInProgress.index = oldWorkInProgress.index;\n    newWorkInProgress.sibling = oldWorkInProgress.sibling;\n    newWorkInProgress.return = oldWorkInProgress.return;\n    newWorkInProgress.ref = oldWorkInProgress.ref;\n\n    // Replace the child/sibling pointers above it.\n    if (oldWorkInProgress === returnFiber.child) {\n      returnFiber.child = newWorkInProgress;\n    } else {\n      let prevSibling = returnFiber.child;\n      if (prevSibling === null) {\n        throw new Error('Expected parent to have a child.');\n      }\n      while (prevSibling.sibling !== oldWorkInProgress) {\n        prevSibling = prevSibling.sibling;\n        if (prevSibling === null) {\n          throw new Error('Expected to find the previous sibling.');\n        }\n      }\n      prevSibling.sibling = newWorkInProgress;\n    }\n\n    // Delete the old fiber and place the new one.\n    // Since the old fiber is disconnected, we have to schedule it manually.\n    const deletions = returnFiber.deletions;\n    if (deletions === null) {\n      returnFiber.deletions = [current];\n      returnFiber.flags |= ChildDeletion;\n    } else {\n      deletions.push(current);\n    }\n\n    newWorkInProgress.flags |= Placement;\n\n    // Restart work from the new fiber.\n    return newWorkInProgress;\n  } else {\n    throw new Error(\n      'Did not expect this call in production. ' +\n        'This is a bug in React. Please file an issue.',\n    );\n  }\n}\n\nfunction checkScheduledUpdateOrContext(\n  current: Fiber,\n  renderLanes: Lanes,\n): boolean {\n  // Before performing an early bailout, we must check if there are pending\n  // updates or context.\n  const updateLanes = current.lanes;\n  if (includesSomeLane(updateLanes, renderLanes)) {\n    return true;\n  }\n  // No pending update, but because context is propagated lazily, we need\n  // to check for a context change before we bail out.\n  if (enableLazyContextPropagation) {\n    const dependencies = current.dependencies;\n    if (dependencies !== null && checkIfContextChanged(dependencies)) {\n      return true;\n    }\n  }\n  return false;\n}\n\nfunction attemptEarlyBailoutIfNoScheduledUpdate(\n  current: Fiber,\n  workInProgress: Fiber,\n  renderLanes: Lanes,\n) {\n  // This fiber does not have any pending work. Bailout without entering\n  // the begin phase. There's still some bookkeeping we that needs to be done\n  // in this optimized path, mostly pushing stuff onto the stack.\n  switch (workInProgress.tag) {\n    case HostRoot:\n      pushHostRootContext(workInProgress);\n      if (enableCache) {\n        const root: FiberRoot = workInProgress.stateNode;\n        const cache: Cache = current.memoizedState.cache;\n        pushCacheProvider(workInProgress, cache);\n        pushRootCachePool(root);\n      }\n      resetHydrationState();\n      break;\n    case HostComponent:\n      pushHostContext(workInProgress);\n      break;\n    case ClassComponent: {\n      const Component = workInProgress.type;\n      if (isLegacyContextProvider(Component)) {\n        pushLegacyContextProvider(workInProgress);\n      }\n      break;\n    }\n    case HostPortal:\n      pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);\n      break;\n    case ContextProvider: {\n      const newValue = workInProgress.memoizedProps.value;\n      const context: ReactContext<any> = workInProgress.type._context;\n      pushProvider(workInProgress, context, newValue);\n      break;\n    }\n    case Profiler:\n      if (enableProfilerTimer) {\n        // Profiler should only call onRender when one of its descendants actually rendered.\n        const hasChildWork = includesSomeLane(\n          renderLanes,\n          workInProgress.childLanes,\n        );\n        if (hasChildWork) {\n          workInProgress.flags |= Update;\n        }\n\n        if (enableProfilerCommitHooks) {\n          // Reset effect durations for the next eventual effect phase.\n          // These are reset during render to allow the DevTools commit hook a chance to read them,\n          const stateNode = workInProgress.stateNode;\n          stateNode.effectDuration = 0;\n          stateNode.passiveEffectDuration = 0;\n        }\n      }\n      break;\n    case SuspenseComponent: {\n      const state: SuspenseState | null = workInProgress.memoizedState;\n      if (state !== null) {\n        if (enableSuspenseServerRenderer) {\n          if (state.dehydrated !== null) {\n            pushSuspenseContext(\n              workInProgress,\n              setDefaultShallowSuspenseContext(suspenseStackCursor.current),\n            );\n            // We know that this component will suspend again because if it has\n            // been unsuspended it has committed as a resolved Suspense component.\n            // If it needs to be retried, it should have work scheduled on it.\n            workInProgress.flags |= DidCapture;\n            // We should never render the children of a dehydrated boundary until we\n            // upgrade it. We return null instead of bailoutOnAlreadyFinishedWork.\n            return null;\n          }\n        }\n\n        // If this boundary is currently timed out, we need to decide\n        // whether to retry the primary children, or to skip over it and\n        // go straight to the fallback. Check the priority of the primary\n        // child fragment.\n        const primaryChildFragment: Fiber = (workInProgress.child: any);\n        const primaryChildLanes = primaryChildFragment.childLanes;\n        if (includesSomeLane(renderLanes, primaryChildLanes)) {\n          // The primary children have pending work. Use the normal path\n          // to attempt to render the primary children again.\n          return updateSuspenseComponent(current, workInProgress, renderLanes);\n        } else {\n          // The primary child fragment does not have pending work marked\n          // on it\n          pushSuspenseContext(\n            workInProgress,\n            setDefaultShallowSuspenseContext(suspenseStackCursor.current),\n          );\n          // The primary children do not have pending work with sufficient\n          // priority. Bailout.\n          const child = bailoutOnAlreadyFinishedWork(\n            current,\n            workInProgress,\n            renderLanes,\n          );\n          if (child !== null) {\n            // The fallback children have pending work. Skip over the\n            // primary children and work on the fallback.\n            return child.sibling;\n          } else {\n            // Note: We can return `null` here because we already checked\n            // whether there were nested context consumers, via the call to\n            // `bailoutOnAlreadyFinishedWork` above.\n            return null;\n          }\n        }\n      } else {\n        pushSuspenseContext(\n          workInProgress,\n          setDefaultShallowSuspenseContext(suspenseStackCursor.current),\n        );\n      }\n      break;\n    }\n    case SuspenseListComponent: {\n      const didSuspendBefore = (current.flags & DidCapture) !== NoFlags;\n\n      let hasChildWork = includesSomeLane(\n        renderLanes,\n        workInProgress.childLanes,\n      );\n\n      if (enableLazyContextPropagation && !hasChildWork) {\n        // Context changes may not have been propagated yet. We need to do\n        // that now, before we can decide whether to bail out.\n        // TODO: We use `childLanes` as a heuristic for whether there is\n        // remaining work in a few places, including\n        // `bailoutOnAlreadyFinishedWork` and\n        // `updateDehydratedSuspenseComponent`. We should maybe extract this\n        // into a dedicated function.\n        lazilyPropagateParentContextChanges(\n          current,\n          workInProgress,\n          renderLanes,\n        );\n        hasChildWork = includesSomeLane(renderLanes, workInProgress.childLanes);\n      }\n\n      if (didSuspendBefore) {\n        if (hasChildWork) {\n          // If something was in fallback state last time, and we have all the\n          // same children then we're still in progressive loading state.\n          // Something might get unblocked by state updates or retries in the\n          // tree which will affect the tail. So we need to use the normal\n          // path to compute the correct tail.\n          return updateSuspenseListComponent(\n            current,\n            workInProgress,\n            renderLanes,\n          );\n        }\n        // If none of the children had any work, that means that none of\n        // them got retried so they'll still be blocked in the same way\n        // as before. We can fast bail out.\n        workInProgress.flags |= DidCapture;\n      }\n\n      // If nothing suspended before and we're rendering the same children,\n      // then the tail doesn't matter. Anything new that suspends will work\n      // in the \"together\" mode, so we can continue from the state we had.\n      const renderState = workInProgress.memoizedState;\n      if (renderState !== null) {\n        // Reset to the \"together\" mode in case we've started a different\n        // update in the past but didn't complete it.\n        renderState.rendering = null;\n        renderState.tail = null;\n        renderState.lastEffect = null;\n      }\n      pushSuspenseContext(workInProgress, suspenseStackCursor.current);\n\n      if (hasChildWork) {\n        break;\n      } else {\n        // If none of the children had any work, that means that none of\n        // them got retried so they'll still be blocked in the same way\n        // as before. We can fast bail out.\n        return null;\n      }\n    }\n    case OffscreenComponent:\n    case LegacyHiddenComponent: {\n      // Need to check if the tree still needs to be deferred. This is\n      // almost identical to the logic used in the normal update path,\n      // so we'll just enter that. The only difference is we'll bail out\n      // at the next level instead of this one, because the child props\n      // have not changed. Which is fine.\n      // TODO: Probably should refactor `beginWork` to split the bailout\n      // path from the normal path. I'm tempted to do a labeled break here\n      // but I won't :)\n      workInProgress.lanes = NoLanes;\n      return updateOffscreenComponent(current, workInProgress, renderLanes);\n    }\n    case CacheComponent: {\n      if (enableCache) {\n        const cache: Cache = current.memoizedState.cache;\n        pushCacheProvider(workInProgress, cache);\n      }\n      break;\n    }\n  }\n  return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);\n}\n\nfunction beginWork(\n  current: Fiber | null,\n  workInProgress: Fiber,\n  renderLanes: Lanes,\n): Fiber | null {\n  if (__DEV__) {\n    if (workInProgress._debugNeedsRemount && current !== null) {\n      // This will restart the begin phase with a new fiber.\n      return remountFiber(\n        current,\n        workInProgress,\n        createFiberFromTypeAndProps(\n          workInProgress.type,\n          workInProgress.key,\n          workInProgress.pendingProps,\n          workInProgress._debugOwner || null,\n          workInProgress.mode,\n          workInProgress.lanes,\n        ),\n      );\n    }\n  }\n\n  if (current !== null) {\n    const oldProps = current.memoizedProps;\n    const newProps = workInProgress.pendingProps;\n\n    if (\n      oldProps !== newProps ||\n      hasLegacyContextChanged() ||\n      // Force a re-render if the implementation changed due to hot reload:\n      (__DEV__ ? workInProgress.type !== current.type : false)\n    ) {\n      // If props or context changed, mark the fiber as having performed work.\n      // This may be unset if the props are determined to be equal later (memo).\n      didReceiveUpdate = true;\n    } else {\n      // Neither props nor legacy context changes. Check if there's a pending\n      // update or context change.\n      const hasScheduledUpdateOrContext = checkScheduledUpdateOrContext(\n        current,\n        renderLanes,\n      );\n      if (\n        !hasScheduledUpdateOrContext &&\n        // If this is the second pass of an error or suspense boundary, there\n        // may not be work scheduled on `current`, so we check for this flag.\n        (workInProgress.flags & DidCapture) === NoFlags\n      ) {\n        // No pending updates or context. Bail out now.\n        didReceiveUpdate = false;\n        return attemptEarlyBailoutIfNoScheduledUpdate(\n          current,\n          workInProgress,\n          renderLanes,\n        );\n      }\n      if ((current.flags & ForceUpdateForLegacySuspense) !== NoFlags) {\n        // This is a special case that only exists for legacy mode.\n        // See https://github.com/facebook/react/pull/19216.\n        didReceiveUpdate = true;\n      } else {\n        // An update was scheduled on this fiber, but there are no new props\n        // nor legacy context. Set this to false. If an update queue or context\n        // consumer produces a changed value, it will set this to true. Otherwise,\n        // the component will assume the children have not changed and bail out.\n        didReceiveUpdate = false;\n      }\n    }\n  } else {\n    didReceiveUpdate = false;\n  }\n\n  // Before entering the begin phase, clear pending update priority.\n  // TODO: This assumes that we're about to evaluate the component and process\n  // the update queue. However, there's an exception: SimpleMemoComponent\n  // sometimes bails out later in the begin phase. This indicates that we should\n  // move this assignment out of the common path and into each branch.\n  workInProgress.lanes = NoLanes;\n\n  switch (workInProgress.tag) {\n    case IndeterminateComponent: {\n      return mountIndeterminateComponent(\n        current,\n        workInProgress,\n        workInProgress.type,\n        renderLanes,\n      );\n    }\n    case LazyComponent: {\n      const elementType = workInProgress.elementType;\n      return mountLazyComponent(\n        current,\n        workInProgress,\n        elementType,\n        renderLanes,\n      );\n    }\n    case FunctionComponent: {\n      const Component = workInProgress.type;\n      const unresolvedProps = workInProgress.pendingProps;\n      const resolvedProps =\n        workInProgress.elementType === Component\n          ? unresolvedProps\n          : resolveDefaultProps(Component, unresolvedProps);\n      return updateFunctionComponent(\n        current,\n        workInProgress,\n        Component,\n        resolvedProps,\n        renderLanes,\n      );\n    }\n    case ClassComponent: {\n      const Component = workInProgress.type;\n      const unresolvedProps = workInProgress.pendingProps;\n      const resolvedProps =\n        workInProgress.elementType === Component\n          ? unresolvedProps\n          : resolveDefaultProps(Component, unresolvedProps);\n      return updateClassComponent(\n        current,\n        workInProgress,\n        Component,\n        resolvedProps,\n        renderLanes,\n      );\n    }\n    case HostRoot:\n      return updateHostRoot(current, workInProgress, renderLanes);\n    case HostComponent:\n      return updateHostComponent(current, workInProgress, renderLanes);\n    case HostText:\n      return updateHostText(current, workInProgress);\n    case SuspenseComponent:\n      return updateSuspenseComponent(current, workInProgress, renderLanes);\n    case HostPortal:\n      return updatePortalComponent(current, workInProgress, renderLanes);\n    case ForwardRef: {\n      const type = workInProgress.type;\n      const unresolvedProps = workInProgress.pendingProps;\n      const resolvedProps =\n        workInProgress.elementType === type\n          ? unresolvedProps\n          : resolveDefaultProps(type, unresolvedProps);\n      return updateForwardRef(\n        current,\n        workInProgress,\n        type,\n        resolvedProps,\n        renderLanes,\n      );\n    }\n    case Fragment:\n      return updateFragment(current, workInProgress, renderLanes);\n    case Mode:\n      return updateMode(current, workInProgress, renderLanes);\n    case Profiler:\n      return updateProfiler(current, workInProgress, renderLanes);\n    case ContextProvider:\n      return updateContextProvider(current, workInProgress, renderLanes);\n    case ContextConsumer:\n      return updateContextConsumer(current, workInProgress, renderLanes);\n    case MemoComponent: {\n      const type = workInProgress.type;\n      const unresolvedProps = workInProgress.pendingProps;\n      // Resolve outer props first, then resolve inner props.\n      let resolvedProps = resolveDefaultProps(type, unresolvedProps);\n      if (__DEV__) {\n        if (workInProgress.type !== workInProgress.elementType) {\n          const outerPropTypes = type.propTypes;\n          if (outerPropTypes) {\n            checkPropTypes(\n              outerPropTypes,\n              resolvedProps, // Resolved for outer only\n              'prop',\n              getComponentNameFromType(type),\n            );\n          }\n        }\n      }\n      resolvedProps = resolveDefaultProps(type.type, resolvedProps);\n      return updateMemoComponent(\n        current,\n        workInProgress,\n        type,\n        resolvedProps,\n        renderLanes,\n      );\n    }\n    case SimpleMemoComponent: {\n      return updateSimpleMemoComponent(\n        current,\n        workInProgress,\n        workInProgress.type,\n        workInProgress.pendingProps,\n        renderLanes,\n      );\n    }\n    case IncompleteClassComponent: {\n      const Component = workInProgress.type;\n      const unresolvedProps = workInProgress.pendingProps;\n      const resolvedProps =\n        workInProgress.elementType === Component\n          ? unresolvedProps\n          : resolveDefaultProps(Component, unresolvedProps);\n      return mountIncompleteClassComponent(\n        current,\n        workInProgress,\n        Component,\n        resolvedProps,\n        renderLanes,\n      );\n    }\n    case SuspenseListComponent: {\n      return updateSuspenseListComponent(current, workInProgress, renderLanes);\n    }\n    case ScopeComponent: {\n      if (enableScopeAPI) {\n        return updateScopeComponent(current, workInProgress, renderLanes);\n      }\n      break;\n    }\n    case OffscreenComponent: {\n      return updateOffscreenComponent(current, workInProgress, renderLanes);\n    }\n    case LegacyHiddenComponent: {\n      return updateLegacyHiddenComponent(current, workInProgress, renderLanes);\n    }\n    case CacheComponent: {\n      if (enableCache) {\n        return updateCacheComponent(current, workInProgress, renderLanes);\n      }\n      break;\n    }\n  }\n  invariant(\n    false,\n    'Unknown unit of work tag (%s). This error is likely caused by a bug in ' +\n      'React. Please file an issue.',\n    workInProgress.tag,\n  );\n}\n\nexport {beginWork};\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {ReactContext} from 'shared/ReactTypes';\nimport type {Fiber, FiberRoot} from './ReactInternalTypes';\nimport type {Lanes} from './ReactFiberLane.old';\nimport type {SuspenseState} from './ReactFiberSuspenseComponent.old';\nimport type {Cache, SpawnedCachePool} from './ReactFiberCacheComponent.old';\n\nimport {resetWorkInProgressVersions as resetMutableSourceWorkInProgressVersions} from './ReactMutableSource.old';\nimport {\n  ClassComponent,\n  HostRoot,\n  HostComponent,\n  HostPortal,\n  ContextProvider,\n  SuspenseComponent,\n  SuspenseListComponent,\n  OffscreenComponent,\n  LegacyHiddenComponent,\n  CacheComponent,\n} from './ReactWorkTags';\nimport {DidCapture, NoFlags, ShouldCapture} from './ReactFiberFlags';\nimport {NoMode, ProfileMode} from './ReactTypeOfMode';\nimport {\n  enableSuspenseServerRenderer,\n  enableProfilerTimer,\n  enableCache,\n} from 'shared/ReactFeatureFlags';\n\nimport {popHostContainer, popHostContext} from './ReactFiberHostContext.old';\nimport {popSuspenseContext} from './ReactFiberSuspenseContext.old';\nimport {resetHydrationState} from './ReactFiberHydrationContext.old';\nimport {\n  isContextProvider as isLegacyContextProvider,\n  popContext as popLegacyContext,\n  popTopLevelContextObject as popTopLevelLegacyContextObject,\n} from './ReactFiberContext.old';\nimport {popProvider} from './ReactFiberNewContext.old';\nimport {popRenderLanes} from './ReactFiberWorkLoop.old';\nimport {\n  popCacheProvider,\n  popRootCachePool,\n  popCachePool,\n} from './ReactFiberCacheComponent.old';\nimport {transferActualDuration} from './ReactProfilerTimer.old';\n\nimport invariant from 'shared/invariant';\n\nfunction unwindWork(workInProgress: Fiber, renderLanes: Lanes) {\n  switch (workInProgress.tag) {\n    case ClassComponent: {\n      const Component = workInProgress.type;\n      if (isLegacyContextProvider(Component)) {\n        popLegacyContext(workInProgress);\n      }\n      const flags = workInProgress.flags;\n      if (flags & ShouldCapture) {\n        workInProgress.flags = (flags & ~ShouldCapture) | DidCapture;\n        if (\n          enableProfilerTimer &&\n          (workInProgress.mode & ProfileMode) !== NoMode\n        ) {\n          transferActualDuration(workInProgress);\n        }\n        return workInProgress;\n      }\n      return null;\n    }\n    case HostRoot: {\n      if (enableCache) {\n        const root: FiberRoot = workInProgress.stateNode;\n        popRootCachePool(root, renderLanes);\n\n        const cache: Cache = workInProgress.memoizedState.cache;\n        popCacheProvider(workInProgress, cache);\n      }\n      popHostContainer(workInProgress);\n      popTopLevelLegacyContextObject(workInProgress);\n      resetMutableSourceWorkInProgressVersions();\n      const flags = workInProgress.flags;\n      invariant(\n        (flags & DidCapture) === NoFlags,\n        'The root failed to unmount after an error. This is likely a bug in ' +\n          'React. Please file an issue.',\n      );\n      workInProgress.flags = (flags & ~ShouldCapture) | DidCapture;\n      return workInProgress;\n    }\n    case HostComponent: {\n      // TODO: popHydrationState\n      popHostContext(workInProgress);\n      return null;\n    }\n    case SuspenseComponent: {\n      popSuspenseContext(workInProgress);\n      if (enableSuspenseServerRenderer) {\n        const suspenseState: null | SuspenseState =\n          workInProgress.memoizedState;\n        if (suspenseState !== null && suspenseState.dehydrated !== null) {\n          invariant(\n            workInProgress.alternate !== null,\n            'Threw in newly mounted dehydrated component. This is likely a bug in ' +\n              'React. Please file an issue.',\n          );\n          resetHydrationState();\n        }\n      }\n      const flags = workInProgress.flags;\n      if (flags & ShouldCapture) {\n        workInProgress.flags = (flags & ~ShouldCapture) | DidCapture;\n        // Captured a suspense effect. Re-render the boundary.\n        if (\n          enableProfilerTimer &&\n          (workInProgress.mode & ProfileMode) !== NoMode\n        ) {\n          transferActualDuration(workInProgress);\n        }\n        return workInProgress;\n      }\n      return null;\n    }\n    case SuspenseListComponent: {\n      popSuspenseContext(workInProgress);\n      // SuspenseList doesn't actually catch anything. It should've been\n      // caught by a nested boundary. If not, it should bubble through.\n      return null;\n    }\n    case HostPortal:\n      popHostContainer(workInProgress);\n      return null;\n    case ContextProvider:\n      const context: ReactContext<any> = workInProgress.type._context;\n      popProvider(context, workInProgress);\n      return null;\n    case OffscreenComponent:\n    case LegacyHiddenComponent:\n      popRenderLanes(workInProgress);\n      if (enableCache) {\n        const spawnedCachePool: SpawnedCachePool | null = (workInProgress.updateQueue: any);\n        if (spawnedCachePool !== null) {\n          popCachePool(workInProgress);\n        }\n      }\n      return null;\n    case CacheComponent:\n      if (enableCache) {\n        const cache: Cache = workInProgress.memoizedState.cache;\n        popCacheProvider(workInProgress, cache);\n      }\n      return null;\n    default:\n      return null;\n  }\n}\n\nfunction unwindInterruptedWork(interruptedWork: Fiber, renderLanes: Lanes) {\n  switch (interruptedWork.tag) {\n    case ClassComponent: {\n      const childContextTypes = interruptedWork.type.childContextTypes;\n      if (childContextTypes !== null && childContextTypes !== undefined) {\n        popLegacyContext(interruptedWork);\n      }\n      break;\n    }\n    case HostRoot: {\n      if (enableCache) {\n        const root: FiberRoot = interruptedWork.stateNode;\n        popRootCachePool(root, renderLanes);\n\n        const cache: Cache = interruptedWork.memoizedState.cache;\n        popCacheProvider(interruptedWork, cache);\n      }\n      popHostContainer(interruptedWork);\n      popTopLevelLegacyContextObject(interruptedWork);\n      resetMutableSourceWorkInProgressVersions();\n      break;\n    }\n    case HostComponent: {\n      popHostContext(interruptedWork);\n      break;\n    }\n    case HostPortal:\n      popHostContainer(interruptedWork);\n      break;\n    case SuspenseComponent:\n      popSuspenseContext(interruptedWork);\n      break;\n    case SuspenseListComponent:\n      popSuspenseContext(interruptedWork);\n      break;\n    case ContextProvider:\n      const context: ReactContext<any> = interruptedWork.type._context;\n      popProvider(context, interruptedWork);\n      break;\n    case OffscreenComponent:\n    case LegacyHiddenComponent:\n      popRenderLanes(interruptedWork);\n      if (enableCache) {\n        const spawnedCachePool: SpawnedCachePool | null = (interruptedWork.updateQueue: any);\n        if (spawnedCachePool !== null) {\n          popCachePool(interruptedWork);\n        }\n      }\n\n      break;\n    case CacheComponent:\n      if (enableCache) {\n        const cache: Cache = interruptedWork.memoizedState.cache;\n        popCacheProvider(interruptedWork, cache);\n      }\n      break;\n    default:\n      break;\n  }\n}\n\nexport {unwindWork, unwindInterruptedWork};\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport invariant from 'shared/invariant';\n\n// Provided by www\nconst ReactFbErrorUtils = require('ReactFbErrorUtils');\ninvariant(\n  typeof ReactFbErrorUtils.invokeGuardedCallback === 'function',\n  'Expected ReactFbErrorUtils.invokeGuardedCallback to be a function.',\n);\n\nconst invokeGuardedCallbackImpl = function<A, B, C, D, E, F, Context>(\n  name: string | null,\n  func: (a: A, b: B, c: C, d: D, e: E, f: F) => mixed,\n  context: Context,\n  a: A,\n  b: B,\n  c: C,\n  d: D,\n  e: E,\n  f: F,\n) {\n  // This will call `this.onError(err)` if an error was caught.\n  ReactFbErrorUtils.invokeGuardedCallback.apply(this, arguments);\n};\n\nexport default invokeGuardedCallbackImpl;\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport invariant from 'shared/invariant';\nimport invokeGuardedCallbackImpl from './invokeGuardedCallbackImpl';\n\n// Used by Fiber to simulate a try-catch.\nlet hasError: boolean = false;\nlet caughtError: mixed = null;\n\n// Used by event system to capture/rethrow the first error.\nlet hasRethrowError: boolean = false;\nlet rethrowError: mixed = null;\n\nconst reporter = {\n  onError(error: mixed) {\n    hasError = true;\n    caughtError = error;\n  },\n};\n\n/**\n * Call a function while guarding against errors that happens within it.\n * Returns an error if it throws, otherwise null.\n *\n * In production, this is implemented using a try-catch. The reason we don't\n * use a try-catch directly is so that we can swap out a different\n * implementation in DEV mode.\n *\n * @param {String} name of the guard to use for logging or debugging\n * @param {Function} func The function to invoke\n * @param {*} context The context to use when calling the function\n * @param {...*} args Arguments for function\n */\nexport function invokeGuardedCallback<A, B, C, D, E, F, Context>(\n  name: string | null,\n  func: (a: A, b: B, c: C, d: D, e: E, f: F) => mixed,\n  context: Context,\n  a: A,\n  b: B,\n  c: C,\n  d: D,\n  e: E,\n  f: F,\n): void {\n  hasError = false;\n  caughtError = null;\n  invokeGuardedCallbackImpl.apply(reporter, arguments);\n}\n\n/**\n * Same as invokeGuardedCallback, but instead of returning an error, it stores\n * it in a global so it can be rethrown by `rethrowCaughtError` later.\n * TODO: See if caughtError and rethrowError can be unified.\n *\n * @param {String} name of the guard to use for logging or debugging\n * @param {Function} func The function to invoke\n * @param {*} context The context to use when calling the function\n * @param {...*} args Arguments for function\n */\nexport function invokeGuardedCallbackAndCatchFirstError<\n  A,\n  B,\n  C,\n  D,\n  E,\n  F,\n  Context,\n>(\n  name: string | null,\n  func: (a: A, b: B, c: C, d: D, e: E, f: F) => void,\n  context: Context,\n  a: A,\n  b: B,\n  c: C,\n  d: D,\n  e: E,\n  f: F,\n): void {\n  invokeGuardedCallback.apply(this, arguments);\n  if (hasError) {\n    const error = clearCaughtError();\n    if (!hasRethrowError) {\n      hasRethrowError = true;\n      rethrowError = error;\n    }\n  }\n}\n\n/**\n * During execution of guarded functions we will capture the first error which\n * we will rethrow to be handled by the top level error handler.\n */\nexport function rethrowCaughtError() {\n  if (hasRethrowError) {\n    const error = rethrowError;\n    hasRethrowError = false;\n    rethrowError = null;\n    throw error;\n  }\n}\n\nexport function hasCaughtError() {\n  return hasError;\n}\n\nexport function clearCaughtError() {\n  if (hasError) {\n    const error = caughtError;\n    hasError = false;\n    caughtError = null;\n    return error;\n  } else {\n    invariant(\n      false,\n      'clearCaughtError was called but no error was captured. This error ' +\n        'is likely caused by a bug in React. Please file an issue.',\n    );\n  }\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {\n  Instance,\n  TextInstance,\n  SuspenseInstance,\n  Container,\n  ChildSet,\n  UpdatePayload,\n} from './ReactFiberHostConfig';\nimport type {Fiber} from './ReactInternalTypes';\nimport type {FiberRoot} from './ReactInternalTypes';\nimport type {Lanes} from './ReactFiberLane.old';\nimport type {SuspenseState} from './ReactFiberSuspenseComponent.old';\nimport type {UpdateQueue} from './ReactUpdateQueue.old';\nimport type {FunctionComponentUpdateQueue} from './ReactFiberHooks.old';\nimport type {Wakeable} from 'shared/ReactTypes';\nimport type {OffscreenState} from './ReactFiberOffscreenComponent';\nimport type {HookFlags} from './ReactHookEffectTags';\n\nimport {\n  enableCreateEventHandleAPI,\n  enableProfilerTimer,\n  enableProfilerCommitHooks,\n  enableProfilerNestedUpdatePhase,\n  enableSuspenseServerRenderer,\n  enableSuspenseCallback,\n  enableScopeAPI,\n  enableStrictEffects,\n  deletedTreeCleanUpLevel,\n  enableSuspenseLayoutEffectSemantics,\n  enableUpdaterTracking,\n} from 'shared/ReactFeatureFlags';\nimport {\n  FunctionComponent,\n  ForwardRef,\n  ClassComponent,\n  HostRoot,\n  HostComponent,\n  HostText,\n  HostPortal,\n  Profiler,\n  SuspenseComponent,\n  DehydratedFragment,\n  IncompleteClassComponent,\n  MemoComponent,\n  SimpleMemoComponent,\n  SuspenseListComponent,\n  ScopeComponent,\n  OffscreenComponent,\n  LegacyHiddenComponent,\n} from './ReactWorkTags';\nimport {detachDeletedInstance} from './ReactFiberHostConfig';\nimport {\n  NoFlags,\n  ContentReset,\n  Placement,\n  PlacementAndUpdate,\n  ChildDeletion,\n  Snapshot,\n  Update,\n  Ref,\n  Hydrating,\n  HydratingAndUpdate,\n  Passive,\n  BeforeMutationMask,\n  MutationMask,\n  LayoutMask,\n  PassiveMask,\n  Visibility,\n} from './ReactFiberFlags';\nimport getComponentNameFromFiber from 'react-reconciler/src/getComponentNameFromFiber';\nimport invariant from 'shared/invariant';\nimport {\n  resetCurrentFiber as resetCurrentDebugFiberInDEV,\n  setCurrentFiber as setCurrentDebugFiberInDEV,\n} from './ReactCurrentFiber';\nimport {isDevToolsPresent} from './ReactFiberDevToolsHook.old';\nimport {onCommitUnmount} from './ReactFiberDevToolsHook.old';\nimport {resolveDefaultProps} from './ReactFiberLazyComponent.old';\nimport {\n  isCurrentUpdateNested,\n  getCommitTime,\n  recordLayoutEffectDuration,\n  startLayoutEffectTimer,\n  recordPassiveEffectDuration,\n  startPassiveEffectTimer,\n} from './ReactProfilerTimer.old';\nimport {ConcurrentMode, NoMode, ProfileMode} from './ReactTypeOfMode';\nimport {commitUpdateQueue} from './ReactUpdateQueue.old';\nimport {\n  getPublicInstance,\n  supportsMutation,\n  supportsPersistence,\n  supportsHydration,\n  commitMount,\n  commitUpdate,\n  resetTextContent,\n  commitTextUpdate,\n  appendChild,\n  appendChildToContainer,\n  insertBefore,\n  insertInContainerBefore,\n  removeChild,\n  removeChildFromContainer,\n  clearSuspenseBoundary,\n  clearSuspenseBoundaryFromContainer,\n  replaceContainerChildren,\n  createContainerChildSet,\n  hideInstance,\n  hideTextInstance,\n  unhideInstance,\n  unhideTextInstance,\n  commitHydratedContainer,\n  commitHydratedSuspenseInstance,\n  clearContainer,\n  prepareScopeUpdate,\n  prepareForCommit,\n  beforeActiveInstanceBlur,\n} from './ReactFiberHostConfig';\nimport {\n  captureCommitPhaseError,\n  resolveRetryWakeable,\n  markCommitTimeOfFallback,\n  enqueuePendingPassiveProfilerEffect,\n  restorePendingUpdaters,\n} from './ReactFiberWorkLoop.old';\nimport {\n  NoFlags as NoHookEffect,\n  HasEffect as HookHasEffect,\n  Layout as HookLayout,\n  Passive as HookPassive,\n} from './ReactHookEffectTags';\nimport {didWarnAboutReassigningProps} from './ReactFiberBeginWork.old';\nimport {doesFiberContain} from './ReactFiberTreeReflection';\nimport {invokeGuardedCallback, clearCaughtError} from 'shared/ReactErrorUtils';\n\nlet didWarnAboutUndefinedSnapshotBeforeUpdate: Set<mixed> | null = null;\nif (__DEV__) {\n  didWarnAboutUndefinedSnapshotBeforeUpdate = new Set();\n}\n\n// Used during the commit phase to track the state of the Offscreen component stack.\n// Allows us to avoid traversing the return path to find the nearest Offscreen ancestor.\n// Only used when enableSuspenseLayoutEffectSemantics is enabled.\nlet offscreenSubtreeIsHidden: boolean = false;\nlet offscreenSubtreeWasHidden: boolean = false;\n\nconst PossiblyWeakSet = typeof WeakSet === 'function' ? WeakSet : Set;\n\nlet nextEffect: Fiber | null = null;\n\n// Used for Profiling builds to track updaters.\nlet inProgressLanes: Lanes | null = null;\nlet inProgressRoot: FiberRoot | null = null;\n\nfunction reportUncaughtErrorInDEV(error) {\n  // Wrapping each small part of the commit phase into a guarded\n  // callback is a bit too slow (https://github.com/facebook/react/pull/21666).\n  // But we rely on it to surface errors to DEV tools like overlays\n  // (https://github.com/facebook/react/issues/21712).\n  // As a compromise, rethrow only caught errors in a guard.\n  if (__DEV__) {\n    invokeGuardedCallback(null, () => {\n      throw error;\n    });\n    clearCaughtError();\n  }\n}\n\nconst callComponentWillUnmountWithTimer = function(current, instance) {\n  instance.props = current.memoizedProps;\n  instance.state = current.memoizedState;\n  if (\n    enableProfilerTimer &&\n    enableProfilerCommitHooks &&\n    current.mode & ProfileMode\n  ) {\n    try {\n      startLayoutEffectTimer();\n      instance.componentWillUnmount();\n    } finally {\n      recordLayoutEffectDuration(current);\n    }\n  } else {\n    instance.componentWillUnmount();\n  }\n};\n\n// Capture errors so they don't interrupt mounting.\nfunction safelyCallCommitHookLayoutEffectListMount(\n  current: Fiber,\n  nearestMountedAncestor: Fiber | null,\n) {\n  try {\n    commitHookEffectListMount(HookLayout, current);\n  } catch (error) {\n    reportUncaughtErrorInDEV(error);\n    captureCommitPhaseError(current, nearestMountedAncestor, error);\n  }\n}\n\n// Capture errors so they don't interrupt unmounting.\nfunction safelyCallComponentWillUnmount(\n  current: Fiber,\n  nearestMountedAncestor: Fiber | null,\n  instance: any,\n) {\n  try {\n    callComponentWillUnmountWithTimer(current, instance);\n  } catch (error) {\n    reportUncaughtErrorInDEV(error);\n    captureCommitPhaseError(current, nearestMountedAncestor, error);\n  }\n}\n\n// Capture errors so they don't interrupt mounting.\nfunction safelyCallComponentDidMount(\n  current: Fiber,\n  nearestMountedAncestor: Fiber | null,\n  instance: any,\n) {\n  try {\n    instance.componentDidMount();\n  } catch (error) {\n    reportUncaughtErrorInDEV(error);\n    captureCommitPhaseError(current, nearestMountedAncestor, error);\n  }\n}\n\n// Capture errors so they don't interrupt mounting.\nfunction safelyAttachRef(current: Fiber, nearestMountedAncestor: Fiber | null) {\n  try {\n    commitAttachRef(current);\n  } catch (error) {\n    reportUncaughtErrorInDEV(error);\n    captureCommitPhaseError(current, nearestMountedAncestor, error);\n  }\n}\n\nfunction safelyDetachRef(current: Fiber, nearestMountedAncestor: Fiber | null) {\n  const ref = current.ref;\n  if (ref !== null) {\n    if (typeof ref === 'function') {\n      try {\n        if (\n          enableProfilerTimer &&\n          enableProfilerCommitHooks &&\n          current.mode & ProfileMode\n        ) {\n          try {\n            startLayoutEffectTimer();\n            ref(null);\n          } finally {\n            recordLayoutEffectDuration(current);\n          }\n        } else {\n          ref(null);\n        }\n      } catch (error) {\n        reportUncaughtErrorInDEV(error);\n        captureCommitPhaseError(current, nearestMountedAncestor, error);\n      }\n    } else {\n      ref.current = null;\n    }\n  }\n}\n\nfunction safelyCallDestroy(\n  current: Fiber,\n  nearestMountedAncestor: Fiber | null,\n  destroy: () => void,\n) {\n  try {\n    destroy();\n  } catch (error) {\n    reportUncaughtErrorInDEV(error);\n    captureCommitPhaseError(current, nearestMountedAncestor, error);\n  }\n}\n\nlet focusedInstanceHandle: null | Fiber = null;\nlet shouldFireAfterActiveInstanceBlur: boolean = false;\n\nexport function commitBeforeMutationEffects(\n  root: FiberRoot,\n  firstChild: Fiber,\n) {\n  focusedInstanceHandle = prepareForCommit(root.containerInfo);\n\n  nextEffect = firstChild;\n  commitBeforeMutationEffects_begin();\n\n  // We no longer need to track the active instance fiber\n  const shouldFire = shouldFireAfterActiveInstanceBlur;\n  shouldFireAfterActiveInstanceBlur = false;\n  focusedInstanceHandle = null;\n\n  return shouldFire;\n}\n\nfunction commitBeforeMutationEffects_begin() {\n  while (nextEffect !== null) {\n    const fiber = nextEffect;\n\n    // This phase is only used for beforeActiveInstanceBlur.\n    // Let's skip the whole loop if it's off.\n    if (enableCreateEventHandleAPI) {\n      // TODO: Should wrap this in flags check, too, as optimization\n      const deletions = fiber.deletions;\n      if (deletions !== null) {\n        for (let i = 0; i < deletions.length; i++) {\n          const deletion = deletions[i];\n          commitBeforeMutationEffectsDeletion(deletion);\n        }\n      }\n    }\n\n    const child = fiber.child;\n    if (\n      (fiber.subtreeFlags & BeforeMutationMask) !== NoFlags &&\n      child !== null\n    ) {\n      ensureCorrectReturnPointer(child, fiber);\n      nextEffect = child;\n    } else {\n      commitBeforeMutationEffects_complete();\n    }\n  }\n}\n\nfunction commitBeforeMutationEffects_complete() {\n  while (nextEffect !== null) {\n    const fiber = nextEffect;\n    setCurrentDebugFiberInDEV(fiber);\n    try {\n      commitBeforeMutationEffectsOnFiber(fiber);\n    } catch (error) {\n      reportUncaughtErrorInDEV(error);\n      captureCommitPhaseError(fiber, fiber.return, error);\n    }\n    resetCurrentDebugFiberInDEV();\n\n    const sibling = fiber.sibling;\n    if (sibling !== null) {\n      ensureCorrectReturnPointer(sibling, fiber.return);\n      nextEffect = sibling;\n      return;\n    }\n\n    nextEffect = fiber.return;\n  }\n}\n\nfunction commitBeforeMutationEffectsOnFiber(finishedWork: Fiber) {\n  const current = finishedWork.alternate;\n  const flags = finishedWork.flags;\n\n  if (enableCreateEventHandleAPI) {\n    if (!shouldFireAfterActiveInstanceBlur && focusedInstanceHandle !== null) {\n      // Check to see if the focused element was inside of a hidden (Suspense) subtree.\n      // TODO: Move this out of the hot path using a dedicated effect tag.\n      if (\n        finishedWork.tag === SuspenseComponent &&\n        isSuspenseBoundaryBeingHidden(current, finishedWork) &&\n        doesFiberContain(finishedWork, focusedInstanceHandle)\n      ) {\n        shouldFireAfterActiveInstanceBlur = true;\n        beforeActiveInstanceBlur(finishedWork);\n      }\n    }\n  }\n\n  if ((flags & Snapshot) !== NoFlags) {\n    setCurrentDebugFiberInDEV(finishedWork);\n\n    switch (finishedWork.tag) {\n      case FunctionComponent:\n      case ForwardRef:\n      case SimpleMemoComponent: {\n        break;\n      }\n      case ClassComponent: {\n        if (current !== null) {\n          const prevProps = current.memoizedProps;\n          const prevState = current.memoizedState;\n          const instance = finishedWork.stateNode;\n          // We could update instance props and state here,\n          // but instead we rely on them being set during last render.\n          // TODO: revisit this when we implement resuming.\n          if (__DEV__) {\n            if (\n              finishedWork.type === finishedWork.elementType &&\n              !didWarnAboutReassigningProps\n            ) {\n              if (instance.props !== finishedWork.memoizedProps) {\n                console.error(\n                  'Expected %s props to match memoized props before ' +\n                    'getSnapshotBeforeUpdate. ' +\n                    'This might either be because of a bug in React, or because ' +\n                    'a component reassigns its own `this.props`. ' +\n                    'Please file an issue.',\n                  getComponentNameFromFiber(finishedWork) || 'instance',\n                );\n              }\n              if (instance.state !== finishedWork.memoizedState) {\n                console.error(\n                  'Expected %s state to match memoized state before ' +\n                    'getSnapshotBeforeUpdate. ' +\n                    'This might either be because of a bug in React, or because ' +\n                    'a component reassigns its own `this.state`. ' +\n                    'Please file an issue.',\n                  getComponentNameFromFiber(finishedWork) || 'instance',\n                );\n              }\n            }\n          }\n          const snapshot = instance.getSnapshotBeforeUpdate(\n            finishedWork.elementType === finishedWork.type\n              ? prevProps\n              : resolveDefaultProps(finishedWork.type, prevProps),\n            prevState,\n          );\n          if (__DEV__) {\n            const didWarnSet = ((didWarnAboutUndefinedSnapshotBeforeUpdate: any): Set<mixed>);\n            if (snapshot === undefined && !didWarnSet.has(finishedWork.type)) {\n              didWarnSet.add(finishedWork.type);\n              console.error(\n                '%s.getSnapshotBeforeUpdate(): A snapshot value (or null) ' +\n                  'must be returned. You have returned undefined.',\n                getComponentNameFromFiber(finishedWork),\n              );\n            }\n          }\n          instance.__reactInternalSnapshotBeforeUpdate = snapshot;\n        }\n        break;\n      }\n      case HostRoot: {\n        if (supportsMutation) {\n          const root = finishedWork.stateNode;\n          clearContainer(root.containerInfo);\n        }\n        break;\n      }\n      case HostComponent:\n      case HostText:\n      case HostPortal:\n      case IncompleteClassComponent:\n        // Nothing to do for these component types\n        break;\n      default: {\n        invariant(\n          false,\n          'This unit of work tag should not have side-effects. This error is ' +\n            'likely caused by a bug in React. Please file an issue.',\n        );\n      }\n    }\n\n    resetCurrentDebugFiberInDEV();\n  }\n}\n\nfunction commitBeforeMutationEffectsDeletion(deletion: Fiber) {\n  if (enableCreateEventHandleAPI) {\n    // TODO (effects) It would be nice to avoid calling doesFiberContain()\n    // Maybe we can repurpose one of the subtreeFlags positions for this instead?\n    // Use it to store which part of the tree the focused instance is in?\n    // This assumes we can safely determine that instance during the \"render\" phase.\n    if (doesFiberContain(deletion, ((focusedInstanceHandle: any): Fiber))) {\n      shouldFireAfterActiveInstanceBlur = true;\n      beforeActiveInstanceBlur(deletion);\n    }\n  }\n}\n\nfunction commitHookEffectListUnmount(\n  flags: HookFlags,\n  finishedWork: Fiber,\n  nearestMountedAncestor: Fiber | null,\n) {\n  const updateQueue: FunctionComponentUpdateQueue | null = (finishedWork.updateQueue: any);\n  const lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;\n  if (lastEffect !== null) {\n    const firstEffect = lastEffect.next;\n    let effect = firstEffect;\n    do {\n      if ((effect.tag & flags) === flags) {\n        // Unmount\n        const destroy = effect.destroy;\n        effect.destroy = undefined;\n        if (destroy !== undefined) {\n          safelyCallDestroy(finishedWork, nearestMountedAncestor, destroy);\n        }\n      }\n      effect = effect.next;\n    } while (effect !== firstEffect);\n  }\n}\n\nfunction commitHookEffectListMount(tag: number, finishedWork: Fiber) {\n  const updateQueue: FunctionComponentUpdateQueue | null = (finishedWork.updateQueue: any);\n  const lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;\n  if (lastEffect !== null) {\n    const firstEffect = lastEffect.next;\n    let effect = firstEffect;\n    do {\n      if ((effect.tag & tag) === tag) {\n        // Mount\n        const create = effect.create;\n        effect.destroy = create();\n\n        if (__DEV__) {\n          const destroy = effect.destroy;\n          if (destroy !== undefined && typeof destroy !== 'function') {\n            let addendum;\n            if (destroy === null) {\n              addendum =\n                ' You returned null. If your effect does not require clean ' +\n                'up, return undefined (or nothing).';\n            } else if (typeof destroy.then === 'function') {\n              addendum =\n                '\\n\\nIt looks like you wrote useEffect(async () => ...) or returned a Promise. ' +\n                'Instead, write the async function inside your effect ' +\n                'and call it immediately:\\n\\n' +\n                'useEffect(() => {\\n' +\n                '  async function fetchData() {\\n' +\n                '    // You can await here\\n' +\n                '    const response = await MyAPI.getData(someId);\\n' +\n                '    // ...\\n' +\n                '  }\\n' +\n                '  fetchData();\\n' +\n                `}, [someId]); // Or [] if effect doesn't need props or state\\n\\n` +\n                'Learn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching';\n            } else {\n              addendum = ' You returned: ' + destroy;\n            }\n            console.error(\n              'An effect function must not return anything besides a function, ' +\n                'which is used for clean-up.%s',\n              addendum,\n            );\n          }\n        }\n      }\n      effect = effect.next;\n    } while (effect !== firstEffect);\n  }\n}\n\nexport function commitPassiveEffectDurations(\n  finishedRoot: FiberRoot,\n  finishedWork: Fiber,\n): void {\n  if (enableProfilerTimer && enableProfilerCommitHooks) {\n    // Only Profilers with work in their subtree will have an Update effect scheduled.\n    if ((finishedWork.flags & Update) !== NoFlags) {\n      switch (finishedWork.tag) {\n        case Profiler: {\n          const {passiveEffectDuration} = finishedWork.stateNode;\n          const {id, onPostCommit} = finishedWork.memoizedProps;\n\n          // This value will still reflect the previous commit phase.\n          // It does not get reset until the start of the next commit phase.\n          const commitTime = getCommitTime();\n\n          let phase = finishedWork.alternate === null ? 'mount' : 'update';\n          if (enableProfilerNestedUpdatePhase) {\n            if (isCurrentUpdateNested()) {\n              phase = 'nested-update';\n            }\n          }\n\n          if (typeof onPostCommit === 'function') {\n            onPostCommit(id, phase, passiveEffectDuration, commitTime);\n          }\n\n          // Bubble times to the next nearest ancestor Profiler.\n          // After we process that Profiler, we'll bubble further up.\n          let parentFiber = finishedWork.return;\n          outer: while (parentFiber !== null) {\n            switch (parentFiber.tag) {\n              case HostRoot:\n                const root = parentFiber.stateNode;\n                root.passiveEffectDuration += passiveEffectDuration;\n                break outer;\n              case Profiler:\n                const parentStateNode = parentFiber.stateNode;\n                parentStateNode.passiveEffectDuration += passiveEffectDuration;\n                break outer;\n            }\n            parentFiber = parentFiber.return;\n          }\n          break;\n        }\n        default:\n          break;\n      }\n    }\n  }\n}\n\nfunction commitLayoutEffectOnFiber(\n  finishedRoot: FiberRoot,\n  current: Fiber | null,\n  finishedWork: Fiber,\n  committedLanes: Lanes,\n): void {\n  if ((finishedWork.flags & LayoutMask) !== NoFlags) {\n    switch (finishedWork.tag) {\n      case FunctionComponent:\n      case ForwardRef:\n      case SimpleMemoComponent: {\n        if (\n          !enableSuspenseLayoutEffectSemantics ||\n          !offscreenSubtreeWasHidden\n        ) {\n          // At this point layout effects have already been destroyed (during mutation phase).\n          // This is done to prevent sibling component effects from interfering with each other,\n          // e.g. a destroy function in one component should never override a ref set\n          // by a create function in another component during the same commit.\n          if (\n            enableProfilerTimer &&\n            enableProfilerCommitHooks &&\n            finishedWork.mode & ProfileMode\n          ) {\n            try {\n              startLayoutEffectTimer();\n              commitHookEffectListMount(\n                HookLayout | HookHasEffect,\n                finishedWork,\n              );\n            } finally {\n              recordLayoutEffectDuration(finishedWork);\n            }\n          } else {\n            commitHookEffectListMount(HookLayout | HookHasEffect, finishedWork);\n          }\n        }\n        break;\n      }\n      case ClassComponent: {\n        const instance = finishedWork.stateNode;\n        if (finishedWork.flags & Update) {\n          if (!offscreenSubtreeWasHidden) {\n            if (current === null) {\n              // We could update instance props and state here,\n              // but instead we rely on them being set during last render.\n              // TODO: revisit this when we implement resuming.\n              if (__DEV__) {\n                if (\n                  finishedWork.type === finishedWork.elementType &&\n                  !didWarnAboutReassigningProps\n                ) {\n                  if (instance.props !== finishedWork.memoizedProps) {\n                    console.error(\n                      'Expected %s props to match memoized props before ' +\n                        'componentDidMount. ' +\n                        'This might either be because of a bug in React, or because ' +\n                        'a component reassigns its own `this.props`. ' +\n                        'Please file an issue.',\n                      getComponentNameFromFiber(finishedWork) || 'instance',\n                    );\n                  }\n                  if (instance.state !== finishedWork.memoizedState) {\n                    console.error(\n                      'Expected %s state to match memoized state before ' +\n                        'componentDidMount. ' +\n                        'This might either be because of a bug in React, or because ' +\n                        'a component reassigns its own `this.state`. ' +\n                        'Please file an issue.',\n                      getComponentNameFromFiber(finishedWork) || 'instance',\n                    );\n                  }\n                }\n              }\n              if (\n                enableProfilerTimer &&\n                enableProfilerCommitHooks &&\n                finishedWork.mode & ProfileMode\n              ) {\n                try {\n                  startLayoutEffectTimer();\n                  instance.componentDidMount();\n                } finally {\n                  recordLayoutEffectDuration(finishedWork);\n                }\n              } else {\n                instance.componentDidMount();\n              }\n            } else {\n              const prevProps =\n                finishedWork.elementType === finishedWork.type\n                  ? current.memoizedProps\n                  : resolveDefaultProps(\n                      finishedWork.type,\n                      current.memoizedProps,\n                    );\n              const prevState = current.memoizedState;\n              // We could update instance props and state here,\n              // but instead we rely on them being set during last render.\n              // TODO: revisit this when we implement resuming.\n              if (__DEV__) {\n                if (\n                  finishedWork.type === finishedWork.elementType &&\n                  !didWarnAboutReassigningProps\n                ) {\n                  if (instance.props !== finishedWork.memoizedProps) {\n                    console.error(\n                      'Expected %s props to match memoized props before ' +\n                        'componentDidUpdate. ' +\n                        'This might either be because of a bug in React, or because ' +\n                        'a component reassigns its own `this.props`. ' +\n                        'Please file an issue.',\n                      getComponentNameFromFiber(finishedWork) || 'instance',\n                    );\n                  }\n                  if (instance.state !== finishedWork.memoizedState) {\n                    console.error(\n                      'Expected %s state to match memoized state before ' +\n                        'componentDidUpdate. ' +\n                        'This might either be because of a bug in React, or because ' +\n                        'a component reassigns its own `this.state`. ' +\n                        'Please file an issue.',\n                      getComponentNameFromFiber(finishedWork) || 'instance',\n                    );\n                  }\n                }\n              }\n              if (\n                enableProfilerTimer &&\n                enableProfilerCommitHooks &&\n                finishedWork.mode & ProfileMode\n              ) {\n                try {\n                  startLayoutEffectTimer();\n                  instance.componentDidUpdate(\n                    prevProps,\n                    prevState,\n                    instance.__reactInternalSnapshotBeforeUpdate,\n                  );\n                } finally {\n                  recordLayoutEffectDuration(finishedWork);\n                }\n              } else {\n                instance.componentDidUpdate(\n                  prevProps,\n                  prevState,\n                  instance.__reactInternalSnapshotBeforeUpdate,\n                );\n              }\n            }\n          }\n        }\n\n        // TODO: I think this is now always non-null by the time it reaches the\n        // commit phase. Consider removing the type check.\n        const updateQueue: UpdateQueue<\n          *,\n        > | null = (finishedWork.updateQueue: any);\n        if (updateQueue !== null) {\n          if (__DEV__) {\n            if (\n              finishedWork.type === finishedWork.elementType &&\n              !didWarnAboutReassigningProps\n            ) {\n              if (instance.props !== finishedWork.memoizedProps) {\n                console.error(\n                  'Expected %s props to match memoized props before ' +\n                    'processing the update queue. ' +\n                    'This might either be because of a bug in React, or because ' +\n                    'a component reassigns its own `this.props`. ' +\n                    'Please file an issue.',\n                  getComponentNameFromFiber(finishedWork) || 'instance',\n                );\n              }\n              if (instance.state !== finishedWork.memoizedState) {\n                console.error(\n                  'Expected %s state to match memoized state before ' +\n                    'processing the update queue. ' +\n                    'This might either be because of a bug in React, or because ' +\n                    'a component reassigns its own `this.state`. ' +\n                    'Please file an issue.',\n                  getComponentNameFromFiber(finishedWork) || 'instance',\n                );\n              }\n            }\n          }\n          // We could update instance props and state here,\n          // but instead we rely on them being set during last render.\n          // TODO: revisit this when we implement resuming.\n          commitUpdateQueue(finishedWork, updateQueue, instance);\n        }\n        break;\n      }\n      case HostRoot: {\n        // TODO: I think this is now always non-null by the time it reaches the\n        // commit phase. Consider removing the type check.\n        const updateQueue: UpdateQueue<\n          *,\n        > | null = (finishedWork.updateQueue: any);\n        if (updateQueue !== null) {\n          let instance = null;\n          if (finishedWork.child !== null) {\n            switch (finishedWork.child.tag) {\n              case HostComponent:\n                instance = getPublicInstance(finishedWork.child.stateNode);\n                break;\n              case ClassComponent:\n                instance = finishedWork.child.stateNode;\n                break;\n            }\n          }\n          commitUpdateQueue(finishedWork, updateQueue, instance);\n        }\n        break;\n      }\n      case HostComponent: {\n        const instance: Instance = finishedWork.stateNode;\n\n        // Renderers may schedule work to be done after host components are mounted\n        // (eg DOM renderer may schedule auto-focus for inputs and form controls).\n        // These effects should only be committed when components are first mounted,\n        // aka when there is no current/alternate.\n        if (current === null && finishedWork.flags & Update) {\n          const type = finishedWork.type;\n          const props = finishedWork.memoizedProps;\n          commitMount(instance, type, props, finishedWork);\n        }\n\n        break;\n      }\n      case HostText: {\n        // We have no life-cycles associated with text.\n        break;\n      }\n      case HostPortal: {\n        // We have no life-cycles associated with portals.\n        break;\n      }\n      case Profiler: {\n        if (enableProfilerTimer) {\n          const {onCommit, onRender} = finishedWork.memoizedProps;\n          const {effectDuration} = finishedWork.stateNode;\n\n          const commitTime = getCommitTime();\n\n          let phase = current === null ? 'mount' : 'update';\n          if (enableProfilerNestedUpdatePhase) {\n            if (isCurrentUpdateNested()) {\n              phase = 'nested-update';\n            }\n          }\n\n          if (typeof onRender === 'function') {\n            onRender(\n              finishedWork.memoizedProps.id,\n              phase,\n              finishedWork.actualDuration,\n              finishedWork.treeBaseDuration,\n              finishedWork.actualStartTime,\n              commitTime,\n            );\n          }\n\n          if (enableProfilerCommitHooks) {\n            if (typeof onCommit === 'function') {\n              onCommit(\n                finishedWork.memoizedProps.id,\n                phase,\n                effectDuration,\n                commitTime,\n              );\n            }\n\n            // Schedule a passive effect for this Profiler to call onPostCommit hooks.\n            // This effect should be scheduled even if there is no onPostCommit callback for this Profiler,\n            // because the effect is also where times bubble to parent Profilers.\n            enqueuePendingPassiveProfilerEffect(finishedWork);\n\n            // Propagate layout effect durations to the next nearest Profiler ancestor.\n            // Do not reset these values until the next render so DevTools has a chance to read them first.\n            let parentFiber = finishedWork.return;\n            outer: while (parentFiber !== null) {\n              switch (parentFiber.tag) {\n                case HostRoot:\n                  const root = parentFiber.stateNode;\n                  root.effectDuration += effectDuration;\n                  break outer;\n                case Profiler:\n                  const parentStateNode = parentFiber.stateNode;\n                  parentStateNode.effectDuration += effectDuration;\n                  break outer;\n              }\n              parentFiber = parentFiber.return;\n            }\n          }\n        }\n        break;\n      }\n      case SuspenseComponent: {\n        commitSuspenseHydrationCallbacks(finishedRoot, finishedWork);\n        break;\n      }\n      case SuspenseListComponent:\n      case IncompleteClassComponent:\n      case ScopeComponent:\n      case OffscreenComponent:\n      case LegacyHiddenComponent:\n        break;\n      default:\n        invariant(\n          false,\n          'This unit of work tag should not have side-effects. This error is ' +\n            'likely caused by a bug in React. Please file an issue.',\n        );\n    }\n  }\n\n  if (!enableSuspenseLayoutEffectSemantics || !offscreenSubtreeWasHidden) {\n    if (enableScopeAPI) {\n      // TODO: This is a temporary solution that allowed us to transition away\n      // from React Flare on www.\n      if (finishedWork.flags & Ref && finishedWork.tag !== ScopeComponent) {\n        commitAttachRef(finishedWork);\n      }\n    } else {\n      if (finishedWork.flags & Ref) {\n        commitAttachRef(finishedWork);\n      }\n    }\n  }\n}\n\nfunction reappearLayoutEffectsOnFiber(node: Fiber) {\n  // Turn on layout effects in a tree that previously disappeared.\n  // TODO (Offscreen) Check: flags & LayoutStatic\n  switch (node.tag) {\n    case FunctionComponent:\n    case ForwardRef:\n    case SimpleMemoComponent: {\n      if (\n        enableProfilerTimer &&\n        enableProfilerCommitHooks &&\n        node.mode & ProfileMode\n      ) {\n        try {\n          startLayoutEffectTimer();\n          safelyCallCommitHookLayoutEffectListMount(node, node.return);\n        } finally {\n          recordLayoutEffectDuration(node);\n        }\n      } else {\n        safelyCallCommitHookLayoutEffectListMount(node, node.return);\n      }\n      break;\n    }\n    case ClassComponent: {\n      const instance = node.stateNode;\n      if (typeof instance.componentDidMount === 'function') {\n        safelyCallComponentDidMount(node, node.return, instance);\n      }\n      safelyAttachRef(node, node.return);\n      break;\n    }\n    case HostComponent: {\n      safelyAttachRef(node, node.return);\n      break;\n    }\n  }\n}\n\nfunction hideOrUnhideAllChildren(finishedWork, isHidden) {\n  // Only hide or unhide the top-most host nodes.\n  let hostSubtreeRoot = null;\n\n  if (supportsMutation) {\n    // We only have the top Fiber that was inserted but we need to recurse down its\n    // children to find all the terminal nodes.\n    let node: Fiber = finishedWork;\n    while (true) {\n      if (node.tag === HostComponent) {\n        if (hostSubtreeRoot === null) {\n          hostSubtreeRoot = node;\n\n          const instance = node.stateNode;\n          if (isHidden) {\n            hideInstance(instance);\n          } else {\n            unhideInstance(node.stateNode, node.memoizedProps);\n          }\n        }\n      } else if (node.tag === HostText) {\n        if (hostSubtreeRoot === null) {\n          const instance = node.stateNode;\n          if (isHidden) {\n            hideTextInstance(instance);\n          } else {\n            unhideTextInstance(instance, node.memoizedProps);\n          }\n        }\n      } else if (\n        (node.tag === OffscreenComponent ||\n          node.tag === LegacyHiddenComponent) &&\n        (node.memoizedState: OffscreenState) !== null &&\n        node !== finishedWork\n      ) {\n        // Found a nested Offscreen component that is hidden.\n        // Don't search any deeper. This tree should remain hidden.\n      } else if (node.child !== null) {\n        node.child.return = node;\n        node = node.child;\n        continue;\n      }\n\n      if (node === finishedWork) {\n        return;\n      }\n      while (node.sibling === null) {\n        if (node.return === null || node.return === finishedWork) {\n          return;\n        }\n\n        if (hostSubtreeRoot === node) {\n          hostSubtreeRoot = null;\n        }\n\n        node = node.return;\n      }\n\n      if (hostSubtreeRoot === node) {\n        hostSubtreeRoot = null;\n      }\n\n      node.sibling.return = node.return;\n      node = node.sibling;\n    }\n  }\n}\n\nfunction commitAttachRef(finishedWork: Fiber) {\n  const ref = finishedWork.ref;\n  if (ref !== null) {\n    const instance = finishedWork.stateNode;\n    let instanceToUse;\n    switch (finishedWork.tag) {\n      case HostComponent:\n        instanceToUse = getPublicInstance(instance);\n        break;\n      default:\n        instanceToUse = instance;\n    }\n    // Moved outside to ensure DCE works with this flag\n    if (enableScopeAPI && finishedWork.tag === ScopeComponent) {\n      instanceToUse = instance;\n    }\n    if (typeof ref === 'function') {\n      if (\n        enableProfilerTimer &&\n        enableProfilerCommitHooks &&\n        finishedWork.mode & ProfileMode\n      ) {\n        try {\n          startLayoutEffectTimer();\n          ref(instanceToUse);\n        } finally {\n          recordLayoutEffectDuration(finishedWork);\n        }\n      } else {\n        ref(instanceToUse);\n      }\n    } else {\n      if (__DEV__) {\n        if (!ref.hasOwnProperty('current')) {\n          console.error(\n            'Unexpected ref object provided for %s. ' +\n              'Use either a ref-setter function or React.createRef().',\n            getComponentNameFromFiber(finishedWork),\n          );\n        }\n      }\n\n      ref.current = instanceToUse;\n    }\n  }\n}\n\nfunction commitDetachRef(current: Fiber) {\n  const currentRef = current.ref;\n  if (currentRef !== null) {\n    if (typeof currentRef === 'function') {\n      if (\n        enableProfilerTimer &&\n        enableProfilerCommitHooks &&\n        current.mode & ProfileMode\n      ) {\n        try {\n          startLayoutEffectTimer();\n          currentRef(null);\n        } finally {\n          recordLayoutEffectDuration(current);\n        }\n      } else {\n        currentRef(null);\n      }\n    } else {\n      currentRef.current = null;\n    }\n  }\n}\n\n// User-originating errors (lifecycles and refs) should not interrupt\n// deletion, so don't let them throw. Host-originating errors should\n// interrupt deletion, so it's okay\nfunction commitUnmount(\n  finishedRoot: FiberRoot,\n  current: Fiber,\n  nearestMountedAncestor: Fiber,\n): void {\n  onCommitUnmount(current);\n\n  switch (current.tag) {\n    case FunctionComponent:\n    case ForwardRef:\n    case MemoComponent:\n    case SimpleMemoComponent: {\n      const updateQueue: FunctionComponentUpdateQueue | null = (current.updateQueue: any);\n      if (updateQueue !== null) {\n        const lastEffect = updateQueue.lastEffect;\n        if (lastEffect !== null) {\n          const firstEffect = lastEffect.next;\n\n          let effect = firstEffect;\n          do {\n            const {destroy, tag} = effect;\n            if (destroy !== undefined) {\n              if ((tag & HookLayout) !== NoHookEffect) {\n                if (\n                  enableProfilerTimer &&\n                  enableProfilerCommitHooks &&\n                  current.mode & ProfileMode\n                ) {\n                  startLayoutEffectTimer();\n                  safelyCallDestroy(current, nearestMountedAncestor, destroy);\n                  recordLayoutEffectDuration(current);\n                } else {\n                  safelyCallDestroy(current, nearestMountedAncestor, destroy);\n                }\n              }\n            }\n            effect = effect.next;\n          } while (effect !== firstEffect);\n        }\n      }\n      return;\n    }\n    case ClassComponent: {\n      safelyDetachRef(current, nearestMountedAncestor);\n      const instance = current.stateNode;\n      if (typeof instance.componentWillUnmount === 'function') {\n        safelyCallComponentWillUnmount(\n          current,\n          nearestMountedAncestor,\n          instance,\n        );\n      }\n      return;\n    }\n    case HostComponent: {\n      safelyDetachRef(current, nearestMountedAncestor);\n      return;\n    }\n    case HostPortal: {\n      // TODO: this is recursive.\n      // We are also not using this parent because\n      // the portal will get pushed immediately.\n      if (supportsMutation) {\n        unmountHostComponents(finishedRoot, current, nearestMountedAncestor);\n      } else if (supportsPersistence) {\n        emptyPortalContainer(current);\n      }\n      return;\n    }\n    case DehydratedFragment: {\n      if (enableSuspenseCallback) {\n        const hydrationCallbacks = finishedRoot.hydrationCallbacks;\n        if (hydrationCallbacks !== null) {\n          const onDeleted = hydrationCallbacks.onDeleted;\n          if (onDeleted) {\n            onDeleted((current.stateNode: SuspenseInstance));\n          }\n        }\n      }\n      return;\n    }\n    case ScopeComponent: {\n      if (enableScopeAPI) {\n        safelyDetachRef(current, nearestMountedAncestor);\n      }\n      return;\n    }\n  }\n}\n\nfunction commitNestedUnmounts(\n  finishedRoot: FiberRoot,\n  root: Fiber,\n  nearestMountedAncestor: Fiber,\n): void {\n  // While we're inside a removed host node we don't want to call\n  // removeChild on the inner nodes because they're removed by the top\n  // call anyway. We also want to call componentWillUnmount on all\n  // composites before this host node is removed from the tree. Therefore\n  // we do an inner loop while we're still inside the host node.\n  let node: Fiber = root;\n  while (true) {\n    commitUnmount(finishedRoot, node, nearestMountedAncestor);\n    // Visit children because they may contain more composite or host nodes.\n    // Skip portals because commitUnmount() currently visits them recursively.\n    if (\n      node.child !== null &&\n      // If we use mutation we drill down into portals using commitUnmount above.\n      // If we don't use mutation we drill down into portals here instead.\n      (!supportsMutation || node.tag !== HostPortal)\n    ) {\n      node.child.return = node;\n      node = node.child;\n      continue;\n    }\n    if (node === root) {\n      return;\n    }\n    while (node.sibling === null) {\n      if (node.return === null || node.return === root) {\n        return;\n      }\n      node = node.return;\n    }\n    node.sibling.return = node.return;\n    node = node.sibling;\n  }\n}\n\nfunction detachFiberMutation(fiber: Fiber) {\n  // Cut off the return pointer to disconnect it from the tree.\n  // This enables us to detect and warn against state updates on an unmounted component.\n  // It also prevents events from bubbling from within disconnected components.\n  //\n  // Ideally, we should also clear the child pointer of the parent alternate to let this\n  // get GC:ed but we don't know which for sure which parent is the current\n  // one so we'll settle for GC:ing the subtree of this child.\n  // This child itself will be GC:ed when the parent updates the next time.\n  //\n  // Note that we can't clear child or sibling pointers yet.\n  // They're needed for passive effects and for findDOMNode.\n  // We defer those fields, and all other cleanup, to the passive phase (see detachFiberAfterEffects).\n  //\n  // Don't reset the alternate yet, either. We need that so we can detach the\n  // alternate's fields in the passive phase. Clearing the return pointer is\n  // sufficient for findDOMNode semantics.\n  const alternate = fiber.alternate;\n  if (alternate !== null) {\n    alternate.return = null;\n  }\n  fiber.return = null;\n}\n\nfunction detachFiberAfterEffects(fiber: Fiber) {\n  const alternate = fiber.alternate;\n  if (alternate !== null) {\n    fiber.alternate = null;\n    detachFiberAfterEffects(alternate);\n  }\n\n  // Note: Defensively using negation instead of < in case\n  // `deletedTreeCleanUpLevel` is undefined.\n  if (!(deletedTreeCleanUpLevel >= 2)) {\n    // This is the default branch (level 0).\n    fiber.child = null;\n    fiber.deletions = null;\n    fiber.dependencies = null;\n    fiber.memoizedProps = null;\n    fiber.memoizedState = null;\n    fiber.pendingProps = null;\n    fiber.sibling = null;\n    fiber.stateNode = null;\n    fiber.updateQueue = null;\n\n    if (__DEV__) {\n      fiber._debugOwner = null;\n    }\n  } else {\n    // Clear cyclical Fiber fields. This level alone is designed to roughly\n    // approximate the planned Fiber refactor. In that world, `setState` will be\n    // bound to a special \"instance\" object instead of a Fiber. The Instance\n    // object will not have any of these fields. It will only be connected to\n    // the fiber tree via a single link at the root. So if this level alone is\n    // sufficient to fix memory issues, that bodes well for our plans.\n    fiber.child = null;\n    fiber.deletions = null;\n    fiber.sibling = null;\n\n    // The `stateNode` is cyclical because on host nodes it points to the host\n    // tree, which has its own pointers to children, parents, and siblings.\n    // The other host nodes also point back to fibers, so we should detach that\n    // one, too.\n    if (fiber.tag === HostComponent) {\n      const hostInstance: Instance = fiber.stateNode;\n      if (hostInstance !== null) {\n        detachDeletedInstance(hostInstance);\n      }\n    }\n    fiber.stateNode = null;\n\n    // I'm intentionally not clearing the `return` field in this level. We\n    // already disconnect the `return` pointer at the root of the deleted\n    // subtree (in `detachFiberMutation`). Besides, `return` by itself is not\n    // cyclical — it's only cyclical when combined with `child`, `sibling`, and\n    // `alternate`. But we'll clear it in the next level anyway, just in case.\n\n    if (__DEV__) {\n      fiber._debugOwner = null;\n    }\n\n    if (deletedTreeCleanUpLevel >= 3) {\n      // Theoretically, nothing in here should be necessary, because we already\n      // disconnected the fiber from the tree. So even if something leaks this\n      // particular fiber, it won't leak anything else\n      //\n      // The purpose of this branch is to be super aggressive so we can measure\n      // if there's any difference in memory impact. If there is, that could\n      // indicate a React leak we don't know about.\n      fiber.return = null;\n      fiber.dependencies = null;\n      fiber.memoizedProps = null;\n      fiber.memoizedState = null;\n      fiber.pendingProps = null;\n      fiber.stateNode = null;\n      // TODO: Move to `commitPassiveUnmountInsideDeletedTreeOnFiber` instead.\n      fiber.updateQueue = null;\n    }\n  }\n}\n\nfunction emptyPortalContainer(current: Fiber) {\n  if (!supportsPersistence) {\n    return;\n  }\n\n  const portal: {\n    containerInfo: Container,\n    pendingChildren: ChildSet,\n    ...\n  } = current.stateNode;\n  const {containerInfo} = portal;\n  const emptyChildSet = createContainerChildSet(containerInfo);\n  replaceContainerChildren(containerInfo, emptyChildSet);\n}\n\nfunction commitContainer(finishedWork: Fiber) {\n  if (!supportsPersistence) {\n    return;\n  }\n\n  switch (finishedWork.tag) {\n    case ClassComponent:\n    case HostComponent:\n    case HostText: {\n      return;\n    }\n    case HostRoot:\n    case HostPortal: {\n      const portalOrRoot: {\n        containerInfo: Container,\n        pendingChildren: ChildSet,\n        ...\n      } = finishedWork.stateNode;\n      const {containerInfo, pendingChildren} = portalOrRoot;\n      replaceContainerChildren(containerInfo, pendingChildren);\n      return;\n    }\n  }\n  invariant(\n    false,\n    'This unit of work tag should not have side-effects. This error is ' +\n      'likely caused by a bug in React. Please file an issue.',\n  );\n}\n\nfunction getHostParentFiber(fiber: Fiber): Fiber {\n  let parent = fiber.return;\n  while (parent !== null) {\n    if (isHostParent(parent)) {\n      return parent;\n    }\n    parent = parent.return;\n  }\n  invariant(\n    false,\n    'Expected to find a host parent. This error is likely caused by a bug ' +\n      'in React. Please file an issue.',\n  );\n}\n\nfunction isHostParent(fiber: Fiber): boolean {\n  return (\n    fiber.tag === HostComponent ||\n    fiber.tag === HostRoot ||\n    fiber.tag === HostPortal\n  );\n}\n\nfunction getHostSibling(fiber: Fiber): ?Instance {\n  // We're going to search forward into the tree until we find a sibling host\n  // node. Unfortunately, if multiple insertions are done in a row we have to\n  // search past them. This leads to exponential search for the next sibling.\n  // TODO: Find a more efficient way to do this.\n  let node: Fiber = fiber;\n  siblings: while (true) {\n    // If we didn't find anything, let's try the next sibling.\n    while (node.sibling === null) {\n      if (node.return === null || isHostParent(node.return)) {\n        // If we pop out of the root or hit the parent the fiber we are the\n        // last sibling.\n        return null;\n      }\n      node = node.return;\n    }\n    node.sibling.return = node.return;\n    node = node.sibling;\n    while (\n      node.tag !== HostComponent &&\n      node.tag !== HostText &&\n      node.tag !== DehydratedFragment\n    ) {\n      // If it is not host node and, we might have a host node inside it.\n      // Try to search down until we find one.\n      if (node.flags & Placement) {\n        // If we don't have a child, try the siblings instead.\n        continue siblings;\n      }\n      // If we don't have a child, try the siblings instead.\n      // We also skip portals because they are not part of this host tree.\n      if (node.child === null || node.tag === HostPortal) {\n        continue siblings;\n      } else {\n        node.child.return = node;\n        node = node.child;\n      }\n    }\n    // Check if this host node is stable or about to be placed.\n    if (!(node.flags & Placement)) {\n      // Found it!\n      return node.stateNode;\n    }\n  }\n}\n\nfunction commitPlacement(finishedWork: Fiber): void {\n  if (!supportsMutation) {\n    return;\n  }\n\n  // Recursively insert all host nodes into the parent.\n  const parentFiber = getHostParentFiber(finishedWork);\n\n  // Note: these two variables *must* always be updated together.\n  let parent;\n  let isContainer;\n  const parentStateNode = parentFiber.stateNode;\n  switch (parentFiber.tag) {\n    case HostComponent:\n      parent = parentStateNode;\n      isContainer = false;\n      break;\n    case HostRoot:\n      parent = parentStateNode.containerInfo;\n      isContainer = true;\n      break;\n    case HostPortal:\n      parent = parentStateNode.containerInfo;\n      isContainer = true;\n      break;\n    // eslint-disable-next-line-no-fallthrough\n    default:\n      invariant(\n        false,\n        'Invalid host parent fiber. This error is likely caused by a bug ' +\n          'in React. Please file an issue.',\n      );\n  }\n  if (parentFiber.flags & ContentReset) {\n    // Reset the text content of the parent before doing any insertions\n    resetTextContent(parent);\n    // Clear ContentReset from the effect tag\n    parentFiber.flags &= ~ContentReset;\n  }\n\n  const before = getHostSibling(finishedWork);\n  // We only have the top Fiber that was inserted but we need to recurse down its\n  // children to find all the terminal nodes.\n  if (isContainer) {\n    insertOrAppendPlacementNodeIntoContainer(finishedWork, before, parent);\n  } else {\n    insertOrAppendPlacementNode(finishedWork, before, parent);\n  }\n}\n\nfunction insertOrAppendPlacementNodeIntoContainer(\n  node: Fiber,\n  before: ?Instance,\n  parent: Container,\n): void {\n  const {tag} = node;\n  const isHost = tag === HostComponent || tag === HostText;\n  if (isHost) {\n    const stateNode = node.stateNode;\n    if (before) {\n      insertInContainerBefore(parent, stateNode, before);\n    } else {\n      appendChildToContainer(parent, stateNode);\n    }\n  } else if (tag === HostPortal) {\n    // If the insertion itself is a portal, then we don't want to traverse\n    // down its children. Instead, we'll get insertions from each child in\n    // the portal directly.\n  } else {\n    const child = node.child;\n    if (child !== null) {\n      insertOrAppendPlacementNodeIntoContainer(child, before, parent);\n      let sibling = child.sibling;\n      while (sibling !== null) {\n        insertOrAppendPlacementNodeIntoContainer(sibling, before, parent);\n        sibling = sibling.sibling;\n      }\n    }\n  }\n}\n\nfunction insertOrAppendPlacementNode(\n  node: Fiber,\n  before: ?Instance,\n  parent: Instance,\n): void {\n  const {tag} = node;\n  const isHost = tag === HostComponent || tag === HostText;\n  if (isHost) {\n    const stateNode = node.stateNode;\n    if (before) {\n      insertBefore(parent, stateNode, before);\n    } else {\n      appendChild(parent, stateNode);\n    }\n  } else if (tag === HostPortal) {\n    // If the insertion itself is a portal, then we don't want to traverse\n    // down its children. Instead, we'll get insertions from each child in\n    // the portal directly.\n  } else {\n    const child = node.child;\n    if (child !== null) {\n      insertOrAppendPlacementNode(child, before, parent);\n      let sibling = child.sibling;\n      while (sibling !== null) {\n        insertOrAppendPlacementNode(sibling, before, parent);\n        sibling = sibling.sibling;\n      }\n    }\n  }\n}\n\nfunction unmountHostComponents(\n  finishedRoot: FiberRoot,\n  current: Fiber,\n  nearestMountedAncestor: Fiber,\n): void {\n  // We only have the top Fiber that was deleted but we need to recurse down its\n  // children to find all the terminal nodes.\n  let node: Fiber = current;\n\n  // Each iteration, currentParent is populated with node's host parent if not\n  // currentParentIsValid.\n  let currentParentIsValid = false;\n\n  // Note: these two variables *must* always be updated together.\n  let currentParent;\n  let currentParentIsContainer;\n\n  while (true) {\n    if (!currentParentIsValid) {\n      let parent = node.return;\n      findParent: while (true) {\n        invariant(\n          parent !== null,\n          'Expected to find a host parent. This error is likely caused by ' +\n            'a bug in React. Please file an issue.',\n        );\n        const parentStateNode = parent.stateNode;\n        switch (parent.tag) {\n          case HostComponent:\n            currentParent = parentStateNode;\n            currentParentIsContainer = false;\n            break findParent;\n          case HostRoot:\n            currentParent = parentStateNode.containerInfo;\n            currentParentIsContainer = true;\n            break findParent;\n          case HostPortal:\n            currentParent = parentStateNode.containerInfo;\n            currentParentIsContainer = true;\n            break findParent;\n        }\n        parent = parent.return;\n      }\n      currentParentIsValid = true;\n    }\n\n    if (node.tag === HostComponent || node.tag === HostText) {\n      commitNestedUnmounts(finishedRoot, node, nearestMountedAncestor);\n      // After all the children have unmounted, it is now safe to remove the\n      // node from the tree.\n      if (currentParentIsContainer) {\n        removeChildFromContainer(\n          ((currentParent: any): Container),\n          (node.stateNode: Instance | TextInstance),\n        );\n      } else {\n        removeChild(\n          ((currentParent: any): Instance),\n          (node.stateNode: Instance | TextInstance),\n        );\n      }\n      // Don't visit children because we already visited them.\n    } else if (\n      enableSuspenseServerRenderer &&\n      node.tag === DehydratedFragment\n    ) {\n      if (enableSuspenseCallback) {\n        const hydrationCallbacks = finishedRoot.hydrationCallbacks;\n        if (hydrationCallbacks !== null) {\n          const onDeleted = hydrationCallbacks.onDeleted;\n          if (onDeleted) {\n            onDeleted((node.stateNode: SuspenseInstance));\n          }\n        }\n      }\n\n      // Delete the dehydrated suspense boundary and all of its content.\n      if (currentParentIsContainer) {\n        clearSuspenseBoundaryFromContainer(\n          ((currentParent: any): Container),\n          (node.stateNode: SuspenseInstance),\n        );\n      } else {\n        clearSuspenseBoundary(\n          ((currentParent: any): Instance),\n          (node.stateNode: SuspenseInstance),\n        );\n      }\n    } else if (node.tag === HostPortal) {\n      if (node.child !== null) {\n        // When we go into a portal, it becomes the parent to remove from.\n        // We will reassign it back when we pop the portal on the way up.\n        currentParent = node.stateNode.containerInfo;\n        currentParentIsContainer = true;\n        // Visit children because portals might contain host components.\n        node.child.return = node;\n        node = node.child;\n        continue;\n      }\n    } else {\n      commitUnmount(finishedRoot, node, nearestMountedAncestor);\n      // Visit children because we may find more host components below.\n      if (node.child !== null) {\n        node.child.return = node;\n        node = node.child;\n        continue;\n      }\n    }\n    if (node === current) {\n      return;\n    }\n    while (node.sibling === null) {\n      if (node.return === null || node.return === current) {\n        return;\n      }\n      node = node.return;\n      if (node.tag === HostPortal) {\n        // When we go out of the portal, we need to restore the parent.\n        // Since we don't keep a stack of them, we will search for it.\n        currentParentIsValid = false;\n      }\n    }\n    node.sibling.return = node.return;\n    node = node.sibling;\n  }\n}\n\nfunction commitDeletion(\n  finishedRoot: FiberRoot,\n  current: Fiber,\n  nearestMountedAncestor: Fiber,\n): void {\n  if (supportsMutation) {\n    // Recursively delete all host nodes from the parent.\n    // Detach refs and call componentWillUnmount() on the whole subtree.\n    unmountHostComponents(finishedRoot, current, nearestMountedAncestor);\n  } else {\n    // Detach refs and call componentWillUnmount() on the whole subtree.\n    commitNestedUnmounts(finishedRoot, current, nearestMountedAncestor);\n  }\n\n  detachFiberMutation(current);\n}\n\nfunction commitWork(current: Fiber | null, finishedWork: Fiber): void {\n  if (!supportsMutation) {\n    switch (finishedWork.tag) {\n      case FunctionComponent:\n      case ForwardRef:\n      case MemoComponent:\n      case SimpleMemoComponent: {\n        // Layout effects are destroyed during the mutation phase so that all\n        // destroy functions for all fibers are called before any create functions.\n        // This prevents sibling component effects from interfering with each other,\n        // e.g. a destroy function in one component should never override a ref set\n        // by a create function in another component during the same commit.\n        // TODO: Check if we're inside an Offscreen subtree that disappeared\n        // during this commit. If so, we would have already unmounted its\n        // layout hooks. (However, since we null out the `destroy` function\n        // right before calling it, the behavior is already correct, so this\n        // would mostly be for modeling purposes.)\n        if (\n          enableProfilerTimer &&\n          enableProfilerCommitHooks &&\n          finishedWork.mode & ProfileMode\n        ) {\n          try {\n            startLayoutEffectTimer();\n            commitHookEffectListUnmount(\n              HookLayout | HookHasEffect,\n              finishedWork,\n              finishedWork.return,\n            );\n          } finally {\n            recordLayoutEffectDuration(finishedWork);\n          }\n        } else {\n          commitHookEffectListUnmount(\n            HookLayout | HookHasEffect,\n            finishedWork,\n            finishedWork.return,\n          );\n        }\n        return;\n      }\n      case Profiler: {\n        return;\n      }\n      case SuspenseComponent: {\n        commitSuspenseCallback(finishedWork);\n        attachSuspenseRetryListeners(finishedWork);\n        return;\n      }\n      case SuspenseListComponent: {\n        attachSuspenseRetryListeners(finishedWork);\n        return;\n      }\n      case HostRoot: {\n        if (supportsHydration) {\n          const root: FiberRoot = finishedWork.stateNode;\n          if (root.hydrate) {\n            // We've just hydrated. No need to hydrate again.\n            root.hydrate = false;\n            commitHydratedContainer(root.containerInfo);\n          }\n        }\n        break;\n      }\n      case OffscreenComponent:\n      case LegacyHiddenComponent: {\n        return;\n      }\n    }\n\n    commitContainer(finishedWork);\n    return;\n  }\n\n  switch (finishedWork.tag) {\n    case FunctionComponent:\n    case ForwardRef:\n    case MemoComponent:\n    case SimpleMemoComponent: {\n      // Layout effects are destroyed during the mutation phase so that all\n      // destroy functions for all fibers are called before any create functions.\n      // This prevents sibling component effects from interfering with each other,\n      // e.g. a destroy function in one component should never override a ref set\n      // by a create function in another component during the same commit.\n      if (\n        enableProfilerTimer &&\n        enableProfilerCommitHooks &&\n        finishedWork.mode & ProfileMode\n      ) {\n        try {\n          startLayoutEffectTimer();\n          commitHookEffectListUnmount(\n            HookLayout | HookHasEffect,\n            finishedWork,\n            finishedWork.return,\n          );\n        } finally {\n          recordLayoutEffectDuration(finishedWork);\n        }\n      } else {\n        commitHookEffectListUnmount(\n          HookLayout | HookHasEffect,\n          finishedWork,\n          finishedWork.return,\n        );\n      }\n      return;\n    }\n    case ClassComponent: {\n      return;\n    }\n    case HostComponent: {\n      const instance: Instance = finishedWork.stateNode;\n      if (instance != null) {\n        // Commit the work prepared earlier.\n        const newProps = finishedWork.memoizedProps;\n        // For hydration we reuse the update path but we treat the oldProps\n        // as the newProps. The updatePayload will contain the real change in\n        // this case.\n        const oldProps = current !== null ? current.memoizedProps : newProps;\n        const type = finishedWork.type;\n        // TODO: Type the updateQueue to be specific to host components.\n        const updatePayload: null | UpdatePayload = (finishedWork.updateQueue: any);\n        finishedWork.updateQueue = null;\n        if (updatePayload !== null) {\n          commitUpdate(\n            instance,\n            updatePayload,\n            type,\n            oldProps,\n            newProps,\n            finishedWork,\n          );\n        }\n      }\n      return;\n    }\n    case HostText: {\n      invariant(\n        finishedWork.stateNode !== null,\n        'This should have a text node initialized. This error is likely ' +\n          'caused by a bug in React. Please file an issue.',\n      );\n      const textInstance: TextInstance = finishedWork.stateNode;\n      const newText: string = finishedWork.memoizedProps;\n      // For hydration we reuse the update path but we treat the oldProps\n      // as the newProps. The updatePayload will contain the real change in\n      // this case.\n      const oldText: string =\n        current !== null ? current.memoizedProps : newText;\n      commitTextUpdate(textInstance, oldText, newText);\n      return;\n    }\n    case HostRoot: {\n      if (supportsHydration) {\n        const root: FiberRoot = finishedWork.stateNode;\n        if (root.hydrate) {\n          // We've just hydrated. No need to hydrate again.\n          root.hydrate = false;\n          commitHydratedContainer(root.containerInfo);\n        }\n      }\n      return;\n    }\n    case Profiler: {\n      return;\n    }\n    case SuspenseComponent: {\n      commitSuspenseCallback(finishedWork);\n      attachSuspenseRetryListeners(finishedWork);\n      return;\n    }\n    case SuspenseListComponent: {\n      attachSuspenseRetryListeners(finishedWork);\n      return;\n    }\n    case IncompleteClassComponent: {\n      return;\n    }\n    case ScopeComponent: {\n      if (enableScopeAPI) {\n        const scopeInstance = finishedWork.stateNode;\n        prepareScopeUpdate(scopeInstance, finishedWork);\n        return;\n      }\n      break;\n    }\n  }\n  invariant(\n    false,\n    'This unit of work tag should not have side-effects. This error is ' +\n      'likely caused by a bug in React. Please file an issue.',\n  );\n}\n\nfunction commitSuspenseCallback(finishedWork: Fiber) {\n  // TODO: Move this to passive phase\n  const newState: SuspenseState | null = finishedWork.memoizedState;\n  if (enableSuspenseCallback && newState !== null) {\n    const suspenseCallback = finishedWork.memoizedProps.suspenseCallback;\n    if (typeof suspenseCallback === 'function') {\n      const wakeables: Set<Wakeable> | null = (finishedWork.updateQueue: any);\n      if (wakeables !== null) {\n        suspenseCallback(new Set(wakeables));\n      }\n    } else if (__DEV__) {\n      if (suspenseCallback !== undefined) {\n        console.error('Unexpected type for suspenseCallback.');\n      }\n    }\n  }\n}\n\nfunction commitSuspenseHydrationCallbacks(\n  finishedRoot: FiberRoot,\n  finishedWork: Fiber,\n) {\n  if (!supportsHydration) {\n    return;\n  }\n  const newState: SuspenseState | null = finishedWork.memoizedState;\n  if (newState === null) {\n    const current = finishedWork.alternate;\n    if (current !== null) {\n      const prevState: SuspenseState | null = current.memoizedState;\n      if (prevState !== null) {\n        const suspenseInstance = prevState.dehydrated;\n        if (suspenseInstance !== null) {\n          commitHydratedSuspenseInstance(suspenseInstance);\n          if (enableSuspenseCallback) {\n            const hydrationCallbacks = finishedRoot.hydrationCallbacks;\n            if (hydrationCallbacks !== null) {\n              const onHydrated = hydrationCallbacks.onHydrated;\n              if (onHydrated) {\n                onHydrated(suspenseInstance);\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n\nfunction attachSuspenseRetryListeners(finishedWork: Fiber) {\n  // If this boundary just timed out, then it will have a set of wakeables.\n  // For each wakeable, attach a listener so that when it resolves, React\n  // attempts to re-render the boundary in the primary (pre-timeout) state.\n  const wakeables: Set<Wakeable> | null = (finishedWork.updateQueue: any);\n  if (wakeables !== null) {\n    finishedWork.updateQueue = null;\n    let retryCache = finishedWork.stateNode;\n    if (retryCache === null) {\n      retryCache = finishedWork.stateNode = new PossiblyWeakSet();\n    }\n    wakeables.forEach(wakeable => {\n      // Memoize using the boundary fiber to prevent redundant listeners.\n      const retry = resolveRetryWakeable.bind(null, finishedWork, wakeable);\n      if (!retryCache.has(wakeable)) {\n        retryCache.add(wakeable);\n\n        if (enableUpdaterTracking) {\n          if (isDevToolsPresent) {\n            if (inProgressLanes !== null && inProgressRoot !== null) {\n              // If we have pending work still, associate the original updaters with it.\n              restorePendingUpdaters(inProgressRoot, inProgressLanes);\n            } else {\n              throw Error(\n                'Expected finished root and lanes to be set. This is a bug in React.',\n              );\n            }\n          }\n        }\n\n        wakeable.then(retry, retry);\n      }\n    });\n  }\n}\n\n// This function detects when a Suspense boundary goes from visible to hidden.\n// It returns false if the boundary is already hidden.\n// TODO: Use an effect tag.\nexport function isSuspenseBoundaryBeingHidden(\n  current: Fiber | null,\n  finishedWork: Fiber,\n): boolean {\n  if (current !== null) {\n    const oldState: SuspenseState | null = current.memoizedState;\n    if (oldState === null || oldState.dehydrated !== null) {\n      const newState: SuspenseState | null = finishedWork.memoizedState;\n      return newState !== null && newState.dehydrated === null;\n    }\n  }\n  return false;\n}\n\nfunction commitResetTextContent(current: Fiber) {\n  if (!supportsMutation) {\n    return;\n  }\n  resetTextContent(current.stateNode);\n}\n\nexport function commitMutationEffects(\n  root: FiberRoot,\n  firstChild: Fiber,\n  committedLanes: Lanes,\n) {\n  inProgressLanes = committedLanes;\n  inProgressRoot = root;\n  nextEffect = firstChild;\n\n  commitMutationEffects_begin(root);\n\n  inProgressLanes = null;\n  inProgressRoot = null;\n}\n\nfunction commitMutationEffects_begin(root: FiberRoot) {\n  while (nextEffect !== null) {\n    const fiber = nextEffect;\n\n    // TODO: Should wrap this in flags check, too, as optimization\n    const deletions = fiber.deletions;\n    if (deletions !== null) {\n      for (let i = 0; i < deletions.length; i++) {\n        const childToDelete = deletions[i];\n        try {\n          commitDeletion(root, childToDelete, fiber);\n        } catch (error) {\n          reportUncaughtErrorInDEV(error);\n          captureCommitPhaseError(childToDelete, fiber, error);\n        }\n      }\n    }\n\n    const child = fiber.child;\n    if ((fiber.subtreeFlags & MutationMask) !== NoFlags && child !== null) {\n      ensureCorrectReturnPointer(child, fiber);\n      nextEffect = child;\n    } else {\n      commitMutationEffects_complete(root);\n    }\n  }\n}\n\nfunction commitMutationEffects_complete(root: FiberRoot) {\n  while (nextEffect !== null) {\n    const fiber = nextEffect;\n    setCurrentDebugFiberInDEV(fiber);\n    try {\n      commitMutationEffectsOnFiber(fiber, root);\n    } catch (error) {\n      reportUncaughtErrorInDEV(error);\n      captureCommitPhaseError(fiber, fiber.return, error);\n    }\n    resetCurrentDebugFiberInDEV();\n\n    const sibling = fiber.sibling;\n    if (sibling !== null) {\n      ensureCorrectReturnPointer(sibling, fiber.return);\n      nextEffect = sibling;\n      return;\n    }\n\n    nextEffect = fiber.return;\n  }\n}\n\nfunction commitMutationEffectsOnFiber(finishedWork: Fiber, root: FiberRoot) {\n  // TODO: The factoring of this phase could probably be improved. Consider\n  // switching on the type of work before checking the flags. That's what\n  // we do in all the other phases. I think this one is only different\n  // because of the shared reconciliation logic below.\n  const flags = finishedWork.flags;\n\n  if (flags & ContentReset) {\n    commitResetTextContent(finishedWork);\n  }\n\n  if (flags & Ref) {\n    const current = finishedWork.alternate;\n    if (current !== null) {\n      commitDetachRef(current);\n    }\n    if (enableScopeAPI) {\n      // TODO: This is a temporary solution that allowed us to transition away\n      // from React Flare on www.\n      if (finishedWork.tag === ScopeComponent) {\n        commitAttachRef(finishedWork);\n      }\n    }\n  }\n\n  if (flags & Visibility) {\n    switch (finishedWork.tag) {\n      case SuspenseComponent: {\n        const newState: OffscreenState | null = finishedWork.memoizedState;\n        const isHidden = newState !== null;\n        if (isHidden) {\n          const current = finishedWork.alternate;\n          const wasHidden = current !== null && current.memoizedState !== null;\n          if (!wasHidden) {\n            // TODO: Move to passive phase\n            markCommitTimeOfFallback();\n          }\n        }\n        break;\n      }\n      case OffscreenComponent: {\n        const newState: OffscreenState | null = finishedWork.memoizedState;\n        const isHidden = newState !== null;\n        const current = finishedWork.alternate;\n        const wasHidden = current !== null && current.memoizedState !== null;\n        const offscreenBoundary: Fiber = finishedWork;\n\n        if (supportsMutation) {\n          // TODO: This needs to run whenever there's an insertion or update\n          // inside a hidden Offscreen tree.\n          hideOrUnhideAllChildren(offscreenBoundary, isHidden);\n        }\n\n        if (enableSuspenseLayoutEffectSemantics) {\n          if (isHidden) {\n            if (!wasHidden) {\n              if ((offscreenBoundary.mode & ConcurrentMode) !== NoMode) {\n                nextEffect = offscreenBoundary;\n                let offscreenChild = offscreenBoundary.child;\n                while (offscreenChild !== null) {\n                  nextEffect = offscreenChild;\n                  disappearLayoutEffects_begin(offscreenChild);\n                  offscreenChild = offscreenChild.sibling;\n                }\n              }\n            }\n          } else {\n            if (wasHidden) {\n              // TODO: Move re-appear call here for symmetry?\n            }\n          }\n          break;\n        }\n      }\n    }\n  }\n\n  // The following switch statement is only concerned about placement,\n  // updates, and deletions. To avoid needing to add a case for every possible\n  // bitmap value, we remove the secondary effects from the effect tag and\n  // switch on that value.\n  const primaryFlags = flags & (Placement | Update | Hydrating);\n  outer: switch (primaryFlags) {\n    case Placement: {\n      commitPlacement(finishedWork);\n      // Clear the \"placement\" from effect tag so that we know that this is\n      // inserted, before any life-cycles like componentDidMount gets called.\n      // TODO: findDOMNode doesn't rely on this any more but isMounted does\n      // and isMounted is deprecated anyway so we should be able to kill this.\n      finishedWork.flags &= ~Placement;\n      break;\n    }\n    case PlacementAndUpdate: {\n      // Placement\n      commitPlacement(finishedWork);\n      // Clear the \"placement\" from effect tag so that we know that this is\n      // inserted, before any life-cycles like componentDidMount gets called.\n      finishedWork.flags &= ~Placement;\n\n      // Update\n      const current = finishedWork.alternate;\n      commitWork(current, finishedWork);\n      break;\n    }\n    case Hydrating: {\n      finishedWork.flags &= ~Hydrating;\n      break;\n    }\n    case HydratingAndUpdate: {\n      finishedWork.flags &= ~Hydrating;\n\n      // Update\n      const current = finishedWork.alternate;\n      commitWork(current, finishedWork);\n      break;\n    }\n    case Update: {\n      const current = finishedWork.alternate;\n      commitWork(current, finishedWork);\n      break;\n    }\n  }\n}\n\nexport function commitLayoutEffects(\n  finishedWork: Fiber,\n  root: FiberRoot,\n  committedLanes: Lanes,\n): void {\n  inProgressLanes = committedLanes;\n  inProgressRoot = root;\n  nextEffect = finishedWork;\n\n  commitLayoutEffects_begin(finishedWork, root, committedLanes);\n\n  inProgressLanes = null;\n  inProgressRoot = null;\n}\n\nfunction commitLayoutEffects_begin(\n  subtreeRoot: Fiber,\n  root: FiberRoot,\n  committedLanes: Lanes,\n) {\n  // Suspense layout effects semantics don't change for legacy roots.\n  const isModernRoot = (subtreeRoot.mode & ConcurrentMode) !== NoMode;\n\n  while (nextEffect !== null) {\n    const fiber = nextEffect;\n    const firstChild = fiber.child;\n\n    if (\n      enableSuspenseLayoutEffectSemantics &&\n      fiber.tag === OffscreenComponent &&\n      isModernRoot\n    ) {\n      // Keep track of the current Offscreen stack's state.\n      const isHidden = fiber.memoizedState !== null;\n      const newOffscreenSubtreeIsHidden = isHidden || offscreenSubtreeIsHidden;\n      if (newOffscreenSubtreeIsHidden) {\n        // The Offscreen tree is hidden. Skip over its layout effects.\n        commitLayoutMountEffects_complete(subtreeRoot, root, committedLanes);\n        continue;\n      } else {\n        // TODO (Offscreen) Also check: subtreeFlags & LayoutMask\n        const current = fiber.alternate;\n        const wasHidden = current !== null && current.memoizedState !== null;\n        const newOffscreenSubtreeWasHidden =\n          wasHidden || offscreenSubtreeWasHidden;\n        const prevOffscreenSubtreeIsHidden = offscreenSubtreeIsHidden;\n        const prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;\n\n        // Traverse the Offscreen subtree with the current Offscreen as the root.\n        offscreenSubtreeIsHidden = newOffscreenSubtreeIsHidden;\n        offscreenSubtreeWasHidden = newOffscreenSubtreeWasHidden;\n\n        if (offscreenSubtreeWasHidden && !prevOffscreenSubtreeWasHidden) {\n          // This is the root of a reappearing boundary. Turn its layout effects\n          // back on.\n          nextEffect = fiber;\n          reappearLayoutEffects_begin(fiber);\n        }\n\n        let child = firstChild;\n        while (child !== null) {\n          nextEffect = child;\n          commitLayoutEffects_begin(\n            child, // New root; bubble back up to here and stop.\n            root,\n            committedLanes,\n          );\n          child = child.sibling;\n        }\n\n        // Restore Offscreen state and resume in our-progress traversal.\n        nextEffect = fiber;\n        offscreenSubtreeIsHidden = prevOffscreenSubtreeIsHidden;\n        offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;\n        commitLayoutMountEffects_complete(subtreeRoot, root, committedLanes);\n\n        continue;\n      }\n    }\n\n    if ((fiber.subtreeFlags & LayoutMask) !== NoFlags && firstChild !== null) {\n      ensureCorrectReturnPointer(firstChild, fiber);\n      nextEffect = firstChild;\n    } else {\n      commitLayoutMountEffects_complete(subtreeRoot, root, committedLanes);\n    }\n  }\n}\n\nfunction commitLayoutMountEffects_complete(\n  subtreeRoot: Fiber,\n  root: FiberRoot,\n  committedLanes: Lanes,\n) {\n  while (nextEffect !== null) {\n    const fiber = nextEffect;\n    if ((fiber.flags & LayoutMask) !== NoFlags) {\n      const current = fiber.alternate;\n      setCurrentDebugFiberInDEV(fiber);\n      try {\n        commitLayoutEffectOnFiber(root, current, fiber, committedLanes);\n      } catch (error) {\n        reportUncaughtErrorInDEV(error);\n        captureCommitPhaseError(fiber, fiber.return, error);\n      }\n      resetCurrentDebugFiberInDEV();\n    }\n\n    if (fiber === subtreeRoot) {\n      nextEffect = null;\n      return;\n    }\n\n    const sibling = fiber.sibling;\n    if (sibling !== null) {\n      ensureCorrectReturnPointer(sibling, fiber.return);\n      nextEffect = sibling;\n      return;\n    }\n\n    nextEffect = fiber.return;\n  }\n}\n\nfunction disappearLayoutEffects_begin(subtreeRoot: Fiber) {\n  while (nextEffect !== null) {\n    const fiber = nextEffect;\n    const firstChild = fiber.child;\n\n    // TODO (Offscreen) Check: flags & (RefStatic | LayoutStatic)\n    switch (fiber.tag) {\n      case FunctionComponent:\n      case ForwardRef:\n      case MemoComponent:\n      case SimpleMemoComponent: {\n        if (\n          enableProfilerTimer &&\n          enableProfilerCommitHooks &&\n          fiber.mode & ProfileMode\n        ) {\n          try {\n            startLayoutEffectTimer();\n            commitHookEffectListUnmount(HookLayout, fiber, fiber.return);\n          } finally {\n            recordLayoutEffectDuration(fiber);\n          }\n        } else {\n          commitHookEffectListUnmount(HookLayout, fiber, fiber.return);\n        }\n        break;\n      }\n      case ClassComponent: {\n        // TODO (Offscreen) Check: flags & RefStatic\n        safelyDetachRef(fiber, fiber.return);\n\n        const instance = fiber.stateNode;\n        if (typeof instance.componentWillUnmount === 'function') {\n          safelyCallComponentWillUnmount(fiber, fiber.return, instance);\n        }\n        break;\n      }\n      case HostComponent: {\n        safelyDetachRef(fiber, fiber.return);\n        break;\n      }\n      case OffscreenComponent: {\n        // Check if this is a\n        const isHidden = fiber.memoizedState !== null;\n        if (isHidden) {\n          // Nested Offscreen tree is already hidden. Don't disappear\n          // its effects.\n          disappearLayoutEffects_complete(subtreeRoot);\n          continue;\n        }\n        break;\n      }\n    }\n\n    // TODO (Offscreen) Check: subtreeFlags & LayoutStatic\n    if (firstChild !== null) {\n      firstChild.return = fiber;\n      nextEffect = firstChild;\n    } else {\n      disappearLayoutEffects_complete(subtreeRoot);\n    }\n  }\n}\n\nfunction disappearLayoutEffects_complete(subtreeRoot: Fiber) {\n  while (nextEffect !== null) {\n    const fiber = nextEffect;\n\n    if (fiber === subtreeRoot) {\n      nextEffect = null;\n      return;\n    }\n\n    const sibling = fiber.sibling;\n    if (sibling !== null) {\n      sibling.return = fiber.return;\n      nextEffect = sibling;\n      return;\n    }\n\n    nextEffect = fiber.return;\n  }\n}\n\nfunction reappearLayoutEffects_begin(subtreeRoot: Fiber) {\n  while (nextEffect !== null) {\n    const fiber = nextEffect;\n    const firstChild = fiber.child;\n\n    if (fiber.tag === OffscreenComponent) {\n      const isHidden = fiber.memoizedState !== null;\n      if (isHidden) {\n        // Nested Offscreen tree is still hidden. Don't re-appear its effects.\n        reappearLayoutEffects_complete(subtreeRoot);\n        continue;\n      }\n    }\n\n    // TODO (Offscreen) Check: subtreeFlags & LayoutStatic\n    if (firstChild !== null) {\n      // This node may have been reused from a previous render, so we can't\n      // assume its return pointer is correct.\n      firstChild.return = fiber;\n      nextEffect = firstChild;\n    } else {\n      reappearLayoutEffects_complete(subtreeRoot);\n    }\n  }\n}\n\nfunction reappearLayoutEffects_complete(subtreeRoot: Fiber) {\n  while (nextEffect !== null) {\n    const fiber = nextEffect;\n\n    // TODO (Offscreen) Check: flags & LayoutStatic\n    setCurrentDebugFiberInDEV(fiber);\n    try {\n      reappearLayoutEffectsOnFiber(fiber);\n    } catch (error) {\n      reportUncaughtErrorInDEV(error);\n      captureCommitPhaseError(fiber, fiber.return, error);\n    }\n    resetCurrentDebugFiberInDEV();\n\n    if (fiber === subtreeRoot) {\n      nextEffect = null;\n      return;\n    }\n\n    const sibling = fiber.sibling;\n    if (sibling !== null) {\n      // This node may have been reused from a previous render, so we can't\n      // assume its return pointer is correct.\n      sibling.return = fiber.return;\n      nextEffect = sibling;\n      return;\n    }\n\n    nextEffect = fiber.return;\n  }\n}\n\nexport function commitPassiveMountEffects(\n  root: FiberRoot,\n  finishedWork: Fiber,\n): void {\n  nextEffect = finishedWork;\n  commitPassiveMountEffects_begin(finishedWork, root);\n}\n\nfunction commitPassiveMountEffects_begin(subtreeRoot: Fiber, root: FiberRoot) {\n  while (nextEffect !== null) {\n    const fiber = nextEffect;\n    const firstChild = fiber.child;\n    if ((fiber.subtreeFlags & PassiveMask) !== NoFlags && firstChild !== null) {\n      ensureCorrectReturnPointer(firstChild, fiber);\n      nextEffect = firstChild;\n    } else {\n      commitPassiveMountEffects_complete(subtreeRoot, root);\n    }\n  }\n}\n\nfunction commitPassiveMountEffects_complete(\n  subtreeRoot: Fiber,\n  root: FiberRoot,\n) {\n  while (nextEffect !== null) {\n    const fiber = nextEffect;\n    if ((fiber.flags & Passive) !== NoFlags) {\n      setCurrentDebugFiberInDEV(fiber);\n      try {\n        commitPassiveMountOnFiber(root, fiber);\n      } catch (error) {\n        reportUncaughtErrorInDEV(error);\n        captureCommitPhaseError(fiber, fiber.return, error);\n      }\n      resetCurrentDebugFiberInDEV();\n    }\n\n    if (fiber === subtreeRoot) {\n      nextEffect = null;\n      return;\n    }\n\n    const sibling = fiber.sibling;\n    if (sibling !== null) {\n      ensureCorrectReturnPointer(sibling, fiber.return);\n      nextEffect = sibling;\n      return;\n    }\n\n    nextEffect = fiber.return;\n  }\n}\n\nfunction commitPassiveMountOnFiber(\n  finishedRoot: FiberRoot,\n  finishedWork: Fiber,\n): void {\n  switch (finishedWork.tag) {\n    case FunctionComponent:\n    case ForwardRef:\n    case SimpleMemoComponent: {\n      if (\n        enableProfilerTimer &&\n        enableProfilerCommitHooks &&\n        finishedWork.mode & ProfileMode\n      ) {\n        startPassiveEffectTimer();\n        try {\n          commitHookEffectListMount(HookPassive | HookHasEffect, finishedWork);\n        } finally {\n          recordPassiveEffectDuration(finishedWork);\n        }\n      } else {\n        commitHookEffectListMount(HookPassive | HookHasEffect, finishedWork);\n      }\n      break;\n    }\n  }\n}\n\nexport function commitPassiveUnmountEffects(firstChild: Fiber): void {\n  nextEffect = firstChild;\n  commitPassiveUnmountEffects_begin();\n}\n\nfunction commitPassiveUnmountEffects_begin() {\n  while (nextEffect !== null) {\n    const fiber = nextEffect;\n    const child = fiber.child;\n\n    if ((nextEffect.flags & ChildDeletion) !== NoFlags) {\n      const deletions = fiber.deletions;\n      if (deletions !== null) {\n        for (let i = 0; i < deletions.length; i++) {\n          const fiberToDelete = deletions[i];\n          nextEffect = fiberToDelete;\n          commitPassiveUnmountEffectsInsideOfDeletedTree_begin(\n            fiberToDelete,\n            fiber,\n          );\n        }\n\n        if (deletedTreeCleanUpLevel >= 1) {\n          // A fiber was deleted from this parent fiber, but it's still part of\n          // the previous (alternate) parent fiber's list of children. Because\n          // children are a linked list, an earlier sibling that's still alive\n          // will be connected to the deleted fiber via its `alternate`:\n          //\n          //   live fiber\n          //   --alternate--> previous live fiber\n          //   --sibling--> deleted fiber\n          //\n          // We can't disconnect `alternate` on nodes that haven't been deleted\n          // yet, but we can disconnect the `sibling` and `child` pointers.\n          const previousFiber = fiber.alternate;\n          if (previousFiber !== null) {\n            let detachedChild = previousFiber.child;\n            if (detachedChild !== null) {\n              previousFiber.child = null;\n              do {\n                const detachedSibling = detachedChild.sibling;\n                detachedChild.sibling = null;\n                detachedChild = detachedSibling;\n              } while (detachedChild !== null);\n            }\n          }\n        }\n\n        nextEffect = fiber;\n      }\n    }\n\n    if ((fiber.subtreeFlags & PassiveMask) !== NoFlags && child !== null) {\n      ensureCorrectReturnPointer(child, fiber);\n      nextEffect = child;\n    } else {\n      commitPassiveUnmountEffects_complete();\n    }\n  }\n}\n\nfunction commitPassiveUnmountEffects_complete() {\n  while (nextEffect !== null) {\n    const fiber = nextEffect;\n    if ((fiber.flags & Passive) !== NoFlags) {\n      setCurrentDebugFiberInDEV(fiber);\n      commitPassiveUnmountOnFiber(fiber);\n      resetCurrentDebugFiberInDEV();\n    }\n\n    const sibling = fiber.sibling;\n    if (sibling !== null) {\n      ensureCorrectReturnPointer(sibling, fiber.return);\n      nextEffect = sibling;\n      return;\n    }\n\n    nextEffect = fiber.return;\n  }\n}\n\nfunction commitPassiveUnmountOnFiber(finishedWork: Fiber): void {\n  switch (finishedWork.tag) {\n    case FunctionComponent:\n    case ForwardRef:\n    case SimpleMemoComponent: {\n      if (\n        enableProfilerTimer &&\n        enableProfilerCommitHooks &&\n        finishedWork.mode & ProfileMode\n      ) {\n        startPassiveEffectTimer();\n        commitHookEffectListUnmount(\n          HookPassive | HookHasEffect,\n          finishedWork,\n          finishedWork.return,\n        );\n        recordPassiveEffectDuration(finishedWork);\n      } else {\n        commitHookEffectListUnmount(\n          HookPassive | HookHasEffect,\n          finishedWork,\n          finishedWork.return,\n        );\n      }\n      break;\n    }\n  }\n}\n\nfunction commitPassiveUnmountEffectsInsideOfDeletedTree_begin(\n  deletedSubtreeRoot: Fiber,\n  nearestMountedAncestor: Fiber | null,\n) {\n  while (nextEffect !== null) {\n    const fiber = nextEffect;\n\n    // Deletion effects fire in parent -> child order\n    // TODO: Check if fiber has a PassiveStatic flag\n    setCurrentDebugFiberInDEV(fiber);\n    commitPassiveUnmountInsideDeletedTreeOnFiber(fiber, nearestMountedAncestor);\n    resetCurrentDebugFiberInDEV();\n\n    const child = fiber.child;\n    // TODO: Only traverse subtree if it has a PassiveStatic flag. (But, if we\n    // do this, still need to handle `deletedTreeCleanUpLevel` correctly.)\n    if (child !== null) {\n      ensureCorrectReturnPointer(child, fiber);\n      nextEffect = child;\n    } else {\n      commitPassiveUnmountEffectsInsideOfDeletedTree_complete(\n        deletedSubtreeRoot,\n      );\n    }\n  }\n}\n\nfunction commitPassiveUnmountEffectsInsideOfDeletedTree_complete(\n  deletedSubtreeRoot: Fiber,\n) {\n  while (nextEffect !== null) {\n    const fiber = nextEffect;\n    const sibling = fiber.sibling;\n    const returnFiber = fiber.return;\n\n    if (deletedTreeCleanUpLevel >= 2) {\n      // Recursively traverse the entire deleted tree and clean up fiber fields.\n      // This is more aggressive than ideal, and the long term goal is to only\n      // have to detach the deleted tree at the root.\n      detachFiberAfterEffects(fiber);\n      if (fiber === deletedSubtreeRoot) {\n        nextEffect = null;\n        return;\n      }\n    } else {\n      // This is the default branch (level 0). We do not recursively clear all\n      // the fiber fields. Only the root of the deleted subtree.\n      if (fiber === deletedSubtreeRoot) {\n        detachFiberAfterEffects(fiber);\n        nextEffect = null;\n        return;\n      }\n    }\n\n    if (sibling !== null) {\n      ensureCorrectReturnPointer(sibling, returnFiber);\n      nextEffect = sibling;\n      return;\n    }\n\n    nextEffect = returnFiber;\n  }\n}\n\nfunction commitPassiveUnmountInsideDeletedTreeOnFiber(\n  current: Fiber,\n  nearestMountedAncestor: Fiber | null,\n): void {\n  switch (current.tag) {\n    case FunctionComponent:\n    case ForwardRef:\n    case SimpleMemoComponent: {\n      if (\n        enableProfilerTimer &&\n        enableProfilerCommitHooks &&\n        current.mode & ProfileMode\n      ) {\n        startPassiveEffectTimer();\n        commitHookEffectListUnmount(\n          HookPassive,\n          current,\n          nearestMountedAncestor,\n        );\n        recordPassiveEffectDuration(current);\n      } else {\n        commitHookEffectListUnmount(\n          HookPassive,\n          current,\n          nearestMountedAncestor,\n        );\n      }\n      break;\n    }\n  }\n}\n\nlet didWarnWrongReturnPointer = false;\nfunction ensureCorrectReturnPointer(fiber, expectedReturnFiber) {\n  if (__DEV__) {\n    if (!didWarnWrongReturnPointer && fiber.return !== expectedReturnFiber) {\n      didWarnWrongReturnPointer = true;\n      console.error(\n        'Internal React error: Return pointer is inconsistent ' +\n          'with parent.',\n      );\n    }\n  }\n\n  // TODO: Remove this assignment once we're confident that it won't break\n  // anything, by checking the warning logs for the above invariant\n  fiber.return = expectedReturnFiber;\n}\n\n// TODO: Reuse reappearLayoutEffects traversal here?\nfunction invokeLayoutEffectMountInDEV(fiber: Fiber): void {\n  if (__DEV__ && enableStrictEffects) {\n    // We don't need to re-check StrictEffectsMode here.\n    // This function is only called if that check has already passed.\n    switch (fiber.tag) {\n      case FunctionComponent:\n      case ForwardRef:\n      case SimpleMemoComponent: {\n        try {\n          commitHookEffectListMount(HookLayout | HookHasEffect, fiber);\n        } catch (error) {\n          reportUncaughtErrorInDEV(error);\n          captureCommitPhaseError(fiber, fiber.return, error);\n        }\n        break;\n      }\n      case ClassComponent: {\n        const instance = fiber.stateNode;\n        try {\n          instance.componentDidMount();\n        } catch (error) {\n          reportUncaughtErrorInDEV(error);\n          captureCommitPhaseError(fiber, fiber.return, error);\n        }\n        break;\n      }\n    }\n  }\n}\n\nfunction invokePassiveEffectMountInDEV(fiber: Fiber): void {\n  if (__DEV__ && enableStrictEffects) {\n    // We don't need to re-check StrictEffectsMode here.\n    // This function is only called if that check has already passed.\n    switch (fiber.tag) {\n      case FunctionComponent:\n      case ForwardRef:\n      case SimpleMemoComponent: {\n        try {\n          commitHookEffectListMount(HookPassive | HookHasEffect, fiber);\n        } catch (error) {\n          reportUncaughtErrorInDEV(error);\n          captureCommitPhaseError(fiber, fiber.return, error);\n        }\n        break;\n      }\n    }\n  }\n}\n\nfunction invokeLayoutEffectUnmountInDEV(fiber: Fiber): void {\n  if (__DEV__ && enableStrictEffects) {\n    // We don't need to re-check StrictEffectsMode here.\n    // This function is only called if that check has already passed.\n    switch (fiber.tag) {\n      case FunctionComponent:\n      case ForwardRef:\n      case SimpleMemoComponent: {\n        try {\n          commitHookEffectListUnmount(\n            HookLayout | HookHasEffect,\n            fiber,\n            fiber.return,\n          );\n        } catch (error) {\n          reportUncaughtErrorInDEV(error);\n          captureCommitPhaseError(fiber, fiber.return, error);\n        }\n        break;\n      }\n      case ClassComponent: {\n        const instance = fiber.stateNode;\n        if (typeof instance.componentWillUnmount === 'function') {\n          safelyCallComponentWillUnmount(fiber, fiber.return, instance);\n        }\n        break;\n      }\n    }\n  }\n}\n\nfunction invokePassiveEffectUnmountInDEV(fiber: Fiber): void {\n  if (__DEV__ && enableStrictEffects) {\n    // We don't need to re-check StrictEffectsMode here.\n    // This function is only called if that check has already passed.\n    switch (fiber.tag) {\n      case FunctionComponent:\n      case ForwardRef:\n      case SimpleMemoComponent: {\n        try {\n          commitHookEffectListUnmount(\n            HookPassive | HookHasEffect,\n            fiber,\n            fiber.return,\n          );\n        } catch (error) {\n          reportUncaughtErrorInDEV(error);\n          captureCommitPhaseError(fiber, fiber.return, error);\n        }\n      }\n    }\n  }\n}\n\nexport {\n  commitResetTextContent,\n  commitPlacement,\n  commitDeletion,\n  commitWork,\n  commitAttachRef,\n  commitDetachRef,\n  invokeLayoutEffectMountInDEV,\n  invokeLayoutEffectUnmountInDEV,\n  invokePassiveEffectMountInDEV,\n  invokePassiveEffectUnmountInDEV,\n};\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Fiber} from 'react-reconciler/src/ReactInternalTypes';\nimport type {Instance} from './ReactFiberHostConfig';\n\nimport invariant from 'shared/invariant';\nimport {HostComponent, HostText} from 'react-reconciler/src/ReactWorkTags';\nimport getComponentNameFromType from 'shared/getComponentNameFromType';\nimport {\n  findFiberRoot,\n  getBoundingRect,\n  getInstanceFromNode,\n  getTextContent,\n  isHiddenSubtree,\n  matchAccessibilityRole,\n  setFocusIfFocusable,\n  setupIntersectionObserver,\n  supportsTestSelectors,\n} from './ReactFiberHostConfig';\n\nlet COMPONENT_TYPE = 0b000;\nlet HAS_PSEUDO_CLASS_TYPE = 0b001;\nlet ROLE_TYPE = 0b010;\nlet TEST_NAME_TYPE = 0b011;\nlet TEXT_TYPE = 0b100;\n\nif (typeof Symbol === 'function' && Symbol.for) {\n  const symbolFor = Symbol.for;\n  COMPONENT_TYPE = symbolFor('selector.component');\n  HAS_PSEUDO_CLASS_TYPE = symbolFor('selector.has_pseudo_class');\n  ROLE_TYPE = symbolFor('selector.role');\n  TEST_NAME_TYPE = symbolFor('selector.test_id');\n  TEXT_TYPE = symbolFor('selector.text');\n}\n\ntype Type = Symbol | number;\n\ntype ComponentSelector = {|\n  $$typeof: Type,\n  value: React$AbstractComponent<empty, mixed>,\n|};\n\ntype HasPseudoClassSelector = {|\n  $$typeof: Type,\n  value: Array<Selector>,\n|};\n\ntype RoleSelector = {|\n  $$typeof: Type,\n  value: string,\n|};\n\ntype TextSelector = {|\n  $$typeof: Type,\n  value: string,\n|};\n\ntype TestNameSelector = {|\n  $$typeof: Type,\n  value: string,\n|};\n\ntype Selector =\n  | ComponentSelector\n  | HasPseudoClassSelector\n  | RoleSelector\n  | TextSelector\n  | TestNameSelector;\n\nexport function createComponentSelector(\n  component: React$AbstractComponent<empty, mixed>,\n): ComponentSelector {\n  return {\n    $$typeof: COMPONENT_TYPE,\n    value: component,\n  };\n}\n\nexport function createHasPseudoClassSelector(\n  selectors: Array<Selector>,\n): HasPseudoClassSelector {\n  return {\n    $$typeof: HAS_PSEUDO_CLASS_TYPE,\n    value: selectors,\n  };\n}\n\nexport function createRoleSelector(role: string): RoleSelector {\n  return {\n    $$typeof: ROLE_TYPE,\n    value: role,\n  };\n}\n\nexport function createTextSelector(text: string): TextSelector {\n  return {\n    $$typeof: TEXT_TYPE,\n    value: text,\n  };\n}\n\nexport function createTestNameSelector(id: string): TestNameSelector {\n  return {\n    $$typeof: TEST_NAME_TYPE,\n    value: id,\n  };\n}\n\nfunction findFiberRootForHostRoot(hostRoot: Instance): Fiber {\n  const maybeFiber = getInstanceFromNode((hostRoot: any));\n  if (maybeFiber != null) {\n    invariant(\n      typeof maybeFiber.memoizedProps['data-testname'] === 'string',\n      'Invalid host root specified. Should be either a React container or a node with a testname attribute.',\n    );\n    return ((maybeFiber: any): Fiber);\n  } else {\n    const fiberRoot = findFiberRoot(hostRoot);\n    invariant(\n      fiberRoot !== null,\n      'Could not find React container within specified host subtree.',\n    );\n    // The Flow type for FiberRoot is a little funky.\n    // createFiberRoot() cheats this by treating the root as :any and adding stateNode lazily.\n    return ((fiberRoot: any).stateNode.current: Fiber);\n  }\n}\n\nfunction matchSelector(fiber: Fiber, selector: Selector): boolean {\n  switch (selector.$$typeof) {\n    case COMPONENT_TYPE:\n      if (fiber.type === selector.value) {\n        return true;\n      }\n      break;\n    case HAS_PSEUDO_CLASS_TYPE:\n      return hasMatchingPaths(\n        fiber,\n        ((selector: any): HasPseudoClassSelector).value,\n      );\n    case ROLE_TYPE:\n      if (fiber.tag === HostComponent) {\n        const node = fiber.stateNode;\n        if (\n          matchAccessibilityRole(node, ((selector: any): RoleSelector).value)\n        ) {\n          return true;\n        }\n      }\n      break;\n    case TEXT_TYPE:\n      if (fiber.tag === HostComponent || fiber.tag === HostText) {\n        const textContent = getTextContent(fiber);\n        if (\n          textContent !== null &&\n          textContent.indexOf(((selector: any): TextSelector).value) >= 0\n        ) {\n          return true;\n        }\n      }\n      break;\n    case TEST_NAME_TYPE:\n      if (fiber.tag === HostComponent) {\n        const dataTestID = fiber.memoizedProps['data-testname'];\n        if (\n          typeof dataTestID === 'string' &&\n          dataTestID.toLowerCase() ===\n            ((selector: any): TestNameSelector).value.toLowerCase()\n        ) {\n          return true;\n        }\n      }\n      break;\n    default:\n      invariant(null, 'Invalid selector type %s specified.', selector);\n      break;\n  }\n\n  return false;\n}\n\nfunction selectorToString(selector: Selector): string | null {\n  switch (selector.$$typeof) {\n    case COMPONENT_TYPE:\n      const displayName = getComponentNameFromType(selector.value) || 'Unknown';\n      return `<${displayName}>`;\n    case HAS_PSEUDO_CLASS_TYPE:\n      return `:has(${selectorToString(selector) || ''})`;\n    case ROLE_TYPE:\n      return `[role=\"${((selector: any): RoleSelector).value}\"]`;\n    case TEXT_TYPE:\n      return `\"${((selector: any): TextSelector).value}\"`;\n    case TEST_NAME_TYPE:\n      return `[data-testname=\"${((selector: any): TestNameSelector).value}\"]`;\n    default:\n      invariant(null, 'Invalid selector type %s specified.', selector);\n      break;\n  }\n\n  return null;\n}\n\nfunction findPaths(root: Fiber, selectors: Array<Selector>): Array<Fiber> {\n  const matchingFibers: Array<Fiber> = [];\n\n  const stack = [root, 0];\n  let index = 0;\n  while (index < stack.length) {\n    const fiber = ((stack[index++]: any): Fiber);\n    let selectorIndex = ((stack[index++]: any): number);\n    let selector = selectors[selectorIndex];\n\n    if (fiber.tag === HostComponent && isHiddenSubtree(fiber)) {\n      continue;\n    } else {\n      while (selector != null && matchSelector(fiber, selector)) {\n        selectorIndex++;\n        selector = selectors[selectorIndex];\n      }\n    }\n\n    if (selectorIndex === selectors.length) {\n      matchingFibers.push(fiber);\n    } else {\n      let child = fiber.child;\n      while (child !== null) {\n        stack.push(child, selectorIndex);\n        child = child.sibling;\n      }\n    }\n  }\n\n  return matchingFibers;\n}\n\n// Same as findPaths but with eager bailout on first match\nfunction hasMatchingPaths(root: Fiber, selectors: Array<Selector>): boolean {\n  const stack = [root, 0];\n  let index = 0;\n  while (index < stack.length) {\n    const fiber = ((stack[index++]: any): Fiber);\n    let selectorIndex = ((stack[index++]: any): number);\n    let selector = selectors[selectorIndex];\n\n    if (fiber.tag === HostComponent && isHiddenSubtree(fiber)) {\n      continue;\n    } else {\n      while (selector != null && matchSelector(fiber, selector)) {\n        selectorIndex++;\n        selector = selectors[selectorIndex];\n      }\n    }\n\n    if (selectorIndex === selectors.length) {\n      return true;\n    } else {\n      let child = fiber.child;\n      while (child !== null) {\n        stack.push(child, selectorIndex);\n        child = child.sibling;\n      }\n    }\n  }\n\n  return false;\n}\n\nexport function findAllNodes(\n  hostRoot: Instance,\n  selectors: Array<Selector>,\n): Array<Instance> {\n  if (!supportsTestSelectors) {\n    invariant(false, 'Test selector API is not supported by this renderer.');\n  }\n\n  const root = findFiberRootForHostRoot(hostRoot);\n  const matchingFibers = findPaths(root, selectors);\n\n  const instanceRoots: Array<Instance> = [];\n\n  const stack = Array.from(matchingFibers);\n  let index = 0;\n  while (index < stack.length) {\n    const node = ((stack[index++]: any): Fiber);\n    if (node.tag === HostComponent) {\n      if (isHiddenSubtree(node)) {\n        continue;\n      }\n      instanceRoots.push(node.stateNode);\n    } else {\n      let child = node.child;\n      while (child !== null) {\n        stack.push(child);\n        child = child.sibling;\n      }\n    }\n  }\n\n  return instanceRoots;\n}\n\nexport function getFindAllNodesFailureDescription(\n  hostRoot: Instance,\n  selectors: Array<Selector>,\n): string | null {\n  if (!supportsTestSelectors) {\n    invariant(false, 'Test selector API is not supported by this renderer.');\n  }\n\n  const root = findFiberRootForHostRoot(hostRoot);\n\n  let maxSelectorIndex: number = 0;\n  const matchedNames = [];\n\n  // The logic of this loop should be kept in sync with findPaths()\n  const stack = [root, 0];\n  let index = 0;\n  while (index < stack.length) {\n    const fiber = ((stack[index++]: any): Fiber);\n    let selectorIndex = ((stack[index++]: any): number);\n    const selector = selectors[selectorIndex];\n\n    if (fiber.tag === HostComponent && isHiddenSubtree(fiber)) {\n      continue;\n    } else if (matchSelector(fiber, selector)) {\n      matchedNames.push(selectorToString(selector));\n      selectorIndex++;\n\n      if (selectorIndex > maxSelectorIndex) {\n        maxSelectorIndex = selectorIndex;\n      }\n    }\n\n    if (selectorIndex < selectors.length) {\n      let child = fiber.child;\n      while (child !== null) {\n        stack.push(child, selectorIndex);\n        child = child.sibling;\n      }\n    }\n  }\n\n  if (maxSelectorIndex < selectors.length) {\n    const unmatchedNames = [];\n    for (let i = maxSelectorIndex; i < selectors.length; i++) {\n      unmatchedNames.push(selectorToString(selectors[i]));\n    }\n\n    return (\n      'findAllNodes was able to match part of the selector:\\n' +\n      `  ${matchedNames.join(' > ')}\\n\\n` +\n      'No matching component was found for:\\n' +\n      `  ${unmatchedNames.join(' > ')}`\n    );\n  }\n\n  return null;\n}\n\nexport type BoundingRect = {|\n  x: number,\n  y: number,\n  width: number,\n  height: number,\n|};\n\nexport function findBoundingRects(\n  hostRoot: Instance,\n  selectors: Array<Selector>,\n): Array<BoundingRect> {\n  if (!supportsTestSelectors) {\n    invariant(false, 'Test selector API is not supported by this renderer.');\n  }\n\n  const instanceRoots = findAllNodes(hostRoot, selectors);\n\n  const boundingRects: Array<BoundingRect> = [];\n  for (let i = 0; i < instanceRoots.length; i++) {\n    boundingRects.push(getBoundingRect(instanceRoots[i]));\n  }\n\n  for (let i = boundingRects.length - 1; i > 0; i--) {\n    const targetRect = boundingRects[i];\n    const targetLeft = targetRect.x;\n    const targetRight = targetLeft + targetRect.width;\n    const targetTop = targetRect.y;\n    const targetBottom = targetTop + targetRect.height;\n\n    for (let j = i - 1; j >= 0; j--) {\n      if (i !== j) {\n        const otherRect = boundingRects[j];\n        const otherLeft = otherRect.x;\n        const otherRight = otherLeft + otherRect.width;\n        const otherTop = otherRect.y;\n        const otherBottom = otherTop + otherRect.height;\n\n        // Merging all rects to the minimums set would be complicated,\n        // but we can handle the most common cases:\n        // 1. completely overlapping rects\n        // 2. adjacent rects that are the same width or height (e.g. items in a list)\n        //\n        // Even given the above constraints,\n        // we still won't end up with the fewest possible rects without doing multiple passes,\n        // but it's good enough for this purpose.\n\n        if (\n          targetLeft >= otherLeft &&\n          targetTop >= otherTop &&\n          targetRight <= otherRight &&\n          targetBottom <= otherBottom\n        ) {\n          // Complete overlapping rects; remove the inner one.\n          boundingRects.splice(i, 1);\n          break;\n        } else if (\n          targetLeft === otherLeft &&\n          targetRect.width === otherRect.width &&\n          !(otherBottom < targetTop) &&\n          !(otherTop > targetBottom)\n        ) {\n          // Adjacent vertical rects; merge them.\n          if (otherTop > targetTop) {\n            otherRect.height += otherTop - targetTop;\n            otherRect.y = targetTop;\n          }\n          if (otherBottom < targetBottom) {\n            otherRect.height = targetBottom - otherTop;\n          }\n\n          boundingRects.splice(i, 1);\n          break;\n        } else if (\n          targetTop === otherTop &&\n          targetRect.height === otherRect.height &&\n          !(otherRight < targetLeft) &&\n          !(otherLeft > targetRight)\n        ) {\n          // Adjacent horizontal rects; merge them.\n          if (otherLeft > targetLeft) {\n            otherRect.width += otherLeft - targetLeft;\n            otherRect.x = targetLeft;\n          }\n          if (otherRight < targetRight) {\n            otherRect.width = targetRight - otherLeft;\n          }\n\n          boundingRects.splice(i, 1);\n          break;\n        }\n      }\n    }\n  }\n\n  return boundingRects;\n}\n\nexport function focusWithin(\n  hostRoot: Instance,\n  selectors: Array<Selector>,\n): boolean {\n  if (!supportsTestSelectors) {\n    invariant(false, 'Test selector API is not supported by this renderer.');\n  }\n\n  const root = findFiberRootForHostRoot(hostRoot);\n  const matchingFibers = findPaths(root, selectors);\n\n  const stack = Array.from(matchingFibers);\n  let index = 0;\n  while (index < stack.length) {\n    const fiber = ((stack[index++]: any): Fiber);\n    if (isHiddenSubtree(fiber)) {\n      continue;\n    }\n    if (fiber.tag === HostComponent) {\n      const node = fiber.stateNode;\n      if (setFocusIfFocusable(node)) {\n        return true;\n      }\n    }\n    let child = fiber.child;\n    while (child !== null) {\n      stack.push(child);\n      child = child.sibling;\n    }\n  }\n\n  return false;\n}\n\nconst commitHooks: Array<Function> = [];\n\nexport function onCommitRoot(): void {\n  if (supportsTestSelectors) {\n    commitHooks.forEach(commitHook => commitHook());\n  }\n}\n\nexport type IntersectionObserverOptions = Object;\n\nexport type ObserveVisibleRectsCallback = (\n  intersections: Array<{ratio: number, rect: BoundingRect}>,\n) => void;\n\nexport function observeVisibleRects(\n  hostRoot: Instance,\n  selectors: Array<Selector>,\n  callback: (intersections: Array<{ratio: number, rect: BoundingRect}>) => void,\n  options?: IntersectionObserverOptions,\n): {|disconnect: () => void|} {\n  if (!supportsTestSelectors) {\n    invariant(false, 'Test selector API is not supported by this renderer.');\n  }\n\n  const instanceRoots = findAllNodes(hostRoot, selectors);\n\n  const {disconnect, observe, unobserve} = setupIntersectionObserver(\n    instanceRoots,\n    callback,\n    options,\n  );\n\n  // When React mutates the host environment, we may need to change what we're listening to.\n  const commitHook = () => {\n    const nextInstanceRoots = findAllNodes(hostRoot, selectors);\n\n    instanceRoots.forEach(target => {\n      if (nextInstanceRoots.indexOf(target) < 0) {\n        unobserve(target);\n      }\n    });\n\n    nextInstanceRoots.forEach(target => {\n      if (instanceRoots.indexOf(target) < 0) {\n        observe(target);\n      }\n    });\n  };\n\n  commitHooks.push(commitHook);\n\n  return {\n    disconnect: () => {\n      // Stop listening for React mutations:\n      const index = commitHooks.indexOf(commitHook);\n      if (index >= 0) {\n        commitHooks.splice(index, 1);\n      }\n\n      // Disconnect the host observer:\n      disconnect();\n    },\n  };\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Wakeable} from 'shared/ReactTypes';\nimport type {Fiber, FiberRoot} from './ReactInternalTypes';\nimport type {Lanes, Lane} from './ReactFiberLane.old';\nimport type {SuspenseState} from './ReactFiberSuspenseComponent.old';\nimport type {StackCursor} from './ReactFiberStack.old';\nimport type {Flags} from './ReactFiberFlags';\n\nimport {\n  warnAboutDeprecatedLifecycles,\n  enableSuspenseServerRenderer,\n  replayFailedUnitOfWorkWithInvokeGuardedCallback,\n  enableCreateEventHandleAPI,\n  enableProfilerTimer,\n  enableProfilerCommitHooks,\n  enableProfilerNestedUpdatePhase,\n  enableProfilerNestedUpdateScheduledHook,\n  deferRenderPhaseUpdateToNextBatch,\n  enableDebugTracing,\n  enableSchedulingProfiler,\n  disableSchedulerTimeoutInWorkLoop,\n  enableStrictEffects,\n  skipUnmountedBoundaries,\n  enableUpdaterTracking,\n  warnOnSubscriptionInsideStartTransition,\n} from 'shared/ReactFeatureFlags';\nimport ReactSharedInternals from 'shared/ReactSharedInternals';\nimport invariant from 'shared/invariant';\n\nimport {\n  // Aliased because `act` will override and push to an internal queue\n  scheduleCallback as Scheduler_scheduleCallback,\n  cancelCallback as Scheduler_cancelCallback,\n  shouldYield,\n  requestPaint,\n  now,\n  ImmediatePriority as ImmediateSchedulerPriority,\n  UserBlockingPriority as UserBlockingSchedulerPriority,\n  NormalPriority as NormalSchedulerPriority,\n  IdlePriority as IdleSchedulerPriority,\n} from './Scheduler';\nimport {\n  flushSyncCallbacks,\n  flushSyncCallbacksOnlyInLegacyMode,\n  scheduleSyncCallback,\n  scheduleLegacySyncCallback,\n} from './ReactFiberSyncTaskQueue.old';\nimport {\n  logCommitStarted,\n  logCommitStopped,\n  logLayoutEffectsStarted,\n  logLayoutEffectsStopped,\n  logPassiveEffectsStarted,\n  logPassiveEffectsStopped,\n  logRenderStarted,\n  logRenderStopped,\n} from './DebugTracing';\nimport {\n  markCommitStarted,\n  markCommitStopped,\n  markLayoutEffectsStarted,\n  markLayoutEffectsStopped,\n  markPassiveEffectsStarted,\n  markPassiveEffectsStopped,\n  markRenderStarted,\n  markRenderYielded,\n  markRenderStopped,\n} from './SchedulingProfiler';\n\nimport {\n  resetAfterCommit,\n  scheduleTimeout,\n  cancelTimeout,\n  noTimeout,\n  warnsIfNotActing,\n  afterActiveInstanceBlur,\n  clearContainer,\n  getCurrentEventPriority,\n  supportsMicrotasks,\n  errorHydratingContainer,\n  scheduleMicrotask,\n} from './ReactFiberHostConfig';\n\nimport {\n  createWorkInProgress,\n  assignFiberPropertiesInDEV,\n} from './ReactFiber.old';\nimport {\n  NoMode,\n  StrictLegacyMode,\n  ProfileMode,\n  ConcurrentMode,\n} from './ReactTypeOfMode';\nimport {\n  HostRoot,\n  IndeterminateComponent,\n  ClassComponent,\n  SuspenseComponent,\n  SuspenseListComponent,\n  FunctionComponent,\n  ForwardRef,\n  MemoComponent,\n  SimpleMemoComponent,\n  Profiler,\n} from './ReactWorkTags';\nimport {LegacyRoot} from './ReactRootTags';\nimport {\n  NoFlags,\n  Placement,\n  Incomplete,\n  HostEffectMask,\n  Hydrating,\n  BeforeMutationMask,\n  MutationMask,\n  LayoutMask,\n  PassiveMask,\n  MountPassiveDev,\n  MountLayoutDev,\n} from './ReactFiberFlags';\nimport {\n  NoLanes,\n  NoLane,\n  SyncLane,\n  NoTimestamp,\n  claimNextTransitionLane,\n  claimNextRetryLane,\n  includesSomeLane,\n  isSubsetOfLanes,\n  mergeLanes,\n  removeLanes,\n  pickArbitraryLane,\n  includesNonIdleWork,\n  includesOnlyRetries,\n  includesOnlyTransitions,\n  shouldTimeSlice,\n  getNextLanes,\n  markStarvedLanesAsExpired,\n  getLanesToRetrySynchronouslyOnError,\n  getMostRecentEventTime,\n  markRootUpdated,\n  markRootSuspended as markRootSuspended_dontCallThisOneDirectly,\n  markRootPinged,\n  markRootEntangled,\n  markRootFinished,\n  getHighestPriorityLane,\n  addFiberToLanesMap,\n  movePendingFibersToMemoized,\n} from './ReactFiberLane.old';\nimport {\n  DiscreteEventPriority,\n  ContinuousEventPriority,\n  DefaultEventPriority,\n  IdleEventPriority,\n  getCurrentUpdatePriority,\n  setCurrentUpdatePriority,\n  lowerEventPriority,\n  lanesToEventPriority,\n} from './ReactEventPriorities.old';\nimport {requestCurrentTransition, NoTransition} from './ReactFiberTransition';\nimport {beginWork as originalBeginWork} from './ReactFiberBeginWork.old';\nimport {completeWork} from './ReactFiberCompleteWork.old';\nimport {unwindWork, unwindInterruptedWork} from './ReactFiberUnwindWork.old';\nimport {\n  throwException,\n  createRootErrorUpdate,\n  createClassErrorUpdate,\n} from './ReactFiberThrow.old';\nimport {\n  commitBeforeMutationEffects,\n  commitLayoutEffects,\n  commitMutationEffects,\n  commitPassiveEffectDurations,\n  commitPassiveMountEffects,\n  commitPassiveUnmountEffects,\n  invokeLayoutEffectMountInDEV,\n  invokePassiveEffectMountInDEV,\n  invokeLayoutEffectUnmountInDEV,\n  invokePassiveEffectUnmountInDEV,\n} from './ReactFiberCommitWork.old';\nimport {enqueueUpdate} from './ReactUpdateQueue.old';\nimport {resetContextDependencies} from './ReactFiberNewContext.old';\nimport {\n  resetHooksAfterThrow,\n  ContextOnlyDispatcher,\n  getIsUpdatingOpaqueValueInRenderPhaseInDEV,\n} from './ReactFiberHooks.old';\nimport {createCapturedValue} from './ReactCapturedValue';\nimport {\n  push as pushToStack,\n  pop as popFromStack,\n  createCursor,\n} from './ReactFiberStack.old';\nimport {enqueueInterleavedUpdates} from './ReactFiberInterleavedUpdates.old';\n\nimport {\n  markNestedUpdateScheduled,\n  recordCommitTime,\n  resetNestedUpdateFlag,\n  startProfilerTimer,\n  stopProfilerTimerIfRunningAndRecordDelta,\n  syncNestedUpdateFlag,\n} from './ReactProfilerTimer.old';\n\n// DEV stuff\nimport getComponentNameFromFiber from 'react-reconciler/src/getComponentNameFromFiber';\nimport ReactStrictModeWarnings from './ReactStrictModeWarnings.old';\nimport {\n  isRendering as ReactCurrentDebugFiberIsRenderingInDEV,\n  current as ReactCurrentFiberCurrent,\n  resetCurrentFiber as resetCurrentDebugFiberInDEV,\n  setCurrentFiber as setCurrentDebugFiberInDEV,\n} from './ReactCurrentFiber';\nimport {\n  invokeGuardedCallback,\n  hasCaughtError,\n  clearCaughtError,\n} from 'shared/ReactErrorUtils';\nimport {\n  onCommitRoot as onCommitRootDevTools,\n  onPostCommitRoot as onPostCommitRootDevTools,\n  isDevToolsPresent,\n} from './ReactFiberDevToolsHook.old';\nimport {onCommitRoot as onCommitRootTestSelector} from './ReactTestSelectors';\n\nconst ceil = Math.ceil;\n\nconst {\n  ReactCurrentDispatcher,\n  ReactCurrentOwner,\n  ReactCurrentBatchConfig,\n  ReactCurrentActQueue,\n} = ReactSharedInternals;\n\ntype ExecutionContext = number;\n\nexport const NoContext = /*             */ 0b0000;\nconst BatchedContext = /*               */ 0b0001;\nconst RenderContext = /*                */ 0b0010;\nconst CommitContext = /*                */ 0b0100;\nexport const RetryAfterError = /*       */ 0b1000;\n\ntype RootExitStatus = 0 | 1 | 2 | 3 | 4 | 5;\nconst RootIncomplete = 0;\nconst RootFatalErrored = 1;\nconst RootErrored = 2;\nconst RootSuspended = 3;\nconst RootSuspendedWithDelay = 4;\nconst RootCompleted = 5;\n\n// Describes where we are in the React execution stack\nlet executionContext: ExecutionContext = NoContext;\n// The root we're working on\nlet workInProgressRoot: FiberRoot | null = null;\n// The fiber we're working on\nlet workInProgress: Fiber | null = null;\n// The lanes we're rendering\nlet workInProgressRootRenderLanes: Lanes = NoLanes;\n\n// Stack that allows components to change the render lanes for its subtree\n// This is a superset of the lanes we started working on at the root. The only\n// case where it's different from `workInProgressRootRenderLanes` is when we\n// enter a subtree that is hidden and needs to be unhidden: Suspense and\n// Offscreen component.\n//\n// Most things in the work loop should deal with workInProgressRootRenderLanes.\n// Most things in begin/complete phases should deal with subtreeRenderLanes.\nexport let subtreeRenderLanes: Lanes = NoLanes;\nconst subtreeRenderLanesCursor: StackCursor<Lanes> = createCursor(NoLanes);\n\n// Whether to root completed, errored, suspended, etc.\nlet workInProgressRootExitStatus: RootExitStatus = RootIncomplete;\n// A fatal error, if one is thrown\nlet workInProgressRootFatalError: mixed = null;\n// \"Included\" lanes refer to lanes that were worked on during this render. It's\n// slightly different than `renderLanes` because `renderLanes` can change as you\n// enter and exit an Offscreen tree. This value is the combination of all render\n// lanes for the entire render phase.\nlet workInProgressRootIncludedLanes: Lanes = NoLanes;\n// The work left over by components that were visited during this render. Only\n// includes unprocessed updates, not work in bailed out children.\nlet workInProgressRootSkippedLanes: Lanes = NoLanes;\n// Lanes that were updated (in an interleaved event) during this render.\nlet workInProgressRootUpdatedLanes: Lanes = NoLanes;\n// Lanes that were pinged (in an interleaved event) during this render.\nlet workInProgressRootPingedLanes: Lanes = NoLanes;\n\n// The most recent time we committed a fallback. This lets us ensure a train\n// model where we don't commit new loading states in too quick succession.\nlet globalMostRecentFallbackTime: number = 0;\nconst FALLBACK_THROTTLE_MS: number = 500;\n\n// The absolute time for when we should start giving up on rendering\n// more and prefer CPU suspense heuristics instead.\nlet workInProgressRootRenderTargetTime: number = Infinity;\n// How long a render is supposed to take before we start following CPU\n// suspense heuristics and opt out of rendering more content.\nconst RENDER_TIMEOUT_MS = 500;\n\nfunction resetRenderTimer() {\n  workInProgressRootRenderTargetTime = now() + RENDER_TIMEOUT_MS;\n}\n\nexport function getRenderTargetTime(): number {\n  return workInProgressRootRenderTargetTime;\n}\n\nlet hasUncaughtError = false;\nlet firstUncaughtError = null;\nlet legacyErrorBoundariesThatAlreadyFailed: Set<mixed> | null = null;\n\n// Only used when enableProfilerNestedUpdateScheduledHook is true;\n// to track which root is currently committing layout effects.\nlet rootCommittingMutationOrLayoutEffects: FiberRoot | null = null;\n\nlet rootDoesHavePassiveEffects: boolean = false;\nlet rootWithPendingPassiveEffects: FiberRoot | null = null;\nlet pendingPassiveEffectsLanes: Lanes = NoLanes;\nlet pendingPassiveProfilerEffects: Array<Fiber> = [];\n\n// Use these to prevent an infinite loop of nested updates\nconst NESTED_UPDATE_LIMIT = 50;\nlet nestedUpdateCount: number = 0;\nlet rootWithNestedUpdates: FiberRoot | null = null;\n\nconst NESTED_PASSIVE_UPDATE_LIMIT = 50;\nlet nestedPassiveUpdateCount: number = 0;\n\n// If two updates are scheduled within the same event, we should treat their\n// event times as simultaneous, even if the actual clock time has advanced\n// between the first and second call.\nlet currentEventTime: number = NoTimestamp;\nlet currentEventTransitionLane: Lanes = NoLanes;\n\nexport function getWorkInProgressRoot(): FiberRoot | null {\n  return workInProgressRoot;\n}\n\nexport function requestEventTime() {\n  if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {\n    // We're inside React, so it's fine to read the actual time.\n    return now();\n  }\n  // We're not inside React, so we may be in the middle of a browser event.\n  if (currentEventTime !== NoTimestamp) {\n    // Use the same start time for all updates until we enter React again.\n    return currentEventTime;\n  }\n  // This is the first update since React yielded. Compute a new start time.\n  currentEventTime = now();\n  return currentEventTime;\n}\n\nexport function getCurrentTime() {\n  return now();\n}\n\nexport function requestUpdateLane(fiber: Fiber): Lane {\n  // Special cases\n  const mode = fiber.mode;\n  if ((mode & ConcurrentMode) === NoMode) {\n    return (SyncLane: Lane);\n  } else if (\n    !deferRenderPhaseUpdateToNextBatch &&\n    (executionContext & RenderContext) !== NoContext &&\n    workInProgressRootRenderLanes !== NoLanes\n  ) {\n    // This is a render phase update. These are not officially supported. The\n    // old behavior is to give this the same \"thread\" (lanes) as\n    // whatever is currently rendering. So if you call `setState` on a component\n    // that happens later in the same render, it will flush. Ideally, we want to\n    // remove the special case and treat them as if they came from an\n    // interleaved event. Regardless, this pattern is not officially supported.\n    // This behavior is only a fallback. The flag only exists until we can roll\n    // out the setState warning, since existing code might accidentally rely on\n    // the current behavior.\n    return pickArbitraryLane(workInProgressRootRenderLanes);\n  }\n\n  const isTransition = requestCurrentTransition() !== NoTransition;\n  if (isTransition) {\n    if (\n      __DEV__ &&\n      warnOnSubscriptionInsideStartTransition &&\n      ReactCurrentBatchConfig._updatedFibers\n    ) {\n      ReactCurrentBatchConfig._updatedFibers.add(fiber);\n    }\n    // The algorithm for assigning an update to a lane should be stable for all\n    // updates at the same priority within the same event. To do this, the\n    // inputs to the algorithm must be the same.\n    //\n    // The trick we use is to cache the first of each of these inputs within an\n    // event. Then reset the cached values once we can be sure the event is\n    // over. Our heuristic for that is whenever we enter a concurrent work loop.\n    if (currentEventTransitionLane === NoLane) {\n      // All transitions within the same event are assigned the same lane.\n      currentEventTransitionLane = claimNextTransitionLane();\n    }\n    return currentEventTransitionLane;\n  }\n\n  // Updates originating inside certain React methods, like flushSync, have\n  // their priority set by tracking it with a context variable.\n  //\n  // The opaque type returned by the host config is internally a lane, so we can\n  // use that directly.\n  // TODO: Move this type conversion to the event priority module.\n  const updateLane: Lane = (getCurrentUpdatePriority(): any);\n  if (updateLane !== NoLane) {\n    return updateLane;\n  }\n\n  // This update originated outside React. Ask the host environment for an\n  // appropriate priority, based on the type of event.\n  //\n  // The opaque type returned by the host config is internally a lane, so we can\n  // use that directly.\n  // TODO: Move this type conversion to the event priority module.\n  const eventLane: Lane = (getCurrentEventPriority(): any);\n  return eventLane;\n}\n\nfunction requestRetryLane(fiber: Fiber) {\n  // This is a fork of `requestUpdateLane` designed specifically for Suspense\n  // \"retries\" — a special update that attempts to flip a Suspense boundary\n  // from its placeholder state to its primary/resolved state.\n\n  // Special cases\n  const mode = fiber.mode;\n  if ((mode & ConcurrentMode) === NoMode) {\n    return (SyncLane: Lane);\n  }\n\n  return claimNextRetryLane();\n}\n\nexport function scheduleUpdateOnFiber(\n  fiber: Fiber,\n  lane: Lane,\n  eventTime: number,\n): FiberRoot | null {\n  checkForNestedUpdates();\n  warnAboutRenderPhaseUpdatesInDEV(fiber);\n\n  const root = markUpdateLaneFromFiberToRoot(fiber, lane);\n  if (root === null) {\n    return null;\n  }\n\n  if (enableUpdaterTracking) {\n    if (isDevToolsPresent) {\n      addFiberToLanesMap(root, fiber, lane);\n    }\n  }\n\n  // Mark that the root has a pending update.\n  markRootUpdated(root, lane, eventTime);\n\n  if (enableProfilerTimer && enableProfilerNestedUpdateScheduledHook) {\n    if (\n      (executionContext & CommitContext) !== NoContext &&\n      root === rootCommittingMutationOrLayoutEffects\n    ) {\n      if (fiber.mode & ProfileMode) {\n        let current = fiber;\n        while (current !== null) {\n          if (current.tag === Profiler) {\n            const {id, onNestedUpdateScheduled} = current.memoizedProps;\n            if (typeof onNestedUpdateScheduled === 'function') {\n              onNestedUpdateScheduled(id);\n            }\n          }\n          current = current.return;\n        }\n      }\n    }\n  }\n\n  // TODO: Consolidate with `isInterleavedUpdate` check\n  if (root === workInProgressRoot) {\n    // Received an update to a tree that's in the middle of rendering. Mark\n    // that there was an interleaved update work on this root. Unless the\n    // `deferRenderPhaseUpdateToNextBatch` flag is off and this is a render\n    // phase update. In that case, we don't treat render phase updates as if\n    // they were interleaved, for backwards compat reasons.\n    if (\n      deferRenderPhaseUpdateToNextBatch ||\n      (executionContext & RenderContext) === NoContext\n    ) {\n      workInProgressRootUpdatedLanes = mergeLanes(\n        workInProgressRootUpdatedLanes,\n        lane,\n      );\n    }\n    if (workInProgressRootExitStatus === RootSuspendedWithDelay) {\n      // The root already suspended with a delay, which means this render\n      // definitely won't finish. Since we have a new update, let's mark it as\n      // suspended now, right before marking the incoming update. This has the\n      // effect of interrupting the current render and switching to the update.\n      // TODO: Make sure this doesn't override pings that happen while we've\n      // already started rendering.\n      markRootSuspended(root, workInProgressRootRenderLanes);\n    }\n  }\n\n  ensureRootIsScheduled(root, eventTime);\n  if (\n    lane === SyncLane &&\n    executionContext === NoContext &&\n    (fiber.mode & ConcurrentMode) === NoMode &&\n    // Treat `act` as if it's inside `batchedUpdates`, even in legacy mode.\n    !(__DEV__ && ReactCurrentActQueue.isBatchingLegacy)\n  ) {\n    // Flush the synchronous work now, unless we're already working or inside\n    // a batch. This is intentionally inside scheduleUpdateOnFiber instead of\n    // scheduleCallbackForFiber to preserve the ability to schedule a callback\n    // without immediately flushing it. We only do this for user-initiated\n    // updates, to preserve historical behavior of legacy mode.\n    resetRenderTimer();\n    flushSyncCallbacksOnlyInLegacyMode();\n  }\n\n  return root;\n}\n\n// This is split into a separate function so we can mark a fiber with pending\n// work without treating it as a typical update that originates from an event;\n// e.g. retrying a Suspense boundary isn't an update, but it does schedule work\n// on a fiber.\nfunction markUpdateLaneFromFiberToRoot(\n  sourceFiber: Fiber,\n  lane: Lane,\n): FiberRoot | null {\n  // Update the source fiber's lanes\n  sourceFiber.lanes = mergeLanes(sourceFiber.lanes, lane);\n  let alternate = sourceFiber.alternate;\n  if (alternate !== null) {\n    alternate.lanes = mergeLanes(alternate.lanes, lane);\n  }\n  if (__DEV__) {\n    if (\n      alternate === null &&\n      (sourceFiber.flags & (Placement | Hydrating)) !== NoFlags\n    ) {\n      warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);\n    }\n  }\n  // Walk the parent path to the root and update the child lanes.\n  let node = sourceFiber;\n  let parent = sourceFiber.return;\n  while (parent !== null) {\n    parent.childLanes = mergeLanes(parent.childLanes, lane);\n    alternate = parent.alternate;\n    if (alternate !== null) {\n      alternate.childLanes = mergeLanes(alternate.childLanes, lane);\n    } else {\n      if (__DEV__) {\n        if ((parent.flags & (Placement | Hydrating)) !== NoFlags) {\n          warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);\n        }\n      }\n    }\n    node = parent;\n    parent = parent.return;\n  }\n  if (node.tag === HostRoot) {\n    const root: FiberRoot = node.stateNode;\n    return root;\n  } else {\n    return null;\n  }\n}\n\nexport function isInterleavedUpdate(fiber: Fiber, lane: Lane) {\n  return (\n    // TODO: Optimize slightly by comparing to root that fiber belongs to.\n    // Requires some refactoring. Not a big deal though since it's rare for\n    // concurrent apps to have more than a single root.\n    workInProgressRoot !== null &&\n    (fiber.mode & ConcurrentMode) !== NoMode &&\n    // If this is a render phase update (i.e. UNSAFE_componentWillReceiveProps),\n    // then don't treat this as an interleaved update. This pattern is\n    // accompanied by a warning but we haven't fully deprecated it yet. We can\n    // remove once the deferRenderPhaseUpdateToNextBatch flag is enabled.\n    (deferRenderPhaseUpdateToNextBatch ||\n      (executionContext & RenderContext) === NoContext)\n  );\n}\n\n// Use this function to schedule a task for a root. There's only one task per\n// root; if a task was already scheduled, we'll check to make sure the priority\n// of the existing task is the same as the priority of the next level that the\n// root has work on. This function is called on every update, and right before\n// exiting a task.\nfunction ensureRootIsScheduled(root: FiberRoot, currentTime: number) {\n  const existingCallbackNode = root.callbackNode;\n\n  // Check if any lanes are being starved by other work. If so, mark them as\n  // expired so we know to work on those next.\n  markStarvedLanesAsExpired(root, currentTime);\n\n  // Determine the next lanes to work on, and their priority.\n  const nextLanes = getNextLanes(\n    root,\n    root === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes,\n  );\n\n  if (nextLanes === NoLanes) {\n    // Special case: There's nothing to work on.\n    if (existingCallbackNode !== null) {\n      cancelCallback(existingCallbackNode);\n    }\n    root.callbackNode = null;\n    root.callbackPriority = NoLane;\n    return;\n  }\n\n  // We use the highest priority lane to represent the priority of the callback.\n  const newCallbackPriority = getHighestPriorityLane(nextLanes);\n\n  // Check if there's an existing task. We may be able to reuse it.\n  const existingCallbackPriority = root.callbackPriority;\n  if (\n    existingCallbackPriority === newCallbackPriority &&\n    // Special case related to `act`. If the currently scheduled task is a\n    // Scheduler task, rather than an `act` task, cancel it and re-scheduled\n    // on the `act` queue.\n    !(\n      __DEV__ &&\n      ReactCurrentActQueue.current !== null &&\n      existingCallbackNode !== fakeActCallbackNode\n    )\n  ) {\n    if (__DEV__) {\n      // If we're going to re-use an existing task, it needs to exist.\n      // Assume that discrete update microtasks are non-cancellable and null.\n      // TODO: Temporary until we confirm this warning is not fired.\n      if (\n        existingCallbackNode == null &&\n        existingCallbackPriority !== SyncLane\n      ) {\n        console.error(\n          'Expected scheduled callback to exist. This error is likely caused by a bug in React. Please file an issue.',\n        );\n      }\n    }\n    // The priority hasn't changed. We can reuse the existing task. Exit.\n    return;\n  }\n\n  if (existingCallbackNode != null) {\n    // Cancel the existing callback. We'll schedule a new one below.\n    cancelCallback(existingCallbackNode);\n  }\n\n  // Schedule a new callback.\n  let newCallbackNode;\n  if (newCallbackPriority === SyncLane) {\n    // Special case: Sync React callbacks are scheduled on a special\n    // internal queue\n    if (root.tag === LegacyRoot) {\n      if (__DEV__ && ReactCurrentActQueue.isBatchingLegacy !== null) {\n        ReactCurrentActQueue.didScheduleLegacyUpdate = true;\n      }\n      scheduleLegacySyncCallback(performSyncWorkOnRoot.bind(null, root));\n    } else {\n      scheduleSyncCallback(performSyncWorkOnRoot.bind(null, root));\n    }\n    if (supportsMicrotasks) {\n      // Flush the queue in a microtask.\n      if (__DEV__ && ReactCurrentActQueue.current !== null) {\n        // Inside `act`, use our internal `act` queue so that these get flushed\n        // at the end of the current scope even when using the sync version\n        // of `act`.\n        ReactCurrentActQueue.current.push(flushSyncCallbacks);\n      } else {\n        scheduleMicrotask(flushSyncCallbacks);\n      }\n    } else {\n      // Flush the queue in an Immediate task.\n      scheduleCallback(ImmediateSchedulerPriority, flushSyncCallbacks);\n    }\n    newCallbackNode = null;\n  } else {\n    let schedulerPriorityLevel;\n    switch (lanesToEventPriority(nextLanes)) {\n      case DiscreteEventPriority:\n        schedulerPriorityLevel = ImmediateSchedulerPriority;\n        break;\n      case ContinuousEventPriority:\n        schedulerPriorityLevel = UserBlockingSchedulerPriority;\n        break;\n      case DefaultEventPriority:\n        schedulerPriorityLevel = NormalSchedulerPriority;\n        break;\n      case IdleEventPriority:\n        schedulerPriorityLevel = IdleSchedulerPriority;\n        break;\n      default:\n        schedulerPriorityLevel = NormalSchedulerPriority;\n        break;\n    }\n    newCallbackNode = scheduleCallback(\n      schedulerPriorityLevel,\n      performConcurrentWorkOnRoot.bind(null, root),\n    );\n  }\n\n  root.callbackPriority = newCallbackPriority;\n  root.callbackNode = newCallbackNode;\n}\n\n// This is the entry point for every concurrent task, i.e. anything that\n// goes through Scheduler.\nfunction performConcurrentWorkOnRoot(root, didTimeout) {\n  if (enableProfilerTimer && enableProfilerNestedUpdatePhase) {\n    resetNestedUpdateFlag();\n  }\n\n  // Since we know we're in a React event, we can clear the current\n  // event time. The next update will compute a new event time.\n  currentEventTime = NoTimestamp;\n  currentEventTransitionLane = NoLanes;\n\n  invariant(\n    (executionContext & (RenderContext | CommitContext)) === NoContext,\n    'Should not already be working.',\n  );\n\n  // Flush any pending passive effects before deciding which lanes to work on,\n  // in case they schedule additional work.\n  const originalCallbackNode = root.callbackNode;\n  const didFlushPassiveEffects = flushPassiveEffects();\n  if (didFlushPassiveEffects) {\n    // Something in the passive effect phase may have canceled the current task.\n    // Check if the task node for this root was changed.\n    if (root.callbackNode !== originalCallbackNode) {\n      // The current task was canceled. Exit. We don't need to call\n      // `ensureRootIsScheduled` because the check above implies either that\n      // there's a new task, or that there's no remaining work on this root.\n      return null;\n    } else {\n      // Current task was not canceled. Continue.\n    }\n  }\n\n  // Determine the next lanes to work on, using the fields stored\n  // on the root.\n  let lanes = getNextLanes(\n    root,\n    root === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes,\n  );\n  if (lanes === NoLanes) {\n    // Defensive coding. This is never expected to happen.\n    return null;\n  }\n\n  // We disable time-slicing in some cases: if the work has been CPU-bound\n  // for too long (\"expired\" work, to prevent starvation), or we're in\n  // sync-updates-by-default mode.\n  // TODO: We only check `didTimeout` defensively, to account for a Scheduler\n  // bug we're still investigating. Once the bug in Scheduler is fixed,\n  // we can remove this, since we track expiration ourselves.\n  let exitStatus =\n    shouldTimeSlice(root, lanes) &&\n    (disableSchedulerTimeoutInWorkLoop || !didTimeout)\n      ? renderRootConcurrent(root, lanes)\n      : renderRootSync(root, lanes);\n  if (exitStatus !== RootIncomplete) {\n    if (exitStatus === RootErrored) {\n      const prevExecutionContext = executionContext;\n      executionContext |= RetryAfterError;\n\n      // If an error occurred during hydration,\n      // discard server response and fall back to client side render.\n      if (root.hydrate) {\n        root.hydrate = false;\n        if (__DEV__) {\n          errorHydratingContainer(root.containerInfo);\n        }\n        clearContainer(root.containerInfo);\n      }\n\n      // If something threw an error, try rendering one more time. We'll render\n      // synchronously to block concurrent data mutations, and we'll includes\n      // all pending updates are included. If it still fails after the second\n      // attempt, we'll give up and commit the resulting tree.\n      const errorRetryLanes = getLanesToRetrySynchronouslyOnError(root);\n      if (errorRetryLanes !== NoLanes) {\n        lanes = errorRetryLanes;\n        exitStatus = renderRootSync(root, errorRetryLanes);\n      }\n\n      executionContext = prevExecutionContext;\n    }\n\n    if (exitStatus === RootFatalErrored) {\n      const fatalError = workInProgressRootFatalError;\n      prepareFreshStack(root, NoLanes);\n      markRootSuspended(root, lanes);\n      ensureRootIsScheduled(root, now());\n      throw fatalError;\n    }\n\n    // We now have a consistent tree. The next step is either to commit it,\n    // or, if something suspended, wait to commit it after a timeout.\n    const finishedWork: Fiber = (root.current.alternate: any);\n    root.finishedWork = finishedWork;\n    root.finishedLanes = lanes;\n    finishConcurrentRender(root, exitStatus, lanes);\n  }\n\n  ensureRootIsScheduled(root, now());\n  if (root.callbackNode === originalCallbackNode) {\n    // The task node scheduled for this root is the same one that's\n    // currently executed. Need to return a continuation.\n    return performConcurrentWorkOnRoot.bind(null, root);\n  }\n  return null;\n}\n\nfunction finishConcurrentRender(root, exitStatus, lanes) {\n  switch (exitStatus) {\n    case RootIncomplete:\n    case RootFatalErrored: {\n      invariant(false, 'Root did not complete. This is a bug in React.');\n    }\n    // Flow knows about invariant, so it complains if I add a break\n    // statement, but eslint doesn't know about invariant, so it complains\n    // if I do. eslint-disable-next-line no-fallthrough\n    case RootErrored: {\n      // We should have already attempted to retry this tree. If we reached\n      // this point, it errored again. Commit it.\n      commitRoot(root);\n      break;\n    }\n    case RootSuspended: {\n      markRootSuspended(root, lanes);\n\n      // We have an acceptable loading state. We need to figure out if we\n      // should immediately commit it or wait a bit.\n\n      if (\n        includesOnlyRetries(lanes) &&\n        // do not delay if we're inside an act() scope\n        !shouldForceFlushFallbacksInDEV()\n      ) {\n        // This render only included retries, no updates. Throttle committing\n        // retries so that we don't show too many loading states too quickly.\n        const msUntilTimeout =\n          globalMostRecentFallbackTime + FALLBACK_THROTTLE_MS - now();\n        // Don't bother with a very short suspense time.\n        if (msUntilTimeout > 10) {\n          const nextLanes = getNextLanes(root, NoLanes);\n          if (nextLanes !== NoLanes) {\n            // There's additional work on this root.\n            break;\n          }\n          const suspendedLanes = root.suspendedLanes;\n          if (!isSubsetOfLanes(suspendedLanes, lanes)) {\n            // We should prefer to render the fallback of at the last\n            // suspended level. Ping the last suspended level to try\n            // rendering it again.\n            // FIXME: What if the suspended lanes are Idle? Should not restart.\n            const eventTime = requestEventTime();\n            markRootPinged(root, suspendedLanes, eventTime);\n            break;\n          }\n\n          // The render is suspended, it hasn't timed out, and there's no\n          // lower priority work to do. Instead of committing the fallback\n          // immediately, wait for more data to arrive.\n          root.timeoutHandle = scheduleTimeout(\n            commitRoot.bind(null, root),\n            msUntilTimeout,\n          );\n          break;\n        }\n      }\n      // The work expired. Commit immediately.\n      commitRoot(root);\n      break;\n    }\n    case RootSuspendedWithDelay: {\n      markRootSuspended(root, lanes);\n\n      if (includesOnlyTransitions(lanes)) {\n        // This is a transition, so we should exit without committing a\n        // placeholder and without scheduling a timeout. Delay indefinitely\n        // until we receive more data.\n        break;\n      }\n\n      if (!shouldForceFlushFallbacksInDEV()) {\n        // This is not a transition, but we did trigger an avoided state.\n        // Schedule a placeholder to display after a short delay, using the Just\n        // Noticeable Difference.\n        // TODO: Is the JND optimization worth the added complexity? If this is\n        // the only reason we track the event time, then probably not.\n        // Consider removing.\n\n        const mostRecentEventTime = getMostRecentEventTime(root, lanes);\n        const eventTimeMs = mostRecentEventTime;\n        const timeElapsedMs = now() - eventTimeMs;\n        const msUntilTimeout = jnd(timeElapsedMs) - timeElapsedMs;\n\n        // Don't bother with a very short suspense time.\n        if (msUntilTimeout > 10) {\n          // Instead of committing the fallback immediately, wait for more data\n          // to arrive.\n          root.timeoutHandle = scheduleTimeout(\n            commitRoot.bind(null, root),\n            msUntilTimeout,\n          );\n          break;\n        }\n      }\n\n      // Commit the placeholder.\n      commitRoot(root);\n      break;\n    }\n    case RootCompleted: {\n      // The work completed. Ready to commit.\n      commitRoot(root);\n      break;\n    }\n    default: {\n      invariant(false, 'Unknown root exit status.');\n    }\n  }\n}\n\nfunction markRootSuspended(root, suspendedLanes) {\n  // When suspending, we should always exclude lanes that were pinged or (more\n  // rarely, since we try to avoid it) updated during the render phase.\n  // TODO: Lol maybe there's a better way to factor this besides this\n  // obnoxiously named function :)\n  suspendedLanes = removeLanes(suspendedLanes, workInProgressRootPingedLanes);\n  suspendedLanes = removeLanes(suspendedLanes, workInProgressRootUpdatedLanes);\n  markRootSuspended_dontCallThisOneDirectly(root, suspendedLanes);\n}\n\n// This is the entry point for synchronous tasks that don't go\n// through Scheduler\nfunction performSyncWorkOnRoot(root) {\n  if (enableProfilerTimer && enableProfilerNestedUpdatePhase) {\n    syncNestedUpdateFlag();\n  }\n\n  invariant(\n    (executionContext & (RenderContext | CommitContext)) === NoContext,\n    'Should not already be working.',\n  );\n\n  flushPassiveEffects();\n\n  let lanes = getNextLanes(root, NoLanes);\n  if (!includesSomeLane(lanes, SyncLane)) {\n    // There's no remaining sync work left.\n    ensureRootIsScheduled(root, now());\n    return null;\n  }\n\n  let exitStatus = renderRootSync(root, lanes);\n  if (root.tag !== LegacyRoot && exitStatus === RootErrored) {\n    const prevExecutionContext = executionContext;\n    executionContext |= RetryAfterError;\n\n    // If an error occurred during hydration,\n    // discard server response and fall back to client side render.\n    if (root.hydrate) {\n      root.hydrate = false;\n      if (__DEV__) {\n        errorHydratingContainer(root.containerInfo);\n      }\n      clearContainer(root.containerInfo);\n    }\n\n    // If something threw an error, try rendering one more time. We'll render\n    // synchronously to block concurrent data mutations, and we'll includes\n    // all pending updates are included. If it still fails after the second\n    // attempt, we'll give up and commit the resulting tree.\n    const errorRetryLanes = getLanesToRetrySynchronouslyOnError(root);\n    if (errorRetryLanes !== NoLanes) {\n      lanes = errorRetryLanes;\n      exitStatus = renderRootSync(root, lanes);\n    }\n\n    executionContext = prevExecutionContext;\n  }\n\n  if (exitStatus === RootFatalErrored) {\n    const fatalError = workInProgressRootFatalError;\n    prepareFreshStack(root, NoLanes);\n    markRootSuspended(root, lanes);\n    ensureRootIsScheduled(root, now());\n    throw fatalError;\n  }\n\n  // We now have a consistent tree. Because this is a sync render, we\n  // will commit it even if something suspended.\n  const finishedWork: Fiber = (root.current.alternate: any);\n  root.finishedWork = finishedWork;\n  root.finishedLanes = lanes;\n  commitRoot(root);\n\n  // Before exiting, make sure there's a callback scheduled for the next\n  // pending level.\n  ensureRootIsScheduled(root, now());\n\n  return null;\n}\n\nexport function flushRoot(root: FiberRoot, lanes: Lanes) {\n  if (lanes !== NoLanes) {\n    markRootEntangled(root, mergeLanes(lanes, SyncLane));\n    ensureRootIsScheduled(root, now());\n    if ((executionContext & (RenderContext | CommitContext)) === NoContext) {\n      resetRenderTimer();\n      flushSyncCallbacks();\n    }\n  }\n}\n\nexport function getExecutionContext(): ExecutionContext {\n  return executionContext;\n}\n\nexport function deferredUpdates<A>(fn: () => A): A {\n  const previousPriority = getCurrentUpdatePriority();\n  const prevTransition = ReactCurrentBatchConfig.transition;\n  try {\n    ReactCurrentBatchConfig.transition = 0;\n    setCurrentUpdatePriority(DefaultEventPriority);\n    return fn();\n  } finally {\n    setCurrentUpdatePriority(previousPriority);\n    ReactCurrentBatchConfig.transition = prevTransition;\n  }\n}\n\nexport function batchedUpdates<A, R>(fn: A => R, a: A): R {\n  const prevExecutionContext = executionContext;\n  executionContext |= BatchedContext;\n  try {\n    return fn(a);\n  } finally {\n    executionContext = prevExecutionContext;\n    // If there were legacy sync updates, flush them at the end of the outer\n    // most batchedUpdates-like method.\n    if (\n      executionContext === NoContext &&\n      // Treat `act` as if it's inside `batchedUpdates`, even in legacy mode.\n      !(__DEV__ && ReactCurrentActQueue.isBatchingLegacy)\n    ) {\n      resetRenderTimer();\n      flushSyncCallbacksOnlyInLegacyMode();\n    }\n  }\n}\n\nexport function discreteUpdates<A, B, C, D, R>(\n  fn: (A, B, C, D) => R,\n  a: A,\n  b: B,\n  c: C,\n  d: D,\n): R {\n  const previousPriority = getCurrentUpdatePriority();\n  const prevTransition = ReactCurrentBatchConfig.transition;\n  try {\n    ReactCurrentBatchConfig.transition = 0;\n    setCurrentUpdatePriority(DiscreteEventPriority);\n    return fn(a, b, c, d);\n  } finally {\n    setCurrentUpdatePriority(previousPriority);\n    ReactCurrentBatchConfig.transition = prevTransition;\n    if (executionContext === NoContext) {\n      resetRenderTimer();\n    }\n  }\n}\n\n// Overload the definition to the two valid signatures.\n// Warning, this opts-out of checking the function body.\ndeclare function flushSyncWithoutWarningIfAlreadyRendering<R>(fn: () => R): R;\n// eslint-disable-next-line no-redeclare\ndeclare function flushSyncWithoutWarningIfAlreadyRendering(): void;\n// eslint-disable-next-line no-redeclare\nexport function flushSyncWithoutWarningIfAlreadyRendering(fn) {\n  // In legacy mode, we flush pending passive effects at the beginning of the\n  // next event, not at the end of the previous one.\n  if (\n    rootWithPendingPassiveEffects !== null &&\n    rootWithPendingPassiveEffects.tag === LegacyRoot &&\n    (executionContext & (RenderContext | CommitContext)) === NoContext\n  ) {\n    flushPassiveEffects();\n  }\n\n  const prevExecutionContext = executionContext;\n  executionContext |= BatchedContext;\n\n  const prevTransition = ReactCurrentBatchConfig.transition;\n  const previousPriority = getCurrentUpdatePriority();\n  try {\n    ReactCurrentBatchConfig.transition = 0;\n    setCurrentUpdatePriority(DiscreteEventPriority);\n    if (fn) {\n      return fn();\n    } else {\n      return undefined;\n    }\n  } finally {\n    setCurrentUpdatePriority(previousPriority);\n    ReactCurrentBatchConfig.transition = prevTransition;\n    executionContext = prevExecutionContext;\n    // Flush the immediate callbacks that were scheduled during this batch.\n    // Note that this will happen even if batchedUpdates is higher up\n    // the stack.\n    if ((executionContext & (RenderContext | CommitContext)) === NoContext) {\n      flushSyncCallbacks();\n    }\n  }\n}\n\n// Overload the definition to the two valid signatures.\n// Warning, this opts-out of checking the function body.\ndeclare function flushSync<R>(fn: () => R): R;\n// eslint-disable-next-line no-redeclare\ndeclare function flushSync(): void;\n// eslint-disable-next-line no-redeclare\nexport function flushSync(fn) {\n  if (__DEV__) {\n    if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {\n      console.error(\n        'flushSync was called from inside a lifecycle method. React cannot ' +\n          'flush when React is already rendering. Consider moving this call to ' +\n          'a scheduler task or micro task.',\n      );\n    }\n  }\n  return flushSyncWithoutWarningIfAlreadyRendering(fn);\n}\n\nexport function flushControlled(fn: () => mixed): void {\n  const prevExecutionContext = executionContext;\n  executionContext |= BatchedContext;\n  const prevTransition = ReactCurrentBatchConfig.transition;\n  const previousPriority = getCurrentUpdatePriority();\n  try {\n    ReactCurrentBatchConfig.transition = 0;\n    setCurrentUpdatePriority(DiscreteEventPriority);\n    fn();\n  } finally {\n    setCurrentUpdatePriority(previousPriority);\n    ReactCurrentBatchConfig.transition = prevTransition;\n\n    executionContext = prevExecutionContext;\n    if (executionContext === NoContext) {\n      // Flush the immediate callbacks that were scheduled during this batch\n      resetRenderTimer();\n      flushSyncCallbacks();\n    }\n  }\n}\n\nexport function pushRenderLanes(fiber: Fiber, lanes: Lanes) {\n  pushToStack(subtreeRenderLanesCursor, subtreeRenderLanes, fiber);\n  subtreeRenderLanes = mergeLanes(subtreeRenderLanes, lanes);\n  workInProgressRootIncludedLanes = mergeLanes(\n    workInProgressRootIncludedLanes,\n    lanes,\n  );\n}\n\nexport function popRenderLanes(fiber: Fiber) {\n  subtreeRenderLanes = subtreeRenderLanesCursor.current;\n  popFromStack(subtreeRenderLanesCursor, fiber);\n}\n\nfunction prepareFreshStack(root: FiberRoot, lanes: Lanes) {\n  root.finishedWork = null;\n  root.finishedLanes = NoLanes;\n\n  const timeoutHandle = root.timeoutHandle;\n  if (timeoutHandle !== noTimeout) {\n    // The root previous suspended and scheduled a timeout to commit a fallback\n    // state. Now that we have additional work, cancel the timeout.\n    root.timeoutHandle = noTimeout;\n    // $FlowFixMe Complains noTimeout is not a TimeoutID, despite the check above\n    cancelTimeout(timeoutHandle);\n  }\n\n  if (workInProgress !== null) {\n    let interruptedWork = workInProgress.return;\n    while (interruptedWork !== null) {\n      unwindInterruptedWork(interruptedWork, workInProgressRootRenderLanes);\n      interruptedWork = interruptedWork.return;\n    }\n  }\n  workInProgressRoot = root;\n  workInProgress = createWorkInProgress(root.current, null);\n  workInProgressRootRenderLanes = subtreeRenderLanes = workInProgressRootIncludedLanes = lanes;\n  workInProgressRootExitStatus = RootIncomplete;\n  workInProgressRootFatalError = null;\n  workInProgressRootSkippedLanes = NoLanes;\n  workInProgressRootUpdatedLanes = NoLanes;\n  workInProgressRootPingedLanes = NoLanes;\n\n  enqueueInterleavedUpdates();\n\n  if (__DEV__) {\n    ReactStrictModeWarnings.discardPendingWarnings();\n  }\n}\n\nfunction handleError(root, thrownValue): void {\n  do {\n    let erroredWork = workInProgress;\n    try {\n      // Reset module-level state that was set during the render phase.\n      resetContextDependencies();\n      resetHooksAfterThrow();\n      resetCurrentDebugFiberInDEV();\n      // TODO: I found and added this missing line while investigating a\n      // separate issue. Write a regression test using string refs.\n      ReactCurrentOwner.current = null;\n\n      if (erroredWork === null || erroredWork.return === null) {\n        // Expected to be working on a non-root fiber. This is a fatal error\n        // because there's no ancestor that can handle it; the root is\n        // supposed to capture all errors that weren't caught by an error\n        // boundary.\n        workInProgressRootExitStatus = RootFatalErrored;\n        workInProgressRootFatalError = thrownValue;\n        // Set `workInProgress` to null. This represents advancing to the next\n        // sibling, or the parent if there are no siblings. But since the root\n        // has no siblings nor a parent, we set it to null. Usually this is\n        // handled by `completeUnitOfWork` or `unwindWork`, but since we're\n        // intentionally not calling those, we need set it here.\n        // TODO: Consider calling `unwindWork` to pop the contexts.\n        workInProgress = null;\n        return;\n      }\n\n      if (enableProfilerTimer && erroredWork.mode & ProfileMode) {\n        // Record the time spent rendering before an error was thrown. This\n        // avoids inaccurate Profiler durations in the case of a\n        // suspended render.\n        stopProfilerTimerIfRunningAndRecordDelta(erroredWork, true);\n      }\n\n      throwException(\n        root,\n        erroredWork.return,\n        erroredWork,\n        thrownValue,\n        workInProgressRootRenderLanes,\n      );\n      completeUnitOfWork(erroredWork);\n    } catch (yetAnotherThrownValue) {\n      // Something in the return path also threw.\n      thrownValue = yetAnotherThrownValue;\n      if (workInProgress === erroredWork && erroredWork !== null) {\n        // If this boundary has already errored, then we had trouble processing\n        // the error. Bubble it to the next boundary.\n        erroredWork = erroredWork.return;\n        workInProgress = erroredWork;\n      } else {\n        erroredWork = workInProgress;\n      }\n      continue;\n    }\n    // Return to the normal work loop.\n    return;\n  } while (true);\n}\n\nfunction pushDispatcher() {\n  const prevDispatcher = ReactCurrentDispatcher.current;\n  ReactCurrentDispatcher.current = ContextOnlyDispatcher;\n  if (prevDispatcher === null) {\n    // The React isomorphic package does not include a default dispatcher.\n    // Instead the first renderer will lazily attach one, in order to give\n    // nicer error messages.\n    return ContextOnlyDispatcher;\n  } else {\n    return prevDispatcher;\n  }\n}\n\nfunction popDispatcher(prevDispatcher) {\n  ReactCurrentDispatcher.current = prevDispatcher;\n}\n\nexport function markCommitTimeOfFallback() {\n  globalMostRecentFallbackTime = now();\n}\n\nexport function markSkippedUpdateLanes(lane: Lane | Lanes): void {\n  workInProgressRootSkippedLanes = mergeLanes(\n    lane,\n    workInProgressRootSkippedLanes,\n  );\n}\n\nexport function renderDidSuspend(): void {\n  if (workInProgressRootExitStatus === RootIncomplete) {\n    workInProgressRootExitStatus = RootSuspended;\n  }\n}\n\nexport function renderDidSuspendDelayIfPossible(): void {\n  if (\n    workInProgressRootExitStatus === RootIncomplete ||\n    workInProgressRootExitStatus === RootSuspended\n  ) {\n    workInProgressRootExitStatus = RootSuspendedWithDelay;\n  }\n\n  // Check if there are updates that we skipped tree that might have unblocked\n  // this render.\n  if (\n    workInProgressRoot !== null &&\n    (includesNonIdleWork(workInProgressRootSkippedLanes) ||\n      includesNonIdleWork(workInProgressRootUpdatedLanes))\n  ) {\n    // Mark the current render as suspended so that we switch to working on\n    // the updates that were skipped. Usually we only suspend at the end of\n    // the render phase.\n    // TODO: We should probably always mark the root as suspended immediately\n    // (inside this function), since by suspending at the end of the render\n    // phase introduces a potential mistake where we suspend lanes that were\n    // pinged or updated while we were rendering.\n    markRootSuspended(workInProgressRoot, workInProgressRootRenderLanes);\n  }\n}\n\nexport function renderDidError() {\n  if (workInProgressRootExitStatus !== RootCompleted) {\n    workInProgressRootExitStatus = RootErrored;\n  }\n}\n\n// Called during render to determine if anything has suspended.\n// Returns false if we're not sure.\nexport function renderHasNotSuspendedYet(): boolean {\n  // If something errored or completed, we can't really be sure,\n  // so those are false.\n  return workInProgressRootExitStatus === RootIncomplete;\n}\n\nfunction renderRootSync(root: FiberRoot, lanes: Lanes) {\n  const prevExecutionContext = executionContext;\n  executionContext |= RenderContext;\n  const prevDispatcher = pushDispatcher();\n\n  // If the root or lanes have changed, throw out the existing stack\n  // and prepare a fresh one. Otherwise we'll continue where we left off.\n  if (workInProgressRoot !== root || workInProgressRootRenderLanes !== lanes) {\n    if (enableUpdaterTracking) {\n      if (isDevToolsPresent) {\n        const memoizedUpdaters = root.memoizedUpdaters;\n        if (memoizedUpdaters.size > 0) {\n          restorePendingUpdaters(root, workInProgressRootRenderLanes);\n          memoizedUpdaters.clear();\n        }\n\n        // At this point, move Fibers that scheduled the upcoming work from the Map to the Set.\n        // If we bailout on this work, we'll move them back (like above).\n        // It's important to move them now in case the work spawns more work at the same priority with different updaters.\n        // That way we can keep the current update and future updates separate.\n        movePendingFibersToMemoized(root, lanes);\n      }\n    }\n\n    prepareFreshStack(root, lanes);\n  }\n\n  if (__DEV__) {\n    if (enableDebugTracing) {\n      logRenderStarted(lanes);\n    }\n  }\n\n  if (enableSchedulingProfiler) {\n    markRenderStarted(lanes);\n  }\n\n  do {\n    try {\n      workLoopSync();\n      break;\n    } catch (thrownValue) {\n      handleError(root, thrownValue);\n    }\n  } while (true);\n  resetContextDependencies();\n\n  executionContext = prevExecutionContext;\n  popDispatcher(prevDispatcher);\n\n  if (workInProgress !== null) {\n    // This is a sync render, so we should have finished the whole tree.\n    invariant(\n      false,\n      'Cannot commit an incomplete root. This error is likely caused by a ' +\n        'bug in React. Please file an issue.',\n    );\n  }\n\n  if (__DEV__) {\n    if (enableDebugTracing) {\n      logRenderStopped();\n    }\n  }\n\n  if (enableSchedulingProfiler) {\n    markRenderStopped();\n  }\n\n  // Set this to null to indicate there's no in-progress render.\n  workInProgressRoot = null;\n  workInProgressRootRenderLanes = NoLanes;\n\n  return workInProgressRootExitStatus;\n}\n\n// The work loop is an extremely hot path. Tell Closure not to inline it.\n/** @noinline */\nfunction workLoopSync() {\n  // Already timed out, so perform work without checking if we need to yield.\n  while (workInProgress !== null) {\n    performUnitOfWork(workInProgress);\n  }\n}\n\nfunction renderRootConcurrent(root: FiberRoot, lanes: Lanes) {\n  const prevExecutionContext = executionContext;\n  executionContext |= RenderContext;\n  const prevDispatcher = pushDispatcher();\n\n  // If the root or lanes have changed, throw out the existing stack\n  // and prepare a fresh one. Otherwise we'll continue where we left off.\n  if (workInProgressRoot !== root || workInProgressRootRenderLanes !== lanes) {\n    if (enableUpdaterTracking) {\n      if (isDevToolsPresent) {\n        const memoizedUpdaters = root.memoizedUpdaters;\n        if (memoizedUpdaters.size > 0) {\n          restorePendingUpdaters(root, workInProgressRootRenderLanes);\n          memoizedUpdaters.clear();\n        }\n\n        // At this point, move Fibers that scheduled the upcoming work from the Map to the Set.\n        // If we bailout on this work, we'll move them back (like above).\n        // It's important to move them now in case the work spawns more work at the same priority with different updaters.\n        // That way we can keep the current update and future updates separate.\n        movePendingFibersToMemoized(root, lanes);\n      }\n    }\n\n    resetRenderTimer();\n    prepareFreshStack(root, lanes);\n  }\n\n  if (__DEV__) {\n    if (enableDebugTracing) {\n      logRenderStarted(lanes);\n    }\n  }\n\n  if (enableSchedulingProfiler) {\n    markRenderStarted(lanes);\n  }\n\n  do {\n    try {\n      workLoopConcurrent();\n      break;\n    } catch (thrownValue) {\n      handleError(root, thrownValue);\n    }\n  } while (true);\n  resetContextDependencies();\n\n  popDispatcher(prevDispatcher);\n  executionContext = prevExecutionContext;\n\n  if (__DEV__) {\n    if (enableDebugTracing) {\n      logRenderStopped();\n    }\n  }\n\n  // Check if the tree has completed.\n  if (workInProgress !== null) {\n    // Still work remaining.\n    if (enableSchedulingProfiler) {\n      markRenderYielded();\n    }\n    return RootIncomplete;\n  } else {\n    // Completed the tree.\n    if (enableSchedulingProfiler) {\n      markRenderStopped();\n    }\n\n    // Set this to null to indicate there's no in-progress render.\n    workInProgressRoot = null;\n    workInProgressRootRenderLanes = NoLanes;\n\n    // Return the final exit status.\n    return workInProgressRootExitStatus;\n  }\n}\n\n/** @noinline */\nfunction workLoopConcurrent() {\n  // Perform work until Scheduler asks us to yield\n  while (workInProgress !== null && !shouldYield()) {\n    performUnitOfWork(workInProgress);\n  }\n}\n\nfunction performUnitOfWork(unitOfWork: Fiber): void {\n  // The current, flushed, state of this fiber is the alternate. Ideally\n  // nothing should rely on this, but relying on it here means that we don't\n  // need an additional field on the work in progress.\n  const current = unitOfWork.alternate;\n  setCurrentDebugFiberInDEV(unitOfWork);\n\n  let next;\n  if (enableProfilerTimer && (unitOfWork.mode & ProfileMode) !== NoMode) {\n    startProfilerTimer(unitOfWork);\n    next = beginWork(current, unitOfWork, subtreeRenderLanes);\n    stopProfilerTimerIfRunningAndRecordDelta(unitOfWork, true);\n  } else {\n    next = beginWork(current, unitOfWork, subtreeRenderLanes);\n  }\n\n  resetCurrentDebugFiberInDEV();\n  unitOfWork.memoizedProps = unitOfWork.pendingProps;\n  if (next === null) {\n    // If this doesn't spawn new work, complete the current work.\n    completeUnitOfWork(unitOfWork);\n  } else {\n    workInProgress = next;\n  }\n\n  ReactCurrentOwner.current = null;\n}\n\nfunction completeUnitOfWork(unitOfWork: Fiber): void {\n  // Attempt to complete the current unit of work, then move to the next\n  // sibling. If there are no more siblings, return to the parent fiber.\n  let completedWork = unitOfWork;\n  do {\n    // The current, flushed, state of this fiber is the alternate. Ideally\n    // nothing should rely on this, but relying on it here means that we don't\n    // need an additional field on the work in progress.\n    const current = completedWork.alternate;\n    const returnFiber = completedWork.return;\n\n    // Check if the work completed or if something threw.\n    if ((completedWork.flags & Incomplete) === NoFlags) {\n      setCurrentDebugFiberInDEV(completedWork);\n      let next;\n      if (\n        !enableProfilerTimer ||\n        (completedWork.mode & ProfileMode) === NoMode\n      ) {\n        next = completeWork(current, completedWork, subtreeRenderLanes);\n      } else {\n        startProfilerTimer(completedWork);\n        next = completeWork(current, completedWork, subtreeRenderLanes);\n        // Update render duration assuming we didn't error.\n        stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);\n      }\n      resetCurrentDebugFiberInDEV();\n\n      if (next !== null) {\n        // Completing this fiber spawned new work. Work on that next.\n        workInProgress = next;\n        return;\n      }\n    } else {\n      // This fiber did not complete because something threw. Pop values off\n      // the stack without entering the complete phase. If this is a boundary,\n      // capture values if possible.\n      const next = unwindWork(completedWork, subtreeRenderLanes);\n\n      // Because this fiber did not complete, don't reset its lanes.\n\n      if (next !== null) {\n        // If completing this work spawned new work, do that next. We'll come\n        // back here again.\n        // Since we're restarting, remove anything that is not a host effect\n        // from the effect tag.\n        next.flags &= HostEffectMask;\n        workInProgress = next;\n        return;\n      }\n\n      if (\n        enableProfilerTimer &&\n        (completedWork.mode & ProfileMode) !== NoMode\n      ) {\n        // Record the render duration for the fiber that errored.\n        stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);\n\n        // Include the time spent working on failed children before continuing.\n        let actualDuration = completedWork.actualDuration;\n        let child = completedWork.child;\n        while (child !== null) {\n          actualDuration += child.actualDuration;\n          child = child.sibling;\n        }\n        completedWork.actualDuration = actualDuration;\n      }\n\n      if (returnFiber !== null) {\n        // Mark the parent fiber as incomplete and clear its subtree flags.\n        returnFiber.flags |= Incomplete;\n        returnFiber.subtreeFlags = NoFlags;\n        returnFiber.deletions = null;\n      }\n    }\n\n    const siblingFiber = completedWork.sibling;\n    if (siblingFiber !== null) {\n      // If there is more work to do in this returnFiber, do that next.\n      workInProgress = siblingFiber;\n      return;\n    }\n    // Otherwise, return to the parent\n    completedWork = returnFiber;\n    // Update the next thing we're working on in case something throws.\n    workInProgress = completedWork;\n  } while (completedWork !== null);\n\n  // We've reached the root.\n  if (workInProgressRootExitStatus === RootIncomplete) {\n    workInProgressRootExitStatus = RootCompleted;\n  }\n}\n\nfunction commitRoot(root) {\n  // TODO: This no longer makes any sense. We already wrap the mutation and\n  // layout phases. Should be able to remove.\n  const previousUpdateLanePriority = getCurrentUpdatePriority();\n  const prevTransition = ReactCurrentBatchConfig.transition;\n  try {\n    ReactCurrentBatchConfig.transition = 0;\n    setCurrentUpdatePriority(DiscreteEventPriority);\n    commitRootImpl(root, previousUpdateLanePriority);\n  } finally {\n    ReactCurrentBatchConfig.transition = prevTransition;\n    setCurrentUpdatePriority(previousUpdateLanePriority);\n  }\n\n  return null;\n}\n\nfunction commitRootImpl(root, renderPriorityLevel) {\n  do {\n    // `flushPassiveEffects` will call `flushSyncUpdateQueue` at the end, which\n    // means `flushPassiveEffects` will sometimes result in additional\n    // passive effects. So we need to keep flushing in a loop until there are\n    // no more pending effects.\n    // TODO: Might be better if `flushPassiveEffects` did not automatically\n    // flush synchronous work at the end, to avoid factoring hazards like this.\n    flushPassiveEffects();\n  } while (rootWithPendingPassiveEffects !== null);\n  flushRenderPhaseStrictModeWarningsInDEV();\n\n  invariant(\n    (executionContext & (RenderContext | CommitContext)) === NoContext,\n    'Should not already be working.',\n  );\n\n  const finishedWork = root.finishedWork;\n  const lanes = root.finishedLanes;\n\n  if (__DEV__) {\n    if (enableDebugTracing) {\n      logCommitStarted(lanes);\n    }\n  }\n\n  if (enableSchedulingProfiler) {\n    markCommitStarted(lanes);\n  }\n\n  if (finishedWork === null) {\n    if (__DEV__) {\n      if (enableDebugTracing) {\n        logCommitStopped();\n      }\n    }\n\n    if (enableSchedulingProfiler) {\n      markCommitStopped();\n    }\n\n    return null;\n  } else {\n    if (__DEV__) {\n      if (lanes === NoLanes) {\n        console.error(\n          'root.finishedLanes should not be empty during a commit. This is a ' +\n            'bug in React.',\n        );\n      }\n    }\n  }\n  root.finishedWork = null;\n  root.finishedLanes = NoLanes;\n\n  invariant(\n    finishedWork !== root.current,\n    'Cannot commit the same tree as before. This error is likely caused by ' +\n      'a bug in React. Please file an issue.',\n  );\n\n  // commitRoot never returns a continuation; it always finishes synchronously.\n  // So we can clear these now to allow a new callback to be scheduled.\n  root.callbackNode = null;\n  root.callbackPriority = NoLane;\n\n  // Update the first and last pending times on this root. The new first\n  // pending time is whatever is left on the root fiber.\n  let remainingLanes = mergeLanes(finishedWork.lanes, finishedWork.childLanes);\n  markRootFinished(root, remainingLanes);\n\n  if (root === workInProgressRoot) {\n    // We can reset these now that they are finished.\n    workInProgressRoot = null;\n    workInProgress = null;\n    workInProgressRootRenderLanes = NoLanes;\n  } else {\n    // This indicates that the last root we worked on is not the same one that\n    // we're committing now. This most commonly happens when a suspended root\n    // times out.\n  }\n\n  // If there are pending passive effects, schedule a callback to process them.\n  // Do this as early as possible, so it is queued before anything else that\n  // might get scheduled in the commit phase. (See #16714.)\n  // TODO: Delete all other places that schedule the passive effect callback\n  // They're redundant.\n  if (\n    (finishedWork.subtreeFlags & PassiveMask) !== NoFlags ||\n    (finishedWork.flags & PassiveMask) !== NoFlags\n  ) {\n    if (!rootDoesHavePassiveEffects) {\n      rootDoesHavePassiveEffects = true;\n      scheduleCallback(NormalSchedulerPriority, () => {\n        flushPassiveEffects();\n        return null;\n      });\n    }\n  }\n\n  // Check if there are any effects in the whole tree.\n  // TODO: This is left over from the effect list implementation, where we had\n  // to check for the existence of `firstEffect` to satisfy Flow. I think the\n  // only other reason this optimization exists is because it affects profiling.\n  // Reconsider whether this is necessary.\n  const subtreeHasEffects =\n    (finishedWork.subtreeFlags &\n      (BeforeMutationMask | MutationMask | LayoutMask | PassiveMask)) !==\n    NoFlags;\n  const rootHasEffect =\n    (finishedWork.flags &\n      (BeforeMutationMask | MutationMask | LayoutMask | PassiveMask)) !==\n    NoFlags;\n\n  if (subtreeHasEffects || rootHasEffect) {\n    const prevTransition = ReactCurrentBatchConfig.transition;\n    ReactCurrentBatchConfig.transition = 0;\n    const previousPriority = getCurrentUpdatePriority();\n    setCurrentUpdatePriority(DiscreteEventPriority);\n\n    const prevExecutionContext = executionContext;\n    executionContext |= CommitContext;\n\n    // Reset this to null before calling lifecycles\n    ReactCurrentOwner.current = null;\n\n    // The commit phase is broken into several sub-phases. We do a separate pass\n    // of the effect list for each phase: all mutation effects come before all\n    // layout effects, and so on.\n\n    // The first phase a \"before mutation\" phase. We use this phase to read the\n    // state of the host tree right before we mutate it. This is where\n    // getSnapshotBeforeUpdate is called.\n    const shouldFireAfterActiveInstanceBlur = commitBeforeMutationEffects(\n      root,\n      finishedWork,\n    );\n\n    if (enableProfilerTimer) {\n      // Mark the current commit time to be shared by all Profilers in this\n      // batch. This enables them to be grouped later.\n      recordCommitTime();\n    }\n\n    if (enableProfilerTimer && enableProfilerNestedUpdateScheduledHook) {\n      // Track the root here, rather than in commitLayoutEffects(), because of ref setters.\n      // Updates scheduled during ref detachment should also be flagged.\n      rootCommittingMutationOrLayoutEffects = root;\n    }\n\n    // The next phase is the mutation phase, where we mutate the host tree.\n    commitMutationEffects(root, finishedWork, lanes);\n\n    if (enableCreateEventHandleAPI) {\n      if (shouldFireAfterActiveInstanceBlur) {\n        afterActiveInstanceBlur();\n      }\n    }\n    resetAfterCommit(root.containerInfo);\n\n    // The work-in-progress tree is now the current tree. This must come after\n    // the mutation phase, so that the previous tree is still current during\n    // componentWillUnmount, but before the layout phase, so that the finished\n    // work is current during componentDidMount/Update.\n    root.current = finishedWork;\n\n    // The next phase is the layout phase, where we call effects that read\n    // the host tree after it's been mutated. The idiomatic use case for this is\n    // layout, but class component lifecycles also fire here for legacy reasons.\n    if (__DEV__) {\n      if (enableDebugTracing) {\n        logLayoutEffectsStarted(lanes);\n      }\n    }\n    if (enableSchedulingProfiler) {\n      markLayoutEffectsStarted(lanes);\n    }\n    commitLayoutEffects(finishedWork, root, lanes);\n    if (__DEV__) {\n      if (enableDebugTracing) {\n        logLayoutEffectsStopped();\n      }\n    }\n\n    if (enableSchedulingProfiler) {\n      markLayoutEffectsStopped();\n    }\n\n    if (enableProfilerTimer && enableProfilerNestedUpdateScheduledHook) {\n      rootCommittingMutationOrLayoutEffects = null;\n    }\n\n    // Tell Scheduler to yield at the end of the frame, so the browser has an\n    // opportunity to paint.\n    requestPaint();\n\n    executionContext = prevExecutionContext;\n\n    // Reset the priority to the previous non-sync value.\n    setCurrentUpdatePriority(previousPriority);\n    ReactCurrentBatchConfig.transition = prevTransition;\n  } else {\n    // No effects.\n    root.current = finishedWork;\n    // Measure these anyway so the flamegraph explicitly shows that there were\n    // no effects.\n    // TODO: Maybe there's a better way to report this.\n    if (enableProfilerTimer) {\n      recordCommitTime();\n    }\n  }\n\n  const rootDidHavePassiveEffects = rootDoesHavePassiveEffects;\n\n  if (rootDoesHavePassiveEffects) {\n    // This commit has passive effects. Stash a reference to them. But don't\n    // schedule a callback until after flushing layout work.\n    rootDoesHavePassiveEffects = false;\n    rootWithPendingPassiveEffects = root;\n    pendingPassiveEffectsLanes = lanes;\n  }\n\n  // Read this again, since an effect might have updated it\n  remainingLanes = root.pendingLanes;\n\n  // Check if there's remaining work on this root\n  // TODO: This is part of the `componentDidCatch` implementation. Its purpose\n  // is to detect whether something might have called setState inside\n  // `componentDidCatch`. The mechanism is known to be flawed because `setState`\n  // inside `componentDidCatch` is itself flawed — that's why we recommend\n  // `getDerivedStateFromError` instead. However, it could be improved by\n  // checking if remainingLanes includes Sync work, instead of whether there's\n  // any work remaining at all (which would also include stuff like Suspense\n  // retries or transitions). It's been like this for a while, though, so fixing\n  // it probably isn't that urgent.\n  if (remainingLanes === NoLanes) {\n    // If there's no remaining work, we can clear the set of already failed\n    // error boundaries.\n    legacyErrorBoundariesThatAlreadyFailed = null;\n  }\n\n  if (__DEV__ && enableStrictEffects) {\n    if (!rootDidHavePassiveEffects) {\n      commitDoubleInvokeEffectsInDEV(root.current, false);\n    }\n  }\n\n  onCommitRootDevTools(finishedWork.stateNode, renderPriorityLevel);\n\n  if (enableUpdaterTracking) {\n    if (isDevToolsPresent) {\n      root.memoizedUpdaters.clear();\n    }\n  }\n\n  if (__DEV__) {\n    onCommitRootTestSelector();\n  }\n\n  // Always call this before exiting `commitRoot`, to ensure that any\n  // additional work on this root is scheduled.\n  ensureRootIsScheduled(root, now());\n\n  if (hasUncaughtError) {\n    hasUncaughtError = false;\n    const error = firstUncaughtError;\n    firstUncaughtError = null;\n    throw error;\n  }\n\n  // If the passive effects are the result of a discrete render, flush them\n  // synchronously at the end of the current task so that the result is\n  // immediately observable. Otherwise, we assume that they are not\n  // order-dependent and do not need to be observed by external systems, so we\n  // can wait until after paint.\n  // TODO: We can optimize this by not scheduling the callback earlier. Since we\n  // currently schedule the callback in multiple places, will wait until those\n  // are consolidated.\n  if (\n    includesSomeLane(pendingPassiveEffectsLanes, SyncLane) &&\n    root.tag !== LegacyRoot\n  ) {\n    flushPassiveEffects();\n  }\n\n  // Read this again, since a passive effect might have updated it\n  remainingLanes = root.pendingLanes;\n  if (includesSomeLane(remainingLanes, (SyncLane: Lane))) {\n    if (enableProfilerTimer && enableProfilerNestedUpdatePhase) {\n      markNestedUpdateScheduled();\n    }\n\n    // Count the number of times the root synchronously re-renders without\n    // finishing. If there are too many, it indicates an infinite update loop.\n    if (root === rootWithNestedUpdates) {\n      nestedUpdateCount++;\n    } else {\n      nestedUpdateCount = 0;\n      rootWithNestedUpdates = root;\n    }\n  } else {\n    nestedUpdateCount = 0;\n  }\n\n  // If layout work was scheduled, flush it now.\n  flushSyncCallbacks();\n\n  if (__DEV__) {\n    if (enableDebugTracing) {\n      logCommitStopped();\n    }\n  }\n\n  if (enableSchedulingProfiler) {\n    markCommitStopped();\n  }\n\n  return null;\n}\n\nexport function flushPassiveEffects(): boolean {\n  // Returns whether passive effects were flushed.\n  // TODO: Combine this check with the one in flushPassiveEFfectsImpl. We should\n  // probably just combine the two functions. I believe they were only separate\n  // in the first place because we used to wrap it with\n  // `Scheduler.runWithPriority`, which accepts a function. But now we track the\n  // priority within React itself, so we can mutate the variable directly.\n  if (rootWithPendingPassiveEffects !== null) {\n    const renderPriority = lanesToEventPriority(pendingPassiveEffectsLanes);\n    const priority = lowerEventPriority(DefaultEventPriority, renderPriority);\n    const prevTransition = ReactCurrentBatchConfig.transition;\n    const previousPriority = getCurrentUpdatePriority();\n    try {\n      ReactCurrentBatchConfig.transition = 0;\n      setCurrentUpdatePriority(priority);\n      return flushPassiveEffectsImpl();\n    } finally {\n      setCurrentUpdatePriority(previousPriority);\n      ReactCurrentBatchConfig.transition = prevTransition;\n    }\n  }\n  return false;\n}\n\nexport function enqueuePendingPassiveProfilerEffect(fiber: Fiber): void {\n  if (enableProfilerTimer && enableProfilerCommitHooks) {\n    pendingPassiveProfilerEffects.push(fiber);\n    if (!rootDoesHavePassiveEffects) {\n      rootDoesHavePassiveEffects = true;\n      scheduleCallback(NormalSchedulerPriority, () => {\n        flushPassiveEffects();\n        return null;\n      });\n    }\n  }\n}\n\nfunction flushPassiveEffectsImpl() {\n  if (rootWithPendingPassiveEffects === null) {\n    return false;\n  }\n\n  const root = rootWithPendingPassiveEffects;\n  const lanes = pendingPassiveEffectsLanes;\n  rootWithPendingPassiveEffects = null;\n  // TODO: This is sometimes out of sync with rootWithPendingPassiveEffects.\n  // Figure out why and fix it. It's not causing any known issues (probably\n  // because it's only used for profiling), but it's a refactor hazard.\n  pendingPassiveEffectsLanes = NoLanes;\n\n  invariant(\n    (executionContext & (RenderContext | CommitContext)) === NoContext,\n    'Cannot flush passive effects while already rendering.',\n  );\n\n  if (__DEV__) {\n    if (enableDebugTracing) {\n      logPassiveEffectsStarted(lanes);\n    }\n  }\n\n  if (enableSchedulingProfiler) {\n    markPassiveEffectsStarted(lanes);\n  }\n\n  const prevExecutionContext = executionContext;\n  executionContext |= CommitContext;\n\n  commitPassiveUnmountEffects(root.current);\n  commitPassiveMountEffects(root, root.current);\n\n  // TODO: Move to commitPassiveMountEffects\n  if (enableProfilerTimer && enableProfilerCommitHooks) {\n    const profilerEffects = pendingPassiveProfilerEffects;\n    pendingPassiveProfilerEffects = [];\n    for (let i = 0; i < profilerEffects.length; i++) {\n      const fiber = ((profilerEffects[i]: any): Fiber);\n      commitPassiveEffectDurations(root, fiber);\n    }\n  }\n\n  if (__DEV__) {\n    if (enableDebugTracing) {\n      logPassiveEffectsStopped();\n    }\n  }\n\n  if (enableSchedulingProfiler) {\n    markPassiveEffectsStopped();\n  }\n\n  if (__DEV__ && enableStrictEffects) {\n    commitDoubleInvokeEffectsInDEV(root.current, true);\n  }\n\n  executionContext = prevExecutionContext;\n\n  flushSyncCallbacks();\n\n  // If additional passive effects were scheduled, increment a counter. If this\n  // exceeds the limit, we'll fire a warning.\n  nestedPassiveUpdateCount =\n    rootWithPendingPassiveEffects === null ? 0 : nestedPassiveUpdateCount + 1;\n\n  // TODO: Move to commitPassiveMountEffects\n  onPostCommitRootDevTools(root);\n  if (enableProfilerTimer && enableProfilerCommitHooks) {\n    const stateNode = root.current.stateNode;\n    stateNode.effectDuration = 0;\n    stateNode.passiveEffectDuration = 0;\n  }\n\n  return true;\n}\n\nexport function isAlreadyFailedLegacyErrorBoundary(instance: mixed): boolean {\n  return (\n    legacyErrorBoundariesThatAlreadyFailed !== null &&\n    legacyErrorBoundariesThatAlreadyFailed.has(instance)\n  );\n}\n\nexport function markLegacyErrorBoundaryAsFailed(instance: mixed) {\n  if (legacyErrorBoundariesThatAlreadyFailed === null) {\n    legacyErrorBoundariesThatAlreadyFailed = new Set([instance]);\n  } else {\n    legacyErrorBoundariesThatAlreadyFailed.add(instance);\n  }\n}\n\nfunction prepareToThrowUncaughtError(error: mixed) {\n  if (!hasUncaughtError) {\n    hasUncaughtError = true;\n    firstUncaughtError = error;\n  }\n}\nexport const onUncaughtError = prepareToThrowUncaughtError;\n\nfunction captureCommitPhaseErrorOnRoot(\n  rootFiber: Fiber,\n  sourceFiber: Fiber,\n  error: mixed,\n) {\n  const errorInfo = createCapturedValue(error, sourceFiber);\n  const update = createRootErrorUpdate(rootFiber, errorInfo, (SyncLane: Lane));\n  enqueueUpdate(rootFiber, update, (SyncLane: Lane));\n  const eventTime = requestEventTime();\n  const root = markUpdateLaneFromFiberToRoot(rootFiber, (SyncLane: Lane));\n  if (root !== null) {\n    markRootUpdated(root, SyncLane, eventTime);\n    ensureRootIsScheduled(root, eventTime);\n  }\n}\n\nexport function captureCommitPhaseError(\n  sourceFiber: Fiber,\n  nearestMountedAncestor: Fiber | null,\n  error: mixed,\n) {\n  if (sourceFiber.tag === HostRoot) {\n    // Error was thrown at the root. There is no parent, so the root\n    // itself should capture it.\n    captureCommitPhaseErrorOnRoot(sourceFiber, sourceFiber, error);\n    return;\n  }\n\n  let fiber = null;\n  if (skipUnmountedBoundaries) {\n    fiber = nearestMountedAncestor;\n  } else {\n    fiber = sourceFiber.return;\n  }\n\n  while (fiber !== null) {\n    if (fiber.tag === HostRoot) {\n      captureCommitPhaseErrorOnRoot(fiber, sourceFiber, error);\n      return;\n    } else if (fiber.tag === ClassComponent) {\n      const ctor = fiber.type;\n      const instance = fiber.stateNode;\n      if (\n        typeof ctor.getDerivedStateFromError === 'function' ||\n        (typeof instance.componentDidCatch === 'function' &&\n          !isAlreadyFailedLegacyErrorBoundary(instance))\n      ) {\n        const errorInfo = createCapturedValue(error, sourceFiber);\n        const update = createClassErrorUpdate(\n          fiber,\n          errorInfo,\n          (SyncLane: Lane),\n        );\n        enqueueUpdate(fiber, update, (SyncLane: Lane));\n        const eventTime = requestEventTime();\n        const root = markUpdateLaneFromFiberToRoot(fiber, (SyncLane: Lane));\n        if (root !== null) {\n          markRootUpdated(root, SyncLane, eventTime);\n          ensureRootIsScheduled(root, eventTime);\n        }\n        return;\n      }\n    }\n    fiber = fiber.return;\n  }\n\n  if (__DEV__) {\n    // TODO: Until we re-land skipUnmountedBoundaries (see #20147), this warning\n    // will fire for errors that are thrown by destroy functions inside deleted\n    // trees. What it should instead do is propagate the error to the parent of\n    // the deleted tree. In the meantime, do not add this warning to the\n    // allowlist; this is only for our internal use.\n    console.error(\n      'Internal React error: Attempted to capture a commit phase error ' +\n        'inside a detached tree. This indicates a bug in React. Likely ' +\n        'causes include deleting the same fiber more than once, committing an ' +\n        'already-finished tree, or an inconsistent return pointer.\\n\\n' +\n        'Error message:\\n\\n%s',\n      error,\n    );\n  }\n}\n\nexport function pingSuspendedRoot(\n  root: FiberRoot,\n  wakeable: Wakeable,\n  pingedLanes: Lanes,\n) {\n  const pingCache = root.pingCache;\n  if (pingCache !== null) {\n    // The wakeable resolved, so we no longer need to memoize, because it will\n    // never be thrown again.\n    pingCache.delete(wakeable);\n  }\n\n  const eventTime = requestEventTime();\n  markRootPinged(root, pingedLanes, eventTime);\n\n  if (\n    workInProgressRoot === root &&\n    isSubsetOfLanes(workInProgressRootRenderLanes, pingedLanes)\n  ) {\n    // Received a ping at the same priority level at which we're currently\n    // rendering. We might want to restart this render. This should mirror\n    // the logic of whether or not a root suspends once it completes.\n\n    // TODO: If we're rendering sync either due to Sync, Batched or expired,\n    // we should probably never restart.\n\n    // If we're suspended with delay, or if it's a retry, we'll always suspend\n    // so we can always restart.\n    if (\n      workInProgressRootExitStatus === RootSuspendedWithDelay ||\n      (workInProgressRootExitStatus === RootSuspended &&\n        includesOnlyRetries(workInProgressRootRenderLanes) &&\n        now() - globalMostRecentFallbackTime < FALLBACK_THROTTLE_MS)\n    ) {\n      // Restart from the root.\n      prepareFreshStack(root, NoLanes);\n    } else {\n      // Even though we can't restart right now, we might get an\n      // opportunity later. So we mark this render as having a ping.\n      workInProgressRootPingedLanes = mergeLanes(\n        workInProgressRootPingedLanes,\n        pingedLanes,\n      );\n    }\n  }\n\n  ensureRootIsScheduled(root, eventTime);\n}\n\nfunction retryTimedOutBoundary(boundaryFiber: Fiber, retryLane: Lane) {\n  // The boundary fiber (a Suspense component or SuspenseList component)\n  // previously was rendered in its fallback state. One of the promises that\n  // suspended it has resolved, which means at least part of the tree was\n  // likely unblocked. Try rendering again, at a new lanes.\n  if (retryLane === NoLane) {\n    // TODO: Assign this to `suspenseState.retryLane`? to avoid\n    // unnecessary entanglement?\n    retryLane = requestRetryLane(boundaryFiber);\n  }\n  // TODO: Special case idle priority?\n  const eventTime = requestEventTime();\n  const root = markUpdateLaneFromFiberToRoot(boundaryFiber, retryLane);\n  if (root !== null) {\n    markRootUpdated(root, retryLane, eventTime);\n    ensureRootIsScheduled(root, eventTime);\n  }\n}\n\nexport function retryDehydratedSuspenseBoundary(boundaryFiber: Fiber) {\n  const suspenseState: null | SuspenseState = boundaryFiber.memoizedState;\n  let retryLane = NoLane;\n  if (suspenseState !== null) {\n    retryLane = suspenseState.retryLane;\n  }\n  retryTimedOutBoundary(boundaryFiber, retryLane);\n}\n\nexport function resolveRetryWakeable(boundaryFiber: Fiber, wakeable: Wakeable) {\n  let retryLane = NoLane; // Default\n  let retryCache: WeakSet<Wakeable> | Set<Wakeable> | null;\n  if (enableSuspenseServerRenderer) {\n    switch (boundaryFiber.tag) {\n      case SuspenseComponent:\n        retryCache = boundaryFiber.stateNode;\n        const suspenseState: null | SuspenseState = boundaryFiber.memoizedState;\n        if (suspenseState !== null) {\n          retryLane = suspenseState.retryLane;\n        }\n        break;\n      case SuspenseListComponent:\n        retryCache = boundaryFiber.stateNode;\n        break;\n      default:\n        invariant(\n          false,\n          'Pinged unknown suspense boundary type. ' +\n            'This is probably a bug in React.',\n        );\n    }\n  } else {\n    retryCache = boundaryFiber.stateNode;\n  }\n\n  if (retryCache !== null) {\n    // The wakeable resolved, so we no longer need to memoize, because it will\n    // never be thrown again.\n    retryCache.delete(wakeable);\n  }\n\n  retryTimedOutBoundary(boundaryFiber, retryLane);\n}\n\n// Computes the next Just Noticeable Difference (JND) boundary.\n// The theory is that a person can't tell the difference between small differences in time.\n// Therefore, if we wait a bit longer than necessary that won't translate to a noticeable\n// difference in the experience. However, waiting for longer might mean that we can avoid\n// showing an intermediate loading state. The longer we have already waited, the harder it\n// is to tell small differences in time. Therefore, the longer we've already waited,\n// the longer we can wait additionally. At some point we have to give up though.\n// We pick a train model where the next boundary commits at a consistent schedule.\n// These particular numbers are vague estimates. We expect to adjust them based on research.\nfunction jnd(timeElapsed: number) {\n  return timeElapsed < 120\n    ? 120\n    : timeElapsed < 480\n    ? 480\n    : timeElapsed < 1080\n    ? 1080\n    : timeElapsed < 1920\n    ? 1920\n    : timeElapsed < 3000\n    ? 3000\n    : timeElapsed < 4320\n    ? 4320\n    : ceil(timeElapsed / 1960) * 1960;\n}\n\nfunction checkForNestedUpdates() {\n  if (nestedUpdateCount > NESTED_UPDATE_LIMIT) {\n    nestedUpdateCount = 0;\n    rootWithNestedUpdates = null;\n    invariant(\n      false,\n      'Maximum update depth exceeded. This can happen when a component ' +\n        'repeatedly calls setState inside componentWillUpdate or ' +\n        'componentDidUpdate. React limits the number of nested updates to ' +\n        'prevent infinite loops.',\n    );\n  }\n\n  if (__DEV__) {\n    if (nestedPassiveUpdateCount > NESTED_PASSIVE_UPDATE_LIMIT) {\n      nestedPassiveUpdateCount = 0;\n      console.error(\n        'Maximum update depth exceeded. This can happen when a component ' +\n          \"calls setState inside useEffect, but useEffect either doesn't \" +\n          'have a dependency array, or one of the dependencies changes on ' +\n          'every render.',\n      );\n    }\n  }\n}\n\nfunction flushRenderPhaseStrictModeWarningsInDEV() {\n  if (__DEV__) {\n    ReactStrictModeWarnings.flushLegacyContextWarning();\n\n    if (warnAboutDeprecatedLifecycles) {\n      ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings();\n    }\n  }\n}\n\nfunction commitDoubleInvokeEffectsInDEV(\n  fiber: Fiber,\n  hasPassiveEffects: boolean,\n) {\n  if (__DEV__ && enableStrictEffects) {\n    // TODO (StrictEffects) Should we set a marker on the root if it contains strict effects\n    // so we don't traverse unnecessarily? similar to subtreeFlags but just at the root level.\n    // Maybe not a big deal since this is DEV only behavior.\n\n    setCurrentDebugFiberInDEV(fiber);\n    invokeEffectsInDev(fiber, MountLayoutDev, invokeLayoutEffectUnmountInDEV);\n    if (hasPassiveEffects) {\n      invokeEffectsInDev(\n        fiber,\n        MountPassiveDev,\n        invokePassiveEffectUnmountInDEV,\n      );\n    }\n\n    invokeEffectsInDev(fiber, MountLayoutDev, invokeLayoutEffectMountInDEV);\n    if (hasPassiveEffects) {\n      invokeEffectsInDev(fiber, MountPassiveDev, invokePassiveEffectMountInDEV);\n    }\n    resetCurrentDebugFiberInDEV();\n  }\n}\n\nfunction invokeEffectsInDev(\n  firstChild: Fiber,\n  fiberFlags: Flags,\n  invokeEffectFn: (fiber: Fiber) => void,\n): void {\n  if (__DEV__ && enableStrictEffects) {\n    // We don't need to re-check StrictEffectsMode here.\n    // This function is only called if that check has already passed.\n\n    let current = firstChild;\n    let subtreeRoot = null;\n    while (current !== null) {\n      const primarySubtreeFlag = current.subtreeFlags & fiberFlags;\n      if (\n        current !== subtreeRoot &&\n        current.child !== null &&\n        primarySubtreeFlag !== NoFlags\n      ) {\n        current = current.child;\n      } else {\n        if ((current.flags & fiberFlags) !== NoFlags) {\n          invokeEffectFn(current);\n        }\n\n        if (current.sibling !== null) {\n          current = current.sibling;\n        } else {\n          current = subtreeRoot = current.return;\n        }\n      }\n    }\n  }\n}\n\nlet didWarnStateUpdateForNotYetMountedComponent: Set<string> | null = null;\nfunction warnAboutUpdateOnNotYetMountedFiberInDEV(fiber) {\n  if (__DEV__) {\n    if ((executionContext & RenderContext) !== NoContext) {\n      // We let the other warning about render phase updates deal with this one.\n      return;\n    }\n\n    if (!(fiber.mode & ConcurrentMode)) {\n      return;\n    }\n\n    const tag = fiber.tag;\n    if (\n      tag !== IndeterminateComponent &&\n      tag !== HostRoot &&\n      tag !== ClassComponent &&\n      tag !== FunctionComponent &&\n      tag !== ForwardRef &&\n      tag !== MemoComponent &&\n      tag !== SimpleMemoComponent\n    ) {\n      // Only warn for user-defined components, not internal ones like Suspense.\n      return;\n    }\n\n    // We show the whole stack but dedupe on the top component's name because\n    // the problematic code almost always lies inside that component.\n    const componentName = getComponentNameFromFiber(fiber) || 'ReactComponent';\n    if (didWarnStateUpdateForNotYetMountedComponent !== null) {\n      if (didWarnStateUpdateForNotYetMountedComponent.has(componentName)) {\n        return;\n      }\n      didWarnStateUpdateForNotYetMountedComponent.add(componentName);\n    } else {\n      didWarnStateUpdateForNotYetMountedComponent = new Set([componentName]);\n    }\n\n    const previousFiber = ReactCurrentFiberCurrent;\n    try {\n      setCurrentDebugFiberInDEV(fiber);\n      console.error(\n        \"Can't perform a React state update on a component that hasn't mounted yet. \" +\n          'This indicates that you have a side-effect in your render function that ' +\n          'asynchronously later calls tries to update the component. Move this work to ' +\n          'useEffect instead.',\n      );\n    } finally {\n      if (previousFiber) {\n        setCurrentDebugFiberInDEV(fiber);\n      } else {\n        resetCurrentDebugFiberInDEV();\n      }\n    }\n  }\n}\n\nlet beginWork;\nif (__DEV__ && replayFailedUnitOfWorkWithInvokeGuardedCallback) {\n  const dummyFiber = null;\n  beginWork = (current, unitOfWork, lanes) => {\n    // If a component throws an error, we replay it again in a synchronously\n    // dispatched event, so that the debugger will treat it as an uncaught\n    // error See ReactErrorUtils for more information.\n\n    // Before entering the begin phase, copy the work-in-progress onto a dummy\n    // fiber. If beginWork throws, we'll use this to reset the state.\n    const originalWorkInProgressCopy = assignFiberPropertiesInDEV(\n      dummyFiber,\n      unitOfWork,\n    );\n    try {\n      return originalBeginWork(current, unitOfWork, lanes);\n    } catch (originalError) {\n      if (\n        originalError !== null &&\n        typeof originalError === 'object' &&\n        typeof originalError.then === 'function'\n      ) {\n        // Don't replay promises. Treat everything else like an error.\n        throw originalError;\n      }\n\n      // Keep this code in sync with handleError; any changes here must have\n      // corresponding changes there.\n      resetContextDependencies();\n      resetHooksAfterThrow();\n      // Don't reset current debug fiber, since we're about to work on the\n      // same fiber again.\n\n      // Unwind the failed stack frame\n      unwindInterruptedWork(unitOfWork, workInProgressRootRenderLanes);\n\n      // Restore the original properties of the fiber.\n      assignFiberPropertiesInDEV(unitOfWork, originalWorkInProgressCopy);\n\n      if (enableProfilerTimer && unitOfWork.mode & ProfileMode) {\n        // Reset the profiler timer.\n        startProfilerTimer(unitOfWork);\n      }\n\n      // Run beginWork again.\n      invokeGuardedCallback(\n        null,\n        originalBeginWork,\n        null,\n        current,\n        unitOfWork,\n        lanes,\n      );\n\n      if (hasCaughtError()) {\n        const replayError = clearCaughtError();\n        if (\n          typeof replayError === 'object' &&\n          replayError !== null &&\n          replayError._suppressLogging &&\n          typeof originalError === 'object' &&\n          originalError !== null &&\n          !originalError._suppressLogging\n        ) {\n          // If suppressed, let the flag carry over to the original error which is the one we'll rethrow.\n          originalError._suppressLogging = true;\n        }\n      }\n      // We always throw the original error in case the second render pass is not idempotent.\n      // This can happen if a memoized function or CommonJS module doesn't throw after first invokation.\n      throw originalError;\n    }\n  };\n} else {\n  beginWork = originalBeginWork;\n}\n\nlet didWarnAboutUpdateInRender = false;\nlet didWarnAboutUpdateInRenderForAnotherComponent;\nif (__DEV__) {\n  didWarnAboutUpdateInRenderForAnotherComponent = new Set();\n}\n\nfunction warnAboutRenderPhaseUpdatesInDEV(fiber) {\n  if (__DEV__) {\n    if (\n      ReactCurrentDebugFiberIsRenderingInDEV &&\n      (executionContext & RenderContext) !== NoContext &&\n      !getIsUpdatingOpaqueValueInRenderPhaseInDEV()\n    ) {\n      switch (fiber.tag) {\n        case FunctionComponent:\n        case ForwardRef:\n        case SimpleMemoComponent: {\n          const renderingComponentName =\n            (workInProgress && getComponentNameFromFiber(workInProgress)) ||\n            'Unknown';\n          // Dedupe by the rendering component because it's the one that needs to be fixed.\n          const dedupeKey = renderingComponentName;\n          if (!didWarnAboutUpdateInRenderForAnotherComponent.has(dedupeKey)) {\n            didWarnAboutUpdateInRenderForAnotherComponent.add(dedupeKey);\n            const setStateComponentName =\n              getComponentNameFromFiber(fiber) || 'Unknown';\n            console.error(\n              'Cannot update a component (`%s`) while rendering a ' +\n                'different component (`%s`). To locate the bad setState() call inside `%s`, ' +\n                'follow the stack trace as described in https://reactjs.org/link/setstate-in-render',\n              setStateComponentName,\n              renderingComponentName,\n              renderingComponentName,\n            );\n          }\n          break;\n        }\n        case ClassComponent: {\n          if (!didWarnAboutUpdateInRender) {\n            console.error(\n              'Cannot update during an existing state transition (such as ' +\n                'within `render`). Render methods should be a pure ' +\n                'function of props and state.',\n            );\n            didWarnAboutUpdateInRender = true;\n          }\n          break;\n        }\n      }\n    }\n  }\n}\n\nexport function restorePendingUpdaters(root: FiberRoot, lanes: Lanes): void {\n  if (enableUpdaterTracking) {\n    if (isDevToolsPresent) {\n      const memoizedUpdaters = root.memoizedUpdaters;\n      memoizedUpdaters.forEach(schedulingFiber => {\n        addFiberToLanesMap(root, schedulingFiber, lanes);\n      });\n\n      // This function intentionally does not clear memoized updaters.\n      // Those may still be relevant to the current commit\n      // and a future one (e.g. Suspense).\n    }\n  }\n}\n\nconst fakeActCallbackNode = {};\nfunction scheduleCallback(priorityLevel, callback) {\n  if (__DEV__) {\n    // If we're currently inside an `act` scope, bypass Scheduler and push to\n    // the `act` queue instead.\n    const actQueue = ReactCurrentActQueue.current;\n    if (actQueue !== null) {\n      actQueue.push(callback);\n      return fakeActCallbackNode;\n    } else {\n      return Scheduler_scheduleCallback(priorityLevel, callback);\n    }\n  } else {\n    // In production, always call Scheduler. This function will be stripped out.\n    return Scheduler_scheduleCallback(priorityLevel, callback);\n  }\n}\n\nfunction cancelCallback(callbackNode) {\n  if (__DEV__ && callbackNode === fakeActCallbackNode) {\n    return;\n  }\n  // In production, always call Scheduler. This function will be stripped out.\n  return Scheduler_cancelCallback(callbackNode);\n}\n\nfunction shouldForceFlushFallbacksInDEV() {\n  // Never force flush in production. This function should get stripped out.\n  return __DEV__ && ReactCurrentActQueue.current !== null;\n}\n\nexport function warnIfNotCurrentlyActingEffectsInDEV(fiber: Fiber): void {\n  if (__DEV__) {\n    if (\n      warnsIfNotActing === true &&\n      (fiber.mode & StrictLegacyMode) !== NoMode &&\n      ReactCurrentActQueue.current === null &&\n      // Our internal tests use a custom implementation of `act` that works by\n      // mocking the Scheduler package. Disable the `act` warning.\n      // TODO: Maybe the warning should be disabled by default, and then turned\n      // on at the testing frameworks layer? Instead of what we do now, which\n      // is check if a `jest` global is defined.\n      ReactCurrentActQueue.disableActWarning === false\n    ) {\n      console.error(\n        'An update to %s ran an effect, but was not wrapped in act(...).\\n\\n' +\n          'When testing, code that causes React state updates should be ' +\n          'wrapped into act(...):\\n\\n' +\n          'act(() => {\\n' +\n          '  /* fire events that update state */\\n' +\n          '});\\n' +\n          '/* assert on the output */\\n\\n' +\n          \"This ensures that you're testing the behavior the user would see \" +\n          'in the browser.' +\n          ' Learn more at https://reactjs.org/link/wrap-tests-with-act',\n        getComponentNameFromFiber(fiber),\n      );\n    }\n  }\n}\n\nfunction warnIfNotCurrentlyActingUpdatesInDEV(fiber: Fiber): void {\n  if (__DEV__) {\n    if (\n      warnsIfNotActing === true &&\n      executionContext === NoContext &&\n      ReactCurrentActQueue.current === null &&\n      // Our internal tests use a custom implementation of `act` that works by\n      // mocking the Scheduler package. Disable the `act` warning.\n      // TODO: Maybe the warning should be disabled by default, and then turned\n      // on at the testing frameworks layer? Instead of what we do now, which\n      // is check if a `jest` global is defined.\n      ReactCurrentActQueue.disableActWarning === false\n    ) {\n      const previousFiber = ReactCurrentFiberCurrent;\n      try {\n        setCurrentDebugFiberInDEV(fiber);\n        console.error(\n          'An update to %s inside a test was not wrapped in act(...).\\n\\n' +\n            'When testing, code that causes React state updates should be ' +\n            'wrapped into act(...):\\n\\n' +\n            'act(() => {\\n' +\n            '  /* fire events that update state */\\n' +\n            '});\\n' +\n            '/* assert on the output */\\n\\n' +\n            \"This ensures that you're testing the behavior the user would see \" +\n            'in the browser.' +\n            ' Learn more at https://reactjs.org/link/wrap-tests-with-act',\n          getComponentNameFromFiber(fiber),\n        );\n      } finally {\n        if (previousFiber) {\n          setCurrentDebugFiberInDEV(fiber);\n        } else {\n          resetCurrentDebugFiberInDEV();\n        }\n      }\n    }\n  }\n}\n\nexport const warnIfNotCurrentlyActingUpdatesInDev = warnIfNotCurrentlyActingUpdatesInDEV;\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {ReactElement} from 'shared/ReactElementType';\nimport type {Fiber} from './ReactInternalTypes';\nimport type {FiberRoot} from './ReactInternalTypes';\nimport type {Instance} from './ReactFiberHostConfig';\nimport type {ReactNodeList} from 'shared/ReactTypes';\n\nimport {\n  flushSync,\n  scheduleUpdateOnFiber,\n  flushPassiveEffects,\n} from './ReactFiberWorkLoop.old';\nimport {updateContainer} from './ReactFiberReconciler.old';\nimport {emptyContextObject} from './ReactFiberContext.old';\nimport {SyncLane, NoTimestamp} from './ReactFiberLane.old';\nimport {\n  ClassComponent,\n  FunctionComponent,\n  ForwardRef,\n  HostComponent,\n  HostPortal,\n  HostRoot,\n  MemoComponent,\n  SimpleMemoComponent,\n} from './ReactWorkTags';\nimport {\n  REACT_FORWARD_REF_TYPE,\n  REACT_MEMO_TYPE,\n  REACT_LAZY_TYPE,\n} from 'shared/ReactSymbols';\n\nexport type Family = {|\n  current: any,\n|};\n\nexport type RefreshUpdate = {|\n  staleFamilies: Set<Family>,\n  updatedFamilies: Set<Family>,\n|};\n\n// Resolves type to a family.\ntype RefreshHandler = any => Family | void;\n\n// Used by React Refresh runtime through DevTools Global Hook.\nexport type SetRefreshHandler = (handler: RefreshHandler | null) => void;\nexport type ScheduleRefresh = (root: FiberRoot, update: RefreshUpdate) => void;\nexport type ScheduleRoot = (root: FiberRoot, element: ReactNodeList) => void;\nexport type FindHostInstancesForRefresh = (\n  root: FiberRoot,\n  families: Array<Family>,\n) => Set<Instance>;\n\nlet resolveFamily: RefreshHandler | null = null;\n// $FlowFixMe Flow gets confused by a WeakSet feature check below.\nlet failedBoundaries: WeakSet<Fiber> | null = null;\n\nexport const setRefreshHandler = (handler: RefreshHandler | null): void => {\n  if (__DEV__) {\n    resolveFamily = handler;\n  }\n};\n\nexport function resolveFunctionForHotReloading(type: any): any {\n  if (__DEV__) {\n    if (resolveFamily === null) {\n      // Hot reloading is disabled.\n      return type;\n    }\n    const family = resolveFamily(type);\n    if (family === undefined) {\n      return type;\n    }\n    // Use the latest known implementation.\n    return family.current;\n  } else {\n    return type;\n  }\n}\n\nexport function resolveClassForHotReloading(type: any): any {\n  // No implementation differences.\n  return resolveFunctionForHotReloading(type);\n}\n\nexport function resolveForwardRefForHotReloading(type: any): any {\n  if (__DEV__) {\n    if (resolveFamily === null) {\n      // Hot reloading is disabled.\n      return type;\n    }\n    const family = resolveFamily(type);\n    if (family === undefined) {\n      // Check if we're dealing with a real forwardRef. Don't want to crash early.\n      if (\n        type !== null &&\n        type !== undefined &&\n        typeof type.render === 'function'\n      ) {\n        // ForwardRef is special because its resolved .type is an object,\n        // but it's possible that we only have its inner render function in the map.\n        // If that inner render function is different, we'll build a new forwardRef type.\n        const currentRender = resolveFunctionForHotReloading(type.render);\n        if (type.render !== currentRender) {\n          const syntheticType = {\n            $$typeof: REACT_FORWARD_REF_TYPE,\n            render: currentRender,\n          };\n          if (type.displayName !== undefined) {\n            (syntheticType: any).displayName = type.displayName;\n          }\n          return syntheticType;\n        }\n      }\n      return type;\n    }\n    // Use the latest known implementation.\n    return family.current;\n  } else {\n    return type;\n  }\n}\n\nexport function isCompatibleFamilyForHotReloading(\n  fiber: Fiber,\n  element: ReactElement,\n): boolean {\n  if (__DEV__) {\n    if (resolveFamily === null) {\n      // Hot reloading is disabled.\n      return false;\n    }\n\n    const prevType = fiber.elementType;\n    const nextType = element.type;\n\n    // If we got here, we know types aren't === equal.\n    let needsCompareFamilies = false;\n\n    const $$typeofNextType =\n      typeof nextType === 'object' && nextType !== null\n        ? nextType.$$typeof\n        : null;\n\n    switch (fiber.tag) {\n      case ClassComponent: {\n        if (typeof nextType === 'function') {\n          needsCompareFamilies = true;\n        }\n        break;\n      }\n      case FunctionComponent: {\n        if (typeof nextType === 'function') {\n          needsCompareFamilies = true;\n        } else if ($$typeofNextType === REACT_LAZY_TYPE) {\n          // We don't know the inner type yet.\n          // We're going to assume that the lazy inner type is stable,\n          // and so it is sufficient to avoid reconciling it away.\n          // We're not going to unwrap or actually use the new lazy type.\n          needsCompareFamilies = true;\n        }\n        break;\n      }\n      case ForwardRef: {\n        if ($$typeofNextType === REACT_FORWARD_REF_TYPE) {\n          needsCompareFamilies = true;\n        } else if ($$typeofNextType === REACT_LAZY_TYPE) {\n          needsCompareFamilies = true;\n        }\n        break;\n      }\n      case MemoComponent:\n      case SimpleMemoComponent: {\n        if ($$typeofNextType === REACT_MEMO_TYPE) {\n          // TODO: if it was but can no longer be simple,\n          // we shouldn't set this.\n          needsCompareFamilies = true;\n        } else if ($$typeofNextType === REACT_LAZY_TYPE) {\n          needsCompareFamilies = true;\n        }\n        break;\n      }\n      default:\n        return false;\n    }\n\n    // Check if both types have a family and it's the same one.\n    if (needsCompareFamilies) {\n      // Note: memo() and forwardRef() we'll compare outer rather than inner type.\n      // This means both of them need to be registered to preserve state.\n      // If we unwrapped and compared the inner types for wrappers instead,\n      // then we would risk falsely saying two separate memo(Foo)\n      // calls are equivalent because they wrap the same Foo function.\n      const prevFamily = resolveFamily(prevType);\n      if (prevFamily !== undefined && prevFamily === resolveFamily(nextType)) {\n        return true;\n      }\n    }\n    return false;\n  } else {\n    return false;\n  }\n}\n\nexport function markFailedErrorBoundaryForHotReloading(fiber: Fiber) {\n  if (__DEV__) {\n    if (resolveFamily === null) {\n      // Hot reloading is disabled.\n      return;\n    }\n    if (typeof WeakSet !== 'function') {\n      return;\n    }\n    if (failedBoundaries === null) {\n      failedBoundaries = new WeakSet();\n    }\n    failedBoundaries.add(fiber);\n  }\n}\n\nexport const scheduleRefresh: ScheduleRefresh = (\n  root: FiberRoot,\n  update: RefreshUpdate,\n): void => {\n  if (__DEV__) {\n    if (resolveFamily === null) {\n      // Hot reloading is disabled.\n      return;\n    }\n    const {staleFamilies, updatedFamilies} = update;\n    flushPassiveEffects();\n    flushSync(() => {\n      scheduleFibersWithFamiliesRecursively(\n        root.current,\n        updatedFamilies,\n        staleFamilies,\n      );\n    });\n  }\n};\n\nexport const scheduleRoot: ScheduleRoot = (\n  root: FiberRoot,\n  element: ReactNodeList,\n): void => {\n  if (__DEV__) {\n    if (root.context !== emptyContextObject) {\n      // Super edge case: root has a legacy _renderSubtree context\n      // but we don't know the parentComponent so we can't pass it.\n      // Just ignore. We'll delete this with _renderSubtree code path later.\n      return;\n    }\n    flushPassiveEffects();\n    flushSync(() => {\n      updateContainer(element, root, null, null);\n    });\n  }\n};\n\nfunction scheduleFibersWithFamiliesRecursively(\n  fiber: Fiber,\n  updatedFamilies: Set<Family>,\n  staleFamilies: Set<Family>,\n) {\n  if (__DEV__) {\n    const {alternate, child, sibling, tag, type} = fiber;\n\n    let candidateType = null;\n    switch (tag) {\n      case FunctionComponent:\n      case SimpleMemoComponent:\n      case ClassComponent:\n        candidateType = type;\n        break;\n      case ForwardRef:\n        candidateType = type.render;\n        break;\n      default:\n        break;\n    }\n\n    if (resolveFamily === null) {\n      throw new Error('Expected resolveFamily to be set during hot reload.');\n    }\n\n    let needsRender = false;\n    let needsRemount = false;\n    if (candidateType !== null) {\n      const family = resolveFamily(candidateType);\n      if (family !== undefined) {\n        if (staleFamilies.has(family)) {\n          needsRemount = true;\n        } else if (updatedFamilies.has(family)) {\n          if (tag === ClassComponent) {\n            needsRemount = true;\n          } else {\n            needsRender = true;\n          }\n        }\n      }\n    }\n    if (failedBoundaries !== null) {\n      if (\n        failedBoundaries.has(fiber) ||\n        (alternate !== null && failedBoundaries.has(alternate))\n      ) {\n        needsRemount = true;\n      }\n    }\n\n    if (needsRemount) {\n      fiber._debugNeedsRemount = true;\n    }\n    if (needsRemount || needsRender) {\n      scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);\n    }\n    if (child !== null && !needsRemount) {\n      scheduleFibersWithFamiliesRecursively(\n        child,\n        updatedFamilies,\n        staleFamilies,\n      );\n    }\n    if (sibling !== null) {\n      scheduleFibersWithFamiliesRecursively(\n        sibling,\n        updatedFamilies,\n        staleFamilies,\n      );\n    }\n  }\n}\n\nexport const findHostInstancesForRefresh: FindHostInstancesForRefresh = (\n  root: FiberRoot,\n  families: Array<Family>,\n): Set<Instance> => {\n  if (__DEV__) {\n    const hostInstances = new Set();\n    const types = new Set(families.map(family => family.current));\n    findHostInstancesForMatchingFibersRecursively(\n      root.current,\n      types,\n      hostInstances,\n    );\n    return hostInstances;\n  } else {\n    throw new Error(\n      'Did not expect findHostInstancesForRefresh to be called in production.',\n    );\n  }\n};\n\nfunction findHostInstancesForMatchingFibersRecursively(\n  fiber: Fiber,\n  types: Set<any>,\n  hostInstances: Set<Instance>,\n) {\n  if (__DEV__) {\n    const {child, sibling, tag, type} = fiber;\n\n    let candidateType = null;\n    switch (tag) {\n      case FunctionComponent:\n      case SimpleMemoComponent:\n      case ClassComponent:\n        candidateType = type;\n        break;\n      case ForwardRef:\n        candidateType = type.render;\n        break;\n      default:\n        break;\n    }\n\n    let didMatch = false;\n    if (candidateType !== null) {\n      if (types.has(candidateType)) {\n        didMatch = true;\n      }\n    }\n\n    if (didMatch) {\n      // We have a match. This only drills down to the closest host components.\n      // There's no need to search deeper because for the purpose of giving\n      // visual feedback, \"flashing\" outermost parent rectangles is sufficient.\n      findHostInstancesForFiberShallowly(fiber, hostInstances);\n    } else {\n      // If there's no match, maybe there will be one further down in the child tree.\n      if (child !== null) {\n        findHostInstancesForMatchingFibersRecursively(\n          child,\n          types,\n          hostInstances,\n        );\n      }\n    }\n\n    if (sibling !== null) {\n      findHostInstancesForMatchingFibersRecursively(\n        sibling,\n        types,\n        hostInstances,\n      );\n    }\n  }\n}\n\nfunction findHostInstancesForFiberShallowly(\n  fiber: Fiber,\n  hostInstances: Set<Instance>,\n): void {\n  if (__DEV__) {\n    const foundHostInstances = findChildHostInstancesForFiberShallowly(\n      fiber,\n      hostInstances,\n    );\n    if (foundHostInstances) {\n      return;\n    }\n    // If we didn't find any host children, fallback to closest host parent.\n    let node = fiber;\n    while (true) {\n      switch (node.tag) {\n        case HostComponent:\n          hostInstances.add(node.stateNode);\n          return;\n        case HostPortal:\n          hostInstances.add(node.stateNode.containerInfo);\n          return;\n        case HostRoot:\n          hostInstances.add(node.stateNode.containerInfo);\n          return;\n      }\n      if (node.return === null) {\n        throw new Error('Expected to reach root first.');\n      }\n      node = node.return;\n    }\n  }\n}\n\nfunction findChildHostInstancesForFiberShallowly(\n  fiber: Fiber,\n  hostInstances: Set<Instance>,\n): boolean {\n  if (__DEV__) {\n    let node: Fiber = fiber;\n    let foundHostInstances = false;\n    while (true) {\n      if (node.tag === HostComponent) {\n        // We got a match.\n        foundHostInstances = true;\n        hostInstances.add(node.stateNode);\n        // There may still be more, so keep searching.\n      } else if (node.child !== null) {\n        node.child.return = node;\n        node = node.child;\n        continue;\n      }\n      if (node === fiber) {\n        return foundHostInstances;\n      }\n      while (node.sibling === null) {\n        if (node.return === null || node.return === fiber) {\n          return foundHostInstances;\n        }\n        node = node.return;\n      }\n      node.sibling.return = node.return;\n      node = node.sibling;\n    }\n  }\n  return false;\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {ReactElement} from 'shared/ReactElementType';\nimport type {ReactFragment, ReactPortal, ReactScope} from 'shared/ReactTypes';\nimport type {Fiber} from './ReactInternalTypes';\nimport type {RootTag} from './ReactRootTags';\nimport type {WorkTag} from './ReactWorkTags';\nimport type {TypeOfMode} from './ReactTypeOfMode';\nimport type {Lanes} from './ReactFiberLane.old';\nimport type {SuspenseInstance, Props} from './ReactFiberHostConfig';\nimport type {OffscreenProps} from './ReactFiberOffscreenComponent';\n\nimport invariant from 'shared/invariant';\nimport {\n  createRootStrictEffectsByDefault,\n  enableCache,\n  enableStrictEffects,\n  enableProfilerTimer,\n  enableScopeAPI,\n  enableSyncDefaultUpdates,\n  allowConcurrentByDefault,\n} from 'shared/ReactFeatureFlags';\nimport {\n  supportsPersistence,\n  getOffscreenContainerType,\n} from './ReactFiberHostConfig';\nimport {NoFlags, Placement, StaticMask} from './ReactFiberFlags';\nimport {ConcurrentRoot} from './ReactRootTags';\nimport {\n  IndeterminateComponent,\n  ClassComponent,\n  HostRoot,\n  HostComponent,\n  HostText,\n  HostPortal,\n  ForwardRef,\n  Fragment,\n  Mode,\n  ContextProvider,\n  ContextConsumer,\n  Profiler,\n  SuspenseComponent,\n  SuspenseListComponent,\n  DehydratedFragment,\n  FunctionComponent,\n  MemoComponent,\n  SimpleMemoComponent,\n  LazyComponent,\n  ScopeComponent,\n  OffscreenComponent,\n  LegacyHiddenComponent,\n  CacheComponent,\n} from './ReactWorkTags';\nimport getComponentNameFromFiber from 'react-reconciler/src/getComponentNameFromFiber';\n\nimport {isDevToolsPresent} from './ReactFiberDevToolsHook.old';\nimport {\n  resolveClassForHotReloading,\n  resolveFunctionForHotReloading,\n  resolveForwardRefForHotReloading,\n} from './ReactFiberHotReloading.old';\nimport {NoLanes} from './ReactFiberLane.old';\nimport {\n  NoMode,\n  ConcurrentMode,\n  DebugTracingMode,\n  ProfileMode,\n  StrictLegacyMode,\n  StrictEffectsMode,\n  ConcurrentUpdatesByDefaultMode,\n} from './ReactTypeOfMode';\nimport {\n  REACT_FORWARD_REF_TYPE,\n  REACT_FRAGMENT_TYPE,\n  REACT_DEBUG_TRACING_MODE_TYPE,\n  REACT_STRICT_MODE_TYPE,\n  REACT_PROFILER_TYPE,\n  REACT_PROVIDER_TYPE,\n  REACT_CONTEXT_TYPE,\n  REACT_SUSPENSE_TYPE,\n  REACT_SUSPENSE_LIST_TYPE,\n  REACT_MEMO_TYPE,\n  REACT_LAZY_TYPE,\n  REACT_SCOPE_TYPE,\n  REACT_OFFSCREEN_TYPE,\n  REACT_LEGACY_HIDDEN_TYPE,\n  REACT_CACHE_TYPE,\n} from 'shared/ReactSymbols';\n\nexport type {Fiber};\n\nlet hasBadMapPolyfill;\n\nif (__DEV__) {\n  hasBadMapPolyfill = false;\n  try {\n    const nonExtensibleObject = Object.preventExtensions({});\n    /* eslint-disable no-new */\n    new Map([[nonExtensibleObject, null]]);\n    new Set([nonExtensibleObject]);\n    /* eslint-enable no-new */\n  } catch (e) {\n    // TODO: Consider warning about bad polyfills\n    hasBadMapPolyfill = true;\n  }\n}\n\nfunction FiberNode(\n  tag: WorkTag,\n  pendingProps: mixed,\n  key: null | string,\n  mode: TypeOfMode,\n) {\n  // Instance\n  this.tag = tag;\n  this.key = key;\n  this.elementType = null;\n  this.type = null;\n  this.stateNode = null;\n\n  // Fiber\n  this.return = null;\n  this.child = null;\n  this.sibling = null;\n  this.index = 0;\n\n  this.ref = null;\n\n  this.pendingProps = pendingProps;\n  this.memoizedProps = null;\n  this.updateQueue = null;\n  this.memoizedState = null;\n  this.dependencies = null;\n\n  this.mode = mode;\n\n  // Effects\n  this.flags = NoFlags;\n  this.subtreeFlags = NoFlags;\n  this.deletions = null;\n\n  this.lanes = NoLanes;\n  this.childLanes = NoLanes;\n\n  this.alternate = null;\n\n  if (enableProfilerTimer) {\n    // Note: The following is done to avoid a v8 performance cliff.\n    //\n    // Initializing the fields below to smis and later updating them with\n    // double values will cause Fibers to end up having separate shapes.\n    // This behavior/bug has something to do with Object.preventExtension().\n    // Fortunately this only impacts DEV builds.\n    // Unfortunately it makes React unusably slow for some applications.\n    // To work around this, initialize the fields below with doubles.\n    //\n    // Learn more about this here:\n    // https://github.com/facebook/react/issues/14365\n    // https://bugs.chromium.org/p/v8/issues/detail?id=8538\n    this.actualDuration = Number.NaN;\n    this.actualStartTime = Number.NaN;\n    this.selfBaseDuration = Number.NaN;\n    this.treeBaseDuration = Number.NaN;\n\n    // It's okay to replace the initial doubles with smis after initialization.\n    // This won't trigger the performance cliff mentioned above,\n    // and it simplifies other profiler code (including DevTools).\n    this.actualDuration = 0;\n    this.actualStartTime = -1;\n    this.selfBaseDuration = 0;\n    this.treeBaseDuration = 0;\n  }\n\n  if (__DEV__) {\n    // This isn't directly used but is handy for debugging internals:\n\n    this._debugSource = null;\n    this._debugOwner = null;\n    this._debugNeedsRemount = false;\n    this._debugHookTypes = null;\n    if (!hasBadMapPolyfill && typeof Object.preventExtensions === 'function') {\n      Object.preventExtensions(this);\n    }\n  }\n}\n\n// This is a constructor function, rather than a POJO constructor, still\n// please ensure we do the following:\n// 1) Nobody should add any instance methods on this. Instance methods can be\n//    more difficult to predict when they get optimized and they are almost\n//    never inlined properly in static compilers.\n// 2) Nobody should rely on `instanceof Fiber` for type testing. We should\n//    always know when it is a fiber.\n// 3) We might want to experiment with using numeric keys since they are easier\n//    to optimize in a non-JIT environment.\n// 4) We can easily go from a constructor to a createFiber object literal if that\n//    is faster.\n// 5) It should be easy to port this to a C struct and keep a C implementation\n//    compatible.\nconst createFiber = function(\n  tag: WorkTag,\n  pendingProps: mixed,\n  key: null | string,\n  mode: TypeOfMode,\n): Fiber {\n  // $FlowFixMe: the shapes are exact here but Flow doesn't like constructors\n  return new FiberNode(tag, pendingProps, key, mode);\n};\n\nfunction shouldConstruct(Component: Function) {\n  const prototype = Component.prototype;\n  return !!(prototype && prototype.isReactComponent);\n}\n\nexport function isSimpleFunctionComponent(type: any) {\n  return (\n    typeof type === 'function' &&\n    !shouldConstruct(type) &&\n    type.defaultProps === undefined\n  );\n}\n\nexport function resolveLazyComponentTag(Component: Function): WorkTag {\n  if (typeof Component === 'function') {\n    return shouldConstruct(Component) ? ClassComponent : FunctionComponent;\n  } else if (Component !== undefined && Component !== null) {\n    const $$typeof = Component.$$typeof;\n    if ($$typeof === REACT_FORWARD_REF_TYPE) {\n      return ForwardRef;\n    }\n    if ($$typeof === REACT_MEMO_TYPE) {\n      return MemoComponent;\n    }\n  }\n  return IndeterminateComponent;\n}\n\n// This is used to create an alternate fiber to do work on.\nexport function createWorkInProgress(current: Fiber, pendingProps: any): Fiber {\n  let workInProgress = current.alternate;\n  if (workInProgress === null) {\n    // We use a double buffering pooling technique because we know that we'll\n    // only ever need at most two versions of a tree. We pool the \"other\" unused\n    // node that we're free to reuse. This is lazily created to avoid allocating\n    // extra objects for things that are never updated. It also allow us to\n    // reclaim the extra memory if needed.\n    workInProgress = createFiber(\n      current.tag,\n      pendingProps,\n      current.key,\n      current.mode,\n    );\n    workInProgress.elementType = current.elementType;\n    workInProgress.type = current.type;\n    workInProgress.stateNode = current.stateNode;\n\n    if (__DEV__) {\n      // DEV-only fields\n\n      workInProgress._debugSource = current._debugSource;\n      workInProgress._debugOwner = current._debugOwner;\n      workInProgress._debugHookTypes = current._debugHookTypes;\n    }\n\n    workInProgress.alternate = current;\n    current.alternate = workInProgress;\n  } else {\n    workInProgress.pendingProps = pendingProps;\n    // Needed because Blocks store data on type.\n    workInProgress.type = current.type;\n\n    // We already have an alternate.\n    // Reset the effect tag.\n    workInProgress.flags = NoFlags;\n\n    // The effects are no longer valid.\n    workInProgress.subtreeFlags = NoFlags;\n    workInProgress.deletions = null;\n\n    if (enableProfilerTimer) {\n      // We intentionally reset, rather than copy, actualDuration & actualStartTime.\n      // This prevents time from endlessly accumulating in new commits.\n      // This has the downside of resetting values for different priority renders,\n      // But works for yielding (the common case) and should support resuming.\n      workInProgress.actualDuration = 0;\n      workInProgress.actualStartTime = -1;\n    }\n  }\n\n  // Reset all effects except static ones.\n  // Static effects are not specific to a render.\n  workInProgress.flags = current.flags & StaticMask;\n  workInProgress.childLanes = current.childLanes;\n  workInProgress.lanes = current.lanes;\n\n  workInProgress.child = current.child;\n  workInProgress.memoizedProps = current.memoizedProps;\n  workInProgress.memoizedState = current.memoizedState;\n  workInProgress.updateQueue = current.updateQueue;\n\n  // Clone the dependencies object. This is mutated during the render phase, so\n  // it cannot be shared with the current fiber.\n  const currentDependencies = current.dependencies;\n  workInProgress.dependencies =\n    currentDependencies === null\n      ? null\n      : {\n          lanes: currentDependencies.lanes,\n          firstContext: currentDependencies.firstContext,\n        };\n\n  // These will be overridden during the parent's reconciliation\n  workInProgress.sibling = current.sibling;\n  workInProgress.index = current.index;\n  workInProgress.ref = current.ref;\n\n  if (enableProfilerTimer) {\n    workInProgress.selfBaseDuration = current.selfBaseDuration;\n    workInProgress.treeBaseDuration = current.treeBaseDuration;\n  }\n\n  if (__DEV__) {\n    workInProgress._debugNeedsRemount = current._debugNeedsRemount;\n    switch (workInProgress.tag) {\n      case IndeterminateComponent:\n      case FunctionComponent:\n      case SimpleMemoComponent:\n        workInProgress.type = resolveFunctionForHotReloading(current.type);\n        break;\n      case ClassComponent:\n        workInProgress.type = resolveClassForHotReloading(current.type);\n        break;\n      case ForwardRef:\n        workInProgress.type = resolveForwardRefForHotReloading(current.type);\n        break;\n      default:\n        break;\n    }\n  }\n\n  return workInProgress;\n}\n\n// Used to reuse a Fiber for a second pass.\nexport function resetWorkInProgress(workInProgress: Fiber, renderLanes: Lanes) {\n  // This resets the Fiber to what createFiber or createWorkInProgress would\n  // have set the values to before during the first pass. Ideally this wouldn't\n  // be necessary but unfortunately many code paths reads from the workInProgress\n  // when they should be reading from current and writing to workInProgress.\n\n  // We assume pendingProps, index, key, ref, return are still untouched to\n  // avoid doing another reconciliation.\n\n  // Reset the effect flags but keep any Placement tags, since that's something\n  // that child fiber is setting, not the reconciliation.\n  workInProgress.flags &= StaticMask | Placement;\n\n  // The effects are no longer valid.\n\n  const current = workInProgress.alternate;\n  if (current === null) {\n    // Reset to createFiber's initial values.\n    workInProgress.childLanes = NoLanes;\n    workInProgress.lanes = renderLanes;\n\n    workInProgress.child = null;\n    workInProgress.subtreeFlags = NoFlags;\n    workInProgress.memoizedProps = null;\n    workInProgress.memoizedState = null;\n    workInProgress.updateQueue = null;\n\n    workInProgress.dependencies = null;\n\n    workInProgress.stateNode = null;\n\n    if (enableProfilerTimer) {\n      // Note: We don't reset the actualTime counts. It's useful to accumulate\n      // actual time across multiple render passes.\n      workInProgress.selfBaseDuration = 0;\n      workInProgress.treeBaseDuration = 0;\n    }\n  } else {\n    // Reset to the cloned values that createWorkInProgress would've.\n    workInProgress.childLanes = current.childLanes;\n    workInProgress.lanes = current.lanes;\n\n    workInProgress.child = current.child;\n    workInProgress.subtreeFlags = NoFlags;\n    workInProgress.deletions = null;\n    workInProgress.memoizedProps = current.memoizedProps;\n    workInProgress.memoizedState = current.memoizedState;\n    workInProgress.updateQueue = current.updateQueue;\n    // Needed because Blocks store data on type.\n    workInProgress.type = current.type;\n\n    // Clone the dependencies object. This is mutated during the render phase, so\n    // it cannot be shared with the current fiber.\n    const currentDependencies = current.dependencies;\n    workInProgress.dependencies =\n      currentDependencies === null\n        ? null\n        : {\n            lanes: currentDependencies.lanes,\n            firstContext: currentDependencies.firstContext,\n          };\n\n    if (enableProfilerTimer) {\n      // Note: We don't reset the actualTime counts. It's useful to accumulate\n      // actual time across multiple render passes.\n      workInProgress.selfBaseDuration = current.selfBaseDuration;\n      workInProgress.treeBaseDuration = current.treeBaseDuration;\n    }\n  }\n\n  return workInProgress;\n}\n\nexport function createHostRootFiber(\n  tag: RootTag,\n  isStrictMode: boolean,\n  concurrentUpdatesByDefaultOverride: null | boolean,\n): Fiber {\n  let mode;\n  if (tag === ConcurrentRoot) {\n    mode = ConcurrentMode;\n    if (isStrictMode === true) {\n      mode |= StrictLegacyMode;\n\n      if (enableStrictEffects) {\n        mode |= StrictEffectsMode;\n      }\n    } else if (enableStrictEffects && createRootStrictEffectsByDefault) {\n      mode |= StrictLegacyMode | StrictEffectsMode;\n    }\n    if (\n      // We only use this flag for our repo tests to check both behaviors.\n      // TODO: Flip this flag and rename it something like \"forceConcurrentByDefaultForTesting\"\n      !enableSyncDefaultUpdates ||\n      // Only for internal experiments.\n      (allowConcurrentByDefault && concurrentUpdatesByDefaultOverride)\n    ) {\n      mode |= ConcurrentUpdatesByDefaultMode;\n    }\n  } else {\n    mode = NoMode;\n  }\n\n  if (enableProfilerTimer && isDevToolsPresent) {\n    // Always collect profile timings when DevTools are present.\n    // This enables DevTools to start capturing timing at any point–\n    // Without some nodes in the tree having empty base times.\n    mode |= ProfileMode;\n  }\n\n  return createFiber(HostRoot, null, null, mode);\n}\n\nexport function createFiberFromTypeAndProps(\n  type: any, // React$ElementType\n  key: null | string,\n  pendingProps: any,\n  owner: null | Fiber,\n  mode: TypeOfMode,\n  lanes: Lanes,\n): Fiber {\n  let fiberTag = IndeterminateComponent;\n  // The resolved type is set if we know what the final type will be. I.e. it's not lazy.\n  let resolvedType = type;\n  if (typeof type === 'function') {\n    if (shouldConstruct(type)) {\n      fiberTag = ClassComponent;\n      if (__DEV__) {\n        resolvedType = resolveClassForHotReloading(resolvedType);\n      }\n    } else {\n      if (__DEV__) {\n        resolvedType = resolveFunctionForHotReloading(resolvedType);\n      }\n    }\n  } else if (typeof type === 'string') {\n    fiberTag = HostComponent;\n  } else {\n    getTag: switch (type) {\n      case REACT_FRAGMENT_TYPE:\n        return createFiberFromFragment(pendingProps.children, mode, lanes, key);\n      case REACT_DEBUG_TRACING_MODE_TYPE:\n        fiberTag = Mode;\n        mode |= DebugTracingMode;\n        break;\n      case REACT_STRICT_MODE_TYPE:\n        fiberTag = Mode;\n        mode |= StrictLegacyMode;\n        if (enableStrictEffects && (mode & ConcurrentMode) !== NoMode) {\n          // Strict effects should never run on legacy roots\n          mode |= StrictEffectsMode;\n        }\n        break;\n      case REACT_PROFILER_TYPE:\n        return createFiberFromProfiler(pendingProps, mode, lanes, key);\n      case REACT_SUSPENSE_TYPE:\n        return createFiberFromSuspense(pendingProps, mode, lanes, key);\n      case REACT_SUSPENSE_LIST_TYPE:\n        return createFiberFromSuspenseList(pendingProps, mode, lanes, key);\n      case REACT_OFFSCREEN_TYPE:\n        return createFiberFromOffscreen(pendingProps, mode, lanes, key);\n      case REACT_LEGACY_HIDDEN_TYPE:\n        return createFiberFromLegacyHidden(pendingProps, mode, lanes, key);\n      case REACT_SCOPE_TYPE:\n        if (enableScopeAPI) {\n          return createFiberFromScope(type, pendingProps, mode, lanes, key);\n        }\n      // eslint-disable-next-line no-fallthrough\n      case REACT_CACHE_TYPE:\n        if (enableCache) {\n          return createFiberFromCache(pendingProps, mode, lanes, key);\n        }\n      // eslint-disable-next-line no-fallthrough\n      default: {\n        if (typeof type === 'object' && type !== null) {\n          switch (type.$$typeof) {\n            case REACT_PROVIDER_TYPE:\n              fiberTag = ContextProvider;\n              break getTag;\n            case REACT_CONTEXT_TYPE:\n              // This is a consumer\n              fiberTag = ContextConsumer;\n              break getTag;\n            case REACT_FORWARD_REF_TYPE:\n              fiberTag = ForwardRef;\n              if (__DEV__) {\n                resolvedType = resolveForwardRefForHotReloading(resolvedType);\n              }\n              break getTag;\n            case REACT_MEMO_TYPE:\n              fiberTag = MemoComponent;\n              break getTag;\n            case REACT_LAZY_TYPE:\n              fiberTag = LazyComponent;\n              resolvedType = null;\n              break getTag;\n          }\n        }\n        let info = '';\n        if (__DEV__) {\n          if (\n            type === undefined ||\n            (typeof type === 'object' &&\n              type !== null &&\n              Object.keys(type).length === 0)\n          ) {\n            info +=\n              ' You likely forgot to export your component from the file ' +\n              \"it's defined in, or you might have mixed up default and \" +\n              'named imports.';\n          }\n          const ownerName = owner ? getComponentNameFromFiber(owner) : null;\n          if (ownerName) {\n            info += '\\n\\nCheck the render method of `' + ownerName + '`.';\n          }\n        }\n        invariant(\n          false,\n          'Element type is invalid: expected a string (for built-in ' +\n            'components) or a class/function (for composite components) ' +\n            'but got: %s.%s',\n          type == null ? type : typeof type,\n          info,\n        );\n      }\n    }\n  }\n\n  const fiber = createFiber(fiberTag, pendingProps, key, mode);\n  fiber.elementType = type;\n  fiber.type = resolvedType;\n  fiber.lanes = lanes;\n\n  if (__DEV__) {\n    fiber._debugOwner = owner;\n  }\n\n  return fiber;\n}\n\nexport function createOffscreenHostContainerFiber(\n  props: Props,\n  fiberMode: TypeOfMode,\n  lanes: Lanes,\n  key: null | string,\n): Fiber {\n  if (supportsPersistence) {\n    const type = getOffscreenContainerType();\n    const fiber = createFiber(HostComponent, props, key, fiberMode);\n    fiber.elementType = type;\n    fiber.type = type;\n    fiber.lanes = lanes;\n    return fiber;\n  } else {\n    // Only implemented in persistent mode\n    invariant(false, 'Not implemented.');\n  }\n}\n\nexport function createFiberFromElement(\n  element: ReactElement,\n  mode: TypeOfMode,\n  lanes: Lanes,\n): Fiber {\n  let owner = null;\n  if (__DEV__) {\n    owner = element._owner;\n  }\n  const type = element.type;\n  const key = element.key;\n  const pendingProps = element.props;\n  const fiber = createFiberFromTypeAndProps(\n    type,\n    key,\n    pendingProps,\n    owner,\n    mode,\n    lanes,\n  );\n  if (__DEV__) {\n    fiber._debugSource = element._source;\n    fiber._debugOwner = element._owner;\n  }\n  return fiber;\n}\n\nexport function createFiberFromFragment(\n  elements: ReactFragment,\n  mode: TypeOfMode,\n  lanes: Lanes,\n  key: null | string,\n): Fiber {\n  const fiber = createFiber(Fragment, elements, key, mode);\n  fiber.lanes = lanes;\n  return fiber;\n}\n\nfunction createFiberFromScope(\n  scope: ReactScope,\n  pendingProps: any,\n  mode: TypeOfMode,\n  lanes: Lanes,\n  key: null | string,\n) {\n  const fiber = createFiber(ScopeComponent, pendingProps, key, mode);\n  fiber.type = scope;\n  fiber.elementType = scope;\n  fiber.lanes = lanes;\n  return fiber;\n}\n\nfunction createFiberFromProfiler(\n  pendingProps: any,\n  mode: TypeOfMode,\n  lanes: Lanes,\n  key: null | string,\n): Fiber {\n  if (__DEV__) {\n    if (typeof pendingProps.id !== 'string') {\n      console.error(\n        'Profiler must specify an \"id\" of type `string` as a prop. Received the type `%s` instead.',\n        typeof pendingProps.id,\n      );\n    }\n  }\n\n  const fiber = createFiber(Profiler, pendingProps, key, mode | ProfileMode);\n  fiber.elementType = REACT_PROFILER_TYPE;\n  fiber.lanes = lanes;\n\n  if (enableProfilerTimer) {\n    fiber.stateNode = {\n      effectDuration: 0,\n      passiveEffectDuration: 0,\n    };\n  }\n\n  return fiber;\n}\n\nexport function createFiberFromSuspense(\n  pendingProps: any,\n  mode: TypeOfMode,\n  lanes: Lanes,\n  key: null | string,\n) {\n  const fiber = createFiber(SuspenseComponent, pendingProps, key, mode);\n  fiber.elementType = REACT_SUSPENSE_TYPE;\n  fiber.lanes = lanes;\n  return fiber;\n}\n\nexport function createFiberFromSuspenseList(\n  pendingProps: any,\n  mode: TypeOfMode,\n  lanes: Lanes,\n  key: null | string,\n) {\n  const fiber = createFiber(SuspenseListComponent, pendingProps, key, mode);\n  fiber.elementType = REACT_SUSPENSE_LIST_TYPE;\n  fiber.lanes = lanes;\n  return fiber;\n}\n\nexport function createFiberFromOffscreen(\n  pendingProps: OffscreenProps,\n  mode: TypeOfMode,\n  lanes: Lanes,\n  key: null | string,\n) {\n  const fiber = createFiber(OffscreenComponent, pendingProps, key, mode);\n  fiber.elementType = REACT_OFFSCREEN_TYPE;\n  fiber.lanes = lanes;\n  return fiber;\n}\n\nexport function createFiberFromLegacyHidden(\n  pendingProps: OffscreenProps,\n  mode: TypeOfMode,\n  lanes: Lanes,\n  key: null | string,\n) {\n  const fiber = createFiber(LegacyHiddenComponent, pendingProps, key, mode);\n  fiber.elementType = REACT_LEGACY_HIDDEN_TYPE;\n  fiber.lanes = lanes;\n  return fiber;\n}\n\nexport function createFiberFromCache(\n  pendingProps: any,\n  mode: TypeOfMode,\n  lanes: Lanes,\n  key: null | string,\n) {\n  const fiber = createFiber(CacheComponent, pendingProps, key, mode);\n  fiber.elementType = REACT_CACHE_TYPE;\n  fiber.lanes = lanes;\n  return fiber;\n}\n\nexport function createFiberFromText(\n  content: string,\n  mode: TypeOfMode,\n  lanes: Lanes,\n): Fiber {\n  const fiber = createFiber(HostText, content, null, mode);\n  fiber.lanes = lanes;\n  return fiber;\n}\n\nexport function createFiberFromHostInstanceForDeletion(): Fiber {\n  const fiber = createFiber(HostComponent, null, null, NoMode);\n  fiber.elementType = 'DELETED';\n  return fiber;\n}\n\nexport function createFiberFromDehydratedFragment(\n  dehydratedNode: SuspenseInstance,\n): Fiber {\n  const fiber = createFiber(DehydratedFragment, null, null, NoMode);\n  fiber.stateNode = dehydratedNode;\n  return fiber;\n}\n\nexport function createFiberFromPortal(\n  portal: ReactPortal,\n  mode: TypeOfMode,\n  lanes: Lanes,\n): Fiber {\n  const pendingProps = portal.children !== null ? portal.children : [];\n  const fiber = createFiber(HostPortal, pendingProps, portal.key, mode);\n  fiber.lanes = lanes;\n  fiber.stateNode = {\n    containerInfo: portal.containerInfo,\n    pendingChildren: null, // Used by persistent updates\n    implementation: portal.implementation,\n  };\n  return fiber;\n}\n\n// Used for stashing WIP properties to replay failed work in DEV.\nexport function assignFiberPropertiesInDEV(\n  target: Fiber | null,\n  source: Fiber,\n): Fiber {\n  if (target === null) {\n    // This Fiber's initial properties will always be overwritten.\n    // We only use a Fiber to ensure the same hidden class so DEV isn't slow.\n    target = createFiber(IndeterminateComponent, null, null, NoMode);\n  }\n\n  // This is intentionally written as a list of all properties.\n  // We tried to use Object.assign() instead but this is called in\n  // the hottest path, and Object.assign() was too slow:\n  // https://github.com/facebook/react/issues/12502\n  // This code is DEV-only so size is not a concern.\n\n  target.tag = source.tag;\n  target.key = source.key;\n  target.elementType = source.elementType;\n  target.type = source.type;\n  target.stateNode = source.stateNode;\n  target.return = source.return;\n  target.child = source.child;\n  target.sibling = source.sibling;\n  target.index = source.index;\n  target.ref = source.ref;\n  target.pendingProps = source.pendingProps;\n  target.memoizedProps = source.memoizedProps;\n  target.updateQueue = source.updateQueue;\n  target.memoizedState = source.memoizedState;\n  target.dependencies = source.dependencies;\n  target.mode = source.mode;\n  target.flags = source.flags;\n  target.subtreeFlags = source.subtreeFlags;\n  target.deletions = source.deletions;\n  target.lanes = source.lanes;\n  target.childLanes = source.childLanes;\n  target.alternate = source.alternate;\n  if (enableProfilerTimer) {\n    target.actualDuration = source.actualDuration;\n    target.actualStartTime = source.actualStartTime;\n    target.selfBaseDuration = source.selfBaseDuration;\n    target.treeBaseDuration = source.treeBaseDuration;\n  }\n\n  target._debugSource = source._debugSource;\n  target._debugOwner = source._debugOwner;\n  target._debugNeedsRemount = source._debugNeedsRemount;\n  target._debugHookTypes = source._debugHookTypes;\n  return target;\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {FiberRoot, SuspenseHydrationCallbacks} from './ReactInternalTypes';\nimport type {RootTag} from './ReactRootTags';\n\nimport {noTimeout, supportsHydration} from './ReactFiberHostConfig';\nimport {createHostRootFiber} from './ReactFiber.old';\nimport {\n  NoLane,\n  NoLanes,\n  NoTimestamp,\n  TotalLanes,\n  createLaneMap,\n} from './ReactFiberLane.old';\nimport {\n  enableSuspenseCallback,\n  enableCache,\n  enableProfilerCommitHooks,\n  enableProfilerTimer,\n  enableUpdaterTracking,\n} from 'shared/ReactFeatureFlags';\nimport {initializeUpdateQueue} from './ReactUpdateQueue.old';\nimport {LegacyRoot, ConcurrentRoot} from './ReactRootTags';\n\nfunction FiberRootNode(containerInfo, tag, hydrate) {\n  this.tag = tag;\n  this.containerInfo = containerInfo;\n  this.pendingChildren = null;\n  this.current = null;\n  this.pingCache = null;\n  this.finishedWork = null;\n  this.timeoutHandle = noTimeout;\n  this.context = null;\n  this.pendingContext = null;\n  this.hydrate = hydrate;\n  this.callbackNode = null;\n  this.callbackPriority = NoLane;\n  this.eventTimes = createLaneMap(NoLanes);\n  this.expirationTimes = createLaneMap(NoTimestamp);\n\n  this.pendingLanes = NoLanes;\n  this.suspendedLanes = NoLanes;\n  this.pingedLanes = NoLanes;\n  this.expiredLanes = NoLanes;\n  this.mutableReadLanes = NoLanes;\n  this.finishedLanes = NoLanes;\n\n  this.entangledLanes = NoLanes;\n  this.entanglements = createLaneMap(NoLanes);\n\n  if (enableCache) {\n    this.pooledCache = null;\n    this.pooledCacheLanes = NoLanes;\n  }\n\n  if (supportsHydration) {\n    this.mutableSourceEagerHydrationData = null;\n  }\n\n  if (enableSuspenseCallback) {\n    this.hydrationCallbacks = null;\n  }\n\n  if (enableProfilerTimer && enableProfilerCommitHooks) {\n    this.effectDuration = 0;\n    this.passiveEffectDuration = 0;\n  }\n\n  if (enableUpdaterTracking) {\n    this.memoizedUpdaters = new Set();\n    const pendingUpdatersLaneMap = (this.pendingUpdatersLaneMap = []);\n    for (let i = 0; i < TotalLanes; i++) {\n      pendingUpdatersLaneMap.push(new Set());\n    }\n  }\n\n  if (__DEV__) {\n    switch (tag) {\n      case ConcurrentRoot:\n        this._debugRootType = 'createRoot()';\n        break;\n      case LegacyRoot:\n        this._debugRootType = 'createLegacyRoot()';\n        break;\n    }\n  }\n}\n\nexport function createFiberRoot(\n  containerInfo: any,\n  tag: RootTag,\n  hydrate: boolean,\n  hydrationCallbacks: null | SuspenseHydrationCallbacks,\n  isStrictMode: boolean,\n  concurrentUpdatesByDefaultOverride: null | boolean,\n): FiberRoot {\n  const root: FiberRoot = (new FiberRootNode(containerInfo, tag, hydrate): any);\n  if (enableSuspenseCallback) {\n    root.hydrationCallbacks = hydrationCallbacks;\n  }\n\n  // Cyclic construction. This cheats the type system right now because\n  // stateNode is any.\n  const uninitializedFiber = createHostRootFiber(\n    tag,\n    isStrictMode,\n    concurrentUpdatesByDefaultOverride,\n  );\n  root.current = uninitializedFiber;\n  uninitializedFiber.stateNode = root;\n\n  if (enableCache) {\n    const initialCache = new Map();\n    root.pooledCache = initialCache;\n    const initialState = {\n      element: null,\n      cache: initialCache,\n    };\n    uninitializedFiber.memoizedState = initialState;\n  } else {\n    const initialState = {\n      element: null,\n    };\n    uninitializedFiber.memoizedState = initialState;\n  }\n\n  initializeUpdateQueue(uninitializedFiber);\n\n  return root;\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Fiber, SuspenseHydrationCallbacks} from './ReactInternalTypes';\nimport type {FiberRoot} from './ReactInternalTypes';\nimport type {RootTag} from './ReactRootTags';\nimport type {\n  Instance,\n  TextInstance,\n  Container,\n  PublicInstance,\n} from './ReactFiberHostConfig';\nimport type {RendererInspectionConfig} from './ReactFiberHostConfig';\nimport type {ReactNodeList} from 'shared/ReactTypes';\nimport type {Lane} from './ReactFiberLane.old';\nimport type {SuspenseState} from './ReactFiberSuspenseComponent.old';\n\nimport {\n  findCurrentHostFiber,\n  findCurrentHostFiberWithNoPortals,\n} from './ReactFiberTreeReflection';\nimport {get as getInstance} from 'shared/ReactInstanceMap';\nimport {\n  HostComponent,\n  ClassComponent,\n  HostRoot,\n  SuspenseComponent,\n} from './ReactWorkTags';\nimport getComponentNameFromFiber from 'react-reconciler/src/getComponentNameFromFiber';\nimport invariant from 'shared/invariant';\nimport isArray from 'shared/isArray';\nimport {\n  enableSchedulingProfiler,\n  consoleManagedByDevToolsDuringStrictMode,\n} from 'shared/ReactFeatureFlags';\nimport ReactSharedInternals from 'shared/ReactSharedInternals';\nimport {getPublicInstance} from './ReactFiberHostConfig';\nimport {\n  findCurrentUnmaskedContext,\n  processChildContext,\n  emptyContextObject,\n  isContextProvider as isLegacyContextProvider,\n} from './ReactFiberContext.old';\nimport {createFiberRoot} from './ReactFiberRoot.old';\nimport {injectInternals, onScheduleRoot} from './ReactFiberDevToolsHook.old';\nimport {\n  requestEventTime,\n  requestUpdateLane,\n  scheduleUpdateOnFiber,\n  flushRoot,\n  batchedUpdates,\n  flushSync,\n  flushControlled,\n  deferredUpdates,\n  discreteUpdates,\n  flushSyncWithoutWarningIfAlreadyRendering,\n  flushPassiveEffects,\n} from './ReactFiberWorkLoop.old';\nimport {\n  createUpdate,\n  enqueueUpdate,\n  entangleTransitions,\n} from './ReactUpdateQueue.old';\nimport {\n  isRendering as ReactCurrentFiberIsRendering,\n  current as ReactCurrentFiberCurrent,\n  resetCurrentFiber as resetCurrentDebugFiberInDEV,\n  setCurrentFiber as setCurrentDebugFiberInDEV,\n} from './ReactCurrentFiber';\nimport {StrictLegacyMode} from './ReactTypeOfMode';\nimport {\n  SyncLane,\n  SelectiveHydrationLane,\n  NoTimestamp,\n  getHighestPriorityPendingLanes,\n  higherPriorityLane,\n} from './ReactFiberLane.old';\nimport {\n  getCurrentUpdatePriority,\n  runWithPriority,\n} from './ReactEventPriorities.old';\nimport {\n  scheduleRefresh,\n  scheduleRoot,\n  setRefreshHandler,\n  findHostInstancesForRefresh,\n} from './ReactFiberHotReloading.old';\nimport {markRenderScheduled} from './SchedulingProfiler';\nimport ReactVersion from 'shared/ReactVersion';\nexport {registerMutableSourceForHydration} from './ReactMutableSource.old';\nexport {createPortal} from './ReactPortal';\nexport {\n  createComponentSelector,\n  createHasPseudoClassSelector,\n  createRoleSelector,\n  createTestNameSelector,\n  createTextSelector,\n  getFindAllNodesFailureDescription,\n  findAllNodes,\n  findBoundingRects,\n  focusWithin,\n  observeVisibleRects,\n} from './ReactTestSelectors';\n\nimport * as Scheduler from './Scheduler';\nimport {setSuppressWarning} from 'shared/consoleWithStackDev';\nimport {disableLogs, reenableLogs} from 'shared/ConsolePatchingDev';\n\ntype OpaqueRoot = FiberRoot;\n\n// 0 is PROD, 1 is DEV.\n// Might add PROFILE later.\ntype BundleType = 0 | 1;\n\ntype DevToolsConfig = {|\n  bundleType: BundleType,\n  version: string,\n  rendererPackageName: string,\n  // Note: this actually *does* depend on Fiber internal fields.\n  // Used by \"inspect clicked DOM element\" in React DevTools.\n  findFiberByHostInstance?: (instance: Instance | TextInstance) => Fiber | null,\n  rendererConfig?: RendererInspectionConfig,\n|};\n\nlet didWarnAboutNestedUpdates;\nlet didWarnAboutFindNodeInStrictMode;\n\nif (__DEV__) {\n  didWarnAboutNestedUpdates = false;\n  didWarnAboutFindNodeInStrictMode = {};\n}\n\nfunction getContextForSubtree(\n  parentComponent: ?React$Component<any, any>,\n): Object {\n  if (!parentComponent) {\n    return emptyContextObject;\n  }\n\n  const fiber = getInstance(parentComponent);\n  const parentContext = findCurrentUnmaskedContext(fiber);\n\n  if (fiber.tag === ClassComponent) {\n    const Component = fiber.type;\n    if (isLegacyContextProvider(Component)) {\n      return processChildContext(fiber, Component, parentContext);\n    }\n  }\n\n  return parentContext;\n}\n\nfunction findHostInstance(component: Object): PublicInstance | null {\n  const fiber = getInstance(component);\n  if (fiber === undefined) {\n    if (typeof component.render === 'function') {\n      invariant(false, 'Unable to find node on an unmounted component.');\n    } else {\n      invariant(\n        false,\n        'Argument appears to not be a ReactComponent. Keys: %s',\n        Object.keys(component),\n      );\n    }\n  }\n  const hostFiber = findCurrentHostFiber(fiber);\n  if (hostFiber === null) {\n    return null;\n  }\n  return hostFiber.stateNode;\n}\n\nfunction findHostInstanceWithWarning(\n  component: Object,\n  methodName: string,\n): PublicInstance | null {\n  if (__DEV__) {\n    const fiber = getInstance(component);\n    if (fiber === undefined) {\n      if (typeof component.render === 'function') {\n        invariant(false, 'Unable to find node on an unmounted component.');\n      } else {\n        invariant(\n          false,\n          'Argument appears to not be a ReactComponent. Keys: %s',\n          Object.keys(component),\n        );\n      }\n    }\n    const hostFiber = findCurrentHostFiber(fiber);\n    if (hostFiber === null) {\n      return null;\n    }\n    if (hostFiber.mode & StrictLegacyMode) {\n      const componentName = getComponentNameFromFiber(fiber) || 'Component';\n      if (!didWarnAboutFindNodeInStrictMode[componentName]) {\n        didWarnAboutFindNodeInStrictMode[componentName] = true;\n\n        const previousFiber = ReactCurrentFiberCurrent;\n        try {\n          setCurrentDebugFiberInDEV(hostFiber);\n          if (fiber.mode & StrictLegacyMode) {\n            console.error(\n              '%s is deprecated in StrictMode. ' +\n                '%s was passed an instance of %s which is inside StrictMode. ' +\n                'Instead, add a ref directly to the element you want to reference. ' +\n                'Learn more about using refs safely here: ' +\n                'https://reactjs.org/link/strict-mode-find-node',\n              methodName,\n              methodName,\n              componentName,\n            );\n          } else {\n            console.error(\n              '%s is deprecated in StrictMode. ' +\n                '%s was passed an instance of %s which renders StrictMode children. ' +\n                'Instead, add a ref directly to the element you want to reference. ' +\n                'Learn more about using refs safely here: ' +\n                'https://reactjs.org/link/strict-mode-find-node',\n              methodName,\n              methodName,\n              componentName,\n            );\n          }\n        } finally {\n          // Ideally this should reset to previous but this shouldn't be called in\n          // render and there's another warning for that anyway.\n          if (previousFiber) {\n            setCurrentDebugFiberInDEV(previousFiber);\n          } else {\n            resetCurrentDebugFiberInDEV();\n          }\n        }\n      }\n    }\n    return hostFiber.stateNode;\n  }\n  return findHostInstance(component);\n}\n\nexport function createContainer(\n  containerInfo: Container,\n  tag: RootTag,\n  hydrate: boolean,\n  hydrationCallbacks: null | SuspenseHydrationCallbacks,\n  isStrictMode: boolean,\n  concurrentUpdatesByDefaultOverride: null | boolean,\n): OpaqueRoot {\n  return createFiberRoot(\n    containerInfo,\n    tag,\n    hydrate,\n    hydrationCallbacks,\n    isStrictMode,\n    concurrentUpdatesByDefaultOverride,\n  );\n}\n\nexport function updateContainer(\n  element: ReactNodeList,\n  container: OpaqueRoot,\n  parentComponent: ?React$Component<any, any>,\n  callback: ?Function,\n): Lane {\n  if (__DEV__) {\n    onScheduleRoot(container, element);\n  }\n  const current = container.current;\n  const eventTime = requestEventTime();\n  const lane = requestUpdateLane(current);\n\n  if (enableSchedulingProfiler) {\n    markRenderScheduled(lane);\n  }\n\n  const context = getContextForSubtree(parentComponent);\n  if (container.context === null) {\n    container.context = context;\n  } else {\n    container.pendingContext = context;\n  }\n\n  if (__DEV__) {\n    if (\n      ReactCurrentFiberIsRendering &&\n      ReactCurrentFiberCurrent !== null &&\n      !didWarnAboutNestedUpdates\n    ) {\n      didWarnAboutNestedUpdates = true;\n      console.error(\n        'Render methods should be a pure function of props and state; ' +\n          'triggering nested component updates from render is not allowed. ' +\n          'If necessary, trigger nested updates in componentDidUpdate.\\n\\n' +\n          'Check the render method of %s.',\n        getComponentNameFromFiber(ReactCurrentFiberCurrent) || 'Unknown',\n      );\n    }\n  }\n\n  const update = createUpdate(eventTime, lane);\n  // Caution: React DevTools currently depends on this property\n  // being called \"element\".\n  update.payload = {element};\n\n  callback = callback === undefined ? null : callback;\n  if (callback !== null) {\n    if (__DEV__) {\n      if (typeof callback !== 'function') {\n        console.error(\n          'render(...): Expected the last optional `callback` argument to be a ' +\n            'function. Instead received: %s.',\n          callback,\n        );\n      }\n    }\n    update.callback = callback;\n  }\n\n  enqueueUpdate(current, update, lane);\n  const root = scheduleUpdateOnFiber(current, lane, eventTime);\n  if (root !== null) {\n    entangleTransitions(root, current, lane);\n  }\n\n  return lane;\n}\n\nexport {\n  batchedUpdates,\n  deferredUpdates,\n  discreteUpdates,\n  flushControlled,\n  flushSync,\n  flushSyncWithoutWarningIfAlreadyRendering,\n  flushPassiveEffects,\n};\n\nexport function getPublicRootInstance(\n  container: OpaqueRoot,\n): React$Component<any, any> | PublicInstance | null {\n  const containerFiber = container.current;\n  if (!containerFiber.child) {\n    return null;\n  }\n  switch (containerFiber.child.tag) {\n    case HostComponent:\n      return getPublicInstance(containerFiber.child.stateNode);\n    default:\n      return containerFiber.child.stateNode;\n  }\n}\n\nexport function attemptSynchronousHydration(fiber: Fiber): void {\n  switch (fiber.tag) {\n    case HostRoot:\n      const root: FiberRoot = fiber.stateNode;\n      if (root.hydrate) {\n        // Flush the first scheduled \"update\".\n        const lanes = getHighestPriorityPendingLanes(root);\n        flushRoot(root, lanes);\n      }\n      break;\n    case SuspenseComponent:\n      const eventTime = requestEventTime();\n      flushSync(() => scheduleUpdateOnFiber(fiber, SyncLane, eventTime));\n      // If we're still blocked after this, we need to increase\n      // the priority of any promises resolving within this\n      // boundary so that they next attempt also has higher pri.\n      const retryLane = SyncLane;\n      markRetryLaneIfNotHydrated(fiber, retryLane);\n      break;\n  }\n}\n\nfunction markRetryLaneImpl(fiber: Fiber, retryLane: Lane) {\n  const suspenseState: null | SuspenseState = fiber.memoizedState;\n  if (suspenseState !== null && suspenseState.dehydrated !== null) {\n    suspenseState.retryLane = higherPriorityLane(\n      suspenseState.retryLane,\n      retryLane,\n    );\n  }\n}\n\n// Increases the priority of thenables when they resolve within this boundary.\nfunction markRetryLaneIfNotHydrated(fiber: Fiber, retryLane: Lane) {\n  markRetryLaneImpl(fiber, retryLane);\n  const alternate = fiber.alternate;\n  if (alternate) {\n    markRetryLaneImpl(alternate, retryLane);\n  }\n}\n\nexport function attemptDiscreteHydration(fiber: Fiber): void {\n  if (fiber.tag !== SuspenseComponent) {\n    // We ignore HostRoots here because we can't increase\n    // their priority and they should not suspend on I/O,\n    // since you have to wrap anything that might suspend in\n    // Suspense.\n    return;\n  }\n  const eventTime = requestEventTime();\n  const lane = SyncLane;\n  scheduleUpdateOnFiber(fiber, lane, eventTime);\n  markRetryLaneIfNotHydrated(fiber, lane);\n}\n\nexport function attemptContinuousHydration(fiber: Fiber): void {\n  if (fiber.tag !== SuspenseComponent) {\n    // We ignore HostRoots here because we can't increase\n    // their priority and they should not suspend on I/O,\n    // since you have to wrap anything that might suspend in\n    // Suspense.\n    return;\n  }\n  const eventTime = requestEventTime();\n  const lane = SelectiveHydrationLane;\n  scheduleUpdateOnFiber(fiber, lane, eventTime);\n  markRetryLaneIfNotHydrated(fiber, lane);\n}\n\nexport function attemptHydrationAtCurrentPriority(fiber: Fiber): void {\n  if (fiber.tag !== SuspenseComponent) {\n    // We ignore HostRoots here because we can't increase\n    // their priority other than synchronously flush it.\n    return;\n  }\n  const eventTime = requestEventTime();\n  const lane = requestUpdateLane(fiber);\n  scheduleUpdateOnFiber(fiber, lane, eventTime);\n  markRetryLaneIfNotHydrated(fiber, lane);\n}\n\nexport {getCurrentUpdatePriority, runWithPriority};\n\nexport {findHostInstance};\n\nexport {findHostInstanceWithWarning};\n\nexport function findHostInstanceWithNoPortals(\n  fiber: Fiber,\n): PublicInstance | null {\n  const hostFiber = findCurrentHostFiberWithNoPortals(fiber);\n  if (hostFiber === null) {\n    return null;\n  }\n  return hostFiber.stateNode;\n}\n\nlet shouldErrorImpl = fiber => null;\n\nexport function shouldError(fiber: Fiber): ?boolean {\n  return shouldErrorImpl(fiber);\n}\n\nlet shouldSuspendImpl = fiber => false;\n\nexport function shouldSuspend(fiber: Fiber): boolean {\n  return shouldSuspendImpl(fiber);\n}\n\nlet isStrictMode = false;\n\nlet overrideHookState = null;\nlet overrideHookStateDeletePath = null;\nlet overrideHookStateRenamePath = null;\nlet overrideProps = null;\nlet overridePropsDeletePath = null;\nlet overridePropsRenamePath = null;\nlet scheduleUpdate = null;\nlet setErrorHandler = null;\nlet setSuspenseHandler = null;\n\nif (__DEV__) {\n  const copyWithDeleteImpl = (\n    obj: Object | Array<any>,\n    path: Array<string | number>,\n    index: number,\n  ) => {\n    const key = path[index];\n    const updated = isArray(obj) ? obj.slice() : {...obj};\n    if (index + 1 === path.length) {\n      if (isArray(updated)) {\n        updated.splice(((key: any): number), 1);\n      } else {\n        delete updated[key];\n      }\n      return updated;\n    }\n    // $FlowFixMe number or string is fine here\n    updated[key] = copyWithDeleteImpl(obj[key], path, index + 1);\n    return updated;\n  };\n\n  const copyWithDelete = (\n    obj: Object | Array<any>,\n    path: Array<string | number>,\n  ): Object | Array<any> => {\n    return copyWithDeleteImpl(obj, path, 0);\n  };\n\n  const copyWithRenameImpl = (\n    obj: Object | Array<any>,\n    oldPath: Array<string | number>,\n    newPath: Array<string | number>,\n    index: number,\n  ) => {\n    const oldKey = oldPath[index];\n    const updated = isArray(obj) ? obj.slice() : {...obj};\n    if (index + 1 === oldPath.length) {\n      const newKey = newPath[index];\n      // $FlowFixMe number or string is fine here\n      updated[newKey] = updated[oldKey];\n      if (isArray(updated)) {\n        updated.splice(((oldKey: any): number), 1);\n      } else {\n        delete updated[oldKey];\n      }\n    } else {\n      // $FlowFixMe number or string is fine here\n      updated[oldKey] = copyWithRenameImpl(\n        // $FlowFixMe number or string is fine here\n        obj[oldKey],\n        oldPath,\n        newPath,\n        index + 1,\n      );\n    }\n    return updated;\n  };\n\n  const copyWithRename = (\n    obj: Object | Array<any>,\n    oldPath: Array<string | number>,\n    newPath: Array<string | number>,\n  ): Object | Array<any> => {\n    if (oldPath.length !== newPath.length) {\n      console.warn('copyWithRename() expects paths of the same length');\n      return;\n    } else {\n      for (let i = 0; i < newPath.length - 1; i++) {\n        if (oldPath[i] !== newPath[i]) {\n          console.warn(\n            'copyWithRename() expects paths to be the same except for the deepest key',\n          );\n          return;\n        }\n      }\n    }\n    return copyWithRenameImpl(obj, oldPath, newPath, 0);\n  };\n\n  const copyWithSetImpl = (\n    obj: Object | Array<any>,\n    path: Array<string | number>,\n    index: number,\n    value: any,\n  ) => {\n    if (index >= path.length) {\n      return value;\n    }\n    const key = path[index];\n    const updated = isArray(obj) ? obj.slice() : {...obj};\n    // $FlowFixMe number or string is fine here\n    updated[key] = copyWithSetImpl(obj[key], path, index + 1, value);\n    return updated;\n  };\n\n  const copyWithSet = (\n    obj: Object | Array<any>,\n    path: Array<string | number>,\n    value: any,\n  ): Object | Array<any> => {\n    return copyWithSetImpl(obj, path, 0, value);\n  };\n\n  const findHook = (fiber: Fiber, id: number) => {\n    // For now, the \"id\" of stateful hooks is just the stateful hook index.\n    // This may change in the future with e.g. nested hooks.\n    let currentHook = fiber.memoizedState;\n    while (currentHook !== null && id > 0) {\n      currentHook = currentHook.next;\n      id--;\n    }\n    return currentHook;\n  };\n\n  // Support DevTools editable values for useState and useReducer.\n  overrideHookState = (\n    fiber: Fiber,\n    id: number,\n    path: Array<string | number>,\n    value: any,\n  ) => {\n    const hook = findHook(fiber, id);\n    if (hook !== null) {\n      const newState = copyWithSet(hook.memoizedState, path, value);\n      hook.memoizedState = newState;\n      hook.baseState = newState;\n\n      // We aren't actually adding an update to the queue,\n      // because there is no update we can add for useReducer hooks that won't trigger an error.\n      // (There's no appropriate action type for DevTools overrides.)\n      // As a result though, React will see the scheduled update as a noop and bailout.\n      // Shallow cloning props works as a workaround for now to bypass the bailout check.\n      fiber.memoizedProps = {...fiber.memoizedProps};\n\n      scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);\n    }\n  };\n  overrideHookStateDeletePath = (\n    fiber: Fiber,\n    id: number,\n    path: Array<string | number>,\n  ) => {\n    const hook = findHook(fiber, id);\n    if (hook !== null) {\n      const newState = copyWithDelete(hook.memoizedState, path);\n      hook.memoizedState = newState;\n      hook.baseState = newState;\n\n      // We aren't actually adding an update to the queue,\n      // because there is no update we can add for useReducer hooks that won't trigger an error.\n      // (There's no appropriate action type for DevTools overrides.)\n      // As a result though, React will see the scheduled update as a noop and bailout.\n      // Shallow cloning props works as a workaround for now to bypass the bailout check.\n      fiber.memoizedProps = {...fiber.memoizedProps};\n\n      scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);\n    }\n  };\n  overrideHookStateRenamePath = (\n    fiber: Fiber,\n    id: number,\n    oldPath: Array<string | number>,\n    newPath: Array<string | number>,\n  ) => {\n    const hook = findHook(fiber, id);\n    if (hook !== null) {\n      const newState = copyWithRename(hook.memoizedState, oldPath, newPath);\n      hook.memoizedState = newState;\n      hook.baseState = newState;\n\n      // We aren't actually adding an update to the queue,\n      // because there is no update we can add for useReducer hooks that won't trigger an error.\n      // (There's no appropriate action type for DevTools overrides.)\n      // As a result though, React will see the scheduled update as a noop and bailout.\n      // Shallow cloning props works as a workaround for now to bypass the bailout check.\n      fiber.memoizedProps = {...fiber.memoizedProps};\n\n      scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);\n    }\n  };\n\n  // Support DevTools props for function components, forwardRef, memo, host components, etc.\n  overrideProps = (fiber: Fiber, path: Array<string | number>, value: any) => {\n    fiber.pendingProps = copyWithSet(fiber.memoizedProps, path, value);\n    if (fiber.alternate) {\n      fiber.alternate.pendingProps = fiber.pendingProps;\n    }\n    scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);\n  };\n  overridePropsDeletePath = (fiber: Fiber, path: Array<string | number>) => {\n    fiber.pendingProps = copyWithDelete(fiber.memoizedProps, path);\n    if (fiber.alternate) {\n      fiber.alternate.pendingProps = fiber.pendingProps;\n    }\n    scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);\n  };\n  overridePropsRenamePath = (\n    fiber: Fiber,\n    oldPath: Array<string | number>,\n    newPath: Array<string | number>,\n  ) => {\n    fiber.pendingProps = copyWithRename(fiber.memoizedProps, oldPath, newPath);\n    if (fiber.alternate) {\n      fiber.alternate.pendingProps = fiber.pendingProps;\n    }\n    scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);\n  };\n\n  scheduleUpdate = (fiber: Fiber) => {\n    scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);\n  };\n\n  setErrorHandler = (newShouldErrorImpl: Fiber => ?boolean) => {\n    shouldErrorImpl = newShouldErrorImpl;\n  };\n\n  setSuspenseHandler = (newShouldSuspendImpl: Fiber => boolean) => {\n    shouldSuspendImpl = newShouldSuspendImpl;\n  };\n}\n\nfunction findHostInstanceByFiber(fiber: Fiber): Instance | TextInstance | null {\n  const hostFiber = findCurrentHostFiber(fiber);\n  if (hostFiber === null) {\n    return null;\n  }\n  return hostFiber.stateNode;\n}\n\nfunction emptyFindFiberByHostInstance(\n  instance: Instance | TextInstance,\n): Fiber | null {\n  return null;\n}\n\nfunction getCurrentFiberForDevTools() {\n  return ReactCurrentFiberCurrent;\n}\n\nexport function getIsStrictModeForDevtools() {\n  return isStrictMode;\n}\n\nexport function setIsStrictModeForDevtools(newIsStrictMode: boolean) {\n  isStrictMode = newIsStrictMode;\n\n  if (consoleManagedByDevToolsDuringStrictMode) {\n    // We're in a test because Scheduler.unstable_yieldValue only exists\n    // in SchedulerMock. To reduce the noise in strict mode tests,\n    // suppress warnings and disable scheduler yielding during the double render\n    if (typeof Scheduler.unstable_yieldValue === 'function') {\n      Scheduler.unstable_setDisableYieldValue(newIsStrictMode);\n      setSuppressWarning(newIsStrictMode);\n    }\n  } else {\n    if (newIsStrictMode) {\n      disableLogs();\n    } else {\n      reenableLogs();\n    }\n  }\n}\n\nexport function injectIntoDevTools(devToolsConfig: DevToolsConfig): boolean {\n  const {findFiberByHostInstance} = devToolsConfig;\n  const {ReactCurrentDispatcher} = ReactSharedInternals;\n\n  return injectInternals({\n    bundleType: devToolsConfig.bundleType,\n    version: devToolsConfig.version,\n    rendererPackageName: devToolsConfig.rendererPackageName,\n    rendererConfig: devToolsConfig.rendererConfig,\n    overrideHookState,\n    overrideHookStateDeletePath,\n    overrideHookStateRenamePath,\n    overrideProps,\n    overridePropsDeletePath,\n    overridePropsRenamePath,\n    setErrorHandler,\n    setSuspenseHandler,\n    scheduleUpdate,\n    currentDispatcherRef: ReactCurrentDispatcher,\n    findHostInstanceByFiber,\n    findFiberByHostInstance:\n      findFiberByHostInstance || emptyFindFiberByHostInstance,\n    // React Refresh\n    findHostInstancesForRefresh: __DEV__ ? findHostInstancesForRefresh : null,\n    scheduleRefresh: __DEV__ ? scheduleRefresh : null,\n    scheduleRoot: __DEV__ ? scheduleRoot : null,\n    setRefreshHandler: __DEV__ ? setRefreshHandler : null,\n    // Enables DevTools to append owner stacks to error messages in DEV mode.\n    getCurrentFiber: __DEV__ ? getCurrentFiberForDevTools : null,\n    getIsStrictMode: __DEV__ ? getIsStrictModeForDevtools : null,\n    // Enables DevTools to detect reconciler version rather than renderer version\n    // which may not match for third party renderers.\n    reconcilerVersion: ReactVersion,\n  });\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Fiber} from 'react-reconciler/src/ReactInternalTypes';\nimport type {FiberRoot} from 'react-reconciler/src/ReactInternalTypes';\nimport type {Instance, TextInstance} from './ReactTestHostConfig';\n\nimport * as React from 'react';\nimport * as Scheduler from 'scheduler/unstable_mock';\nimport {\n  getPublicRootInstance,\n  createContainer,\n  updateContainer,\n  flushSync,\n  injectIntoDevTools,\n  batchedUpdates,\n} from 'react-reconciler/src/ReactFiberReconciler';\nimport {findCurrentFiberUsingSlowPath} from 'react-reconciler/src/ReactFiberTreeReflection';\nimport {\n  Fragment,\n  FunctionComponent,\n  ClassComponent,\n  HostComponent,\n  HostPortal,\n  HostText,\n  HostRoot,\n  ContextConsumer,\n  ContextProvider,\n  Mode,\n  ForwardRef,\n  Profiler,\n  MemoComponent,\n  SimpleMemoComponent,\n  IncompleteClassComponent,\n  ScopeComponent,\n} from 'react-reconciler/src/ReactWorkTags';\nimport invariant from 'shared/invariant';\nimport isArray from 'shared/isArray';\nimport getComponentNameFromType from 'shared/getComponentNameFromType';\nimport ReactVersion from 'shared/ReactVersion';\n\nimport {getPublicInstance} from './ReactTestHostConfig';\nimport {ConcurrentRoot, LegacyRoot} from 'react-reconciler/src/ReactRootTags';\nimport {allowConcurrentByDefault} from 'shared/ReactFeatureFlags';\n\nconst act = React.unstable_act;\n\n// TODO: Remove from public bundle\n\ntype TestRendererOptions = {\n  createNodeMock: (element: React$Element<any>) => any,\n  unstable_isConcurrent: boolean,\n  unstable_strictMode: boolean,\n  unstable_concurrentUpdatesByDefault: boolean,\n  ...\n};\n\ntype ReactTestRendererJSON = {|\n  type: string,\n  props: {[propName: string]: any, ...},\n  children: null | Array<ReactTestRendererNode>,\n  $$typeof?: Symbol, // Optional because we add it with defineProperty().\n|};\ntype ReactTestRendererNode = ReactTestRendererJSON | string;\n\ntype FindOptions = $Shape<{\n  // performs a \"greedy\" search: if a matching node is found, will continue\n  // to search within the matching node's children. (default: true)\n  deep: boolean,\n  ...\n}>;\n\nexport type Predicate = (node: ReactTestInstance) => ?boolean;\n\nconst defaultTestOptions = {\n  createNodeMock: function() {\n    return null;\n  },\n};\n\nfunction toJSON(inst: Instance | TextInstance): ReactTestRendererNode | null {\n  if (inst.isHidden) {\n    // Omit timed out children from output entirely. This seems like the least\n    // surprising behavior. We could perhaps add a separate API that includes\n    // them, if it turns out people need it.\n    return null;\n  }\n  switch (inst.tag) {\n    case 'TEXT':\n      return inst.text;\n    case 'INSTANCE': {\n      /* eslint-disable no-unused-vars */\n      // We don't include the `children` prop in JSON.\n      // Instead, we will include the actual rendered children.\n      const {children, ...props} = inst.props;\n      /* eslint-enable */\n      let renderedChildren = null;\n      if (inst.children && inst.children.length) {\n        for (let i = 0; i < inst.children.length; i++) {\n          const renderedChild = toJSON(inst.children[i]);\n          if (renderedChild !== null) {\n            if (renderedChildren === null) {\n              renderedChildren = [renderedChild];\n            } else {\n              renderedChildren.push(renderedChild);\n            }\n          }\n        }\n      }\n      const json: ReactTestRendererJSON = {\n        type: inst.type,\n        props: props,\n        children: renderedChildren,\n      };\n      Object.defineProperty(json, '$$typeof', {\n        value: Symbol.for('react.test.json'),\n      });\n      return json;\n    }\n    default:\n      throw new Error(`Unexpected node type in toJSON: ${inst.tag}`);\n  }\n}\n\nfunction childrenToTree(node) {\n  if (!node) {\n    return null;\n  }\n  const children = nodeAndSiblingsArray(node);\n  if (children.length === 0) {\n    return null;\n  } else if (children.length === 1) {\n    return toTree(children[0]);\n  }\n  return flatten(children.map(toTree));\n}\n\nfunction nodeAndSiblingsArray(nodeWithSibling) {\n  const array = [];\n  let node = nodeWithSibling;\n  while (node != null) {\n    array.push(node);\n    node = node.sibling;\n  }\n  return array;\n}\n\nfunction flatten(arr) {\n  const result = [];\n  const stack = [{i: 0, array: arr}];\n  while (stack.length) {\n    const n = stack.pop();\n    while (n.i < n.array.length) {\n      const el = n.array[n.i];\n      n.i += 1;\n      if (isArray(el)) {\n        stack.push(n);\n        stack.push({i: 0, array: el});\n        break;\n      }\n      result.push(el);\n    }\n  }\n  return result;\n}\n\nfunction toTree(node: ?Fiber) {\n  if (node == null) {\n    return null;\n  }\n  switch (node.tag) {\n    case HostRoot:\n      return childrenToTree(node.child);\n    case HostPortal:\n      return childrenToTree(node.child);\n    case ClassComponent:\n      return {\n        nodeType: 'component',\n        type: node.type,\n        props: {...node.memoizedProps},\n        instance: node.stateNode,\n        rendered: childrenToTree(node.child),\n      };\n    case FunctionComponent:\n    case SimpleMemoComponent:\n      return {\n        nodeType: 'component',\n        type: node.type,\n        props: {...node.memoizedProps},\n        instance: null,\n        rendered: childrenToTree(node.child),\n      };\n    case HostComponent: {\n      return {\n        nodeType: 'host',\n        type: node.type,\n        props: {...node.memoizedProps},\n        instance: null, // TODO: use createNodeMock here somehow?\n        rendered: flatten(nodeAndSiblingsArray(node.child).map(toTree)),\n      };\n    }\n    case HostText:\n      return node.stateNode.text;\n    case Fragment:\n    case ContextProvider:\n    case ContextConsumer:\n    case Mode:\n    case Profiler:\n    case ForwardRef:\n    case MemoComponent:\n    case IncompleteClassComponent:\n    case ScopeComponent:\n      return childrenToTree(node.child);\n    default:\n      invariant(\n        false,\n        'toTree() does not yet know how to handle nodes with tag=%s',\n        node.tag,\n      );\n  }\n}\n\nconst validWrapperTypes = new Set([\n  FunctionComponent,\n  ClassComponent,\n  HostComponent,\n  ForwardRef,\n  MemoComponent,\n  SimpleMemoComponent,\n  // Normally skipped, but used when there's more than one root child.\n  HostRoot,\n]);\n\nfunction getChildren(parent: Fiber) {\n  const children = [];\n  const startingNode = parent;\n  let node: Fiber = startingNode;\n  if (node.child === null) {\n    return children;\n  }\n  node.child.return = node;\n  node = node.child;\n  outer: while (true) {\n    let descend = false;\n    if (validWrapperTypes.has(node.tag)) {\n      children.push(wrapFiber(node));\n    } else if (node.tag === HostText) {\n      children.push('' + node.memoizedProps);\n    } else {\n      descend = true;\n    }\n    if (descend && node.child !== null) {\n      node.child.return = node;\n      node = node.child;\n      continue;\n    }\n    while (node.sibling === null) {\n      if (node.return === startingNode) {\n        break outer;\n      }\n      node = (node.return: any);\n    }\n    (node.sibling: any).return = node.return;\n    node = (node.sibling: any);\n  }\n  return children;\n}\n\nclass ReactTestInstance {\n  _fiber: Fiber;\n\n  _currentFiber(): Fiber {\n    // Throws if this component has been unmounted.\n    const fiber = findCurrentFiberUsingSlowPath(this._fiber);\n    invariant(\n      fiber !== null,\n      \"Can't read from currently-mounting component. This error is likely \" +\n        'caused by a bug in React. Please file an issue.',\n    );\n    return fiber;\n  }\n\n  constructor(fiber: Fiber) {\n    invariant(\n      validWrapperTypes.has(fiber.tag),\n      'Unexpected object passed to ReactTestInstance constructor (tag: %s). ' +\n        'This is probably a bug in React.',\n      fiber.tag,\n    );\n    this._fiber = fiber;\n  }\n\n  get instance() {\n    if (this._fiber.tag === HostComponent) {\n      return getPublicInstance(this._fiber.stateNode);\n    } else {\n      return this._fiber.stateNode;\n    }\n  }\n\n  get type() {\n    return this._fiber.type;\n  }\n\n  get props(): Object {\n    return this._currentFiber().memoizedProps;\n  }\n\n  get parent(): ?ReactTestInstance {\n    let parent = this._fiber.return;\n    while (parent !== null) {\n      if (validWrapperTypes.has(parent.tag)) {\n        if (parent.tag === HostRoot) {\n          // Special case: we only \"materialize\" instances for roots\n          // if they have more than a single child. So we'll check that now.\n          if (getChildren(parent).length < 2) {\n            return null;\n          }\n        }\n        return wrapFiber(parent);\n      }\n      parent = parent.return;\n    }\n    return null;\n  }\n\n  get children(): Array<ReactTestInstance | string> {\n    return getChildren(this._currentFiber());\n  }\n\n  // Custom search functions\n  find(predicate: Predicate): ReactTestInstance {\n    return expectOne(\n      this.findAll(predicate, {deep: false}),\n      `matching custom predicate: ${predicate.toString()}`,\n    );\n  }\n\n  findByType(type: any): ReactTestInstance {\n    return expectOne(\n      this.findAllByType(type, {deep: false}),\n      `with node type: \"${getComponentNameFromType(type) || 'Unknown'}\"`,\n    );\n  }\n\n  findByProps(props: Object): ReactTestInstance {\n    return expectOne(\n      this.findAllByProps(props, {deep: false}),\n      `with props: ${JSON.stringify(props)}`,\n    );\n  }\n\n  findAll(\n    predicate: Predicate,\n    options: ?FindOptions = null,\n  ): Array<ReactTestInstance> {\n    return findAll(this, predicate, options);\n  }\n\n  findAllByType(\n    type: any,\n    options: ?FindOptions = null,\n  ): Array<ReactTestInstance> {\n    return findAll(this, node => node.type === type, options);\n  }\n\n  findAllByProps(\n    props: Object,\n    options: ?FindOptions = null,\n  ): Array<ReactTestInstance> {\n    return findAll(\n      this,\n      node => node.props && propsMatch(node.props, props),\n      options,\n    );\n  }\n}\n\nfunction findAll(\n  root: ReactTestInstance,\n  predicate: Predicate,\n  options: ?FindOptions,\n): Array<ReactTestInstance> {\n  const deep = options ? options.deep : true;\n  const results = [];\n\n  if (predicate(root)) {\n    results.push(root);\n    if (!deep) {\n      return results;\n    }\n  }\n\n  root.children.forEach(child => {\n    if (typeof child === 'string') {\n      return;\n    }\n    results.push(...findAll(child, predicate, options));\n  });\n\n  return results;\n}\n\nfunction expectOne(\n  all: Array<ReactTestInstance>,\n  message: string,\n): ReactTestInstance {\n  if (all.length === 1) {\n    return all[0];\n  }\n\n  const prefix =\n    all.length === 0\n      ? 'No instances found '\n      : `Expected 1 but found ${all.length} instances `;\n\n  throw new Error(prefix + message);\n}\n\nfunction propsMatch(props: Object, filter: Object): boolean {\n  for (const key in filter) {\n    if (props[key] !== filter[key]) {\n      return false;\n    }\n  }\n  return true;\n}\n\nfunction create(element: React$Element<any>, options: TestRendererOptions) {\n  let createNodeMock = defaultTestOptions.createNodeMock;\n  let isConcurrent = false;\n  let isStrictMode = false;\n  let concurrentUpdatesByDefault = null;\n  if (typeof options === 'object' && options !== null) {\n    if (typeof options.createNodeMock === 'function') {\n      createNodeMock = options.createNodeMock;\n    }\n    if (options.unstable_isConcurrent === true) {\n      isConcurrent = true;\n    }\n    if (options.unstable_strictMode === true) {\n      isStrictMode = true;\n    }\n    if (allowConcurrentByDefault) {\n      if (options.unstable_concurrentUpdatesByDefault !== undefined) {\n        concurrentUpdatesByDefault =\n          options.unstable_concurrentUpdatesByDefault;\n      }\n    }\n  }\n  let container = {\n    children: [],\n    createNodeMock,\n    tag: 'CONTAINER',\n  };\n  let root: FiberRoot | null = createContainer(\n    container,\n    isConcurrent ? ConcurrentRoot : LegacyRoot,\n    false,\n    null,\n    isStrictMode,\n    concurrentUpdatesByDefault,\n  );\n  invariant(root != null, 'something went wrong');\n  updateContainer(element, root, null, null);\n\n  const entry = {\n    _Scheduler: Scheduler,\n\n    root: undefined, // makes flow happy\n    // we define a 'getter' for 'root' below using 'Object.defineProperty'\n    toJSON(): Array<ReactTestRendererNode> | ReactTestRendererNode | null {\n      if (root == null || root.current == null || container == null) {\n        return null;\n      }\n      if (container.children.length === 0) {\n        return null;\n      }\n      if (container.children.length === 1) {\n        return toJSON(container.children[0]);\n      }\n      if (\n        container.children.length === 2 &&\n        container.children[0].isHidden === true &&\n        container.children[1].isHidden === false\n      ) {\n        // Omit timed out children from output entirely, including the fact that we\n        // temporarily wrap fallback and timed out children in an array.\n        return toJSON(container.children[1]);\n      }\n      let renderedChildren = null;\n      if (container.children && container.children.length) {\n        for (let i = 0; i < container.children.length; i++) {\n          const renderedChild = toJSON(container.children[i]);\n          if (renderedChild !== null) {\n            if (renderedChildren === null) {\n              renderedChildren = [renderedChild];\n            } else {\n              renderedChildren.push(renderedChild);\n            }\n          }\n        }\n      }\n      return renderedChildren;\n    },\n    toTree() {\n      if (root == null || root.current == null) {\n        return null;\n      }\n      return toTree(root.current);\n    },\n    update(newElement: React$Element<any>) {\n      if (root == null || root.current == null) {\n        return;\n      }\n      updateContainer(newElement, root, null, null);\n    },\n    unmount() {\n      if (root == null || root.current == null) {\n        return;\n      }\n      updateContainer(null, root, null, null);\n      container = null;\n      root = null;\n    },\n    getInstance() {\n      if (root == null || root.current == null) {\n        return null;\n      }\n      return getPublicRootInstance(root);\n    },\n\n    unstable_flushSync: flushSync,\n  };\n\n  Object.defineProperty(\n    entry,\n    'root',\n    ({\n      configurable: true,\n      enumerable: true,\n      get: function() {\n        if (root === null) {\n          throw new Error(\"Can't access .root on unmounted test renderer\");\n        }\n        const children = getChildren(root.current);\n        if (children.length === 0) {\n          throw new Error(\"Can't access .root on unmounted test renderer\");\n        } else if (children.length === 1) {\n          // Normally, we skip the root and just give you the child.\n          return children[0];\n        } else {\n          // However, we give you the root if there's more than one root child.\n          // We could make this the behavior for all cases but it would be a breaking change.\n          return wrapFiber(root.current);\n        }\n      },\n    }: Object),\n  );\n\n  return entry;\n}\n\nconst fiberToWrapper = new WeakMap();\nfunction wrapFiber(fiber: Fiber): ReactTestInstance {\n  let wrapper = fiberToWrapper.get(fiber);\n  if (wrapper === undefined && fiber.alternate !== null) {\n    wrapper = fiberToWrapper.get(fiber.alternate);\n  }\n  if (wrapper === undefined) {\n    wrapper = new ReactTestInstance(fiber);\n    fiberToWrapper.set(fiber, wrapper);\n  }\n  return wrapper;\n}\n\n// Enable ReactTestRenderer to be used to test DevTools integration.\ninjectIntoDevTools({\n  findFiberByHostInstance: (() => {\n    throw new Error('TestRenderer does not support findFiberByHostInstance()');\n  }: any),\n  bundleType: __DEV__ ? 1 : 0,\n  version: ReactVersion,\n  rendererPackageName: 'react-test-renderer',\n});\n\nexport {\n  Scheduler as _Scheduler,\n  create,\n  /* eslint-disable-next-line camelcase */\n  batchedUpdates as unstable_batchedUpdates,\n  act,\n};\n"],"names":["warningWWW","require","warn","format","args","printWarning","error","level","React","ReactSharedInternals","__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED","ReactDebugCurrentFrame","stack","getStackAddendum","push","unshift","apply","get","key","_reactInternals","set","value","FunctionComponent","ClassComponent","IndeterminateComponent","HostRoot","HostPortal","HostComponent","HostText","Fragment","Mode","ContextConsumer","ContextProvider","ForwardRef","Profiler","SuspenseComponent","MemoComponent","SimpleMemoComponent","LazyComponent","IncompleteClassComponent","DehydratedFragment","SuspenseListComponent","ScopeComponent","OffscreenComponent","LegacyHiddenComponent","CacheComponent","REACT_ELEMENT_TYPE","REACT_PORTAL_TYPE","REACT_FRAGMENT_TYPE","REACT_STRICT_MODE_TYPE","REACT_PROFILER_TYPE","REACT_PROVIDER_TYPE","REACT_CONTEXT_TYPE","REACT_FORWARD_REF_TYPE","REACT_SUSPENSE_TYPE","REACT_SUSPENSE_LIST_TYPE","REACT_MEMO_TYPE","REACT_LAZY_TYPE","REACT_SCOPE_TYPE","REACT_OPAQUE_ID_TYPE","REACT_DEBUG_TRACING_MODE_TYPE","REACT_OFFSCREEN_TYPE","REACT_LEGACY_HIDDEN_TYPE","REACT_CACHE_TYPE","Symbol","for","symbolFor","MAYBE_ITERATOR_SYMBOL","iterator","FAUX_ITERATOR_SYMBOL","getIteratorFn","maybeIterable","maybeIterator","getWrappedName","outerType","innerType","wrapperName","displayName","functionName","name","getContextName","type","getComponentNameFromType","tag","$$typeof","context","provider","_context","render","outerName","lazyComponent","payload","_payload","init","_init","x","getComponentNameFromFiber","fiber","enableProfilerTimer","__PROFILE__","enableProfilerCommitHooks","enableLazyElements","warnAboutStringRefs","warnOnSubscriptionInsideStartTransition","enableNewReconciler","enableLazyContextPropagation","NoFlags","PerformedWork","Placement","Update","PlacementAndUpdate","ChildDeletion","ContentReset","Callback","DidCapture","Ref","Snapshot","Passive","Hydrating","HydratingAndUpdate","Visibility","LifecycleEffectMask","HostEffectMask","Incomplete","ShouldCapture","ForceUpdateForLegacySuspense","RefStatic","LayoutStatic","PassiveStatic","MountLayoutDev","MountPassiveDev","BeforeMutationMask","enableCreateEventHandleAPI","MutationMask","LayoutMask","PassiveMask","StaticMask","ReactCurrentOwner","getNearestMountedFiber","node","nearestMounted","alternate","nextNode","flags","return","isFiberMounted","isMounted","component","owner","current","ownerFiber","instance","stateNode","_warnedAboutRefsInRender","getInstance","assertIsMounted","findCurrentFiberUsingSlowPath","a","b","parentA","parentB","nextParent","child","sibling","didFindChild","findCurrentHostFiber","parent","currentParent","findCurrentHostFiberImpl","match","isFiberSuspenseAndTimedOut","memoizedState","dehydrated","isArrayImpl","Array","isArray","scheduleCallback","Scheduler","cancelCallback","shouldYield","requestPaint","now","ImmediatePriority","UserBlockingPriority","NormalPriority","IdlePriority","rendererID","injectedHook","hasLoggedError","isDevToolsPresent","__REACT_DEVTOOLS_GLOBAL_HOOK__","injectInternals","internals","hook","isDisabled","supportsFiber","inject","err","checkDCE","onScheduleRoot","root","children","onScheduleFiberRoot","__DEV__","onCommitRoot","eventPriority","onCommitFiberRoot","didError","schedulerPriority","DiscreteEventPriority","ImmediateSchedulerPriority","ContinuousEventPriority","UserBlockingSchedulerPriority","DefaultEventPriority","NormalSchedulerPriority","IdleEventPriority","IdleSchedulerPriority","undefined","onPostCommitRoot","onPostCommitFiberRoot","onCommitUnmount","onCommitFiberUnmount","NoMode","ConcurrentMode","ProfileMode","DebugTracingMode","StrictLegacyMode","StrictEffectsMode","ConcurrentUpdatesByDefaultMode","TotalLanes","NoLanes","NoLane","SyncLane","InputContinuousHydrationLane","InputContinuousLane","DefaultHydrationLane","DefaultLane","TransitionHydrationLane","TransitionLanes","TransitionLane1","TransitionLane2","TransitionLane3","TransitionLane4","TransitionLane5","TransitionLane6","TransitionLane7","TransitionLane8","TransitionLane9","TransitionLane10","TransitionLane11","TransitionLane12","TransitionLane13","TransitionLane14","TransitionLane15","TransitionLane16","RetryLanes","RetryLane1","RetryLane2","RetryLane3","RetryLane4","RetryLane5","SomeRetryLane","SelectiveHydrationLane","NonIdleLanes","IdleHydrationLane","IdleLane","OffscreenLane","NoTimestamp","nextTransitionLane","nextRetryLane","getHighestPriorityLanes","lanes","getHighestPriorityLane","getNextLanes","wipLanes","pendingLanes","nextLanes","suspendedLanes","pingedLanes","nonIdlePendingLanes","nonIdleUnblockedLanes","nonIdlePingedLanes","unblockedLanes","nextLane","wipLane","allowConcurrentByDefault","mode","entangledLanes","entanglements","index","pickArbitraryLaneIndex","lane","getMostRecentEventTime","eventTimes","mostRecentEventTime","eventTime","computeExpirationTime","currentTime","markStarvedLanesAsExpired","expirationTimes","expirationTime","expiredLanes","getLanesToRetrySynchronouslyOnError","everythingButOffscreen","includesNonIdleWork","includesOnlyRetries","includesOnlyTransitions","shouldTimeSlice","SyncDefaultLanes","isTransitionLane","claimNextTransitionLane","claimNextRetryLane","pickArbitraryLane","clz32","laneToIndex","includesSomeLane","isSubsetOfLanes","subset","mergeLanes","removeLanes","intersectLanes","laneToLanes","createLaneMap","initial","laneMap","i","markRootUpdated","updateLane","markRootSuspended","markRootPinged","markRootMutableRead","mutableReadLanes","markRootFinished","remainingLanes","noLongerPendingLanes","markRootEntangled","rootEntangledLanes","Math","clz32Fallback","log","LN2","currentUpdatePriority","getCurrentUpdatePriority","setCurrentUpdatePriority","newPriority","higherEventPriority","lowerEventPriority","isHigherEventPriority","lanesToEventPriority","shim","isSuspenseInstancePending","isSuspenseInstanceFallback","hydrateTextInstance","errorHydratingContainer","NO_CONTEXT","UPDATE_SIGNAL","nodeToInstanceMap","WeakMap","Object","freeze","getPublicInstance","inst","createNodeMock","rootContainerInstance","mockNode","props","appendChild","parentInstance","indexOf","splice","insertBefore","beforeChild","beforeIndex","removeChild","clearContainer","container","getRootHostContext","getChildHostContext","parentHostContext","prepareForCommit","containerInfo","resetAfterCommit","createInstance","hostContext","internalInstanceHandle","isHidden","appendInitialChild","prepareUpdate","testElement","oldProps","newProps","shouldSetTextContent","createTextInstance","text","getCurrentEventPriority","scheduleTimeout","setTimeout","cancelTimeout","clearTimeout","noTimeout","commitUpdate","updatePayload","commitTextUpdate","textInstance","oldText","newText","resetTextContent","appendChildToContainer","insertInContainerBefore","removeChildFromContainer","hideInstance","hideTextInstance","unhideInstance","unhideTextInstance","getInstanceFromNode","clientId","makeClientIdInDEV","warnOnAccessInDEV","id","toString","valueOf","preparePortalMount","portalInstance","prepareScopeUpdate","scopeInstance","getInstanceFromScope","disabledDepth","prevLog","prevInfo","prevWarn","prevError","prevGroup","prevGroupCollapsed","prevGroupEnd","disabledLog","__reactDisabledLog","disableLogs","console","info","group","groupCollapsed","groupEnd","configurable","enumerable","writable","defineProperties","reenableLogs","ReactCurrentDispatcher","prefix","describeBuiltInComponentFrame","source","ownerFn","Error","trim","reentry","componentFrameCache","PossiblyWeakMap","Map","describeNativeComponentFrame","fn","construct","disableNativeComponentFrames","frame","control","previousPrepareStackTrace","prepareStackTrace","previousDispatcher","Fake","defineProperty","prototype","Reflect","call","sample","sampleLines","split","controlLines","s","length","c","replace","syntheticFrame","describeClassComponentFrame","ctor","describeFunctionComponentFrame","shouldConstruct","Component","isReactComponent","describeUnknownElementTypeFrameInDEV","hasOwnProperty","loggedTypeFailures","setCurrentlyValidatingElement","element","_owner","_source","setExtraStackFrame","checkPropTypes","typeSpecs","values","location","componentName","has","Function","bind","typeSpecName","ex","message","valueStack","fiberStack","createCursor","defaultValue","pop","cursor","warnedAboutMissingGetChildContext","emptyContextObject","contextStackCursor","didPerformWorkStackCursor","previousContext","getUnmaskedContext","workInProgress","didPushOwnContextIfProvider","isContextProvider","cacheContext","unmaskedContext","maskedContext","__reactInternalMemoizedUnmaskedChildContext","__reactInternalMemoizedMaskedChildContext","getMaskedContext","contextTypes","hasContextChanged","childContextTypes","popContext","popTopLevelContextObject","pushTopLevelContextObject","didChange","processChildContext","parentContext","getChildContext","childContext","contextKey","pushContextProvider","memoizedMergedChildContext","__reactInternalMemoizedMergedChildContext","invalidateContextProvider","mergedContext","findCurrentUnmaskedContext","LegacyRoot","ConcurrentRoot","syncQueue","includesLegacySyncCallbacks","isFlushingSyncQueue","scheduleSyncCallback","callback","scheduleLegacySyncCallback","flushSyncCallbacksOnlyInLegacyMode","flushSyncCallbacks","previousUpdatePriority","isSync","queue","slice","ReactCurrentBatchConfig","NoTransition","requestCurrentTransition","transition","is","y","objectIs","shallowEqual","objA","objB","keysA","keys","keysB","describeFiber","_debugOwner","_debugSource","getStackByFiberInDevAndProd","isRendering","getCurrentFiberOwnerNameInDevOrNull","getCurrentFiberStackInDev","resetCurrentFiber","getCurrentStack","setCurrentFiber","setIsRendering","rendering","getIsRendering","ReactStrictModeWarnings","recordUnsafeLifecycleWarnings","flushPendingUnsafeLifecycleWarnings","recordLegacyContextWarning","flushLegacyContextWarning","discardPendingWarnings","findStrictRoot","maybeStrictRoot","setToSortedString","array","forEach","sort","join","pendingComponentWillMountWarnings","pendingUNSAFE_ComponentWillMountWarnings","pendingComponentWillReceivePropsWarnings","pendingUNSAFE_ComponentWillReceivePropsWarnings","pendingComponentWillUpdateWarnings","pendingUNSAFE_ComponentWillUpdateWarnings","didWarnAboutUnsafeLifecycles","Set","componentWillMount","__suppressDeprecationWarning","UNSAFE_componentWillMount","componentWillReceiveProps","UNSAFE_componentWillReceiveProps","componentWillUpdate","UNSAFE_componentWillUpdate","componentWillMountUniqueNames","add","UNSAFE_componentWillMountUniqueNames","componentWillReceivePropsUniqueNames","UNSAFE_componentWillReceivePropsUniqueNames","componentWillUpdateUniqueNames","UNSAFE_componentWillUpdateUniqueNames","size","sortedNames","pendingLegacyContextWarning","didWarnAboutLegacyContext","strictRoot","warningsForRoot","fiberArray","firstFiber","uniqueNames","setCurrentDebugFiberInDEV","resetCurrentDebugFiberInDEV","resolveDefaultProps","baseProps","defaultProps","assign","propName","valueCursor","rendererSigil","currentlyRenderingFiber","lastContextDependency","lastFullyObservedContext","isDisallowedContextReadInDEV","resetContextDependencies","enterDisallowedContextReadInDEV","exitDisallowedContextReadInDEV","pushProvider","providerFiber","nextValue","_currentValue2","_currentRenderer2","popProvider","currentValue","scheduleWorkOnParentPath","renderLanes","childLanes","propagateContextChange","propagateContextChange_eager","nextFiber","list","dependencies","dependency","firstContext","update","createUpdate","ForceUpdate","updateQueue","sharedQueue","shared","pending","next","prepareToReadContext","markWorkInProgressReceivedUpdate","readContext","isPrimaryRenderer","contextItem","memoizedValue","interleavedQueues","pushInterleavedQueue","enqueueInterleavedUpdates","lastInterleavedUpdate","interleaved","firstInterleavedUpdate","lastPendingUpdate","firstPendingUpdate","UpdateState","ReplaceState","CaptureUpdate","hasForceUpdate","didWarnUpdateInsideUpdate","currentlyProcessingQueue","initializeUpdateQueue","baseState","firstBaseUpdate","lastBaseUpdate","effects","cloneUpdateQueue","currentQueue","clone","enqueueUpdate","isInterleavedUpdate","entangleTransitions","queueLanes","newQueueLanes","enqueueCapturedUpdate","capturedUpdate","newFirst","newLast","getStateFromUpdate","prevState","nextProps","nextState","partialState","processUpdateQueue","pendingQueue","currentLastBaseUpdate","newState","newLanes","newBaseState","newFirstBaseUpdate","newLastBaseUpdate","updateEventTime","lastInterleaved","markSkippedUpdateLanes","callCallback","resetHasForceUpdateBeforeProcessing","checkHasForceUpdateAfterProcessing","commitUpdateQueue","finishedWork","finishedQueue","effect","fakeInternalInstance","emptyRefsObject","refs","didWarnAboutStateAssignmentForComponent","didWarnAboutUninitializedState","didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate","didWarnAboutLegacyLifecyclesAndDerivedState","didWarnAboutUndefinedDerivedState","warnOnUndefinedDerivedState","warnOnInvalidCallback","didWarnAboutDirectlyAssigningPropsToState","didWarnAboutContextTypeAndContextTypes","didWarnAboutInvalidateContextType","didWarnOnInvalidCallback","callerName","applyDerivedStateFromProps","getDerivedStateFromProps","classComponentUpdater","enqueueSetState","requestEventTime","requestUpdateLane","scheduleUpdateOnFiber","enqueueReplaceState","enqueueForceUpdate","checkShouldComponentUpdate","oldState","nextContext","shouldComponentUpdate","shouldUpdate","isPureReactComponent","checkClassInstance","renderPresent","getInitialState","isReactClassApproved","state","getDefaultProps","propTypes","contextType","componentShouldUpdate","componentDidUnmount","componentDidReceiveProps","componentWillRecieveProps","UNSAFE_componentWillRecieveProps","hasMutatedProps","getSnapshotBeforeUpdate","componentDidUpdate","getDerivedStateFromError","adoptClassInstance","updater","setInstance","_reactInternalInstance","constructClassInstance","isLegacyContextConsumer","isValid","addendum","foundWillMountName","foundWillReceivePropsName","foundWillUpdateName","newApiName","callComponentWillMount","callComponentWillReceiveProps","mountClassInstance","componentDidMount","fiberFlags","resumeMountClassInstance","memoizedProps","oldContext","nextLegacyUnmaskedContext","hasNewLifecycles","updateClassInstance","unresolvedOldProps","elementType","unresolvedNewProps","pendingProps","nextUnmaskedContext","didWarnAboutMaps","didWarnAboutGenerators","didWarnAboutStringRefs","ownerHasKeyUseWarning","ownerHasFunctionTypeWarning","warnForMissingKey","returnFiber","_store","validated","coerceRef","mixedRef","ref","_self","stringRef","_stringRef","throwOnInvalidObjectType","newChild","childString","warnOnFunctionType","ChildReconciler","shouldTrackSideEffects","deleteChild","childToDelete","deletions","deleteRemainingChildren","currentFirstChild","mapRemainingChildren","existingChildren","existingChild","useFiber","createWorkInProgress","placeChild","newFiber","lastPlacedIndex","newIndex","oldIndex","placeSingleChild","updateTextNode","textContent","created","createFiberFromText","existing","updateElement","updateFragment","isCompatibleFamilyForHotReloading","createFiberFromElement","updatePortal","portal","implementation","createFiberFromPortal","fragment","createFiberFromFragment","createChild","updateSlot","oldFiber","updateFromMap","newIdx","matchedFiber","warnOnInvalidKey","knownKeys","reconcileChildrenArray","newChildren","resultingFirstChild","previousNewFiber","nextOldFiber","delete","reconcileChildrenIterator","newChildrenIterable","iteratorFn","toStringTag","entries","step","done","reconcileSingleTextNode","reconcileSingleElement","reconcileSinglePortal","reconcileChildFibers","isUnkeyedTopLevelFragment","mountChildFibers","cloneChildFibers","currentChild","resetChildFibers","resetWorkInProgress","contextFiberStackCursor","rootInstanceStackCursor","requiredContext","getRootHostContainer","rootInstance","pushHostContainer","nextRootInstance","nextRootContext","popHostContainer","getHostContext","pushHostContext","popHostContext","DefaultSuspenseContext","SubtreeSuspenseContextMask","InvisibleParentSuspenseContext","ForceSuspenseFallback","suspenseStackCursor","hasSuspenseContext","flag","setDefaultShallowSuspenseContext","setShallowSuspenseContext","shallowContext","addSubtreeSuspenseContext","subtreeContext","pushSuspenseContext","newContext","popSuspenseContext","shouldCaptureSuspense","hasInvisibleParent","unstable_avoidThisFallback","findFirstSuspended","row","revealOrder","didSuspend","HasEffect","Layout","isHydrating","enterHydrationState","prepareToHydrateHostInstance","prepareToHydrateHostTextInstance","popHydrationState","getIsHydrating","workInProgressSources","markSourceAsDirty","mutableSource","resetWorkInProgressVersions","_workInProgressVersionSecondary","getWorkInProgressVersion","setWorkInProgressVersion","version","warnAboutMultipleRenderersDEV","_currentSecondaryRenderer","getSuspendedCachePool","didWarnAboutMismatchedHooksForComponent","didWarnAboutUseOpaqueIdentifier","didWarnUncachedGetSnapshot","currentHook","workInProgressHook","didScheduleRenderPhaseUpdate","didScheduleRenderPhaseUpdateDuringThisPass","RE_RENDER_LIMIT","currentHookNameInDev","hookTypesDev","hookTypesUpdateIndexDev","ignorePreviousDependencies","mountHookTypesDev","hookName","updateHookTypesDev","warnOnHookMismatchInDev","checkDepsAreArrayDev","deps","currentHookName","table","secondColumnStart","oldHookName","newHookName","throwInvalidHookError","areHookInputsEqual","nextDeps","prevDeps","renderWithHooks","secondArg","nextRenderLanes","_debugHookTypes","HooksDispatcherOnUpdateInDEV","HooksDispatcherOnMountWithHookTypesInDEV","HooksDispatcherOnMountInDEV","numberOfReRenders","HooksDispatcherOnRerenderInDEV","ContextOnlyDispatcher","didRenderTooFewHooks","StaticMaskEffect","bailoutHooks","MountPassiveDevEffect","MountLayoutDevEffect","PassiveEffect","UpdateEffect","resetHooksAfterThrow","isUpdatingOpaqueValueInRenderPhase","mountWorkInProgressHook","baseQueue","updateWorkInProgressHook","nextCurrentHook","nextWorkInProgressHook","newHook","createFunctionComponentUpdateQueue","lastEffect","basicStateReducer","action","mountReducer","reducer","initialArg","initialState","dispatch","lastRenderedReducer","lastRenderedState","dispatchAction","updateReducer","baseFirst","pendingFirst","first","newBaseQueueFirst","newBaseQueueLast","eagerReducer","eagerState","interleavedLane","rerenderReducer","lastRenderPhaseUpdate","firstRenderPhaseUpdate","readFromUnsubscribedMutableSource","getSnapshot","getVersion","_getVersion","isSafeToReadFromSource","currentRenderVersion","snapshot","useMutableSource","subscribe","getWorkInProgressRoot","dispatcher","useState","currentSnapshot","setSnapshot","stateHook","prevGetSnapshot","prevSource","prevSubscribe","useEffect","maybeNewVersion","maybeNewSnapshot","handleChange","latestGetSnapshot","latestSetSnapshot","unsubscribe","newQueue","mountMutableSource","updateMutableSource","mountSyncExternalStore","nextSnapshot","useSyncExternalStore","updateSyncExternalStore","prevSnapshot","useLayoutEffect","checkIfSnapshotChanged","forceStoreRerender","handleStoreChange","prevValue","mountState","updateState","rerenderState","pushEffect","create","destroy","componentUpdateQueue","firstEffect","mountRef","initialValue","updateRef","mountEffectImpl","hookFlags","HookHasEffect","updateEffectImpl","prevEffect","mountEffect","jest","warnIfNotCurrentlyActingEffectsInDEV","PassiveStaticEffect","HookPassive","updateEffect","mountLayoutEffect","HookLayout","updateLayoutEffect","imperativeHandleEffect","refCallback","refObject","mountImperativeHandle","effectDeps","concat","updateImperativeHandle","mountDebugValue","formatterFn","updateDebugValue","mountCallback","updateCallback","mountMemo","nextCreate","updateMemo","mountDeferredValue","setValue","prevTransition","updateDeferredValue","rerenderDeferredValue","startTransition","setPending","previousPriority","_updatedFibers","updatedFibersCount","clear","mountTransition","isPending","start","updateTransition","rerenderTransition","getIsUpdatingOpaqueValueInRenderPhaseInDEV","warnOnOpaqueIdentifierAccessInDEV","mountOpaqueIdentifier","makeId","updateOpaqueIdentifier","rerenderOpaqueIdentifier","arguments","prevDispatcher","InvalidNestedHooksDispatcherOnUpdateInDEV","currentState","warnIfNotCurrentlyActingUpdatesInDev","useCallback","useContext","useImperativeHandle","useMemo","useReducer","useRef","useDebugValue","useDeferredValue","useTransition","useOpaqueIdentifier","unstable_isNewReconciler","InvalidNestedHooksDispatcherOnMountInDEV","InvalidNestedHooksDispatcherOnRerenderInDEV","warnInvalidContextAccess","warnInvalidHookAccess","commitTime","layoutEffectStartTime","profilerStartTime","passiveEffectStartTime","currentUpdateIsNested","nestedUpdateScheduled","isCurrentUpdateNested","markNestedUpdateScheduled","resetNestedUpdateFlag","syncNestedUpdateFlag","getCommitTime","recordCommitTime","startProfilerTimer","actualStartTime","stopProfilerTimerIfRunning","stopProfilerTimerIfRunningAndRecordDelta","overrideBaseTime","elapsedTime","actualDuration","selfBaseDuration","recordLayoutEffectDuration","parentFiber","effectDuration","parentStateNode","recordPassiveEffectDuration","passiveEffectDuration","startLayoutEffectTimer","startPassiveEffectTimer","transferActualDuration","createCapturedValue","ReactFiberErrorDialogWWW","showErrorDialog","boundary","errorInfo","capturedError","componentStack","errorBoundary","logCapturedError","logError","_suppressLogging","componentNameMessage","errorBoundaryMessage","errorBoundaryName","combinedMessage","e","createRootErrorUpdate","onUncaughtError","createClassErrorUpdate","markFailedErrorBoundaryForHotReloading","componentDidCatch","markLegacyErrorBoundaryAsFailed","attachPingListener","wakeable","pingCache","threadIDs","ping","pingSuspendedRoot","then","throwException","sourceFiber","rootRenderLanes","currentSource","hasInvisibleParentBoundary","wakeables","currentSourceFiber","renderDidError","isAlreadyFailedLegacyErrorBoundary","getSuspenseFallbackChild","emptyObject","collectScopedNodes","scopedNodes","collectScopedNodesFromChildren","collectFirstScopedNode","collectFirstScopedNodeFromChildren","startingChild","scopedNode","collectNearestContextValues","childContextValues","contextValue","collectNearestChildContextValues","DO_NOT_USE_queryAllNodes","currentFiber","DO_NOT_USE_queryFirstNode","containsNode","getChildContextValues","createScopeInstance","markUpdate","markRef","appendAllChildren","updateHostContainer","updateHostComponent","updateHostText","needsVisibilityToggle","currentHostContext","cutOffTailIfNeeded","renderState","hasRenderedATailFallback","tailMode","tailNode","tail","lastTailNode","bubbleProperties","completedWork","didBailout","newChildLanes","subtreeFlags","treeBaseDuration","completeWork","isLegacyContextProvider","popLegacyContext","fiberRoot","popTopLevelLegacyContextObject","resetMutableSourceWorkInProgressVersions","pendingContext","wasHydrated","hydrate","nextDidTimeout","prevDidTimeout","offscreenFiber","hasInvisibleChildContext","renderDidSuspend","renderDidSuspendDelayIfPossible","enableSuspenseCallback","suspenseCallback","primaryChildFragment","didSuspendAlready","renderedTail","cannotBeSuspended","renderHasNotSuspendedYet","suspended","newThenables","getRenderTargetTime","renderingStartTime","isBackwards","previousSibling","last","suspenseContext","popRenderLanes","nextIsHidden","prevIsHidden","subtreeRenderLanes","didReceiveUpdate","didWarnAboutBadClass","didWarnAboutModulePatternComponent","didWarnAboutContextTypeOnFunctionComponent","didWarnAboutGetDerivedStateOnFunctionComponent","didWarnAboutFunctionRefs","didWarnAboutReassigningProps","didWarnAboutRevealOrder","didWarnAboutTailOptions","didWarnAboutDefaultPropsOnFunctionComponent","reconcileChildren","nextChildren","forceUnmountCurrentAndReconcile","updateForwardRef","innerPropTypes","bailoutOnAlreadyFinishedWork","updateMemoComponent","isSimpleFunctionComponent","compare","resolvedType","resolveFunctionForHotReloading","validateFunctionComponentInDev","updateSimpleMemoComponent","createFiberFromTypeAndProps","hasScheduledUpdateOrContext","checkScheduledUpdateOrContext","prevProps","outerMemoType","outerPropTypes","updateFunctionComponent","updateOffscreenComponent","spawnedCachePool","baseLanes","cachePool","pushRenderLanes","nextBaseLanes","prevBaseLanes","updateLegacyHiddenComponent","updateMode","updateProfiler","updateClassComponent","shouldError","tempInstance","hasContext","pushLegacyContextProvider","nextUnitOfWork","finishClassComponent","didCaptureError","pushHostRootContext","updateHostRoot","prevChildren","resetHydrationState","mountLazyComponent","_current","resolvedTag","resolveLazyComponentTag","resolvedProps","resolveClassForHotReloading","resolveForwardRefForHotReloading","hint","mountIncompleteClassComponent","mountIndeterminateComponent","ownerName","warningKey","debugSource","fileName","lineNumber","SUSPENDED_MARKER","retryLane","mountSuspenseOffscreenState","updateSuspenseOffscreenState","prevOffscreenState","shouldRemainOnFallback","suspenseState","getRemainingWorkInPrimaryTree","updateSuspenseComponent","shouldSuspend","showFallback","nextPrimaryChildren","nextFallbackChildren","fallback","fallbackFragment","mountSuspenseFallbackChildren","unstable_expectedLoadTime","mountSuspensePrimaryChildren","fallbackChildFragment","updateSuspenseFallbackChildren","updateSuspensePrimaryChildren","primaryChildren","primaryChildProps","mountWorkInProgressOffscreenFiber","fallbackChildren","progressedPrimaryFragment","offscreenProps","createFiberFromOffscreen","updateWorkInProgressOffscreenFiber","currentPrimaryChildFragment","currentFallbackChildFragment","scheduleWorkOnFiber","propagateSuspenseContextChange","firstChild","findLastContentRow","lastContentRow","currentRow","validateRevealOrder","toLowerCase","validateTailOptions","validateSuspenseListNestedChild","childSlot","isAnArray","isIterable","validateSuspenseListChildren","childrenIterator","initSuspenseListRenderState","updateSuspenseListComponent","shouldForceFallback","didSuspendBefore","nextRow","updatePortalComponent","hasWarnedAboutUsingNoValuePropOnContextProvider","updateContextProvider","providerType","newValue","providerPropTypes","oldValue","hasLegacyContextChanged","hasWarnedAboutUsingContextAsConsumer","updateContextConsumer","Consumer","updateScopeComponent","remountFiber","oldWorkInProgress","newWorkInProgress","prevSibling","updateLanes","attemptEarlyBailoutIfNoScheduledUpdate","hasChildWork","primaryChildLanes","beginWork","_debugNeedsRemount","unresolvedProps","unwindWork","unwindInterruptedWork","interruptedWork","ReactFbErrorUtils","invokeGuardedCallback","invokeGuardedCallbackImpl","func","d","f","hasError","caughtError","reporter","onError","clearCaughtError","didWarnAboutUndefinedSnapshotBeforeUpdate","PossiblyWeakSet","WeakSet","nextEffect","reportUncaughtErrorInDEV","callComponentWillUnmountWithTimer","componentWillUnmount","safelyCallComponentWillUnmount","nearestMountedAncestor","captureCommitPhaseError","safelyDetachRef","safelyCallDestroy","focusedInstanceHandle","shouldFireAfterActiveInstanceBlur","commitBeforeMutationEffects","commitBeforeMutationEffects_begin","shouldFire","ensureCorrectReturnPointer","commitBeforeMutationEffects_complete","commitBeforeMutationEffectsOnFiber","didWarnSet","__reactInternalSnapshotBeforeUpdate","commitHookEffectListUnmount","commitHookEffectListMount","commitPassiveEffectDurations","finishedRoot","onPostCommit","phase","outer","commitLayoutEffectOnFiber","committedLanes","commitMount","onCommit","onRender","enqueuePendingPassiveProfilerEffect","commitSuspenseHydrationCallbacks","commitAttachRef","hideOrUnhideAllChildren","hostSubtreeRoot","instanceToUse","enableScopeAPI","commitDetachRef","currentRef","commitUnmount","NoHookEffect","unmountHostComponents","hydrationCallbacks","onDeleted","commitNestedUnmounts","detachFiberMutation","detachFiberAfterEffects","hostInstance","getHostParentFiber","isHostParent","getHostSibling","siblings","commitPlacement","isContainer","before","insertOrAppendPlacementNodeIntoContainer","insertOrAppendPlacementNode","isHost","currentParentIsValid","currentParentIsContainer","findParent","commitDeletion","commitWork","commitSuspenseCallback","attachSuspenseRetryListeners","retryCache","retry","resolveRetryWakeable","commitResetTextContent","commitMutationEffects","inProgressLanes","commitMutationEffects_begin","commitMutationEffects_complete","commitMutationEffectsOnFiber","wasHidden","markCommitTimeOfFallback","offscreenBoundary","primaryFlags","commitLayoutEffects","commitLayoutEffects_begin","subtreeRoot","isModernRoot","commitLayoutMountEffects_complete","commitPassiveMountEffects","commitPassiveMountEffects_begin","commitPassiveMountEffects_complete","commitPassiveMountOnFiber","commitPassiveUnmountEffects","commitPassiveUnmountEffects_begin","fiberToDelete","commitPassiveUnmountEffectsInsideOfDeletedTree_begin","previousFiber","detachedChild","detachedSibling","commitPassiveUnmountEffects_complete","commitPassiveUnmountOnFiber","deletedSubtreeRoot","commitPassiveUnmountInsideDeletedTreeOnFiber","commitPassiveUnmountEffectsInsideOfDeletedTree_complete","didWarnWrongReturnPointer","expectedReturnFiber","invokeLayoutEffectMountInDEV","invokePassiveEffectMountInDEV","invokeLayoutEffectUnmountInDEV","invokePassiveEffectUnmountInDEV","COMPONENT_TYPE","HAS_PSEUDO_CLASS_TYPE","ROLE_TYPE","TEST_NAME_TYPE","TEXT_TYPE","ceil","ReactCurrentActQueue","NoContext","BatchedContext","RenderContext","CommitContext","RetryAfterError","RootIncomplete","RootFatalErrored","RootErrored","RootSuspended","RootSuspendedWithDelay","RootCompleted","executionContext","workInProgressRoot","workInProgressRootRenderLanes","subtreeRenderLanesCursor","workInProgressRootExitStatus","workInProgressRootFatalError","workInProgressRootIncludedLanes","workInProgressRootSkippedLanes","workInProgressRootUpdatedLanes","workInProgressRootPingedLanes","globalMostRecentFallbackTime","FALLBACK_THROTTLE_MS","workInProgressRootRenderTargetTime","Infinity","RENDER_TIMEOUT_MS","resetRenderTimer","hasUncaughtError","firstUncaughtError","legacyErrorBoundariesThatAlreadyFailed","rootDoesHavePassiveEffects","rootWithPendingPassiveEffects","pendingPassiveEffectsLanes","pendingPassiveProfilerEffects","NESTED_UPDATE_LIMIT","nestedUpdateCount","rootWithNestedUpdates","NESTED_PASSIVE_UPDATE_LIMIT","nestedPassiveUpdateCount","currentEventTime","currentEventTransitionLane","isTransition","eventLane","requestRetryLane","checkForNestedUpdates","warnAboutRenderPhaseUpdatesInDEV","markUpdateLaneFromFiberToRoot","deferRenderPhaseUpdateToNextBatch","ensureRootIsScheduled","isBatchingLegacy","warnAboutUpdateOnNotYetMountedFiberInDEV","existingCallbackNode","callbackNode","callbackPriority","newCallbackPriority","existingCallbackPriority","fakeActCallbackNode","newCallbackNode","didScheduleLegacyUpdate","performSyncWorkOnRoot","schedulerPriorityLevel","performConcurrentWorkOnRoot","didTimeout","originalCallbackNode","didFlushPassiveEffects","flushPassiveEffects","exitStatus","disableSchedulerTimeoutInWorkLoop","renderRootConcurrent","renderRootSync","prevExecutionContext","errorRetryLanes","fatalError","prepareFreshStack","finishedLanes","finishConcurrentRender","commitRoot","shouldForceFlushFallbacksInDEV","msUntilTimeout","timeoutHandle","eventTimeMs","timeElapsedMs","jnd","markRootSuspended_dontCallThisOneDirectly","batchedUpdates","flushSyncWithoutWarningIfAlreadyRendering","flushSync","pushToStack","popFromStack","handleError","thrownValue","erroredWork","completeUnitOfWork","yetAnotherThrownValue","pushDispatcher","popDispatcher","workLoopSync","performUnitOfWork","workLoopConcurrent","unitOfWork","siblingFiber","previousUpdateLanePriority","commitRootImpl","renderPriorityLevel","flushRenderPhaseStrictModeWarningsInDEV","subtreeHasEffects","rootHasEffect","rootDidHavePassiveEffects","commitDoubleInvokeEffectsInDEV","onCommitRootDevTools","renderPriority","priority","flushPassiveEffectsImpl","profilerEffects","onPostCommitRootDevTools","prepareToThrowUncaughtError","captureCommitPhaseErrorOnRoot","rootFiber","retryTimedOutBoundary","boundaryFiber","timeElapsed","hasPassiveEffects","invokeEffectsInDev","invokeEffectFn","primarySubtreeFlag","didWarnStateUpdateForNotYetMountedComponent","ReactCurrentFiberCurrent","originalBeginWork","didWarnAboutUpdateInRender","didWarnAboutUpdateInRenderForAnotherComponent","ReactCurrentDebugFiberIsRenderingInDEV","renderingComponentName","dedupeKey","setStateComponentName","priorityLevel","actQueue","Scheduler_scheduleCallback","Scheduler_cancelCallback","warnsIfNotActing","disableActWarning","warnIfNotCurrentlyActingUpdatesInDEV","resolveFamily","failedBoundaries","setRefreshHandler","handler","family","currentRender","syntheticType","prevType","nextType","needsCompareFamilies","$$typeofNextType","prevFamily","scheduleRefresh","staleFamilies","updatedFamilies","scheduleFibersWithFamiliesRecursively","scheduleRoot","updateContainer","candidateType","needsRender","needsRemount","findHostInstancesForRefresh","families","hostInstances","types","map","findHostInstancesForMatchingFibersRecursively","didMatch","findHostInstancesForFiberShallowly","foundHostInstances","findChildHostInstancesForFiberShallowly","hasBadMapPolyfill","nonExtensibleObject","preventExtensions","FiberNode","Number","NaN","createFiber","currentDependencies","createHostRootFiber","isStrictMode","concurrentUpdatesByDefaultOverride","fiberTag","getTag","enableStrictEffects","createFiberFromProfiler","createFiberFromSuspense","createFiberFromSuspenseList","createFiberFromLegacyHidden","createFiberFromScope","elements","scope","content","pendingChildren","FiberRootNode","_debugRootType","createFiberRoot","uninitializedFiber","didWarnAboutNestedUpdates","didWarnAboutFindNodeInStrictMode","getContextForSubtree","parentComponent","createContainer","ReactCurrentFiberIsRendering","getPublicRootInstance","containerFiber","shouldErrorImpl","shouldSuspendImpl","overrideHookState","overrideHookStateDeletePath","overrideHookStateRenamePath","overrideProps","overridePropsDeletePath","overridePropsRenamePath","scheduleUpdate","setErrorHandler","setSuspenseHandler","copyWithDeleteImpl","obj","path","updated","copyWithDelete","copyWithRenameImpl","oldPath","newPath","oldKey","newKey","copyWithRename","copyWithSetImpl","copyWithSet","findHook","newShouldErrorImpl","newShouldSuspendImpl","findHostInstanceByFiber","hostFiber","emptyFindFiberByHostInstance","getCurrentFiberForDevTools","getIsStrictModeForDevtools","injectIntoDevTools","devToolsConfig","findFiberByHostInstance","bundleType","rendererPackageName","rendererConfig","currentDispatcherRef","getCurrentFiber","getIsStrictMode","reconcilerVersion","ReactVersion","act","defaultTestOptions","toJSON","renderedChildren","renderedChild","json","childrenToTree","nodeAndSiblingsArray","toTree","flatten","nodeWithSibling","arr","result","n","el","nodeType","rendered","validWrapperTypes","getChildren","startingNode","descend","wrapFiber","ReactTestInstance","_currentFiber","_fiber","find","predicate","expectOne","findAll","deep","findByType","findAllByType","findByProps","findAllByProps","JSON","stringify","options","propsMatch","results","all","filter","isConcurrent","concurrentUpdatesByDefault","unstable_isConcurrent","unstable_strictMode","unstable_concurrentUpdatesByDefault","entry","_Scheduler","newElement","unmount","unstable_flushSync","fiberToWrapper","wrapper"],"mappings":"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"}