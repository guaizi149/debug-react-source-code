{"version":3,"file":"ReactTestRenderer-dev.js","sources":["/Users/apple/Documents/myProject/debug-react-source-code/react/packages/shared/ReactSharedInternals.js","/Users/apple/Documents/myProject/debug-react-source-code/react/packages/shared/consoleWithStackDev.js","/Users/apple/Documents/myProject/debug-react-source-code/react/packages/shared/ReactInstanceMap.js","/Users/apple/Documents/myProject/debug-react-source-code/react/packages/react-reconciler/src/ReactWorkTags.js","/Users/apple/Documents/myProject/debug-react-source-code/react/packages/shared/ReactSymbols.js","/Users/apple/Documents/myProject/debug-react-source-code/react/packages/shared/getComponentNameFromType.js","/Users/apple/Documents/myProject/debug-react-source-code/react/packages/react-reconciler/src/getComponentNameFromFiber.js","/Users/apple/Documents/myProject/debug-react-source-code/react/packages/shared/forks/ReactFeatureFlags.test-renderer.native.js","/Users/apple/Documents/myProject/debug-react-source-code/react/packages/react-reconciler/src/ReactFiberFlags.js","/Users/apple/Documents/myProject/debug-react-source-code/react/packages/react-reconciler/src/ReactFiberTreeReflection.js","/Users/apple/Documents/myProject/debug-react-source-code/react/packages/shared/isArray.js","/Users/apple/Documents/myProject/debug-react-source-code/react/packages/react-reconciler/src/Scheduler.js","/Users/apple/Documents/myProject/debug-react-source-code/react/packages/react-reconciler/src/ReactFiberDevToolsHook.old.js","/Users/apple/Documents/myProject/debug-react-source-code/react/packages/react-reconciler/src/ReactTypeOfMode.js","/Users/apple/Documents/myProject/debug-react-source-code/react/packages/react-reconciler/src/ReactFiberLane.old.js","/Users/apple/Documents/myProject/debug-react-source-code/react/packages/react-reconciler/src/ReactEventPriorities.old.js","/Users/apple/Documents/myProject/debug-react-source-code/react/packages/react-reconciler/src/ReactFiberHostConfigWithNoHydration.js","/Users/apple/Documents/myProject/debug-react-source-code/react/packages/react-test-renderer/src/ReactTestHostConfig.js","/Users/apple/Documents/myProject/debug-react-source-code/react/packages/shared/ReactComponentStackFrame.js","/Users/apple/Documents/myProject/debug-react-source-code/react/packages/shared/hasOwnProperty.js","/Users/apple/Documents/myProject/debug-react-source-code/react/packages/shared/checkPropTypes.js","/Users/apple/Documents/myProject/debug-react-source-code/react/packages/react-reconciler/src/ReactFiberStack.old.js","/Users/apple/Documents/myProject/debug-react-source-code/react/packages/react-reconciler/src/ReactFiberContext.old.js","/Users/apple/Documents/myProject/debug-react-source-code/react/packages/react-reconciler/src/ReactRootTags.js","/Users/apple/Documents/myProject/debug-react-source-code/react/packages/react-reconciler/src/ReactFiberSyncTaskQueue.old.js","/Users/apple/Documents/myProject/debug-react-source-code/react/packages/shared/ReactVersion.js","/Users/apple/Documents/myProject/debug-react-source-code/react/packages/react-reconciler/src/ReactFiberTransition.js","/Users/apple/Documents/myProject/debug-react-source-code/react/packages/shared/objectIs.js","/Users/apple/Documents/myProject/debug-react-source-code/react/packages/shared/shallowEqual.js","/Users/apple/Documents/myProject/debug-react-source-code/react/packages/react-reconciler/src/ReactFiberComponentStack.js","/Users/apple/Documents/myProject/debug-react-source-code/react/packages/react-reconciler/src/ReactCurrentFiber.js","/Users/apple/Documents/myProject/debug-react-source-code/react/packages/react-reconciler/src/ReactStrictModeWarnings.old.js","/Users/apple/Documents/myProject/debug-react-source-code/react/packages/react-reconciler/src/ReactFiberLazyComponent.old.js","/Users/apple/Documents/myProject/debug-react-source-code/react/packages/react-reconciler/src/ReactFiberNewContext.old.js","/Users/apple/Documents/myProject/debug-react-source-code/react/packages/react-reconciler/src/ReactFiberInterleavedUpdates.old.js","/Users/apple/Documents/myProject/debug-react-source-code/react/packages/react-reconciler/src/ReactUpdateQueue.old.js","/Users/apple/Documents/myProject/debug-react-source-code/react/packages/react-reconciler/src/ReactFiberClassComponent.old.js","/Users/apple/Documents/myProject/debug-react-source-code/react/packages/react-reconciler/src/ReactChildFiber.old.js","/Users/apple/Documents/myProject/debug-react-source-code/react/packages/react-reconciler/src/ReactFiberHostContext.old.js","/Users/apple/Documents/myProject/debug-react-source-code/react/packages/react-reconciler/src/ReactFiberSuspenseContext.old.js","/Users/apple/Documents/myProject/debug-react-source-code/react/packages/react-reconciler/src/ReactFiberSuspenseComponent.old.js","/Users/apple/Documents/myProject/debug-react-source-code/react/packages/react-reconciler/src/ReactHookEffectTags.js","/Users/apple/Documents/myProject/debug-react-source-code/react/packages/react-reconciler/src/ReactFiberHydrationContext.old.js","/Users/apple/Documents/myProject/debug-react-source-code/react/packages/react-reconciler/src/ReactMutableSource.old.js","/Users/apple/Documents/myProject/debug-react-source-code/react/packages/react-reconciler/src/ReactFiberCacheComponent.old.js","/Users/apple/Documents/myProject/debug-react-source-code/react/packages/react-reconciler/src/ReactFiberHooks.old.js","/Users/apple/Documents/myProject/debug-react-source-code/react/packages/react-reconciler/src/ReactProfilerTimer.old.js","/Users/apple/Documents/myProject/debug-react-source-code/react/packages/react-reconciler/src/ReactCapturedValue.js","/Users/apple/Documents/myProject/debug-react-source-code/react/packages/react-reconciler/src/ReactFiberErrorDialog.js","/Users/apple/Documents/myProject/debug-react-source-code/react/packages/react-reconciler/src/ReactFiberErrorLogger.js","/Users/apple/Documents/myProject/debug-react-source-code/react/packages/react-reconciler/src/ReactFiberThrow.old.js","/Users/apple/Documents/myProject/debug-react-source-code/react/packages/react-reconciler/src/ReactFiberCompleteWork.old.js","/Users/apple/Documents/myProject/debug-react-source-code/react/packages/react-reconciler/src/ReactFiberBeginWork.old.js","/Users/apple/Documents/myProject/debug-react-source-code/react/packages/react-reconciler/src/ReactFiberUnwindWork.old.js","/Users/apple/Documents/myProject/debug-react-source-code/react/packages/shared/invokeGuardedCallbackImpl.js","/Users/apple/Documents/myProject/debug-react-source-code/react/packages/shared/ReactErrorUtils.js","/Users/apple/Documents/myProject/debug-react-source-code/react/packages/react-reconciler/src/ReactFiberCommitWork.old.js","/Users/apple/Documents/myProject/debug-react-source-code/react/packages/react-reconciler/src/ReactTestSelectors.js","/Users/apple/Documents/myProject/debug-react-source-code/react/packages/react-reconciler/src/ReactFiberWorkLoop.old.js","/Users/apple/Documents/myProject/debug-react-source-code/react/packages/react-reconciler/src/ReactFiberHotReloading.old.js","/Users/apple/Documents/myProject/debug-react-source-code/react/packages/react-reconciler/src/ReactFiber.old.js","/Users/apple/Documents/myProject/debug-react-source-code/react/packages/react-reconciler/src/ReactFiberRoot.old.js","/Users/apple/Documents/myProject/debug-react-source-code/react/packages/react-reconciler/src/ReactFiberReconciler.old.js","/Users/apple/Documents/myProject/debug-react-source-code/react/packages/react-test-renderer/src/ReactTestRenderer.js"],"sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport * as React from 'react';\n\nconst ReactSharedInternals =\n  React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;\n\nexport default ReactSharedInternals;\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport ReactSharedInternals from 'shared/ReactSharedInternals';\n\nlet suppressWarning = false;\nexport function setSuppressWarning(newSuppressWarning) {\n  if (__DEV__) {\n    suppressWarning = newSuppressWarning;\n  }\n}\n\n// In DEV, calls to console.warn and console.error get replaced\n// by calls to these methods by a Babel plugin.\n//\n// In PROD (or in packages without access to React internals),\n// they are left as they are instead.\n\nexport function warn(format, ...args) {\n  if (__DEV__) {\n    if (!suppressWarning) {\n      printWarning('warn', format, args);\n    }\n  }\n}\n\nexport function error(format, ...args) {\n  if (__DEV__) {\n    if (!suppressWarning) {\n      printWarning('error', format, args);\n    }\n  }\n}\n\nfunction printWarning(level, format, args) {\n  // When changing this logic, you might want to also\n  // update consoleWithStackDev.www.js as well.\n  if (__DEV__) {\n    const ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;\n    const stack = ReactDebugCurrentFrame.getStackAddendum();\n    if (stack !== '') {\n      format += '%s';\n      args = args.concat([stack]);\n    }\n\n    const argsWithFormat = args.map(item => '' + item);\n    // Careful: RN currently depends on this prefix\n    argsWithFormat.unshift('Warning: ' + format);\n    // We intentionally don't use spread (or .apply) directly because it\n    // breaks IE9: https://github.com/facebook/react/issues/13610\n    // eslint-disable-next-line react-internal/no-production-logging\n    Function.prototype.apply.call(console[level], console, argsWithFormat);\n  }\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n/**\n * `ReactInstanceMap` maintains a mapping from a public facing stateful\n * instance (key) and the internal representation (value). This allows public\n * methods to accept the user facing instance as an argument and map them back\n * to internal methods.\n *\n * Note that this module is currently shared and assumed to be stateless.\n * If this becomes an actual Map, that will break.\n */\n\n/**\n * This API should be called `delete` but we'd have to make sure to always\n * transform these to strings for IE support. When this transform is fully\n * supported we can rename it.\n */\nexport function remove(key) {\n  key._reactInternals = undefined;\n}\n\nexport function get(key) {\n  return key._reactInternals;\n}\n\nexport function has(key) {\n  return key._reactInternals !== undefined;\n}\n\nexport function set(key, value) {\n  key._reactInternals = value;\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nexport type WorkTag =\n  | 0\n  | 1\n  | 2\n  | 3\n  | 4\n  | 5\n  | 6\n  | 7\n  | 8\n  | 9\n  | 10\n  | 11\n  | 12\n  | 13\n  | 14\n  | 15\n  | 16\n  | 17\n  | 18\n  | 19\n  | 20\n  | 21\n  | 22\n  | 23\n  | 24;\n\nexport const FunctionComponent = 0;\nexport const ClassComponent = 1;\nexport const IndeterminateComponent = 2; // Before we know whether it is function or class\nexport const HostRoot = 3; // Root of a host tree. Could be nested inside another node.\nexport const HostPortal = 4; // A subtree. Could be an entry point to a different renderer.\nexport const HostComponent = 5;\nexport const HostText = 6;\nexport const Fragment = 7;\nexport const Mode = 8;\nexport const ContextConsumer = 9;\nexport const ContextProvider = 10;\nexport const ForwardRef = 11;\nexport const Profiler = 12;\nexport const SuspenseComponent = 13;\nexport const MemoComponent = 14;\nexport const SimpleMemoComponent = 15;\nexport const LazyComponent = 16;\nexport const IncompleteClassComponent = 17;\nexport const DehydratedFragment = 18;\nexport const SuspenseListComponent = 19;\nexport const ScopeComponent = 21;\nexport const OffscreenComponent = 22;\nexport const LegacyHiddenComponent = 23;\nexport const CacheComponent = 24;\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\n// ATTENTION\n// When adding new symbols to this file,\n// Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'\n\n// The Symbol used to tag the ReactElement-like types. If there is no native Symbol\n// nor polyfill, then a plain number is used for performance.\nexport let REACT_ELEMENT_TYPE = 0xeac7;\nexport let REACT_PORTAL_TYPE = 0xeaca;\nexport let REACT_FRAGMENT_TYPE = 0xeacb;\nexport let REACT_STRICT_MODE_TYPE = 0xeacc;\nexport let REACT_PROFILER_TYPE = 0xead2;\nexport let REACT_PROVIDER_TYPE = 0xeacd;\nexport let REACT_CONTEXT_TYPE = 0xeace;\nexport let REACT_FORWARD_REF_TYPE = 0xead0;\nexport let REACT_SUSPENSE_TYPE = 0xead1;\nexport let REACT_SUSPENSE_LIST_TYPE = 0xead8;\nexport let REACT_MEMO_TYPE = 0xead3;\nexport let REACT_LAZY_TYPE = 0xead4;\nexport let REACT_SCOPE_TYPE = 0xead7;\nexport let REACT_OPAQUE_ID_TYPE = 0xeae0;\nexport let REACT_DEBUG_TRACING_MODE_TYPE = 0xeae1;\nexport let REACT_OFFSCREEN_TYPE = 0xeae2;\nexport let REACT_LEGACY_HIDDEN_TYPE = 0xeae3;\nexport let REACT_CACHE_TYPE = 0xeae4;\n\nif (typeof Symbol === 'function' && Symbol.for) {\n  const symbolFor = Symbol.for;\n  REACT_ELEMENT_TYPE = symbolFor('react.element');\n  REACT_PORTAL_TYPE = symbolFor('react.portal');\n  REACT_FRAGMENT_TYPE = symbolFor('react.fragment');\n  REACT_STRICT_MODE_TYPE = symbolFor('react.strict_mode');\n  REACT_PROFILER_TYPE = symbolFor('react.profiler');\n  REACT_PROVIDER_TYPE = symbolFor('react.provider');\n  REACT_CONTEXT_TYPE = symbolFor('react.context');\n  REACT_FORWARD_REF_TYPE = symbolFor('react.forward_ref');\n  REACT_SUSPENSE_TYPE = symbolFor('react.suspense');\n  REACT_SUSPENSE_LIST_TYPE = symbolFor('react.suspense_list');\n  REACT_MEMO_TYPE = symbolFor('react.memo');\n  REACT_LAZY_TYPE = symbolFor('react.lazy');\n  REACT_SCOPE_TYPE = symbolFor('react.scope');\n  REACT_OPAQUE_ID_TYPE = symbolFor('react.opaque.id');\n  REACT_DEBUG_TRACING_MODE_TYPE = symbolFor('react.debug_trace_mode');\n  REACT_OFFSCREEN_TYPE = symbolFor('react.offscreen');\n  REACT_LEGACY_HIDDEN_TYPE = symbolFor('react.legacy_hidden');\n  REACT_CACHE_TYPE = symbolFor('react.cache');\n}\n\nconst MAYBE_ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;\nconst FAUX_ITERATOR_SYMBOL = '@@iterator';\n\nexport function getIteratorFn(maybeIterable: ?any): ?() => ?Iterator<*> {\n  if (maybeIterable === null || typeof maybeIterable !== 'object') {\n    return null;\n  }\n  const maybeIterator =\n    (MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL]) ||\n    maybeIterable[FAUX_ITERATOR_SYMBOL];\n  if (typeof maybeIterator === 'function') {\n    return maybeIterator;\n  }\n  return null;\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {LazyComponent} from 'react/src/ReactLazy';\nimport type {ReactContext, ReactProviderType} from 'shared/ReactTypes';\n\nimport {\n  REACT_CONTEXT_TYPE,\n  REACT_FORWARD_REF_TYPE,\n  REACT_FRAGMENT_TYPE,\n  REACT_PORTAL_TYPE,\n  REACT_MEMO_TYPE,\n  REACT_PROFILER_TYPE,\n  REACT_PROVIDER_TYPE,\n  REACT_STRICT_MODE_TYPE,\n  REACT_SUSPENSE_TYPE,\n  REACT_SUSPENSE_LIST_TYPE,\n  REACT_LAZY_TYPE,\n  REACT_CACHE_TYPE,\n} from 'shared/ReactSymbols';\n\n// Keep in sync with react-reconciler/getComponentNameFromFiber\nfunction getWrappedName(\n  outerType: mixed,\n  innerType: any,\n  wrapperName: string,\n): string {\n  const displayName = (outerType: any).displayName;\n  if (displayName) {\n    return displayName;\n  }\n  const functionName = innerType.displayName || innerType.name || '';\n  return functionName !== '' ? `${wrapperName}(${functionName})` : wrapperName;\n}\n\n// Keep in sync with react-reconciler/getComponentNameFromFiber\nfunction getContextName(type: ReactContext<any>) {\n  return type.displayName || 'Context';\n}\n\n// Note that the reconciler package should generally prefer to use getComponentNameFromFiber() instead.\nexport default function getComponentNameFromType(type: mixed): string | null {\n  if (type == null) {\n    // Host root, text node or just invalid type.\n    return null;\n  }\n  if (__DEV__) {\n    if (typeof (type: any).tag === 'number') {\n      console.error(\n        'Received an unexpected object in getComponentNameFromType(). ' +\n          'This is likely a bug in React. Please file an issue.',\n      );\n    }\n  }\n  if (typeof type === 'function') {\n    return (type: any).displayName || type.name || null;\n  }\n  if (typeof type === 'string') {\n    return type;\n  }\n  switch (type) {\n    case REACT_FRAGMENT_TYPE:\n      return 'Fragment';\n    case REACT_PORTAL_TYPE:\n      return 'Portal';\n    case REACT_PROFILER_TYPE:\n      return 'Profiler';\n    case REACT_STRICT_MODE_TYPE:\n      return 'StrictMode';\n    case REACT_SUSPENSE_TYPE:\n      return 'Suspense';\n    case REACT_SUSPENSE_LIST_TYPE:\n      return 'SuspenseList';\n    case REACT_CACHE_TYPE:\n      return 'Cache';\n  }\n  if (typeof type === 'object') {\n    switch (type.$$typeof) {\n      case REACT_CONTEXT_TYPE:\n        const context: ReactContext<any> = (type: any);\n        return getContextName(context) + '.Consumer';\n      case REACT_PROVIDER_TYPE:\n        const provider: ReactProviderType<any> = (type: any);\n        return getContextName(provider._context) + '.Provider';\n      case REACT_FORWARD_REF_TYPE:\n        return getWrappedName(type, type.render, 'ForwardRef');\n      case REACT_MEMO_TYPE:\n        const outerName = (type: any).displayName || null;\n        if (outerName !== null) {\n          return outerName;\n        }\n        return getComponentNameFromType(type.type) || 'Memo';\n      case REACT_LAZY_TYPE: {\n        const lazyComponent: LazyComponent<any, any> = (type: any);\n        const payload = lazyComponent._payload;\n        const init = lazyComponent._init;\n        try {\n          return getComponentNameFromType(init(payload));\n        } catch (x) {\n          return null;\n        }\n      }\n    }\n  }\n  return null;\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {ReactContext, ReactProviderType} from 'shared/ReactTypes';\n\nimport {\n  FunctionComponent,\n  ClassComponent,\n  IndeterminateComponent,\n  HostRoot,\n  HostPortal,\n  HostComponent,\n  HostText,\n  Fragment,\n  Mode,\n  ContextConsumer,\n  ContextProvider,\n  ForwardRef,\n  Profiler,\n  SuspenseComponent,\n  MemoComponent,\n  SimpleMemoComponent,\n  LazyComponent,\n  IncompleteClassComponent,\n  DehydratedFragment,\n  SuspenseListComponent,\n  ScopeComponent,\n  OffscreenComponent,\n  LegacyHiddenComponent,\n  CacheComponent,\n} from 'react-reconciler/src/ReactWorkTags';\nimport getComponentNameFromType from 'shared/getComponentNameFromType';\nimport {REACT_STRICT_MODE_TYPE} from 'shared/ReactSymbols';\n\n// Keep in sync with shared/getComponentNameFromType\nfunction getWrappedName(\n  outerType: mixed,\n  innerType: any,\n  wrapperName: string,\n): string {\n  const functionName = innerType.displayName || innerType.name || '';\n  return (\n    (outerType: any).displayName ||\n    (functionName !== '' ? `${wrapperName}(${functionName})` : wrapperName)\n  );\n}\n\n// Keep in sync with shared/getComponentNameFromType\nfunction getContextName(type: ReactContext<any>) {\n  return type.displayName || 'Context';\n}\n\nexport default function getComponentNameFromFiber(fiber: Fiber): string | null {\n  const {tag, type} = fiber;\n  switch (tag) {\n    case CacheComponent:\n      return 'Cache';\n    case ContextConsumer:\n      const context: ReactContext<any> = (type: any);\n      return getContextName(context) + '.Consumer';\n    case ContextProvider:\n      const provider: ReactProviderType<any> = (type: any);\n      return getContextName(provider._context) + '.Provider';\n    case DehydratedFragment:\n      return 'DehydratedFragment';\n    case ForwardRef:\n      return getWrappedName(type, type.render, 'ForwardRef');\n    case Fragment:\n      return 'Fragment';\n    case HostComponent:\n      // Host component type is the display name (e.g. \"div\", \"View\")\n      return type;\n    case HostPortal:\n      return 'Portal';\n    case HostRoot:\n      return 'Root';\n    case HostText:\n      return 'Text';\n    case LazyComponent:\n      // Name comes from the type in this case; we don't have a tag.\n      return getComponentNameFromType(type);\n    case LegacyHiddenComponent:\n      return 'LegacyHidden';\n    case Mode:\n      if (type === REACT_STRICT_MODE_TYPE) {\n        // Don't be less specific than shared/getComponentNameFromType\n        return 'StrictMode';\n      }\n      return 'Mode';\n    case OffscreenComponent:\n      return 'Offscreen';\n    case Profiler:\n      return 'Profiler';\n    case ScopeComponent:\n      return 'Scope';\n    case SuspenseComponent:\n      return 'Suspense';\n    case SuspenseListComponent:\n      return 'SuspenseList';\n\n    // The display name for this tags come from the user-provided type:\n    case ClassComponent:\n    case FunctionComponent:\n    case IncompleteClassComponent:\n    case IndeterminateComponent:\n    case MemoComponent:\n    case SimpleMemoComponent:\n      if (typeof type === 'function') {\n        return (type: any).displayName || type.name || null;\n      }\n      if (typeof type === 'string') {\n        return type;\n      }\n      break;\n  }\n\n  return null;\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport typeof * as FeatureFlagsType from 'shared/ReactFeatureFlags';\nimport typeof * as ExportsType from './ReactFeatureFlags.test-renderer';\n\nexport const debugRenderPhaseSideEffectsForStrictMode = false;\nexport const enableDebugTracing = false;\nexport const enableSchedulingProfiler = false;\nexport const warnAboutDeprecatedLifecycles = true;\nexport const replayFailedUnitOfWorkWithInvokeGuardedCallback = false;\nexport const enableProfilerTimer = __PROFILE__;\nexport const enableProfilerCommitHooks = __PROFILE__;\nexport const enableProfilerNestedUpdatePhase = __PROFILE__;\nexport const enableProfilerNestedUpdateScheduledHook = false;\nexport const enableUpdaterTracking = false;\nexport const enableSuspenseServerRenderer = false;\nexport const enableSelectiveHydration = false;\nexport const enableLazyElements = false;\nexport const enableCache = false;\nexport const disableJavaScriptURLs = false;\nexport const disableInputAttributeSyncing = false;\nexport const enableSchedulerDebugging = false;\nexport const enableScopeAPI = false;\nexport const enableCreateEventHandleAPI = false;\nexport const enableSuspenseCallback = false;\nexport const warnAboutDefaultPropsOnFunctionComponents = false;\nexport const warnAboutStringRefs = false;\nexport const disableLegacyContext = false;\nexport const disableSchedulerTimeoutBasedOnReactExpirationTime = false;\nexport const enableTrustedTypesIntegration = false;\nexport const disableTextareaChildren = false;\nexport const disableModulePatternComponents = false;\nexport const warnUnstableRenderSubtreeIntoContainer = false;\nexport const warnAboutSpreadingKeyToJSX = false;\nexport const enableComponentStackLocations = false;\nexport const enableLegacyFBSupport = false;\nexport const enableFilterEmptyStringAttributesDOM = false;\nexport const disableNativeComponentFrames = false;\nexport const skipUnmountedBoundaries = false;\nexport const deletedTreeCleanUpLevel = 3;\nexport const enableSuspenseLayoutEffectSemantics = false;\nexport const enableGetInspectorDataForInstanceInProduction = false;\nexport const enableNewReconciler = false;\nexport const deferRenderPhaseUpdateToNextBatch = false;\nexport const warnOnSubscriptionInsideStartTransition = false;\nexport const enableStrictEffects = false;\nexport const createRootStrictEffectsByDefault = false;\nexport const enableUseRefAccessWarning = false;\n\nexport const enableRecursiveCommitTraversal = false;\nexport const disableSchedulerTimeoutInWorkLoop = false;\nexport const enableLazyContextPropagation = false;\nexport const enableSyncDefaultUpdates = true;\nexport const allowConcurrentByDefault = true;\nexport const enablePersistentOffscreenHostContainer = false;\n\nexport const consoleManagedByDevToolsDuringStrictMode = false;\n\n// Flow magic to verify the exports of this file match the original version.\n// eslint-disable-next-line no-unused-vars\ntype Check<_X, Y: _X, X: Y = _X> = null;\n// eslint-disable-next-line no-unused-expressions\n(null: Check<ExportsType, FeatureFlagsType>);\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport {enableCreateEventHandleAPI} from 'shared/ReactFeatureFlags';\n\nexport type Flags = number;\n\n// Don't change these two values. They're used by React Dev Tools.\nexport const NoFlags = /*                      */ 0b00000000000000000000000;\nexport const PerformedWork = /*                */ 0b00000000000000000000001;\n\n// You can change the rest (and add more).\nexport const Placement = /*                    */ 0b00000000000000000000010;\nexport const Update = /*                       */ 0b00000000000000000000100;\nexport const PlacementAndUpdate = /*           */ Placement | Update;\nexport const Deletion = /*                     */ 0b00000000000000000001000;\nexport const ChildDeletion = /*                */ 0b00000000000000000010000;\nexport const ContentReset = /*                 */ 0b00000000000000000100000;\nexport const Callback = /*                     */ 0b00000000000000001000000;\nexport const DidCapture = /*                   */ 0b00000000000000010000000;\nexport const Ref = /*                          */ 0b00000000000000100000000;\nexport const Snapshot = /*                     */ 0b00000000000001000000000;\nexport const Passive = /*                      */ 0b00000000000010000000000;\nexport const Hydrating = /*                    */ 0b00000000000100000000000;\nexport const HydratingAndUpdate = /*           */ Hydrating | Update;\nexport const Visibility = /*                   */ 0b00000000001000000000000;\n\nexport const LifecycleEffectMask = Passive | Update | Callback | Ref | Snapshot;\n\n// Union of all commit flags (flags with the lifetime of a particular commit)\nexport const HostEffectMask = /*               */ 0b00000000001111111111111;\n\n// These are not really side effects, but we still reuse this field.\nexport const Incomplete = /*                   */ 0b00000000010000000000000;\nexport const ShouldCapture = /*                */ 0b00000000100000000000000;\nexport const ForceUpdateForLegacySuspense = /* */ 0b00000001000000000000000;\nexport const DidPropagateContext = /*          */ 0b00000010000000000000000;\nexport const NeedsPropagation = /*             */ 0b00000100000000000000000;\n\n// Static tags describe aspects of a fiber that are not specific to a render,\n// e.g. a fiber uses a passive effect (even if there are no updates on this particular render).\n// This enables us to defer more work in the unmount case,\n// since we can defer traversing the tree during layout to look for Passive effects,\n// and instead rely on the static flag as a signal that there may be cleanup work.\nexport const RefStatic = /*                    */ 0b00001000000000000000000;\nexport const LayoutStatic = /*                 */ 0b00010000000000000000000;\nexport const PassiveStatic = /*                */ 0b00100000000000000000000;\n\n// These flags allow us to traverse to fibers that have effects on mount\n// without traversing the entire tree after every commit for\n// double invoking\nexport const MountLayoutDev = /*               */ 0b01000000000000000000000;\nexport const MountPassiveDev = /*              */ 0b10000000000000000000000;\n\n// Groups of flags that are used in the commit phase to skip over trees that\n// don't contain effects, by checking subtreeFlags.\n\nexport const BeforeMutationMask =\n  // TODO: Remove Update flag from before mutation phase by re-landing Visibility\n  // flag logic (see #20043)\n  Update |\n  Snapshot |\n  (enableCreateEventHandleAPI\n    ? // createEventHandle needs to visit deleted and hidden trees to\n      // fire beforeblur\n      // TODO: Only need to visit Deletions during BeforeMutation phase if an\n      // element is focused.\n      ChildDeletion | Visibility\n    : 0);\n\nexport const MutationMask =\n  Placement |\n  Update |\n  ChildDeletion |\n  ContentReset |\n  Ref |\n  Hydrating |\n  Visibility;\nexport const LayoutMask = Update | Callback | Ref | Visibility;\n\n// TODO: Split into PassiveMountMask and PassiveUnmountMask\nexport const PassiveMask = Passive | ChildDeletion;\n\n// Union of tags that don't get reset on clones.\n// This allows certain concepts to persist without recalculating them,\n// e.g. whether a subtree contains passive effects or portals.\nexport const StaticMask = LayoutStatic | PassiveStatic | RefStatic;\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Fiber} from './ReactInternalTypes';\nimport type {Container, SuspenseInstance} from './ReactFiberHostConfig';\nimport type {SuspenseState} from './ReactFiberSuspenseComponent.old';\n\nimport invariant from 'shared/invariant';\n\nimport {get as getInstance} from 'shared/ReactInstanceMap';\nimport ReactSharedInternals from 'shared/ReactSharedInternals';\nimport getComponentNameFromFiber from 'react-reconciler/src/getComponentNameFromFiber';\nimport {\n  ClassComponent,\n  HostComponent,\n  HostRoot,\n  HostPortal,\n  HostText,\n  SuspenseComponent,\n} from './ReactWorkTags';\nimport {NoFlags, Placement, Hydrating} from './ReactFiberFlags';\n\nconst ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;\n\nexport function getNearestMountedFiber(fiber: Fiber): null | Fiber {\n  let node = fiber;\n  let nearestMounted = fiber;\n  if (!fiber.alternate) {\n    // If there is no alternate, this might be a new tree that isn't inserted\n    // yet. If it is, then it will have a pending insertion effect on it.\n    let nextNode = node;\n    do {\n      node = nextNode;\n      if ((node.flags & (Placement | Hydrating)) !== NoFlags) {\n        // This is an insertion or in-progress hydration. The nearest possible\n        // mounted fiber is the parent but we need to continue to figure out\n        // if that one is still mounted.\n        nearestMounted = node.return;\n      }\n      nextNode = node.return;\n    } while (nextNode);\n  } else {\n    while (node.return) {\n      node = node.return;\n    }\n  }\n  if (node.tag === HostRoot) {\n    // TODO: Check if this was a nested HostRoot when used with\n    // renderContainerIntoSubtree.\n    return nearestMounted;\n  }\n  // If we didn't hit the root, that means that we're in an disconnected tree\n  // that has been unmounted.\n  return null;\n}\n\nexport function getSuspenseInstanceFromFiber(\n  fiber: Fiber,\n): null | SuspenseInstance {\n  if (fiber.tag === SuspenseComponent) {\n    let suspenseState: SuspenseState | null = fiber.memoizedState;\n    if (suspenseState === null) {\n      const current = fiber.alternate;\n      if (current !== null) {\n        suspenseState = current.memoizedState;\n      }\n    }\n    if (suspenseState !== null) {\n      return suspenseState.dehydrated;\n    }\n  }\n  return null;\n}\n\nexport function getContainerFromFiber(fiber: Fiber): null | Container {\n  return fiber.tag === HostRoot\n    ? (fiber.stateNode.containerInfo: Container)\n    : null;\n}\n\nexport function isFiberMounted(fiber: Fiber): boolean {\n  return getNearestMountedFiber(fiber) === fiber;\n}\n\nexport function isMounted(component: React$Component<any, any>): boolean {\n  if (__DEV__) {\n    const owner = (ReactCurrentOwner.current: any);\n    if (owner !== null && owner.tag === ClassComponent) {\n      const ownerFiber: Fiber = owner;\n      const instance = ownerFiber.stateNode;\n      if (!instance._warnedAboutRefsInRender) {\n        console.error(\n          '%s is accessing isMounted inside its render() function. ' +\n            'render() should be a pure function of props and state. It should ' +\n            'never access something that requires stale data from the previous ' +\n            'render, such as refs. Move this logic to componentDidMount and ' +\n            'componentDidUpdate instead.',\n          getComponentNameFromFiber(ownerFiber) || 'A component',\n        );\n      }\n      instance._warnedAboutRefsInRender = true;\n    }\n  }\n\n  const fiber: ?Fiber = getInstance(component);\n  if (!fiber) {\n    return false;\n  }\n  return getNearestMountedFiber(fiber) === fiber;\n}\n\nfunction assertIsMounted(fiber) {\n  invariant(\n    getNearestMountedFiber(fiber) === fiber,\n    'Unable to find node on an unmounted component.',\n  );\n}\n\nexport function findCurrentFiberUsingSlowPath(fiber: Fiber): Fiber | null {\n  const alternate = fiber.alternate;\n  if (!alternate) {\n    // If there is no alternate, then we only need to check if it is mounted.\n    const nearestMounted = getNearestMountedFiber(fiber);\n    invariant(\n      nearestMounted !== null,\n      'Unable to find node on an unmounted component.',\n    );\n    if (nearestMounted !== fiber) {\n      return null;\n    }\n    return fiber;\n  }\n  // If we have two possible branches, we'll walk backwards up to the root\n  // to see what path the root points to. On the way we may hit one of the\n  // special cases and we'll deal with them.\n  let a: Fiber = fiber;\n  let b: Fiber = alternate;\n  while (true) {\n    const parentA = a.return;\n    if (parentA === null) {\n      // We're at the root.\n      break;\n    }\n    const parentB = parentA.alternate;\n    if (parentB === null) {\n      // There is no alternate. This is an unusual case. Currently, it only\n      // happens when a Suspense component is hidden. An extra fragment fiber\n      // is inserted in between the Suspense fiber and its children. Skip\n      // over this extra fragment fiber and proceed to the next parent.\n      const nextParent = parentA.return;\n      if (nextParent !== null) {\n        a = b = nextParent;\n        continue;\n      }\n      // If there's no parent, we're at the root.\n      break;\n    }\n\n    // If both copies of the parent fiber point to the same child, we can\n    // assume that the child is current. This happens when we bailout on low\n    // priority: the bailed out fiber's child reuses the current child.\n    if (parentA.child === parentB.child) {\n      let child = parentA.child;\n      while (child) {\n        if (child === a) {\n          // We've determined that A is the current branch.\n          assertIsMounted(parentA);\n          return fiber;\n        }\n        if (child === b) {\n          // We've determined that B is the current branch.\n          assertIsMounted(parentA);\n          return alternate;\n        }\n        child = child.sibling;\n      }\n      // We should never have an alternate for any mounting node. So the only\n      // way this could possibly happen is if this was unmounted, if at all.\n      invariant(false, 'Unable to find node on an unmounted component.');\n    }\n\n    if (a.return !== b.return) {\n      // The return pointer of A and the return pointer of B point to different\n      // fibers. We assume that return pointers never criss-cross, so A must\n      // belong to the child set of A.return, and B must belong to the child\n      // set of B.return.\n      a = parentA;\n      b = parentB;\n    } else {\n      // The return pointers point to the same fiber. We'll have to use the\n      // default, slow path: scan the child sets of each parent alternate to see\n      // which child belongs to which set.\n      //\n      // Search parent A's child set\n      let didFindChild = false;\n      let child = parentA.child;\n      while (child) {\n        if (child === a) {\n          didFindChild = true;\n          a = parentA;\n          b = parentB;\n          break;\n        }\n        if (child === b) {\n          didFindChild = true;\n          b = parentA;\n          a = parentB;\n          break;\n        }\n        child = child.sibling;\n      }\n      if (!didFindChild) {\n        // Search parent B's child set\n        child = parentB.child;\n        while (child) {\n          if (child === a) {\n            didFindChild = true;\n            a = parentB;\n            b = parentA;\n            break;\n          }\n          if (child === b) {\n            didFindChild = true;\n            b = parentB;\n            a = parentA;\n            break;\n          }\n          child = child.sibling;\n        }\n        invariant(\n          didFindChild,\n          'Child was not found in either parent set. This indicates a bug ' +\n            'in React related to the return pointer. Please file an issue.',\n        );\n      }\n    }\n\n    invariant(\n      a.alternate === b,\n      \"Return fibers should always be each others' alternates. \" +\n        'This error is likely caused by a bug in React. Please file an issue.',\n    );\n  }\n  // If the root is not a host container, we're in a disconnected tree. I.e.\n  // unmounted.\n  invariant(\n    a.tag === HostRoot,\n    'Unable to find node on an unmounted component.',\n  );\n  if (a.stateNode.current === a) {\n    // We've determined that A is the current branch.\n    return fiber;\n  }\n  // Otherwise B has to be current branch.\n  return alternate;\n}\n\nexport function findCurrentHostFiber(parent: Fiber): Fiber | null {\n  const currentParent = findCurrentFiberUsingSlowPath(parent);\n  return currentParent !== null\n    ? findCurrentHostFiberImpl(currentParent)\n    : null;\n}\n\nfunction findCurrentHostFiberImpl(node: Fiber) {\n  // Next we'll drill down this component to find the first HostComponent/Text.\n  if (node.tag === HostComponent || node.tag === HostText) {\n    return node;\n  }\n\n  let child = node.child;\n  while (child !== null) {\n    const match = findCurrentHostFiberImpl(child);\n    if (match !== null) {\n      return match;\n    }\n    child = child.sibling;\n  }\n\n  return null;\n}\n\nexport function findCurrentHostFiberWithNoPortals(parent: Fiber): Fiber | null {\n  const currentParent = findCurrentFiberUsingSlowPath(parent);\n  return currentParent !== null\n    ? findCurrentHostFiberWithNoPortalsImpl(currentParent)\n    : null;\n}\n\nfunction findCurrentHostFiberWithNoPortalsImpl(node: Fiber) {\n  // Next we'll drill down this component to find the first HostComponent/Text.\n  if (node.tag === HostComponent || node.tag === HostText) {\n    return node;\n  }\n\n  let child = node.child;\n  while (child !== null) {\n    if (child.tag !== HostPortal) {\n      const match = findCurrentHostFiberWithNoPortalsImpl(child);\n      if (match !== null) {\n        return match;\n      }\n    }\n    child = child.sibling;\n  }\n\n  return null;\n}\n\nexport function isFiberSuspenseAndTimedOut(fiber: Fiber): boolean {\n  const memoizedState = fiber.memoizedState;\n  return (\n    fiber.tag === SuspenseComponent &&\n    memoizedState !== null &&\n    memoizedState.dehydrated === null\n  );\n}\n\nexport function doesFiberContain(\n  parentFiber: Fiber,\n  childFiber: Fiber,\n): boolean {\n  let node = childFiber;\n  const parentFiberAlternate = parentFiber.alternate;\n  while (node !== null) {\n    if (node === parentFiber || node === parentFiberAlternate) {\n      return true;\n    }\n    node = node.return;\n  }\n  return false;\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\ndeclare function isArray(a: mixed): boolean %checks(Array.isArray(a));\n\nconst isArrayImpl = Array.isArray;\n\n// eslint-disable-next-line no-redeclare\nfunction isArray(a: mixed): boolean {\n  return isArrayImpl(a);\n}\n\nexport default isArray;\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\n// This module only exists as an ESM wrapper around the external CommonJS\n// Scheduler dependency. Notice that we're intentionally not using named imports\n// because Rollup would use dynamic dispatch for CommonJS interop named imports.\n// When we switch to ESM, we can delete this module.\nimport * as Scheduler from 'scheduler';\n\nexport const scheduleCallback = Scheduler.unstable_scheduleCallback;\nexport const cancelCallback = Scheduler.unstable_cancelCallback;\nexport const shouldYield = Scheduler.unstable_shouldYield;\nexport const requestPaint = Scheduler.unstable_requestPaint;\nexport const now = Scheduler.unstable_now;\nexport const getCurrentPriorityLevel =\n  Scheduler.unstable_getCurrentPriorityLevel;\nexport const ImmediatePriority = Scheduler.unstable_ImmediatePriority;\nexport const UserBlockingPriority = Scheduler.unstable_UserBlockingPriority;\nexport const NormalPriority = Scheduler.unstable_NormalPriority;\nexport const LowPriority = Scheduler.unstable_LowPriority;\nexport const IdlePriority = Scheduler.unstable_IdlePriority;\nexport type SchedulerCallback = (isSync: boolean) => SchedulerCallback | null;\n\n// this doesn't actually exist on the scheduler, but it *does*\n// on scheduler/unstable_mock, which we'll need for internal testing\nexport const unstable_yieldValue = Scheduler.unstable_yieldValue;\nexport const unstable_setDisableYieldValue =\n  Scheduler.unstable_setDisableYieldValue;\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport {enableProfilerTimer} from 'shared/ReactFeatureFlags';\n\nimport type {Fiber, FiberRoot} from './ReactInternalTypes';\nimport type {ReactNodeList} from 'shared/ReactTypes';\nimport type {EventPriority} from './ReactEventPriorities.old';\n\nimport {DidCapture} from './ReactFiberFlags';\nimport {\n  DiscreteEventPriority,\n  ContinuousEventPriority,\n  DefaultEventPriority,\n  IdleEventPriority,\n} from './ReactEventPriorities.old';\nimport {\n  ImmediatePriority as ImmediateSchedulerPriority,\n  UserBlockingPriority as UserBlockingSchedulerPriority,\n  NormalPriority as NormalSchedulerPriority,\n  IdlePriority as IdleSchedulerPriority,\n} from './Scheduler';\n\ndeclare var __REACT_DEVTOOLS_GLOBAL_HOOK__: Object | void;\n\nlet rendererID = null;\nlet injectedHook = null;\nlet hasLoggedError = false;\n\nexport const isDevToolsPresent =\n  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined';\n\nexport function injectInternals(internals: Object): boolean {\n  if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined') {\n    // No DevTools\n    return false;\n  }\n  const hook = __REACT_DEVTOOLS_GLOBAL_HOOK__;\n  if (hook.isDisabled) {\n    // This isn't a real property on the hook, but it can be set to opt out\n    // of DevTools integration and associated warnings and logs.\n    // https://github.com/facebook/react/issues/3877\n    return true;\n  }\n  if (!hook.supportsFiber) {\n    if (__DEV__) {\n      console.error(\n        'The installed version of React DevTools is too old and will not work ' +\n          'with the current version of React. Please update React DevTools. ' +\n          'https://reactjs.org/link/react-devtools',\n      );\n    }\n    // DevTools exists, even though it doesn't support Fiber.\n    return true;\n  }\n  try {\n    rendererID = hook.inject(internals);\n    // We have successfully injected, so now it is safe to set up hooks.\n    injectedHook = hook;\n  } catch (err) {\n    // Catch all errors because it is unsafe to throw during initialization.\n    if (__DEV__) {\n      console.error('React instrumentation encountered an error: %s.', err);\n    }\n  }\n  if (hook.checkDCE) {\n    // This is the real DevTools.\n    return true;\n  } else {\n    // This is likely a hook installed by Fast Refresh runtime.\n    return false;\n  }\n}\n\nexport function onScheduleRoot(root: FiberRoot, children: ReactNodeList) {\n  if (__DEV__) {\n    if (\n      injectedHook &&\n      typeof injectedHook.onScheduleFiberRoot === 'function'\n    ) {\n      try {\n        injectedHook.onScheduleFiberRoot(rendererID, root, children);\n      } catch (err) {\n        if (__DEV__ && !hasLoggedError) {\n          hasLoggedError = true;\n          console.error('React instrumentation encountered an error: %s', err);\n        }\n      }\n    }\n  }\n}\n\nexport function onCommitRoot(root: FiberRoot, eventPriority: EventPriority) {\n  if (injectedHook && typeof injectedHook.onCommitFiberRoot === 'function') {\n    try {\n      const didError = (root.current.flags & DidCapture) === DidCapture;\n      if (enableProfilerTimer) {\n        let schedulerPriority;\n        switch (eventPriority) {\n          case DiscreteEventPriority:\n            schedulerPriority = ImmediateSchedulerPriority;\n            break;\n          case ContinuousEventPriority:\n            schedulerPriority = UserBlockingSchedulerPriority;\n            break;\n          case DefaultEventPriority:\n            schedulerPriority = NormalSchedulerPriority;\n            break;\n          case IdleEventPriority:\n            schedulerPriority = IdleSchedulerPriority;\n            break;\n          default:\n            schedulerPriority = NormalSchedulerPriority;\n            break;\n        }\n        injectedHook.onCommitFiberRoot(\n          rendererID,\n          root,\n          schedulerPriority,\n          didError,\n        );\n      } else {\n        injectedHook.onCommitFiberRoot(rendererID, root, undefined, didError);\n      }\n    } catch (err) {\n      if (__DEV__) {\n        if (!hasLoggedError) {\n          hasLoggedError = true;\n          console.error('React instrumentation encountered an error: %s', err);\n        }\n      }\n    }\n  }\n}\n\nexport function onPostCommitRoot(root: FiberRoot) {\n  if (\n    injectedHook &&\n    typeof injectedHook.onPostCommitFiberRoot === 'function'\n  ) {\n    try {\n      injectedHook.onPostCommitFiberRoot(rendererID, root);\n    } catch (err) {\n      if (__DEV__) {\n        if (!hasLoggedError) {\n          hasLoggedError = true;\n          console.error('React instrumentation encountered an error: %s', err);\n        }\n      }\n    }\n  }\n}\n\nexport function onCommitUnmount(fiber: Fiber) {\n  if (injectedHook && typeof injectedHook.onCommitFiberUnmount === 'function') {\n    try {\n      injectedHook.onCommitFiberUnmount(rendererID, fiber);\n    } catch (err) {\n      if (__DEV__) {\n        if (!hasLoggedError) {\n          hasLoggedError = true;\n          console.error('React instrumentation encountered an error: %s', err);\n        }\n      }\n    }\n  }\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nexport type TypeOfMode = number;\n\nexport const NoMode = /*                         */ 0b000000;\n// TODO: Remove ConcurrentMode by reading from the root tag instead\nexport const ConcurrentMode = /*                 */ 0b000001;\nexport const ProfileMode = /*                    */ 0b000010;\nexport const DebugTracingMode = /*               */ 0b000100;\nexport const StrictLegacyMode = /*               */ 0b001000;\nexport const StrictEffectsMode = /*              */ 0b010000;\nexport const ConcurrentUpdatesByDefaultMode = /* */ 0b100000;\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {FiberRoot} from './ReactInternalTypes';\n\n// TODO: Ideally these types would be opaque but that doesn't work well with\n// our reconciler fork infra, since these leak into non-reconciler packages.\n\nexport type Lanes = number;\nexport type Lane = number;\nexport type LaneMap<T> = Array<T>;\n\nimport {\n  enableCache,\n  enableSchedulingProfiler,\n  enableUpdaterTracking,\n  allowConcurrentByDefault,\n} from 'shared/ReactFeatureFlags';\nimport {isDevToolsPresent} from './ReactFiberDevToolsHook.old';\nimport {ConcurrentUpdatesByDefaultMode, NoMode} from './ReactTypeOfMode';\n\n// Lane values below should be kept in sync with getLabelForLane(), used by react-devtools-scheduling-profiler.\n// If those values are changed that package should be rebuilt and redeployed.\n\nexport const TotalLanes = 31;\n\nexport const NoLanes: Lanes = /*                        */ 0b0000000000000000000000000000000;\nexport const NoLane: Lane = /*                          */ 0b0000000000000000000000000000000;\n\nexport const SyncLane: Lane = /*                        */ 0b0000000000000000000000000000001;\n\nexport const InputContinuousHydrationLane: Lane = /*    */ 0b0000000000000000000000000000010;\nexport const InputContinuousLane: Lanes = /*            */ 0b0000000000000000000000000000100;\n\nexport const DefaultHydrationLane: Lane = /*            */ 0b0000000000000000000000000001000;\nexport const DefaultLane: Lanes = /*                    */ 0b0000000000000000000000000010000;\n\nconst TransitionHydrationLane: Lane = /*                */ 0b0000000000000000000000000100000;\nconst TransitionLanes: Lanes = /*                       */ 0b0000000001111111111111111000000;\nconst TransitionLane1: Lane = /*                        */ 0b0000000000000000000000001000000;\nconst TransitionLane2: Lane = /*                        */ 0b0000000000000000000000010000000;\nconst TransitionLane3: Lane = /*                        */ 0b0000000000000000000000100000000;\nconst TransitionLane4: Lane = /*                        */ 0b0000000000000000000001000000000;\nconst TransitionLane5: Lane = /*                        */ 0b0000000000000000000010000000000;\nconst TransitionLane6: Lane = /*                        */ 0b0000000000000000000100000000000;\nconst TransitionLane7: Lane = /*                        */ 0b0000000000000000001000000000000;\nconst TransitionLane8: Lane = /*                        */ 0b0000000000000000010000000000000;\nconst TransitionLane9: Lane = /*                        */ 0b0000000000000000100000000000000;\nconst TransitionLane10: Lane = /*                       */ 0b0000000000000001000000000000000;\nconst TransitionLane11: Lane = /*                       */ 0b0000000000000010000000000000000;\nconst TransitionLane12: Lane = /*                       */ 0b0000000000000100000000000000000;\nconst TransitionLane13: Lane = /*                       */ 0b0000000000001000000000000000000;\nconst TransitionLane14: Lane = /*                       */ 0b0000000000010000000000000000000;\nconst TransitionLane15: Lane = /*                       */ 0b0000000000100000000000000000000;\nconst TransitionLane16: Lane = /*                       */ 0b0000000001000000000000000000000;\n\nconst RetryLanes: Lanes = /*                            */ 0b0000111110000000000000000000000;\nconst RetryLane1: Lane = /*                             */ 0b0000000010000000000000000000000;\nconst RetryLane2: Lane = /*                             */ 0b0000000100000000000000000000000;\nconst RetryLane3: Lane = /*                             */ 0b0000001000000000000000000000000;\nconst RetryLane4: Lane = /*                             */ 0b0000010000000000000000000000000;\nconst RetryLane5: Lane = /*                             */ 0b0000100000000000000000000000000;\n\nexport const SomeRetryLane: Lane = RetryLane1;\n\nexport const SelectiveHydrationLane: Lane = /*          */ 0b0001000000000000000000000000000;\n\nconst NonIdleLanes = /*                                 */ 0b0001111111111111111111111111111;\n\nexport const IdleHydrationLane: Lane = /*               */ 0b0010000000000000000000000000000;\nexport const IdleLane: Lanes = /*                       */ 0b0100000000000000000000000000000;\n\nexport const OffscreenLane: Lane = /*                   */ 0b1000000000000000000000000000000;\n\n// This function is used for the experimental scheduling profiler (react-devtools-scheduling-profiler)\n// It should be kept in sync with the Lanes values above.\nexport function getLabelForLane(lane: Lane): string | void {\n  if (enableSchedulingProfiler) {\n    if (lane & SyncLane) {\n      return 'Sync';\n    }\n    if (lane & InputContinuousHydrationLane) {\n      return 'InputContinuousHydration';\n    }\n    if (lane & InputContinuousLane) {\n      return 'InputContinuous';\n    }\n    if (lane & DefaultHydrationLane) {\n      return 'DefaultHydration';\n    }\n    if (lane & DefaultLane) {\n      return 'Default';\n    }\n    if (lane & TransitionHydrationLane) {\n      return 'TransitionHydration';\n    }\n    if (lane & TransitionLanes) {\n      return 'Transition';\n    }\n    if (lane & RetryLanes) {\n      return 'Retry';\n    }\n    if (lane & SelectiveHydrationLane) {\n      return 'SelectiveHydration';\n    }\n    if (lane & IdleHydrationLane) {\n      return 'IdleHydration';\n    }\n    if (lane & IdleLane) {\n      return 'Idle';\n    }\n    if (lane & OffscreenLane) {\n      return 'Offscreen';\n    }\n  }\n}\n\nexport const NoTimestamp = -1;\n\nlet nextTransitionLane: Lane = TransitionLane1;\nlet nextRetryLane: Lane = RetryLane1;\n\nfunction getHighestPriorityLanes(lanes: Lanes | Lane): Lanes {\n  switch (getHighestPriorityLane(lanes)) {\n    case SyncLane:\n      return SyncLane;\n    case InputContinuousHydrationLane:\n      return InputContinuousHydrationLane;\n    case InputContinuousLane:\n      return InputContinuousLane;\n    case DefaultHydrationLane:\n      return DefaultHydrationLane;\n    case DefaultLane:\n      return DefaultLane;\n    case TransitionHydrationLane:\n      return TransitionHydrationLane;\n    case TransitionLane1:\n    case TransitionLane2:\n    case TransitionLane3:\n    case TransitionLane4:\n    case TransitionLane5:\n    case TransitionLane6:\n    case TransitionLane7:\n    case TransitionLane8:\n    case TransitionLane9:\n    case TransitionLane10:\n    case TransitionLane11:\n    case TransitionLane12:\n    case TransitionLane13:\n    case TransitionLane14:\n    case TransitionLane15:\n    case TransitionLane16:\n      return lanes & TransitionLanes;\n    case RetryLane1:\n    case RetryLane2:\n    case RetryLane3:\n    case RetryLane4:\n    case RetryLane5:\n      return lanes & RetryLanes;\n    case SelectiveHydrationLane:\n      return SelectiveHydrationLane;\n    case IdleHydrationLane:\n      return IdleHydrationLane;\n    case IdleLane:\n      return IdleLane;\n    case OffscreenLane:\n      return OffscreenLane;\n    default:\n      if (__DEV__) {\n        console.error(\n          'Should have found matching lanes. This is a bug in React.',\n        );\n      }\n      // This shouldn't be reachable, but as a fallback, return the entire bitmask.\n      return lanes;\n  }\n}\n\nexport function getNextLanes(root: FiberRoot, wipLanes: Lanes): Lanes {\n  // Early bailout if there's no pending work left.\n  const pendingLanes = root.pendingLanes;\n  if (pendingLanes === NoLanes) {\n    return NoLanes;\n  }\n\n  let nextLanes = NoLanes;\n\n  const suspendedLanes = root.suspendedLanes;\n  const pingedLanes = root.pingedLanes;\n\n  // Do not work on any idle work until all the non-idle work has finished,\n  // even if the work is suspended.\n  const nonIdlePendingLanes = pendingLanes & NonIdleLanes;\n  if (nonIdlePendingLanes !== NoLanes) {\n    const nonIdleUnblockedLanes = nonIdlePendingLanes & ~suspendedLanes;\n    if (nonIdleUnblockedLanes !== NoLanes) {\n      nextLanes = getHighestPriorityLanes(nonIdleUnblockedLanes);\n    } else {\n      const nonIdlePingedLanes = nonIdlePendingLanes & pingedLanes;\n      if (nonIdlePingedLanes !== NoLanes) {\n        nextLanes = getHighestPriorityLanes(nonIdlePingedLanes);\n      }\n    }\n  } else {\n    // The only remaining work is Idle.\n    const unblockedLanes = pendingLanes & ~suspendedLanes;\n    if (unblockedLanes !== NoLanes) {\n      nextLanes = getHighestPriorityLanes(unblockedLanes);\n    } else {\n      if (pingedLanes !== NoLanes) {\n        nextLanes = getHighestPriorityLanes(pingedLanes);\n      }\n    }\n  }\n\n  if (nextLanes === NoLanes) {\n    // This should only be reachable if we're suspended\n    // TODO: Consider warning in this path if a fallback timer is not scheduled.\n    return NoLanes;\n  }\n\n  // If we're already in the middle of a render, switching lanes will interrupt\n  // it and we'll lose our progress. We should only do this if the new lanes are\n  // higher priority.\n  if (\n    wipLanes !== NoLanes &&\n    wipLanes !== nextLanes &&\n    // If we already suspended with a delay, then interrupting is fine. Don't\n    // bother waiting until the root is complete.\n    (wipLanes & suspendedLanes) === NoLanes\n  ) {\n    const nextLane = getHighestPriorityLane(nextLanes);\n    const wipLane = getHighestPriorityLane(wipLanes);\n    if (\n      // Tests whether the next lane is equal or lower priority than the wip\n      // one. This works because the bits decrease in priority as you go left.\n      nextLane >= wipLane ||\n      // Default priority updates should not interrupt transition updates. The\n      // only difference between default updates and transition updates is that\n      // default updates do not support refresh transitions.\n      (nextLane === DefaultLane && (wipLane & TransitionLanes) !== NoLanes)\n    ) {\n      // Keep working on the existing in-progress tree. Do not interrupt.\n      return wipLanes;\n    }\n  }\n\n  if (\n    allowConcurrentByDefault &&\n    (root.current.mode & ConcurrentUpdatesByDefaultMode) !== NoMode\n  ) {\n    // Do nothing, use the lanes as they were assigned.\n  } else if ((nextLanes & InputContinuousLane) !== NoLanes) {\n    // When updates are sync by default, we entangle continuous priority updates\n    // and default updates, so they render in the same batch. The only reason\n    // they use separate lanes is because continuous updates should interrupt\n    // transitions, but default updates should not.\n    nextLanes |= pendingLanes & DefaultLane;\n  }\n\n  // Check for entangled lanes and add them to the batch.\n  //\n  // A lane is said to be entangled with another when it's not allowed to render\n  // in a batch that does not also include the other lane. Typically we do this\n  // when multiple updates have the same source, and we only want to respond to\n  // the most recent event from that source.\n  //\n  // Note that we apply entanglements *after* checking for partial work above.\n  // This means that if a lane is entangled during an interleaved event while\n  // it's already rendering, we won't interrupt it. This is intentional, since\n  // entanglement is usually \"best effort\": we'll try our best to render the\n  // lanes in the same batch, but it's not worth throwing out partially\n  // completed work in order to do it.\n  // TODO: Reconsider this. The counter-argument is that the partial work\n  // represents an intermediate state, which we don't want to show to the user.\n  // And by spending extra time finishing it, we're increasing the amount of\n  // time it takes to show the final state, which is what they are actually\n  // waiting for.\n  //\n  // For those exceptions where entanglement is semantically important, like\n  // useMutableSource, we should ensure that there is no partial work at the\n  // time we apply the entanglement.\n  const entangledLanes = root.entangledLanes;\n  if (entangledLanes !== NoLanes) {\n    const entanglements = root.entanglements;\n    let lanes = nextLanes & entangledLanes;\n    while (lanes > 0) {\n      const index = pickArbitraryLaneIndex(lanes);\n      const lane = 1 << index;\n\n      nextLanes |= entanglements[index];\n\n      lanes &= ~lane;\n    }\n  }\n\n  return nextLanes;\n}\n\nexport function getMostRecentEventTime(root: FiberRoot, lanes: Lanes): number {\n  const eventTimes = root.eventTimes;\n\n  let mostRecentEventTime = NoTimestamp;\n  while (lanes > 0) {\n    const index = pickArbitraryLaneIndex(lanes);\n    const lane = 1 << index;\n\n    const eventTime = eventTimes[index];\n    if (eventTime > mostRecentEventTime) {\n      mostRecentEventTime = eventTime;\n    }\n\n    lanes &= ~lane;\n  }\n\n  return mostRecentEventTime;\n}\n\nfunction computeExpirationTime(lane: Lane, currentTime: number) {\n  switch (lane) {\n    case SyncLane:\n    case InputContinuousHydrationLane:\n    case InputContinuousLane:\n      // User interactions should expire slightly more quickly.\n      //\n      // NOTE: This is set to the corresponding constant as in Scheduler.js.\n      // When we made it larger, a product metric in www regressed, suggesting\n      // there's a user interaction that's being starved by a series of\n      // synchronous updates. If that theory is correct, the proper solution is\n      // to fix the starvation. However, this scenario supports the idea that\n      // expiration times are an important safeguard when starvation\n      // does happen.\n      return currentTime + 250;\n    case DefaultHydrationLane:\n    case DefaultLane:\n    case TransitionHydrationLane:\n    case TransitionLane1:\n    case TransitionLane2:\n    case TransitionLane3:\n    case TransitionLane4:\n    case TransitionLane5:\n    case TransitionLane6:\n    case TransitionLane7:\n    case TransitionLane8:\n    case TransitionLane9:\n    case TransitionLane10:\n    case TransitionLane11:\n    case TransitionLane12:\n    case TransitionLane13:\n    case TransitionLane14:\n    case TransitionLane15:\n    case TransitionLane16:\n      return currentTime + 5000;\n    case RetryLane1:\n    case RetryLane2:\n    case RetryLane3:\n    case RetryLane4:\n    case RetryLane5:\n      // TODO: Retries should be allowed to expire if they are CPU bound for\n      // too long, but when I made this change it caused a spike in browser\n      // crashes. There must be some other underlying bug; not super urgent but\n      // ideally should figure out why and fix it. Unfortunately we don't have\n      // a repro for the crashes, only detected via production metrics.\n      return NoTimestamp;\n    case SelectiveHydrationLane:\n    case IdleHydrationLane:\n    case IdleLane:\n    case OffscreenLane:\n      // Anything idle priority or lower should never expire.\n      return NoTimestamp;\n    default:\n      if (__DEV__) {\n        console.error(\n          'Should have found matching lanes. This is a bug in React.',\n        );\n      }\n      return NoTimestamp;\n  }\n}\n\nexport function markStarvedLanesAsExpired(\n  root: FiberRoot,\n  currentTime: number,\n): void {\n  // TODO: This gets called every time we yield. We can optimize by storing\n  // the earliest expiration time on the root. Then use that to quickly bail out\n  // of this function.\n\n  const pendingLanes = root.pendingLanes;\n  const suspendedLanes = root.suspendedLanes;\n  const pingedLanes = root.pingedLanes;\n  const expirationTimes = root.expirationTimes;\n\n  // Iterate through the pending lanes and check if we've reached their\n  // expiration time. If so, we'll assume the update is being starved and mark\n  // it as expired to force it to finish.\n  let lanes = pendingLanes;\n  while (lanes > 0) {\n    const index = pickArbitraryLaneIndex(lanes);\n    const lane = 1 << index;\n\n    const expirationTime = expirationTimes[index];\n    if (expirationTime === NoTimestamp) {\n      // Found a pending lane with no expiration time. If it's not suspended, or\n      // if it's pinged, assume it's CPU-bound. Compute a new expiration time\n      // using the current time.\n      if (\n        (lane & suspendedLanes) === NoLanes ||\n        (lane & pingedLanes) !== NoLanes\n      ) {\n        // Assumes timestamps are monotonically increasing.\n        expirationTimes[index] = computeExpirationTime(lane, currentTime);\n      }\n    } else if (expirationTime <= currentTime) {\n      // This lane expired\n      root.expiredLanes |= lane;\n    }\n\n    lanes &= ~lane;\n  }\n}\n\n// This returns the highest priority pending lanes regardless of whether they\n// are suspended.\nexport function getHighestPriorityPendingLanes(root: FiberRoot) {\n  return getHighestPriorityLanes(root.pendingLanes);\n}\n\nexport function getLanesToRetrySynchronouslyOnError(root: FiberRoot): Lanes {\n  const everythingButOffscreen = root.pendingLanes & ~OffscreenLane;\n  if (everythingButOffscreen !== NoLanes) {\n    return everythingButOffscreen;\n  }\n  if (everythingButOffscreen & OffscreenLane) {\n    return OffscreenLane;\n  }\n  return NoLanes;\n}\n\nexport function includesNonIdleWork(lanes: Lanes) {\n  return (lanes & NonIdleLanes) !== NoLanes;\n}\nexport function includesOnlyRetries(lanes: Lanes) {\n  return (lanes & RetryLanes) === lanes;\n}\nexport function includesOnlyTransitions(lanes: Lanes) {\n  return (lanes & TransitionLanes) === lanes;\n}\n\nexport function shouldTimeSlice(root: FiberRoot, lanes: Lanes) {\n  if ((lanes & root.expiredLanes) !== NoLanes) {\n    // At least one of these lanes expired. To prevent additional starvation,\n    // finish rendering without yielding execution.\n    return false;\n  }\n\n  if (\n    allowConcurrentByDefault &&\n    (root.current.mode & ConcurrentUpdatesByDefaultMode) !== NoMode\n  ) {\n    // Concurrent updates by default always use time slicing.\n    return true;\n  }\n\n  const SyncDefaultLanes =\n    InputContinuousHydrationLane |\n    InputContinuousLane |\n    DefaultHydrationLane |\n    DefaultLane;\n  return (lanes & SyncDefaultLanes) === NoLanes;\n}\n\nexport function isTransitionLane(lane: Lane) {\n  return (lane & TransitionLanes) !== 0;\n}\n\nexport function claimNextTransitionLane(): Lane {\n  // Cycle through the lanes, assigning each new transition to the next lane.\n  // In most cases, this means every transition gets its own lane, until we\n  // run out of lanes and cycle back to the beginning.\n  const lane = nextTransitionLane;\n  nextTransitionLane <<= 1;\n  if ((nextTransitionLane & TransitionLanes) === 0) {\n    nextTransitionLane = TransitionLane1;\n  }\n  return lane;\n}\n\nexport function claimNextRetryLane(): Lane {\n  const lane = nextRetryLane;\n  nextRetryLane <<= 1;\n  if ((nextRetryLane & RetryLanes) === 0) {\n    nextRetryLane = RetryLane1;\n  }\n  return lane;\n}\n\nexport function getHighestPriorityLane(lanes: Lanes): Lane {\n  return lanes & -lanes;\n}\n\nexport function pickArbitraryLane(lanes: Lanes): Lane {\n  // This wrapper function gets inlined. Only exists so to communicate that it\n  // doesn't matter which bit is selected; you can pick any bit without\n  // affecting the algorithms where its used. Here I'm using\n  // getHighestPriorityLane because it requires the fewest operations.\n  return getHighestPriorityLane(lanes);\n}\n\nfunction pickArbitraryLaneIndex(lanes: Lanes) {\n  return 31 - clz32(lanes);\n}\n\nfunction laneToIndex(lane: Lane) {\n  return pickArbitraryLaneIndex(lane);\n}\n\nexport function includesSomeLane(a: Lanes | Lane, b: Lanes | Lane) {\n  return (a & b) !== NoLanes;\n}\n\nexport function isSubsetOfLanes(set: Lanes, subset: Lanes | Lane) {\n  return (set & subset) === subset;\n}\n\nexport function mergeLanes(a: Lanes | Lane, b: Lanes | Lane): Lanes {\n  return a | b;\n}\n\nexport function removeLanes(set: Lanes, subset: Lanes | Lane): Lanes {\n  return set & ~subset;\n}\n\nexport function intersectLanes(a: Lanes | Lane, b: Lanes | Lane): Lanes {\n  return a & b;\n}\n\n// Seems redundant, but it changes the type from a single lane (used for\n// updates) to a group of lanes (used for flushing work).\nexport function laneToLanes(lane: Lane): Lanes {\n  return lane;\n}\n\nexport function higherPriorityLane(a: Lane, b: Lane) {\n  // This works because the bit ranges decrease in priority as you go left.\n  return a !== NoLane && a < b ? a : b;\n}\n\nexport function createLaneMap<T>(initial: T): LaneMap<T> {\n  // Intentionally pushing one by one.\n  // https://v8.dev/blog/elements-kinds#avoid-creating-holes\n  const laneMap = [];\n  for (let i = 0; i < TotalLanes; i++) {\n    laneMap.push(initial);\n  }\n  return laneMap;\n}\n\nexport function markRootUpdated(\n  root: FiberRoot,\n  updateLane: Lane,\n  eventTime: number,\n) {\n  root.pendingLanes |= updateLane;\n\n  // If there are any suspended transitions, it's possible this new update\n  // could unblock them. Clear the suspended lanes so that we can try rendering\n  // them again.\n  //\n  // TODO: We really only need to unsuspend only lanes that are in the\n  // `subtreeLanes` of the updated fiber, or the update lanes of the return\n  // path. This would exclude suspended updates in an unrelated sibling tree,\n  // since there's no way for this update to unblock it.\n  //\n  // We don't do this if the incoming update is idle, because we never process\n  // idle updates until after all the regular updates have finished; there's no\n  // way it could unblock a transition.\n  if (updateLane !== IdleLane) {\n    root.suspendedLanes = NoLanes;\n    root.pingedLanes = NoLanes;\n  }\n\n  const eventTimes = root.eventTimes;\n  const index = laneToIndex(updateLane);\n  // We can always overwrite an existing timestamp because we prefer the most\n  // recent event, and we assume time is monotonically increasing.\n  eventTimes[index] = eventTime;\n}\n\nexport function markRootSuspended(root: FiberRoot, suspendedLanes: Lanes) {\n  root.suspendedLanes |= suspendedLanes;\n  root.pingedLanes &= ~suspendedLanes;\n\n  // The suspended lanes are no longer CPU-bound. Clear their expiration times.\n  const expirationTimes = root.expirationTimes;\n  let lanes = suspendedLanes;\n  while (lanes > 0) {\n    const index = pickArbitraryLaneIndex(lanes);\n    const lane = 1 << index;\n\n    expirationTimes[index] = NoTimestamp;\n\n    lanes &= ~lane;\n  }\n}\n\nexport function markRootPinged(\n  root: FiberRoot,\n  pingedLanes: Lanes,\n  eventTime: number,\n) {\n  root.pingedLanes |= root.suspendedLanes & pingedLanes;\n}\n\nexport function markRootMutableRead(root: FiberRoot, updateLane: Lane) {\n  root.mutableReadLanes |= updateLane & root.pendingLanes;\n}\n\nexport function markRootFinished(root: FiberRoot, remainingLanes: Lanes) {\n  const noLongerPendingLanes = root.pendingLanes & ~remainingLanes;\n\n  root.pendingLanes = remainingLanes;\n\n  // Let's try everything again\n  root.suspendedLanes = 0;\n  root.pingedLanes = 0;\n\n  root.expiredLanes &= remainingLanes;\n  root.mutableReadLanes &= remainingLanes;\n\n  root.entangledLanes &= remainingLanes;\n\n  if (enableCache) {\n    const pooledCacheLanes = (root.pooledCacheLanes &= remainingLanes);\n    if (pooledCacheLanes === NoLanes) {\n      // None of the remaining work relies on the cache pool. Clear it so\n      // subsequent requests get a new cache.\n      root.pooledCache = null;\n    }\n  }\n\n  const entanglements = root.entanglements;\n  const eventTimes = root.eventTimes;\n  const expirationTimes = root.expirationTimes;\n\n  // Clear the lanes that no longer have pending work\n  let lanes = noLongerPendingLanes;\n  while (lanes > 0) {\n    const index = pickArbitraryLaneIndex(lanes);\n    const lane = 1 << index;\n\n    entanglements[index] = NoLanes;\n    eventTimes[index] = NoTimestamp;\n    expirationTimes[index] = NoTimestamp;\n\n    lanes &= ~lane;\n  }\n}\n\nexport function markRootEntangled(root: FiberRoot, entangledLanes: Lanes) {\n  // In addition to entangling each of the given lanes with each other, we also\n  // have to consider _transitive_ entanglements. For each lane that is already\n  // entangled with *any* of the given lanes, that lane is now transitively\n  // entangled with *all* the given lanes.\n  //\n  // Translated: If C is entangled with A, then entangling A with B also\n  // entangles C with B.\n  //\n  // If this is hard to grasp, it might help to intentionally break this\n  // function and look at the tests that fail in ReactTransition-test.js. Try\n  // commenting out one of the conditions below.\n\n  const rootEntangledLanes = (root.entangledLanes |= entangledLanes);\n  const entanglements = root.entanglements;\n  let lanes = rootEntangledLanes;\n  while (lanes) {\n    const index = pickArbitraryLaneIndex(lanes);\n    const lane = 1 << index;\n    if (\n      // Is this one of the newly entangled lanes?\n      (lane & entangledLanes) |\n      // Is this lane transitively entangled with the newly entangled lanes?\n      (entanglements[index] & entangledLanes)\n    ) {\n      entanglements[index] |= entangledLanes;\n    }\n    lanes &= ~lane;\n  }\n}\n\nexport function getBumpedLaneForHydration(\n  root: FiberRoot,\n  renderLanes: Lanes,\n): Lane {\n  const renderLane = getHighestPriorityLane(renderLanes);\n\n  let lane;\n  switch (renderLane) {\n    case InputContinuousLane:\n      lane = InputContinuousHydrationLane;\n      break;\n    case DefaultLane:\n      lane = DefaultHydrationLane;\n      break;\n    case TransitionLane1:\n    case TransitionLane2:\n    case TransitionLane3:\n    case TransitionLane4:\n    case TransitionLane5:\n    case TransitionLane6:\n    case TransitionLane7:\n    case TransitionLane8:\n    case TransitionLane9:\n    case TransitionLane10:\n    case TransitionLane11:\n    case TransitionLane12:\n    case TransitionLane13:\n    case TransitionLane14:\n    case TransitionLane15:\n    case TransitionLane16:\n    case RetryLane1:\n    case RetryLane2:\n    case RetryLane3:\n    case RetryLane4:\n    case RetryLane5:\n      lane = TransitionHydrationLane;\n      break;\n    case IdleLane:\n      lane = IdleHydrationLane;\n      break;\n    default:\n      // Everything else is already either a hydration lane, or shouldn't\n      // be retried at a hydration lane.\n      lane = NoLane;\n      break;\n  }\n\n  // Check if the lane we chose is suspended. If so, that indicates that we\n  // already attempted and failed to hydrate at that level. Also check if we're\n  // already rendering that lane, which is rare but could happen.\n  if ((lane & (root.suspendedLanes | renderLanes)) !== NoLane) {\n    // Give up trying to hydrate and fall back to client render.\n    return NoLane;\n  }\n\n  return lane;\n}\n\nexport function addFiberToLanesMap(\n  root: FiberRoot,\n  fiber: Fiber,\n  lanes: Lanes | Lane,\n) {\n  if (!enableUpdaterTracking) {\n    return;\n  }\n  if (!isDevToolsPresent) {\n    return;\n  }\n  const pendingUpdatersLaneMap = root.pendingUpdatersLaneMap;\n  while (lanes > 0) {\n    const index = laneToIndex(lanes);\n    const lane = 1 << index;\n\n    const updaters = pendingUpdatersLaneMap[index];\n    updaters.add(fiber);\n\n    lanes &= ~lane;\n  }\n}\n\nexport function movePendingFibersToMemoized(root: FiberRoot, lanes: Lanes) {\n  if (!enableUpdaterTracking) {\n    return;\n  }\n  if (!isDevToolsPresent) {\n    return;\n  }\n  const pendingUpdatersLaneMap = root.pendingUpdatersLaneMap;\n  const memoizedUpdaters = root.memoizedUpdaters;\n  while (lanes > 0) {\n    const index = laneToIndex(lanes);\n    const lane = 1 << index;\n\n    const updaters = pendingUpdatersLaneMap[index];\n    if (updaters.size > 0) {\n      updaters.forEach(fiber => {\n        const alternate = fiber.alternate;\n        if (alternate === null || !memoizedUpdaters.has(alternate)) {\n          memoizedUpdaters.add(fiber);\n        }\n      });\n      updaters.clear();\n    }\n\n    lanes &= ~lane;\n  }\n}\n\nconst clz32 = Math.clz32 ? Math.clz32 : clz32Fallback;\n\n// Count leading zeros. Only used on lanes, so assume input is an integer.\n// Based on:\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/clz32\nconst log = Math.log;\nconst LN2 = Math.LN2;\nfunction clz32Fallback(lanes: Lanes | Lane) {\n  if (lanes === 0) {\n    return 32;\n  }\n  return (31 - ((log(lanes) / LN2) | 0)) | 0;\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Lane, Lanes} from './ReactFiberLane.old';\n\nimport {\n  NoLane,\n  SyncLane,\n  InputContinuousLane,\n  DefaultLane,\n  IdleLane,\n  getHighestPriorityLane,\n  includesNonIdleWork,\n} from './ReactFiberLane.old';\n\nexport opaque type EventPriority = Lane;\n\nexport const DiscreteEventPriority: EventPriority = SyncLane;\nexport const ContinuousEventPriority: EventPriority = InputContinuousLane;\nexport const DefaultEventPriority: EventPriority = DefaultLane;\nexport const IdleEventPriority: EventPriority = IdleLane;\n\nlet currentUpdatePriority: EventPriority = NoLane;\n\nexport function getCurrentUpdatePriority(): EventPriority {\n  return currentUpdatePriority;\n}\n\nexport function setCurrentUpdatePriority(newPriority: EventPriority) {\n  currentUpdatePriority = newPriority;\n}\n\nexport function runWithPriority<T>(priority: EventPriority, fn: () => T): T {\n  const previousPriority = currentUpdatePriority;\n  try {\n    currentUpdatePriority = priority;\n    return fn();\n  } finally {\n    currentUpdatePriority = previousPriority;\n  }\n}\n\nexport function higherEventPriority(\n  a: EventPriority,\n  b: EventPriority,\n): EventPriority {\n  return a !== 0 && a < b ? a : b;\n}\n\nexport function lowerEventPriority(\n  a: EventPriority,\n  b: EventPriority,\n): EventPriority {\n  return a === 0 || a > b ? a : b;\n}\n\nexport function isHigherEventPriority(\n  a: EventPriority,\n  b: EventPriority,\n): boolean {\n  return a !== 0 && a < b;\n}\n\nexport function lanesToEventPriority(lanes: Lanes): EventPriority {\n  const lane = getHighestPriorityLane(lanes);\n  if (!isHigherEventPriority(DiscreteEventPriority, lane)) {\n    return DiscreteEventPriority;\n  }\n  if (!isHigherEventPriority(ContinuousEventPriority, lane)) {\n    return ContinuousEventPriority;\n  }\n  if (includesNonIdleWork(lane)) {\n    return DefaultEventPriority;\n  }\n  return IdleEventPriority;\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport invariant from 'shared/invariant';\n\n// Renderers that don't support hydration\n// can re-export everything from this module.\n\nfunction shim(...args: any) {\n  invariant(\n    false,\n    'The current renderer does not support hydration. ' +\n      'This error is likely caused by a bug in React. ' +\n      'Please file an issue.',\n  );\n}\n\n// Hydration (when unsupported)\nexport type SuspenseInstance = mixed;\nexport const supportsHydration = false;\nexport const canHydrateInstance = shim;\nexport const canHydrateTextInstance = shim;\nexport const canHydrateSuspenseInstance = shim;\nexport const isSuspenseInstancePending = shim;\nexport const isSuspenseInstanceFallback = shim;\nexport const registerSuspenseInstanceRetry = shim;\nexport const getNextHydratableSibling = shim;\nexport const getFirstHydratableChild = shim;\nexport const hydrateInstance = shim;\nexport const hydrateTextInstance = shim;\nexport const hydrateSuspenseInstance = shim;\nexport const getNextHydratableInstanceAfterSuspenseInstance = shim;\nexport const commitHydratedContainer = shim;\nexport const commitHydratedSuspenseInstance = shim;\nexport const clearSuspenseBoundary = shim;\nexport const clearSuspenseBoundaryFromContainer = shim;\nexport const shouldDeleteUnhydratedTailInstances = shim;\nexport const didNotMatchHydratedContainerTextInstance = shim;\nexport const didNotMatchHydratedTextInstance = shim;\nexport const didNotHydrateContainerInstance = shim;\nexport const didNotHydrateInstance = shim;\nexport const didNotFindHydratableContainerInstance = shim;\nexport const didNotFindHydratableContainerTextInstance = shim;\nexport const didNotFindHydratableContainerSuspenseInstance = shim;\nexport const didNotFindHydratableInstance = shim;\nexport const didNotFindHydratableTextInstance = shim;\nexport const didNotFindHydratableSuspenseInstance = shim;\nexport const errorHydratingContainer = shim;\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport {REACT_OPAQUE_ID_TYPE} from 'shared/ReactSymbols';\nimport isArray from 'shared/isArray';\nimport {DefaultEventPriority} from 'react-reconciler/src/ReactEventPriorities';\n\nexport type Type = string;\nexport type Props = Object;\nexport type Container = {|\n  children: Array<Instance | TextInstance>,\n  createNodeMock: Function,\n  tag: 'CONTAINER',\n|};\nexport type Instance = {|\n  type: string,\n  props: Object,\n  isHidden: boolean,\n  children: Array<Instance | TextInstance>,\n  internalInstanceHandle: Object,\n  rootContainerInstance: Container,\n  tag: 'INSTANCE',\n|};\nexport type TextInstance = {|\n  text: string,\n  isHidden: boolean,\n  tag: 'TEXT',\n|};\nexport type HydratableInstance = Instance | TextInstance;\nexport type PublicInstance = Instance | TextInstance;\nexport type HostContext = Object;\nexport type UpdatePayload = Object;\nexport type ChildSet = void; // Unused\nexport type TimeoutHandle = TimeoutID;\nexport type NoTimeout = -1;\nexport type EventResponder = any;\nexport opaque type OpaqueIDType =\n  | string\n  | {\n      toString: () => string | void,\n      valueOf: () => string | void,\n    };\n\nexport type RendererInspectionConfig = $ReadOnly<{||}>;\n\nexport * from 'react-reconciler/src/ReactFiberHostConfigWithNoPersistence';\nexport * from 'react-reconciler/src/ReactFiberHostConfigWithNoHydration';\nexport * from 'react-reconciler/src/ReactFiberHostConfigWithNoTestSelectors';\nexport * from 'react-reconciler/src/ReactFiberHostConfigWithNoMicrotasks';\n\nconst NO_CONTEXT = {};\nconst UPDATE_SIGNAL = {};\nconst nodeToInstanceMap = new WeakMap();\n\nif (__DEV__) {\n  Object.freeze(NO_CONTEXT);\n  Object.freeze(UPDATE_SIGNAL);\n}\n\nexport function getPublicInstance(inst: Instance | TextInstance): * {\n  switch (inst.tag) {\n    case 'INSTANCE':\n      const createNodeMock = inst.rootContainerInstance.createNodeMock;\n      const mockNode = createNodeMock({\n        type: inst.type,\n        props: inst.props,\n      });\n      if (typeof mockNode === 'object' && mockNode !== null) {\n        nodeToInstanceMap.set(mockNode, inst);\n      }\n      return mockNode;\n    default:\n      return inst;\n  }\n}\n\nexport function appendChild(\n  parentInstance: Instance | Container,\n  child: Instance | TextInstance,\n): void {\n  if (__DEV__) {\n    if (!isArray(parentInstance.children)) {\n      console.error(\n        'An invalid container has been provided. ' +\n          'This may indicate that another renderer is being used in addition to the test renderer. ' +\n          '(For example, ReactDOM.createPortal inside of a ReactTestRenderer tree.) ' +\n          'This is not supported.',\n      );\n    }\n  }\n  const index = parentInstance.children.indexOf(child);\n  if (index !== -1) {\n    parentInstance.children.splice(index, 1);\n  }\n  parentInstance.children.push(child);\n}\n\nexport function insertBefore(\n  parentInstance: Instance | Container,\n  child: Instance | TextInstance,\n  beforeChild: Instance | TextInstance,\n): void {\n  const index = parentInstance.children.indexOf(child);\n  if (index !== -1) {\n    parentInstance.children.splice(index, 1);\n  }\n  const beforeIndex = parentInstance.children.indexOf(beforeChild);\n  parentInstance.children.splice(beforeIndex, 0, child);\n}\n\nexport function removeChild(\n  parentInstance: Instance | Container,\n  child: Instance | TextInstance,\n): void {\n  const index = parentInstance.children.indexOf(child);\n  parentInstance.children.splice(index, 1);\n}\n\nexport function clearContainer(container: Container): void {\n  container.children.splice(0);\n}\n\nexport function getRootHostContext(\n  rootContainerInstance: Container,\n): HostContext {\n  return NO_CONTEXT;\n}\n\nexport function getChildHostContext(\n  parentHostContext: HostContext,\n  type: string,\n  rootContainerInstance: Container,\n): HostContext {\n  return NO_CONTEXT;\n}\n\nexport function prepareForCommit(containerInfo: Container): null | Object {\n  // noop\n  return null;\n}\n\nexport function resetAfterCommit(containerInfo: Container): void {\n  // noop\n}\n\nexport function createInstance(\n  type: string,\n  props: Props,\n  rootContainerInstance: Container,\n  hostContext: Object,\n  internalInstanceHandle: Object,\n): Instance {\n  return {\n    type,\n    props,\n    isHidden: false,\n    children: [],\n    internalInstanceHandle,\n    rootContainerInstance,\n    tag: 'INSTANCE',\n  };\n}\n\nexport function appendInitialChild(\n  parentInstance: Instance,\n  child: Instance | TextInstance,\n): void {\n  const index = parentInstance.children.indexOf(child);\n  if (index !== -1) {\n    parentInstance.children.splice(index, 1);\n  }\n  parentInstance.children.push(child);\n}\n\nexport function finalizeInitialChildren(\n  testElement: Instance,\n  type: string,\n  props: Props,\n  rootContainerInstance: Container,\n  hostContext: Object,\n): boolean {\n  return false;\n}\n\nexport function prepareUpdate(\n  testElement: Instance,\n  type: string,\n  oldProps: Props,\n  newProps: Props,\n  rootContainerInstance: Container,\n  hostContext: Object,\n): null | {...} {\n  return UPDATE_SIGNAL;\n}\n\nexport function shouldSetTextContent(type: string, props: Props): boolean {\n  return false;\n}\n\nexport function createTextInstance(\n  text: string,\n  rootContainerInstance: Container,\n  hostContext: Object,\n  internalInstanceHandle: Object,\n): TextInstance {\n  return {\n    text,\n    isHidden: false,\n    tag: 'TEXT',\n  };\n}\n\nexport function getCurrentEventPriority(): * {\n  return DefaultEventPriority;\n}\n\nexport const isPrimaryRenderer = false;\nexport const warnsIfNotActing = true;\n\nexport const scheduleTimeout = setTimeout;\nexport const cancelTimeout = clearTimeout;\n\nexport const noTimeout = -1;\n\n// -------------------\n//     Mutation\n// -------------------\n\nexport const supportsMutation = true;\n\nexport function commitUpdate(\n  instance: Instance,\n  updatePayload: {...},\n  type: string,\n  oldProps: Props,\n  newProps: Props,\n  internalInstanceHandle: Object,\n): void {\n  instance.type = type;\n  instance.props = newProps;\n}\n\nexport function commitMount(\n  instance: Instance,\n  type: string,\n  newProps: Props,\n  internalInstanceHandle: Object,\n): void {\n  // noop\n}\n\nexport function commitTextUpdate(\n  textInstance: TextInstance,\n  oldText: string,\n  newText: string,\n): void {\n  textInstance.text = newText;\n}\n\nexport function resetTextContent(testElement: Instance): void {\n  // noop\n}\n\nexport const appendChildToContainer = appendChild;\nexport const insertInContainerBefore = insertBefore;\nexport const removeChildFromContainer = removeChild;\n\nexport function hideInstance(instance: Instance): void {\n  instance.isHidden = true;\n}\n\nexport function hideTextInstance(textInstance: TextInstance): void {\n  textInstance.isHidden = true;\n}\n\nexport function unhideInstance(instance: Instance, props: Props): void {\n  instance.isHidden = false;\n}\n\nexport function unhideTextInstance(\n  textInstance: TextInstance,\n  text: string,\n): void {\n  textInstance.isHidden = false;\n}\n\nexport function getInstanceFromNode(mockNode: Object) {\n  const instance = nodeToInstanceMap.get(mockNode);\n  if (instance !== undefined) {\n    return instance.internalInstanceHandle;\n  }\n  return null;\n}\n\nlet clientId: number = 0;\nexport function makeClientId(): OpaqueIDType {\n  return 'c_' + (clientId++).toString(36);\n}\n\nexport function makeClientIdInDEV(warnOnAccessInDEV: () => void): OpaqueIDType {\n  const id = 'c_' + (clientId++).toString(36);\n  return {\n    toString() {\n      warnOnAccessInDEV();\n      return id;\n    },\n    valueOf() {\n      warnOnAccessInDEV();\n      return id;\n    },\n  };\n}\n\nexport function isOpaqueHydratingObject(value: mixed): boolean {\n  return (\n    value !== null &&\n    typeof value === 'object' &&\n    value.$$typeof === REACT_OPAQUE_ID_TYPE\n  );\n}\n\nexport function makeOpaqueHydratingObject(\n  attemptToReadValue: () => void,\n): OpaqueIDType {\n  return {\n    $$typeof: REACT_OPAQUE_ID_TYPE,\n    toString: attemptToReadValue,\n    valueOf: attemptToReadValue,\n  };\n}\n\nexport function beforeActiveInstanceBlur(internalInstanceHandle: Object) {\n  // noop\n}\n\nexport function afterActiveInstanceBlur() {\n  // noop\n}\n\nexport function preparePortalMount(portalInstance: Instance): void {\n  // noop\n}\n\nexport function prepareScopeUpdate(scopeInstance: Object, inst: Object): void {\n  nodeToInstanceMap.set(scopeInstance, inst);\n}\n\nexport function getInstanceFromScope(scopeInstance: Object): null | Object {\n  return nodeToInstanceMap.get(scopeInstance) || null;\n}\n\nexport function detachDeletedInstance(node: Instance): void {\n  // noop\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Source} from 'shared/ReactElementType';\nimport type {LazyComponent} from 'react/src/ReactLazy';\n\nimport {\n  enableComponentStackLocations,\n  disableNativeComponentFrames,\n} from 'shared/ReactFeatureFlags';\n\nimport {\n  REACT_SUSPENSE_TYPE,\n  REACT_SUSPENSE_LIST_TYPE,\n  REACT_FORWARD_REF_TYPE,\n  REACT_MEMO_TYPE,\n  REACT_LAZY_TYPE,\n} from 'shared/ReactSymbols';\n\nimport {disableLogs, reenableLogs} from 'shared/ConsolePatchingDev';\n\nimport ReactSharedInternals from 'shared/ReactSharedInternals';\n\nconst {ReactCurrentDispatcher} = ReactSharedInternals;\n\nlet prefix;\nexport function describeBuiltInComponentFrame(\n  name: string,\n  source: void | null | Source,\n  ownerFn: void | null | Function,\n): string {\n  if (enableComponentStackLocations) {\n    if (prefix === undefined) {\n      // Extract the VM specific prefix used by each line.\n      try {\n        throw Error();\n      } catch (x) {\n        const match = x.stack.trim().match(/\\n( *(at )?)/);\n        prefix = (match && match[1]) || '';\n      }\n    }\n    // We use the prefix to ensure our stacks line up with native stack frames.\n    return '\\n' + prefix + name;\n  } else {\n    let ownerName = null;\n    if (__DEV__ && ownerFn) {\n      ownerName = ownerFn.displayName || ownerFn.name || null;\n    }\n    return describeComponentFrame(name, source, ownerName);\n  }\n}\n\nlet reentry = false;\nlet componentFrameCache;\nif (__DEV__) {\n  const PossiblyWeakMap = typeof WeakMap === 'function' ? WeakMap : Map;\n  componentFrameCache = new PossiblyWeakMap();\n}\n\nexport function describeNativeComponentFrame(\n  fn: Function,\n  construct: boolean,\n): string {\n  // If something asked for a stack inside a fake render, it should get ignored.\n  if (disableNativeComponentFrames || !fn || reentry) {\n    return '';\n  }\n\n  if (__DEV__) {\n    const frame = componentFrameCache.get(fn);\n    if (frame !== undefined) {\n      return frame;\n    }\n  }\n\n  let control;\n\n  reentry = true;\n  const previousPrepareStackTrace = Error.prepareStackTrace;\n  // $FlowFixMe It does accept undefined.\n  Error.prepareStackTrace = undefined;\n  let previousDispatcher;\n  if (__DEV__) {\n    previousDispatcher = ReactCurrentDispatcher.current;\n    // Set the dispatcher in DEV because this might be call in the render function\n    // for warnings.\n    ReactCurrentDispatcher.current = null;\n    disableLogs();\n  }\n  try {\n    // This should throw.\n    if (construct) {\n      // Something should be setting the props in the constructor.\n      const Fake = function() {\n        throw Error();\n      };\n      // $FlowFixMe\n      Object.defineProperty(Fake.prototype, 'props', {\n        set: function() {\n          // We use a throwing setter instead of frozen or non-writable props\n          // because that won't throw in a non-strict mode function.\n          throw Error();\n        },\n      });\n      if (typeof Reflect === 'object' && Reflect.construct) {\n        // We construct a different control for this case to include any extra\n        // frames added by the construct call.\n        try {\n          Reflect.construct(Fake, []);\n        } catch (x) {\n          control = x;\n        }\n        Reflect.construct(fn, [], Fake);\n      } else {\n        try {\n          Fake.call();\n        } catch (x) {\n          control = x;\n        }\n        fn.call(Fake.prototype);\n      }\n    } else {\n      try {\n        throw Error();\n      } catch (x) {\n        control = x;\n      }\n      fn();\n    }\n  } catch (sample) {\n    // This is inlined manually because closure doesn't do it for us.\n    if (sample && control && typeof sample.stack === 'string') {\n      // This extracts the first frame from the sample that isn't also in the control.\n      // Skipping one frame that we assume is the frame that calls the two.\n      const sampleLines = sample.stack.split('\\n');\n      const controlLines = control.stack.split('\\n');\n      let s = sampleLines.length - 1;\n      let c = controlLines.length - 1;\n      while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {\n        // We expect at least one stack frame to be shared.\n        // Typically this will be the root most one. However, stack frames may be\n        // cut off due to maximum stack limits. In this case, one maybe cut off\n        // earlier than the other. We assume that the sample is longer or the same\n        // and there for cut off earlier. So we should find the root most frame in\n        // the sample somewhere in the control.\n        c--;\n      }\n      for (; s >= 1 && c >= 0; s--, c--) {\n        // Next we find the first one that isn't the same which should be the\n        // frame that called our sample function and the control.\n        if (sampleLines[s] !== controlLines[c]) {\n          // In V8, the first line is describing the message but other VMs don't.\n          // If we're about to return the first line, and the control is also on the same\n          // line, that's a pretty good indicator that our sample threw at same line as\n          // the control. I.e. before we entered the sample frame. So we ignore this result.\n          // This can happen if you passed a class to function component, or non-function.\n          if (s !== 1 || c !== 1) {\n            do {\n              s--;\n              c--;\n              // We may still have similar intermediate frames from the construct call.\n              // The next one that isn't the same should be our match though.\n              if (c < 0 || sampleLines[s] !== controlLines[c]) {\n                // V8 adds a \"new\" prefix for native classes. Let's remove it to make it prettier.\n                const frame = '\\n' + sampleLines[s].replace(' at new ', ' at ');\n                if (__DEV__) {\n                  if (typeof fn === 'function') {\n                    componentFrameCache.set(fn, frame);\n                  }\n                }\n                // Return the line we found.\n                return frame;\n              }\n            } while (s >= 1 && c >= 0);\n          }\n          break;\n        }\n      }\n    }\n  } finally {\n    reentry = false;\n    if (__DEV__) {\n      ReactCurrentDispatcher.current = previousDispatcher;\n      reenableLogs();\n    }\n    Error.prepareStackTrace = previousPrepareStackTrace;\n  }\n  // Fallback to just using the name if we couldn't make it throw.\n  const name = fn ? fn.displayName || fn.name : '';\n  const syntheticFrame = name ? describeBuiltInComponentFrame(name) : '';\n  if (__DEV__) {\n    if (typeof fn === 'function') {\n      componentFrameCache.set(fn, syntheticFrame);\n    }\n  }\n  return syntheticFrame;\n}\n\nconst BEFORE_SLASH_RE = /^(.*)[\\\\\\/]/;\n\nfunction describeComponentFrame(\n  name: null | string,\n  source: void | null | Source,\n  ownerName: null | string,\n) {\n  let sourceInfo = '';\n  if (__DEV__ && source) {\n    const path = source.fileName;\n    let fileName = path.replace(BEFORE_SLASH_RE, '');\n    // In DEV, include code for a common special case:\n    // prefer \"folder/index.js\" instead of just \"index.js\".\n    if (/^index\\./.test(fileName)) {\n      const match = path.match(BEFORE_SLASH_RE);\n      if (match) {\n        const pathBeforeSlash = match[1];\n        if (pathBeforeSlash) {\n          const folderName = pathBeforeSlash.replace(BEFORE_SLASH_RE, '');\n          fileName = folderName + '/' + fileName;\n        }\n      }\n    }\n    sourceInfo = ' (at ' + fileName + ':' + source.lineNumber + ')';\n  } else if (ownerName) {\n    sourceInfo = ' (created by ' + ownerName + ')';\n  }\n  return '\\n    in ' + (name || 'Unknown') + sourceInfo;\n}\n\nexport function describeClassComponentFrame(\n  ctor: Function,\n  source: void | null | Source,\n  ownerFn: void | null | Function,\n): string {\n  if (enableComponentStackLocations) {\n    return describeNativeComponentFrame(ctor, true);\n  } else {\n    return describeFunctionComponentFrame(ctor, source, ownerFn);\n  }\n}\n\nexport function describeFunctionComponentFrame(\n  fn: Function,\n  source: void | null | Source,\n  ownerFn: void | null | Function,\n): string {\n  if (enableComponentStackLocations) {\n    return describeNativeComponentFrame(fn, false);\n  } else {\n    if (!fn) {\n      return '';\n    }\n    const name = fn.displayName || fn.name || null;\n    let ownerName = null;\n    if (__DEV__ && ownerFn) {\n      ownerName = ownerFn.displayName || ownerFn.name || null;\n    }\n    return describeComponentFrame(name, source, ownerName);\n  }\n}\n\nfunction shouldConstruct(Component: Function) {\n  const prototype = Component.prototype;\n  return !!(prototype && prototype.isReactComponent);\n}\n\nexport function describeUnknownElementTypeFrameInDEV(\n  type: any,\n  source: void | null | Source,\n  ownerFn: void | null | Function,\n): string {\n  if (!__DEV__) {\n    return '';\n  }\n  if (type == null) {\n    return '';\n  }\n  if (typeof type === 'function') {\n    if (enableComponentStackLocations) {\n      return describeNativeComponentFrame(type, shouldConstruct(type));\n    } else {\n      return describeFunctionComponentFrame(type, source, ownerFn);\n    }\n  }\n  if (typeof type === 'string') {\n    return describeBuiltInComponentFrame(type, source, ownerFn);\n  }\n  switch (type) {\n    case REACT_SUSPENSE_TYPE:\n      return describeBuiltInComponentFrame('Suspense', source, ownerFn);\n    case REACT_SUSPENSE_LIST_TYPE:\n      return describeBuiltInComponentFrame('SuspenseList', source, ownerFn);\n  }\n  if (typeof type === 'object') {\n    switch (type.$$typeof) {\n      case REACT_FORWARD_REF_TYPE:\n        return describeFunctionComponentFrame(type.render, source, ownerFn);\n      case REACT_MEMO_TYPE:\n        // Memo may contain any component type so we recursively resolve it.\n        return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);\n      case REACT_LAZY_TYPE: {\n        const lazyComponent: LazyComponent<any, any> = (type: any);\n        const payload = lazyComponent._payload;\n        const init = lazyComponent._init;\n        try {\n          // Lazy may contain any component type so we recursively resolve it.\n          return describeUnknownElementTypeFrameInDEV(\n            init(payload),\n            source,\n            ownerFn,\n          );\n        } catch (x) {}\n      }\n    }\n  }\n  return '';\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nconst hasOwnProperty = Object.prototype.hasOwnProperty;\n\nexport default hasOwnProperty;\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nconst loggedTypeFailures = {};\n\nimport {describeUnknownElementTypeFrameInDEV} from 'shared/ReactComponentStackFrame';\n\nimport ReactSharedInternals from 'shared/ReactSharedInternals';\nimport hasOwnProperty from 'shared/hasOwnProperty';\n\nconst ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;\n\nfunction setCurrentlyValidatingElement(element) {\n  if (__DEV__) {\n    if (element) {\n      const owner = element._owner;\n      const stack = describeUnknownElementTypeFrameInDEV(\n        element.type,\n        element._source,\n        owner ? owner.type : null,\n      );\n      ReactDebugCurrentFrame.setExtraStackFrame(stack);\n    } else {\n      ReactDebugCurrentFrame.setExtraStackFrame(null);\n    }\n  }\n}\n\nexport default function checkPropTypes(\n  typeSpecs: Object,\n  values: Object,\n  location: string,\n  componentName: ?string,\n  element?: any,\n): void {\n  if (__DEV__) {\n    // $FlowFixMe This is okay but Flow doesn't know it.\n    const has = Function.call.bind(hasOwnProperty);\n    for (const typeSpecName in typeSpecs) {\n      if (has(typeSpecs, typeSpecName)) {\n        let error;\n        // Prop type validation may throw. In case they do, we don't want to\n        // fail the render phase where it didn't fail before. So we log it.\n        // After these have been cleaned up, we'll let them throw.\n        try {\n          // This is intentionally an invariant that gets caught. It's the same\n          // behavior as without this statement except with a better message.\n          if (typeof typeSpecs[typeSpecName] !== 'function') {\n            const err = Error(\n              (componentName || 'React class') +\n                ': ' +\n                location +\n                ' type `' +\n                typeSpecName +\n                '` is invalid; ' +\n                'it must be a function, usually from the `prop-types` package, but received `' +\n                typeof typeSpecs[typeSpecName] +\n                '`.' +\n                'This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.',\n            );\n            err.name = 'Invariant Violation';\n            throw err;\n          }\n          error = typeSpecs[typeSpecName](\n            values,\n            typeSpecName,\n            componentName,\n            location,\n            null,\n            'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED',\n          );\n        } catch (ex) {\n          error = ex;\n        }\n        if (error && !(error instanceof Error)) {\n          setCurrentlyValidatingElement(element);\n          console.error(\n            '%s: type specification of %s' +\n              ' `%s` is invalid; the type checker ' +\n              'function must return `null` or an `Error` but returned a %s. ' +\n              'You may have forgotten to pass an argument to the type checker ' +\n              'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' +\n              'shape all require an argument).',\n            componentName || 'React class',\n            location,\n            typeSpecName,\n            typeof error,\n          );\n          setCurrentlyValidatingElement(null);\n        }\n        if (error instanceof Error && !(error.message in loggedTypeFailures)) {\n          // Only monitor this failure once because there tends to be a lot of the\n          // same error.\n          loggedTypeFailures[error.message] = true;\n          setCurrentlyValidatingElement(element);\n          console.error('Failed %s type: %s', location, error.message);\n          setCurrentlyValidatingElement(null);\n        }\n      }\n    }\n  }\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Fiber} from './ReactInternalTypes';\n\nexport type StackCursor<T> = {|current: T|};\n\nconst valueStack: Array<any> = [];\n\nlet fiberStack: Array<Fiber | null>;\n\nif (__DEV__) {\n  fiberStack = [];\n}\n\nlet index = -1;\n\nfunction createCursor<T>(defaultValue: T): StackCursor<T> {\n  return {\n    current: defaultValue,\n  };\n}\n\nfunction isEmpty(): boolean {\n  return index === -1;\n}\n\nfunction pop<T>(cursor: StackCursor<T>, fiber: Fiber): void {\n  if (index < 0) {\n    if (__DEV__) {\n      console.error('Unexpected pop.');\n    }\n    return;\n  }\n\n  if (__DEV__) {\n    if (fiber !== fiberStack[index]) {\n      console.error('Unexpected Fiber popped.');\n    }\n  }\n\n  cursor.current = valueStack[index];\n\n  valueStack[index] = null;\n\n  if (__DEV__) {\n    fiberStack[index] = null;\n  }\n\n  index--;\n}\n\nfunction push<T>(cursor: StackCursor<T>, value: T, fiber: Fiber): void {\n  index++;\n\n  valueStack[index] = cursor.current;\n\n  if (__DEV__) {\n    fiberStack[index] = fiber;\n  }\n\n  cursor.current = value;\n}\n\nfunction checkThatStackIsEmpty() {\n  if (__DEV__) {\n    if (index !== -1) {\n      console.error(\n        'Expected an empty stack. Something was not reset properly.',\n      );\n    }\n  }\n}\n\nfunction resetStackAfterFatalErrorInDev() {\n  if (__DEV__) {\n    index = -1;\n    valueStack.length = 0;\n    fiberStack.length = 0;\n  }\n}\n\nexport {\n  createCursor,\n  isEmpty,\n  pop,\n  push,\n  // DEV only:\n  checkThatStackIsEmpty,\n  resetStackAfterFatalErrorInDev,\n};\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Fiber} from './ReactInternalTypes';\nimport type {StackCursor} from './ReactFiberStack.old';\n\nimport {isFiberMounted} from './ReactFiberTreeReflection';\nimport {disableLegacyContext} from 'shared/ReactFeatureFlags';\nimport {ClassComponent, HostRoot} from './ReactWorkTags';\nimport getComponentNameFromFiber from 'react-reconciler/src/getComponentNameFromFiber';\nimport invariant from 'shared/invariant';\nimport checkPropTypes from 'shared/checkPropTypes';\n\nimport {createCursor, push, pop} from './ReactFiberStack.old';\n\nlet warnedAboutMissingGetChildContext;\n\nif (__DEV__) {\n  warnedAboutMissingGetChildContext = {};\n}\n\nexport const emptyContextObject = {};\nif (__DEV__) {\n  Object.freeze(emptyContextObject);\n}\n\n// A cursor to the current merged context object on the stack.\nconst contextStackCursor: StackCursor<Object> = createCursor(\n  emptyContextObject,\n);\n// A cursor to a boolean indicating whether the context has changed.\nconst didPerformWorkStackCursor: StackCursor<boolean> = createCursor(false);\n// Keep track of the previous context object that was on the stack.\n// We use this to get access to the parent context after we have already\n// pushed the next context provider, and now need to merge their contexts.\nlet previousContext: Object = emptyContextObject;\n\nfunction getUnmaskedContext(\n  workInProgress: Fiber,\n  Component: Function,\n  didPushOwnContextIfProvider: boolean,\n): Object {\n  if (disableLegacyContext) {\n    return emptyContextObject;\n  } else {\n    if (didPushOwnContextIfProvider && isContextProvider(Component)) {\n      // If the fiber is a context provider itself, when we read its context\n      // we may have already pushed its own child context on the stack. A context\n      // provider should not \"see\" its own child context. Therefore we read the\n      // previous (parent) context instead for a context provider.\n      return previousContext;\n    }\n    return contextStackCursor.current;\n  }\n}\n\nfunction cacheContext(\n  workInProgress: Fiber,\n  unmaskedContext: Object,\n  maskedContext: Object,\n): void {\n  if (disableLegacyContext) {\n    return;\n  } else {\n    const instance = workInProgress.stateNode;\n    instance.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext;\n    instance.__reactInternalMemoizedMaskedChildContext = maskedContext;\n  }\n}\n\nfunction getMaskedContext(\n  workInProgress: Fiber,\n  unmaskedContext: Object,\n): Object {\n  if (disableLegacyContext) {\n    return emptyContextObject;\n  } else {\n    const type = workInProgress.type;\n    const contextTypes = type.contextTypes;\n    if (!contextTypes) {\n      return emptyContextObject;\n    }\n\n    // Avoid recreating masked context unless unmasked context has changed.\n    // Failing to do this will result in unnecessary calls to componentWillReceiveProps.\n    // This may trigger infinite loops if componentWillReceiveProps calls setState.\n    const instance = workInProgress.stateNode;\n    if (\n      instance &&\n      instance.__reactInternalMemoizedUnmaskedChildContext === unmaskedContext\n    ) {\n      return instance.__reactInternalMemoizedMaskedChildContext;\n    }\n\n    const context = {};\n    for (const key in contextTypes) {\n      context[key] = unmaskedContext[key];\n    }\n\n    if (__DEV__) {\n      const name = getComponentNameFromFiber(workInProgress) || 'Unknown';\n      checkPropTypes(contextTypes, context, 'context', name);\n    }\n\n    // Cache unmasked context so we can avoid recreating masked context unless necessary.\n    // Context is created before the class component is instantiated so check for instance.\n    if (instance) {\n      cacheContext(workInProgress, unmaskedContext, context);\n    }\n\n    return context;\n  }\n}\n\nfunction hasContextChanged(): boolean {\n  if (disableLegacyContext) {\n    return false;\n  } else {\n    return didPerformWorkStackCursor.current;\n  }\n}\n\nfunction isContextProvider(type: Function): boolean {\n  if (disableLegacyContext) {\n    return false;\n  } else {\n    const childContextTypes = type.childContextTypes;\n    return childContextTypes !== null && childContextTypes !== undefined;\n  }\n}\n\nfunction popContext(fiber: Fiber): void {\n  if (disableLegacyContext) {\n    return;\n  } else {\n    pop(didPerformWorkStackCursor, fiber);\n    pop(contextStackCursor, fiber);\n  }\n}\n\nfunction popTopLevelContextObject(fiber: Fiber): void {\n  if (disableLegacyContext) {\n    return;\n  } else {\n    pop(didPerformWorkStackCursor, fiber);\n    pop(contextStackCursor, fiber);\n  }\n}\n\nfunction pushTopLevelContextObject(\n  fiber: Fiber,\n  context: Object,\n  didChange: boolean,\n): void {\n  if (disableLegacyContext) {\n    return;\n  } else {\n    invariant(\n      contextStackCursor.current === emptyContextObject,\n      'Unexpected context found on stack. ' +\n        'This error is likely caused by a bug in React. Please file an issue.',\n    );\n\n    push(contextStackCursor, context, fiber);\n    push(didPerformWorkStackCursor, didChange, fiber);\n  }\n}\n\nfunction processChildContext(\n  fiber: Fiber,\n  type: any,\n  parentContext: Object,\n): Object {\n  if (disableLegacyContext) {\n    return parentContext;\n  } else {\n    const instance = fiber.stateNode;\n    const childContextTypes = type.childContextTypes;\n\n    // TODO (bvaughn) Replace this behavior with an invariant() in the future.\n    // It has only been added in Fiber to match the (unintentional) behavior in Stack.\n    if (typeof instance.getChildContext !== 'function') {\n      if (__DEV__) {\n        const componentName = getComponentNameFromFiber(fiber) || 'Unknown';\n\n        if (!warnedAboutMissingGetChildContext[componentName]) {\n          warnedAboutMissingGetChildContext[componentName] = true;\n          console.error(\n            '%s.childContextTypes is specified but there is no getChildContext() method ' +\n              'on the instance. You can either define getChildContext() on %s or remove ' +\n              'childContextTypes from it.',\n            componentName,\n            componentName,\n          );\n        }\n      }\n      return parentContext;\n    }\n\n    const childContext = instance.getChildContext();\n    for (const contextKey in childContext) {\n      invariant(\n        contextKey in childContextTypes,\n        '%s.getChildContext(): key \"%s\" is not defined in childContextTypes.',\n        getComponentNameFromFiber(fiber) || 'Unknown',\n        contextKey,\n      );\n    }\n    if (__DEV__) {\n      const name = getComponentNameFromFiber(fiber) || 'Unknown';\n      checkPropTypes(childContextTypes, childContext, 'child context', name);\n    }\n\n    return {...parentContext, ...childContext};\n  }\n}\n\nfunction pushContextProvider(workInProgress: Fiber): boolean {\n  if (disableLegacyContext) {\n    return false;\n  } else {\n    const instance = workInProgress.stateNode;\n    // We push the context as early as possible to ensure stack integrity.\n    // If the instance does not exist yet, we will push null at first,\n    // and replace it on the stack later when invalidating the context.\n    const memoizedMergedChildContext =\n      (instance && instance.__reactInternalMemoizedMergedChildContext) ||\n      emptyContextObject;\n\n    // Remember the parent context so we can merge with it later.\n    // Inherit the parent's did-perform-work value to avoid inadvertently blocking updates.\n    previousContext = contextStackCursor.current;\n    push(contextStackCursor, memoizedMergedChildContext, workInProgress);\n    push(\n      didPerformWorkStackCursor,\n      didPerformWorkStackCursor.current,\n      workInProgress,\n    );\n\n    return true;\n  }\n}\n\nfunction invalidateContextProvider(\n  workInProgress: Fiber,\n  type: any,\n  didChange: boolean,\n): void {\n  if (disableLegacyContext) {\n    return;\n  } else {\n    const instance = workInProgress.stateNode;\n    invariant(\n      instance,\n      'Expected to have an instance by this point. ' +\n        'This error is likely caused by a bug in React. Please file an issue.',\n    );\n\n    if (didChange) {\n      // Merge parent and own context.\n      // Skip this if we're not updating due to sCU.\n      // This avoids unnecessarily recomputing memoized values.\n      const mergedContext = processChildContext(\n        workInProgress,\n        type,\n        previousContext,\n      );\n      instance.__reactInternalMemoizedMergedChildContext = mergedContext;\n\n      // Replace the old (or empty) context with the new one.\n      // It is important to unwind the context in the reverse order.\n      pop(didPerformWorkStackCursor, workInProgress);\n      pop(contextStackCursor, workInProgress);\n      // Now push the new context and mark that it has changed.\n      push(contextStackCursor, mergedContext, workInProgress);\n      push(didPerformWorkStackCursor, didChange, workInProgress);\n    } else {\n      pop(didPerformWorkStackCursor, workInProgress);\n      push(didPerformWorkStackCursor, didChange, workInProgress);\n    }\n  }\n}\n\nfunction findCurrentUnmaskedContext(fiber: Fiber): Object {\n  if (disableLegacyContext) {\n    return emptyContextObject;\n  } else {\n    // Currently this is only used with renderSubtreeIntoContainer; not sure if it\n    // makes sense elsewhere\n    invariant(\n      isFiberMounted(fiber) && fiber.tag === ClassComponent,\n      'Expected subtree parent to be a mounted class component. ' +\n        'This error is likely caused by a bug in React. Please file an issue.',\n    );\n\n    let node = fiber;\n    do {\n      switch (node.tag) {\n        case HostRoot:\n          return node.stateNode.context;\n        case ClassComponent: {\n          const Component = node.type;\n          if (isContextProvider(Component)) {\n            return node.stateNode.__reactInternalMemoizedMergedChildContext;\n          }\n          break;\n        }\n      }\n      node = node.return;\n    } while (node !== null);\n    invariant(\n      false,\n      'Found unexpected detached subtree parent. ' +\n        'This error is likely caused by a bug in React. Please file an issue.',\n    );\n  }\n}\n\nexport {\n  getUnmaskedContext,\n  cacheContext,\n  getMaskedContext,\n  hasContextChanged,\n  popContext,\n  popTopLevelContextObject,\n  pushTopLevelContextObject,\n  processChildContext,\n  isContextProvider,\n  pushContextProvider,\n  invalidateContextProvider,\n  findCurrentUnmaskedContext,\n};\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nexport type RootTag = 0 | 1;\n\nexport const LegacyRoot = 0;\nexport const ConcurrentRoot = 1;\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {SchedulerCallback} from './Scheduler';\n\nimport {\n  DiscreteEventPriority,\n  getCurrentUpdatePriority,\n  setCurrentUpdatePriority,\n} from './ReactEventPriorities.old';\nimport {ImmediatePriority, scheduleCallback} from './Scheduler';\n\nlet syncQueue: Array<SchedulerCallback> | null = null;\nlet includesLegacySyncCallbacks: boolean = false;\nlet isFlushingSyncQueue: boolean = false;\n\nexport function scheduleSyncCallback(callback: SchedulerCallback) {\n  // Push this callback into an internal queue. We'll flush these either in\n  // the next tick, or earlier if something calls `flushSyncCallbackQueue`.\n  if (syncQueue === null) {\n    syncQueue = [callback];\n  } else {\n    // Push onto existing queue. Don't need to schedule a callback because\n    // we already scheduled one when we created the queue.\n    syncQueue.push(callback);\n  }\n}\n\nexport function scheduleLegacySyncCallback(callback: SchedulerCallback) {\n  includesLegacySyncCallbacks = true;\n  scheduleSyncCallback(callback);\n}\n\nexport function flushSyncCallbacksOnlyInLegacyMode() {\n  // Only flushes the queue if there's a legacy sync callback scheduled.\n  // TODO: There's only a single type of callback: performSyncOnWorkOnRoot. So\n  // it might make more sense for the queue to be a list of roots instead of a\n  // list of generic callbacks. Then we can have two: one for legacy roots, one\n  // for concurrent roots. And this method would only flush the legacy ones.\n  if (includesLegacySyncCallbacks) {\n    flushSyncCallbacks();\n  }\n}\n\nexport function flushSyncCallbacks() {\n  if (!isFlushingSyncQueue && syncQueue !== null) {\n    // Prevent re-entrance.\n    isFlushingSyncQueue = true;\n    let i = 0;\n    const previousUpdatePriority = getCurrentUpdatePriority();\n    try {\n      const isSync = true;\n      const queue = syncQueue;\n      // TODO: Is this necessary anymore? The only user code that runs in this\n      // queue is in the render or commit phases.\n      setCurrentUpdatePriority(DiscreteEventPriority);\n      for (; i < queue.length; i++) {\n        let callback = queue[i];\n        do {\n          callback = callback(isSync);\n        } while (callback !== null);\n      }\n      syncQueue = null;\n      includesLegacySyncCallbacks = false;\n    } catch (error) {\n      // If something throws, leave the remaining callbacks on the queue.\n      if (syncQueue !== null) {\n        syncQueue = syncQueue.slice(i + 1);\n      }\n      // Resume flushing in the next tick\n      scheduleCallback(ImmediatePriority, flushSyncCallbacks);\n      throw error;\n    } finally {\n      setCurrentUpdatePriority(previousUpdatePriority);\n      isFlushingSyncQueue = false;\n    }\n  }\n  return null;\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n// TODO: this is special because it gets imported during build.\n//\n// TODO: 17.0.3 has not been released to NPM;\n// It exists as a placeholder so that DevTools can support work tag changes between releases.\n// When we next publish a release (either 17.0.3 or 17.1.0), update the matching TODO in backend/renderer.js\n// TODO: This module is used both by the release scripts and to expose a version\n// at runtime. We should instead inject the version number as part of the build\n// process, and use the ReactVersions.js module as the single source of truth.\nexport default '17.0.3';\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport ReactSharedInternals from 'shared/ReactSharedInternals';\n\nconst {ReactCurrentBatchConfig} = ReactSharedInternals;\n\nexport const NoTransition = 0;\n\nexport function requestCurrentTransition(): number {\n  return ReactCurrentBatchConfig.transition;\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\n/**\n * inlined Object.is polyfill to avoid requiring consumers ship their own\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is\n */\nfunction is(x: any, y: any) {\n  return (\n    (x === y && (x !== 0 || 1 / x === 1 / y)) || (x !== x && y !== y) // eslint-disable-line no-self-compare\n  );\n}\n\nconst objectIs: (x: any, y: any) => boolean =\n  typeof Object.is === 'function' ? Object.is : is;\n\nexport default objectIs;\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport is from './objectIs';\nimport hasOwnProperty from './hasOwnProperty';\n\n/**\n * Performs equality by iterating through keys on an object and returning false\n * when any key has values which are not strictly equal between the arguments.\n * Returns true when the values of all keys are strictly equal.\n */\nfunction shallowEqual(objA: mixed, objB: mixed): boolean {\n  if (is(objA, objB)) {\n    return true;\n  }\n\n  if (\n    typeof objA !== 'object' ||\n    objA === null ||\n    typeof objB !== 'object' ||\n    objB === null\n  ) {\n    return false;\n  }\n\n  const keysA = Object.keys(objA);\n  const keysB = Object.keys(objB);\n\n  if (keysA.length !== keysB.length) {\n    return false;\n  }\n\n  // Test for A's keys different from B.\n  for (let i = 0; i < keysA.length; i++) {\n    if (\n      !hasOwnProperty.call(objB, keysA[i]) ||\n      !is(objA[keysA[i]], objB[keysA[i]])\n    ) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nexport default shallowEqual;\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Fiber} from './ReactInternalTypes';\n\nimport {\n  HostComponent,\n  LazyComponent,\n  SuspenseComponent,\n  SuspenseListComponent,\n  FunctionComponent,\n  IndeterminateComponent,\n  ForwardRef,\n  SimpleMemoComponent,\n  ClassComponent,\n} from './ReactWorkTags';\nimport {\n  describeBuiltInComponentFrame,\n  describeFunctionComponentFrame,\n  describeClassComponentFrame,\n} from 'shared/ReactComponentStackFrame';\n\nfunction describeFiber(fiber: Fiber): string {\n  const owner: null | Function = __DEV__\n    ? fiber._debugOwner\n      ? fiber._debugOwner.type\n      : null\n    : null;\n  const source = __DEV__ ? fiber._debugSource : null;\n  switch (fiber.tag) {\n    case HostComponent:\n      return describeBuiltInComponentFrame(fiber.type, source, owner);\n    case LazyComponent:\n      return describeBuiltInComponentFrame('Lazy', source, owner);\n    case SuspenseComponent:\n      return describeBuiltInComponentFrame('Suspense', source, owner);\n    case SuspenseListComponent:\n      return describeBuiltInComponentFrame('SuspenseList', source, owner);\n    case FunctionComponent:\n    case IndeterminateComponent:\n    case SimpleMemoComponent:\n      return describeFunctionComponentFrame(fiber.type, source, owner);\n    case ForwardRef:\n      return describeFunctionComponentFrame(fiber.type.render, source, owner);\n    case ClassComponent:\n      return describeClassComponentFrame(fiber.type, source, owner);\n    default:\n      return '';\n  }\n}\n\nexport function getStackByFiberInDevAndProd(workInProgress: Fiber): string {\n  try {\n    let info = '';\n    let node = workInProgress;\n    do {\n      info += describeFiber(node);\n      node = node.return;\n    } while (node);\n    return info;\n  } catch (x) {\n    return '\\nError generating stack: ' + x.message + '\\n' + x.stack;\n  }\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Fiber} from './ReactInternalTypes';\n\nimport ReactSharedInternals from 'shared/ReactSharedInternals';\nimport {getStackByFiberInDevAndProd} from './ReactFiberComponentStack';\nimport getComponentNameFromFiber from 'react-reconciler/src/getComponentNameFromFiber';\n\nconst ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;\n\nexport let current: Fiber | null = null;\nexport let isRendering: boolean = false;\n\nexport function getCurrentFiberOwnerNameInDevOrNull(): string | null {\n  if (__DEV__) {\n    if (current === null) {\n      return null;\n    }\n    const owner = current._debugOwner;\n    if (owner !== null && typeof owner !== 'undefined') {\n      return getComponentNameFromFiber(owner);\n    }\n  }\n  return null;\n}\n\nfunction getCurrentFiberStackInDev(): string {\n  if (__DEV__) {\n    if (current === null) {\n      return '';\n    }\n    // Safe because if current fiber exists, we are reconciling,\n    // and it is guaranteed to be the work-in-progress version.\n    return getStackByFiberInDevAndProd(current);\n  }\n  return '';\n}\n\nexport function resetCurrentFiber() {\n  if (__DEV__) {\n    ReactDebugCurrentFrame.getCurrentStack = null;\n    current = null;\n    isRendering = false;\n  }\n}\n\nexport function setCurrentFiber(fiber: Fiber) {\n  if (__DEV__) {\n    ReactDebugCurrentFrame.getCurrentStack = getCurrentFiberStackInDev;\n    current = fiber;\n    isRendering = false;\n  }\n}\n\nexport function setIsRendering(rendering: boolean) {\n  if (__DEV__) {\n    isRendering = rendering;\n  }\n}\n\nexport function getIsRendering() {\n  if (__DEV__) {\n    return isRendering;\n  }\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Fiber} from './ReactInternalTypes';\n\nimport {\n  resetCurrentFiber as resetCurrentDebugFiberInDEV,\n  setCurrentFiber as setCurrentDebugFiberInDEV,\n} from './ReactCurrentFiber';\nimport getComponentNameFromFiber from 'react-reconciler/src/getComponentNameFromFiber';\nimport {StrictLegacyMode} from './ReactTypeOfMode';\n\ntype FiberArray = Array<Fiber>;\ntype FiberToFiberComponentsMap = Map<Fiber, FiberArray>;\n\nconst ReactStrictModeWarnings = {\n  recordUnsafeLifecycleWarnings(fiber: Fiber, instance: any): void {},\n  flushPendingUnsafeLifecycleWarnings(): void {},\n  recordLegacyContextWarning(fiber: Fiber, instance: any): void {},\n  flushLegacyContextWarning(): void {},\n  discardPendingWarnings(): void {},\n};\n\nif (__DEV__) {\n  const findStrictRoot = (fiber: Fiber): Fiber | null => {\n    let maybeStrictRoot = null;\n\n    let node = fiber;\n    while (node !== null) {\n      if (node.mode & StrictLegacyMode) {\n        maybeStrictRoot = node;\n      }\n      node = node.return;\n    }\n\n    return maybeStrictRoot;\n  };\n\n  const setToSortedString = set => {\n    const array = [];\n    set.forEach(value => {\n      array.push(value);\n    });\n    return array.sort().join(', ');\n  };\n\n  let pendingComponentWillMountWarnings: Array<Fiber> = [];\n  let pendingUNSAFE_ComponentWillMountWarnings: Array<Fiber> = [];\n  let pendingComponentWillReceivePropsWarnings: Array<Fiber> = [];\n  let pendingUNSAFE_ComponentWillReceivePropsWarnings: Array<Fiber> = [];\n  let pendingComponentWillUpdateWarnings: Array<Fiber> = [];\n  let pendingUNSAFE_ComponentWillUpdateWarnings: Array<Fiber> = [];\n\n  // Tracks components we have already warned about.\n  const didWarnAboutUnsafeLifecycles = new Set();\n\n  ReactStrictModeWarnings.recordUnsafeLifecycleWarnings = (\n    fiber: Fiber,\n    instance: any,\n  ) => {\n    // Dedupe strategy: Warn once per component.\n    if (didWarnAboutUnsafeLifecycles.has(fiber.type)) {\n      return;\n    }\n\n    if (\n      typeof instance.componentWillMount === 'function' &&\n      // Don't warn about react-lifecycles-compat polyfilled components.\n      instance.componentWillMount.__suppressDeprecationWarning !== true\n    ) {\n      pendingComponentWillMountWarnings.push(fiber);\n    }\n\n    if (\n      fiber.mode & StrictLegacyMode &&\n      typeof instance.UNSAFE_componentWillMount === 'function'\n    ) {\n      pendingUNSAFE_ComponentWillMountWarnings.push(fiber);\n    }\n\n    if (\n      typeof instance.componentWillReceiveProps === 'function' &&\n      instance.componentWillReceiveProps.__suppressDeprecationWarning !== true\n    ) {\n      pendingComponentWillReceivePropsWarnings.push(fiber);\n    }\n\n    if (\n      fiber.mode & StrictLegacyMode &&\n      typeof instance.UNSAFE_componentWillReceiveProps === 'function'\n    ) {\n      pendingUNSAFE_ComponentWillReceivePropsWarnings.push(fiber);\n    }\n\n    if (\n      typeof instance.componentWillUpdate === 'function' &&\n      instance.componentWillUpdate.__suppressDeprecationWarning !== true\n    ) {\n      pendingComponentWillUpdateWarnings.push(fiber);\n    }\n\n    if (\n      fiber.mode & StrictLegacyMode &&\n      typeof instance.UNSAFE_componentWillUpdate === 'function'\n    ) {\n      pendingUNSAFE_ComponentWillUpdateWarnings.push(fiber);\n    }\n  };\n\n  ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings = () => {\n    // We do an initial pass to gather component names\n    const componentWillMountUniqueNames = new Set();\n    if (pendingComponentWillMountWarnings.length > 0) {\n      pendingComponentWillMountWarnings.forEach(fiber => {\n        componentWillMountUniqueNames.add(\n          getComponentNameFromFiber(fiber) || 'Component',\n        );\n        didWarnAboutUnsafeLifecycles.add(fiber.type);\n      });\n      pendingComponentWillMountWarnings = [];\n    }\n\n    const UNSAFE_componentWillMountUniqueNames = new Set();\n    if (pendingUNSAFE_ComponentWillMountWarnings.length > 0) {\n      pendingUNSAFE_ComponentWillMountWarnings.forEach(fiber => {\n        UNSAFE_componentWillMountUniqueNames.add(\n          getComponentNameFromFiber(fiber) || 'Component',\n        );\n        didWarnAboutUnsafeLifecycles.add(fiber.type);\n      });\n      pendingUNSAFE_ComponentWillMountWarnings = [];\n    }\n\n    const componentWillReceivePropsUniqueNames = new Set();\n    if (pendingComponentWillReceivePropsWarnings.length > 0) {\n      pendingComponentWillReceivePropsWarnings.forEach(fiber => {\n        componentWillReceivePropsUniqueNames.add(\n          getComponentNameFromFiber(fiber) || 'Component',\n        );\n        didWarnAboutUnsafeLifecycles.add(fiber.type);\n      });\n\n      pendingComponentWillReceivePropsWarnings = [];\n    }\n\n    const UNSAFE_componentWillReceivePropsUniqueNames = new Set();\n    if (pendingUNSAFE_ComponentWillReceivePropsWarnings.length > 0) {\n      pendingUNSAFE_ComponentWillReceivePropsWarnings.forEach(fiber => {\n        UNSAFE_componentWillReceivePropsUniqueNames.add(\n          getComponentNameFromFiber(fiber) || 'Component',\n        );\n        didWarnAboutUnsafeLifecycles.add(fiber.type);\n      });\n\n      pendingUNSAFE_ComponentWillReceivePropsWarnings = [];\n    }\n\n    const componentWillUpdateUniqueNames = new Set();\n    if (pendingComponentWillUpdateWarnings.length > 0) {\n      pendingComponentWillUpdateWarnings.forEach(fiber => {\n        componentWillUpdateUniqueNames.add(\n          getComponentNameFromFiber(fiber) || 'Component',\n        );\n        didWarnAboutUnsafeLifecycles.add(fiber.type);\n      });\n\n      pendingComponentWillUpdateWarnings = [];\n    }\n\n    const UNSAFE_componentWillUpdateUniqueNames = new Set();\n    if (pendingUNSAFE_ComponentWillUpdateWarnings.length > 0) {\n      pendingUNSAFE_ComponentWillUpdateWarnings.forEach(fiber => {\n        UNSAFE_componentWillUpdateUniqueNames.add(\n          getComponentNameFromFiber(fiber) || 'Component',\n        );\n        didWarnAboutUnsafeLifecycles.add(fiber.type);\n      });\n\n      pendingUNSAFE_ComponentWillUpdateWarnings = [];\n    }\n\n    // Finally, we flush all the warnings\n    // UNSAFE_ ones before the deprecated ones, since they'll be 'louder'\n    if (UNSAFE_componentWillMountUniqueNames.size > 0) {\n      const sortedNames = setToSortedString(\n        UNSAFE_componentWillMountUniqueNames,\n      );\n      console.error(\n        'Using UNSAFE_componentWillMount in strict mode is not recommended and may indicate bugs in your code. ' +\n          'See https://reactjs.org/link/unsafe-component-lifecycles for details.\\n\\n' +\n          '* Move code with side effects to componentDidMount, and set initial state in the constructor.\\n' +\n          '\\nPlease update the following components: %s',\n        sortedNames,\n      );\n    }\n\n    if (UNSAFE_componentWillReceivePropsUniqueNames.size > 0) {\n      const sortedNames = setToSortedString(\n        UNSAFE_componentWillReceivePropsUniqueNames,\n      );\n      console.error(\n        'Using UNSAFE_componentWillReceiveProps in strict mode is not recommended ' +\n          'and may indicate bugs in your code. ' +\n          'See https://reactjs.org/link/unsafe-component-lifecycles for details.\\n\\n' +\n          '* Move data fetching code or side effects to componentDidUpdate.\\n' +\n          \"* If you're updating state whenever props change, \" +\n          'refactor your code to use memoization techniques or move it to ' +\n          'static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\\n' +\n          '\\nPlease update the following components: %s',\n        sortedNames,\n      );\n    }\n\n    if (UNSAFE_componentWillUpdateUniqueNames.size > 0) {\n      const sortedNames = setToSortedString(\n        UNSAFE_componentWillUpdateUniqueNames,\n      );\n      console.error(\n        'Using UNSAFE_componentWillUpdate in strict mode is not recommended ' +\n          'and may indicate bugs in your code. ' +\n          'See https://reactjs.org/link/unsafe-component-lifecycles for details.\\n\\n' +\n          '* Move data fetching code or side effects to componentDidUpdate.\\n' +\n          '\\nPlease update the following components: %s',\n        sortedNames,\n      );\n    }\n\n    if (componentWillMountUniqueNames.size > 0) {\n      const sortedNames = setToSortedString(componentWillMountUniqueNames);\n\n      console.warn(\n        'componentWillMount has been renamed, and is not recommended for use. ' +\n          'See https://reactjs.org/link/unsafe-component-lifecycles for details.\\n\\n' +\n          '* Move code with side effects to componentDidMount, and set initial state in the constructor.\\n' +\n          '* Rename componentWillMount to UNSAFE_componentWillMount to suppress ' +\n          'this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. ' +\n          'To rename all deprecated lifecycles to their new names, you can run ' +\n          '`npx react-codemod rename-unsafe-lifecycles` in your project source folder.\\n' +\n          '\\nPlease update the following components: %s',\n        sortedNames,\n      );\n    }\n\n    if (componentWillReceivePropsUniqueNames.size > 0) {\n      const sortedNames = setToSortedString(\n        componentWillReceivePropsUniqueNames,\n      );\n\n      console.warn(\n        'componentWillReceiveProps has been renamed, and is not recommended for use. ' +\n          'See https://reactjs.org/link/unsafe-component-lifecycles for details.\\n\\n' +\n          '* Move data fetching code or side effects to componentDidUpdate.\\n' +\n          \"* If you're updating state whenever props change, refactor your \" +\n          'code to use memoization techniques or move it to ' +\n          'static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\\n' +\n          '* Rename componentWillReceiveProps to UNSAFE_componentWillReceiveProps to suppress ' +\n          'this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. ' +\n          'To rename all deprecated lifecycles to their new names, you can run ' +\n          '`npx react-codemod rename-unsafe-lifecycles` in your project source folder.\\n' +\n          '\\nPlease update the following components: %s',\n        sortedNames,\n      );\n    }\n\n    if (componentWillUpdateUniqueNames.size > 0) {\n      const sortedNames = setToSortedString(componentWillUpdateUniqueNames);\n\n      console.warn(\n        'componentWillUpdate has been renamed, and is not recommended for use. ' +\n          'See https://reactjs.org/link/unsafe-component-lifecycles for details.\\n\\n' +\n          '* Move data fetching code or side effects to componentDidUpdate.\\n' +\n          '* Rename componentWillUpdate to UNSAFE_componentWillUpdate to suppress ' +\n          'this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. ' +\n          'To rename all deprecated lifecycles to their new names, you can run ' +\n          '`npx react-codemod rename-unsafe-lifecycles` in your project source folder.\\n' +\n          '\\nPlease update the following components: %s',\n        sortedNames,\n      );\n    }\n  };\n\n  let pendingLegacyContextWarning: FiberToFiberComponentsMap = new Map();\n\n  // Tracks components we have already warned about.\n  const didWarnAboutLegacyContext = new Set();\n\n  ReactStrictModeWarnings.recordLegacyContextWarning = (\n    fiber: Fiber,\n    instance: any,\n  ) => {\n    const strictRoot = findStrictRoot(fiber);\n    if (strictRoot === null) {\n      console.error(\n        'Expected to find a StrictMode component in a strict mode tree. ' +\n          'This error is likely caused by a bug in React. Please file an issue.',\n      );\n      return;\n    }\n\n    // Dedup strategy: Warn once per component.\n    if (didWarnAboutLegacyContext.has(fiber.type)) {\n      return;\n    }\n\n    let warningsForRoot = pendingLegacyContextWarning.get(strictRoot);\n\n    if (\n      fiber.type.contextTypes != null ||\n      fiber.type.childContextTypes != null ||\n      (instance !== null && typeof instance.getChildContext === 'function')\n    ) {\n      if (warningsForRoot === undefined) {\n        warningsForRoot = [];\n        pendingLegacyContextWarning.set(strictRoot, warningsForRoot);\n      }\n      warningsForRoot.push(fiber);\n    }\n  };\n\n  ReactStrictModeWarnings.flushLegacyContextWarning = () => {\n    ((pendingLegacyContextWarning: any): FiberToFiberComponentsMap).forEach(\n      (fiberArray: FiberArray, strictRoot) => {\n        if (fiberArray.length === 0) {\n          return;\n        }\n        const firstFiber = fiberArray[0];\n\n        const uniqueNames = new Set();\n        fiberArray.forEach(fiber => {\n          uniqueNames.add(getComponentNameFromFiber(fiber) || 'Component');\n          didWarnAboutLegacyContext.add(fiber.type);\n        });\n\n        const sortedNames = setToSortedString(uniqueNames);\n\n        try {\n          setCurrentDebugFiberInDEV(firstFiber);\n          console.error(\n            'Legacy context API has been detected within a strict-mode tree.' +\n              '\\n\\nThe old API will be supported in all 16.x releases, but applications ' +\n              'using it should migrate to the new version.' +\n              '\\n\\nPlease update the following components: %s' +\n              '\\n\\nLearn more about this warning here: https://reactjs.org/link/legacy-context',\n            sortedNames,\n          );\n        } finally {\n          resetCurrentDebugFiberInDEV();\n        }\n      },\n    );\n  };\n\n  ReactStrictModeWarnings.discardPendingWarnings = () => {\n    pendingComponentWillMountWarnings = [];\n    pendingUNSAFE_ComponentWillMountWarnings = [];\n    pendingComponentWillReceivePropsWarnings = [];\n    pendingUNSAFE_ComponentWillReceivePropsWarnings = [];\n    pendingComponentWillUpdateWarnings = [];\n    pendingUNSAFE_ComponentWillUpdateWarnings = [];\n    pendingLegacyContextWarning = new Map();\n  };\n}\n\nexport default ReactStrictModeWarnings;\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nexport function resolveDefaultProps(Component: any, baseProps: Object): Object {\n  if (Component && Component.defaultProps) {\n    // Resolve default props. Taken from ReactElement\n    const props = Object.assign({}, baseProps);\n    const defaultProps = Component.defaultProps;\n    for (const propName in defaultProps) {\n      if (props[propName] === undefined) {\n        props[propName] = defaultProps[propName];\n      }\n    }\n    return props;\n  }\n  return baseProps;\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {ReactContext, ReactProviderType} from 'shared/ReactTypes';\nimport type {\n  Fiber,\n  ContextDependency,\n  Dependencies,\n} from './ReactInternalTypes';\nimport type {StackCursor} from './ReactFiberStack.old';\nimport type {Lanes} from './ReactFiberLane.old';\nimport type {SharedQueue} from './ReactUpdateQueue.old';\n\nimport {isPrimaryRenderer} from './ReactFiberHostConfig';\nimport {createCursor, push, pop} from './ReactFiberStack.old';\nimport {\n  ContextProvider,\n  ClassComponent,\n  DehydratedFragment,\n} from './ReactWorkTags';\nimport {\n  NoLanes,\n  NoTimestamp,\n  isSubsetOfLanes,\n  includesSomeLane,\n  mergeLanes,\n  pickArbitraryLane,\n} from './ReactFiberLane.old';\nimport {\n  NoFlags,\n  DidPropagateContext,\n  NeedsPropagation,\n} from './ReactFiberFlags';\n\nimport invariant from 'shared/invariant';\nimport is from 'shared/objectIs';\nimport {createUpdate, ForceUpdate} from './ReactUpdateQueue.old';\nimport {markWorkInProgressReceivedUpdate} from './ReactFiberBeginWork.old';\nimport {\n  enableSuspenseServerRenderer,\n  enableLazyContextPropagation,\n} from 'shared/ReactFeatureFlags';\n\nconst valueCursor: StackCursor<mixed> = createCursor(null);\n\nlet rendererSigil;\nif (__DEV__) {\n  // Use this to detect multiple renderers using the same context\n  rendererSigil = {};\n}\n\nlet currentlyRenderingFiber: Fiber | null = null;\nlet lastContextDependency: ContextDependency<mixed> | null = null;\nlet lastFullyObservedContext: ReactContext<any> | null = null;\n\nlet isDisallowedContextReadInDEV: boolean = false;\n\nexport function resetContextDependencies(): void {\n  // This is called right before React yields execution, to ensure `readContext`\n  // cannot be called outside the render phase.\n  currentlyRenderingFiber = null;\n  lastContextDependency = null;\n  lastFullyObservedContext = null;\n  if (__DEV__) {\n    isDisallowedContextReadInDEV = false;\n  }\n}\n\nexport function enterDisallowedContextReadInDEV(): void {\n  if (__DEV__) {\n    isDisallowedContextReadInDEV = true;\n  }\n}\n\nexport function exitDisallowedContextReadInDEV(): void {\n  if (__DEV__) {\n    isDisallowedContextReadInDEV = false;\n  }\n}\n\nexport function pushProvider<T>(\n  providerFiber: Fiber,\n  context: ReactContext<T>,\n  nextValue: T,\n): void {\n  if (isPrimaryRenderer) {\n    push(valueCursor, context._currentValue, providerFiber);\n\n    context._currentValue = nextValue;\n    if (__DEV__) {\n      if (\n        context._currentRenderer !== undefined &&\n        context._currentRenderer !== null &&\n        context._currentRenderer !== rendererSigil\n      ) {\n        console.error(\n          'Detected multiple renderers concurrently rendering the ' +\n            'same context provider. This is currently unsupported.',\n        );\n      }\n      context._currentRenderer = rendererSigil;\n    }\n  } else {\n    push(valueCursor, context._currentValue2, providerFiber);\n\n    context._currentValue2 = nextValue;\n    if (__DEV__) {\n      if (\n        context._currentRenderer2 !== undefined &&\n        context._currentRenderer2 !== null &&\n        context._currentRenderer2 !== rendererSigil\n      ) {\n        console.error(\n          'Detected multiple renderers concurrently rendering the ' +\n            'same context provider. This is currently unsupported.',\n        );\n      }\n      context._currentRenderer2 = rendererSigil;\n    }\n  }\n}\n\nexport function popProvider(\n  context: ReactContext<any>,\n  providerFiber: Fiber,\n): void {\n  const currentValue = valueCursor.current;\n  pop(valueCursor, providerFiber);\n  if (isPrimaryRenderer) {\n    context._currentValue = currentValue;\n  } else {\n    context._currentValue2 = currentValue;\n  }\n}\n\nexport function scheduleWorkOnParentPath(\n  parent: Fiber | null,\n  renderLanes: Lanes,\n) {\n  // Update the child lanes of all the ancestors, including the alternates.\n  let node = parent;\n  while (node !== null) {\n    const alternate = node.alternate;\n    if (!isSubsetOfLanes(node.childLanes, renderLanes)) {\n      node.childLanes = mergeLanes(node.childLanes, renderLanes);\n      if (alternate !== null) {\n        alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes);\n      }\n    } else if (\n      alternate !== null &&\n      !isSubsetOfLanes(alternate.childLanes, renderLanes)\n    ) {\n      alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes);\n    } else {\n      // Neither alternate was updated, which means the rest of the\n      // ancestor path already has sufficient priority.\n      break;\n    }\n    node = node.return;\n  }\n}\n\nexport function propagateContextChange<T>(\n  workInProgress: Fiber,\n  context: ReactContext<T>,\n  renderLanes: Lanes,\n): void {\n  if (enableLazyContextPropagation) {\n    // TODO: This path is only used by Cache components. Update\n    // lazilyPropagateParentContextChanges to look for Cache components so they\n    // can take advantage of lazy propagation.\n    const forcePropagateEntireTree = true;\n    propagateContextChanges(\n      workInProgress,\n      [context],\n      renderLanes,\n      forcePropagateEntireTree,\n    );\n  } else {\n    propagateContextChange_eager(workInProgress, context, renderLanes);\n  }\n}\n\nfunction propagateContextChange_eager<T>(\n  workInProgress: Fiber,\n  context: ReactContext<T>,\n  renderLanes: Lanes,\n): void {\n  // Only used by eager implementation\n  if (enableLazyContextPropagation) {\n    return;\n  }\n  let fiber = workInProgress.child;\n  if (fiber !== null) {\n    // Set the return pointer of the child to the work-in-progress fiber.\n    fiber.return = workInProgress;\n  }\n  while (fiber !== null) {\n    let nextFiber;\n\n    // Visit this fiber.\n    const list = fiber.dependencies;\n    if (list !== null) {\n      nextFiber = fiber.child;\n\n      let dependency = list.firstContext;\n      while (dependency !== null) {\n        // Check if the context matches.\n        if (dependency.context === context) {\n          // Match! Schedule an update on this fiber.\n          if (fiber.tag === ClassComponent) {\n            // Schedule a force update on the work-in-progress.\n            const lane = pickArbitraryLane(renderLanes);\n            const update = createUpdate(NoTimestamp, lane);\n            update.tag = ForceUpdate;\n            // TODO: Because we don't have a work-in-progress, this will add the\n            // update to the current fiber, too, which means it will persist even if\n            // this render is thrown away. Since it's a race condition, not sure it's\n            // worth fixing.\n\n            // Inlined `enqueueUpdate` to remove interleaved update check\n            const updateQueue = fiber.updateQueue;\n            if (updateQueue === null) {\n              // Only occurs if the fiber has been unmounted.\n            } else {\n              const sharedQueue: SharedQueue<any> = (updateQueue: any).shared;\n              const pending = sharedQueue.pending;\n              if (pending === null) {\n                // This is the first update. Create a circular list.\n                update.next = update;\n              } else {\n                update.next = pending.next;\n                pending.next = update;\n              }\n              sharedQueue.pending = update;\n            }\n          }\n\n          fiber.lanes = mergeLanes(fiber.lanes, renderLanes);\n          const alternate = fiber.alternate;\n          if (alternate !== null) {\n            alternate.lanes = mergeLanes(alternate.lanes, renderLanes);\n          }\n          scheduleWorkOnParentPath(fiber.return, renderLanes);\n\n          // Mark the updated lanes on the list, too.\n          list.lanes = mergeLanes(list.lanes, renderLanes);\n\n          // Since we already found a match, we can stop traversing the\n          // dependency list.\n          break;\n        }\n        dependency = dependency.next;\n      }\n    } else if (fiber.tag === ContextProvider) {\n      // Don't scan deeper if this is a matching provider\n      nextFiber = fiber.type === workInProgress.type ? null : fiber.child;\n    } else if (\n      enableSuspenseServerRenderer &&\n      fiber.tag === DehydratedFragment\n    ) {\n      // If a dehydrated suspense boundary is in this subtree, we don't know\n      // if it will have any context consumers in it. The best we can do is\n      // mark it as having updates.\n      const parentSuspense = fiber.return;\n      invariant(\n        parentSuspense !== null,\n        'We just came from a parent so we must have had a parent. This is a bug in React.',\n      );\n      parentSuspense.lanes = mergeLanes(parentSuspense.lanes, renderLanes);\n      const alternate = parentSuspense.alternate;\n      if (alternate !== null) {\n        alternate.lanes = mergeLanes(alternate.lanes, renderLanes);\n      }\n      // This is intentionally passing this fiber as the parent\n      // because we want to schedule this fiber as having work\n      // on its children. We'll use the childLanes on\n      // this fiber to indicate that a context has changed.\n      scheduleWorkOnParentPath(parentSuspense, renderLanes);\n      nextFiber = fiber.sibling;\n    } else {\n      // Traverse down.\n      nextFiber = fiber.child;\n    }\n\n    if (nextFiber !== null) {\n      // Set the return pointer of the child to the work-in-progress fiber.\n      nextFiber.return = fiber;\n    } else {\n      // No child. Traverse to next sibling.\n      nextFiber = fiber;\n      while (nextFiber !== null) {\n        if (nextFiber === workInProgress) {\n          // We're back to the root of this subtree. Exit.\n          nextFiber = null;\n          break;\n        }\n        const sibling = nextFiber.sibling;\n        if (sibling !== null) {\n          // Set the return pointer of the sibling to the work-in-progress fiber.\n          sibling.return = nextFiber.return;\n          nextFiber = sibling;\n          break;\n        }\n        // No more siblings. Traverse up.\n        nextFiber = nextFiber.return;\n      }\n    }\n    fiber = nextFiber;\n  }\n}\n\nfunction propagateContextChanges<T>(\n  workInProgress: Fiber,\n  contexts: Array<any>,\n  renderLanes: Lanes,\n  forcePropagateEntireTree: boolean,\n): void {\n  // Only used by lazy implementation\n  if (!enableLazyContextPropagation) {\n    return;\n  }\n  let fiber = workInProgress.child;\n  if (fiber !== null) {\n    // Set the return pointer of the child to the work-in-progress fiber.\n    fiber.return = workInProgress;\n  }\n  while (fiber !== null) {\n    let nextFiber;\n\n    // Visit this fiber.\n    const list = fiber.dependencies;\n    if (list !== null) {\n      nextFiber = fiber.child;\n\n      let dep = list.firstContext;\n      findChangedDep: while (dep !== null) {\n        // Assigning these to constants to help Flow\n        const dependency = dep;\n        const consumer = fiber;\n        findContext: for (let i = 0; i < contexts.length; i++) {\n          const context: ReactContext<T> = contexts[i];\n          // Check if the context matches.\n          // TODO: Compare selected values to bail out early.\n          if (dependency.context === context) {\n            // Match! Schedule an update on this fiber.\n\n            // In the lazy implementation, don't mark a dirty flag on the\n            // dependency itself. Not all changes are propagated, so we can't\n            // rely on the propagation function alone to determine whether\n            // something has changed; the consumer will check. In the future, we\n            // could add back a dirty flag as an optimization to avoid double\n            // checking, but until we have selectors it's not really worth\n            // the trouble.\n            consumer.lanes = mergeLanes(consumer.lanes, renderLanes);\n            const alternate = consumer.alternate;\n            if (alternate !== null) {\n              alternate.lanes = mergeLanes(alternate.lanes, renderLanes);\n            }\n            scheduleWorkOnParentPath(consumer.return, renderLanes);\n\n            if (!forcePropagateEntireTree) {\n              // During lazy propagation, when we find a match, we can defer\n              // propagating changes to the children, because we're going to\n              // visit them during render. We should continue propagating the\n              // siblings, though\n              nextFiber = null;\n            }\n\n            // Since we already found a match, we can stop traversing the\n            // dependency list.\n            break findChangedDep;\n          }\n        }\n        dep = dependency.next;\n      }\n    } else if (\n      enableSuspenseServerRenderer &&\n      fiber.tag === DehydratedFragment\n    ) {\n      // If a dehydrated suspense boundary is in this subtree, we don't know\n      // if it will have any context consumers in it. The best we can do is\n      // mark it as having updates.\n      const parentSuspense = fiber.return;\n      invariant(\n        parentSuspense !== null,\n        'We just came from a parent so we must have had a parent. This is a bug in React.',\n      );\n      parentSuspense.lanes = mergeLanes(parentSuspense.lanes, renderLanes);\n      const alternate = parentSuspense.alternate;\n      if (alternate !== null) {\n        alternate.lanes = mergeLanes(alternate.lanes, renderLanes);\n      }\n      // This is intentionally passing this fiber as the parent\n      // because we want to schedule this fiber as having work\n      // on its children. We'll use the childLanes on\n      // this fiber to indicate that a context has changed.\n      scheduleWorkOnParentPath(parentSuspense, renderLanes);\n      nextFiber = null;\n    } else {\n      // Traverse down.\n      nextFiber = fiber.child;\n    }\n\n    if (nextFiber !== null) {\n      // Set the return pointer of the child to the work-in-progress fiber.\n      nextFiber.return = fiber;\n    } else {\n      // No child. Traverse to next sibling.\n      nextFiber = fiber;\n      while (nextFiber !== null) {\n        if (nextFiber === workInProgress) {\n          // We're back to the root of this subtree. Exit.\n          nextFiber = null;\n          break;\n        }\n        const sibling = nextFiber.sibling;\n        if (sibling !== null) {\n          // Set the return pointer of the sibling to the work-in-progress fiber.\n          sibling.return = nextFiber.return;\n          nextFiber = sibling;\n          break;\n        }\n        // No more siblings. Traverse up.\n        nextFiber = nextFiber.return;\n      }\n    }\n    fiber = nextFiber;\n  }\n}\n\nexport function lazilyPropagateParentContextChanges(\n  current: Fiber,\n  workInProgress: Fiber,\n  renderLanes: Lanes,\n) {\n  const forcePropagateEntireTree = false;\n  propagateParentContextChanges(\n    current,\n    workInProgress,\n    renderLanes,\n    forcePropagateEntireTree,\n  );\n}\n\n// Used for propagating a deferred tree (Suspense, Offscreen). We must propagate\n// to the entire subtree, because we won't revisit it until after the current\n// render has completed, at which point we'll have lost track of which providers\n// have changed.\nexport function propagateParentContextChangesToDeferredTree(\n  current: Fiber,\n  workInProgress: Fiber,\n  renderLanes: Lanes,\n) {\n  const forcePropagateEntireTree = true;\n  propagateParentContextChanges(\n    current,\n    workInProgress,\n    renderLanes,\n    forcePropagateEntireTree,\n  );\n}\n\nfunction propagateParentContextChanges(\n  current: Fiber,\n  workInProgress: Fiber,\n  renderLanes: Lanes,\n  forcePropagateEntireTree: boolean,\n) {\n  if (!enableLazyContextPropagation) {\n    return;\n  }\n\n  // Collect all the parent providers that changed. Since this is usually small\n  // number, we use an Array instead of Set.\n  let contexts = null;\n  let parent = workInProgress;\n  let isInsidePropagationBailout = false;\n  while (parent !== null) {\n    if (!isInsidePropagationBailout) {\n      if ((parent.flags & NeedsPropagation) !== NoFlags) {\n        isInsidePropagationBailout = true;\n      } else if ((parent.flags & DidPropagateContext) !== NoFlags) {\n        break;\n      }\n    }\n\n    if (parent.tag === ContextProvider) {\n      const currentParent = parent.alternate;\n      invariant(\n        currentParent !== null,\n        'Should have a current fiber. This is a bug in React.',\n      );\n      const oldProps = currentParent.memoizedProps;\n      if (oldProps !== null) {\n        const providerType: ReactProviderType<any> = parent.type;\n        const context: ReactContext<any> = providerType._context;\n\n        const newProps = parent.pendingProps;\n        const newValue = newProps.value;\n\n        const oldValue = oldProps.value;\n\n        if (!is(newValue, oldValue)) {\n          if (contexts !== null) {\n            contexts.push(context);\n          } else {\n            contexts = [context];\n          }\n        }\n      }\n    }\n    parent = parent.return;\n  }\n\n  if (contexts !== null) {\n    // If there were any changed providers, search through the children and\n    // propagate their changes.\n    propagateContextChanges(\n      workInProgress,\n      contexts,\n      renderLanes,\n      forcePropagateEntireTree,\n    );\n  }\n\n  // This is an optimization so that we only propagate once per subtree. If a\n  // deeply nested child bails out, and it calls this propagation function, it\n  // uses this flag to know that the remaining ancestor providers have already\n  // been propagated.\n  //\n  // NOTE: This optimization is only necessary because we sometimes enter the\n  // begin phase of nodes that don't have any work scheduled on them —\n  // specifically, the siblings of a node that _does_ have scheduled work. The\n  // siblings will bail out and call this function again, even though we already\n  // propagated content changes to it and its subtree. So we use this flag to\n  // mark that the parent providers already propagated.\n  //\n  // Unfortunately, though, we need to ignore this flag when we're inside a\n  // tree whose context propagation was deferred — that's what the\n  // `NeedsPropagation` flag is for.\n  //\n  // If we could instead bail out before entering the siblings' begin phase,\n  // then we could remove both `DidPropagateContext` and `NeedsPropagation`.\n  // Consider this as part of the next refactor to the fiber tree structure.\n  workInProgress.flags |= DidPropagateContext;\n}\n\nexport function checkIfContextChanged(currentDependencies: Dependencies) {\n  if (!enableLazyContextPropagation) {\n    return false;\n  }\n  // Iterate over the current dependencies to see if something changed. This\n  // only gets called if props and state has already bailed out, so it's a\n  // relatively uncommon path, except at the root of a changed subtree.\n  // Alternatively, we could move these comparisons into `readContext`, but\n  // that's a much hotter path, so I think this is an appropriate trade off.\n  let dependency = currentDependencies.firstContext;\n  while (dependency !== null) {\n    const context = dependency.context;\n    const newValue = isPrimaryRenderer\n      ? context._currentValue\n      : context._currentValue2;\n    const oldValue = dependency.memoizedValue;\n    if (!is(newValue, oldValue)) {\n      return true;\n    }\n    dependency = dependency.next;\n  }\n  return false;\n}\n\nexport function prepareToReadContext(\n  workInProgress: Fiber,\n  renderLanes: Lanes,\n): void {\n  currentlyRenderingFiber = workInProgress;\n  lastContextDependency = null;\n  lastFullyObservedContext = null;\n\n  const dependencies = workInProgress.dependencies;\n  if (dependencies !== null) {\n    if (enableLazyContextPropagation) {\n      // Reset the work-in-progress list\n      dependencies.firstContext = null;\n    } else {\n      const firstContext = dependencies.firstContext;\n      if (firstContext !== null) {\n        if (includesSomeLane(dependencies.lanes, renderLanes)) {\n          // Context list has a pending update. Mark that this fiber performed work.\n          markWorkInProgressReceivedUpdate();\n        }\n        // Reset the work-in-progress list\n        dependencies.firstContext = null;\n      }\n    }\n  }\n}\n\nexport function readContext<T>(context: ReactContext<T>): T {\n  if (__DEV__) {\n    // This warning would fire if you read context inside a Hook like useMemo.\n    // Unlike the class check below, it's not enforced in production for perf.\n    if (isDisallowedContextReadInDEV) {\n      console.error(\n        'Context can only be read while React is rendering. ' +\n          'In classes, you can read it in the render method or getDerivedStateFromProps. ' +\n          'In function components, you can read it directly in the function body, but not ' +\n          'inside Hooks like useReducer() or useMemo().',\n      );\n    }\n  }\n\n  const value = isPrimaryRenderer\n    ? context._currentValue\n    : context._currentValue2;\n\n  if (lastFullyObservedContext === context) {\n    // Nothing to do. We already observe everything in this context.\n  } else {\n    const contextItem = {\n      context: ((context: any): ReactContext<mixed>),\n      memoizedValue: value,\n      next: null,\n    };\n\n    if (lastContextDependency === null) {\n      invariant(\n        currentlyRenderingFiber !== null,\n        'Context can only be read while React is rendering. ' +\n          'In classes, you can read it in the render method or getDerivedStateFromProps. ' +\n          'In function components, you can read it directly in the function body, but not ' +\n          'inside Hooks like useReducer() or useMemo().',\n      );\n\n      // This is the first dependency for this component. Create a new list.\n      lastContextDependency = contextItem;\n      currentlyRenderingFiber.dependencies = {\n        lanes: NoLanes,\n        firstContext: contextItem,\n      };\n      if (enableLazyContextPropagation) {\n        currentlyRenderingFiber.flags |= NeedsPropagation;\n      }\n    } else {\n      // Append a new context item.\n      lastContextDependency = lastContextDependency.next = contextItem;\n    }\n  }\n  return value;\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {UpdateQueue as HookQueue} from './ReactFiberHooks.old';\nimport type {SharedQueue as ClassQueue} from './ReactUpdateQueue.old';\n\n// An array of all update queues that received updates during the current\n// render. When this render exits, either because it finishes or because it is\n// interrupted, the interleaved updates will be transferred onto the main part\n// of the queue.\nlet interleavedQueues: Array<\n  HookQueue<any, any> | ClassQueue<any>,\n> | null = null;\n\nexport function pushInterleavedQueue(\n  queue: HookQueue<any, any> | ClassQueue<any>,\n) {\n  if (interleavedQueues === null) {\n    interleavedQueues = [queue];\n  } else {\n    interleavedQueues.push(queue);\n  }\n}\n\nexport function enqueueInterleavedUpdates() {\n  // Transfer the interleaved updates onto the main queue. Each queue has a\n  // `pending` field and an `interleaved` field. When they are not null, they\n  // point to the last node in a circular linked list. We need to append the\n  // interleaved list to the end of the pending list by joining them into a\n  // single, circular list.\n  if (interleavedQueues !== null) {\n    for (let i = 0; i < interleavedQueues.length; i++) {\n      const queue = interleavedQueues[i];\n      const lastInterleavedUpdate = queue.interleaved;\n      if (lastInterleavedUpdate !== null) {\n        queue.interleaved = null;\n        const firstInterleavedUpdate = lastInterleavedUpdate.next;\n        const lastPendingUpdate = queue.pending;\n        if (lastPendingUpdate !== null) {\n          const firstPendingUpdate = lastPendingUpdate.next;\n          lastPendingUpdate.next = (firstInterleavedUpdate: any);\n          lastInterleavedUpdate.next = (firstPendingUpdate: any);\n        }\n        queue.pending = (lastInterleavedUpdate: any);\n      }\n    }\n    interleavedQueues = null;\n  }\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\n// UpdateQueue is a linked list of prioritized updates.\n//\n// Like fibers, update queues come in pairs: a current queue, which represents\n// the visible state of the screen, and a work-in-progress queue, which can be\n// mutated and processed asynchronously before it is committed — a form of\n// double buffering. If a work-in-progress render is discarded before finishing,\n// we create a new work-in-progress by cloning the current queue.\n//\n// Both queues share a persistent, singly-linked list structure. To schedule an\n// update, we append it to the end of both queues. Each queue maintains a\n// pointer to first update in the persistent list that hasn't been processed.\n// The work-in-progress pointer always has a position equal to or greater than\n// the current queue, since we always work on that one. The current queue's\n// pointer is only updated during the commit phase, when we swap in the\n// work-in-progress.\n//\n// For example:\n//\n//   Current pointer:           A - B - C - D - E - F\n//   Work-in-progress pointer:              D - E - F\n//                                          ^\n//                                          The work-in-progress queue has\n//                                          processed more updates than current.\n//\n// The reason we append to both queues is because otherwise we might drop\n// updates without ever processing them. For example, if we only add updates to\n// the work-in-progress queue, some updates could be lost whenever a work-in\n// -progress render restarts by cloning from current. Similarly, if we only add\n// updates to the current queue, the updates will be lost whenever an already\n// in-progress queue commits and swaps with the current queue. However, by\n// adding to both queues, we guarantee that the update will be part of the next\n// work-in-progress. (And because the work-in-progress queue becomes the\n// current queue once it commits, there's no danger of applying the same\n// update twice.)\n//\n// Prioritization\n// --------------\n//\n// Updates are not sorted by priority, but by insertion; new updates are always\n// appended to the end of the list.\n//\n// The priority is still important, though. When processing the update queue\n// during the render phase, only the updates with sufficient priority are\n// included in the result. If we skip an update because it has insufficient\n// priority, it remains in the queue to be processed later, during a lower\n// priority render. Crucially, all updates subsequent to a skipped update also\n// remain in the queue *regardless of their priority*. That means high priority\n// updates are sometimes processed twice, at two separate priorities. We also\n// keep track of a base state, that represents the state before the first\n// update in the queue is applied.\n//\n// For example:\n//\n//   Given a base state of '', and the following queue of updates\n//\n//     A1 - B2 - C1 - D2\n//\n//   where the number indicates the priority, and the update is applied to the\n//   previous state by appending a letter, React will process these updates as\n//   two separate renders, one per distinct priority level:\n//\n//   First render, at priority 1:\n//     Base state: ''\n//     Updates: [A1, C1]\n//     Result state: 'AC'\n//\n//   Second render, at priority 2:\n//     Base state: 'A'            <-  The base state does not include C1,\n//                                    because B2 was skipped.\n//     Updates: [B2, C1, D2]      <-  C1 was rebased on top of B2\n//     Result state: 'ABCD'\n//\n// Because we process updates in insertion order, and rebase high priority\n// updates when preceding updates are skipped, the final result is deterministic\n// regardless of priority. Intermediate state may vary according to system\n// resources, but the final state is always the same.\n\nimport type {Fiber, FiberRoot} from './ReactInternalTypes';\nimport type {Lanes, Lane} from './ReactFiberLane.old';\n\nimport {\n  NoLane,\n  NoLanes,\n  isSubsetOfLanes,\n  mergeLanes,\n  isTransitionLane,\n  intersectLanes,\n  markRootEntangled,\n} from './ReactFiberLane.old';\nimport {\n  enterDisallowedContextReadInDEV,\n  exitDisallowedContextReadInDEV,\n} from './ReactFiberNewContext.old';\nimport {Callback, ShouldCapture, DidCapture} from './ReactFiberFlags';\n\nimport {debugRenderPhaseSideEffectsForStrictMode} from 'shared/ReactFeatureFlags';\n\nimport {StrictLegacyMode} from './ReactTypeOfMode';\nimport {\n  markSkippedUpdateLanes,\n  isInterleavedUpdate,\n} from './ReactFiberWorkLoop.old';\nimport {pushInterleavedQueue} from './ReactFiberInterleavedUpdates.old';\nimport {setIsStrictModeForDevtools} from './ReactFiberReconciler';\n\nimport invariant from 'shared/invariant';\n\nexport type Update<State> = {|\n  // TODO: Temporary field. Will remove this by storing a map of\n  // transition -> event time on the root.\n  eventTime: number,\n  lane: Lane,\n\n  tag: 0 | 1 | 2 | 3,\n  payload: any,\n  callback: (() => mixed) | null,\n\n  next: Update<State> | null,\n|};\n\nexport type SharedQueue<State> = {|\n  pending: Update<State> | null,\n  interleaved: Update<State> | null,\n  lanes: Lanes,\n|};\n\nexport type UpdateQueue<State> = {|\n  baseState: State,\n  firstBaseUpdate: Update<State> | null,\n  lastBaseUpdate: Update<State> | null,\n  shared: SharedQueue<State>,\n  effects: Array<Update<State>> | null,\n|};\n\nexport const UpdateState = 0;\nexport const ReplaceState = 1;\nexport const ForceUpdate = 2;\nexport const CaptureUpdate = 3;\n\n// Global state that is reset at the beginning of calling `processUpdateQueue`.\n// It should only be read right after calling `processUpdateQueue`, via\n// `checkHasForceUpdateAfterProcessing`.\nlet hasForceUpdate = false;\n\nlet didWarnUpdateInsideUpdate;\nlet currentlyProcessingQueue;\nexport let resetCurrentlyProcessingQueue;\nif (__DEV__) {\n  didWarnUpdateInsideUpdate = false;\n  currentlyProcessingQueue = null;\n  resetCurrentlyProcessingQueue = () => {\n    currentlyProcessingQueue = null;\n  };\n}\n\nexport function initializeUpdateQueue<State>(fiber: Fiber): void {\n  const queue: UpdateQueue<State> = {\n    baseState: fiber.memoizedState,\n    firstBaseUpdate: null,\n    lastBaseUpdate: null,\n    shared: {\n      pending: null,\n      interleaved: null,\n      lanes: NoLanes,\n    },\n    effects: null,\n  };\n  fiber.updateQueue = queue;\n}\n\nexport function cloneUpdateQueue<State>(\n  current: Fiber,\n  workInProgress: Fiber,\n): void {\n  // Clone the update queue from current. Unless it's already a clone.\n  const queue: UpdateQueue<State> = (workInProgress.updateQueue: any);\n  const currentQueue: UpdateQueue<State> = (current.updateQueue: any);\n  if (queue === currentQueue) {\n    const clone: UpdateQueue<State> = {\n      baseState: currentQueue.baseState,\n      firstBaseUpdate: currentQueue.firstBaseUpdate,\n      lastBaseUpdate: currentQueue.lastBaseUpdate,\n      shared: currentQueue.shared,\n      effects: currentQueue.effects,\n    };\n    workInProgress.updateQueue = clone;\n  }\n}\n\nexport function createUpdate(eventTime: number, lane: Lane): Update<*> {\n  const update: Update<*> = {\n    eventTime,\n    lane,\n\n    tag: UpdateState,\n    payload: null,\n    callback: null,\n\n    next: null,\n  };\n  return update;\n}\n\nexport function enqueueUpdate<State>(\n  fiber: Fiber,\n  update: Update<State>,\n  lane: Lane,\n) {\n  const updateQueue = fiber.updateQueue;\n  if (updateQueue === null) {\n    // Only occurs if the fiber has been unmounted.\n    return;\n  }\n\n  const sharedQueue: SharedQueue<State> = (updateQueue: any).shared;\n\n  if (isInterleavedUpdate(fiber, lane)) {\n    const interleaved = sharedQueue.interleaved;\n    if (interleaved === null) {\n      // This is the first update. Create a circular list.\n      update.next = update;\n      // At the end of the current render, this queue's interleaved updates will\n      // be transferred to the pending queue.\n      pushInterleavedQueue(sharedQueue);\n    } else {\n      update.next = interleaved.next;\n      interleaved.next = update;\n    }\n    sharedQueue.interleaved = update;\n  } else {\n    const pending = sharedQueue.pending;\n    if (pending === null) {\n      // This is the first update. Create a circular list.\n      update.next = update;\n    } else {\n      update.next = pending.next;\n      pending.next = update;\n    }\n    sharedQueue.pending = update;\n  }\n\n  if (__DEV__) {\n    if (\n      currentlyProcessingQueue === sharedQueue &&\n      !didWarnUpdateInsideUpdate\n    ) {\n      console.error(\n        'An update (setState, replaceState, or forceUpdate) was scheduled ' +\n          'from inside an update function. Update functions should be pure, ' +\n          'with zero side-effects. Consider using componentDidUpdate or a ' +\n          'callback.',\n      );\n      didWarnUpdateInsideUpdate = true;\n    }\n  }\n}\n\nexport function entangleTransitions(root: FiberRoot, fiber: Fiber, lane: Lane) {\n  const updateQueue = fiber.updateQueue;\n  if (updateQueue === null) {\n    // Only occurs if the fiber has been unmounted.\n    return;\n  }\n\n  const sharedQueue: SharedQueue<mixed> = (updateQueue: any).shared;\n  if (isTransitionLane(lane)) {\n    let queueLanes = sharedQueue.lanes;\n\n    // If any entangled lanes are no longer pending on the root, then they must\n    // have finished. We can remove them from the shared queue, which represents\n    // a superset of the actually pending lanes. In some cases we may entangle\n    // more than we need to, but that's OK. In fact it's worse if we *don't*\n    // entangle when we should.\n    queueLanes = intersectLanes(queueLanes, root.pendingLanes);\n\n    // Entangle the new transition lane with the other transition lanes.\n    const newQueueLanes = mergeLanes(queueLanes, lane);\n    sharedQueue.lanes = newQueueLanes;\n    // Even if queue.lanes already include lane, we don't know for certain if\n    // the lane finished since the last time we entangled it. So we need to\n    // entangle it again, just to be sure.\n    markRootEntangled(root, newQueueLanes);\n  }\n}\n\nexport function enqueueCapturedUpdate<State>(\n  workInProgress: Fiber,\n  capturedUpdate: Update<State>,\n) {\n  // Captured updates are updates that are thrown by a child during the render\n  // phase. They should be discarded if the render is aborted. Therefore,\n  // we should only put them on the work-in-progress queue, not the current one.\n  let queue: UpdateQueue<State> = (workInProgress.updateQueue: any);\n\n  // Check if the work-in-progress queue is a clone.\n  const current = workInProgress.alternate;\n  if (current !== null) {\n    const currentQueue: UpdateQueue<State> = (current.updateQueue: any);\n    if (queue === currentQueue) {\n      // The work-in-progress queue is the same as current. This happens when\n      // we bail out on a parent fiber that then captures an error thrown by\n      // a child. Since we want to append the update only to the work-in\n      // -progress queue, we need to clone the updates. We usually clone during\n      // processUpdateQueue, but that didn't happen in this case because we\n      // skipped over the parent when we bailed out.\n      let newFirst = null;\n      let newLast = null;\n      const firstBaseUpdate = queue.firstBaseUpdate;\n      if (firstBaseUpdate !== null) {\n        // Loop through the updates and clone them.\n        let update = firstBaseUpdate;\n        do {\n          const clone: Update<State> = {\n            eventTime: update.eventTime,\n            lane: update.lane,\n\n            tag: update.tag,\n            payload: update.payload,\n            callback: update.callback,\n\n            next: null,\n          };\n          if (newLast === null) {\n            newFirst = newLast = clone;\n          } else {\n            newLast.next = clone;\n            newLast = clone;\n          }\n          update = update.next;\n        } while (update !== null);\n\n        // Append the captured update the end of the cloned list.\n        if (newLast === null) {\n          newFirst = newLast = capturedUpdate;\n        } else {\n          newLast.next = capturedUpdate;\n          newLast = capturedUpdate;\n        }\n      } else {\n        // There are no base updates.\n        newFirst = newLast = capturedUpdate;\n      }\n      queue = {\n        baseState: currentQueue.baseState,\n        firstBaseUpdate: newFirst,\n        lastBaseUpdate: newLast,\n        shared: currentQueue.shared,\n        effects: currentQueue.effects,\n      };\n      workInProgress.updateQueue = queue;\n      return;\n    }\n  }\n\n  // Append the update to the end of the list.\n  const lastBaseUpdate = queue.lastBaseUpdate;\n  if (lastBaseUpdate === null) {\n    queue.firstBaseUpdate = capturedUpdate;\n  } else {\n    lastBaseUpdate.next = capturedUpdate;\n  }\n  queue.lastBaseUpdate = capturedUpdate;\n}\n\nfunction getStateFromUpdate<State>(\n  workInProgress: Fiber,\n  queue: UpdateQueue<State>,\n  update: Update<State>,\n  prevState: State,\n  nextProps: any,\n  instance: any,\n): any {\n  switch (update.tag) {\n    case ReplaceState: {\n      const payload = update.payload;\n      if (typeof payload === 'function') {\n        // Updater function\n        if (__DEV__) {\n          enterDisallowedContextReadInDEV();\n        }\n        const nextState = payload.call(instance, prevState, nextProps);\n        if (__DEV__) {\n          if (\n            debugRenderPhaseSideEffectsForStrictMode &&\n            workInProgress.mode & StrictLegacyMode\n          ) {\n            setIsStrictModeForDevtools(true);\n            try {\n              payload.call(instance, prevState, nextProps);\n            } finally {\n              setIsStrictModeForDevtools(false);\n            }\n          }\n          exitDisallowedContextReadInDEV();\n        }\n        return nextState;\n      }\n      // State object\n      return payload;\n    }\n    case CaptureUpdate: {\n      workInProgress.flags =\n        (workInProgress.flags & ~ShouldCapture) | DidCapture;\n    }\n    // Intentional fallthrough\n    case UpdateState: {\n      const payload = update.payload;\n      let partialState;\n      if (typeof payload === 'function') {\n        // Updater function\n        if (__DEV__) {\n          enterDisallowedContextReadInDEV();\n        }\n        partialState = payload.call(instance, prevState, nextProps);\n        if (__DEV__) {\n          if (\n            debugRenderPhaseSideEffectsForStrictMode &&\n            workInProgress.mode & StrictLegacyMode\n          ) {\n            setIsStrictModeForDevtools(true);\n            try {\n              payload.call(instance, prevState, nextProps);\n            } finally {\n              setIsStrictModeForDevtools(false);\n            }\n          }\n          exitDisallowedContextReadInDEV();\n        }\n      } else {\n        // Partial state object\n        partialState = payload;\n      }\n      if (partialState === null || partialState === undefined) {\n        // Null and undefined are treated as no-ops.\n        return prevState;\n      }\n      // Merge the partial state and the previous state.\n      return Object.assign({}, prevState, partialState);\n    }\n    case ForceUpdate: {\n      hasForceUpdate = true;\n      return prevState;\n    }\n  }\n  return prevState;\n}\n\nexport function processUpdateQueue<State>(\n  workInProgress: Fiber,\n  props: any,\n  instance: any,\n  renderLanes: Lanes,\n): void {\n  // This is always non-null on a ClassComponent or HostRoot\n  const queue: UpdateQueue<State> = (workInProgress.updateQueue: any);\n\n  hasForceUpdate = false;\n\n  if (__DEV__) {\n    currentlyProcessingQueue = queue.shared;\n  }\n\n  let firstBaseUpdate = queue.firstBaseUpdate;\n  let lastBaseUpdate = queue.lastBaseUpdate;\n\n  // Check if there are pending updates. If so, transfer them to the base queue.\n  let pendingQueue = queue.shared.pending;\n  if (pendingQueue !== null) {\n    queue.shared.pending = null;\n\n    // The pending queue is circular. Disconnect the pointer between first\n    // and last so that it's non-circular.\n    const lastPendingUpdate = pendingQueue;\n    const firstPendingUpdate = lastPendingUpdate.next;\n    lastPendingUpdate.next = null;\n    // Append pending updates to base queue\n    if (lastBaseUpdate === null) {\n      firstBaseUpdate = firstPendingUpdate;\n    } else {\n      lastBaseUpdate.next = firstPendingUpdate;\n    }\n    lastBaseUpdate = lastPendingUpdate;\n\n    // If there's a current queue, and it's different from the base queue, then\n    // we need to transfer the updates to that queue, too. Because the base\n    // queue is a singly-linked list with no cycles, we can append to both\n    // lists and take advantage of structural sharing.\n    // TODO: Pass `current` as argument\n    const current = workInProgress.alternate;\n    if (current !== null) {\n      // This is always non-null on a ClassComponent or HostRoot\n      const currentQueue: UpdateQueue<State> = (current.updateQueue: any);\n      const currentLastBaseUpdate = currentQueue.lastBaseUpdate;\n      if (currentLastBaseUpdate !== lastBaseUpdate) {\n        if (currentLastBaseUpdate === null) {\n          currentQueue.firstBaseUpdate = firstPendingUpdate;\n        } else {\n          currentLastBaseUpdate.next = firstPendingUpdate;\n        }\n        currentQueue.lastBaseUpdate = lastPendingUpdate;\n      }\n    }\n  }\n\n  // These values may change as we process the queue.\n  if (firstBaseUpdate !== null) {\n    // Iterate through the list of updates to compute the result.\n    let newState = queue.baseState;\n    // TODO: Don't need to accumulate this. Instead, we can remove renderLanes\n    // from the original lanes.\n    let newLanes = NoLanes;\n\n    let newBaseState = null;\n    let newFirstBaseUpdate = null;\n    let newLastBaseUpdate = null;\n\n    let update = firstBaseUpdate;\n    do {\n      const updateLane = update.lane;\n      const updateEventTime = update.eventTime;\n      if (!isSubsetOfLanes(renderLanes, updateLane)) {\n        // Priority is insufficient. Skip this update. If this is the first\n        // skipped update, the previous update/state is the new base\n        // update/state.\n        const clone: Update<State> = {\n          eventTime: updateEventTime,\n          lane: updateLane,\n\n          tag: update.tag,\n          payload: update.payload,\n          callback: update.callback,\n\n          next: null,\n        };\n        if (newLastBaseUpdate === null) {\n          newFirstBaseUpdate = newLastBaseUpdate = clone;\n          newBaseState = newState;\n        } else {\n          newLastBaseUpdate = newLastBaseUpdate.next = clone;\n        }\n        // Update the remaining priority in the queue.\n        newLanes = mergeLanes(newLanes, updateLane);\n      } else {\n        // This update does have sufficient priority.\n\n        if (newLastBaseUpdate !== null) {\n          const clone: Update<State> = {\n            eventTime: updateEventTime,\n            // This update is going to be committed so we never want uncommit\n            // it. Using NoLane works because 0 is a subset of all bitmasks, so\n            // this will never be skipped by the check above.\n            lane: NoLane,\n\n            tag: update.tag,\n            payload: update.payload,\n            callback: update.callback,\n\n            next: null,\n          };\n          newLastBaseUpdate = newLastBaseUpdate.next = clone;\n        }\n\n        // Process this update.\n        newState = getStateFromUpdate(\n          workInProgress,\n          queue,\n          update,\n          newState,\n          props,\n          instance,\n        );\n        const callback = update.callback;\n        if (\n          callback !== null &&\n          // If the update was already committed, we should not queue its\n          // callback again.\n          update.lane !== NoLane\n        ) {\n          workInProgress.flags |= Callback;\n          const effects = queue.effects;\n          if (effects === null) {\n            queue.effects = [update];\n          } else {\n            effects.push(update);\n          }\n        }\n      }\n      update = update.next;\n      if (update === null) {\n        pendingQueue = queue.shared.pending;\n        if (pendingQueue === null) {\n          break;\n        } else {\n          // An update was scheduled from inside a reducer. Add the new\n          // pending updates to the end of the list and keep processing.\n          const lastPendingUpdate = pendingQueue;\n          // Intentionally unsound. Pending updates form a circular list, but we\n          // unravel them when transferring them to the base queue.\n          const firstPendingUpdate = ((lastPendingUpdate.next: any): Update<State>);\n          lastPendingUpdate.next = null;\n          update = firstPendingUpdate;\n          queue.lastBaseUpdate = lastPendingUpdate;\n          queue.shared.pending = null;\n        }\n      }\n    } while (true);\n\n    if (newLastBaseUpdate === null) {\n      newBaseState = newState;\n    }\n\n    queue.baseState = ((newBaseState: any): State);\n    queue.firstBaseUpdate = newFirstBaseUpdate;\n    queue.lastBaseUpdate = newLastBaseUpdate;\n\n    // Interleaved updates are stored on a separate queue. We aren't going to\n    // process them during this render, but we do need to track which lanes\n    // are remaining.\n    const lastInterleaved = queue.shared.interleaved;\n    if (lastInterleaved !== null) {\n      let interleaved = lastInterleaved;\n      do {\n        newLanes = mergeLanes(newLanes, interleaved.lane);\n        interleaved = ((interleaved: any).next: Update<State>);\n      } while (interleaved !== lastInterleaved);\n    } else if (firstBaseUpdate === null) {\n      // `queue.lanes` is used for entangling transitions. We can set it back to\n      // zero once the queue is empty.\n      queue.shared.lanes = NoLanes;\n    }\n\n    // Set the remaining expiration time to be whatever is remaining in the queue.\n    // This should be fine because the only two other things that contribute to\n    // expiration time are props and context. We're already in the middle of the\n    // begin phase by the time we start processing the queue, so we've already\n    // dealt with the props. Context in components that specify\n    // shouldComponentUpdate is tricky; but we'll have to account for\n    // that regardless.\n    markSkippedUpdateLanes(newLanes);\n    workInProgress.lanes = newLanes;\n    workInProgress.memoizedState = newState;\n  }\n\n  if (__DEV__) {\n    currentlyProcessingQueue = null;\n  }\n}\n\nfunction callCallback(callback, context) {\n  invariant(\n    typeof callback === 'function',\n    'Invalid argument passed as callback. Expected a function. Instead ' +\n      'received: %s',\n    callback,\n  );\n  callback.call(context);\n}\n\nexport function resetHasForceUpdateBeforeProcessing() {\n  hasForceUpdate = false;\n}\n\nexport function checkHasForceUpdateAfterProcessing(): boolean {\n  return hasForceUpdate;\n}\n\nexport function commitUpdateQueue<State>(\n  finishedWork: Fiber,\n  finishedQueue: UpdateQueue<State>,\n  instance: any,\n): void {\n  // Commit the effects\n  const effects = finishedQueue.effects;\n  finishedQueue.effects = null;\n  if (effects !== null) {\n    for (let i = 0; i < effects.length; i++) {\n      const effect = effects[i];\n      const callback = effect.callback;\n      if (callback !== null) {\n        effect.callback = null;\n        callCallback(callback, instance);\n      }\n    }\n  }\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Fiber} from './ReactInternalTypes';\nimport type {Lanes} from './ReactFiberLane.old';\nimport type {UpdateQueue} from './ReactUpdateQueue.old';\nimport type {Flags} from './ReactFiberFlags';\n\nimport * as React from 'react';\nimport {\n  LayoutStatic,\n  MountLayoutDev,\n  Update,\n  Snapshot,\n} from './ReactFiberFlags';\nimport {\n  debugRenderPhaseSideEffectsForStrictMode,\n  disableLegacyContext,\n  enableDebugTracing,\n  enableSchedulingProfiler,\n  warnAboutDeprecatedLifecycles,\n  enableStrictEffects,\n  enableLazyContextPropagation,\n  enableSuspenseLayoutEffectSemantics,\n} from 'shared/ReactFeatureFlags';\nimport ReactStrictModeWarnings from './ReactStrictModeWarnings.old';\nimport {isMounted} from './ReactFiberTreeReflection';\nimport {get as getInstance, set as setInstance} from 'shared/ReactInstanceMap';\nimport shallowEqual from 'shared/shallowEqual';\nimport getComponentNameFromFiber from 'react-reconciler/src/getComponentNameFromFiber';\nimport getComponentNameFromType from 'shared/getComponentNameFromType';\nimport invariant from 'shared/invariant';\nimport isArray from 'shared/isArray';\nimport {REACT_CONTEXT_TYPE, REACT_PROVIDER_TYPE} from 'shared/ReactSymbols';\nimport {setIsStrictModeForDevtools} from './ReactFiberReconciler';\n\nimport {resolveDefaultProps} from './ReactFiberLazyComponent.old';\nimport {\n  DebugTracingMode,\n  NoMode,\n  StrictLegacyMode,\n  StrictEffectsMode,\n} from './ReactTypeOfMode';\n\nimport {\n  enqueueUpdate,\n  entangleTransitions,\n  processUpdateQueue,\n  checkHasForceUpdateAfterProcessing,\n  resetHasForceUpdateBeforeProcessing,\n  createUpdate,\n  ReplaceState,\n  ForceUpdate,\n  initializeUpdateQueue,\n  cloneUpdateQueue,\n} from './ReactUpdateQueue.old';\nimport {NoLanes} from './ReactFiberLane.old';\nimport {\n  cacheContext,\n  getMaskedContext,\n  getUnmaskedContext,\n  hasContextChanged,\n  emptyContextObject,\n} from './ReactFiberContext.old';\nimport {readContext, checkIfContextChanged} from './ReactFiberNewContext.old';\nimport {\n  requestEventTime,\n  requestUpdateLane,\n  scheduleUpdateOnFiber,\n} from './ReactFiberWorkLoop.old';\nimport {logForceUpdateScheduled, logStateUpdateScheduled} from './DebugTracing';\n\nimport {\n  markForceUpdateScheduled,\n  markStateUpdateScheduled,\n} from './SchedulingProfiler';\n\nconst fakeInternalInstance = {};\n\n// React.Component uses a shared frozen object by default.\n// We'll use it to determine whether we need to initialize legacy refs.\nexport const emptyRefsObject = new React.Component().refs;\n\nlet didWarnAboutStateAssignmentForComponent;\nlet didWarnAboutUninitializedState;\nlet didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate;\nlet didWarnAboutLegacyLifecyclesAndDerivedState;\nlet didWarnAboutUndefinedDerivedState;\nlet warnOnUndefinedDerivedState;\nlet warnOnInvalidCallback;\nlet didWarnAboutDirectlyAssigningPropsToState;\nlet didWarnAboutContextTypeAndContextTypes;\nlet didWarnAboutInvalidateContextType;\n\nif (__DEV__) {\n  didWarnAboutStateAssignmentForComponent = new Set();\n  didWarnAboutUninitializedState = new Set();\n  didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = new Set();\n  didWarnAboutLegacyLifecyclesAndDerivedState = new Set();\n  didWarnAboutDirectlyAssigningPropsToState = new Set();\n  didWarnAboutUndefinedDerivedState = new Set();\n  didWarnAboutContextTypeAndContextTypes = new Set();\n  didWarnAboutInvalidateContextType = new Set();\n\n  const didWarnOnInvalidCallback = new Set();\n\n  warnOnInvalidCallback = function(callback: mixed, callerName: string) {\n    if (callback === null || typeof callback === 'function') {\n      return;\n    }\n    const key = callerName + '_' + (callback: any);\n    if (!didWarnOnInvalidCallback.has(key)) {\n      didWarnOnInvalidCallback.add(key);\n      console.error(\n        '%s(...): Expected the last optional `callback` argument to be a ' +\n          'function. Instead received: %s.',\n        callerName,\n        callback,\n      );\n    }\n  };\n\n  warnOnUndefinedDerivedState = function(type, partialState) {\n    if (partialState === undefined) {\n      const componentName = getComponentNameFromType(type) || 'Component';\n      if (!didWarnAboutUndefinedDerivedState.has(componentName)) {\n        didWarnAboutUndefinedDerivedState.add(componentName);\n        console.error(\n          '%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. ' +\n            'You have returned undefined.',\n          componentName,\n        );\n      }\n    }\n  };\n\n  // This is so gross but it's at least non-critical and can be removed if\n  // it causes problems. This is meant to give a nicer error message for\n  // ReactDOM15.unstable_renderSubtreeIntoContainer(reactDOM16Component,\n  // ...)) which otherwise throws a \"_processChildContext is not a function\"\n  // exception.\n  Object.defineProperty(fakeInternalInstance, '_processChildContext', {\n    enumerable: false,\n    value: function() {\n      invariant(\n        false,\n        '_processChildContext is not available in React 16+. This likely ' +\n          'means you have multiple copies of React and are attempting to nest ' +\n          'a React 15 tree inside a React 16 tree using ' +\n          \"unstable_renderSubtreeIntoContainer, which isn't supported. Try \" +\n          'to make sure you have only one copy of React (and ideally, switch ' +\n          'to ReactDOM.createPortal).',\n      );\n    },\n  });\n  Object.freeze(fakeInternalInstance);\n}\n\nfunction applyDerivedStateFromProps(\n  workInProgress: Fiber,\n  ctor: any,\n  getDerivedStateFromProps: (props: any, state: any) => any,\n  nextProps: any,\n) {\n  const prevState = workInProgress.memoizedState;\n  let partialState = getDerivedStateFromProps(nextProps, prevState);\n  if (__DEV__) {\n    if (\n      debugRenderPhaseSideEffectsForStrictMode &&\n      workInProgress.mode & StrictLegacyMode\n    ) {\n      setIsStrictModeForDevtools(true);\n      try {\n        // Invoke the function an extra time to help detect side-effects.\n        partialState = getDerivedStateFromProps(nextProps, prevState);\n      } finally {\n        setIsStrictModeForDevtools(false);\n      }\n    }\n    warnOnUndefinedDerivedState(ctor, partialState);\n  }\n  // Merge the partial state and the previous state.\n  const memoizedState =\n    partialState === null || partialState === undefined\n      ? prevState\n      : Object.assign({}, prevState, partialState);\n  workInProgress.memoizedState = memoizedState;\n\n  // Once the update queue is empty, persist the derived state onto the\n  // base state.\n  if (workInProgress.lanes === NoLanes) {\n    // Queue is always non-null for classes\n    const updateQueue: UpdateQueue<any> = (workInProgress.updateQueue: any);\n    updateQueue.baseState = memoizedState;\n  }\n}\n\nconst classComponentUpdater = {\n  isMounted,\n  enqueueSetState(inst, payload, callback) {\n    const fiber = getInstance(inst);\n    const eventTime = requestEventTime();\n    const lane = requestUpdateLane(fiber);\n\n    const update = createUpdate(eventTime, lane);\n    update.payload = payload;\n    if (callback !== undefined && callback !== null) {\n      if (__DEV__) {\n        warnOnInvalidCallback(callback, 'setState');\n      }\n      update.callback = callback;\n    }\n\n    enqueueUpdate(fiber, update, lane);\n    const root = scheduleUpdateOnFiber(fiber, lane, eventTime);\n    if (root !== null) {\n      entangleTransitions(root, fiber, lane);\n    }\n\n    if (__DEV__) {\n      if (enableDebugTracing) {\n        if (fiber.mode & DebugTracingMode) {\n          const name = getComponentNameFromFiber(fiber) || 'Unknown';\n          logStateUpdateScheduled(name, lane, payload);\n        }\n      }\n    }\n\n    if (enableSchedulingProfiler) {\n      markStateUpdateScheduled(fiber, lane);\n    }\n  },\n  enqueueReplaceState(inst, payload, callback) {\n    const fiber = getInstance(inst);\n    const eventTime = requestEventTime();\n    const lane = requestUpdateLane(fiber);\n\n    const update = createUpdate(eventTime, lane);\n    update.tag = ReplaceState;\n    update.payload = payload;\n\n    if (callback !== undefined && callback !== null) {\n      if (__DEV__) {\n        warnOnInvalidCallback(callback, 'replaceState');\n      }\n      update.callback = callback;\n    }\n\n    enqueueUpdate(fiber, update, lane);\n    const root = scheduleUpdateOnFiber(fiber, lane, eventTime);\n    if (root !== null) {\n      entangleTransitions(root, fiber, lane);\n    }\n\n    if (__DEV__) {\n      if (enableDebugTracing) {\n        if (fiber.mode & DebugTracingMode) {\n          const name = getComponentNameFromFiber(fiber) || 'Unknown';\n          logStateUpdateScheduled(name, lane, payload);\n        }\n      }\n    }\n\n    if (enableSchedulingProfiler) {\n      markStateUpdateScheduled(fiber, lane);\n    }\n  },\n  enqueueForceUpdate(inst, callback) {\n    const fiber = getInstance(inst);\n    const eventTime = requestEventTime();\n    const lane = requestUpdateLane(fiber);\n\n    const update = createUpdate(eventTime, lane);\n    update.tag = ForceUpdate;\n\n    if (callback !== undefined && callback !== null) {\n      if (__DEV__) {\n        warnOnInvalidCallback(callback, 'forceUpdate');\n      }\n      update.callback = callback;\n    }\n\n    enqueueUpdate(fiber, update, lane);\n    const root = scheduleUpdateOnFiber(fiber, lane, eventTime);\n    if (root !== null) {\n      entangleTransitions(root, fiber, lane);\n    }\n\n    if (__DEV__) {\n      if (enableDebugTracing) {\n        if (fiber.mode & DebugTracingMode) {\n          const name = getComponentNameFromFiber(fiber) || 'Unknown';\n          logForceUpdateScheduled(name, lane);\n        }\n      }\n    }\n\n    if (enableSchedulingProfiler) {\n      markForceUpdateScheduled(fiber, lane);\n    }\n  },\n};\n\nfunction checkShouldComponentUpdate(\n  workInProgress,\n  ctor,\n  oldProps,\n  newProps,\n  oldState,\n  newState,\n  nextContext,\n) {\n  const instance = workInProgress.stateNode;\n  if (typeof instance.shouldComponentUpdate === 'function') {\n    let shouldUpdate = instance.shouldComponentUpdate(\n      newProps,\n      newState,\n      nextContext,\n    );\n    if (__DEV__) {\n      if (\n        debugRenderPhaseSideEffectsForStrictMode &&\n        workInProgress.mode & StrictLegacyMode\n      ) {\n        setIsStrictModeForDevtools(true);\n        try {\n          // Invoke the function an extra time to help detect side-effects.\n          shouldUpdate = instance.shouldComponentUpdate(\n            newProps,\n            newState,\n            nextContext,\n          );\n        } finally {\n          setIsStrictModeForDevtools(false);\n        }\n      }\n      if (shouldUpdate === undefined) {\n        console.error(\n          '%s.shouldComponentUpdate(): Returned undefined instead of a ' +\n            'boolean value. Make sure to return true or false.',\n          getComponentNameFromType(ctor) || 'Component',\n        );\n      }\n    }\n\n    return shouldUpdate;\n  }\n\n  if (ctor.prototype && ctor.prototype.isPureReactComponent) {\n    return (\n      !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState)\n    );\n  }\n\n  return true;\n}\n\nfunction checkClassInstance(workInProgress: Fiber, ctor: any, newProps: any) {\n  const instance = workInProgress.stateNode;\n  if (__DEV__) {\n    const name = getComponentNameFromType(ctor) || 'Component';\n    const renderPresent = instance.render;\n\n    if (!renderPresent) {\n      if (ctor.prototype && typeof ctor.prototype.render === 'function') {\n        console.error(\n          '%s(...): No `render` method found on the returned component ' +\n            'instance: did you accidentally return an object from the constructor?',\n          name,\n        );\n      } else {\n        console.error(\n          '%s(...): No `render` method found on the returned component ' +\n            'instance: you may have forgotten to define `render`.',\n          name,\n        );\n      }\n    }\n\n    if (\n      instance.getInitialState &&\n      !instance.getInitialState.isReactClassApproved &&\n      !instance.state\n    ) {\n      console.error(\n        'getInitialState was defined on %s, a plain JavaScript class. ' +\n          'This is only supported for classes created using React.createClass. ' +\n          'Did you mean to define a state property instead?',\n        name,\n      );\n    }\n    if (\n      instance.getDefaultProps &&\n      !instance.getDefaultProps.isReactClassApproved\n    ) {\n      console.error(\n        'getDefaultProps was defined on %s, a plain JavaScript class. ' +\n          'This is only supported for classes created using React.createClass. ' +\n          'Use a static property to define defaultProps instead.',\n        name,\n      );\n    }\n    if (instance.propTypes) {\n      console.error(\n        'propTypes was defined as an instance property on %s. Use a static ' +\n          'property to define propTypes instead.',\n        name,\n      );\n    }\n    if (instance.contextType) {\n      console.error(\n        'contextType was defined as an instance property on %s. Use a static ' +\n          'property to define contextType instead.',\n        name,\n      );\n    }\n\n    if (disableLegacyContext) {\n      if (ctor.childContextTypes) {\n        console.error(\n          '%s uses the legacy childContextTypes API which is no longer supported. ' +\n            'Use React.createContext() instead.',\n          name,\n        );\n      }\n      if (ctor.contextTypes) {\n        console.error(\n          '%s uses the legacy contextTypes API which is no longer supported. ' +\n            'Use React.createContext() with static contextType instead.',\n          name,\n        );\n      }\n    } else {\n      if (instance.contextTypes) {\n        console.error(\n          'contextTypes was defined as an instance property on %s. Use a static ' +\n            'property to define contextTypes instead.',\n          name,\n        );\n      }\n\n      if (\n        ctor.contextType &&\n        ctor.contextTypes &&\n        !didWarnAboutContextTypeAndContextTypes.has(ctor)\n      ) {\n        didWarnAboutContextTypeAndContextTypes.add(ctor);\n        console.error(\n          '%s declares both contextTypes and contextType static properties. ' +\n            'The legacy contextTypes property will be ignored.',\n          name,\n        );\n      }\n    }\n\n    if (typeof instance.componentShouldUpdate === 'function') {\n      console.error(\n        '%s has a method called ' +\n          'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' +\n          'The name is phrased as a question because the function is ' +\n          'expected to return a value.',\n        name,\n      );\n    }\n    if (\n      ctor.prototype &&\n      ctor.prototype.isPureReactComponent &&\n      typeof instance.shouldComponentUpdate !== 'undefined'\n    ) {\n      console.error(\n        '%s has a method called shouldComponentUpdate(). ' +\n          'shouldComponentUpdate should not be used when extending React.PureComponent. ' +\n          'Please extend React.Component if shouldComponentUpdate is used.',\n        getComponentNameFromType(ctor) || 'A pure component',\n      );\n    }\n    if (typeof instance.componentDidUnmount === 'function') {\n      console.error(\n        '%s has a method called ' +\n          'componentDidUnmount(). But there is no such lifecycle method. ' +\n          'Did you mean componentWillUnmount()?',\n        name,\n      );\n    }\n    if (typeof instance.componentDidReceiveProps === 'function') {\n      console.error(\n        '%s has a method called ' +\n          'componentDidReceiveProps(). But there is no such lifecycle method. ' +\n          'If you meant to update the state in response to changing props, ' +\n          'use componentWillReceiveProps(). If you meant to fetch data or ' +\n          'run side-effects or mutations after React has updated the UI, use componentDidUpdate().',\n        name,\n      );\n    }\n    if (typeof instance.componentWillRecieveProps === 'function') {\n      console.error(\n        '%s has a method called ' +\n          'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?',\n        name,\n      );\n    }\n    if (typeof instance.UNSAFE_componentWillRecieveProps === 'function') {\n      console.error(\n        '%s has a method called ' +\n          'UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?',\n        name,\n      );\n    }\n    const hasMutatedProps = instance.props !== newProps;\n    if (instance.props !== undefined && hasMutatedProps) {\n      console.error(\n        '%s(...): When calling super() in `%s`, make sure to pass ' +\n          \"up the same props that your component's constructor was passed.\",\n        name,\n        name,\n      );\n    }\n    if (instance.defaultProps) {\n      console.error(\n        'Setting defaultProps as an instance property on %s is not supported and will be ignored.' +\n          ' Instead, define defaultProps as a static property on %s.',\n        name,\n        name,\n      );\n    }\n\n    if (\n      typeof instance.getSnapshotBeforeUpdate === 'function' &&\n      typeof instance.componentDidUpdate !== 'function' &&\n      !didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(ctor)\n    ) {\n      didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(ctor);\n      console.error(\n        '%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). ' +\n          'This component defines getSnapshotBeforeUpdate() only.',\n        getComponentNameFromType(ctor),\n      );\n    }\n\n    if (typeof instance.getDerivedStateFromProps === 'function') {\n      console.error(\n        '%s: getDerivedStateFromProps() is defined as an instance method ' +\n          'and will be ignored. Instead, declare it as a static method.',\n        name,\n      );\n    }\n    if (typeof instance.getDerivedStateFromError === 'function') {\n      console.error(\n        '%s: getDerivedStateFromError() is defined as an instance method ' +\n          'and will be ignored. Instead, declare it as a static method.',\n        name,\n      );\n    }\n    if (typeof ctor.getSnapshotBeforeUpdate === 'function') {\n      console.error(\n        '%s: getSnapshotBeforeUpdate() is defined as a static method ' +\n          'and will be ignored. Instead, declare it as an instance method.',\n        name,\n      );\n    }\n    const state = instance.state;\n    if (state && (typeof state !== 'object' || isArray(state))) {\n      console.error('%s.state: must be set to an object or null', name);\n    }\n    if (\n      typeof instance.getChildContext === 'function' &&\n      typeof ctor.childContextTypes !== 'object'\n    ) {\n      console.error(\n        '%s.getChildContext(): childContextTypes must be defined in order to ' +\n          'use getChildContext().',\n        name,\n      );\n    }\n  }\n}\n\nfunction adoptClassInstance(workInProgress: Fiber, instance: any): void {\n  instance.updater = classComponentUpdater;\n  workInProgress.stateNode = instance;\n  // The instance needs access to the fiber so that it can schedule updates\n  setInstance(instance, workInProgress);\n  if (__DEV__) {\n    instance._reactInternalInstance = fakeInternalInstance;\n  }\n}\n\nfunction constructClassInstance(\n  workInProgress: Fiber,\n  ctor: any,\n  props: any,\n): any {\n  let isLegacyContextConsumer = false;\n  let unmaskedContext = emptyContextObject;\n  let context = emptyContextObject;\n  const contextType = ctor.contextType;\n\n  if (__DEV__) {\n    if ('contextType' in ctor) {\n      const isValid =\n        // Allow null for conditional declaration\n        contextType === null ||\n        (contextType !== undefined &&\n          contextType.$$typeof === REACT_CONTEXT_TYPE &&\n          contextType._context === undefined); // Not a <Context.Consumer>\n\n      if (!isValid && !didWarnAboutInvalidateContextType.has(ctor)) {\n        didWarnAboutInvalidateContextType.add(ctor);\n\n        let addendum = '';\n        if (contextType === undefined) {\n          addendum =\n            ' However, it is set to undefined. ' +\n            'This can be caused by a typo or by mixing up named and default imports. ' +\n            'This can also happen due to a circular dependency, so ' +\n            'try moving the createContext() call to a separate file.';\n        } else if (typeof contextType !== 'object') {\n          addendum = ' However, it is set to a ' + typeof contextType + '.';\n        } else if (contextType.$$typeof === REACT_PROVIDER_TYPE) {\n          addendum = ' Did you accidentally pass the Context.Provider instead?';\n        } else if (contextType._context !== undefined) {\n          // <Context.Consumer>\n          addendum = ' Did you accidentally pass the Context.Consumer instead?';\n        } else {\n          addendum =\n            ' However, it is set to an object with keys {' +\n            Object.keys(contextType).join(', ') +\n            '}.';\n        }\n        console.error(\n          '%s defines an invalid contextType. ' +\n            'contextType should point to the Context object returned by React.createContext().%s',\n          getComponentNameFromType(ctor) || 'Component',\n          addendum,\n        );\n      }\n    }\n  }\n\n  if (typeof contextType === 'object' && contextType !== null) {\n    context = readContext((contextType: any));\n  } else if (!disableLegacyContext) {\n    unmaskedContext = getUnmaskedContext(workInProgress, ctor, true);\n    const contextTypes = ctor.contextTypes;\n    isLegacyContextConsumer =\n      contextTypes !== null && contextTypes !== undefined;\n    context = isLegacyContextConsumer\n      ? getMaskedContext(workInProgress, unmaskedContext)\n      : emptyContextObject;\n  }\n\n  let instance = new ctor(props, context);\n  // Instantiate twice to help detect side-effects.\n  if (__DEV__) {\n    if (\n      debugRenderPhaseSideEffectsForStrictMode &&\n      workInProgress.mode & StrictLegacyMode\n    ) {\n      setIsStrictModeForDevtools(true);\n      try {\n        instance = new ctor(props, context); // eslint-disable-line no-new\n      } finally {\n        setIsStrictModeForDevtools(false);\n      }\n    }\n  }\n\n  const state = (workInProgress.memoizedState =\n    instance.state !== null && instance.state !== undefined\n      ? instance.state\n      : null);\n  adoptClassInstance(workInProgress, instance);\n\n  if (__DEV__) {\n    if (typeof ctor.getDerivedStateFromProps === 'function' && state === null) {\n      const componentName = getComponentNameFromType(ctor) || 'Component';\n      if (!didWarnAboutUninitializedState.has(componentName)) {\n        didWarnAboutUninitializedState.add(componentName);\n        console.error(\n          '`%s` uses `getDerivedStateFromProps` but its initial state is ' +\n            '%s. This is not recommended. Instead, define the initial state by ' +\n            'assigning an object to `this.state` in the constructor of `%s`. ' +\n            'This ensures that `getDerivedStateFromProps` arguments have a consistent shape.',\n          componentName,\n          instance.state === null ? 'null' : 'undefined',\n          componentName,\n        );\n      }\n    }\n\n    // If new component APIs are defined, \"unsafe\" lifecycles won't be called.\n    // Warn about these lifecycles if they are present.\n    // Don't warn about react-lifecycles-compat polyfilled methods though.\n    if (\n      typeof ctor.getDerivedStateFromProps === 'function' ||\n      typeof instance.getSnapshotBeforeUpdate === 'function'\n    ) {\n      let foundWillMountName = null;\n      let foundWillReceivePropsName = null;\n      let foundWillUpdateName = null;\n      if (\n        typeof instance.componentWillMount === 'function' &&\n        instance.componentWillMount.__suppressDeprecationWarning !== true\n      ) {\n        foundWillMountName = 'componentWillMount';\n      } else if (typeof instance.UNSAFE_componentWillMount === 'function') {\n        foundWillMountName = 'UNSAFE_componentWillMount';\n      }\n      if (\n        typeof instance.componentWillReceiveProps === 'function' &&\n        instance.componentWillReceiveProps.__suppressDeprecationWarning !== true\n      ) {\n        foundWillReceivePropsName = 'componentWillReceiveProps';\n      } else if (\n        typeof instance.UNSAFE_componentWillReceiveProps === 'function'\n      ) {\n        foundWillReceivePropsName = 'UNSAFE_componentWillReceiveProps';\n      }\n      if (\n        typeof instance.componentWillUpdate === 'function' &&\n        instance.componentWillUpdate.__suppressDeprecationWarning !== true\n      ) {\n        foundWillUpdateName = 'componentWillUpdate';\n      } else if (typeof instance.UNSAFE_componentWillUpdate === 'function') {\n        foundWillUpdateName = 'UNSAFE_componentWillUpdate';\n      }\n      if (\n        foundWillMountName !== null ||\n        foundWillReceivePropsName !== null ||\n        foundWillUpdateName !== null\n      ) {\n        const componentName = getComponentNameFromType(ctor) || 'Component';\n        const newApiName =\n          typeof ctor.getDerivedStateFromProps === 'function'\n            ? 'getDerivedStateFromProps()'\n            : 'getSnapshotBeforeUpdate()';\n        if (!didWarnAboutLegacyLifecyclesAndDerivedState.has(componentName)) {\n          didWarnAboutLegacyLifecyclesAndDerivedState.add(componentName);\n          console.error(\n            'Unsafe legacy lifecycles will not be called for components using new component APIs.\\n\\n' +\n              '%s uses %s but also contains the following legacy lifecycles:%s%s%s\\n\\n' +\n              'The above lifecycles should be removed. Learn more about this warning here:\\n' +\n              'https://reactjs.org/link/unsafe-component-lifecycles',\n            componentName,\n            newApiName,\n            foundWillMountName !== null ? `\\n  ${foundWillMountName}` : '',\n            foundWillReceivePropsName !== null\n              ? `\\n  ${foundWillReceivePropsName}`\n              : '',\n            foundWillUpdateName !== null ? `\\n  ${foundWillUpdateName}` : '',\n          );\n        }\n      }\n    }\n  }\n\n  // Cache unmasked context so we can avoid recreating masked context unless necessary.\n  // ReactFiberContext usually updates this cache but can't for newly-created instances.\n  if (isLegacyContextConsumer) {\n    cacheContext(workInProgress, unmaskedContext, context);\n  }\n\n  return instance;\n}\n\nfunction callComponentWillMount(workInProgress, instance) {\n  const oldState = instance.state;\n\n  if (typeof instance.componentWillMount === 'function') {\n    instance.componentWillMount();\n  }\n  if (typeof instance.UNSAFE_componentWillMount === 'function') {\n    instance.UNSAFE_componentWillMount();\n  }\n\n  if (oldState !== instance.state) {\n    if (__DEV__) {\n      console.error(\n        '%s.componentWillMount(): Assigning directly to this.state is ' +\n          \"deprecated (except inside a component's \" +\n          'constructor). Use setState instead.',\n        getComponentNameFromFiber(workInProgress) || 'Component',\n      );\n    }\n    classComponentUpdater.enqueueReplaceState(instance, instance.state, null);\n  }\n}\n\nfunction callComponentWillReceiveProps(\n  workInProgress,\n  instance,\n  newProps,\n  nextContext,\n) {\n  const oldState = instance.state;\n  if (typeof instance.componentWillReceiveProps === 'function') {\n    instance.componentWillReceiveProps(newProps, nextContext);\n  }\n  if (typeof instance.UNSAFE_componentWillReceiveProps === 'function') {\n    instance.UNSAFE_componentWillReceiveProps(newProps, nextContext);\n  }\n\n  if (instance.state !== oldState) {\n    if (__DEV__) {\n      const componentName =\n        getComponentNameFromFiber(workInProgress) || 'Component';\n      if (!didWarnAboutStateAssignmentForComponent.has(componentName)) {\n        didWarnAboutStateAssignmentForComponent.add(componentName);\n        console.error(\n          '%s.componentWillReceiveProps(): Assigning directly to ' +\n            \"this.state is deprecated (except inside a component's \" +\n            'constructor). Use setState instead.',\n          componentName,\n        );\n      }\n    }\n    classComponentUpdater.enqueueReplaceState(instance, instance.state, null);\n  }\n}\n\n// Invokes the mount life-cycles on a previously never rendered instance.\nfunction mountClassInstance(\n  workInProgress: Fiber,\n  ctor: any,\n  newProps: any,\n  renderLanes: Lanes,\n): void {\n  if (__DEV__) {\n    checkClassInstance(workInProgress, ctor, newProps);\n  }\n\n  const instance = workInProgress.stateNode;\n  instance.props = newProps;\n  instance.state = workInProgress.memoizedState;\n  instance.refs = emptyRefsObject;\n\n  initializeUpdateQueue(workInProgress);\n\n  const contextType = ctor.contextType;\n  if (typeof contextType === 'object' && contextType !== null) {\n    instance.context = readContext(contextType);\n  } else if (disableLegacyContext) {\n    instance.context = emptyContextObject;\n  } else {\n    const unmaskedContext = getUnmaskedContext(workInProgress, ctor, true);\n    instance.context = getMaskedContext(workInProgress, unmaskedContext);\n  }\n\n  if (__DEV__) {\n    if (instance.state === newProps) {\n      const componentName = getComponentNameFromType(ctor) || 'Component';\n      if (!didWarnAboutDirectlyAssigningPropsToState.has(componentName)) {\n        didWarnAboutDirectlyAssigningPropsToState.add(componentName);\n        console.error(\n          '%s: It is not recommended to assign props directly to state ' +\n            \"because updates to props won't be reflected in state. \" +\n            'In most cases, it is better to use props directly.',\n          componentName,\n        );\n      }\n    }\n\n    if (workInProgress.mode & StrictLegacyMode) {\n      ReactStrictModeWarnings.recordLegacyContextWarning(\n        workInProgress,\n        instance,\n      );\n    }\n\n    if (warnAboutDeprecatedLifecycles) {\n      ReactStrictModeWarnings.recordUnsafeLifecycleWarnings(\n        workInProgress,\n        instance,\n      );\n    }\n  }\n\n  instance.state = workInProgress.memoizedState;\n\n  const getDerivedStateFromProps = ctor.getDerivedStateFromProps;\n  if (typeof getDerivedStateFromProps === 'function') {\n    applyDerivedStateFromProps(\n      workInProgress,\n      ctor,\n      getDerivedStateFromProps,\n      newProps,\n    );\n    instance.state = workInProgress.memoizedState;\n  }\n\n  // In order to support react-lifecycles-compat polyfilled components,\n  // Unsafe lifecycles should not be invoked for components using the new APIs.\n  if (\n    typeof ctor.getDerivedStateFromProps !== 'function' &&\n    typeof instance.getSnapshotBeforeUpdate !== 'function' &&\n    (typeof instance.UNSAFE_componentWillMount === 'function' ||\n      typeof instance.componentWillMount === 'function')\n  ) {\n    callComponentWillMount(workInProgress, instance);\n    // If we had additional state updates during this life-cycle, let's\n    // process them now.\n    processUpdateQueue(workInProgress, newProps, instance, renderLanes);\n    instance.state = workInProgress.memoizedState;\n  }\n\n  if (typeof instance.componentDidMount === 'function') {\n    let fiberFlags: Flags = Update;\n    if (enableSuspenseLayoutEffectSemantics) {\n      fiberFlags |= LayoutStatic;\n    }\n    if (\n      __DEV__ &&\n      enableStrictEffects &&\n      (workInProgress.mode & StrictEffectsMode) !== NoMode\n    ) {\n      fiberFlags |= MountLayoutDev;\n    }\n    workInProgress.flags |= fiberFlags;\n  }\n}\n\nfunction resumeMountClassInstance(\n  workInProgress: Fiber,\n  ctor: any,\n  newProps: any,\n  renderLanes: Lanes,\n): boolean {\n  const instance = workInProgress.stateNode;\n\n  const oldProps = workInProgress.memoizedProps;\n  instance.props = oldProps;\n\n  const oldContext = instance.context;\n  const contextType = ctor.contextType;\n  let nextContext = emptyContextObject;\n  if (typeof contextType === 'object' && contextType !== null) {\n    nextContext = readContext(contextType);\n  } else if (!disableLegacyContext) {\n    const nextLegacyUnmaskedContext = getUnmaskedContext(\n      workInProgress,\n      ctor,\n      true,\n    );\n    nextContext = getMaskedContext(workInProgress, nextLegacyUnmaskedContext);\n  }\n\n  const getDerivedStateFromProps = ctor.getDerivedStateFromProps;\n  const hasNewLifecycles =\n    typeof getDerivedStateFromProps === 'function' ||\n    typeof instance.getSnapshotBeforeUpdate === 'function';\n\n  // Note: During these life-cycles, instance.props/instance.state are what\n  // ever the previously attempted to render - not the \"current\". However,\n  // during componentDidUpdate we pass the \"current\" props.\n\n  // In order to support react-lifecycles-compat polyfilled components,\n  // Unsafe lifecycles should not be invoked for components using the new APIs.\n  if (\n    !hasNewLifecycles &&\n    (typeof instance.UNSAFE_componentWillReceiveProps === 'function' ||\n      typeof instance.componentWillReceiveProps === 'function')\n  ) {\n    if (oldProps !== newProps || oldContext !== nextContext) {\n      callComponentWillReceiveProps(\n        workInProgress,\n        instance,\n        newProps,\n        nextContext,\n      );\n    }\n  }\n\n  resetHasForceUpdateBeforeProcessing();\n\n  const oldState = workInProgress.memoizedState;\n  let newState = (instance.state = oldState);\n  processUpdateQueue(workInProgress, newProps, instance, renderLanes);\n  newState = workInProgress.memoizedState;\n  if (\n    oldProps === newProps &&\n    oldState === newState &&\n    !hasContextChanged() &&\n    !checkHasForceUpdateAfterProcessing()\n  ) {\n    // If an update was already in progress, we should schedule an Update\n    // effect even though we're bailing out, so that cWU/cDU are called.\n    if (typeof instance.componentDidMount === 'function') {\n      let fiberFlags: Flags = Update;\n      if (enableSuspenseLayoutEffectSemantics) {\n        fiberFlags |= LayoutStatic;\n      }\n      if (\n        __DEV__ &&\n        enableStrictEffects &&\n        (workInProgress.mode & StrictEffectsMode) !== NoMode\n      ) {\n        fiberFlags |= MountLayoutDev;\n      }\n      workInProgress.flags |= fiberFlags;\n    }\n    return false;\n  }\n\n  if (typeof getDerivedStateFromProps === 'function') {\n    applyDerivedStateFromProps(\n      workInProgress,\n      ctor,\n      getDerivedStateFromProps,\n      newProps,\n    );\n    newState = workInProgress.memoizedState;\n  }\n\n  const shouldUpdate =\n    checkHasForceUpdateAfterProcessing() ||\n    checkShouldComponentUpdate(\n      workInProgress,\n      ctor,\n      oldProps,\n      newProps,\n      oldState,\n      newState,\n      nextContext,\n    );\n\n  if (shouldUpdate) {\n    // In order to support react-lifecycles-compat polyfilled components,\n    // Unsafe lifecycles should not be invoked for components using the new APIs.\n    if (\n      !hasNewLifecycles &&\n      (typeof instance.UNSAFE_componentWillMount === 'function' ||\n        typeof instance.componentWillMount === 'function')\n    ) {\n      if (typeof instance.componentWillMount === 'function') {\n        instance.componentWillMount();\n      }\n      if (typeof instance.UNSAFE_componentWillMount === 'function') {\n        instance.UNSAFE_componentWillMount();\n      }\n    }\n    if (typeof instance.componentDidMount === 'function') {\n      let fiberFlags: Flags = Update;\n      if (enableSuspenseLayoutEffectSemantics) {\n        fiberFlags |= LayoutStatic;\n      }\n      if (\n        __DEV__ &&\n        enableStrictEffects &&\n        (workInProgress.mode & StrictEffectsMode) !== NoMode\n      ) {\n        fiberFlags |= MountLayoutDev;\n      }\n      workInProgress.flags |= fiberFlags;\n    }\n  } else {\n    // If an update was already in progress, we should schedule an Update\n    // effect even though we're bailing out, so that cWU/cDU are called.\n    if (typeof instance.componentDidMount === 'function') {\n      let fiberFlags: Flags = Update;\n      if (enableSuspenseLayoutEffectSemantics) {\n        fiberFlags |= LayoutStatic;\n      }\n      if (\n        __DEV__ &&\n        enableStrictEffects &&\n        (workInProgress.mode & StrictEffectsMode) !== NoMode\n      ) {\n        fiberFlags |= MountLayoutDev;\n      }\n      workInProgress.flags |= fiberFlags;\n    }\n\n    // If shouldComponentUpdate returned false, we should still update the\n    // memoized state to indicate that this work can be reused.\n    workInProgress.memoizedProps = newProps;\n    workInProgress.memoizedState = newState;\n  }\n\n  // Update the existing instance's state, props, and context pointers even\n  // if shouldComponentUpdate returns false.\n  instance.props = newProps;\n  instance.state = newState;\n  instance.context = nextContext;\n\n  return shouldUpdate;\n}\n\n// Invokes the update life-cycles and returns false if it shouldn't rerender.\nfunction updateClassInstance(\n  current: Fiber,\n  workInProgress: Fiber,\n  ctor: any,\n  newProps: any,\n  renderLanes: Lanes,\n): boolean {\n  const instance = workInProgress.stateNode;\n\n  cloneUpdateQueue(current, workInProgress);\n\n  const unresolvedOldProps = workInProgress.memoizedProps;\n  const oldProps =\n    workInProgress.type === workInProgress.elementType\n      ? unresolvedOldProps\n      : resolveDefaultProps(workInProgress.type, unresolvedOldProps);\n  instance.props = oldProps;\n  const unresolvedNewProps = workInProgress.pendingProps;\n\n  const oldContext = instance.context;\n  const contextType = ctor.contextType;\n  let nextContext = emptyContextObject;\n  if (typeof contextType === 'object' && contextType !== null) {\n    nextContext = readContext(contextType);\n  } else if (!disableLegacyContext) {\n    const nextUnmaskedContext = getUnmaskedContext(workInProgress, ctor, true);\n    nextContext = getMaskedContext(workInProgress, nextUnmaskedContext);\n  }\n\n  const getDerivedStateFromProps = ctor.getDerivedStateFromProps;\n  const hasNewLifecycles =\n    typeof getDerivedStateFromProps === 'function' ||\n    typeof instance.getSnapshotBeforeUpdate === 'function';\n\n  // Note: During these life-cycles, instance.props/instance.state are what\n  // ever the previously attempted to render - not the \"current\". However,\n  // during componentDidUpdate we pass the \"current\" props.\n\n  // In order to support react-lifecycles-compat polyfilled components,\n  // Unsafe lifecycles should not be invoked for components using the new APIs.\n  if (\n    !hasNewLifecycles &&\n    (typeof instance.UNSAFE_componentWillReceiveProps === 'function' ||\n      typeof instance.componentWillReceiveProps === 'function')\n  ) {\n    if (\n      unresolvedOldProps !== unresolvedNewProps ||\n      oldContext !== nextContext\n    ) {\n      callComponentWillReceiveProps(\n        workInProgress,\n        instance,\n        newProps,\n        nextContext,\n      );\n    }\n  }\n\n  resetHasForceUpdateBeforeProcessing();\n\n  const oldState = workInProgress.memoizedState;\n  let newState = (instance.state = oldState);\n  processUpdateQueue(workInProgress, newProps, instance, renderLanes);\n  newState = workInProgress.memoizedState;\n\n  if (\n    unresolvedOldProps === unresolvedNewProps &&\n    oldState === newState &&\n    !hasContextChanged() &&\n    !checkHasForceUpdateAfterProcessing() &&\n    !(\n      enableLazyContextPropagation &&\n      current !== null &&\n      current.dependencies !== null &&\n      checkIfContextChanged(current.dependencies)\n    )\n  ) {\n    // If an update was already in progress, we should schedule an Update\n    // effect even though we're bailing out, so that cWU/cDU are called.\n    if (typeof instance.componentDidUpdate === 'function') {\n      if (\n        unresolvedOldProps !== current.memoizedProps ||\n        oldState !== current.memoizedState\n      ) {\n        workInProgress.flags |= Update;\n      }\n    }\n    if (typeof instance.getSnapshotBeforeUpdate === 'function') {\n      if (\n        unresolvedOldProps !== current.memoizedProps ||\n        oldState !== current.memoizedState\n      ) {\n        workInProgress.flags |= Snapshot;\n      }\n    }\n    return false;\n  }\n\n  if (typeof getDerivedStateFromProps === 'function') {\n    applyDerivedStateFromProps(\n      workInProgress,\n      ctor,\n      getDerivedStateFromProps,\n      newProps,\n    );\n    newState = workInProgress.memoizedState;\n  }\n\n  const shouldUpdate =\n    checkHasForceUpdateAfterProcessing() ||\n    checkShouldComponentUpdate(\n      workInProgress,\n      ctor,\n      oldProps,\n      newProps,\n      oldState,\n      newState,\n      nextContext,\n    ) ||\n    // TODO: In some cases, we'll end up checking if context has changed twice,\n    // both before and after `shouldComponentUpdate` has been called. Not ideal,\n    // but I'm loath to refactor this function. This only happens for memoized\n    // components so it's not that common.\n    (enableLazyContextPropagation &&\n      current !== null &&\n      current.dependencies !== null &&\n      checkIfContextChanged(current.dependencies));\n\n  if (shouldUpdate) {\n    // In order to support react-lifecycles-compat polyfilled components,\n    // Unsafe lifecycles should not be invoked for components using the new APIs.\n    if (\n      !hasNewLifecycles &&\n      (typeof instance.UNSAFE_componentWillUpdate === 'function' ||\n        typeof instance.componentWillUpdate === 'function')\n    ) {\n      if (typeof instance.componentWillUpdate === 'function') {\n        instance.componentWillUpdate(newProps, newState, nextContext);\n      }\n      if (typeof instance.UNSAFE_componentWillUpdate === 'function') {\n        instance.UNSAFE_componentWillUpdate(newProps, newState, nextContext);\n      }\n    }\n    if (typeof instance.componentDidUpdate === 'function') {\n      workInProgress.flags |= Update;\n    }\n    if (typeof instance.getSnapshotBeforeUpdate === 'function') {\n      workInProgress.flags |= Snapshot;\n    }\n  } else {\n    // If an update was already in progress, we should schedule an Update\n    // effect even though we're bailing out, so that cWU/cDU are called.\n    if (typeof instance.componentDidUpdate === 'function') {\n      if (\n        unresolvedOldProps !== current.memoizedProps ||\n        oldState !== current.memoizedState\n      ) {\n        workInProgress.flags |= Update;\n      }\n    }\n    if (typeof instance.getSnapshotBeforeUpdate === 'function') {\n      if (\n        unresolvedOldProps !== current.memoizedProps ||\n        oldState !== current.memoizedState\n      ) {\n        workInProgress.flags |= Snapshot;\n      }\n    }\n\n    // If shouldComponentUpdate returned false, we should still update the\n    // memoized props/state to indicate that this work can be reused.\n    workInProgress.memoizedProps = newProps;\n    workInProgress.memoizedState = newState;\n  }\n\n  // Update the existing instance's state, props, and context pointers even\n  // if shouldComponentUpdate returns false.\n  instance.props = newProps;\n  instance.state = newState;\n  instance.context = nextContext;\n\n  return shouldUpdate;\n}\n\nexport {\n  adoptClassInstance,\n  constructClassInstance,\n  mountClassInstance,\n  resumeMountClassInstance,\n  updateClassInstance,\n};\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {ReactElement} from 'shared/ReactElementType';\nimport type {ReactPortal} from 'shared/ReactTypes';\nimport type {Fiber} from './ReactInternalTypes';\nimport type {Lanes} from './ReactFiberLane.old';\n\nimport getComponentNameFromFiber from 'react-reconciler/src/getComponentNameFromFiber';\nimport {Placement, ChildDeletion} from './ReactFiberFlags';\nimport {\n  getIteratorFn,\n  REACT_ELEMENT_TYPE,\n  REACT_FRAGMENT_TYPE,\n  REACT_PORTAL_TYPE,\n  REACT_LAZY_TYPE,\n} from 'shared/ReactSymbols';\nimport {ClassComponent, HostText, HostPortal, Fragment} from './ReactWorkTags';\nimport invariant from 'shared/invariant';\nimport isArray from 'shared/isArray';\nimport {\n  warnAboutStringRefs,\n  enableLazyElements,\n} from 'shared/ReactFeatureFlags';\n\nimport {\n  createWorkInProgress,\n  resetWorkInProgress,\n  createFiberFromElement,\n  createFiberFromFragment,\n  createFiberFromText,\n  createFiberFromPortal,\n} from './ReactFiber.old';\nimport {emptyRefsObject} from './ReactFiberClassComponent.old';\nimport {isCompatibleFamilyForHotReloading} from './ReactFiberHotReloading.old';\nimport {StrictLegacyMode} from './ReactTypeOfMode';\n\nlet didWarnAboutMaps;\nlet didWarnAboutGenerators;\nlet didWarnAboutStringRefs;\nlet ownerHasKeyUseWarning;\nlet ownerHasFunctionTypeWarning;\nlet warnForMissingKey = (child: mixed, returnFiber: Fiber) => {};\n\nif (__DEV__) {\n  didWarnAboutMaps = false;\n  didWarnAboutGenerators = false;\n  didWarnAboutStringRefs = {};\n\n  /**\n   * Warn if there's no key explicitly set on dynamic arrays of children or\n   * object keys are not valid. This allows us to keep track of children between\n   * updates.\n   */\n  ownerHasKeyUseWarning = {};\n  ownerHasFunctionTypeWarning = {};\n\n  warnForMissingKey = (child: mixed, returnFiber: Fiber) => {\n    if (child === null || typeof child !== 'object') {\n      return;\n    }\n    if (!child._store || child._store.validated || child.key != null) {\n      return;\n    }\n    invariant(\n      typeof child._store === 'object',\n      'React Component in warnForMissingKey should have a _store. ' +\n        'This error is likely caused by a bug in React. Please file an issue.',\n    );\n    child._store.validated = true;\n\n    const componentName = getComponentNameFromFiber(returnFiber) || 'Component';\n\n    if (ownerHasKeyUseWarning[componentName]) {\n      return;\n    }\n    ownerHasKeyUseWarning[componentName] = true;\n\n    console.error(\n      'Each child in a list should have a unique ' +\n        '\"key\" prop. See https://reactjs.org/link/warning-keys for ' +\n        'more information.',\n    );\n  };\n}\n\nfunction coerceRef(\n  returnFiber: Fiber,\n  current: Fiber | null,\n  element: ReactElement,\n) {\n  const mixedRef = element.ref;\n  if (\n    mixedRef !== null &&\n    typeof mixedRef !== 'function' &&\n    typeof mixedRef !== 'object'\n  ) {\n    if (__DEV__) {\n      // TODO: Clean this up once we turn on the string ref warning for\n      // everyone, because the strict mode case will no longer be relevant\n      if (\n        (returnFiber.mode & StrictLegacyMode || warnAboutStringRefs) &&\n        // We warn in ReactElement.js if owner and self are equal for string refs\n        // because these cannot be automatically converted to an arrow function\n        // using a codemod. Therefore, we don't have to warn about string refs again.\n        !(\n          element._owner &&\n          element._self &&\n          element._owner.stateNode !== element._self\n        )\n      ) {\n        const componentName =\n          getComponentNameFromFiber(returnFiber) || 'Component';\n        if (!didWarnAboutStringRefs[componentName]) {\n          if (warnAboutStringRefs) {\n            console.error(\n              'Component \"%s\" contains the string ref \"%s\". Support for string refs ' +\n                'will be removed in a future major release. We recommend using ' +\n                'useRef() or createRef() instead. ' +\n                'Learn more about using refs safely here: ' +\n                'https://reactjs.org/link/strict-mode-string-ref',\n              componentName,\n              mixedRef,\n            );\n          } else {\n            console.error(\n              'A string ref, \"%s\", has been found within a strict mode tree. ' +\n                'String refs are a source of potential bugs and should be avoided. ' +\n                'We recommend using useRef() or createRef() instead. ' +\n                'Learn more about using refs safely here: ' +\n                'https://reactjs.org/link/strict-mode-string-ref',\n              mixedRef,\n            );\n          }\n          didWarnAboutStringRefs[componentName] = true;\n        }\n      }\n    }\n\n    if (element._owner) {\n      const owner: ?Fiber = (element._owner: any);\n      let inst;\n      if (owner) {\n        const ownerFiber = ((owner: any): Fiber);\n        invariant(\n          ownerFiber.tag === ClassComponent,\n          'Function components cannot have string refs. ' +\n            'We recommend using useRef() instead. ' +\n            'Learn more about using refs safely here: ' +\n            'https://reactjs.org/link/strict-mode-string-ref',\n        );\n        inst = ownerFiber.stateNode;\n      }\n      invariant(\n        inst,\n        'Missing owner for string ref %s. This error is likely caused by a ' +\n          'bug in React. Please file an issue.',\n        mixedRef,\n      );\n      const stringRef = '' + mixedRef;\n      // Check if previous string ref matches new string ref\n      if (\n        current !== null &&\n        current.ref !== null &&\n        typeof current.ref === 'function' &&\n        current.ref._stringRef === stringRef\n      ) {\n        return current.ref;\n      }\n      const ref = function(value) {\n        let refs = inst.refs;\n        if (refs === emptyRefsObject) {\n          // This is a lazy pooled frozen object, so we need to initialize.\n          refs = inst.refs = {};\n        }\n        if (value === null) {\n          delete refs[stringRef];\n        } else {\n          refs[stringRef] = value;\n        }\n      };\n      ref._stringRef = stringRef;\n      return ref;\n    } else {\n      invariant(\n        typeof mixedRef === 'string',\n        'Expected ref to be a function, a string, an object returned by React.createRef(), or null.',\n      );\n      invariant(\n        element._owner,\n        'Element ref was specified as a string (%s) but no owner was set. This could happen for one of' +\n          ' the following reasons:\\n' +\n          '1. You may be adding a ref to a function component\\n' +\n          \"2. You may be adding a ref to a component that was not created inside a component's render method\\n\" +\n          '3. You have multiple copies of React loaded\\n' +\n          'See https://reactjs.org/link/refs-must-have-owner for more information.',\n        mixedRef,\n      );\n    }\n  }\n  return mixedRef;\n}\n\nfunction throwOnInvalidObjectType(returnFiber: Fiber, newChild: Object) {\n  const childString = Object.prototype.toString.call(newChild);\n  invariant(\n    false,\n    'Objects are not valid as a React child (found: %s). ' +\n      'If you meant to render a collection of children, use an array ' +\n      'instead.',\n    childString === '[object Object]'\n      ? 'object with keys {' + Object.keys(newChild).join(', ') + '}'\n      : childString,\n  );\n}\n\nfunction warnOnFunctionType(returnFiber: Fiber) {\n  if (__DEV__) {\n    const componentName = getComponentNameFromFiber(returnFiber) || 'Component';\n\n    if (ownerHasFunctionTypeWarning[componentName]) {\n      return;\n    }\n    ownerHasFunctionTypeWarning[componentName] = true;\n\n    console.error(\n      'Functions are not valid as a React child. This may happen if ' +\n        'you return a Component instead of <Component /> from render. ' +\n        'Or maybe you meant to call this function rather than return it.',\n    );\n  }\n}\n\nfunction resolveLazy(lazyType) {\n  const payload = lazyType._payload;\n  const init = lazyType._init;\n  return init(payload);\n}\n\n// This wrapper function exists because I expect to clone the code in each path\n// to be able to optimize each path individually by branching early. This needs\n// a compiler or we can do it manually. Helpers that don't need this branching\n// live outside of this function.\nfunction ChildReconciler(shouldTrackSideEffects) {\n  function deleteChild(returnFiber: Fiber, childToDelete: Fiber): void {\n    if (!shouldTrackSideEffects) {\n      // Noop.\n      return;\n    }\n    const deletions = returnFiber.deletions;\n    if (deletions === null) {\n      returnFiber.deletions = [childToDelete];\n      returnFiber.flags |= ChildDeletion;\n    } else {\n      deletions.push(childToDelete);\n    }\n  }\n\n  function deleteRemainingChildren(\n    returnFiber: Fiber,\n    currentFirstChild: Fiber | null,\n  ): null {\n    if (!shouldTrackSideEffects) {\n      // Noop.\n      return null;\n    }\n\n    // TODO: For the shouldClone case, this could be micro-optimized a bit by\n    // assuming that after the first child we've already added everything.\n    let childToDelete = currentFirstChild;\n    while (childToDelete !== null) {\n      deleteChild(returnFiber, childToDelete);\n      childToDelete = childToDelete.sibling;\n    }\n    return null;\n  }\n\n  function mapRemainingChildren(\n    returnFiber: Fiber,\n    currentFirstChild: Fiber,\n  ): Map<string | number, Fiber> {\n    // Add the remaining children to a temporary map so that we can find them by\n    // keys quickly. Implicit (null) keys get added to this set with their index\n    // instead.\n    const existingChildren: Map<string | number, Fiber> = new Map();\n\n    let existingChild = currentFirstChild;\n    while (existingChild !== null) {\n      if (existingChild.key !== null) {\n        existingChildren.set(existingChild.key, existingChild);\n      } else {\n        existingChildren.set(existingChild.index, existingChild);\n      }\n      existingChild = existingChild.sibling;\n    }\n    return existingChildren;\n  }\n\n  function useFiber(fiber: Fiber, pendingProps: mixed): Fiber {\n    // We currently set sibling to null and index to 0 here because it is easy\n    // to forget to do before returning it. E.g. for the single child case.\n    const clone = createWorkInProgress(fiber, pendingProps);\n    clone.index = 0;\n    clone.sibling = null;\n    return clone;\n  }\n\n  function placeChild(\n    newFiber: Fiber,\n    lastPlacedIndex: number,\n    newIndex: number,\n  ): number {\n    newFiber.index = newIndex;\n    if (!shouldTrackSideEffects) {\n      // Noop.\n      return lastPlacedIndex;\n    }\n    const current = newFiber.alternate;\n    if (current !== null) {\n      const oldIndex = current.index;\n      if (oldIndex < lastPlacedIndex) {\n        // This is a move.\n        newFiber.flags |= Placement;\n        return lastPlacedIndex;\n      } else {\n        // This item can stay in place.\n        return oldIndex;\n      }\n    } else {\n      // This is an insertion.\n      newFiber.flags |= Placement;\n      return lastPlacedIndex;\n    }\n  }\n\n  function placeSingleChild(newFiber: Fiber): Fiber {\n    // This is simpler for the single child case. We only need to do a\n    // placement for inserting new children.\n    if (shouldTrackSideEffects && newFiber.alternate === null) {\n      newFiber.flags |= Placement;\n    }\n    return newFiber;\n  }\n\n  function updateTextNode(\n    returnFiber: Fiber,\n    current: Fiber | null,\n    textContent: string,\n    lanes: Lanes,\n  ) {\n    if (current === null || current.tag !== HostText) {\n      // Insert\n      const created = createFiberFromText(textContent, returnFiber.mode, lanes);\n      created.return = returnFiber;\n      return created;\n    } else {\n      // Update\n      const existing = useFiber(current, textContent);\n      existing.return = returnFiber;\n      return existing;\n    }\n  }\n\n  function updateElement(\n    returnFiber: Fiber,\n    current: Fiber | null,\n    element: ReactElement,\n    lanes: Lanes,\n  ): Fiber {\n    const elementType = element.type;\n    if (elementType === REACT_FRAGMENT_TYPE) {\n      return updateFragment(\n        returnFiber,\n        current,\n        element.props.children,\n        lanes,\n        element.key,\n      );\n    }\n    if (current !== null) {\n      if (\n        current.elementType === elementType ||\n        // Keep this check inline so it only runs on the false path:\n        (__DEV__\n          ? isCompatibleFamilyForHotReloading(current, element)\n          : false) ||\n        // Lazy types should reconcile their resolved type.\n        // We need to do this after the Hot Reloading check above,\n        // because hot reloading has different semantics than prod because\n        // it doesn't resuspend. So we can't let the call below suspend.\n        (enableLazyElements &&\n          typeof elementType === 'object' &&\n          elementType !== null &&\n          elementType.$$typeof === REACT_LAZY_TYPE &&\n          resolveLazy(elementType) === current.type)\n      ) {\n        // Move based on index\n        const existing = useFiber(current, element.props);\n        existing.ref = coerceRef(returnFiber, current, element);\n        existing.return = returnFiber;\n        if (__DEV__) {\n          existing._debugSource = element._source;\n          existing._debugOwner = element._owner;\n        }\n        return existing;\n      }\n    }\n    // Insert\n    const created = createFiberFromElement(element, returnFiber.mode, lanes);\n    created.ref = coerceRef(returnFiber, current, element);\n    created.return = returnFiber;\n    return created;\n  }\n\n  function updatePortal(\n    returnFiber: Fiber,\n    current: Fiber | null,\n    portal: ReactPortal,\n    lanes: Lanes,\n  ): Fiber {\n    if (\n      current === null ||\n      current.tag !== HostPortal ||\n      current.stateNode.containerInfo !== portal.containerInfo ||\n      current.stateNode.implementation !== portal.implementation\n    ) {\n      // Insert\n      const created = createFiberFromPortal(portal, returnFiber.mode, lanes);\n      created.return = returnFiber;\n      return created;\n    } else {\n      // Update\n      const existing = useFiber(current, portal.children || []);\n      existing.return = returnFiber;\n      return existing;\n    }\n  }\n\n  function updateFragment(\n    returnFiber: Fiber,\n    current: Fiber | null,\n    fragment: Iterable<*>,\n    lanes: Lanes,\n    key: null | string,\n  ): Fiber {\n    if (current === null || current.tag !== Fragment) {\n      // Insert\n      const created = createFiberFromFragment(\n        fragment,\n        returnFiber.mode,\n        lanes,\n        key,\n      );\n      created.return = returnFiber;\n      return created;\n    } else {\n      // Update\n      const existing = useFiber(current, fragment);\n      existing.return = returnFiber;\n      return existing;\n    }\n  }\n\n  function createChild(\n    returnFiber: Fiber,\n    newChild: any,\n    lanes: Lanes,\n  ): Fiber | null {\n    if (typeof newChild === 'string' || typeof newChild === 'number') {\n      // Text nodes don't have keys. If the previous node is implicitly keyed\n      // we can continue to replace it without aborting even if it is not a text\n      // node.\n      const created = createFiberFromText(\n        '' + newChild,\n        returnFiber.mode,\n        lanes,\n      );\n      created.return = returnFiber;\n      return created;\n    }\n\n    if (typeof newChild === 'object' && newChild !== null) {\n      switch (newChild.$$typeof) {\n        case REACT_ELEMENT_TYPE: {\n          const created = createFiberFromElement(\n            newChild,\n            returnFiber.mode,\n            lanes,\n          );\n          created.ref = coerceRef(returnFiber, null, newChild);\n          created.return = returnFiber;\n          return created;\n        }\n        case REACT_PORTAL_TYPE: {\n          const created = createFiberFromPortal(\n            newChild,\n            returnFiber.mode,\n            lanes,\n          );\n          created.return = returnFiber;\n          return created;\n        }\n        case REACT_LAZY_TYPE: {\n          if (enableLazyElements) {\n            const payload = newChild._payload;\n            const init = newChild._init;\n            return createChild(returnFiber, init(payload), lanes);\n          }\n        }\n      }\n\n      if (isArray(newChild) || getIteratorFn(newChild)) {\n        const created = createFiberFromFragment(\n          newChild,\n          returnFiber.mode,\n          lanes,\n          null,\n        );\n        created.return = returnFiber;\n        return created;\n      }\n\n      throwOnInvalidObjectType(returnFiber, newChild);\n    }\n\n    if (__DEV__) {\n      if (typeof newChild === 'function') {\n        warnOnFunctionType(returnFiber);\n      }\n    }\n\n    return null;\n  }\n\n  function updateSlot(\n    returnFiber: Fiber,\n    oldFiber: Fiber | null,\n    newChild: any,\n    lanes: Lanes,\n  ): Fiber | null {\n    // Update the fiber if the keys match, otherwise return null.\n\n    const key = oldFiber !== null ? oldFiber.key : null;\n\n    if (typeof newChild === 'string' || typeof newChild === 'number') {\n      // Text nodes don't have keys. If the previous node is implicitly keyed\n      // we can continue to replace it without aborting even if it is not a text\n      // node.\n      if (key !== null) {\n        return null;\n      }\n      return updateTextNode(returnFiber, oldFiber, '' + newChild, lanes);\n    }\n\n    if (typeof newChild === 'object' && newChild !== null) {\n      switch (newChild.$$typeof) {\n        case REACT_ELEMENT_TYPE: {\n          if (newChild.key === key) {\n            return updateElement(returnFiber, oldFiber, newChild, lanes);\n          } else {\n            return null;\n          }\n        }\n        case REACT_PORTAL_TYPE: {\n          if (newChild.key === key) {\n            return updatePortal(returnFiber, oldFiber, newChild, lanes);\n          } else {\n            return null;\n          }\n        }\n        case REACT_LAZY_TYPE: {\n          if (enableLazyElements) {\n            const payload = newChild._payload;\n            const init = newChild._init;\n            return updateSlot(returnFiber, oldFiber, init(payload), lanes);\n          }\n        }\n      }\n\n      if (isArray(newChild) || getIteratorFn(newChild)) {\n        if (key !== null) {\n          return null;\n        }\n\n        return updateFragment(returnFiber, oldFiber, newChild, lanes, null);\n      }\n\n      throwOnInvalidObjectType(returnFiber, newChild);\n    }\n\n    if (__DEV__) {\n      if (typeof newChild === 'function') {\n        warnOnFunctionType(returnFiber);\n      }\n    }\n\n    return null;\n  }\n\n  function updateFromMap(\n    existingChildren: Map<string | number, Fiber>,\n    returnFiber: Fiber,\n    newIdx: number,\n    newChild: any,\n    lanes: Lanes,\n  ): Fiber | null {\n    if (typeof newChild === 'string' || typeof newChild === 'number') {\n      // Text nodes don't have keys, so we neither have to check the old nor\n      // new node for the key. If both are text nodes, they match.\n      const matchedFiber = existingChildren.get(newIdx) || null;\n      return updateTextNode(returnFiber, matchedFiber, '' + newChild, lanes);\n    }\n\n    if (typeof newChild === 'object' && newChild !== null) {\n      switch (newChild.$$typeof) {\n        case REACT_ELEMENT_TYPE: {\n          const matchedFiber =\n            existingChildren.get(\n              newChild.key === null ? newIdx : newChild.key,\n            ) || null;\n          return updateElement(returnFiber, matchedFiber, newChild, lanes);\n        }\n        case REACT_PORTAL_TYPE: {\n          const matchedFiber =\n            existingChildren.get(\n              newChild.key === null ? newIdx : newChild.key,\n            ) || null;\n          return updatePortal(returnFiber, matchedFiber, newChild, lanes);\n        }\n        case REACT_LAZY_TYPE:\n          if (enableLazyElements) {\n            const payload = newChild._payload;\n            const init = newChild._init;\n            return updateFromMap(\n              existingChildren,\n              returnFiber,\n              newIdx,\n              init(payload),\n              lanes,\n            );\n          }\n      }\n\n      if (isArray(newChild) || getIteratorFn(newChild)) {\n        const matchedFiber = existingChildren.get(newIdx) || null;\n        return updateFragment(returnFiber, matchedFiber, newChild, lanes, null);\n      }\n\n      throwOnInvalidObjectType(returnFiber, newChild);\n    }\n\n    if (__DEV__) {\n      if (typeof newChild === 'function') {\n        warnOnFunctionType(returnFiber);\n      }\n    }\n\n    return null;\n  }\n\n  /**\n   * Warns if there is a duplicate or missing key\n   */\n  function warnOnInvalidKey(\n    child: mixed,\n    knownKeys: Set<string> | null,\n    returnFiber: Fiber,\n  ): Set<string> | null {\n    if (__DEV__) {\n      if (typeof child !== 'object' || child === null) {\n        return knownKeys;\n      }\n      switch (child.$$typeof) {\n        case REACT_ELEMENT_TYPE:\n        case REACT_PORTAL_TYPE:\n          warnForMissingKey(child, returnFiber);\n          const key = child.key;\n          if (typeof key !== 'string') {\n            break;\n          }\n          if (knownKeys === null) {\n            knownKeys = new Set();\n            knownKeys.add(key);\n            break;\n          }\n          if (!knownKeys.has(key)) {\n            knownKeys.add(key);\n            break;\n          }\n          console.error(\n            'Encountered two children with the same key, `%s`. ' +\n              'Keys should be unique so that components maintain their identity ' +\n              'across updates. Non-unique keys may cause children to be ' +\n              'duplicated and/or omitted — the behavior is unsupported and ' +\n              'could change in a future version.',\n            key,\n          );\n          break;\n        case REACT_LAZY_TYPE:\n          if (enableLazyElements) {\n            const payload = child._payload;\n            const init = (child._init: any);\n            warnOnInvalidKey(init(payload), knownKeys, returnFiber);\n            break;\n          }\n        // We intentionally fallthrough here if enableLazyElements is not on.\n        // eslint-disable-next-lined no-fallthrough\n        default:\n          break;\n      }\n    }\n    return knownKeys;\n  }\n\n  function reconcileChildrenArray(\n    returnFiber: Fiber,\n    currentFirstChild: Fiber | null,\n    newChildren: Array<*>,\n    lanes: Lanes,\n  ): Fiber | null {\n    // This algorithm can't optimize by searching from both ends since we\n    // don't have backpointers on fibers. I'm trying to see how far we can get\n    // with that model. If it ends up not being worth the tradeoffs, we can\n    // add it later.\n\n    // Even with a two ended optimization, we'd want to optimize for the case\n    // where there are few changes and brute force the comparison instead of\n    // going for the Map. It'd like to explore hitting that path first in\n    // forward-only mode and only go for the Map once we notice that we need\n    // lots of look ahead. This doesn't handle reversal as well as two ended\n    // search but that's unusual. Besides, for the two ended optimization to\n    // work on Iterables, we'd need to copy the whole set.\n\n    // In this first iteration, we'll just live with hitting the bad case\n    // (adding everything to a Map) in for every insert/move.\n\n    // If you change this code, also update reconcileChildrenIterator() which\n    // uses the same algorithm.\n\n    if (__DEV__) {\n      // First, validate keys.\n      let knownKeys = null;\n      for (let i = 0; i < newChildren.length; i++) {\n        const child = newChildren[i];\n        knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);\n      }\n    }\n\n    let resultingFirstChild: Fiber | null = null;\n    let previousNewFiber: Fiber | null = null;\n\n    let oldFiber = currentFirstChild;\n    let lastPlacedIndex = 0;\n    let newIdx = 0;\n    let nextOldFiber = null;\n    for (; oldFiber !== null && newIdx < newChildren.length; newIdx++) {\n      if (oldFiber.index > newIdx) {\n        nextOldFiber = oldFiber;\n        oldFiber = null;\n      } else {\n        nextOldFiber = oldFiber.sibling;\n      }\n      const newFiber = updateSlot(\n        returnFiber,\n        oldFiber,\n        newChildren[newIdx],\n        lanes,\n      );\n      if (newFiber === null) {\n        // TODO: This breaks on empty slots like null children. That's\n        // unfortunate because it triggers the slow path all the time. We need\n        // a better way to communicate whether this was a miss or null,\n        // boolean, undefined, etc.\n        if (oldFiber === null) {\n          oldFiber = nextOldFiber;\n        }\n        break;\n      }\n      if (shouldTrackSideEffects) {\n        if (oldFiber && newFiber.alternate === null) {\n          // We matched the slot, but we didn't reuse the existing fiber, so we\n          // need to delete the existing child.\n          deleteChild(returnFiber, oldFiber);\n        }\n      }\n      lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);\n      if (previousNewFiber === null) {\n        // TODO: Move out of the loop. This only happens for the first run.\n        resultingFirstChild = newFiber;\n      } else {\n        // TODO: Defer siblings if we're not at the right index for this slot.\n        // I.e. if we had null values before, then we want to defer this\n        // for each null value. However, we also don't want to call updateSlot\n        // with the previous one.\n        previousNewFiber.sibling = newFiber;\n      }\n      previousNewFiber = newFiber;\n      oldFiber = nextOldFiber;\n    }\n\n    if (newIdx === newChildren.length) {\n      // We've reached the end of the new children. We can delete the rest.\n      deleteRemainingChildren(returnFiber, oldFiber);\n      return resultingFirstChild;\n    }\n\n    if (oldFiber === null) {\n      // If we don't have any more existing children we can choose a fast path\n      // since the rest will all be insertions.\n      for (; newIdx < newChildren.length; newIdx++) {\n        const newFiber = createChild(returnFiber, newChildren[newIdx], lanes);\n        if (newFiber === null) {\n          continue;\n        }\n        lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);\n        if (previousNewFiber === null) {\n          // TODO: Move out of the loop. This only happens for the first run.\n          resultingFirstChild = newFiber;\n        } else {\n          previousNewFiber.sibling = newFiber;\n        }\n        previousNewFiber = newFiber;\n      }\n      return resultingFirstChild;\n    }\n\n    // Add all children to a key map for quick lookups.\n    const existingChildren = mapRemainingChildren(returnFiber, oldFiber);\n\n    // Keep scanning and use the map to restore deleted items as moves.\n    for (; newIdx < newChildren.length; newIdx++) {\n      const newFiber = updateFromMap(\n        existingChildren,\n        returnFiber,\n        newIdx,\n        newChildren[newIdx],\n        lanes,\n      );\n      if (newFiber !== null) {\n        if (shouldTrackSideEffects) {\n          if (newFiber.alternate !== null) {\n            // The new fiber is a work in progress, but if there exists a\n            // current, that means that we reused the fiber. We need to delete\n            // it from the child list so that we don't add it to the deletion\n            // list.\n            existingChildren.delete(\n              newFiber.key === null ? newIdx : newFiber.key,\n            );\n          }\n        }\n        lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);\n        if (previousNewFiber === null) {\n          resultingFirstChild = newFiber;\n        } else {\n          previousNewFiber.sibling = newFiber;\n        }\n        previousNewFiber = newFiber;\n      }\n    }\n\n    if (shouldTrackSideEffects) {\n      // Any existing children that weren't consumed above were deleted. We need\n      // to add them to the deletion list.\n      existingChildren.forEach(child => deleteChild(returnFiber, child));\n    }\n\n    return resultingFirstChild;\n  }\n\n  function reconcileChildrenIterator(\n    returnFiber: Fiber,\n    currentFirstChild: Fiber | null,\n    newChildrenIterable: Iterable<*>,\n    lanes: Lanes,\n  ): Fiber | null {\n    // This is the same implementation as reconcileChildrenArray(),\n    // but using the iterator instead.\n\n    const iteratorFn = getIteratorFn(newChildrenIterable);\n    invariant(\n      typeof iteratorFn === 'function',\n      'An object is not an iterable. This error is likely caused by a bug in ' +\n        'React. Please file an issue.',\n    );\n\n    if (__DEV__) {\n      // We don't support rendering Generators because it's a mutation.\n      // See https://github.com/facebook/react/issues/12995\n      if (\n        typeof Symbol === 'function' &&\n        // $FlowFixMe Flow doesn't know about toStringTag\n        newChildrenIterable[Symbol.toStringTag] === 'Generator'\n      ) {\n        if (!didWarnAboutGenerators) {\n          console.error(\n            'Using Generators as children is unsupported and will likely yield ' +\n              'unexpected results because enumerating a generator mutates it. ' +\n              'You may convert it to an array with `Array.from()` or the ' +\n              '`[...spread]` operator before rendering. Keep in mind ' +\n              'you might need to polyfill these features for older browsers.',\n          );\n        }\n        didWarnAboutGenerators = true;\n      }\n\n      // Warn about using Maps as children\n      if ((newChildrenIterable: any).entries === iteratorFn) {\n        if (!didWarnAboutMaps) {\n          console.error(\n            'Using Maps as children is not supported. ' +\n              'Use an array of keyed ReactElements instead.',\n          );\n        }\n        didWarnAboutMaps = true;\n      }\n\n      // First, validate keys.\n      // We'll get a different iterator later for the main pass.\n      const newChildren = iteratorFn.call(newChildrenIterable);\n      if (newChildren) {\n        let knownKeys = null;\n        let step = newChildren.next();\n        for (; !step.done; step = newChildren.next()) {\n          const child = step.value;\n          knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);\n        }\n      }\n    }\n\n    const newChildren = iteratorFn.call(newChildrenIterable);\n    invariant(newChildren != null, 'An iterable object provided no iterator.');\n\n    let resultingFirstChild: Fiber | null = null;\n    let previousNewFiber: Fiber | null = null;\n\n    let oldFiber = currentFirstChild;\n    let lastPlacedIndex = 0;\n    let newIdx = 0;\n    let nextOldFiber = null;\n\n    let step = newChildren.next();\n    for (\n      ;\n      oldFiber !== null && !step.done;\n      newIdx++, step = newChildren.next()\n    ) {\n      if (oldFiber.index > newIdx) {\n        nextOldFiber = oldFiber;\n        oldFiber = null;\n      } else {\n        nextOldFiber = oldFiber.sibling;\n      }\n      const newFiber = updateSlot(returnFiber, oldFiber, step.value, lanes);\n      if (newFiber === null) {\n        // TODO: This breaks on empty slots like null children. That's\n        // unfortunate because it triggers the slow path all the time. We need\n        // a better way to communicate whether this was a miss or null,\n        // boolean, undefined, etc.\n        if (oldFiber === null) {\n          oldFiber = nextOldFiber;\n        }\n        break;\n      }\n      if (shouldTrackSideEffects) {\n        if (oldFiber && newFiber.alternate === null) {\n          // We matched the slot, but we didn't reuse the existing fiber, so we\n          // need to delete the existing child.\n          deleteChild(returnFiber, oldFiber);\n        }\n      }\n      lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);\n      if (previousNewFiber === null) {\n        // TODO: Move out of the loop. This only happens for the first run.\n        resultingFirstChild = newFiber;\n      } else {\n        // TODO: Defer siblings if we're not at the right index for this slot.\n        // I.e. if we had null values before, then we want to defer this\n        // for each null value. However, we also don't want to call updateSlot\n        // with the previous one.\n        previousNewFiber.sibling = newFiber;\n      }\n      previousNewFiber = newFiber;\n      oldFiber = nextOldFiber;\n    }\n\n    if (step.done) {\n      // We've reached the end of the new children. We can delete the rest.\n      deleteRemainingChildren(returnFiber, oldFiber);\n      return resultingFirstChild;\n    }\n\n    if (oldFiber === null) {\n      // If we don't have any more existing children we can choose a fast path\n      // since the rest will all be insertions.\n      for (; !step.done; newIdx++, step = newChildren.next()) {\n        const newFiber = createChild(returnFiber, step.value, lanes);\n        if (newFiber === null) {\n          continue;\n        }\n        lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);\n        if (previousNewFiber === null) {\n          // TODO: Move out of the loop. This only happens for the first run.\n          resultingFirstChild = newFiber;\n        } else {\n          previousNewFiber.sibling = newFiber;\n        }\n        previousNewFiber = newFiber;\n      }\n      return resultingFirstChild;\n    }\n\n    // Add all children to a key map for quick lookups.\n    const existingChildren = mapRemainingChildren(returnFiber, oldFiber);\n\n    // Keep scanning and use the map to restore deleted items as moves.\n    for (; !step.done; newIdx++, step = newChildren.next()) {\n      const newFiber = updateFromMap(\n        existingChildren,\n        returnFiber,\n        newIdx,\n        step.value,\n        lanes,\n      );\n      if (newFiber !== null) {\n        if (shouldTrackSideEffects) {\n          if (newFiber.alternate !== null) {\n            // The new fiber is a work in progress, but if there exists a\n            // current, that means that we reused the fiber. We need to delete\n            // it from the child list so that we don't add it to the deletion\n            // list.\n            existingChildren.delete(\n              newFiber.key === null ? newIdx : newFiber.key,\n            );\n          }\n        }\n        lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);\n        if (previousNewFiber === null) {\n          resultingFirstChild = newFiber;\n        } else {\n          previousNewFiber.sibling = newFiber;\n        }\n        previousNewFiber = newFiber;\n      }\n    }\n\n    if (shouldTrackSideEffects) {\n      // Any existing children that weren't consumed above were deleted. We need\n      // to add them to the deletion list.\n      existingChildren.forEach(child => deleteChild(returnFiber, child));\n    }\n\n    return resultingFirstChild;\n  }\n\n  function reconcileSingleTextNode(\n    returnFiber: Fiber,\n    currentFirstChild: Fiber | null,\n    textContent: string,\n    lanes: Lanes,\n  ): Fiber {\n    // There's no need to check for keys on text nodes since we don't have a\n    // way to define them.\n    if (currentFirstChild !== null && currentFirstChild.tag === HostText) {\n      // We already have an existing node so let's just update it and delete\n      // the rest.\n      deleteRemainingChildren(returnFiber, currentFirstChild.sibling);\n      const existing = useFiber(currentFirstChild, textContent);\n      existing.return = returnFiber;\n      return existing;\n    }\n    // The existing first child is not a text node so we need to create one\n    // and delete the existing ones.\n    deleteRemainingChildren(returnFiber, currentFirstChild);\n    const created = createFiberFromText(textContent, returnFiber.mode, lanes);\n    created.return = returnFiber;\n    return created;\n  }\n\n  function reconcileSingleElement(\n    returnFiber: Fiber,\n    currentFirstChild: Fiber | null,\n    element: ReactElement,\n    lanes: Lanes,\n  ): Fiber {\n    const key = element.key;\n    let child = currentFirstChild;\n    while (child !== null) {\n      // TODO: If key === null and child.key === null, then this only applies to\n      // the first item in the list.\n      if (child.key === key) {\n        const elementType = element.type;\n        if (elementType === REACT_FRAGMENT_TYPE) {\n          if (child.tag === Fragment) {\n            deleteRemainingChildren(returnFiber, child.sibling);\n            const existing = useFiber(child, element.props.children);\n            existing.return = returnFiber;\n            if (__DEV__) {\n              existing._debugSource = element._source;\n              existing._debugOwner = element._owner;\n            }\n            return existing;\n          }\n        } else {\n          if (\n            child.elementType === elementType ||\n            // Keep this check inline so it only runs on the false path:\n            (__DEV__\n              ? isCompatibleFamilyForHotReloading(child, element)\n              : false) ||\n            // Lazy types should reconcile their resolved type.\n            // We need to do this after the Hot Reloading check above,\n            // because hot reloading has different semantics than prod because\n            // it doesn't resuspend. So we can't let the call below suspend.\n            (enableLazyElements &&\n              typeof elementType === 'object' &&\n              elementType !== null &&\n              elementType.$$typeof === REACT_LAZY_TYPE &&\n              resolveLazy(elementType) === child.type)\n          ) {\n            deleteRemainingChildren(returnFiber, child.sibling);\n            const existing = useFiber(child, element.props);\n            existing.ref = coerceRef(returnFiber, child, element);\n            existing.return = returnFiber;\n            if (__DEV__) {\n              existing._debugSource = element._source;\n              existing._debugOwner = element._owner;\n            }\n            return existing;\n          }\n        }\n        // Didn't match.\n        deleteRemainingChildren(returnFiber, child);\n        break;\n      } else {\n        deleteChild(returnFiber, child);\n      }\n      child = child.sibling;\n    }\n\n    if (element.type === REACT_FRAGMENT_TYPE) {\n      const created = createFiberFromFragment(\n        element.props.children,\n        returnFiber.mode,\n        lanes,\n        element.key,\n      );\n      created.return = returnFiber;\n      return created;\n    } else {\n      const created = createFiberFromElement(element, returnFiber.mode, lanes);\n      created.ref = coerceRef(returnFiber, currentFirstChild, element);\n      created.return = returnFiber;\n      return created;\n    }\n  }\n\n  function reconcileSinglePortal(\n    returnFiber: Fiber,\n    currentFirstChild: Fiber | null,\n    portal: ReactPortal,\n    lanes: Lanes,\n  ): Fiber {\n    const key = portal.key;\n    let child = currentFirstChild;\n    while (child !== null) {\n      // TODO: If key === null and child.key === null, then this only applies to\n      // the first item in the list.\n      if (child.key === key) {\n        if (\n          child.tag === HostPortal &&\n          child.stateNode.containerInfo === portal.containerInfo &&\n          child.stateNode.implementation === portal.implementation\n        ) {\n          deleteRemainingChildren(returnFiber, child.sibling);\n          const existing = useFiber(child, portal.children || []);\n          existing.return = returnFiber;\n          return existing;\n        } else {\n          deleteRemainingChildren(returnFiber, child);\n          break;\n        }\n      } else {\n        deleteChild(returnFiber, child);\n      }\n      child = child.sibling;\n    }\n\n    const created = createFiberFromPortal(portal, returnFiber.mode, lanes);\n    created.return = returnFiber;\n    return created;\n  }\n\n  // This API will tag the children with the side-effect of the reconciliation\n  // itself. They will be added to the side-effect list as we pass through the\n  // children and the parent.\n  function reconcileChildFibers(\n    returnFiber: Fiber,\n    currentFirstChild: Fiber | null,\n    newChild: any,\n    lanes: Lanes,\n  ): Fiber | null {\n    // This function is not recursive.\n    // If the top level item is an array, we treat it as a set of children,\n    // not as a fragment. Nested arrays on the other hand will be treated as\n    // fragment nodes. Recursion happens at the normal flow.\n\n    // Handle top level unkeyed fragments as if they were arrays.\n    // This leads to an ambiguity between <>{[...]}</> and <>...</>.\n    // We treat the ambiguous cases above the same.\n    const isUnkeyedTopLevelFragment =\n      typeof newChild === 'object' &&\n      newChild !== null &&\n      newChild.type === REACT_FRAGMENT_TYPE &&\n      newChild.key === null;\n    if (isUnkeyedTopLevelFragment) {\n      newChild = newChild.props.children;\n    }\n\n    // Handle object types\n    if (typeof newChild === 'object' && newChild !== null) {\n      switch (newChild.$$typeof) {\n        case REACT_ELEMENT_TYPE:\n          return placeSingleChild(\n            reconcileSingleElement(\n              returnFiber,\n              currentFirstChild,\n              newChild,\n              lanes,\n            ),\n          );\n        case REACT_PORTAL_TYPE:\n          return placeSingleChild(\n            reconcileSinglePortal(\n              returnFiber,\n              currentFirstChild,\n              newChild,\n              lanes,\n            ),\n          );\n        case REACT_LAZY_TYPE:\n          if (enableLazyElements) {\n            const payload = newChild._payload;\n            const init = newChild._init;\n            // TODO: This function is supposed to be non-recursive.\n            return reconcileChildFibers(\n              returnFiber,\n              currentFirstChild,\n              init(payload),\n              lanes,\n            );\n          }\n      }\n\n      if (isArray(newChild)) {\n        return reconcileChildrenArray(\n          returnFiber,\n          currentFirstChild,\n          newChild,\n          lanes,\n        );\n      }\n\n      if (getIteratorFn(newChild)) {\n        return reconcileChildrenIterator(\n          returnFiber,\n          currentFirstChild,\n          newChild,\n          lanes,\n        );\n      }\n\n      throwOnInvalidObjectType(returnFiber, newChild);\n    }\n\n    if (typeof newChild === 'string' || typeof newChild === 'number') {\n      return placeSingleChild(\n        reconcileSingleTextNode(\n          returnFiber,\n          currentFirstChild,\n          '' + newChild,\n          lanes,\n        ),\n      );\n    }\n\n    if (__DEV__) {\n      if (typeof newChild === 'function') {\n        warnOnFunctionType(returnFiber);\n      }\n    }\n\n    // Remaining cases are all treated as empty.\n    return deleteRemainingChildren(returnFiber, currentFirstChild);\n  }\n\n  return reconcileChildFibers;\n}\n\nexport const reconcileChildFibers = ChildReconciler(true);\nexport const mountChildFibers = ChildReconciler(false);\n\nexport function cloneChildFibers(\n  current: Fiber | null,\n  workInProgress: Fiber,\n): void {\n  invariant(\n    current === null || workInProgress.child === current.child,\n    'Resuming work not yet implemented.',\n  );\n\n  if (workInProgress.child === null) {\n    return;\n  }\n\n  let currentChild = workInProgress.child;\n  let newChild = createWorkInProgress(currentChild, currentChild.pendingProps);\n  workInProgress.child = newChild;\n\n  newChild.return = workInProgress;\n  while (currentChild.sibling !== null) {\n    currentChild = currentChild.sibling;\n    newChild = newChild.sibling = createWorkInProgress(\n      currentChild,\n      currentChild.pendingProps,\n    );\n    newChild.return = workInProgress;\n  }\n  newChild.sibling = null;\n}\n\n// Reset a workInProgress child set to prepare it for a second pass.\nexport function resetChildFibers(workInProgress: Fiber, lanes: Lanes): void {\n  let child = workInProgress.child;\n  while (child !== null) {\n    resetWorkInProgress(child, lanes);\n    child = child.sibling;\n  }\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Fiber} from './ReactInternalTypes';\nimport type {StackCursor} from './ReactFiberStack.old';\nimport type {Container, HostContext} from './ReactFiberHostConfig';\n\nimport invariant from 'shared/invariant';\n\nimport {getChildHostContext, getRootHostContext} from './ReactFiberHostConfig';\nimport {createCursor, push, pop} from './ReactFiberStack.old';\n\ndeclare class NoContextT {}\nconst NO_CONTEXT: NoContextT = ({}: any);\n\nconst contextStackCursor: StackCursor<HostContext | NoContextT> = createCursor(\n  NO_CONTEXT,\n);\nconst contextFiberStackCursor: StackCursor<Fiber | NoContextT> = createCursor(\n  NO_CONTEXT,\n);\nconst rootInstanceStackCursor: StackCursor<\n  Container | NoContextT,\n> = createCursor(NO_CONTEXT);\n\nfunction requiredContext<Value>(c: Value | NoContextT): Value {\n  invariant(\n    c !== NO_CONTEXT,\n    'Expected host context to exist. This error is likely caused by a bug ' +\n      'in React. Please file an issue.',\n  );\n  return (c: any);\n}\n\nfunction getRootHostContainer(): Container {\n  const rootInstance = requiredContext(rootInstanceStackCursor.current);\n  return rootInstance;\n}\n\nfunction pushHostContainer(fiber: Fiber, nextRootInstance: Container) {\n  // Push current root instance onto the stack;\n  // This allows us to reset root when portals are popped.\n  push(rootInstanceStackCursor, nextRootInstance, fiber);\n  // Track the context and the Fiber that provided it.\n  // This enables us to pop only Fibers that provide unique contexts.\n  push(contextFiberStackCursor, fiber, fiber);\n\n  // Finally, we need to push the host context to the stack.\n  // However, we can't just call getRootHostContext() and push it because\n  // we'd have a different number of entries on the stack depending on\n  // whether getRootHostContext() throws somewhere in renderer code or not.\n  // So we push an empty value first. This lets us safely unwind on errors.\n  push(contextStackCursor, NO_CONTEXT, fiber);\n  const nextRootContext = getRootHostContext(nextRootInstance);\n  // Now that we know this function doesn't throw, replace it.\n  pop(contextStackCursor, fiber);\n  push(contextStackCursor, nextRootContext, fiber);\n}\n\nfunction popHostContainer(fiber: Fiber) {\n  pop(contextStackCursor, fiber);\n  pop(contextFiberStackCursor, fiber);\n  pop(rootInstanceStackCursor, fiber);\n}\n\nfunction getHostContext(): HostContext {\n  const context = requiredContext(contextStackCursor.current);\n  return context;\n}\n\nfunction pushHostContext(fiber: Fiber): void {\n  const rootInstance: Container = requiredContext(\n    rootInstanceStackCursor.current,\n  );\n  const context: HostContext = requiredContext(contextStackCursor.current);\n  const nextContext = getChildHostContext(context, fiber.type, rootInstance);\n\n  // Don't push this Fiber's context unless it's unique.\n  if (context === nextContext) {\n    return;\n  }\n\n  // Track the context and the Fiber that provided it.\n  // This enables us to pop only Fibers that provide unique contexts.\n  push(contextFiberStackCursor, fiber, fiber);\n  push(contextStackCursor, nextContext, fiber);\n}\n\nfunction popHostContext(fiber: Fiber): void {\n  // Do not pop unless this Fiber provided the current context.\n  // pushHostContext() only pushes Fibers that provide unique contexts.\n  if (contextFiberStackCursor.current !== fiber) {\n    return;\n  }\n\n  pop(contextStackCursor, fiber);\n  pop(contextFiberStackCursor, fiber);\n}\n\nexport {\n  getHostContext,\n  getRootHostContainer,\n  popHostContainer,\n  popHostContext,\n  pushHostContainer,\n  pushHostContext,\n};\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Fiber} from './ReactInternalTypes';\nimport type {StackCursor} from './ReactFiberStack.old';\n\nimport {createCursor, push, pop} from './ReactFiberStack.old';\n\nexport opaque type SuspenseContext = number;\nexport opaque type SubtreeSuspenseContext: SuspenseContext = number;\nexport opaque type ShallowSuspenseContext: SuspenseContext = number;\n\nconst DefaultSuspenseContext: SuspenseContext = 0b00;\n\n// The Suspense Context is split into two parts. The lower bits is\n// inherited deeply down the subtree. The upper bits only affect\n// this immediate suspense boundary and gets reset each new\n// boundary or suspense list.\nconst SubtreeSuspenseContextMask: SuspenseContext = 0b01;\n\n// Subtree Flags:\n\n// InvisibleParentSuspenseContext indicates that one of our parent Suspense\n// boundaries is not currently showing visible main content.\n// Either because it is already showing a fallback or is not mounted at all.\n// We can use this to determine if it is desirable to trigger a fallback at\n// the parent. If not, then we might need to trigger undesirable boundaries\n// and/or suspend the commit to avoid hiding the parent content.\nexport const InvisibleParentSuspenseContext: SubtreeSuspenseContext = 0b01;\n\n// Shallow Flags:\n\n// ForceSuspenseFallback can be used by SuspenseList to force newly added\n// items into their fallback state during one of the render passes.\nexport const ForceSuspenseFallback: ShallowSuspenseContext = 0b10;\n\nexport const suspenseStackCursor: StackCursor<SuspenseContext> = createCursor(\n  DefaultSuspenseContext,\n);\n\nexport function hasSuspenseContext(\n  parentContext: SuspenseContext,\n  flag: SuspenseContext,\n): boolean {\n  return (parentContext & flag) !== 0;\n}\n\nexport function setDefaultShallowSuspenseContext(\n  parentContext: SuspenseContext,\n): SuspenseContext {\n  return parentContext & SubtreeSuspenseContextMask;\n}\n\nexport function setShallowSuspenseContext(\n  parentContext: SuspenseContext,\n  shallowContext: ShallowSuspenseContext,\n): SuspenseContext {\n  return (parentContext & SubtreeSuspenseContextMask) | shallowContext;\n}\n\nexport function addSubtreeSuspenseContext(\n  parentContext: SuspenseContext,\n  subtreeContext: SubtreeSuspenseContext,\n): SuspenseContext {\n  return parentContext | subtreeContext;\n}\n\nexport function pushSuspenseContext(\n  fiber: Fiber,\n  newContext: SuspenseContext,\n): void {\n  push(suspenseStackCursor, newContext, fiber);\n}\n\nexport function popSuspenseContext(fiber: Fiber): void {\n  pop(suspenseStackCursor, fiber);\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {ReactNodeList, Wakeable} from 'shared/ReactTypes';\nimport type {Fiber} from './ReactInternalTypes';\nimport type {SuspenseInstance} from './ReactFiberHostConfig';\nimport type {Lane} from './ReactFiberLane.old';\nimport {SuspenseComponent, SuspenseListComponent} from './ReactWorkTags';\nimport {NoFlags, DidCapture} from './ReactFiberFlags';\nimport {\n  isSuspenseInstancePending,\n  isSuspenseInstanceFallback,\n} from './ReactFiberHostConfig';\n\nexport type SuspenseProps = {|\n  children?: ReactNodeList,\n  fallback?: ReactNodeList,\n\n  // TODO: Add \"unstable_\" prefix?\n  suspenseCallback?: (Set<Wakeable> | null) => mixed,\n\n  unstable_expectedLoadTime?: number,\n|};\n\n// A null SuspenseState represents an unsuspended normal Suspense boundary.\n// A non-null SuspenseState means that it is blocked for one reason or another.\n// - A non-null dehydrated field means it's blocked pending hydration.\n//   - A non-null dehydrated field can use isSuspenseInstancePending or\n//     isSuspenseInstanceFallback to query the reason for being dehydrated.\n// - A null dehydrated field means it's blocked by something suspending and\n//   we're currently showing a fallback instead.\nexport type SuspenseState = {|\n  // If this boundary is still dehydrated, we store the SuspenseInstance\n  // here to indicate that it is dehydrated (flag) and for quick access\n  // to check things like isSuspenseInstancePending.\n  dehydrated: null | SuspenseInstance,\n  // Represents the lane we should attempt to hydrate a dehydrated boundary at.\n  // OffscreenLane is the default for dehydrated boundaries.\n  // NoLane is the default for normal boundaries, which turns into \"normal\" pri.\n  retryLane: Lane,\n|};\n\nexport type SuspenseListTailMode = 'collapsed' | 'hidden' | void;\n\nexport type SuspenseListRenderState = {|\n  isBackwards: boolean,\n  // The currently rendering tail row.\n  rendering: null | Fiber,\n  // The absolute time when we started rendering the most recent tail row.\n  renderingStartTime: number,\n  // The last of the already rendered children.\n  last: null | Fiber,\n  // Remaining rows on the tail of the list.\n  tail: null | Fiber,\n  // Tail insertions setting.\n  tailMode: SuspenseListTailMode,\n|};\n\nexport function shouldCaptureSuspense(\n  workInProgress: Fiber,\n  hasInvisibleParent: boolean,\n): boolean {\n  // If it was the primary children that just suspended, capture and render the\n  // fallback. Otherwise, don't capture and bubble to the next boundary.\n  const nextState: SuspenseState | null = workInProgress.memoizedState;\n  if (nextState !== null) {\n    if (nextState.dehydrated !== null) {\n      // A dehydrated boundary always captures.\n      return true;\n    }\n    return false;\n  }\n  const props = workInProgress.memoizedProps;\n  // Regular boundaries always capture.\n  if (props.unstable_avoidThisFallback !== true) {\n    return true;\n  }\n  // If it's a boundary we should avoid, then we prefer to bubble up to the\n  // parent boundary if it is currently invisible.\n  if (hasInvisibleParent) {\n    return false;\n  }\n  // If the parent is not able to handle it, we must handle it.\n  return true;\n}\n\nexport function findFirstSuspended(row: Fiber): null | Fiber {\n  let node = row;\n  while (node !== null) {\n    if (node.tag === SuspenseComponent) {\n      const state: SuspenseState | null = node.memoizedState;\n      if (state !== null) {\n        const dehydrated: null | SuspenseInstance = state.dehydrated;\n        if (\n          dehydrated === null ||\n          isSuspenseInstancePending(dehydrated) ||\n          isSuspenseInstanceFallback(dehydrated)\n        ) {\n          return node;\n        }\n      }\n    } else if (\n      node.tag === SuspenseListComponent &&\n      // revealOrder undefined can't be trusted because it don't\n      // keep track of whether it suspended or not.\n      node.memoizedProps.revealOrder !== undefined\n    ) {\n      const didSuspend = (node.flags & DidCapture) !== NoFlags;\n      if (didSuspend) {\n        return node;\n      }\n    } else if (node.child !== null) {\n      node.child.return = node;\n      node = node.child;\n      continue;\n    }\n    if (node === row) {\n      return null;\n    }\n    while (node.sibling === null) {\n      if (node.return === null || node.return === row) {\n        return null;\n      }\n      node = node.return;\n    }\n    node.sibling.return = node.return;\n    node = node.sibling;\n  }\n  return null;\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nexport type HookFlags = number;\n\nexport const NoFlags = /*  */ 0b000;\n\n// Represents whether effect should fire.\nexport const HasEffect = /* */ 0b001;\n\n// Represents the phase in which the effect (not the clean-up) fires.\nexport const Layout = /*    */ 0b010;\nexport const Passive = /*   */ 0b100;\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Fiber} from './ReactInternalTypes';\nimport type {\n  Instance,\n  TextInstance,\n  HydratableInstance,\n  SuspenseInstance,\n  Container,\n  HostContext,\n} from './ReactFiberHostConfig';\nimport type {SuspenseState} from './ReactFiberSuspenseComponent.old';\n\nimport {\n  HostComponent,\n  HostText,\n  HostRoot,\n  SuspenseComponent,\n} from './ReactWorkTags';\nimport {ChildDeletion, Placement, Hydrating} from './ReactFiberFlags';\nimport invariant from 'shared/invariant';\n\nimport {\n  createFiberFromHostInstanceForDeletion,\n  createFiberFromDehydratedFragment,\n} from './ReactFiber.old';\nimport {\n  shouldSetTextContent,\n  supportsHydration,\n  canHydrateInstance,\n  canHydrateTextInstance,\n  canHydrateSuspenseInstance,\n  getNextHydratableSibling,\n  getFirstHydratableChild,\n  hydrateInstance,\n  hydrateTextInstance,\n  hydrateSuspenseInstance,\n  getNextHydratableInstanceAfterSuspenseInstance,\n  shouldDeleteUnhydratedTailInstances,\n  didNotMatchHydratedContainerTextInstance,\n  didNotMatchHydratedTextInstance,\n  didNotHydrateContainerInstance,\n  didNotHydrateInstance,\n  didNotFindHydratableContainerInstance,\n  didNotFindHydratableContainerTextInstance,\n  didNotFindHydratableContainerSuspenseInstance,\n  didNotFindHydratableInstance,\n  didNotFindHydratableTextInstance,\n  didNotFindHydratableSuspenseInstance,\n} from './ReactFiberHostConfig';\nimport {enableSuspenseServerRenderer} from 'shared/ReactFeatureFlags';\nimport {OffscreenLane} from './ReactFiberLane.old';\n\n// The deepest Fiber on the stack involved in a hydration context.\n// This may have been an insertion or a hydration.\nlet hydrationParentFiber: null | Fiber = null;\nlet nextHydratableInstance: null | HydratableInstance = null;\nlet isHydrating: boolean = false;\n\nfunction warnIfHydrating() {\n  if (__DEV__) {\n    if (isHydrating) {\n      console.error(\n        'We should not be hydrating here. This is a bug in React. Please file a bug.',\n      );\n    }\n  }\n}\n\nfunction enterHydrationState(fiber: Fiber): boolean {\n  if (!supportsHydration) {\n    return false;\n  }\n\n  const parentInstance = fiber.stateNode.containerInfo;\n  nextHydratableInstance = getFirstHydratableChild(parentInstance);\n  hydrationParentFiber = fiber;\n  isHydrating = true;\n  return true;\n}\n\nfunction reenterHydrationStateFromDehydratedSuspenseInstance(\n  fiber: Fiber,\n  suspenseInstance: SuspenseInstance,\n): boolean {\n  if (!supportsHydration) {\n    return false;\n  }\n  nextHydratableInstance = getNextHydratableSibling(suspenseInstance);\n  popToNextHostParent(fiber);\n  isHydrating = true;\n  return true;\n}\n\nfunction deleteHydratableInstance(\n  returnFiber: Fiber,\n  instance: HydratableInstance,\n) {\n  if (__DEV__) {\n    switch (returnFiber.tag) {\n      case HostRoot:\n        didNotHydrateContainerInstance(\n          returnFiber.stateNode.containerInfo,\n          instance,\n        );\n        break;\n      case HostComponent:\n        didNotHydrateInstance(\n          returnFiber.type,\n          returnFiber.memoizedProps,\n          returnFiber.stateNode,\n          instance,\n        );\n        break;\n    }\n  }\n\n  const childToDelete = createFiberFromHostInstanceForDeletion();\n  childToDelete.stateNode = instance;\n  childToDelete.return = returnFiber;\n\n  const deletions = returnFiber.deletions;\n  if (deletions === null) {\n    returnFiber.deletions = [childToDelete];\n    returnFiber.flags |= ChildDeletion;\n  } else {\n    deletions.push(childToDelete);\n  }\n}\n\nfunction insertNonHydratedInstance(returnFiber: Fiber, fiber: Fiber) {\n  fiber.flags = (fiber.flags & ~Hydrating) | Placement;\n  if (__DEV__) {\n    switch (returnFiber.tag) {\n      case HostRoot: {\n        const parentContainer = returnFiber.stateNode.containerInfo;\n        switch (fiber.tag) {\n          case HostComponent:\n            const type = fiber.type;\n            const props = fiber.pendingProps;\n            didNotFindHydratableContainerInstance(parentContainer, type, props);\n            break;\n          case HostText:\n            const text = fiber.pendingProps;\n            didNotFindHydratableContainerTextInstance(parentContainer, text);\n            break;\n          case SuspenseComponent:\n            didNotFindHydratableContainerSuspenseInstance(parentContainer);\n            break;\n        }\n        break;\n      }\n      case HostComponent: {\n        const parentType = returnFiber.type;\n        const parentProps = returnFiber.memoizedProps;\n        const parentInstance = returnFiber.stateNode;\n        switch (fiber.tag) {\n          case HostComponent:\n            const type = fiber.type;\n            const props = fiber.pendingProps;\n            didNotFindHydratableInstance(\n              parentType,\n              parentProps,\n              parentInstance,\n              type,\n              props,\n            );\n            break;\n          case HostText:\n            const text = fiber.pendingProps;\n            didNotFindHydratableTextInstance(\n              parentType,\n              parentProps,\n              parentInstance,\n              text,\n            );\n            break;\n          case SuspenseComponent:\n            didNotFindHydratableSuspenseInstance(\n              parentType,\n              parentProps,\n              parentInstance,\n            );\n            break;\n        }\n        break;\n      }\n      default:\n        return;\n    }\n  }\n}\n\nfunction tryHydrate(fiber, nextInstance) {\n  switch (fiber.tag) {\n    case HostComponent: {\n      const type = fiber.type;\n      const props = fiber.pendingProps;\n      const instance = canHydrateInstance(nextInstance, type, props);\n      if (instance !== null) {\n        fiber.stateNode = (instance: Instance);\n        return true;\n      }\n      return false;\n    }\n    case HostText: {\n      const text = fiber.pendingProps;\n      const textInstance = canHydrateTextInstance(nextInstance, text);\n      if (textInstance !== null) {\n        fiber.stateNode = (textInstance: TextInstance);\n        return true;\n      }\n      return false;\n    }\n    case SuspenseComponent: {\n      if (enableSuspenseServerRenderer) {\n        const suspenseInstance: null | SuspenseInstance = canHydrateSuspenseInstance(\n          nextInstance,\n        );\n        if (suspenseInstance !== null) {\n          const suspenseState: SuspenseState = {\n            dehydrated: suspenseInstance,\n            retryLane: OffscreenLane,\n          };\n          fiber.memoizedState = suspenseState;\n          // Store the dehydrated fragment as a child fiber.\n          // This simplifies the code for getHostSibling and deleting nodes,\n          // since it doesn't have to consider all Suspense boundaries and\n          // check if they're dehydrated ones or not.\n          const dehydratedFragment = createFiberFromDehydratedFragment(\n            suspenseInstance,\n          );\n          dehydratedFragment.return = fiber;\n          fiber.child = dehydratedFragment;\n          return true;\n        }\n      }\n      return false;\n    }\n    default:\n      return false;\n  }\n}\n\nfunction tryToClaimNextHydratableInstance(fiber: Fiber): void {\n  if (!isHydrating) {\n    return;\n  }\n  let nextInstance = nextHydratableInstance;\n  if (!nextInstance) {\n    // Nothing to hydrate. Make it an insertion.\n    insertNonHydratedInstance((hydrationParentFiber: any), fiber);\n    isHydrating = false;\n    hydrationParentFiber = fiber;\n    return;\n  }\n  const firstAttemptedInstance = nextInstance;\n  if (!tryHydrate(fiber, nextInstance)) {\n    // If we can't hydrate this instance let's try the next one.\n    // We use this as a heuristic. It's based on intuition and not data so it\n    // might be flawed or unnecessary.\n    nextInstance = getNextHydratableSibling(firstAttemptedInstance);\n    if (!nextInstance || !tryHydrate(fiber, nextInstance)) {\n      // Nothing to hydrate. Make it an insertion.\n      insertNonHydratedInstance((hydrationParentFiber: any), fiber);\n      isHydrating = false;\n      hydrationParentFiber = fiber;\n      return;\n    }\n    // We matched the next one, we'll now assume that the first one was\n    // superfluous and we'll delete it. Since we can't eagerly delete it\n    // we'll have to schedule a deletion. To do that, this node needs a dummy\n    // fiber associated with it.\n    deleteHydratableInstance(\n      (hydrationParentFiber: any),\n      firstAttemptedInstance,\n    );\n  }\n  hydrationParentFiber = fiber;\n  nextHydratableInstance = getFirstHydratableChild((nextInstance: any));\n}\n\nfunction prepareToHydrateHostInstance(\n  fiber: Fiber,\n  rootContainerInstance: Container,\n  hostContext: HostContext,\n): boolean {\n  if (!supportsHydration) {\n    invariant(\n      false,\n      'Expected prepareToHydrateHostInstance() to never be called. ' +\n        'This error is likely caused by a bug in React. Please file an issue.',\n    );\n  }\n\n  const instance: Instance = fiber.stateNode;\n  const updatePayload = hydrateInstance(\n    instance,\n    fiber.type,\n    fiber.memoizedProps,\n    rootContainerInstance,\n    hostContext,\n    fiber,\n  );\n  // TODO: Type this specific to this type of component.\n  fiber.updateQueue = (updatePayload: any);\n  // If the update payload indicates that there is a change or if there\n  // is a new ref we mark this as an update.\n  if (updatePayload !== null) {\n    return true;\n  }\n  return false;\n}\n\nfunction prepareToHydrateHostTextInstance(fiber: Fiber): boolean {\n  if (!supportsHydration) {\n    invariant(\n      false,\n      'Expected prepareToHydrateHostTextInstance() to never be called. ' +\n        'This error is likely caused by a bug in React. Please file an issue.',\n    );\n  }\n\n  const textInstance: TextInstance = fiber.stateNode;\n  const textContent: string = fiber.memoizedProps;\n  const shouldUpdate = hydrateTextInstance(textInstance, textContent, fiber);\n  if (__DEV__) {\n    if (shouldUpdate) {\n      // We assume that prepareToHydrateHostTextInstance is called in a context where the\n      // hydration parent is the parent host component of this host text.\n      const returnFiber = hydrationParentFiber;\n      if (returnFiber !== null) {\n        switch (returnFiber.tag) {\n          case HostRoot: {\n            const parentContainer = returnFiber.stateNode.containerInfo;\n            didNotMatchHydratedContainerTextInstance(\n              parentContainer,\n              textInstance,\n              textContent,\n            );\n            break;\n          }\n          case HostComponent: {\n            const parentType = returnFiber.type;\n            const parentProps = returnFiber.memoizedProps;\n            const parentInstance = returnFiber.stateNode;\n            didNotMatchHydratedTextInstance(\n              parentType,\n              parentProps,\n              parentInstance,\n              textInstance,\n              textContent,\n            );\n            break;\n          }\n        }\n      }\n    }\n  }\n  return shouldUpdate;\n}\n\nfunction prepareToHydrateHostSuspenseInstance(fiber: Fiber): void {\n  if (!supportsHydration) {\n    invariant(\n      false,\n      'Expected prepareToHydrateHostSuspenseInstance() to never be called. ' +\n        'This error is likely caused by a bug in React. Please file an issue.',\n    );\n  }\n\n  const suspenseState: null | SuspenseState = fiber.memoizedState;\n  const suspenseInstance: null | SuspenseInstance =\n    suspenseState !== null ? suspenseState.dehydrated : null;\n  invariant(\n    suspenseInstance,\n    'Expected to have a hydrated suspense instance. ' +\n      'This error is likely caused by a bug in React. Please file an issue.',\n  );\n  hydrateSuspenseInstance(suspenseInstance, fiber);\n}\n\nfunction skipPastDehydratedSuspenseInstance(\n  fiber: Fiber,\n): null | HydratableInstance {\n  if (!supportsHydration) {\n    invariant(\n      false,\n      'Expected skipPastDehydratedSuspenseInstance() to never be called. ' +\n        'This error is likely caused by a bug in React. Please file an issue.',\n    );\n  }\n  const suspenseState: null | SuspenseState = fiber.memoizedState;\n  const suspenseInstance: null | SuspenseInstance =\n    suspenseState !== null ? suspenseState.dehydrated : null;\n  invariant(\n    suspenseInstance,\n    'Expected to have a hydrated suspense instance. ' +\n      'This error is likely caused by a bug in React. Please file an issue.',\n  );\n  return getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance);\n}\n\nfunction popToNextHostParent(fiber: Fiber): void {\n  let parent = fiber.return;\n  while (\n    parent !== null &&\n    parent.tag !== HostComponent &&\n    parent.tag !== HostRoot &&\n    parent.tag !== SuspenseComponent\n  ) {\n    parent = parent.return;\n  }\n  hydrationParentFiber = parent;\n}\n\nfunction popHydrationState(fiber: Fiber): boolean {\n  if (!supportsHydration) {\n    return false;\n  }\n  if (fiber !== hydrationParentFiber) {\n    // We're deeper than the current hydration context, inside an inserted\n    // tree.\n    return false;\n  }\n  if (!isHydrating) {\n    // If we're not currently hydrating but we're in a hydration context, then\n    // we were an insertion and now need to pop up reenter hydration of our\n    // siblings.\n    popToNextHostParent(fiber);\n    isHydrating = true;\n    return false;\n  }\n\n  // If we have any remaining hydratable nodes, we need to delete them now.\n  // We only do this deeper than head and body since they tend to have random\n  // other nodes in them. We also ignore components with pure text content in\n  // side of them. We also don't delete anything inside the root container.\n  if (\n    fiber.tag !== HostRoot &&\n    (fiber.tag !== HostComponent ||\n      (shouldDeleteUnhydratedTailInstances(fiber.type) &&\n        !shouldSetTextContent(fiber.type, fiber.memoizedProps)))\n  ) {\n    let nextInstance = nextHydratableInstance;\n    while (nextInstance) {\n      deleteHydratableInstance(fiber, nextInstance);\n      nextInstance = getNextHydratableSibling(nextInstance);\n    }\n  }\n\n  popToNextHostParent(fiber);\n  if (fiber.tag === SuspenseComponent) {\n    nextHydratableInstance = skipPastDehydratedSuspenseInstance(fiber);\n  } else {\n    nextHydratableInstance = hydrationParentFiber\n      ? getNextHydratableSibling(fiber.stateNode)\n      : null;\n  }\n  return true;\n}\n\nfunction resetHydrationState(): void {\n  if (!supportsHydration) {\n    return;\n  }\n\n  hydrationParentFiber = null;\n  nextHydratableInstance = null;\n  isHydrating = false;\n}\n\nfunction getIsHydrating(): boolean {\n  return isHydrating;\n}\n\nexport {\n  warnIfHydrating,\n  enterHydrationState,\n  getIsHydrating,\n  reenterHydrationStateFromDehydratedSuspenseInstance,\n  resetHydrationState,\n  tryToClaimNextHydratableInstance,\n  prepareToHydrateHostInstance,\n  prepareToHydrateHostTextInstance,\n  prepareToHydrateHostSuspenseInstance,\n  popHydrationState,\n};\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {MutableSource, MutableSourceVersion} from 'shared/ReactTypes';\nimport type {FiberRoot} from './ReactInternalTypes';\n\nimport {isPrimaryRenderer} from './ReactFiberHostConfig';\n\n// Work in progress version numbers only apply to a single render,\n// and should be reset before starting a new render.\n// This tracks which mutable sources need to be reset after a render.\nconst workInProgressSources: Array<MutableSource<any>> = [];\n\nlet rendererSigil;\nif (__DEV__) {\n  // Used to detect multiple renderers using the same mutable source.\n  rendererSigil = {};\n}\n\nexport function markSourceAsDirty(mutableSource: MutableSource<any>): void {\n  workInProgressSources.push(mutableSource);\n}\n\nexport function resetWorkInProgressVersions(): void {\n  for (let i = 0; i < workInProgressSources.length; i++) {\n    const mutableSource = workInProgressSources[i];\n    if (isPrimaryRenderer) {\n      mutableSource._workInProgressVersionPrimary = null;\n    } else {\n      mutableSource._workInProgressVersionSecondary = null;\n    }\n  }\n  workInProgressSources.length = 0;\n}\n\nexport function getWorkInProgressVersion(\n  mutableSource: MutableSource<any>,\n): null | MutableSourceVersion {\n  if (isPrimaryRenderer) {\n    return mutableSource._workInProgressVersionPrimary;\n  } else {\n    return mutableSource._workInProgressVersionSecondary;\n  }\n}\n\nexport function setWorkInProgressVersion(\n  mutableSource: MutableSource<any>,\n  version: MutableSourceVersion,\n): void {\n  if (isPrimaryRenderer) {\n    mutableSource._workInProgressVersionPrimary = version;\n  } else {\n    mutableSource._workInProgressVersionSecondary = version;\n  }\n  workInProgressSources.push(mutableSource);\n}\n\nexport function warnAboutMultipleRenderersDEV(\n  mutableSource: MutableSource<any>,\n): void {\n  if (__DEV__) {\n    if (isPrimaryRenderer) {\n      if (mutableSource._currentPrimaryRenderer == null) {\n        mutableSource._currentPrimaryRenderer = rendererSigil;\n      } else if (mutableSource._currentPrimaryRenderer !== rendererSigil) {\n        console.error(\n          'Detected multiple renderers concurrently rendering the ' +\n            'same mutable source. This is currently unsupported.',\n        );\n      }\n    } else {\n      if (mutableSource._currentSecondaryRenderer == null) {\n        mutableSource._currentSecondaryRenderer = rendererSigil;\n      } else if (mutableSource._currentSecondaryRenderer !== rendererSigil) {\n        console.error(\n          'Detected multiple renderers concurrently rendering the ' +\n            'same mutable source. This is currently unsupported.',\n        );\n      }\n    }\n  }\n}\n\n// Eager reads the version of a mutable source and stores it on the root.\n// This ensures that the version used for server rendering matches the one\n// that is eventually read during hydration.\n// If they don't match there's a potential tear and a full deopt render is required.\nexport function registerMutableSourceForHydration(\n  root: FiberRoot,\n  mutableSource: MutableSource<any>,\n): void {\n  const getVersion = mutableSource._getVersion;\n  const version = getVersion(mutableSource._source);\n\n  // TODO Clear this data once all pending hydration work is finished.\n  // Retaining it forever may interfere with GC.\n  if (root.mutableSourceEagerHydrationData == null) {\n    root.mutableSourceEagerHydrationData = [mutableSource, version];\n  } else {\n    root.mutableSourceEagerHydrationData.push(mutableSource, version);\n  }\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {ReactContext} from 'shared/ReactTypes';\nimport type {FiberRoot} from './ReactInternalTypes';\nimport type {Lanes} from './ReactFiberLane.old';\nimport type {StackCursor} from './ReactFiberStack.old';\n\nimport {enableCache} from 'shared/ReactFeatureFlags';\nimport {REACT_CONTEXT_TYPE} from 'shared/ReactSymbols';\n\nimport {isPrimaryRenderer} from './ReactFiberHostConfig';\nimport {createCursor, push, pop} from './ReactFiberStack.old';\nimport {pushProvider, popProvider} from './ReactFiberNewContext.old';\n\nexport type Cache = Map<() => mixed, mixed>;\n\nexport type CacheComponentState = {|\n  +parent: Cache,\n  +cache: Cache,\n|};\n\nexport type SpawnedCachePool = {|\n  +parent: Cache,\n  +pool: Cache,\n|};\n\nexport const CacheContext: ReactContext<Cache> = enableCache\n  ? {\n      $$typeof: REACT_CONTEXT_TYPE,\n      // We don't use Consumer/Provider for Cache components. So we'll cheat.\n      Consumer: (null: any),\n      Provider: (null: any),\n      // We'll initialize these at the root.\n      _currentValue: (null: any),\n      _currentValue2: (null: any),\n      _threadCount: 0,\n    }\n  : (null: any);\n\nif (__DEV__ && enableCache) {\n  CacheContext._currentRenderer = null;\n  CacheContext._currentRenderer2 = null;\n}\n\n// The cache that newly mounted Cache boundaries should use. It's either\n// retrieved from the cache pool, or the result of a refresh.\nlet pooledCache: Cache | null = null;\n\n// When retrying a Suspense/Offscreen boundary, we override pooledCache with the\n// cache from the render that suspended.\nconst prevFreshCacheOnStack: StackCursor<Cache | null> = createCursor(null);\n\nexport function pushCacheProvider(workInProgress: Fiber, cache: Cache) {\n  if (!enableCache) {\n    return;\n  }\n  pushProvider(workInProgress, CacheContext, cache);\n}\n\nexport function popCacheProvider(workInProgress: Fiber, cache: Cache) {\n  if (!enableCache) {\n    return;\n  }\n  popProvider(CacheContext, workInProgress);\n}\n\nexport function requestCacheFromPool(renderLanes: Lanes): Cache {\n  if (!enableCache) {\n    return (null: any);\n  }\n  if (pooledCache !== null) {\n    return pooledCache;\n  }\n  // Create a fresh cache.\n  pooledCache = new Map();\n  return pooledCache;\n}\n\nexport function pushRootCachePool(root: FiberRoot) {\n  if (!enableCache) {\n    return;\n  }\n  // When we start rendering a tree, read the pooled cache for this render\n  // from `root.pooledCache`. If it's currently `null`, we will lazily\n  // initialize it the first type it's requested. However, we only mutate\n  // the root itself during the complete/unwind phase of the HostRoot.\n  pooledCache = root.pooledCache;\n}\n\nexport function popRootCachePool(root: FiberRoot, renderLanes: Lanes) {\n  if (!enableCache) {\n    return;\n  }\n  // The `pooledCache` variable points to the cache that was used for new\n  // cache boundaries during this render, if any. Stash it on the root so that\n  // parallel transitions may share the same cache. We will clear this field\n  // once all the transitions that depend on it (which we track with\n  // `pooledCacheLanes`) have committed.\n  root.pooledCache = pooledCache;\n  if (pooledCache !== null) {\n    root.pooledCacheLanes |= renderLanes;\n  }\n}\n\nexport function restoreSpawnedCachePool(\n  offscreenWorkInProgress: Fiber,\n  prevCachePool: SpawnedCachePool,\n): SpawnedCachePool | null {\n  if (!enableCache) {\n    return (null: any);\n  }\n  const nextParentCache = isPrimaryRenderer\n    ? CacheContext._currentValue\n    : CacheContext._currentValue2;\n  if (nextParentCache !== prevCachePool.parent) {\n    // There was a refresh. Don't bother restoring anything since the refresh\n    // will override it.\n    return null;\n  } else {\n    // No refresh. Resume with the previous cache. This will override the cache\n    // pool so that any new Cache boundaries in the subtree use this one instead\n    // of requesting a fresh one.\n    push(prevFreshCacheOnStack, pooledCache, offscreenWorkInProgress);\n    pooledCache = prevCachePool.pool;\n\n    // Return the cache pool to signal that we did in fact push it. We will\n    // assign this to the field on the fiber so we know to pop the context.\n    return prevCachePool;\n  }\n}\n\n// Note: Ideally, `popCachePool` would return this value, and then we would pass\n// it to `getSuspendedCachePool`. But factoring reasons, those two functions are\n// in different phases/files. They are always called in sequence, though, so we\n// can stash the value here temporarily.\nlet _suspendedPooledCache: Cache | null = null;\n\nexport function popCachePool(workInProgress: Fiber) {\n  if (!enableCache) {\n    return;\n  }\n  _suspendedPooledCache = pooledCache;\n  pooledCache = prevFreshCacheOnStack.current;\n  pop(prevFreshCacheOnStack, workInProgress);\n}\n\nexport function getSuspendedCachePool(): SpawnedCachePool | null {\n  if (!enableCache) {\n    return null;\n  }\n\n  // We check the cache on the stack first, since that's the one any new Caches\n  // would have accessed.\n  let pool = pooledCache;\n  if (pool === null) {\n    // There's no pooled cache above us in the stack. However, a child in the\n    // suspended tree may have requested a fresh cache pool. If so, we would\n    // have unwound it with `popCachePool`.\n    if (_suspendedPooledCache !== null) {\n      pool = _suspendedPooledCache;\n      _suspendedPooledCache = null;\n    } else {\n      // There's no suspended cache pool.\n      return null;\n    }\n  }\n\n  return {\n    // We must also save the parent, so that when we resume we can detect\n    // a refresh.\n    parent: isPrimaryRenderer\n      ? CacheContext._currentValue\n      : CacheContext._currentValue2,\n    pool,\n  };\n}\n\nexport function getOffscreenDeferredCachePool(): SpawnedCachePool | null {\n  if (!enableCache) {\n    return null;\n  }\n\n  if (pooledCache === null) {\n    // There's no deferred cache pool.\n    return null;\n  }\n\n  return {\n    // We must also store the parent, so that when we resume we can detect\n    // a refresh.\n    parent: isPrimaryRenderer\n      ? CacheContext._currentValue\n      : CacheContext._currentValue2,\n    pool: pooledCache,\n  };\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {\n  MutableSource,\n  MutableSourceGetSnapshotFn,\n  MutableSourceSubscribeFn,\n  ReactContext,\n} from 'shared/ReactTypes';\nimport type {Fiber, Dispatcher, HookType} from './ReactInternalTypes';\nimport type {Lanes, Lane} from './ReactFiberLane.old';\nimport type {HookFlags} from './ReactHookEffectTags';\nimport type {FiberRoot} from './ReactInternalTypes';\nimport type {OpaqueIDType} from './ReactFiberHostConfig';\nimport type {Cache} from './ReactFiberCacheComponent.old';\nimport type {Flags} from './ReactFiberFlags';\n\nimport ReactSharedInternals from 'shared/ReactSharedInternals';\nimport {\n  enableDebugTracing,\n  enableSchedulingProfiler,\n  enableNewReconciler,\n  enableCache,\n  enableUseRefAccessWarning,\n  enableStrictEffects,\n  enableLazyContextPropagation,\n  enableSuspenseLayoutEffectSemantics,\n} from 'shared/ReactFeatureFlags';\n\nimport {\n  NoMode,\n  ConcurrentMode,\n  DebugTracingMode,\n  StrictEffectsMode,\n} from './ReactTypeOfMode';\nimport {\n  NoLane,\n  SyncLane,\n  NoLanes,\n  isSubsetOfLanes,\n  mergeLanes,\n  removeLanes,\n  intersectLanes,\n  isTransitionLane,\n  markRootEntangled,\n  markRootMutableRead,\n  NoTimestamp,\n} from './ReactFiberLane.old';\nimport {\n  ContinuousEventPriority,\n  getCurrentUpdatePriority,\n  setCurrentUpdatePriority,\n  higherEventPriority,\n} from './ReactEventPriorities.old';\nimport {readContext, checkIfContextChanged} from './ReactFiberNewContext.old';\nimport {HostRoot, CacheComponent} from './ReactWorkTags';\nimport {\n  LayoutStatic as LayoutStaticEffect,\n  MountLayoutDev as MountLayoutDevEffect,\n  MountPassiveDev as MountPassiveDevEffect,\n  Passive as PassiveEffect,\n  PassiveStatic as PassiveStaticEffect,\n  StaticMask as StaticMaskEffect,\n  Update as UpdateEffect,\n} from './ReactFiberFlags';\nimport {\n  HasEffect as HookHasEffect,\n  Layout as HookLayout,\n  Passive as HookPassive,\n} from './ReactHookEffectTags';\nimport {\n  getWorkInProgressRoot,\n  scheduleUpdateOnFiber,\n  requestUpdateLane,\n  requestEventTime,\n  warnIfNotCurrentlyActingEffectsInDEV,\n  warnIfNotCurrentlyActingUpdatesInDev,\n  markSkippedUpdateLanes,\n  isInterleavedUpdate,\n} from './ReactFiberWorkLoop.old';\n\nimport invariant from 'shared/invariant';\nimport getComponentNameFromFiber from 'react-reconciler/src/getComponentNameFromFiber';\nimport is from 'shared/objectIs';\nimport isArray from 'shared/isArray';\nimport {\n  markWorkInProgressReceivedUpdate,\n  checkIfWorkInProgressReceivedUpdate,\n} from './ReactFiberBeginWork.old';\nimport {getIsHydrating} from './ReactFiberHydrationContext.old';\nimport {\n  makeClientId,\n  makeClientIdInDEV,\n  makeOpaqueHydratingObject,\n} from './ReactFiberHostConfig';\nimport {\n  getWorkInProgressVersion,\n  markSourceAsDirty,\n  setWorkInProgressVersion,\n  warnAboutMultipleRenderersDEV,\n} from './ReactMutableSource.old';\nimport {getIsRendering} from './ReactCurrentFiber';\nimport {logStateUpdateScheduled} from './DebugTracing';\nimport {markStateUpdateScheduled} from './SchedulingProfiler';\nimport {CacheContext} from './ReactFiberCacheComponent.old';\nimport {\n  createUpdate,\n  enqueueUpdate,\n  entangleTransitions,\n} from './ReactUpdateQueue.old';\nimport {pushInterleavedQueue} from './ReactFiberInterleavedUpdates.old';\nimport {getIsStrictModeForDevtools} from './ReactFiberReconciler.old';\nimport {warnOnSubscriptionInsideStartTransition} from 'shared/ReactFeatureFlags';\n\nconst {ReactCurrentDispatcher, ReactCurrentBatchConfig} = ReactSharedInternals;\n\ntype Update<S, A> = {|\n  lane: Lane,\n  action: A,\n  eagerReducer: ((S, A) => S) | null,\n  eagerState: S | null,\n  next: Update<S, A>,\n|};\n\nexport type UpdateQueue<S, A> = {|\n  pending: Update<S, A> | null,\n  interleaved: Update<S, A> | null,\n  lanes: Lanes,\n  dispatch: (A => mixed) | null,\n  lastRenderedReducer: ((S, A) => S) | null,\n  lastRenderedState: S | null,\n|};\n\nlet didWarnAboutMismatchedHooksForComponent;\nlet didWarnAboutUseOpaqueIdentifier;\nlet didWarnUncachedGetSnapshot;\nif (__DEV__) {\n  didWarnAboutUseOpaqueIdentifier = {};\n  didWarnAboutMismatchedHooksForComponent = new Set();\n}\n\nexport type Hook = {|\n  memoizedState: any,\n  baseState: any,\n  baseQueue: Update<any, any> | null,\n  queue: any,\n  next: Hook | null,\n|};\n\nexport type Effect = {|\n  tag: HookFlags,\n  create: () => (() => void) | void,\n  destroy: (() => void) | void,\n  deps: Array<mixed> | null,\n  next: Effect,\n|};\n\ntype StoreInstance<T> = {|\n  value: T,\n  getSnapshot: () => T,\n|};\n\nexport type FunctionComponentUpdateQueue = {|lastEffect: Effect | null|};\n\ntype BasicStateAction<S> = (S => S) | S;\n\ntype Dispatch<A> = A => void;\n\n// These are set right before calling the component.\nlet renderLanes: Lanes = NoLanes;\n// The work-in-progress fiber. I've named it differently to distinguish it from\n// the work-in-progress hook.\nlet currentlyRenderingFiber: Fiber = (null: any);\n\n// Hooks are stored as a linked list on the fiber's memoizedState field. The\n// current hook list is the list that belongs to the current fiber. The\n// work-in-progress hook list is a new list that will be added to the\n// work-in-progress fiber.\nlet currentHook: Hook | null = null;\nlet workInProgressHook: Hook | null = null;\n\n// Whether an update was scheduled at any point during the render phase. This\n// does not get reset if we do another render pass; only when we're completely\n// finished evaluating this component. This is an optimization so we know\n// whether we need to clear render phase updates after a throw.\nlet didScheduleRenderPhaseUpdate: boolean = false;\n// Where an update was scheduled only during the current render pass. This\n// gets reset after each attempt.\n// TODO: Maybe there's some way to consolidate this with\n// `didScheduleRenderPhaseUpdate`. Or with `numberOfReRenders`.\nlet didScheduleRenderPhaseUpdateDuringThisPass: boolean = false;\n\nconst RE_RENDER_LIMIT = 25;\n\n// In DEV, this is the name of the currently executing primitive hook\nlet currentHookNameInDev: ?HookType = null;\n\n// In DEV, this list ensures that hooks are called in the same order between renders.\n// The list stores the order of hooks used during the initial render (mount).\n// Subsequent renders (updates) reference this list.\nlet hookTypesDev: Array<HookType> | null = null;\nlet hookTypesUpdateIndexDev: number = -1;\n\n// In DEV, this tracks whether currently rendering component needs to ignore\n// the dependencies for Hooks that need them (e.g. useEffect or useMemo).\n// When true, such Hooks will always be \"remounted\". Only used during hot reload.\nlet ignorePreviousDependencies: boolean = false;\n\nfunction mountHookTypesDev() {\n  if (__DEV__) {\n    const hookName = ((currentHookNameInDev: any): HookType);\n\n    if (hookTypesDev === null) {\n      hookTypesDev = [hookName];\n    } else {\n      hookTypesDev.push(hookName);\n    }\n  }\n}\n\nfunction updateHookTypesDev() {\n  if (__DEV__) {\n    const hookName = ((currentHookNameInDev: any): HookType);\n\n    if (hookTypesDev !== null) {\n      hookTypesUpdateIndexDev++;\n      if (hookTypesDev[hookTypesUpdateIndexDev] !== hookName) {\n        warnOnHookMismatchInDev(hookName);\n      }\n    }\n  }\n}\n\nfunction checkDepsAreArrayDev(deps: mixed) {\n  if (__DEV__) {\n    if (deps !== undefined && deps !== null && !isArray(deps)) {\n      // Verify deps, but only on mount to avoid extra checks.\n      // It's unlikely their type would change as usually you define them inline.\n      console.error(\n        '%s received a final argument that is not an array (instead, received `%s`). When ' +\n          'specified, the final argument must be an array.',\n        currentHookNameInDev,\n        typeof deps,\n      );\n    }\n  }\n}\n\nfunction warnOnHookMismatchInDev(currentHookName: HookType) {\n  if (__DEV__) {\n    const componentName = getComponentNameFromFiber(currentlyRenderingFiber);\n    if (!didWarnAboutMismatchedHooksForComponent.has(componentName)) {\n      didWarnAboutMismatchedHooksForComponent.add(componentName);\n\n      if (hookTypesDev !== null) {\n        let table = '';\n\n        const secondColumnStart = 30;\n\n        for (let i = 0; i <= ((hookTypesUpdateIndexDev: any): number); i++) {\n          const oldHookName = hookTypesDev[i];\n          const newHookName =\n            i === ((hookTypesUpdateIndexDev: any): number)\n              ? currentHookName\n              : oldHookName;\n\n          let row = `${i + 1}. ${oldHookName}`;\n\n          // Extra space so second column lines up\n          // lol @ IE not supporting String#repeat\n          while (row.length < secondColumnStart) {\n            row += ' ';\n          }\n\n          row += newHookName + '\\n';\n\n          table += row;\n        }\n\n        console.error(\n          'React has detected a change in the order of Hooks called by %s. ' +\n            'This will lead to bugs and errors if not fixed. ' +\n            'For more information, read the Rules of Hooks: https://reactjs.org/link/rules-of-hooks\\n\\n' +\n            '   Previous render            Next render\\n' +\n            '   ------------------------------------------------------\\n' +\n            '%s' +\n            '   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n',\n          componentName,\n          table,\n        );\n      }\n    }\n  }\n}\n\nfunction throwInvalidHookError() {\n  invariant(\n    false,\n    'Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for' +\n      ' one of the following reasons:\\n' +\n      '1. You might have mismatching versions of React and the renderer (such as React DOM)\\n' +\n      '2. You might be breaking the Rules of Hooks\\n' +\n      '3. You might have more than one copy of React in the same app\\n' +\n      'See https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.',\n  );\n}\n\nfunction areHookInputsEqual(\n  nextDeps: Array<mixed>,\n  prevDeps: Array<mixed> | null,\n) {\n  if (__DEV__) {\n    if (ignorePreviousDependencies) {\n      // Only true when this component is being hot reloaded.\n      return false;\n    }\n  }\n\n  if (prevDeps === null) {\n    if (__DEV__) {\n      console.error(\n        '%s received a final argument during this render, but not during ' +\n          'the previous render. Even though the final argument is optional, ' +\n          'its type cannot change between renders.',\n        currentHookNameInDev,\n      );\n    }\n    return false;\n  }\n\n  if (__DEV__) {\n    // Don't bother comparing lengths in prod because these arrays should be\n    // passed inline.\n    if (nextDeps.length !== prevDeps.length) {\n      console.error(\n        'The final argument passed to %s changed size between renders. The ' +\n          'order and size of this array must remain constant.\\n\\n' +\n          'Previous: %s\\n' +\n          'Incoming: %s',\n        currentHookNameInDev,\n        `[${prevDeps.join(', ')}]`,\n        `[${nextDeps.join(', ')}]`,\n      );\n    }\n  }\n  for (let i = 0; i < prevDeps.length && i < nextDeps.length; i++) {\n    if (is(nextDeps[i], prevDeps[i])) {\n      continue;\n    }\n    return false;\n  }\n  return true;\n}\n\nexport function renderWithHooks<Props, SecondArg>(\n  current: Fiber | null,\n  workInProgress: Fiber,\n  Component: (p: Props, arg: SecondArg) => any,\n  props: Props,\n  secondArg: SecondArg,\n  nextRenderLanes: Lanes,\n): any {\n  renderLanes = nextRenderLanes;\n  currentlyRenderingFiber = workInProgress;\n\n  if (__DEV__) {\n    hookTypesDev =\n      current !== null\n        ? ((current._debugHookTypes: any): Array<HookType>)\n        : null;\n    hookTypesUpdateIndexDev = -1;\n    // Used for hot reloading:\n    ignorePreviousDependencies =\n      current !== null && current.type !== workInProgress.type;\n  }\n\n  workInProgress.memoizedState = null;\n  workInProgress.updateQueue = null;\n  workInProgress.lanes = NoLanes;\n\n  // The following should have already been reset\n  // currentHook = null;\n  // workInProgressHook = null;\n\n  // didScheduleRenderPhaseUpdate = false;\n\n  // TODO Warn if no hooks are used at all during mount, then some are used during update.\n  // Currently we will identify the update render as a mount because memoizedState === null.\n  // This is tricky because it's valid for certain types of components (e.g. React.lazy)\n\n  // Using memoizedState to differentiate between mount/update only works if at least one stateful hook is used.\n  // Non-stateful hooks (e.g. context) don't get added to memoizedState,\n  // so memoizedState would be null during updates and mounts.\n  if (__DEV__) {\n    if (current !== null && current.memoizedState !== null) {\n      ReactCurrentDispatcher.current = HooksDispatcherOnUpdateInDEV;\n    } else if (hookTypesDev !== null) {\n      // This dispatcher handles an edge case where a component is updating,\n      // but no stateful hooks have been used.\n      // We want to match the production code behavior (which will use HooksDispatcherOnMount),\n      // but with the extra DEV validation to ensure hooks ordering hasn't changed.\n      // This dispatcher does that.\n      ReactCurrentDispatcher.current = HooksDispatcherOnMountWithHookTypesInDEV;\n    } else {\n      ReactCurrentDispatcher.current = HooksDispatcherOnMountInDEV;\n    }\n  } else {\n    ReactCurrentDispatcher.current =\n      current === null || current.memoizedState === null\n        ? HooksDispatcherOnMount\n        : HooksDispatcherOnUpdate;\n  }\n\n  let children = Component(props, secondArg);\n\n  // Check if there was a render phase update\n  if (didScheduleRenderPhaseUpdateDuringThisPass) {\n    // Keep rendering in a loop for as long as render phase updates continue to\n    // be scheduled. Use a counter to prevent infinite loops.\n    let numberOfReRenders: number = 0;\n    do {\n      didScheduleRenderPhaseUpdateDuringThisPass = false;\n      invariant(\n        numberOfReRenders < RE_RENDER_LIMIT,\n        'Too many re-renders. React limits the number of renders to prevent ' +\n          'an infinite loop.',\n      );\n\n      numberOfReRenders += 1;\n      if (__DEV__) {\n        // Even when hot reloading, allow dependencies to stabilize\n        // after first render to prevent infinite render phase updates.\n        ignorePreviousDependencies = false;\n      }\n\n      // Start over from the beginning of the list\n      currentHook = null;\n      workInProgressHook = null;\n\n      workInProgress.updateQueue = null;\n\n      if (__DEV__) {\n        // Also validate hook order for cascading updates.\n        hookTypesUpdateIndexDev = -1;\n      }\n\n      ReactCurrentDispatcher.current = __DEV__\n        ? HooksDispatcherOnRerenderInDEV\n        : HooksDispatcherOnRerender;\n\n      children = Component(props, secondArg);\n    } while (didScheduleRenderPhaseUpdateDuringThisPass);\n  }\n\n  // We can assume the previous dispatcher is always this one, since we set it\n  // at the beginning of the render phase and there's no re-entrance.\n  ReactCurrentDispatcher.current = ContextOnlyDispatcher;\n\n  if (__DEV__) {\n    workInProgress._debugHookTypes = hookTypesDev;\n  }\n\n  // This check uses currentHook so that it works the same in DEV and prod bundles.\n  // hookTypesDev could catch more cases (e.g. context) but only in DEV bundles.\n  const didRenderTooFewHooks =\n    currentHook !== null && currentHook.next !== null;\n\n  renderLanes = NoLanes;\n  currentlyRenderingFiber = (null: any);\n\n  currentHook = null;\n  workInProgressHook = null;\n\n  if (__DEV__) {\n    currentHookNameInDev = null;\n    hookTypesDev = null;\n    hookTypesUpdateIndexDev = -1;\n\n    // Confirm that a static flag was not added or removed since the last\n    // render. If this fires, it suggests that we incorrectly reset the static\n    // flags in some other part of the codebase. This has happened before, for\n    // example, in the SuspenseList implementation.\n    if (\n      current !== null &&\n      (current.flags & StaticMaskEffect) !==\n        (workInProgress.flags & StaticMaskEffect) &&\n      // Disable this warning in legacy mode, because legacy Suspense is weird\n      // and creates false positives. To make this work in legacy mode, we'd\n      // need to mark fibers that commit in an incomplete state, somehow. For\n      // now I'll disable the warning that most of the bugs that would trigger\n      // it are either exclusive to concurrent mode or exist in both.\n      (current.mode & ConcurrentMode) !== NoMode\n    ) {\n      console.error(\n        'Internal React error: Expected static flag was missing. Please ' +\n          'notify the React team.',\n      );\n    }\n  }\n\n  didScheduleRenderPhaseUpdate = false;\n\n  invariant(\n    !didRenderTooFewHooks,\n    'Rendered fewer hooks than expected. This may be caused by an accidental ' +\n      'early return statement.',\n  );\n\n  if (enableLazyContextPropagation) {\n    if (current !== null) {\n      if (!checkIfWorkInProgressReceivedUpdate()) {\n        // If there were no changes to props or state, we need to check if there\n        // was a context change. We didn't already do this because there's no\n        // 1:1 correspondence between dependencies and hooks. Although, because\n        // there almost always is in the common case (`readContext` is an\n        // internal API), we could compare in there. OTOH, we only hit this case\n        // if everything else bails out, so on the whole it might be better to\n        // keep the comparison out of the common path.\n        const currentDependencies = current.dependencies;\n        if (\n          currentDependencies !== null &&\n          checkIfContextChanged(currentDependencies)\n        ) {\n          markWorkInProgressReceivedUpdate();\n        }\n      }\n    }\n  }\n\n  return children;\n}\n\nexport function bailoutHooks(\n  current: Fiber,\n  workInProgress: Fiber,\n  lanes: Lanes,\n) {\n  workInProgress.updateQueue = current.updateQueue;\n  // TODO: Don't need to reset the flags here, because they're reset in the\n  // complete phase (bubbleProperties).\n  if (\n    __DEV__ &&\n    enableStrictEffects &&\n    (workInProgress.mode & StrictEffectsMode) !== NoMode\n  ) {\n    workInProgress.flags &= ~(\n      MountPassiveDevEffect |\n      MountLayoutDevEffect |\n      PassiveEffect |\n      UpdateEffect\n    );\n  } else {\n    workInProgress.flags &= ~(PassiveEffect | UpdateEffect);\n  }\n  current.lanes = removeLanes(current.lanes, lanes);\n}\n\nexport function resetHooksAfterThrow(): void {\n  // We can assume the previous dispatcher is always this one, since we set it\n  // at the beginning of the render phase and there's no re-entrance.\n  ReactCurrentDispatcher.current = ContextOnlyDispatcher;\n\n  if (didScheduleRenderPhaseUpdate) {\n    // There were render phase updates. These are only valid for this render\n    // phase, which we are now aborting. Remove the updates from the queues so\n    // they do not persist to the next render. Do not remove updates from hooks\n    // that weren't processed.\n    //\n    // Only reset the updates from the queue if it has a clone. If it does\n    // not have a clone, that means it wasn't processed, and the updates were\n    // scheduled before we entered the render phase.\n    let hook: Hook | null = currentlyRenderingFiber.memoizedState;\n    while (hook !== null) {\n      const queue = hook.queue;\n      if (queue !== null) {\n        queue.pending = null;\n      }\n      hook = hook.next;\n    }\n    didScheduleRenderPhaseUpdate = false;\n  }\n\n  renderLanes = NoLanes;\n  currentlyRenderingFiber = (null: any);\n\n  currentHook = null;\n  workInProgressHook = null;\n\n  if (__DEV__) {\n    hookTypesDev = null;\n    hookTypesUpdateIndexDev = -1;\n\n    currentHookNameInDev = null;\n\n    isUpdatingOpaqueValueInRenderPhase = false;\n  }\n\n  didScheduleRenderPhaseUpdateDuringThisPass = false;\n}\n\nfunction mountWorkInProgressHook(): Hook {\n  const hook: Hook = {\n    memoizedState: null,\n\n    baseState: null,\n    baseQueue: null,\n    queue: null,\n\n    next: null,\n  };\n\n  if (workInProgressHook === null) {\n    // This is the first hook in the list\n    currentlyRenderingFiber.memoizedState = workInProgressHook = hook;\n  } else {\n    // Append to the end of the list\n    workInProgressHook = workInProgressHook.next = hook;\n  }\n  return workInProgressHook;\n}\n\nfunction updateWorkInProgressHook(): Hook {\n  // This function is used both for updates and for re-renders triggered by a\n  // render phase update. It assumes there is either a current hook we can\n  // clone, or a work-in-progress hook from a previous render pass that we can\n  // use as a base. When we reach the end of the base list, we must switch to\n  // the dispatcher used for mounts.\n  let nextCurrentHook: null | Hook;\n  if (currentHook === null) {\n    const current = currentlyRenderingFiber.alternate;\n    if (current !== null) {\n      nextCurrentHook = current.memoizedState;\n    } else {\n      nextCurrentHook = null;\n    }\n  } else {\n    nextCurrentHook = currentHook.next;\n  }\n\n  let nextWorkInProgressHook: null | Hook;\n  if (workInProgressHook === null) {\n    nextWorkInProgressHook = currentlyRenderingFiber.memoizedState;\n  } else {\n    nextWorkInProgressHook = workInProgressHook.next;\n  }\n\n  if (nextWorkInProgressHook !== null) {\n    // There's already a work-in-progress. Reuse it.\n    workInProgressHook = nextWorkInProgressHook;\n    nextWorkInProgressHook = workInProgressHook.next;\n\n    currentHook = nextCurrentHook;\n  } else {\n    // Clone from the current hook.\n\n    invariant(\n      nextCurrentHook !== null,\n      'Rendered more hooks than during the previous render.',\n    );\n    currentHook = nextCurrentHook;\n\n    const newHook: Hook = {\n      memoizedState: currentHook.memoizedState,\n\n      baseState: currentHook.baseState,\n      baseQueue: currentHook.baseQueue,\n      queue: currentHook.queue,\n\n      next: null,\n    };\n\n    if (workInProgressHook === null) {\n      // This is the first hook in the list.\n      currentlyRenderingFiber.memoizedState = workInProgressHook = newHook;\n    } else {\n      // Append to the end of the list.\n      workInProgressHook = workInProgressHook.next = newHook;\n    }\n  }\n  return workInProgressHook;\n}\n\nfunction createFunctionComponentUpdateQueue(): FunctionComponentUpdateQueue {\n  return {\n    lastEffect: null,\n  };\n}\n\nfunction basicStateReducer<S>(state: S, action: BasicStateAction<S>): S {\n  // $FlowFixMe: Flow doesn't like mixed types\n  return typeof action === 'function' ? action(state) : action;\n}\n\nfunction mountReducer<S, I, A>(\n  reducer: (S, A) => S,\n  initialArg: I,\n  init?: I => S,\n): [S, Dispatch<A>] {\n  const hook = mountWorkInProgressHook();\n  let initialState;\n  if (init !== undefined) {\n    initialState = init(initialArg);\n  } else {\n    initialState = ((initialArg: any): S);\n  }\n  hook.memoizedState = hook.baseState = initialState;\n  const queue: UpdateQueue<S, A> = {\n    pending: null,\n    interleaved: null,\n    lanes: NoLanes,\n    dispatch: null,\n    lastRenderedReducer: reducer,\n    lastRenderedState: (initialState: any),\n  };\n  hook.queue = queue;\n  const dispatch: Dispatch<A> = (queue.dispatch = (dispatchAction.bind(\n    null,\n    currentlyRenderingFiber,\n    queue,\n  ): any));\n  return [hook.memoizedState, dispatch];\n}\n\nfunction updateReducer<S, I, A>(\n  reducer: (S, A) => S,\n  initialArg: I,\n  init?: I => S,\n): [S, Dispatch<A>] {\n  const hook = updateWorkInProgressHook();\n  const queue = hook.queue;\n  invariant(\n    queue !== null,\n    'Should have a queue. This is likely a bug in React. Please file an issue.',\n  );\n\n  queue.lastRenderedReducer = reducer;\n\n  const current: Hook = (currentHook: any);\n\n  // The last rebase update that is NOT part of the base state.\n  let baseQueue = current.baseQueue;\n\n  // The last pending update that hasn't been processed yet.\n  const pendingQueue = queue.pending;\n  if (pendingQueue !== null) {\n    // We have new updates that haven't been processed yet.\n    // We'll add them to the base queue.\n    if (baseQueue !== null) {\n      // Merge the pending queue and the base queue.\n      const baseFirst = baseQueue.next;\n      const pendingFirst = pendingQueue.next;\n      baseQueue.next = pendingFirst;\n      pendingQueue.next = baseFirst;\n    }\n    if (__DEV__) {\n      if (current.baseQueue !== baseQueue) {\n        // Internal invariant that should never happen, but feasibly could in\n        // the future if we implement resuming, or some form of that.\n        console.error(\n          'Internal error: Expected work-in-progress queue to be a clone. ' +\n            'This is a bug in React.',\n        );\n      }\n    }\n    current.baseQueue = baseQueue = pendingQueue;\n    queue.pending = null;\n  }\n\n  if (baseQueue !== null) {\n    // We have a queue to process.\n    const first = baseQueue.next;\n    let newState = current.baseState;\n\n    let newBaseState = null;\n    let newBaseQueueFirst = null;\n    let newBaseQueueLast = null;\n    let update = first;\n    do {\n      const updateLane = update.lane;\n      if (!isSubsetOfLanes(renderLanes, updateLane)) {\n        // Priority is insufficient. Skip this update. If this is the first\n        // skipped update, the previous update/state is the new base\n        // update/state.\n        const clone: Update<S, A> = {\n          lane: updateLane,\n          action: update.action,\n          eagerReducer: update.eagerReducer,\n          eagerState: update.eagerState,\n          next: (null: any),\n        };\n        if (newBaseQueueLast === null) {\n          newBaseQueueFirst = newBaseQueueLast = clone;\n          newBaseState = newState;\n        } else {\n          newBaseQueueLast = newBaseQueueLast.next = clone;\n        }\n        // Update the remaining priority in the queue.\n        // TODO: Don't need to accumulate this. Instead, we can remove\n        // renderLanes from the original lanes.\n        currentlyRenderingFiber.lanes = mergeLanes(\n          currentlyRenderingFiber.lanes,\n          updateLane,\n        );\n        markSkippedUpdateLanes(updateLane);\n      } else {\n        // This update does have sufficient priority.\n\n        if (newBaseQueueLast !== null) {\n          const clone: Update<S, A> = {\n            // This update is going to be committed so we never want uncommit\n            // it. Using NoLane works because 0 is a subset of all bitmasks, so\n            // this will never be skipped by the check above.\n            lane: NoLane,\n            action: update.action,\n            eagerReducer: update.eagerReducer,\n            eagerState: update.eagerState,\n            next: (null: any),\n          };\n          newBaseQueueLast = newBaseQueueLast.next = clone;\n        }\n\n        // Process this update.\n        if (update.eagerReducer === reducer) {\n          // If this update was processed eagerly, and its reducer matches the\n          // current reducer, we can use the eagerly computed state.\n          newState = ((update.eagerState: any): S);\n        } else {\n          const action = update.action;\n          newState = reducer(newState, action);\n        }\n      }\n      update = update.next;\n    } while (update !== null && update !== first);\n\n    if (newBaseQueueLast === null) {\n      newBaseState = newState;\n    } else {\n      newBaseQueueLast.next = (newBaseQueueFirst: any);\n    }\n\n    // Mark that the fiber performed work, but only if the new state is\n    // different from the current state.\n    if (!is(newState, hook.memoizedState)) {\n      markWorkInProgressReceivedUpdate();\n    }\n\n    hook.memoizedState = newState;\n    hook.baseState = newBaseState;\n    hook.baseQueue = newBaseQueueLast;\n\n    queue.lastRenderedState = newState;\n  }\n\n  // Interleaved updates are stored on a separate queue. We aren't going to\n  // process them during this render, but we do need to track which lanes\n  // are remaining.\n  const lastInterleaved = queue.interleaved;\n  if (lastInterleaved !== null) {\n    let interleaved = lastInterleaved;\n    do {\n      const interleavedLane = interleaved.lane;\n      currentlyRenderingFiber.lanes = mergeLanes(\n        currentlyRenderingFiber.lanes,\n        interleavedLane,\n      );\n      markSkippedUpdateLanes(interleavedLane);\n      interleaved = ((interleaved: any).next: Update<S, A>);\n    } while (interleaved !== lastInterleaved);\n  } else if (baseQueue === null) {\n    // `queue.lanes` is used for entangling transitions. We can set it back to\n    // zero once the queue is empty.\n    queue.lanes = NoLanes;\n  }\n\n  const dispatch: Dispatch<A> = (queue.dispatch: any);\n  return [hook.memoizedState, dispatch];\n}\n\nfunction rerenderReducer<S, I, A>(\n  reducer: (S, A) => S,\n  initialArg: I,\n  init?: I => S,\n): [S, Dispatch<A>] {\n  const hook = updateWorkInProgressHook();\n  const queue = hook.queue;\n  invariant(\n    queue !== null,\n    'Should have a queue. This is likely a bug in React. Please file an issue.',\n  );\n\n  queue.lastRenderedReducer = reducer;\n\n  // This is a re-render. Apply the new render phase updates to the previous\n  // work-in-progress hook.\n  const dispatch: Dispatch<A> = (queue.dispatch: any);\n  const lastRenderPhaseUpdate = queue.pending;\n  let newState = hook.memoizedState;\n  if (lastRenderPhaseUpdate !== null) {\n    // The queue doesn't persist past this render pass.\n    queue.pending = null;\n\n    const firstRenderPhaseUpdate = lastRenderPhaseUpdate.next;\n    let update = firstRenderPhaseUpdate;\n    do {\n      // Process this render phase update. We don't have to check the\n      // priority because it will always be the same as the current\n      // render's.\n      const action = update.action;\n      newState = reducer(newState, action);\n      update = update.next;\n    } while (update !== firstRenderPhaseUpdate);\n\n    // Mark that the fiber performed work, but only if the new state is\n    // different from the current state.\n    if (!is(newState, hook.memoizedState)) {\n      markWorkInProgressReceivedUpdate();\n    }\n\n    hook.memoizedState = newState;\n    // Don't persist the state accumulated from the render phase updates to\n    // the base state unless the queue is empty.\n    // TODO: Not sure if this is the desired semantics, but it's what we\n    // do for gDSFP. I can't remember why.\n    if (hook.baseQueue === null) {\n      hook.baseState = newState;\n    }\n\n    queue.lastRenderedState = newState;\n  }\n  return [newState, dispatch];\n}\n\ntype MutableSourceMemoizedState<Source, Snapshot> = {|\n  refs: {\n    getSnapshot: MutableSourceGetSnapshotFn<Source, Snapshot>,\n    setSnapshot: Snapshot => void,\n  },\n  source: MutableSource<any>,\n  subscribe: MutableSourceSubscribeFn<Source, Snapshot>,\n|};\n\nfunction readFromUnsubscribedMutableSource<Source, Snapshot>(\n  root: FiberRoot,\n  source: MutableSource<Source>,\n  getSnapshot: MutableSourceGetSnapshotFn<Source, Snapshot>,\n): Snapshot {\n  if (__DEV__) {\n    warnAboutMultipleRenderersDEV(source);\n  }\n\n  const getVersion = source._getVersion;\n  const version = getVersion(source._source);\n\n  // Is it safe for this component to read from this source during the current render?\n  let isSafeToReadFromSource = false;\n\n  // Check the version first.\n  // If this render has already been started with a specific version,\n  // we can use it alone to determine if we can safely read from the source.\n  const currentRenderVersion = getWorkInProgressVersion(source);\n  if (currentRenderVersion !== null) {\n    // It's safe to read if the store hasn't been mutated since the last time\n    // we read something.\n    isSafeToReadFromSource = currentRenderVersion === version;\n  } else {\n    // If there's no version, then this is the first time we've read from the\n    // source during the current render pass, so we need to do a bit more work.\n    // What we need to determine is if there are any hooks that already\n    // subscribed to the source, and if so, whether there are any pending\n    // mutations that haven't been synchronized yet.\n    //\n    // If there are no pending mutations, then `root.mutableReadLanes` will be\n    // empty, and we know we can safely read.\n    //\n    // If there *are* pending mutations, we may still be able to safely read\n    // if the currently rendering lanes are inclusive of the pending mutation\n    // lanes, since that guarantees that the value we're about to read from\n    // the source is consistent with the values that we read during the most\n    // recent mutation.\n    isSafeToReadFromSource = isSubsetOfLanes(\n      renderLanes,\n      root.mutableReadLanes,\n    );\n\n    if (isSafeToReadFromSource) {\n      // If it's safe to read from this source during the current render,\n      // store the version in case other components read from it.\n      // A changed version number will let those components know to throw and restart the render.\n      setWorkInProgressVersion(source, version);\n    }\n  }\n\n  if (isSafeToReadFromSource) {\n    const snapshot = getSnapshot(source._source);\n    if (__DEV__) {\n      if (typeof snapshot === 'function') {\n        console.error(\n          'Mutable source should not return a function as the snapshot value. ' +\n            'Functions may close over mutable values and cause tearing.',\n        );\n      }\n    }\n    return snapshot;\n  } else {\n    // This handles the special case of a mutable source being shared between renderers.\n    // In that case, if the source is mutated between the first and second renderer,\n    // The second renderer don't know that it needs to reset the WIP version during unwind,\n    // (because the hook only marks sources as dirty if it's written to their WIP version).\n    // That would cause this tear check to throw again and eventually be visible to the user.\n    // We can avoid this infinite loop by explicitly marking the source as dirty.\n    //\n    // This can lead to tearing in the first renderer when it resumes,\n    // but there's nothing we can do about that (short of throwing here and refusing to continue the render).\n    markSourceAsDirty(source);\n\n    // Intentioally throw an error to force React to retry synchronously. During\n    // the synchronous retry, it will block interleaved mutations, so we should\n    // get a consistent read. Therefore, the following error should never be\n    // visible to the user.\n    //\n    // If it were to become visible to the user, it suggests one of two things:\n    // a bug in React, or (more likely), a mutation during the render phase that\n    // caused the second re-render attempt to be different from the first.\n    //\n    // We know it's the second case if the logs are currently disabled. So in\n    // dev, we can present a more accurate error message.\n    if (__DEV__) {\n      // eslint-disable-next-line react-internal/no-production-logging\n      if (getIsStrictModeForDevtools()) {\n        // If getIsStrictModeForDevtools is true, this is the dev-only double render\n        // This is only reachable if there was a mutation during render. Show a helpful\n        // error message.\n        //\n        // Something interesting to note: because we only double render in\n        // development, this error will never happen during production. This is\n        // actually true of all errors that occur during a double render,\n        // because if the first render had thrown, we would have exited the\n        // begin phase without double rendering. We should consider suppressing\n        // any error from a double render (with a warning) to more closely match\n        // the production behavior.\n        const componentName = getComponentNameFromFiber(\n          currentlyRenderingFiber,\n        );\n        invariant(\n          false,\n          'A mutable source was mutated while the %s component was rendering. ' +\n            'This is not supported. Move any mutations into event handlers ' +\n            'or effects.',\n          componentName,\n        );\n      }\n    }\n\n    // We expect this error not to be thrown during the synchronous retry,\n    // because we blocked interleaved mutations.\n    invariant(\n      false,\n      'Cannot read from mutable source during the current render without tearing. This may be a bug in React. Please file an issue.',\n    );\n  }\n}\n\nfunction useMutableSource<Source, Snapshot>(\n  hook: Hook,\n  source: MutableSource<Source>,\n  getSnapshot: MutableSourceGetSnapshotFn<Source, Snapshot>,\n  subscribe: MutableSourceSubscribeFn<Source, Snapshot>,\n): Snapshot {\n  const root = ((getWorkInProgressRoot(): any): FiberRoot);\n  invariant(\n    root !== null,\n    'Expected a work-in-progress root. This is a bug in React. Please file an issue.',\n  );\n\n  const getVersion = source._getVersion;\n  const version = getVersion(source._source);\n\n  const dispatcher = ReactCurrentDispatcher.current;\n\n  // eslint-disable-next-line prefer-const\n  let [currentSnapshot, setSnapshot] = dispatcher.useState(() =>\n    readFromUnsubscribedMutableSource(root, source, getSnapshot),\n  );\n  let snapshot = currentSnapshot;\n\n  // Grab a handle to the state hook as well.\n  // We use it to clear the pending update queue if we have a new source.\n  const stateHook = ((workInProgressHook: any): Hook);\n\n  const memoizedState = ((hook.memoizedState: any): MutableSourceMemoizedState<\n    Source,\n    Snapshot,\n  >);\n  const refs = memoizedState.refs;\n  const prevGetSnapshot = refs.getSnapshot;\n  const prevSource = memoizedState.source;\n  const prevSubscribe = memoizedState.subscribe;\n\n  const fiber = currentlyRenderingFiber;\n\n  hook.memoizedState = ({\n    refs,\n    source,\n    subscribe,\n  }: MutableSourceMemoizedState<Source, Snapshot>);\n\n  // Sync the values needed by our subscription handler after each commit.\n  dispatcher.useEffect(() => {\n    refs.getSnapshot = getSnapshot;\n\n    // Normally the dispatch function for a state hook never changes,\n    // but this hook recreates the queue in certain cases  to avoid updates from stale sources.\n    // handleChange() below needs to reference the dispatch function without re-subscribing,\n    // so we use a ref to ensure that it always has the latest version.\n    refs.setSnapshot = setSnapshot;\n\n    // Check for a possible change between when we last rendered now.\n    const maybeNewVersion = getVersion(source._source);\n    if (!is(version, maybeNewVersion)) {\n      const maybeNewSnapshot = getSnapshot(source._source);\n      if (__DEV__) {\n        if (typeof maybeNewSnapshot === 'function') {\n          console.error(\n            'Mutable source should not return a function as the snapshot value. ' +\n              'Functions may close over mutable values and cause tearing.',\n          );\n        }\n      }\n\n      if (!is(snapshot, maybeNewSnapshot)) {\n        setSnapshot(maybeNewSnapshot);\n\n        const lane = requestUpdateLane(fiber);\n        markRootMutableRead(root, lane);\n      }\n      // If the source mutated between render and now,\n      // there may be state updates already scheduled from the old source.\n      // Entangle the updates so that they render in the same batch.\n      markRootEntangled(root, root.mutableReadLanes);\n    }\n  }, [getSnapshot, source, subscribe]);\n\n  // If we got a new source or subscribe function, re-subscribe in a passive effect.\n  dispatcher.useEffect(() => {\n    const handleChange = () => {\n      const latestGetSnapshot = refs.getSnapshot;\n      const latestSetSnapshot = refs.setSnapshot;\n\n      try {\n        latestSetSnapshot(latestGetSnapshot(source._source));\n\n        // Record a pending mutable source update with the same expiration time.\n        const lane = requestUpdateLane(fiber);\n\n        markRootMutableRead(root, lane);\n      } catch (error) {\n        // A selector might throw after a source mutation.\n        // e.g. it might try to read from a part of the store that no longer exists.\n        // In this case we should still schedule an update with React.\n        // Worst case the selector will throw again and then an error boundary will handle it.\n        latestSetSnapshot(\n          (() => {\n            throw error;\n          }: any),\n        );\n      }\n    };\n\n    const unsubscribe = subscribe(source._source, handleChange);\n    if (__DEV__) {\n      if (typeof unsubscribe !== 'function') {\n        console.error(\n          'Mutable source subscribe function must return an unsubscribe function.',\n        );\n      }\n    }\n\n    return unsubscribe;\n  }, [source, subscribe]);\n\n  // If any of the inputs to useMutableSource change, reading is potentially unsafe.\n  //\n  // If either the source or the subscription have changed we can't can't trust the update queue.\n  // Maybe the source changed in a way that the old subscription ignored but the new one depends on.\n  //\n  // If the getSnapshot function changed, we also shouldn't rely on the update queue.\n  // It's possible that the underlying source was mutated between the when the last \"change\" event fired,\n  // and when the current render (with the new getSnapshot function) is processed.\n  //\n  // In both cases, we need to throw away pending updates (since they are no longer relevant)\n  // and treat reading from the source as we do in the mount case.\n  if (\n    !is(prevGetSnapshot, getSnapshot) ||\n    !is(prevSource, source) ||\n    !is(prevSubscribe, subscribe)\n  ) {\n    // Create a new queue and setState method,\n    // So if there are interleaved updates, they get pushed to the older queue.\n    // When this becomes current, the previous queue and dispatch method will be discarded,\n    // including any interleaving updates that occur.\n    const newQueue: UpdateQueue<Snapshot, BasicStateAction<Snapshot>> = {\n      pending: null,\n      interleaved: null,\n      lanes: NoLanes,\n      dispatch: null,\n      lastRenderedReducer: basicStateReducer,\n      lastRenderedState: snapshot,\n    };\n    newQueue.dispatch = setSnapshot = (dispatchAction.bind(\n      null,\n      currentlyRenderingFiber,\n      newQueue,\n    ): any);\n    stateHook.queue = newQueue;\n    stateHook.baseQueue = null;\n    snapshot = readFromUnsubscribedMutableSource(root, source, getSnapshot);\n    stateHook.memoizedState = stateHook.baseState = snapshot;\n  }\n\n  return snapshot;\n}\n\nfunction mountMutableSource<Source, Snapshot>(\n  source: MutableSource<Source>,\n  getSnapshot: MutableSourceGetSnapshotFn<Source, Snapshot>,\n  subscribe: MutableSourceSubscribeFn<Source, Snapshot>,\n): Snapshot {\n  const hook = mountWorkInProgressHook();\n  hook.memoizedState = ({\n    refs: {\n      getSnapshot,\n      setSnapshot: (null: any),\n    },\n    source,\n    subscribe,\n  }: MutableSourceMemoizedState<Source, Snapshot>);\n  return useMutableSource(hook, source, getSnapshot, subscribe);\n}\n\nfunction updateMutableSource<Source, Snapshot>(\n  source: MutableSource<Source>,\n  getSnapshot: MutableSourceGetSnapshotFn<Source, Snapshot>,\n  subscribe: MutableSourceSubscribeFn<Source, Snapshot>,\n): Snapshot {\n  const hook = updateWorkInProgressHook();\n  return useMutableSource(hook, source, getSnapshot, subscribe);\n}\n\nfunction mountSyncExternalStore<T>(\n  subscribe: (() => void) => () => void,\n  getSnapshot: () => T,\n): T {\n  const hook = mountWorkInProgressHook();\n  // Read the current snapshot from the store on every render. This breaks the\n  // normal rules of React, and only works because store updates are\n  // always synchronous.\n  const nextSnapshot = getSnapshot();\n  if (__DEV__) {\n    if (!didWarnUncachedGetSnapshot) {\n      if (nextSnapshot !== getSnapshot()) {\n        console.error(\n          'The result of getSnapshot should be cached to avoid an infinite loop',\n        );\n        didWarnUncachedGetSnapshot = true;\n      }\n    }\n  }\n  hook.memoizedState = nextSnapshot;\n  const inst: StoreInstance<T> = {\n    value: nextSnapshot,\n    getSnapshot,\n  };\n  hook.queue = inst;\n  return useSyncExternalStore(hook, inst, subscribe, getSnapshot, nextSnapshot);\n}\n\nfunction updateSyncExternalStore<T>(\n  subscribe: (() => void) => () => void,\n  getSnapshot: () => T,\n): T {\n  const hook = updateWorkInProgressHook();\n  // Read the current snapshot from the store on every render. This breaks the\n  // normal rules of React, and only works because store updates are\n  // always synchronous.\n  const nextSnapshot = getSnapshot();\n  if (__DEV__) {\n    if (!didWarnUncachedGetSnapshot) {\n      if (nextSnapshot !== getSnapshot()) {\n        console.error(\n          'The result of getSnapshot should be cached to avoid an infinite loop',\n        );\n        didWarnUncachedGetSnapshot = true;\n      }\n    }\n  }\n  const prevSnapshot = hook.memoizedState;\n  if (!is(prevSnapshot, nextSnapshot)) {\n    hook.memoizedState = nextSnapshot;\n    markWorkInProgressReceivedUpdate();\n  }\n  const inst = hook.queue;\n  return useSyncExternalStore(hook, inst, subscribe, getSnapshot, nextSnapshot);\n}\n\nfunction useSyncExternalStore<T>(\n  hook: Hook,\n  inst: StoreInstance<T>,\n  subscribe: (() => void) => () => void,\n  getSnapshot: () => T,\n  nextSnapshot: T,\n): T {\n  const fiber = currentlyRenderingFiber;\n  const dispatcher = ReactCurrentDispatcher.current;\n\n  // Track the latest getSnapshot function with a ref. This needs to be updated\n  // in the layout phase so we can access it during the tearing check that\n  // happens on subscribe.\n  // TODO: Circumvent SSR warning\n  dispatcher.useLayoutEffect(() => {\n    inst.value = nextSnapshot;\n    inst.getSnapshot = getSnapshot;\n\n    // Whenever getSnapshot or subscribe changes, we need to check in the\n    // commit phase if there was an interleaved mutation. In concurrent mode\n    // this can happen all the time, but even in synchronous mode, an earlier\n    // effect may have mutated the store.\n    // TODO: Move the tearing checks to an earlier, pre-commit phase so that the\n    // layout effects always observe a consistent tree.\n    if (checkIfSnapshotChanged(inst)) {\n      // Force a re-render.\n      forceStoreRerender(fiber);\n    }\n  }, [subscribe, nextSnapshot, getSnapshot]);\n\n  dispatcher.useEffect(() => {\n    const handleStoreChange = () => {\n      // TODO: Because there is no cross-renderer API for batching updates, it's\n      // up to the consumer of this library to wrap their subscription event\n      // with unstable_batchedUpdates. Should we try to detect when this isn't\n      // the case and print a warning in development?\n\n      // The store changed. Check if the snapshot changed since the last time we\n      // read from the store.\n      if (checkIfSnapshotChanged(inst)) {\n        // Force a re-render.\n        forceStoreRerender(fiber);\n      }\n    };\n    // Check for changes right before subscribing. Subsequent changes will be\n    // detected in the subscription handler.\n    handleStoreChange();\n    // Subscribe to the store and return a clean-up function.\n    return subscribe(handleStoreChange);\n  }, [subscribe]);\n\n  return nextSnapshot;\n}\n\nfunction checkIfSnapshotChanged(inst) {\n  const latestGetSnapshot = inst.getSnapshot;\n  const prevValue = inst.value;\n  try {\n    const nextValue = latestGetSnapshot();\n    return !is(prevValue, nextValue);\n  } catch (error) {\n    return true;\n  }\n}\n\nfunction forceStoreRerender(fiber) {\n  scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);\n}\n\nfunction mountState<S>(\n  initialState: (() => S) | S,\n): [S, Dispatch<BasicStateAction<S>>] {\n  const hook = mountWorkInProgressHook();\n  if (typeof initialState === 'function') {\n    // $FlowFixMe: Flow doesn't like mixed types\n    initialState = initialState();\n  }\n  hook.memoizedState = hook.baseState = initialState;\n  const queue: UpdateQueue<S, BasicStateAction<S>> = {\n    pending: null,\n    interleaved: null,\n    lanes: NoLanes,\n    dispatch: null,\n    lastRenderedReducer: basicStateReducer,\n    lastRenderedState: (initialState: any),\n  };\n  hook.queue = queue;\n  const dispatch: Dispatch<\n    BasicStateAction<S>,\n  > = (queue.dispatch = (dispatchAction.bind(\n    null,\n    currentlyRenderingFiber,\n    queue,\n  ): any));\n  return [hook.memoizedState, dispatch];\n}\n\nfunction updateState<S>(\n  initialState: (() => S) | S,\n): [S, Dispatch<BasicStateAction<S>>] {\n  return updateReducer(basicStateReducer, (initialState: any));\n}\n\nfunction rerenderState<S>(\n  initialState: (() => S) | S,\n): [S, Dispatch<BasicStateAction<S>>] {\n  return rerenderReducer(basicStateReducer, (initialState: any));\n}\n\nfunction pushEffect(tag, create, destroy, deps) {\n  const effect: Effect = {\n    tag,\n    create,\n    destroy,\n    deps,\n    // Circular\n    next: (null: any),\n  };\n  let componentUpdateQueue: null | FunctionComponentUpdateQueue = (currentlyRenderingFiber.updateQueue: any);\n  if (componentUpdateQueue === null) {\n    componentUpdateQueue = createFunctionComponentUpdateQueue();\n    currentlyRenderingFiber.updateQueue = (componentUpdateQueue: any);\n    componentUpdateQueue.lastEffect = effect.next = effect;\n  } else {\n    const lastEffect = componentUpdateQueue.lastEffect;\n    if (lastEffect === null) {\n      componentUpdateQueue.lastEffect = effect.next = effect;\n    } else {\n      const firstEffect = lastEffect.next;\n      lastEffect.next = effect;\n      effect.next = firstEffect;\n      componentUpdateQueue.lastEffect = effect;\n    }\n  }\n  return effect;\n}\n\nlet stackContainsErrorMessage: boolean | null = null;\n\nfunction getCallerStackFrame(): string {\n  const stackFrames = new Error('Error message').stack.split('\\n');\n\n  // Some browsers (e.g. Chrome) include the error message in the stack\n  // but others (e.g. Firefox) do not.\n  if (stackContainsErrorMessage === null) {\n    stackContainsErrorMessage = stackFrames[0].includes('Error message');\n  }\n\n  return stackContainsErrorMessage\n    ? stackFrames.slice(3, 4).join('\\n')\n    : stackFrames.slice(2, 3).join('\\n');\n}\n\nfunction mountRef<T>(initialValue: T): {|current: T|} {\n  const hook = mountWorkInProgressHook();\n  if (enableUseRefAccessWarning) {\n    if (__DEV__) {\n      // Support lazy initialization pattern shown in docs.\n      // We need to store the caller stack frame so that we don't warn on subsequent renders.\n      let hasBeenInitialized = initialValue != null;\n      let lazyInitGetterStack = null;\n      let didCheckForLazyInit = false;\n\n      // Only warn once per component+hook.\n      let didWarnAboutRead = false;\n      let didWarnAboutWrite = false;\n\n      let current = initialValue;\n      const ref = {\n        get current() {\n          if (!hasBeenInitialized) {\n            didCheckForLazyInit = true;\n            lazyInitGetterStack = getCallerStackFrame();\n          } else if (currentlyRenderingFiber !== null && !didWarnAboutRead) {\n            if (\n              lazyInitGetterStack === null ||\n              lazyInitGetterStack !== getCallerStackFrame()\n            ) {\n              didWarnAboutRead = true;\n              console.warn(\n                '%s: Unsafe read of a mutable value during render.\\n\\n' +\n                  'Reading from a ref during render is only safe if:\\n' +\n                  '1. The ref value has not been updated, or\\n' +\n                  '2. The ref holds a lazily-initialized value that is only set once.\\n',\n                getComponentNameFromFiber(currentlyRenderingFiber) || 'Unknown',\n              );\n            }\n          }\n          return current;\n        },\n        set current(value) {\n          if (currentlyRenderingFiber !== null && !didWarnAboutWrite) {\n            if (\n              hasBeenInitialized ||\n              (!hasBeenInitialized && !didCheckForLazyInit)\n            ) {\n              didWarnAboutWrite = true;\n              console.warn(\n                '%s: Unsafe write of a mutable value during render.\\n\\n' +\n                  'Writing to a ref during render is only safe if the ref holds ' +\n                  'a lazily-initialized value that is only set once.\\n',\n                getComponentNameFromFiber(currentlyRenderingFiber) || 'Unknown',\n              );\n            }\n          }\n\n          hasBeenInitialized = true;\n          current = value;\n        },\n      };\n      Object.seal(ref);\n      hook.memoizedState = ref;\n      return ref;\n    } else {\n      const ref = {current: initialValue};\n      hook.memoizedState = ref;\n      return ref;\n    }\n  } else {\n    const ref = {current: initialValue};\n    hook.memoizedState = ref;\n    return ref;\n  }\n}\n\nfunction updateRef<T>(initialValue: T): {|current: T|} {\n  const hook = updateWorkInProgressHook();\n  return hook.memoizedState;\n}\n\nfunction mountEffectImpl(fiberFlags, hookFlags, create, deps): void {\n  const hook = mountWorkInProgressHook();\n  const nextDeps = deps === undefined ? null : deps;\n  currentlyRenderingFiber.flags |= fiberFlags;\n  hook.memoizedState = pushEffect(\n    HookHasEffect | hookFlags,\n    create,\n    undefined,\n    nextDeps,\n  );\n}\n\nfunction updateEffectImpl(fiberFlags, hookFlags, create, deps): void {\n  const hook = updateWorkInProgressHook();\n  const nextDeps = deps === undefined ? null : deps;\n  let destroy = undefined;\n\n  if (currentHook !== null) {\n    const prevEffect = currentHook.memoizedState;\n    destroy = prevEffect.destroy;\n    if (nextDeps !== null) {\n      const prevDeps = prevEffect.deps;\n      if (areHookInputsEqual(nextDeps, prevDeps)) {\n        hook.memoizedState = pushEffect(hookFlags, create, destroy, nextDeps);\n        return;\n      }\n    }\n  }\n\n  currentlyRenderingFiber.flags |= fiberFlags;\n\n  hook.memoizedState = pushEffect(\n    HookHasEffect | hookFlags,\n    create,\n    destroy,\n    nextDeps,\n  );\n}\n\nfunction mountEffect(\n  create: () => (() => void) | void,\n  deps: Array<mixed> | void | null,\n): void {\n  if (__DEV__) {\n    // $FlowExpectedError - jest isn't a global, and isn't recognized outside of tests\n    if ('undefined' !== typeof jest) {\n      warnIfNotCurrentlyActingEffectsInDEV(currentlyRenderingFiber);\n    }\n  }\n  if (\n    __DEV__ &&\n    enableStrictEffects &&\n    (currentlyRenderingFiber.mode & StrictEffectsMode) !== NoMode\n  ) {\n    return mountEffectImpl(\n      MountPassiveDevEffect | PassiveEffect | PassiveStaticEffect,\n      HookPassive,\n      create,\n      deps,\n    );\n  } else {\n    return mountEffectImpl(\n      PassiveEffect | PassiveStaticEffect,\n      HookPassive,\n      create,\n      deps,\n    );\n  }\n}\n\nfunction updateEffect(\n  create: () => (() => void) | void,\n  deps: Array<mixed> | void | null,\n): void {\n  if (__DEV__) {\n    // $FlowExpectedError - jest isn't a global, and isn't recognized outside of tests\n    if ('undefined' !== typeof jest) {\n      warnIfNotCurrentlyActingEffectsInDEV(currentlyRenderingFiber);\n    }\n  }\n  return updateEffectImpl(PassiveEffect, HookPassive, create, deps);\n}\n\nfunction mountLayoutEffect(\n  create: () => (() => void) | void,\n  deps: Array<mixed> | void | null,\n): void {\n  let fiberFlags: Flags = UpdateEffect;\n  if (enableSuspenseLayoutEffectSemantics) {\n    fiberFlags |= LayoutStaticEffect;\n  }\n  if (\n    __DEV__ &&\n    enableStrictEffects &&\n    (currentlyRenderingFiber.mode & StrictEffectsMode) !== NoMode\n  ) {\n    fiberFlags |= MountLayoutDevEffect;\n  }\n  return mountEffectImpl(fiberFlags, HookLayout, create, deps);\n}\n\nfunction updateLayoutEffect(\n  create: () => (() => void) | void,\n  deps: Array<mixed> | void | null,\n): void {\n  return updateEffectImpl(UpdateEffect, HookLayout, create, deps);\n}\n\nfunction imperativeHandleEffect<T>(\n  create: () => T,\n  ref: {|current: T | null|} | ((inst: T | null) => mixed) | null | void,\n) {\n  if (typeof ref === 'function') {\n    const refCallback = ref;\n    const inst = create();\n    refCallback(inst);\n    return () => {\n      refCallback(null);\n    };\n  } else if (ref !== null && ref !== undefined) {\n    const refObject = ref;\n    if (__DEV__) {\n      if (!refObject.hasOwnProperty('current')) {\n        console.error(\n          'Expected useImperativeHandle() first argument to either be a ' +\n            'ref callback or React.createRef() object. Instead received: %s.',\n          'an object with keys {' + Object.keys(refObject).join(', ') + '}',\n        );\n      }\n    }\n    const inst = create();\n    refObject.current = inst;\n    return () => {\n      refObject.current = null;\n    };\n  }\n}\n\nfunction mountImperativeHandle<T>(\n  ref: {|current: T | null|} | ((inst: T | null) => mixed) | null | void,\n  create: () => T,\n  deps: Array<mixed> | void | null,\n): void {\n  if (__DEV__) {\n    if (typeof create !== 'function') {\n      console.error(\n        'Expected useImperativeHandle() second argument to be a function ' +\n          'that creates a handle. Instead received: %s.',\n        create !== null ? typeof create : 'null',\n      );\n    }\n  }\n\n  // TODO: If deps are provided, should we skip comparing the ref itself?\n  const effectDeps =\n    deps !== null && deps !== undefined ? deps.concat([ref]) : null;\n\n  let fiberFlags: Flags = UpdateEffect;\n  if (enableSuspenseLayoutEffectSemantics) {\n    fiberFlags |= LayoutStaticEffect;\n  }\n  if (\n    __DEV__ &&\n    enableStrictEffects &&\n    (currentlyRenderingFiber.mode & StrictEffectsMode) !== NoMode\n  ) {\n    fiberFlags |= MountLayoutDevEffect;\n  }\n  return mountEffectImpl(\n    fiberFlags,\n    HookLayout,\n    imperativeHandleEffect.bind(null, create, ref),\n    effectDeps,\n  );\n}\n\nfunction updateImperativeHandle<T>(\n  ref: {|current: T | null|} | ((inst: T | null) => mixed) | null | void,\n  create: () => T,\n  deps: Array<mixed> | void | null,\n): void {\n  if (__DEV__) {\n    if (typeof create !== 'function') {\n      console.error(\n        'Expected useImperativeHandle() second argument to be a function ' +\n          'that creates a handle. Instead received: %s.',\n        create !== null ? typeof create : 'null',\n      );\n    }\n  }\n\n  // TODO: If deps are provided, should we skip comparing the ref itself?\n  const effectDeps =\n    deps !== null && deps !== undefined ? deps.concat([ref]) : null;\n\n  return updateEffectImpl(\n    UpdateEffect,\n    HookLayout,\n    imperativeHandleEffect.bind(null, create, ref),\n    effectDeps,\n  );\n}\n\nfunction mountDebugValue<T>(value: T, formatterFn: ?(value: T) => mixed): void {\n  // This hook is normally a no-op.\n  // The react-debug-hooks package injects its own implementation\n  // so that e.g. DevTools can display custom hook values.\n}\n\nconst updateDebugValue = mountDebugValue;\n\nfunction mountCallback<T>(callback: T, deps: Array<mixed> | void | null): T {\n  const hook = mountWorkInProgressHook();\n  const nextDeps = deps === undefined ? null : deps;\n  hook.memoizedState = [callback, nextDeps];\n  return callback;\n}\n\nfunction updateCallback<T>(callback: T, deps: Array<mixed> | void | null): T {\n  const hook = updateWorkInProgressHook();\n  const nextDeps = deps === undefined ? null : deps;\n  const prevState = hook.memoizedState;\n  if (prevState !== null) {\n    if (nextDeps !== null) {\n      const prevDeps: Array<mixed> | null = prevState[1];\n      if (areHookInputsEqual(nextDeps, prevDeps)) {\n        return prevState[0];\n      }\n    }\n  }\n  hook.memoizedState = [callback, nextDeps];\n  return callback;\n}\n\nfunction mountMemo<T>(\n  nextCreate: () => T,\n  deps: Array<mixed> | void | null,\n): T {\n  const hook = mountWorkInProgressHook();\n  const nextDeps = deps === undefined ? null : deps;\n  const nextValue = nextCreate();\n  hook.memoizedState = [nextValue, nextDeps];\n  return nextValue;\n}\n\nfunction updateMemo<T>(\n  nextCreate: () => T,\n  deps: Array<mixed> | void | null,\n): T {\n  const hook = updateWorkInProgressHook();\n  const nextDeps = deps === undefined ? null : deps;\n  const prevState = hook.memoizedState;\n  if (prevState !== null) {\n    // Assume these are defined. If they're not, areHookInputsEqual will warn.\n    if (nextDeps !== null) {\n      const prevDeps: Array<mixed> | null = prevState[1];\n      if (areHookInputsEqual(nextDeps, prevDeps)) {\n        return prevState[0];\n      }\n    }\n  }\n  const nextValue = nextCreate();\n  hook.memoizedState = [nextValue, nextDeps];\n  return nextValue;\n}\n\nfunction mountDeferredValue<T>(value: T): T {\n  const [prevValue, setValue] = mountState(value);\n  mountEffect(() => {\n    const prevTransition = ReactCurrentBatchConfig.transition;\n    ReactCurrentBatchConfig.transition = 1;\n    try {\n      setValue(value);\n    } finally {\n      ReactCurrentBatchConfig.transition = prevTransition;\n    }\n  }, [value]);\n  return prevValue;\n}\n\nfunction updateDeferredValue<T>(value: T): T {\n  const [prevValue, setValue] = updateState(value);\n  updateEffect(() => {\n    const prevTransition = ReactCurrentBatchConfig.transition;\n    ReactCurrentBatchConfig.transition = 1;\n    try {\n      setValue(value);\n    } finally {\n      ReactCurrentBatchConfig.transition = prevTransition;\n    }\n  }, [value]);\n  return prevValue;\n}\n\nfunction rerenderDeferredValue<T>(value: T): T {\n  const [prevValue, setValue] = rerenderState(value);\n  updateEffect(() => {\n    const prevTransition = ReactCurrentBatchConfig.transition;\n    ReactCurrentBatchConfig.transition = 1;\n    try {\n      setValue(value);\n    } finally {\n      ReactCurrentBatchConfig.transition = prevTransition;\n    }\n  }, [value]);\n  return prevValue;\n}\n\nfunction startTransition(setPending, callback) {\n  const previousPriority = getCurrentUpdatePriority();\n  setCurrentUpdatePriority(\n    higherEventPriority(previousPriority, ContinuousEventPriority),\n  );\n\n  setPending(true);\n\n  const prevTransition = ReactCurrentBatchConfig.transition;\n  ReactCurrentBatchConfig.transition = 1;\n  try {\n    setPending(false);\n    callback();\n  } finally {\n    setCurrentUpdatePriority(previousPriority);\n    ReactCurrentBatchConfig.transition = prevTransition;\n    if (__DEV__) {\n      if (\n        prevTransition !== 1 &&\n        warnOnSubscriptionInsideStartTransition &&\n        ReactCurrentBatchConfig._updatedFibers\n      ) {\n        const updatedFibersCount = ReactCurrentBatchConfig._updatedFibers.size;\n        if (updatedFibersCount > 10) {\n          console.warn(\n            'Detected a large number of updates inside startTransition. ' +\n              'If this is due to a subscription please re-write it to use React provided hooks. ' +\n              'Otherwise concurrent mode guarantees are off the table.',\n          );\n        }\n        ReactCurrentBatchConfig._updatedFibers.clear();\n      }\n    }\n  }\n}\n\nfunction mountTransition(): [boolean, (() => void) => void] {\n  const [isPending, setPending] = mountState(false);\n  // The `start` method never changes.\n  const start = startTransition.bind(null, setPending);\n  const hook = mountWorkInProgressHook();\n  hook.memoizedState = start;\n  return [isPending, start];\n}\n\nfunction updateTransition(): [boolean, (() => void) => void] {\n  const [isPending] = updateState(false);\n  const hook = updateWorkInProgressHook();\n  const start = hook.memoizedState;\n  return [isPending, start];\n}\n\nfunction rerenderTransition(): [boolean, (() => void) => void] {\n  const [isPending] = rerenderState(false);\n  const hook = updateWorkInProgressHook();\n  const start = hook.memoizedState;\n  return [isPending, start];\n}\n\nlet isUpdatingOpaqueValueInRenderPhase = false;\nexport function getIsUpdatingOpaqueValueInRenderPhaseInDEV(): boolean | void {\n  if (__DEV__) {\n    return isUpdatingOpaqueValueInRenderPhase;\n  }\n}\n\nfunction warnOnOpaqueIdentifierAccessInDEV(fiber) {\n  if (__DEV__) {\n    // TODO: Should warn in effects and callbacks, too\n    const name = getComponentNameFromFiber(fiber) || 'Unknown';\n    if (getIsRendering() && !didWarnAboutUseOpaqueIdentifier[name]) {\n      console.error(\n        'The object passed back from useOpaqueIdentifier is meant to be ' +\n          'passed through to attributes only. Do not read the ' +\n          'value directly.',\n      );\n      didWarnAboutUseOpaqueIdentifier[name] = true;\n    }\n  }\n}\n\nfunction mountOpaqueIdentifier(): OpaqueIDType | void {\n  const makeId = __DEV__\n    ? makeClientIdInDEV.bind(\n        null,\n        warnOnOpaqueIdentifierAccessInDEV.bind(null, currentlyRenderingFiber),\n      )\n    : makeClientId;\n\n  if (getIsHydrating()) {\n    let didUpgrade = false;\n    const fiber = currentlyRenderingFiber;\n    const readValue = () => {\n      if (!didUpgrade) {\n        // Only upgrade once. This works even inside the render phase because\n        // the update is added to a shared queue, which outlasts the\n        // in-progress render.\n        didUpgrade = true;\n        if (__DEV__) {\n          isUpdatingOpaqueValueInRenderPhase = true;\n          setId(makeId());\n          isUpdatingOpaqueValueInRenderPhase = false;\n          warnOnOpaqueIdentifierAccessInDEV(fiber);\n        } else {\n          setId(makeId());\n        }\n      }\n      invariant(\n        false,\n        'The object passed back from useOpaqueIdentifier is meant to be ' +\n          'passed through to attributes only. Do not read the value directly.',\n      );\n    };\n    const id = makeOpaqueHydratingObject(readValue);\n\n    const setId = mountState(id)[1];\n\n    if ((currentlyRenderingFiber.mode & ConcurrentMode) === NoMode) {\n      if (\n        __DEV__ &&\n        enableStrictEffects &&\n        (currentlyRenderingFiber.mode & StrictEffectsMode) === NoMode\n      ) {\n        currentlyRenderingFiber.flags |= MountPassiveDevEffect | PassiveEffect;\n      } else {\n        currentlyRenderingFiber.flags |= PassiveEffect;\n      }\n      pushEffect(\n        HookHasEffect | HookPassive,\n        () => {\n          setId(makeId());\n        },\n        undefined,\n        null,\n      );\n    }\n    return id;\n  } else {\n    const id = makeId();\n    mountState(id);\n    return id;\n  }\n}\n\nfunction updateOpaqueIdentifier(): OpaqueIDType | void {\n  const id = updateState(undefined)[0];\n  return id;\n}\n\nfunction rerenderOpaqueIdentifier(): OpaqueIDType | void {\n  const id = rerenderState(undefined)[0];\n  return id;\n}\n\nfunction mountRefresh() {\n  const hook = mountWorkInProgressHook();\n  const refresh = (hook.memoizedState = refreshCache.bind(\n    null,\n    currentlyRenderingFiber,\n  ));\n  return refresh;\n}\n\nfunction updateRefresh() {\n  const hook = updateWorkInProgressHook();\n  return hook.memoizedState;\n}\n\nfunction refreshCache<T>(fiber: Fiber, seedKey: ?() => T, seedValue: T) {\n  // TODO: Does Cache work in legacy mode? Should decide and write a test.\n  // TODO: Consider warning if the refresh is at discrete priority, or if we\n  // otherwise suspect that it wasn't batched properly.\n  let provider = fiber.return;\n  while (provider !== null) {\n    switch (provider.tag) {\n      case CacheComponent:\n      case HostRoot: {\n        const lane = requestUpdateLane(provider);\n        const eventTime = requestEventTime();\n        const root = scheduleUpdateOnFiber(provider, lane, eventTime);\n        if (root !== null) {\n          entangleTransitions(root, provider, lane);\n        }\n\n        const seededCache = new Map();\n        if (seedKey !== null && seedKey !== undefined && root !== null) {\n          // Seed the cache with the value passed by the caller. This could be\n          // from a server mutation, or it could be a streaming response.\n          seededCache.set(seedKey, seedValue);\n        }\n\n        // Schedule an update on the cache boundary to trigger a refresh.\n        const refreshUpdate = createUpdate(eventTime, lane);\n        const payload = {\n          cache: seededCache,\n        };\n        refreshUpdate.payload = payload;\n        enqueueUpdate(provider, refreshUpdate, lane);\n        return;\n      }\n    }\n    provider = provider.return;\n  }\n  // TODO: Warn if unmounted?\n}\n\nfunction dispatchAction<S, A>(\n  fiber: Fiber,\n  queue: UpdateQueue<S, A>,\n  action: A,\n) {\n  if (__DEV__) {\n    if (typeof arguments[3] === 'function') {\n      console.error(\n        \"State updates from the useState() and useReducer() Hooks don't support the \" +\n          'second callback argument. To execute a side effect after ' +\n          'rendering, declare it in the component body with useEffect().',\n      );\n    }\n  }\n\n  const eventTime = requestEventTime();\n  const lane = requestUpdateLane(fiber);\n\n  const update: Update<S, A> = {\n    lane,\n    action,\n    eagerReducer: null,\n    eagerState: null,\n    next: (null: any),\n  };\n\n  const alternate = fiber.alternate;\n  if (\n    fiber === currentlyRenderingFiber ||\n    (alternate !== null && alternate === currentlyRenderingFiber)\n  ) {\n    // This is a render phase update. Stash it in a lazily-created map of\n    // queue -> linked list of updates. After this render pass, we'll restart\n    // and apply the stashed updates on top of the work-in-progress hook.\n    didScheduleRenderPhaseUpdateDuringThisPass = didScheduleRenderPhaseUpdate = true;\n    const pending = queue.pending;\n    if (pending === null) {\n      // This is the first update. Create a circular list.\n      update.next = update;\n    } else {\n      update.next = pending.next;\n      pending.next = update;\n    }\n    queue.pending = update;\n  } else {\n    if (isInterleavedUpdate(fiber, lane)) {\n      const interleaved = queue.interleaved;\n      if (interleaved === null) {\n        // This is the first update. Create a circular list.\n        update.next = update;\n        // At the end of the current render, this queue's interleaved updates will\n        // be transferred to the pending queue.\n        pushInterleavedQueue(queue);\n      } else {\n        update.next = interleaved.next;\n        interleaved.next = update;\n      }\n      queue.interleaved = update;\n    } else {\n      const pending = queue.pending;\n      if (pending === null) {\n        // This is the first update. Create a circular list.\n        update.next = update;\n      } else {\n        update.next = pending.next;\n        pending.next = update;\n      }\n      queue.pending = update;\n    }\n\n    if (\n      fiber.lanes === NoLanes &&\n      (alternate === null || alternate.lanes === NoLanes)\n    ) {\n      // The queue is currently empty, which means we can eagerly compute the\n      // next state before entering the render phase. If the new state is the\n      // same as the current state, we may be able to bail out entirely.\n      const lastRenderedReducer = queue.lastRenderedReducer;\n      if (lastRenderedReducer !== null) {\n        let prevDispatcher;\n        if (__DEV__) {\n          prevDispatcher = ReactCurrentDispatcher.current;\n          ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\n        }\n        try {\n          const currentState: S = (queue.lastRenderedState: any);\n          const eagerState = lastRenderedReducer(currentState, action);\n          // Stash the eagerly computed state, and the reducer used to compute\n          // it, on the update object. If the reducer hasn't changed by the\n          // time we enter the render phase, then the eager state can be used\n          // without calling the reducer again.\n          update.eagerReducer = lastRenderedReducer;\n          update.eagerState = eagerState;\n          if (is(eagerState, currentState)) {\n            // Fast path. We can bail out without scheduling React to re-render.\n            // It's still possible that we'll need to rebase this update later,\n            // if the component re-renders for a different reason and by that\n            // time the reducer has changed.\n            return;\n          }\n        } catch (error) {\n          // Suppress the error. It will throw again in the render phase.\n        } finally {\n          if (__DEV__) {\n            ReactCurrentDispatcher.current = prevDispatcher;\n          }\n        }\n      }\n    }\n    if (__DEV__) {\n      // $FlowExpectedError - jest isn't a global, and isn't recognized outside of tests\n      if ('undefined' !== typeof jest) {\n        warnIfNotCurrentlyActingUpdatesInDev(fiber);\n      }\n    }\n    const root = scheduleUpdateOnFiber(fiber, lane, eventTime);\n\n    if (isTransitionLane(lane) && root !== null) {\n      let queueLanes = queue.lanes;\n\n      // If any entangled lanes are no longer pending on the root, then they\n      // must have finished. We can remove them from the shared queue, which\n      // represents a superset of the actually pending lanes. In some cases we\n      // may entangle more than we need to, but that's OK. In fact it's worse if\n      // we *don't* entangle when we should.\n      queueLanes = intersectLanes(queueLanes, root.pendingLanes);\n\n      // Entangle the new transition lane with the other transition lanes.\n      const newQueueLanes = mergeLanes(queueLanes, lane);\n      queue.lanes = newQueueLanes;\n      // Even if queue.lanes already include lane, we don't know for certain if\n      // the lane finished since the last time we entangled it. So we need to\n      // entangle it again, just to be sure.\n      markRootEntangled(root, newQueueLanes);\n    }\n  }\n\n  if (__DEV__) {\n    if (enableDebugTracing) {\n      if (fiber.mode & DebugTracingMode) {\n        const name = getComponentNameFromFiber(fiber) || 'Unknown';\n        logStateUpdateScheduled(name, lane, action);\n      }\n    }\n  }\n\n  if (enableSchedulingProfiler) {\n    markStateUpdateScheduled(fiber, lane);\n  }\n}\n\nfunction getCacheForType<T>(resourceType: () => T): T {\n  if (!enableCache) {\n    invariant(false, 'Not implemented.');\n  }\n  const cache: Cache = readContext(CacheContext);\n  let cacheForType: T | void = (cache.get(resourceType): any);\n  if (cacheForType === undefined) {\n    cacheForType = resourceType();\n    cache.set(resourceType, cacheForType);\n  }\n  return cacheForType;\n}\n\nexport const ContextOnlyDispatcher: Dispatcher = {\n  readContext,\n\n  useCallback: throwInvalidHookError,\n  useContext: throwInvalidHookError,\n  useEffect: throwInvalidHookError,\n  useImperativeHandle: throwInvalidHookError,\n  useLayoutEffect: throwInvalidHookError,\n  useMemo: throwInvalidHookError,\n  useReducer: throwInvalidHookError,\n  useRef: throwInvalidHookError,\n  useState: throwInvalidHookError,\n  useDebugValue: throwInvalidHookError,\n  useDeferredValue: throwInvalidHookError,\n  useTransition: throwInvalidHookError,\n  useMutableSource: throwInvalidHookError,\n  useSyncExternalStore: throwInvalidHookError,\n  useOpaqueIdentifier: throwInvalidHookError,\n\n  unstable_isNewReconciler: enableNewReconciler,\n};\nif (enableCache) {\n  (ContextOnlyDispatcher: Dispatcher).getCacheForType = getCacheForType;\n  (ContextOnlyDispatcher: Dispatcher).useCacheRefresh = throwInvalidHookError;\n}\n\nconst HooksDispatcherOnMount: Dispatcher = {\n  readContext,\n\n  useCallback: mountCallback,\n  useContext: readContext,\n  useEffect: mountEffect,\n  useImperativeHandle: mountImperativeHandle,\n  useLayoutEffect: mountLayoutEffect,\n  useMemo: mountMemo,\n  useReducer: mountReducer,\n  useRef: mountRef,\n  useState: mountState,\n  useDebugValue: mountDebugValue,\n  useDeferredValue: mountDeferredValue,\n  useTransition: mountTransition,\n  useMutableSource: mountMutableSource,\n  useSyncExternalStore: mountSyncExternalStore,\n  useOpaqueIdentifier: mountOpaqueIdentifier,\n\n  unstable_isNewReconciler: enableNewReconciler,\n};\nif (enableCache) {\n  (HooksDispatcherOnMount: Dispatcher).getCacheForType = getCacheForType;\n  (HooksDispatcherOnMount: Dispatcher).useCacheRefresh = mountRefresh;\n}\n\nconst HooksDispatcherOnUpdate: Dispatcher = {\n  readContext,\n\n  useCallback: updateCallback,\n  useContext: readContext,\n  useEffect: updateEffect,\n  useImperativeHandle: updateImperativeHandle,\n  useLayoutEffect: updateLayoutEffect,\n  useMemo: updateMemo,\n  useReducer: updateReducer,\n  useRef: updateRef,\n  useState: updateState,\n  useDebugValue: updateDebugValue,\n  useDeferredValue: updateDeferredValue,\n  useTransition: updateTransition,\n  useMutableSource: updateMutableSource,\n  useSyncExternalStore: updateSyncExternalStore,\n  useOpaqueIdentifier: updateOpaqueIdentifier,\n\n  unstable_isNewReconciler: enableNewReconciler,\n};\nif (enableCache) {\n  (HooksDispatcherOnUpdate: Dispatcher).getCacheForType = getCacheForType;\n  (HooksDispatcherOnUpdate: Dispatcher).useCacheRefresh = updateRefresh;\n}\n\nconst HooksDispatcherOnRerender: Dispatcher = {\n  readContext,\n\n  useCallback: updateCallback,\n  useContext: readContext,\n  useEffect: updateEffect,\n  useImperativeHandle: updateImperativeHandle,\n  useLayoutEffect: updateLayoutEffect,\n  useMemo: updateMemo,\n  useReducer: rerenderReducer,\n  useRef: updateRef,\n  useState: rerenderState,\n  useDebugValue: updateDebugValue,\n  useDeferredValue: rerenderDeferredValue,\n  useTransition: rerenderTransition,\n  useMutableSource: updateMutableSource,\n  useSyncExternalStore: mountSyncExternalStore,\n  useOpaqueIdentifier: rerenderOpaqueIdentifier,\n\n  unstable_isNewReconciler: enableNewReconciler,\n};\nif (enableCache) {\n  (HooksDispatcherOnRerender: Dispatcher).getCacheForType = getCacheForType;\n  (HooksDispatcherOnRerender: Dispatcher).useCacheRefresh = updateRefresh;\n}\n\nlet HooksDispatcherOnMountInDEV: Dispatcher | null = null;\nlet HooksDispatcherOnMountWithHookTypesInDEV: Dispatcher | null = null;\nlet HooksDispatcherOnUpdateInDEV: Dispatcher | null = null;\nlet HooksDispatcherOnRerenderInDEV: Dispatcher | null = null;\nlet InvalidNestedHooksDispatcherOnMountInDEV: Dispatcher | null = null;\nlet InvalidNestedHooksDispatcherOnUpdateInDEV: Dispatcher | null = null;\nlet InvalidNestedHooksDispatcherOnRerenderInDEV: Dispatcher | null = null;\n\nif (__DEV__) {\n  const warnInvalidContextAccess = () => {\n    console.error(\n      'Context can only be read while React is rendering. ' +\n        'In classes, you can read it in the render method or getDerivedStateFromProps. ' +\n        'In function components, you can read it directly in the function body, but not ' +\n        'inside Hooks like useReducer() or useMemo().',\n    );\n  };\n\n  const warnInvalidHookAccess = () => {\n    console.error(\n      'Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. ' +\n        'You can only call Hooks at the top level of your React function. ' +\n        'For more information, see ' +\n        'https://reactjs.org/link/rules-of-hooks',\n    );\n  };\n\n  HooksDispatcherOnMountInDEV = {\n    readContext<T>(context: ReactContext<T>): T {\n      return readContext(context);\n    },\n    useCallback<T>(callback: T, deps: Array<mixed> | void | null): T {\n      currentHookNameInDev = 'useCallback';\n      mountHookTypesDev();\n      checkDepsAreArrayDev(deps);\n      return mountCallback(callback, deps);\n    },\n    useContext<T>(context: ReactContext<T>): T {\n      currentHookNameInDev = 'useContext';\n      mountHookTypesDev();\n      return readContext(context);\n    },\n    useEffect(\n      create: () => (() => void) | void,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useEffect';\n      mountHookTypesDev();\n      checkDepsAreArrayDev(deps);\n      return mountEffect(create, deps);\n    },\n    useImperativeHandle<T>(\n      ref: {|current: T | null|} | ((inst: T | null) => mixed) | null | void,\n      create: () => T,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useImperativeHandle';\n      mountHookTypesDev();\n      checkDepsAreArrayDev(deps);\n      return mountImperativeHandle(ref, create, deps);\n    },\n    useLayoutEffect(\n      create: () => (() => void) | void,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useLayoutEffect';\n      mountHookTypesDev();\n      checkDepsAreArrayDev(deps);\n      return mountLayoutEffect(create, deps);\n    },\n    useMemo<T>(create: () => T, deps: Array<mixed> | void | null): T {\n      currentHookNameInDev = 'useMemo';\n      mountHookTypesDev();\n      checkDepsAreArrayDev(deps);\n      const prevDispatcher = ReactCurrentDispatcher.current;\n      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;\n      try {\n        return mountMemo(create, deps);\n      } finally {\n        ReactCurrentDispatcher.current = prevDispatcher;\n      }\n    },\n    useReducer<S, I, A>(\n      reducer: (S, A) => S,\n      initialArg: I,\n      init?: I => S,\n    ): [S, Dispatch<A>] {\n      currentHookNameInDev = 'useReducer';\n      mountHookTypesDev();\n      const prevDispatcher = ReactCurrentDispatcher.current;\n      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;\n      try {\n        return mountReducer(reducer, initialArg, init);\n      } finally {\n        ReactCurrentDispatcher.current = prevDispatcher;\n      }\n    },\n    useRef<T>(initialValue: T): {|current: T|} {\n      currentHookNameInDev = 'useRef';\n      mountHookTypesDev();\n      return mountRef(initialValue);\n    },\n    useState<S>(\n      initialState: (() => S) | S,\n    ): [S, Dispatch<BasicStateAction<S>>] {\n      currentHookNameInDev = 'useState';\n      mountHookTypesDev();\n      const prevDispatcher = ReactCurrentDispatcher.current;\n      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;\n      try {\n        return mountState(initialState);\n      } finally {\n        ReactCurrentDispatcher.current = prevDispatcher;\n      }\n    },\n    useDebugValue<T>(value: T, formatterFn: ?(value: T) => mixed): void {\n      currentHookNameInDev = 'useDebugValue';\n      mountHookTypesDev();\n      return mountDebugValue(value, formatterFn);\n    },\n    useDeferredValue<T>(value: T): T {\n      currentHookNameInDev = 'useDeferredValue';\n      mountHookTypesDev();\n      return mountDeferredValue(value);\n    },\n    useTransition(): [boolean, (() => void) => void] {\n      currentHookNameInDev = 'useTransition';\n      mountHookTypesDev();\n      return mountTransition();\n    },\n    useMutableSource<Source, Snapshot>(\n      source: MutableSource<Source>,\n      getSnapshot: MutableSourceGetSnapshotFn<Source, Snapshot>,\n      subscribe: MutableSourceSubscribeFn<Source, Snapshot>,\n    ): Snapshot {\n      currentHookNameInDev = 'useMutableSource';\n      mountHookTypesDev();\n      return mountMutableSource(source, getSnapshot, subscribe);\n    },\n    useSyncExternalStore<T>(\n      subscribe: (() => void) => () => void,\n      getSnapshot: () => T,\n    ): T {\n      currentHookNameInDev = 'useSyncExternalStore';\n      mountHookTypesDev();\n      return mountSyncExternalStore(subscribe, getSnapshot);\n    },\n    useOpaqueIdentifier(): OpaqueIDType | void {\n      currentHookNameInDev = 'useOpaqueIdentifier';\n      mountHookTypesDev();\n      return mountOpaqueIdentifier();\n    },\n\n    unstable_isNewReconciler: enableNewReconciler,\n  };\n  if (enableCache) {\n    (HooksDispatcherOnMountInDEV: Dispatcher).getCacheForType = getCacheForType;\n    (HooksDispatcherOnMountInDEV: Dispatcher).useCacheRefresh = function useCacheRefresh() {\n      currentHookNameInDev = 'useCacheRefresh';\n      mountHookTypesDev();\n      return mountRefresh();\n    };\n  }\n\n  HooksDispatcherOnMountWithHookTypesInDEV = {\n    readContext<T>(context: ReactContext<T>): T {\n      return readContext(context);\n    },\n    useCallback<T>(callback: T, deps: Array<mixed> | void | null): T {\n      currentHookNameInDev = 'useCallback';\n      updateHookTypesDev();\n      return mountCallback(callback, deps);\n    },\n    useContext<T>(context: ReactContext<T>): T {\n      currentHookNameInDev = 'useContext';\n      updateHookTypesDev();\n      return readContext(context);\n    },\n    useEffect(\n      create: () => (() => void) | void,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useEffect';\n      updateHookTypesDev();\n      return mountEffect(create, deps);\n    },\n    useImperativeHandle<T>(\n      ref: {|current: T | null|} | ((inst: T | null) => mixed) | null | void,\n      create: () => T,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useImperativeHandle';\n      updateHookTypesDev();\n      return mountImperativeHandle(ref, create, deps);\n    },\n    useLayoutEffect(\n      create: () => (() => void) | void,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useLayoutEffect';\n      updateHookTypesDev();\n      return mountLayoutEffect(create, deps);\n    },\n    useMemo<T>(create: () => T, deps: Array<mixed> | void | null): T {\n      currentHookNameInDev = 'useMemo';\n      updateHookTypesDev();\n      const prevDispatcher = ReactCurrentDispatcher.current;\n      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;\n      try {\n        return mountMemo(create, deps);\n      } finally {\n        ReactCurrentDispatcher.current = prevDispatcher;\n      }\n    },\n    useReducer<S, I, A>(\n      reducer: (S, A) => S,\n      initialArg: I,\n      init?: I => S,\n    ): [S, Dispatch<A>] {\n      currentHookNameInDev = 'useReducer';\n      updateHookTypesDev();\n      const prevDispatcher = ReactCurrentDispatcher.current;\n      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;\n      try {\n        return mountReducer(reducer, initialArg, init);\n      } finally {\n        ReactCurrentDispatcher.current = prevDispatcher;\n      }\n    },\n    useRef<T>(initialValue: T): {|current: T|} {\n      currentHookNameInDev = 'useRef';\n      updateHookTypesDev();\n      return mountRef(initialValue);\n    },\n    useState<S>(\n      initialState: (() => S) | S,\n    ): [S, Dispatch<BasicStateAction<S>>] {\n      currentHookNameInDev = 'useState';\n      updateHookTypesDev();\n      const prevDispatcher = ReactCurrentDispatcher.current;\n      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;\n      try {\n        return mountState(initialState);\n      } finally {\n        ReactCurrentDispatcher.current = prevDispatcher;\n      }\n    },\n    useDebugValue<T>(value: T, formatterFn: ?(value: T) => mixed): void {\n      currentHookNameInDev = 'useDebugValue';\n      updateHookTypesDev();\n      return mountDebugValue(value, formatterFn);\n    },\n    useDeferredValue<T>(value: T): T {\n      currentHookNameInDev = 'useDeferredValue';\n      updateHookTypesDev();\n      return mountDeferredValue(value);\n    },\n    useTransition(): [boolean, (() => void) => void] {\n      currentHookNameInDev = 'useTransition';\n      updateHookTypesDev();\n      return mountTransition();\n    },\n    useMutableSource<Source, Snapshot>(\n      source: MutableSource<Source>,\n      getSnapshot: MutableSourceGetSnapshotFn<Source, Snapshot>,\n      subscribe: MutableSourceSubscribeFn<Source, Snapshot>,\n    ): Snapshot {\n      currentHookNameInDev = 'useMutableSource';\n      updateHookTypesDev();\n      return mountMutableSource(source, getSnapshot, subscribe);\n    },\n    useSyncExternalStore<T>(\n      subscribe: (() => void) => () => void,\n      getSnapshot: () => T,\n    ): T {\n      currentHookNameInDev = 'useSyncExternalStore';\n      updateHookTypesDev();\n      return mountSyncExternalStore(subscribe, getSnapshot);\n    },\n    useOpaqueIdentifier(): OpaqueIDType | void {\n      currentHookNameInDev = 'useOpaqueIdentifier';\n      updateHookTypesDev();\n      return mountOpaqueIdentifier();\n    },\n\n    unstable_isNewReconciler: enableNewReconciler,\n  };\n  if (enableCache) {\n    (HooksDispatcherOnMountWithHookTypesInDEV: Dispatcher).getCacheForType = getCacheForType;\n    (HooksDispatcherOnMountWithHookTypesInDEV: Dispatcher).useCacheRefresh = function useCacheRefresh() {\n      currentHookNameInDev = 'useCacheRefresh';\n      updateHookTypesDev();\n      return mountRefresh();\n    };\n  }\n\n  HooksDispatcherOnUpdateInDEV = {\n    readContext<T>(context: ReactContext<T>): T {\n      return readContext(context);\n    },\n    useCallback<T>(callback: T, deps: Array<mixed> | void | null): T {\n      currentHookNameInDev = 'useCallback';\n      updateHookTypesDev();\n      return updateCallback(callback, deps);\n    },\n    useContext<T>(context: ReactContext<T>): T {\n      currentHookNameInDev = 'useContext';\n      updateHookTypesDev();\n      return readContext(context);\n    },\n    useEffect(\n      create: () => (() => void) | void,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useEffect';\n      updateHookTypesDev();\n      return updateEffect(create, deps);\n    },\n    useImperativeHandle<T>(\n      ref: {|current: T | null|} | ((inst: T | null) => mixed) | null | void,\n      create: () => T,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useImperativeHandle';\n      updateHookTypesDev();\n      return updateImperativeHandle(ref, create, deps);\n    },\n    useLayoutEffect(\n      create: () => (() => void) | void,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useLayoutEffect';\n      updateHookTypesDev();\n      return updateLayoutEffect(create, deps);\n    },\n    useMemo<T>(create: () => T, deps: Array<mixed> | void | null): T {\n      currentHookNameInDev = 'useMemo';\n      updateHookTypesDev();\n      const prevDispatcher = ReactCurrentDispatcher.current;\n      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\n      try {\n        return updateMemo(create, deps);\n      } finally {\n        ReactCurrentDispatcher.current = prevDispatcher;\n      }\n    },\n    useReducer<S, I, A>(\n      reducer: (S, A) => S,\n      initialArg: I,\n      init?: I => S,\n    ): [S, Dispatch<A>] {\n      currentHookNameInDev = 'useReducer';\n      updateHookTypesDev();\n      const prevDispatcher = ReactCurrentDispatcher.current;\n      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\n      try {\n        return updateReducer(reducer, initialArg, init);\n      } finally {\n        ReactCurrentDispatcher.current = prevDispatcher;\n      }\n    },\n    useRef<T>(initialValue: T): {|current: T|} {\n      currentHookNameInDev = 'useRef';\n      updateHookTypesDev();\n      return updateRef(initialValue);\n    },\n    useState<S>(\n      initialState: (() => S) | S,\n    ): [S, Dispatch<BasicStateAction<S>>] {\n      currentHookNameInDev = 'useState';\n      updateHookTypesDev();\n      const prevDispatcher = ReactCurrentDispatcher.current;\n      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\n      try {\n        return updateState(initialState);\n      } finally {\n        ReactCurrentDispatcher.current = prevDispatcher;\n      }\n    },\n    useDebugValue<T>(value: T, formatterFn: ?(value: T) => mixed): void {\n      currentHookNameInDev = 'useDebugValue';\n      updateHookTypesDev();\n      return updateDebugValue(value, formatterFn);\n    },\n    useDeferredValue<T>(value: T): T {\n      currentHookNameInDev = 'useDeferredValue';\n      updateHookTypesDev();\n      return updateDeferredValue(value);\n    },\n    useTransition(): [boolean, (() => void) => void] {\n      currentHookNameInDev = 'useTransition';\n      updateHookTypesDev();\n      return updateTransition();\n    },\n    useMutableSource<Source, Snapshot>(\n      source: MutableSource<Source>,\n      getSnapshot: MutableSourceGetSnapshotFn<Source, Snapshot>,\n      subscribe: MutableSourceSubscribeFn<Source, Snapshot>,\n    ): Snapshot {\n      currentHookNameInDev = 'useMutableSource';\n      updateHookTypesDev();\n      return updateMutableSource(source, getSnapshot, subscribe);\n    },\n    useSyncExternalStore<T>(\n      subscribe: (() => void) => () => void,\n      getSnapshot: () => T,\n    ): T {\n      currentHookNameInDev = 'useSyncExternalStore';\n      updateHookTypesDev();\n      return updateSyncExternalStore(subscribe, getSnapshot);\n    },\n    useOpaqueIdentifier(): OpaqueIDType | void {\n      currentHookNameInDev = 'useOpaqueIdentifier';\n      updateHookTypesDev();\n      return updateOpaqueIdentifier();\n    },\n\n    unstable_isNewReconciler: enableNewReconciler,\n  };\n  if (enableCache) {\n    (HooksDispatcherOnUpdateInDEV: Dispatcher).getCacheForType = getCacheForType;\n    (HooksDispatcherOnUpdateInDEV: Dispatcher).useCacheRefresh = function useCacheRefresh() {\n      currentHookNameInDev = 'useCacheRefresh';\n      updateHookTypesDev();\n      return updateRefresh();\n    };\n  }\n\n  HooksDispatcherOnRerenderInDEV = {\n    readContext<T>(context: ReactContext<T>): T {\n      return readContext(context);\n    },\n\n    useCallback<T>(callback: T, deps: Array<mixed> | void | null): T {\n      currentHookNameInDev = 'useCallback';\n      updateHookTypesDev();\n      return updateCallback(callback, deps);\n    },\n    useContext<T>(context: ReactContext<T>): T {\n      currentHookNameInDev = 'useContext';\n      updateHookTypesDev();\n      return readContext(context);\n    },\n    useEffect(\n      create: () => (() => void) | void,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useEffect';\n      updateHookTypesDev();\n      return updateEffect(create, deps);\n    },\n    useImperativeHandle<T>(\n      ref: {|current: T | null|} | ((inst: T | null) => mixed) | null | void,\n      create: () => T,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useImperativeHandle';\n      updateHookTypesDev();\n      return updateImperativeHandle(ref, create, deps);\n    },\n    useLayoutEffect(\n      create: () => (() => void) | void,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useLayoutEffect';\n      updateHookTypesDev();\n      return updateLayoutEffect(create, deps);\n    },\n    useMemo<T>(create: () => T, deps: Array<mixed> | void | null): T {\n      currentHookNameInDev = 'useMemo';\n      updateHookTypesDev();\n      const prevDispatcher = ReactCurrentDispatcher.current;\n      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnRerenderInDEV;\n      try {\n        return updateMemo(create, deps);\n      } finally {\n        ReactCurrentDispatcher.current = prevDispatcher;\n      }\n    },\n    useReducer<S, I, A>(\n      reducer: (S, A) => S,\n      initialArg: I,\n      init?: I => S,\n    ): [S, Dispatch<A>] {\n      currentHookNameInDev = 'useReducer';\n      updateHookTypesDev();\n      const prevDispatcher = ReactCurrentDispatcher.current;\n      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnRerenderInDEV;\n      try {\n        return rerenderReducer(reducer, initialArg, init);\n      } finally {\n        ReactCurrentDispatcher.current = prevDispatcher;\n      }\n    },\n    useRef<T>(initialValue: T): {|current: T|} {\n      currentHookNameInDev = 'useRef';\n      updateHookTypesDev();\n      return updateRef(initialValue);\n    },\n    useState<S>(\n      initialState: (() => S) | S,\n    ): [S, Dispatch<BasicStateAction<S>>] {\n      currentHookNameInDev = 'useState';\n      updateHookTypesDev();\n      const prevDispatcher = ReactCurrentDispatcher.current;\n      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnRerenderInDEV;\n      try {\n        return rerenderState(initialState);\n      } finally {\n        ReactCurrentDispatcher.current = prevDispatcher;\n      }\n    },\n    useDebugValue<T>(value: T, formatterFn: ?(value: T) => mixed): void {\n      currentHookNameInDev = 'useDebugValue';\n      updateHookTypesDev();\n      return updateDebugValue(value, formatterFn);\n    },\n    useDeferredValue<T>(value: T): T {\n      currentHookNameInDev = 'useDeferredValue';\n      updateHookTypesDev();\n      return rerenderDeferredValue(value);\n    },\n    useTransition(): [boolean, (() => void) => void] {\n      currentHookNameInDev = 'useTransition';\n      updateHookTypesDev();\n      return rerenderTransition();\n    },\n    useMutableSource<Source, Snapshot>(\n      source: MutableSource<Source>,\n      getSnapshot: MutableSourceGetSnapshotFn<Source, Snapshot>,\n      subscribe: MutableSourceSubscribeFn<Source, Snapshot>,\n    ): Snapshot {\n      currentHookNameInDev = 'useMutableSource';\n      updateHookTypesDev();\n      return updateMutableSource(source, getSnapshot, subscribe);\n    },\n    useSyncExternalStore<T>(\n      subscribe: (() => void) => () => void,\n      getSnapshot: () => T,\n    ): T {\n      currentHookNameInDev = 'useSyncExternalStore';\n      updateHookTypesDev();\n      return updateSyncExternalStore(subscribe, getSnapshot);\n    },\n    useOpaqueIdentifier(): OpaqueIDType | void {\n      currentHookNameInDev = 'useOpaqueIdentifier';\n      updateHookTypesDev();\n      return rerenderOpaqueIdentifier();\n    },\n\n    unstable_isNewReconciler: enableNewReconciler,\n  };\n  if (enableCache) {\n    (HooksDispatcherOnRerenderInDEV: Dispatcher).getCacheForType = getCacheForType;\n    (HooksDispatcherOnRerenderInDEV: Dispatcher).useCacheRefresh = function useCacheRefresh() {\n      currentHookNameInDev = 'useCacheRefresh';\n      updateHookTypesDev();\n      return updateRefresh();\n    };\n  }\n\n  InvalidNestedHooksDispatcherOnMountInDEV = {\n    readContext<T>(context: ReactContext<T>): T {\n      warnInvalidContextAccess();\n      return readContext(context);\n    },\n    useCallback<T>(callback: T, deps: Array<mixed> | void | null): T {\n      currentHookNameInDev = 'useCallback';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      return mountCallback(callback, deps);\n    },\n    useContext<T>(context: ReactContext<T>): T {\n      currentHookNameInDev = 'useContext';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      return readContext(context);\n    },\n    useEffect(\n      create: () => (() => void) | void,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useEffect';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      return mountEffect(create, deps);\n    },\n    useImperativeHandle<T>(\n      ref: {|current: T | null|} | ((inst: T | null) => mixed) | null | void,\n      create: () => T,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useImperativeHandle';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      return mountImperativeHandle(ref, create, deps);\n    },\n    useLayoutEffect(\n      create: () => (() => void) | void,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useLayoutEffect';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      return mountLayoutEffect(create, deps);\n    },\n    useMemo<T>(create: () => T, deps: Array<mixed> | void | null): T {\n      currentHookNameInDev = 'useMemo';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      const prevDispatcher = ReactCurrentDispatcher.current;\n      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;\n      try {\n        return mountMemo(create, deps);\n      } finally {\n        ReactCurrentDispatcher.current = prevDispatcher;\n      }\n    },\n    useReducer<S, I, A>(\n      reducer: (S, A) => S,\n      initialArg: I,\n      init?: I => S,\n    ): [S, Dispatch<A>] {\n      currentHookNameInDev = 'useReducer';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      const prevDispatcher = ReactCurrentDispatcher.current;\n      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;\n      try {\n        return mountReducer(reducer, initialArg, init);\n      } finally {\n        ReactCurrentDispatcher.current = prevDispatcher;\n      }\n    },\n    useRef<T>(initialValue: T): {|current: T|} {\n      currentHookNameInDev = 'useRef';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      return mountRef(initialValue);\n    },\n    useState<S>(\n      initialState: (() => S) | S,\n    ): [S, Dispatch<BasicStateAction<S>>] {\n      currentHookNameInDev = 'useState';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      const prevDispatcher = ReactCurrentDispatcher.current;\n      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;\n      try {\n        return mountState(initialState);\n      } finally {\n        ReactCurrentDispatcher.current = prevDispatcher;\n      }\n    },\n    useDebugValue<T>(value: T, formatterFn: ?(value: T) => mixed): void {\n      currentHookNameInDev = 'useDebugValue';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      return mountDebugValue(value, formatterFn);\n    },\n    useDeferredValue<T>(value: T): T {\n      currentHookNameInDev = 'useDeferredValue';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      return mountDeferredValue(value);\n    },\n    useTransition(): [boolean, (() => void) => void] {\n      currentHookNameInDev = 'useTransition';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      return mountTransition();\n    },\n    useMutableSource<Source, Snapshot>(\n      source: MutableSource<Source>,\n      getSnapshot: MutableSourceGetSnapshotFn<Source, Snapshot>,\n      subscribe: MutableSourceSubscribeFn<Source, Snapshot>,\n    ): Snapshot {\n      currentHookNameInDev = 'useMutableSource';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      return mountMutableSource(source, getSnapshot, subscribe);\n    },\n    useSyncExternalStore<T>(\n      subscribe: (() => void) => () => void,\n      getSnapshot: () => T,\n    ): T {\n      currentHookNameInDev = 'useSyncExternalStore';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      return mountSyncExternalStore(subscribe, getSnapshot);\n    },\n    useOpaqueIdentifier(): OpaqueIDType | void {\n      currentHookNameInDev = 'useOpaqueIdentifier';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      return mountOpaqueIdentifier();\n    },\n\n    unstable_isNewReconciler: enableNewReconciler,\n  };\n  if (enableCache) {\n    (InvalidNestedHooksDispatcherOnMountInDEV: Dispatcher).getCacheForType = getCacheForType;\n    (InvalidNestedHooksDispatcherOnMountInDEV: Dispatcher).useCacheRefresh = function useCacheRefresh() {\n      currentHookNameInDev = 'useCacheRefresh';\n      updateHookTypesDev();\n      return mountRefresh();\n    };\n  }\n\n  InvalidNestedHooksDispatcherOnUpdateInDEV = {\n    readContext<T>(context: ReactContext<T>): T {\n      warnInvalidContextAccess();\n      return readContext(context);\n    },\n    useCallback<T>(callback: T, deps: Array<mixed> | void | null): T {\n      currentHookNameInDev = 'useCallback';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateCallback(callback, deps);\n    },\n    useContext<T>(context: ReactContext<T>): T {\n      currentHookNameInDev = 'useContext';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return readContext(context);\n    },\n    useEffect(\n      create: () => (() => void) | void,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useEffect';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateEffect(create, deps);\n    },\n    useImperativeHandle<T>(\n      ref: {|current: T | null|} | ((inst: T | null) => mixed) | null | void,\n      create: () => T,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useImperativeHandle';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateImperativeHandle(ref, create, deps);\n    },\n    useLayoutEffect(\n      create: () => (() => void) | void,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useLayoutEffect';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateLayoutEffect(create, deps);\n    },\n    useMemo<T>(create: () => T, deps: Array<mixed> | void | null): T {\n      currentHookNameInDev = 'useMemo';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      const prevDispatcher = ReactCurrentDispatcher.current;\n      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\n      try {\n        return updateMemo(create, deps);\n      } finally {\n        ReactCurrentDispatcher.current = prevDispatcher;\n      }\n    },\n    useReducer<S, I, A>(\n      reducer: (S, A) => S,\n      initialArg: I,\n      init?: I => S,\n    ): [S, Dispatch<A>] {\n      currentHookNameInDev = 'useReducer';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      const prevDispatcher = ReactCurrentDispatcher.current;\n      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\n      try {\n        return updateReducer(reducer, initialArg, init);\n      } finally {\n        ReactCurrentDispatcher.current = prevDispatcher;\n      }\n    },\n    useRef<T>(initialValue: T): {|current: T|} {\n      currentHookNameInDev = 'useRef';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateRef(initialValue);\n    },\n    useState<S>(\n      initialState: (() => S) | S,\n    ): [S, Dispatch<BasicStateAction<S>>] {\n      currentHookNameInDev = 'useState';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      const prevDispatcher = ReactCurrentDispatcher.current;\n      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\n      try {\n        return updateState(initialState);\n      } finally {\n        ReactCurrentDispatcher.current = prevDispatcher;\n      }\n    },\n    useDebugValue<T>(value: T, formatterFn: ?(value: T) => mixed): void {\n      currentHookNameInDev = 'useDebugValue';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateDebugValue(value, formatterFn);\n    },\n    useDeferredValue<T>(value: T): T {\n      currentHookNameInDev = 'useDeferredValue';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateDeferredValue(value);\n    },\n    useTransition(): [boolean, (() => void) => void] {\n      currentHookNameInDev = 'useTransition';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateTransition();\n    },\n    useMutableSource<Source, Snapshot>(\n      source: MutableSource<Source>,\n      getSnapshot: MutableSourceGetSnapshotFn<Source, Snapshot>,\n      subscribe: MutableSourceSubscribeFn<Source, Snapshot>,\n    ): Snapshot {\n      currentHookNameInDev = 'useMutableSource';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateMutableSource(source, getSnapshot, subscribe);\n    },\n    useSyncExternalStore<T>(\n      subscribe: (() => void) => () => void,\n      getSnapshot: () => T,\n    ): T {\n      currentHookNameInDev = 'useSyncExternalStore';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateSyncExternalStore(subscribe, getSnapshot);\n    },\n    useOpaqueIdentifier(): OpaqueIDType | void {\n      currentHookNameInDev = 'useOpaqueIdentifier';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateOpaqueIdentifier();\n    },\n\n    unstable_isNewReconciler: enableNewReconciler,\n  };\n  if (enableCache) {\n    (InvalidNestedHooksDispatcherOnUpdateInDEV: Dispatcher).getCacheForType = getCacheForType;\n    (InvalidNestedHooksDispatcherOnUpdateInDEV: Dispatcher).useCacheRefresh = function useCacheRefresh() {\n      currentHookNameInDev = 'useCacheRefresh';\n      updateHookTypesDev();\n      return updateRefresh();\n    };\n  }\n\n  InvalidNestedHooksDispatcherOnRerenderInDEV = {\n    readContext<T>(context: ReactContext<T>): T {\n      warnInvalidContextAccess();\n      return readContext(context);\n    },\n\n    useCallback<T>(callback: T, deps: Array<mixed> | void | null): T {\n      currentHookNameInDev = 'useCallback';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateCallback(callback, deps);\n    },\n    useContext<T>(context: ReactContext<T>): T {\n      currentHookNameInDev = 'useContext';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return readContext(context);\n    },\n    useEffect(\n      create: () => (() => void) | void,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useEffect';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateEffect(create, deps);\n    },\n    useImperativeHandle<T>(\n      ref: {|current: T | null|} | ((inst: T | null) => mixed) | null | void,\n      create: () => T,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useImperativeHandle';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateImperativeHandle(ref, create, deps);\n    },\n    useLayoutEffect(\n      create: () => (() => void) | void,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useLayoutEffect';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateLayoutEffect(create, deps);\n    },\n    useMemo<T>(create: () => T, deps: Array<mixed> | void | null): T {\n      currentHookNameInDev = 'useMemo';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      const prevDispatcher = ReactCurrentDispatcher.current;\n      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\n      try {\n        return updateMemo(create, deps);\n      } finally {\n        ReactCurrentDispatcher.current = prevDispatcher;\n      }\n    },\n    useReducer<S, I, A>(\n      reducer: (S, A) => S,\n      initialArg: I,\n      init?: I => S,\n    ): [S, Dispatch<A>] {\n      currentHookNameInDev = 'useReducer';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      const prevDispatcher = ReactCurrentDispatcher.current;\n      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\n      try {\n        return rerenderReducer(reducer, initialArg, init);\n      } finally {\n        ReactCurrentDispatcher.current = prevDispatcher;\n      }\n    },\n    useRef<T>(initialValue: T): {|current: T|} {\n      currentHookNameInDev = 'useRef';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateRef(initialValue);\n    },\n    useState<S>(\n      initialState: (() => S) | S,\n    ): [S, Dispatch<BasicStateAction<S>>] {\n      currentHookNameInDev = 'useState';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      const prevDispatcher = ReactCurrentDispatcher.current;\n      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\n      try {\n        return rerenderState(initialState);\n      } finally {\n        ReactCurrentDispatcher.current = prevDispatcher;\n      }\n    },\n    useDebugValue<T>(value: T, formatterFn: ?(value: T) => mixed): void {\n      currentHookNameInDev = 'useDebugValue';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateDebugValue(value, formatterFn);\n    },\n    useDeferredValue<T>(value: T): T {\n      currentHookNameInDev = 'useDeferredValue';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return rerenderDeferredValue(value);\n    },\n    useTransition(): [boolean, (() => void) => void] {\n      currentHookNameInDev = 'useTransition';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return rerenderTransition();\n    },\n    useMutableSource<Source, Snapshot>(\n      source: MutableSource<Source>,\n      getSnapshot: MutableSourceGetSnapshotFn<Source, Snapshot>,\n      subscribe: MutableSourceSubscribeFn<Source, Snapshot>,\n    ): Snapshot {\n      currentHookNameInDev = 'useMutableSource';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateMutableSource(source, getSnapshot, subscribe);\n    },\n    useSyncExternalStore<T>(\n      subscribe: (() => void) => () => void,\n      getSnapshot: () => T,\n    ): T {\n      currentHookNameInDev = 'useSyncExternalStore';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateSyncExternalStore(subscribe, getSnapshot);\n    },\n    useOpaqueIdentifier(): OpaqueIDType | void {\n      currentHookNameInDev = 'useOpaqueIdentifier';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return rerenderOpaqueIdentifier();\n    },\n\n    unstable_isNewReconciler: enableNewReconciler,\n  };\n  if (enableCache) {\n    (InvalidNestedHooksDispatcherOnRerenderInDEV: Dispatcher).getCacheForType = getCacheForType;\n    (InvalidNestedHooksDispatcherOnRerenderInDEV: Dispatcher).useCacheRefresh = function useCacheRefresh() {\n      currentHookNameInDev = 'useCacheRefresh';\n      updateHookTypesDev();\n      return updateRefresh();\n    };\n  }\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Fiber} from './ReactInternalTypes';\n\nimport {\n  enableProfilerCommitHooks,\n  enableProfilerNestedUpdatePhase,\n  enableProfilerTimer,\n} from 'shared/ReactFeatureFlags';\nimport {HostRoot, Profiler} from './ReactWorkTags';\n\n// Intentionally not named imports because Rollup would use dynamic dispatch for\n// CommonJS interop named imports.\nimport * as Scheduler from 'scheduler';\n\nconst {unstable_now: now} = Scheduler;\n\nexport type ProfilerTimer = {\n  getCommitTime(): number,\n  isCurrentUpdateNested(): boolean,\n  markNestedUpdateScheduled(): void,\n  recordCommitTime(): void,\n  startProfilerTimer(fiber: Fiber): void,\n  stopProfilerTimerIfRunning(fiber: Fiber): void,\n  stopProfilerTimerIfRunningAndRecordDelta(fiber: Fiber): void,\n  syncNestedUpdateFlag(): void,\n  ...\n};\n\nlet commitTime: number = 0;\nlet layoutEffectStartTime: number = -1;\nlet profilerStartTime: number = -1;\nlet passiveEffectStartTime: number = -1;\n\n/**\n * Tracks whether the current update was a nested/cascading update (scheduled from a layout effect).\n *\n * The overall sequence is:\n *   1. render\n *   2. commit (and call `onRender`, `onCommit`)\n *   3. check for nested updates\n *   4. flush passive effects (and call `onPostCommit`)\n *\n * Nested updates are identified in step 3 above,\n * but step 4 still applies to the work that was just committed.\n * We use two flags to track nested updates then:\n * one tracks whether the upcoming update is a nested update,\n * and the other tracks whether the current update was a nested update.\n * The first value gets synced to the second at the start of the render phase.\n */\nlet currentUpdateIsNested: boolean = false;\nlet nestedUpdateScheduled: boolean = false;\n\nfunction isCurrentUpdateNested(): boolean {\n  return currentUpdateIsNested;\n}\n\nfunction markNestedUpdateScheduled(): void {\n  if (enableProfilerNestedUpdatePhase) {\n    nestedUpdateScheduled = true;\n  }\n}\n\nfunction resetNestedUpdateFlag(): void {\n  if (enableProfilerNestedUpdatePhase) {\n    currentUpdateIsNested = false;\n    nestedUpdateScheduled = false;\n  }\n}\n\nfunction syncNestedUpdateFlag(): void {\n  if (enableProfilerNestedUpdatePhase) {\n    currentUpdateIsNested = nestedUpdateScheduled;\n    nestedUpdateScheduled = false;\n  }\n}\n\nfunction getCommitTime(): number {\n  return commitTime;\n}\n\nfunction recordCommitTime(): void {\n  if (!enableProfilerTimer) {\n    return;\n  }\n  commitTime = now();\n}\n\nfunction startProfilerTimer(fiber: Fiber): void {\n  if (!enableProfilerTimer) {\n    return;\n  }\n\n  profilerStartTime = now();\n\n  if (((fiber.actualStartTime: any): number) < 0) {\n    fiber.actualStartTime = now();\n  }\n}\n\nfunction stopProfilerTimerIfRunning(fiber: Fiber): void {\n  if (!enableProfilerTimer) {\n    return;\n  }\n  profilerStartTime = -1;\n}\n\nfunction stopProfilerTimerIfRunningAndRecordDelta(\n  fiber: Fiber,\n  overrideBaseTime: boolean,\n): void {\n  if (!enableProfilerTimer) {\n    return;\n  }\n\n  if (profilerStartTime >= 0) {\n    const elapsedTime = now() - profilerStartTime;\n    fiber.actualDuration += elapsedTime;\n    if (overrideBaseTime) {\n      fiber.selfBaseDuration = elapsedTime;\n    }\n    profilerStartTime = -1;\n  }\n}\n\nfunction recordLayoutEffectDuration(fiber: Fiber): void {\n  if (!enableProfilerTimer || !enableProfilerCommitHooks) {\n    return;\n  }\n\n  if (layoutEffectStartTime >= 0) {\n    const elapsedTime = now() - layoutEffectStartTime;\n\n    layoutEffectStartTime = -1;\n\n    // Store duration on the next nearest Profiler ancestor\n    // Or the root (for the DevTools Profiler to read)\n    let parentFiber = fiber.return;\n    while (parentFiber !== null) {\n      switch (parentFiber.tag) {\n        case HostRoot:\n          const root = parentFiber.stateNode;\n          root.effectDuration += elapsedTime;\n          return;\n        case Profiler:\n          const parentStateNode = parentFiber.stateNode;\n          parentStateNode.effectDuration += elapsedTime;\n          return;\n      }\n      parentFiber = parentFiber.return;\n    }\n  }\n}\n\nfunction recordPassiveEffectDuration(fiber: Fiber): void {\n  if (!enableProfilerTimer || !enableProfilerCommitHooks) {\n    return;\n  }\n\n  if (passiveEffectStartTime >= 0) {\n    const elapsedTime = now() - passiveEffectStartTime;\n\n    passiveEffectStartTime = -1;\n\n    // Store duration on the next nearest Profiler ancestor\n    // Or the root (for the DevTools Profiler to read)\n    let parentFiber = fiber.return;\n    while (parentFiber !== null) {\n      switch (parentFiber.tag) {\n        case HostRoot:\n          const root = parentFiber.stateNode;\n          if (root !== null) {\n            root.passiveEffectDuration += elapsedTime;\n          }\n          return;\n        case Profiler:\n          const parentStateNode = parentFiber.stateNode;\n          if (parentStateNode !== null) {\n            // Detached fibers have their state node cleared out.\n            // In this case, the return pointer is also cleared out,\n            // so we won't be able to report the time spent in this Profiler's subtree.\n            parentStateNode.passiveEffectDuration += elapsedTime;\n          }\n          return;\n      }\n      parentFiber = parentFiber.return;\n    }\n  }\n}\n\nfunction startLayoutEffectTimer(): void {\n  if (!enableProfilerTimer || !enableProfilerCommitHooks) {\n    return;\n  }\n  layoutEffectStartTime = now();\n}\n\nfunction startPassiveEffectTimer(): void {\n  if (!enableProfilerTimer || !enableProfilerCommitHooks) {\n    return;\n  }\n  passiveEffectStartTime = now();\n}\n\nfunction transferActualDuration(fiber: Fiber): void {\n  // Transfer time spent rendering these children so we don't lose it\n  // after we rerender. This is used as a helper in special cases\n  // where we should count the work of multiple passes.\n  let child = fiber.child;\n  while (child) {\n    fiber.actualDuration += child.actualDuration;\n    child = child.sibling;\n  }\n}\n\nexport {\n  getCommitTime,\n  isCurrentUpdateNested,\n  markNestedUpdateScheduled,\n  recordCommitTime,\n  recordLayoutEffectDuration,\n  recordPassiveEffectDuration,\n  resetNestedUpdateFlag,\n  startLayoutEffectTimer,\n  startPassiveEffectTimer,\n  startProfilerTimer,\n  stopProfilerTimerIfRunning,\n  stopProfilerTimerIfRunningAndRecordDelta,\n  syncNestedUpdateFlag,\n  transferActualDuration,\n};\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Fiber} from './ReactInternalTypes';\n\nimport {getStackByFiberInDevAndProd} from './ReactFiberComponentStack';\n\nexport type CapturedValue<T> = {|\n  value: T,\n  source: Fiber | null,\n  stack: string | null,\n|};\n\nexport function createCapturedValue<T>(\n  value: T,\n  source: Fiber,\n): CapturedValue<T> {\n  // If the value is an error, call this function immediately after it is thrown\n  // so the stack is accurate.\n  return {\n    value,\n    source,\n    stack: getStackByFiberInDevAndProd(source),\n  };\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Fiber} from './ReactInternalTypes';\nimport type {CapturedValue} from './ReactCapturedValue';\n\n// This module is forked in different environments.\n// By default, return `true` to log errors to the console.\n// Forks can return `false` if this isn't desirable.\n\nexport function showErrorDialog(\n  boundary: Fiber,\n  errorInfo: CapturedValue<mixed>,\n): boolean {\n  return true;\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Fiber} from './ReactInternalTypes';\nimport type {CapturedValue} from './ReactCapturedValue';\n\nimport {showErrorDialog} from './ReactFiberErrorDialog';\nimport {ClassComponent} from './ReactWorkTags';\nimport getComponentNameFromFiber from 'react-reconciler/src/getComponentNameFromFiber';\nimport {HostRoot} from 'react-reconciler/src/ReactWorkTags';\n\nexport function logCapturedError(\n  boundary: Fiber,\n  errorInfo: CapturedValue<mixed>,\n): void {\n  try {\n    const logError = showErrorDialog(boundary, errorInfo);\n\n    // Allow injected showErrorDialog() to prevent default console.error logging.\n    // This enables renderers like ReactNative to better manage redbox behavior.\n    if (logError === false) {\n      return;\n    }\n\n    const error = (errorInfo.value: any);\n    if (__DEV__) {\n      const source = errorInfo.source;\n      const stack = errorInfo.stack;\n      const componentStack = stack !== null ? stack : '';\n      // Browsers support silencing uncaught errors by calling\n      // `preventDefault()` in window `error` handler.\n      // We record this information as an expando on the error.\n      if (error != null && error._suppressLogging) {\n        if (boundary.tag === ClassComponent) {\n          // The error is recoverable and was silenced.\n          // Ignore it and don't print the stack addendum.\n          // This is handy for testing error boundaries without noise.\n          return;\n        }\n        // The error is fatal. Since the silencing might have\n        // been accidental, we'll surface it anyway.\n        // However, the browser would have silenced the original error\n        // so we'll print it first, and then print the stack addendum.\n        console['error'](error); // Don't transform to our wrapper\n        // For a more detailed description of this block, see:\n        // https://github.com/facebook/react/pull/13384\n      }\n\n      const componentName = source ? getComponentNameFromFiber(source) : null;\n      const componentNameMessage = componentName\n        ? `The above error occurred in the <${componentName}> component:`\n        : 'The above error occurred in one of your React components:';\n\n      let errorBoundaryMessage;\n      if (boundary.tag === HostRoot) {\n        errorBoundaryMessage =\n          'Consider adding an error boundary to your tree to customize error handling behavior.\\n' +\n          'Visit https://reactjs.org/link/error-boundaries to learn more about error boundaries.';\n      } else {\n        const errorBoundaryName =\n          getComponentNameFromFiber(boundary) || 'Anonymous';\n        errorBoundaryMessage =\n          `React will try to recreate this component tree from scratch ` +\n          `using the error boundary you provided, ${errorBoundaryName}.`;\n      }\n      const combinedMessage =\n        `${componentNameMessage}\\n${componentStack}\\n\\n` +\n        `${errorBoundaryMessage}`;\n\n      // In development, we provide our own message with just the component stack.\n      // We don't include the original error message and JS stack because the browser\n      // has already printed it. Even if the application swallows the error, it is still\n      // displayed by the browser thanks to the DEV-only fake event trick in ReactErrorUtils.\n      console['error'](combinedMessage); // Don't transform to our wrapper\n    } else {\n      // In production, we print the error directly.\n      // This will include the message, the JS stack, and anything the browser wants to show.\n      // We pass the error object instead of custom message so that the browser displays the error natively.\n      console['error'](error); // Don't transform to our wrapper\n    }\n  } catch (e) {\n    // This method must not throw, or React internal state will get messed up.\n    // If console.error is overridden, or logCapturedError() shows a dialog that throws,\n    // we want to report this error outside of the normal stack as a last resort.\n    // https://github.com/facebook/react/issues/13188\n    setTimeout(() => {\n      throw e;\n    });\n  }\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Fiber} from './ReactInternalTypes';\nimport type {FiberRoot} from './ReactInternalTypes';\nimport type {Lane, Lanes} from './ReactFiberLane.old';\nimport type {CapturedValue} from './ReactCapturedValue';\nimport type {Update} from './ReactUpdateQueue.old';\nimport type {Wakeable} from 'shared/ReactTypes';\nimport type {SuspenseContext} from './ReactFiberSuspenseContext.old';\n\nimport getComponentNameFromFiber from 'react-reconciler/src/getComponentNameFromFiber';\nimport {\n  ClassComponent,\n  HostRoot,\n  SuspenseComponent,\n  IncompleteClassComponent,\n  FunctionComponent,\n  ForwardRef,\n  SimpleMemoComponent,\n} from './ReactWorkTags';\nimport {\n  DidCapture,\n  Incomplete,\n  NoFlags,\n  ShouldCapture,\n  LifecycleEffectMask,\n  ForceUpdateForLegacySuspense,\n} from './ReactFiberFlags';\nimport {\n  supportsPersistence,\n  getOffscreenContainerProps,\n} from './ReactFiberHostConfig';\nimport {shouldCaptureSuspense} from './ReactFiberSuspenseComponent.old';\nimport {NoMode, ConcurrentMode, DebugTracingMode} from './ReactTypeOfMode';\nimport {\n  enableDebugTracing,\n  enableSchedulingProfiler,\n  enableLazyContextPropagation,\n  enableUpdaterTracking,\n  enablePersistentOffscreenHostContainer,\n} from 'shared/ReactFeatureFlags';\nimport {createCapturedValue} from './ReactCapturedValue';\nimport {\n  enqueueCapturedUpdate,\n  createUpdate,\n  CaptureUpdate,\n  ForceUpdate,\n  enqueueUpdate,\n} from './ReactUpdateQueue.old';\nimport {markFailedErrorBoundaryForHotReloading} from './ReactFiberHotReloading.old';\nimport {\n  suspenseStackCursor,\n  InvisibleParentSuspenseContext,\n  hasSuspenseContext,\n} from './ReactFiberSuspenseContext.old';\nimport {\n  renderDidError,\n  onUncaughtError,\n  markLegacyErrorBoundaryAsFailed,\n  isAlreadyFailedLegacyErrorBoundary,\n  pingSuspendedRoot,\n  restorePendingUpdaters,\n} from './ReactFiberWorkLoop.old';\nimport {propagateParentContextChangesToDeferredTree} from './ReactFiberNewContext.old';\nimport {logCapturedError} from './ReactFiberErrorLogger';\nimport {logComponentSuspended} from './DebugTracing';\nimport {\n  markComponentRenderStopped,\n  markComponentSuspended,\n} from './SchedulingProfiler';\nimport {isDevToolsPresent} from './ReactFiberDevToolsHook.old';\nimport {\n  SyncLane,\n  NoTimestamp,\n  includesSomeLane,\n  mergeLanes,\n  pickArbitraryLane,\n} from './ReactFiberLane.old';\n\nconst PossiblyWeakMap = typeof WeakMap === 'function' ? WeakMap : Map;\n\nfunction createRootErrorUpdate(\n  fiber: Fiber,\n  errorInfo: CapturedValue<mixed>,\n  lane: Lane,\n): Update<mixed> {\n  const update = createUpdate(NoTimestamp, lane);\n  // Unmount the root by rendering null.\n  update.tag = CaptureUpdate;\n  // Caution: React DevTools currently depends on this property\n  // being called \"element\".\n  update.payload = {element: null};\n  const error = errorInfo.value;\n  update.callback = () => {\n    onUncaughtError(error);\n    logCapturedError(fiber, errorInfo);\n  };\n  return update;\n}\n\nfunction createClassErrorUpdate(\n  fiber: Fiber,\n  errorInfo: CapturedValue<mixed>,\n  lane: Lane,\n): Update<mixed> {\n  const update = createUpdate(NoTimestamp, lane);\n  update.tag = CaptureUpdate;\n  const getDerivedStateFromError = fiber.type.getDerivedStateFromError;\n  if (typeof getDerivedStateFromError === 'function') {\n    const error = errorInfo.value;\n    update.payload = () => {\n      return getDerivedStateFromError(error);\n    };\n    update.callback = () => {\n      if (__DEV__) {\n        markFailedErrorBoundaryForHotReloading(fiber);\n      }\n      logCapturedError(fiber, errorInfo);\n    };\n  }\n\n  const inst = fiber.stateNode;\n  if (inst !== null && typeof inst.componentDidCatch === 'function') {\n    update.callback = function callback() {\n      if (__DEV__) {\n        markFailedErrorBoundaryForHotReloading(fiber);\n      }\n      logCapturedError(fiber, errorInfo);\n      if (typeof getDerivedStateFromError !== 'function') {\n        // To preserve the preexisting retry behavior of error boundaries,\n        // we keep track of which ones already failed during this batch.\n        // This gets reset before we yield back to the browser.\n        // TODO: Warn in strict mode if getDerivedStateFromError is\n        // not defined.\n        markLegacyErrorBoundaryAsFailed(this);\n      }\n      const error = errorInfo.value;\n      const stack = errorInfo.stack;\n      this.componentDidCatch(error, {\n        componentStack: stack !== null ? stack : '',\n      });\n      if (__DEV__) {\n        if (typeof getDerivedStateFromError !== 'function') {\n          // If componentDidCatch is the only error boundary method defined,\n          // then it needs to call setState to recover from errors.\n          // If no state update is scheduled then the boundary will swallow the error.\n          if (!includesSomeLane(fiber.lanes, (SyncLane: Lane))) {\n            console.error(\n              '%s: Error boundaries should implement getDerivedStateFromError(). ' +\n                'In that method, return a state update to display an error message or fallback UI.',\n              getComponentNameFromFiber(fiber) || 'Unknown',\n            );\n          }\n        }\n      }\n    };\n  }\n  return update;\n}\n\nfunction attachPingListener(root: FiberRoot, wakeable: Wakeable, lanes: Lanes) {\n  // Attach a listener to the promise to \"ping\" the root and retry. But only if\n  // one does not already exist for the lanes we're currently rendering (which\n  // acts like a \"thread ID\" here).\n  let pingCache = root.pingCache;\n  let threadIDs;\n  if (pingCache === null) {\n    pingCache = root.pingCache = new PossiblyWeakMap();\n    threadIDs = new Set();\n    pingCache.set(wakeable, threadIDs);\n  } else {\n    threadIDs = pingCache.get(wakeable);\n    if (threadIDs === undefined) {\n      threadIDs = new Set();\n      pingCache.set(wakeable, threadIDs);\n    }\n  }\n  if (!threadIDs.has(lanes)) {\n    // Memoize using the thread ID to prevent redundant listeners.\n    threadIDs.add(lanes);\n    const ping = pingSuspendedRoot.bind(null, root, wakeable, lanes);\n    if (enableUpdaterTracking) {\n      if (isDevToolsPresent) {\n        // If we have pending work still, restore the original updaters\n        restorePendingUpdaters(root, lanes);\n      }\n    }\n    wakeable.then(ping, ping);\n  }\n}\n\nfunction throwException(\n  root: FiberRoot,\n  returnFiber: Fiber,\n  sourceFiber: Fiber,\n  value: mixed,\n  rootRenderLanes: Lanes,\n) {\n  // The source fiber did not complete.\n  sourceFiber.flags |= Incomplete;\n\n  if (enableUpdaterTracking) {\n    if (isDevToolsPresent) {\n      // If we have pending work still, restore the original updaters\n      restorePendingUpdaters(root, rootRenderLanes);\n    }\n  }\n\n  if (\n    value !== null &&\n    typeof value === 'object' &&\n    typeof value.then === 'function'\n  ) {\n    if (enableLazyContextPropagation) {\n      const currentSourceFiber = sourceFiber.alternate;\n      if (currentSourceFiber !== null) {\n        // Since we never visited the children of the suspended component, we\n        // need to propagate the context change now, to ensure that we visit\n        // them during the retry.\n        //\n        // We don't have to do this for errors because we retry errors without\n        // committing in between. So this is specific to Suspense.\n        propagateParentContextChangesToDeferredTree(\n          currentSourceFiber,\n          sourceFiber,\n          rootRenderLanes,\n        );\n      }\n    }\n\n    // This is a wakeable.\n    const wakeable: Wakeable = (value: any);\n\n    if (__DEV__) {\n      if (enableDebugTracing) {\n        if (sourceFiber.mode & DebugTracingMode) {\n          const name = getComponentNameFromFiber(sourceFiber) || 'Unknown';\n          logComponentSuspended(name, wakeable);\n        }\n      }\n    }\n\n    if (enableSchedulingProfiler) {\n      markComponentRenderStopped();\n      markComponentSuspended(sourceFiber, wakeable, rootRenderLanes);\n    }\n\n    // Reset the memoizedState to what it was before we attempted to render it.\n    // A legacy mode Suspense quirk, only relevant to hook components.\n    const tag = sourceFiber.tag;\n    if (\n      (sourceFiber.mode & ConcurrentMode) === NoMode &&\n      (tag === FunctionComponent ||\n        tag === ForwardRef ||\n        tag === SimpleMemoComponent)\n    ) {\n      const currentSource = sourceFiber.alternate;\n      if (currentSource) {\n        sourceFiber.updateQueue = currentSource.updateQueue;\n        sourceFiber.memoizedState = currentSource.memoizedState;\n        sourceFiber.lanes = currentSource.lanes;\n      } else {\n        sourceFiber.updateQueue = null;\n        sourceFiber.memoizedState = null;\n      }\n    }\n\n    const hasInvisibleParentBoundary = hasSuspenseContext(\n      suspenseStackCursor.current,\n      (InvisibleParentSuspenseContext: SuspenseContext),\n    );\n\n    // Schedule the nearest Suspense to re-render the timed out view.\n    let workInProgress = returnFiber;\n    do {\n      if (\n        workInProgress.tag === SuspenseComponent &&\n        shouldCaptureSuspense(workInProgress, hasInvisibleParentBoundary)\n      ) {\n        // Found the nearest boundary.\n\n        // Stash the promise on the boundary fiber. If the boundary times out, we'll\n        // attach another listener to flip the boundary back to its normal state.\n        const wakeables: Set<Wakeable> = (workInProgress.updateQueue: any);\n        if (wakeables === null) {\n          const updateQueue = (new Set(): any);\n          updateQueue.add(wakeable);\n          workInProgress.updateQueue = updateQueue;\n        } else {\n          wakeables.add(wakeable);\n        }\n\n        // If the boundary is in legacy mode, we should *not*\n        // suspend the commit. Pretend as if the suspended component rendered\n        // null and keep rendering. In the commit phase, we'll schedule a\n        // subsequent synchronous update to re-render the Suspense.\n        //\n        // Note: It doesn't matter whether the component that suspended was\n        // inside a concurrent mode tree. If the Suspense is outside of it, we\n        // should *not* suspend the commit.\n        //\n        // If the suspense boundary suspended itself suspended, we don't have to\n        // do this trick because nothing was partially started. We can just\n        // directly do a second pass over the fallback in this render and\n        // pretend we meant to render that directly.\n        if (\n          (workInProgress.mode & ConcurrentMode) === NoMode &&\n          workInProgress !== returnFiber\n        ) {\n          workInProgress.flags |= DidCapture;\n          sourceFiber.flags |= ForceUpdateForLegacySuspense;\n\n          // We're going to commit this fiber even though it didn't complete.\n          // But we shouldn't call any lifecycle methods or callbacks. Remove\n          // all lifecycle effect tags.\n          sourceFiber.flags &= ~(LifecycleEffectMask | Incomplete);\n\n          if (supportsPersistence && enablePersistentOffscreenHostContainer) {\n            // Another legacy Suspense quirk. In persistent mode, if this is the\n            // initial mount, override the props of the host container to hide\n            // its contents.\n            const currentSuspenseBoundary = workInProgress.alternate;\n            if (currentSuspenseBoundary === null) {\n              const offscreenFiber: Fiber = (workInProgress.child: any);\n              const offscreenContainer = offscreenFiber.child;\n              if (offscreenContainer !== null) {\n                const children = offscreenContainer.memoizedProps.children;\n                const containerProps = getOffscreenContainerProps(\n                  'hidden',\n                  children,\n                );\n                offscreenContainer.pendingProps = containerProps;\n                offscreenContainer.memoizedProps = containerProps;\n              }\n            }\n          }\n\n          if (sourceFiber.tag === ClassComponent) {\n            const currentSourceFiber = sourceFiber.alternate;\n            if (currentSourceFiber === null) {\n              // This is a new mount. Change the tag so it's not mistaken for a\n              // completed class component. For example, we should not call\n              // componentWillUnmount if it is deleted.\n              sourceFiber.tag = IncompleteClassComponent;\n            } else {\n              // When we try rendering again, we should not reuse the current fiber,\n              // since it's known to be in an inconsistent state. Use a force update to\n              // prevent a bail out.\n              const update = createUpdate(NoTimestamp, SyncLane);\n              update.tag = ForceUpdate;\n              enqueueUpdate(sourceFiber, update, SyncLane);\n            }\n          }\n\n          // The source fiber did not complete. Mark it with Sync priority to\n          // indicate that it still has pending work.\n          sourceFiber.lanes = mergeLanes(sourceFiber.lanes, SyncLane);\n\n          // Exit without suspending.\n          return;\n        }\n\n        // Confirmed that the boundary is in a concurrent mode tree. Continue\n        // with the normal suspend path.\n        //\n        // After this we'll use a set of heuristics to determine whether this\n        // render pass will run to completion or restart or \"suspend\" the commit.\n        // The actual logic for this is spread out in different places.\n        //\n        // This first principle is that if we're going to suspend when we complete\n        // a root, then we should also restart if we get an update or ping that\n        // might unsuspend it, and vice versa. The only reason to suspend is\n        // because you think you might want to restart before committing. However,\n        // it doesn't make sense to restart only while in the period we're suspended.\n        //\n        // Restarting too aggressively is also not good because it starves out any\n        // intermediate loading state. So we use heuristics to determine when.\n\n        // Suspense Heuristics\n        //\n        // If nothing threw a Promise or all the same fallbacks are already showing,\n        // then don't suspend/restart.\n        //\n        // If this is an initial render of a new tree of Suspense boundaries and\n        // those trigger a fallback, then don't suspend/restart. We want to ensure\n        // that we can show the initial loading state as quickly as possible.\n        //\n        // If we hit a \"Delayed\" case, such as when we'd switch from content back into\n        // a fallback, then we should always suspend/restart. Transitions apply\n        // to this case. If none is defined, JND is used instead.\n        //\n        // If we're already showing a fallback and it gets \"retried\", allowing us to show\n        // another level, but there's still an inner boundary that would show a fallback,\n        // then we suspend/restart for 500ms since the last time we showed a fallback\n        // anywhere in the tree. This effectively throttles progressive loading into a\n        // consistent train of commits. This also gives us an opportunity to restart to\n        // get to the completed state slightly earlier.\n        //\n        // If there's ambiguity due to batching it's resolved in preference of:\n        // 1) \"delayed\", 2) \"initial render\", 3) \"retry\".\n        //\n        // We want to ensure that a \"busy\" state doesn't get force committed. We want to\n        // ensure that new initial loading states can commit as soon as possible.\n\n        attachPingListener(root, wakeable, rootRenderLanes);\n\n        workInProgress.flags |= ShouldCapture;\n        // TODO: I think we can remove this, since we now use `DidCapture` in\n        // the begin phase to prevent an early bailout.\n        workInProgress.lanes = rootRenderLanes;\n\n        return;\n      }\n      // This boundary already captured during this render. Continue to the next\n      // boundary.\n      workInProgress = workInProgress.return;\n    } while (workInProgress !== null);\n    // No boundary was found. Fallthrough to error mode.\n    // TODO: Use invariant so the message is stripped in prod?\n    value = new Error(\n      (getComponentNameFromFiber(sourceFiber) || 'A React component') +\n        ' suspended while rendering, but no fallback UI was specified.\\n' +\n        '\\n' +\n        'Add a <Suspense fallback=...> component higher in the tree to ' +\n        'provide a loading indicator or placeholder to display.',\n    );\n  }\n\n  // We didn't find a boundary that could handle this type of exception. Start\n  // over and traverse parent path again, this time treating the exception\n  // as an error.\n  renderDidError();\n\n  value = createCapturedValue(value, sourceFiber);\n  let workInProgress = returnFiber;\n  do {\n    switch (workInProgress.tag) {\n      case HostRoot: {\n        const errorInfo = value;\n        workInProgress.flags |= ShouldCapture;\n        const lane = pickArbitraryLane(rootRenderLanes);\n        workInProgress.lanes = mergeLanes(workInProgress.lanes, lane);\n        const update = createRootErrorUpdate(workInProgress, errorInfo, lane);\n        enqueueCapturedUpdate(workInProgress, update);\n        return;\n      }\n      case ClassComponent:\n        // Capture and retry\n        const errorInfo = value;\n        const ctor = workInProgress.type;\n        const instance = workInProgress.stateNode;\n        if (\n          (workInProgress.flags & DidCapture) === NoFlags &&\n          (typeof ctor.getDerivedStateFromError === 'function' ||\n            (instance !== null &&\n              typeof instance.componentDidCatch === 'function' &&\n              !isAlreadyFailedLegacyErrorBoundary(instance)))\n        ) {\n          workInProgress.flags |= ShouldCapture;\n          const lane = pickArbitraryLane(rootRenderLanes);\n          workInProgress.lanes = mergeLanes(workInProgress.lanes, lane);\n          // Schedule the error boundary to re-render using updated state\n          const update = createClassErrorUpdate(\n            workInProgress,\n            errorInfo,\n            lane,\n          );\n          enqueueCapturedUpdate(workInProgress, update);\n          return;\n        }\n        break;\n      default:\n        break;\n    }\n    workInProgress = workInProgress.return;\n  } while (workInProgress !== null);\n}\n\nexport {throwException, createRootErrorUpdate, createClassErrorUpdate};\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Fiber} from './ReactInternalTypes';\nimport type {Lanes, Lane} from './ReactFiberLane.old';\nimport type {\n  ReactScopeInstance,\n  ReactContext,\n  Wakeable,\n} from 'shared/ReactTypes';\nimport type {FiberRoot} from './ReactInternalTypes';\nimport type {\n  Instance,\n  Type,\n  Props,\n  Container,\n  ChildSet,\n} from './ReactFiberHostConfig';\nimport type {\n  SuspenseState,\n  SuspenseListRenderState,\n} from './ReactFiberSuspenseComponent.old';\nimport type {SuspenseContext} from './ReactFiberSuspenseContext.old';\nimport type {OffscreenState} from './ReactFiberOffscreenComponent';\nimport type {Cache, SpawnedCachePool} from './ReactFiberCacheComponent.old';\n\nimport {resetWorkInProgressVersions as resetMutableSourceWorkInProgressVersions} from './ReactMutableSource.old';\n\nimport {now} from './Scheduler';\n\nimport {\n  IndeterminateComponent,\n  FunctionComponent,\n  ClassComponent,\n  HostRoot,\n  HostComponent,\n  HostText,\n  HostPortal,\n  ContextProvider,\n  ContextConsumer,\n  ForwardRef,\n  Fragment,\n  Mode,\n  Profiler,\n  SuspenseComponent,\n  SuspenseListComponent,\n  MemoComponent,\n  SimpleMemoComponent,\n  LazyComponent,\n  IncompleteClassComponent,\n  ScopeComponent,\n  OffscreenComponent,\n  LegacyHiddenComponent,\n  CacheComponent,\n} from './ReactWorkTags';\nimport {NoMode, ConcurrentMode, ProfileMode} from './ReactTypeOfMode';\nimport {\n  Ref,\n  RefStatic,\n  Placement,\n  Update,\n  Visibility,\n  NoFlags,\n  DidCapture,\n  Snapshot,\n  ChildDeletion,\n  StaticMask,\n  MutationMask,\n} from './ReactFiberFlags';\nimport invariant from 'shared/invariant';\n\nimport {\n  createInstance,\n  createTextInstance,\n  appendInitialChild,\n  finalizeInitialChildren,\n  prepareUpdate,\n  supportsMutation,\n  supportsPersistence,\n  cloneInstance,\n  cloneHiddenInstance,\n  cloneHiddenTextInstance,\n  createContainerChildSet,\n  appendChildToContainerChildSet,\n  finalizeContainerChildren,\n  preparePortalMount,\n  prepareScopeUpdate,\n} from './ReactFiberHostConfig';\nimport {\n  getRootHostContainer,\n  popHostContext,\n  getHostContext,\n  popHostContainer,\n} from './ReactFiberHostContext.old';\nimport {\n  suspenseStackCursor,\n  InvisibleParentSuspenseContext,\n  hasSuspenseContext,\n  popSuspenseContext,\n  pushSuspenseContext,\n  setShallowSuspenseContext,\n  ForceSuspenseFallback,\n  setDefaultShallowSuspenseContext,\n} from './ReactFiberSuspenseContext.old';\nimport {findFirstSuspended} from './ReactFiberSuspenseComponent.old';\nimport {\n  isContextProvider as isLegacyContextProvider,\n  popContext as popLegacyContext,\n  popTopLevelContextObject as popTopLevelLegacyContextObject,\n} from './ReactFiberContext.old';\nimport {popProvider} from './ReactFiberNewContext.old';\nimport {\n  prepareToHydrateHostInstance,\n  prepareToHydrateHostTextInstance,\n  prepareToHydrateHostSuspenseInstance,\n  popHydrationState,\n  resetHydrationState,\n  getIsHydrating,\n} from './ReactFiberHydrationContext.old';\nimport {\n  enableSuspenseCallback,\n  enableSuspenseServerRenderer,\n  enableScopeAPI,\n  enableProfilerTimer,\n  enableCache,\n  enableSuspenseLayoutEffectSemantics,\n  enablePersistentOffscreenHostContainer,\n} from 'shared/ReactFeatureFlags';\nimport {\n  renderDidSuspend,\n  renderDidSuspendDelayIfPossible,\n  renderHasNotSuspendedYet,\n  popRenderLanes,\n  getRenderTargetTime,\n  subtreeRenderLanes,\n} from './ReactFiberWorkLoop.old';\nimport {\n  OffscreenLane,\n  SomeRetryLane,\n  NoLanes,\n  includesSomeLane,\n  mergeLanes,\n} from './ReactFiberLane.old';\nimport {resetChildFibers} from './ReactChildFiber.old';\nimport {createScopeInstance} from './ReactFiberScope.old';\nimport {transferActualDuration} from './ReactProfilerTimer.old';\nimport {\n  popCacheProvider,\n  popRootCachePool,\n  popCachePool,\n} from './ReactFiberCacheComponent.old';\n\nfunction markUpdate(workInProgress: Fiber) {\n  // Tag the fiber with an update effect. This turns a Placement into\n  // a PlacementAndUpdate.\n  workInProgress.flags |= Update;\n}\n\nfunction markRef(workInProgress: Fiber) {\n  workInProgress.flags |= Ref;\n  if (enableSuspenseLayoutEffectSemantics) {\n    workInProgress.flags |= RefStatic;\n  }\n}\n\nfunction hadNoMutationsEffects(current: null | Fiber, completedWork: Fiber) {\n  const didBailout = current !== null && current.child === completedWork.child;\n  if (didBailout) {\n    return true;\n  }\n\n  if ((completedWork.flags & ChildDeletion) !== NoFlags) {\n    return false;\n  }\n\n  // TODO: If we move the `hadNoMutationsEffects` call after `bubbleProperties`\n  // then we only have to check the `completedWork.subtreeFlags`.\n  let child = completedWork.child;\n  while (child !== null) {\n    if (\n      (child.flags & MutationMask) !== NoFlags ||\n      (child.subtreeFlags & MutationMask) !== NoFlags\n    ) {\n      return false;\n    }\n    child = child.sibling;\n  }\n  return true;\n}\n\nlet appendAllChildren;\nlet updateHostContainer;\nlet updateHostComponent;\nlet updateHostText;\nif (supportsMutation) {\n  // Mutation mode\n\n  appendAllChildren = function(\n    parent: Instance,\n    workInProgress: Fiber,\n    needsVisibilityToggle: boolean,\n    isHidden: boolean,\n  ) {\n    // We only have the top Fiber that was created but we need recurse down its\n    // children to find all the terminal nodes.\n    let node = workInProgress.child;\n    while (node !== null) {\n      if (node.tag === HostComponent || node.tag === HostText) {\n        appendInitialChild(parent, node.stateNode);\n      } else if (node.tag === HostPortal) {\n        // If we have a portal child, then we don't want to traverse\n        // down its children. Instead, we'll get insertions from each child in\n        // the portal directly.\n      } else if (node.child !== null) {\n        node.child.return = node;\n        node = node.child;\n        continue;\n      }\n      if (node === workInProgress) {\n        return;\n      }\n      while (node.sibling === null) {\n        if (node.return === null || node.return === workInProgress) {\n          return;\n        }\n        node = node.return;\n      }\n      node.sibling.return = node.return;\n      node = node.sibling;\n    }\n  };\n\n  updateHostContainer = function(current: null | Fiber, workInProgress: Fiber) {\n    // Noop\n  };\n  updateHostComponent = function(\n    current: Fiber,\n    workInProgress: Fiber,\n    type: Type,\n    newProps: Props,\n    rootContainerInstance: Container,\n  ) {\n    // If we have an alternate, that means this is an update and we need to\n    // schedule a side-effect to do the updates.\n    const oldProps = current.memoizedProps;\n    if (oldProps === newProps) {\n      // In mutation mode, this is sufficient for a bailout because\n      // we won't touch this node even if children changed.\n      return;\n    }\n\n    // If we get updated because one of our children updated, we don't\n    // have newProps so we'll have to reuse them.\n    // TODO: Split the update API as separate for the props vs. children.\n    // Even better would be if children weren't special cased at all tho.\n    const instance: Instance = workInProgress.stateNode;\n    const currentHostContext = getHostContext();\n    // TODO: Experiencing an error where oldProps is null. Suggests a host\n    // component is hitting the resume path. Figure out why. Possibly\n    // related to `hidden`.\n    const updatePayload = prepareUpdate(\n      instance,\n      type,\n      oldProps,\n      newProps,\n      rootContainerInstance,\n      currentHostContext,\n    );\n    // TODO: Type this specific to this type of component.\n    workInProgress.updateQueue = (updatePayload: any);\n    // If the update payload indicates that there is a change or if there\n    // is a new ref we mark this as an update. All the work is done in commitWork.\n    if (updatePayload) {\n      markUpdate(workInProgress);\n    }\n  };\n  updateHostText = function(\n    current: Fiber,\n    workInProgress: Fiber,\n    oldText: string,\n    newText: string,\n  ) {\n    // If the text differs, mark it as an update. All the work in done in commitWork.\n    if (oldText !== newText) {\n      markUpdate(workInProgress);\n    }\n  };\n} else if (supportsPersistence) {\n  // Persistent host tree mode\n\n  appendAllChildren = function(\n    parent: Instance,\n    workInProgress: Fiber,\n    needsVisibilityToggle: boolean,\n    isHidden: boolean,\n  ) {\n    // We only have the top Fiber that was created but we need recurse down its\n    // children to find all the terminal nodes.\n    let node = workInProgress.child;\n    while (node !== null) {\n      // eslint-disable-next-line no-labels\n      branches: if (node.tag === HostComponent) {\n        let instance = node.stateNode;\n        if (needsVisibilityToggle && isHidden) {\n          // This child is inside a timed out tree. Hide it.\n          const props = node.memoizedProps;\n          const type = node.type;\n          instance = cloneHiddenInstance(instance, type, props, node);\n        }\n        appendInitialChild(parent, instance);\n      } else if (node.tag === HostText) {\n        let instance = node.stateNode;\n        if (needsVisibilityToggle && isHidden) {\n          // This child is inside a timed out tree. Hide it.\n          const text = node.memoizedProps;\n          instance = cloneHiddenTextInstance(instance, text, node);\n        }\n        appendInitialChild(parent, instance);\n      } else if (node.tag === HostPortal) {\n        // If we have a portal child, then we don't want to traverse\n        // down its children. Instead, we'll get insertions from each child in\n        // the portal directly.\n      } else if (\n        node.tag === OffscreenComponent &&\n        node.memoizedState !== null\n      ) {\n        // The children in this boundary are hidden. Toggle their visibility\n        // before appending.\n        const child = node.child;\n        if (child !== null) {\n          child.return = node;\n        }\n        if (enablePersistentOffscreenHostContainer) {\n          appendAllChildren(parent, node, false, false);\n        } else {\n          appendAllChildren(parent, node, true, true);\n        }\n      } else if (node.child !== null) {\n        node.child.return = node;\n        node = node.child;\n        continue;\n      }\n      // $FlowFixMe This is correct but Flow is confused by the labeled break.\n      node = (node: Fiber);\n      if (node === workInProgress) {\n        return;\n      }\n      while (node.sibling === null) {\n        if (node.return === null || node.return === workInProgress) {\n          return;\n        }\n        node = node.return;\n      }\n      node.sibling.return = node.return;\n      node = node.sibling;\n    }\n  };\n\n  // An unfortunate fork of appendAllChildren because we have two different parent types.\n  const appendAllChildrenToContainer = function(\n    containerChildSet: ChildSet,\n    workInProgress: Fiber,\n    needsVisibilityToggle: boolean,\n    isHidden: boolean,\n  ) {\n    // We only have the top Fiber that was created but we need recurse down its\n    // children to find all the terminal nodes.\n    let node = workInProgress.child;\n    while (node !== null) {\n      // eslint-disable-next-line no-labels\n      branches: if (node.tag === HostComponent) {\n        let instance = node.stateNode;\n        if (needsVisibilityToggle && isHidden) {\n          // This child is inside a timed out tree. Hide it.\n          const props = node.memoizedProps;\n          const type = node.type;\n          instance = cloneHiddenInstance(instance, type, props, node);\n        }\n        appendChildToContainerChildSet(containerChildSet, instance);\n      } else if (node.tag === HostText) {\n        let instance = node.stateNode;\n        if (needsVisibilityToggle && isHidden) {\n          // This child is inside a timed out tree. Hide it.\n          const text = node.memoizedProps;\n          instance = cloneHiddenTextInstance(instance, text, node);\n        }\n        appendChildToContainerChildSet(containerChildSet, instance);\n      } else if (node.tag === HostPortal) {\n        // If we have a portal child, then we don't want to traverse\n        // down its children. Instead, we'll get insertions from each child in\n        // the portal directly.\n      } else if (\n        node.tag === OffscreenComponent &&\n        node.memoizedState !== null\n      ) {\n        // The children in this boundary are hidden. Toggle their visibility\n        // before appending.\n        const child = node.child;\n        if (child !== null) {\n          child.return = node;\n        }\n        if (enablePersistentOffscreenHostContainer) {\n          appendAllChildrenToContainer(containerChildSet, node, false, false);\n        } else {\n          appendAllChildrenToContainer(containerChildSet, node, true, true);\n        }\n      } else if (node.child !== null) {\n        node.child.return = node;\n        node = node.child;\n        continue;\n      }\n      // $FlowFixMe This is correct but Flow is confused by the labeled break.\n      node = (node: Fiber);\n      if (node === workInProgress) {\n        return;\n      }\n      while (node.sibling === null) {\n        if (node.return === null || node.return === workInProgress) {\n          return;\n        }\n        node = node.return;\n      }\n      node.sibling.return = node.return;\n      node = node.sibling;\n    }\n  };\n  updateHostContainer = function(current: null | Fiber, workInProgress: Fiber) {\n    const portalOrRoot: {\n      containerInfo: Container,\n      pendingChildren: ChildSet,\n      ...\n    } = workInProgress.stateNode;\n    const childrenUnchanged = hadNoMutationsEffects(current, workInProgress);\n    if (childrenUnchanged) {\n      // No changes, just reuse the existing instance.\n    } else {\n      const container = portalOrRoot.containerInfo;\n      const newChildSet = createContainerChildSet(container);\n      // If children might have changed, we have to add them all to the set.\n      appendAllChildrenToContainer(newChildSet, workInProgress, false, false);\n      portalOrRoot.pendingChildren = newChildSet;\n      // Schedule an update on the container to swap out the container.\n      markUpdate(workInProgress);\n      finalizeContainerChildren(container, newChildSet);\n    }\n  };\n  updateHostComponent = function(\n    current: Fiber,\n    workInProgress: Fiber,\n    type: Type,\n    newProps: Props,\n    rootContainerInstance: Container,\n  ) {\n    const currentInstance = current.stateNode;\n    const oldProps = current.memoizedProps;\n    // If there are no effects associated with this node, then none of our children had any updates.\n    // This guarantees that we can reuse all of them.\n    const childrenUnchanged = hadNoMutationsEffects(current, workInProgress);\n    if (childrenUnchanged && oldProps === newProps) {\n      // No changes, just reuse the existing instance.\n      // Note that this might release a previous clone.\n      workInProgress.stateNode = currentInstance;\n      return;\n    }\n    const recyclableInstance: Instance = workInProgress.stateNode;\n    const currentHostContext = getHostContext();\n    let updatePayload = null;\n    if (oldProps !== newProps) {\n      updatePayload = prepareUpdate(\n        recyclableInstance,\n        type,\n        oldProps,\n        newProps,\n        rootContainerInstance,\n        currentHostContext,\n      );\n    }\n    if (childrenUnchanged && updatePayload === null) {\n      // No changes, just reuse the existing instance.\n      // Note that this might release a previous clone.\n      workInProgress.stateNode = currentInstance;\n      return;\n    }\n    const newInstance = cloneInstance(\n      currentInstance,\n      updatePayload,\n      type,\n      oldProps,\n      newProps,\n      workInProgress,\n      childrenUnchanged,\n      recyclableInstance,\n    );\n    if (\n      finalizeInitialChildren(\n        newInstance,\n        type,\n        newProps,\n        rootContainerInstance,\n        currentHostContext,\n      )\n    ) {\n      markUpdate(workInProgress);\n    }\n    workInProgress.stateNode = newInstance;\n    if (childrenUnchanged) {\n      // If there are no other effects in this tree, we need to flag this node as having one.\n      // Even though we're not going to use it for anything.\n      // Otherwise parents won't know that there are new children to propagate upwards.\n      markUpdate(workInProgress);\n    } else {\n      // If children might have changed, we have to add them all to the set.\n      appendAllChildren(newInstance, workInProgress, false, false);\n    }\n  };\n  updateHostText = function(\n    current: Fiber,\n    workInProgress: Fiber,\n    oldText: string,\n    newText: string,\n  ) {\n    if (oldText !== newText) {\n      // If the text content differs, we'll create a new text instance for it.\n      const rootContainerInstance = getRootHostContainer();\n      const currentHostContext = getHostContext();\n      workInProgress.stateNode = createTextInstance(\n        newText,\n        rootContainerInstance,\n        currentHostContext,\n        workInProgress,\n      );\n      // We'll have to mark it as having an effect, even though we won't use the effect for anything.\n      // This lets the parents know that at least one of their children has changed.\n      markUpdate(workInProgress);\n    } else {\n      workInProgress.stateNode = current.stateNode;\n    }\n  };\n} else {\n  // No host operations\n  updateHostContainer = function(current: null | Fiber, workInProgress: Fiber) {\n    // Noop\n  };\n  updateHostComponent = function(\n    current: Fiber,\n    workInProgress: Fiber,\n    type: Type,\n    newProps: Props,\n    rootContainerInstance: Container,\n  ) {\n    // Noop\n  };\n  updateHostText = function(\n    current: Fiber,\n    workInProgress: Fiber,\n    oldText: string,\n    newText: string,\n  ) {\n    // Noop\n  };\n}\n\nfunction cutOffTailIfNeeded(\n  renderState: SuspenseListRenderState,\n  hasRenderedATailFallback: boolean,\n) {\n  if (getIsHydrating()) {\n    // If we're hydrating, we should consume as many items as we can\n    // so we don't leave any behind.\n    return;\n  }\n  switch (renderState.tailMode) {\n    case 'hidden': {\n      // Any insertions at the end of the tail list after this point\n      // should be invisible. If there are already mounted boundaries\n      // anything before them are not considered for collapsing.\n      // Therefore we need to go through the whole tail to find if\n      // there are any.\n      let tailNode = renderState.tail;\n      let lastTailNode = null;\n      while (tailNode !== null) {\n        if (tailNode.alternate !== null) {\n          lastTailNode = tailNode;\n        }\n        tailNode = tailNode.sibling;\n      }\n      // Next we're simply going to delete all insertions after the\n      // last rendered item.\n      if (lastTailNode === null) {\n        // All remaining items in the tail are insertions.\n        renderState.tail = null;\n      } else {\n        // Detach the insertion after the last node that was already\n        // inserted.\n        lastTailNode.sibling = null;\n      }\n      break;\n    }\n    case 'collapsed': {\n      // Any insertions at the end of the tail list after this point\n      // should be invisible. If there are already mounted boundaries\n      // anything before them are not considered for collapsing.\n      // Therefore we need to go through the whole tail to find if\n      // there are any.\n      let tailNode = renderState.tail;\n      let lastTailNode = null;\n      while (tailNode !== null) {\n        if (tailNode.alternate !== null) {\n          lastTailNode = tailNode;\n        }\n        tailNode = tailNode.sibling;\n      }\n      // Next we're simply going to delete all insertions after the\n      // last rendered item.\n      if (lastTailNode === null) {\n        // All remaining items in the tail are insertions.\n        if (!hasRenderedATailFallback && renderState.tail !== null) {\n          // We suspended during the head. We want to show at least one\n          // row at the tail. So we'll keep on and cut off the rest.\n          renderState.tail.sibling = null;\n        } else {\n          renderState.tail = null;\n        }\n      } else {\n        // Detach the insertion after the last node that was already\n        // inserted.\n        lastTailNode.sibling = null;\n      }\n      break;\n    }\n  }\n}\n\nfunction bubbleProperties(completedWork: Fiber) {\n  const didBailout =\n    completedWork.alternate !== null &&\n    completedWork.alternate.child === completedWork.child;\n\n  let newChildLanes = NoLanes;\n  let subtreeFlags = NoFlags;\n\n  if (!didBailout) {\n    // Bubble up the earliest expiration time.\n    if (enableProfilerTimer && (completedWork.mode & ProfileMode) !== NoMode) {\n      // In profiling mode, resetChildExpirationTime is also used to reset\n      // profiler durations.\n      let actualDuration = completedWork.actualDuration;\n      let treeBaseDuration = ((completedWork.selfBaseDuration: any): number);\n\n      let child = completedWork.child;\n      while (child !== null) {\n        newChildLanes = mergeLanes(\n          newChildLanes,\n          mergeLanes(child.lanes, child.childLanes),\n        );\n\n        subtreeFlags |= child.subtreeFlags;\n        subtreeFlags |= child.flags;\n\n        // When a fiber is cloned, its actualDuration is reset to 0. This value will\n        // only be updated if work is done on the fiber (i.e. it doesn't bailout).\n        // When work is done, it should bubble to the parent's actualDuration. If\n        // the fiber has not been cloned though, (meaning no work was done), then\n        // this value will reflect the amount of time spent working on a previous\n        // render. In that case it should not bubble. We determine whether it was\n        // cloned by comparing the child pointer.\n        actualDuration += child.actualDuration;\n\n        treeBaseDuration += child.treeBaseDuration;\n        child = child.sibling;\n      }\n\n      completedWork.actualDuration = actualDuration;\n      completedWork.treeBaseDuration = treeBaseDuration;\n    } else {\n      let child = completedWork.child;\n      while (child !== null) {\n        newChildLanes = mergeLanes(\n          newChildLanes,\n          mergeLanes(child.lanes, child.childLanes),\n        );\n\n        subtreeFlags |= child.subtreeFlags;\n        subtreeFlags |= child.flags;\n\n        // Update the return pointer so the tree is consistent. This is a code\n        // smell because it assumes the commit phase is never concurrent with\n        // the render phase. Will address during refactor to alternate model.\n        child.return = completedWork;\n\n        child = child.sibling;\n      }\n    }\n\n    completedWork.subtreeFlags |= subtreeFlags;\n  } else {\n    // Bubble up the earliest expiration time.\n    if (enableProfilerTimer && (completedWork.mode & ProfileMode) !== NoMode) {\n      // In profiling mode, resetChildExpirationTime is also used to reset\n      // profiler durations.\n      let treeBaseDuration = ((completedWork.selfBaseDuration: any): number);\n\n      let child = completedWork.child;\n      while (child !== null) {\n        newChildLanes = mergeLanes(\n          newChildLanes,\n          mergeLanes(child.lanes, child.childLanes),\n        );\n\n        // \"Static\" flags share the lifetime of the fiber/hook they belong to,\n        // so we should bubble those up even during a bailout. All the other\n        // flags have a lifetime only of a single render + commit, so we should\n        // ignore them.\n        subtreeFlags |= child.subtreeFlags & StaticMask;\n        subtreeFlags |= child.flags & StaticMask;\n\n        treeBaseDuration += child.treeBaseDuration;\n        child = child.sibling;\n      }\n\n      completedWork.treeBaseDuration = treeBaseDuration;\n    } else {\n      let child = completedWork.child;\n      while (child !== null) {\n        newChildLanes = mergeLanes(\n          newChildLanes,\n          mergeLanes(child.lanes, child.childLanes),\n        );\n\n        // \"Static\" flags share the lifetime of the fiber/hook they belong to,\n        // so we should bubble those up even during a bailout. All the other\n        // flags have a lifetime only of a single render + commit, so we should\n        // ignore them.\n        subtreeFlags |= child.subtreeFlags & StaticMask;\n        subtreeFlags |= child.flags & StaticMask;\n\n        // Update the return pointer so the tree is consistent. This is a code\n        // smell because it assumes the commit phase is never concurrent with\n        // the render phase. Will address during refactor to alternate model.\n        child.return = completedWork;\n\n        child = child.sibling;\n      }\n    }\n\n    completedWork.subtreeFlags |= subtreeFlags;\n  }\n\n  completedWork.childLanes = newChildLanes;\n\n  return didBailout;\n}\n\nexport function completeSuspendedOffscreenHostContainer(\n  current: Fiber | null,\n  workInProgress: Fiber,\n) {\n  // This is a fork of the complete phase for HostComponent. We use it when\n  // a suspense tree is in its fallback state, because in that case the primary\n  // tree that includes the offscreen boundary is skipped over without a\n  // regular complete phase.\n  //\n  // We can optimize this path further by inlining the update logic for\n  // offscreen instances specifically, i.e. skipping the `prepareUpdate` call.\n  const rootContainerInstance = getRootHostContainer();\n  const type = workInProgress.type;\n  const newProps = workInProgress.memoizedProps;\n  if (current !== null) {\n    updateHostComponent(\n      current,\n      workInProgress,\n      type,\n      newProps,\n      rootContainerInstance,\n    );\n  } else {\n    const currentHostContext = getHostContext();\n    const instance = createInstance(\n      type,\n      newProps,\n      rootContainerInstance,\n      currentHostContext,\n      workInProgress,\n    );\n\n    appendAllChildren(instance, workInProgress, false, false);\n\n    workInProgress.stateNode = instance;\n\n    // Certain renderers require commit-time effects for initial mount.\n    // (eg DOM renderer supports auto-focus for certain elements).\n    // Make sure such renderers get scheduled for later work.\n    if (\n      finalizeInitialChildren(\n        instance,\n        type,\n        newProps,\n        rootContainerInstance,\n        currentHostContext,\n      )\n    ) {\n      markUpdate(workInProgress);\n    }\n\n    if (workInProgress.ref !== null) {\n      // If there is a ref on a host node we need to schedule a callback\n      markRef(workInProgress);\n    }\n  }\n  bubbleProperties(workInProgress);\n}\n\nfunction completeWork(\n  current: Fiber | null,\n  workInProgress: Fiber,\n  renderLanes: Lanes,\n): Fiber | null {\n  const newProps = workInProgress.pendingProps;\n\n  switch (workInProgress.tag) {\n    case IndeterminateComponent:\n    case LazyComponent:\n    case SimpleMemoComponent:\n    case FunctionComponent:\n    case ForwardRef:\n    case Fragment:\n    case Mode:\n    case Profiler:\n    case ContextConsumer:\n    case MemoComponent:\n      bubbleProperties(workInProgress);\n      return null;\n    case ClassComponent: {\n      const Component = workInProgress.type;\n      if (isLegacyContextProvider(Component)) {\n        popLegacyContext(workInProgress);\n      }\n      bubbleProperties(workInProgress);\n      return null;\n    }\n    case HostRoot: {\n      const fiberRoot = (workInProgress.stateNode: FiberRoot);\n      if (enableCache) {\n        popRootCachePool(fiberRoot, renderLanes);\n\n        const cache: Cache = workInProgress.memoizedState.cache;\n        popCacheProvider(workInProgress, cache);\n      }\n      popHostContainer(workInProgress);\n      popTopLevelLegacyContextObject(workInProgress);\n      resetMutableSourceWorkInProgressVersions();\n      if (fiberRoot.pendingContext) {\n        fiberRoot.context = fiberRoot.pendingContext;\n        fiberRoot.pendingContext = null;\n      }\n      if (current === null || current.child === null) {\n        // If we hydrated, pop so that we can delete any remaining children\n        // that weren't hydrated.\n        const wasHydrated = popHydrationState(workInProgress);\n        if (wasHydrated) {\n          // If we hydrated, then we'll need to schedule an update for\n          // the commit side-effects on the root.\n          markUpdate(workInProgress);\n        } else if (!fiberRoot.hydrate) {\n          // Schedule an effect to clear this container at the start of the next commit.\n          // This handles the case of React rendering into a container with previous children.\n          // It's also safe to do for updates too, because current.child would only be null\n          // if the previous render was null (so the the container would already be empty).\n          workInProgress.flags |= Snapshot;\n        }\n      }\n      updateHostContainer(current, workInProgress);\n      bubbleProperties(workInProgress);\n      return null;\n    }\n    case HostComponent: {\n      popHostContext(workInProgress);\n      const rootContainerInstance = getRootHostContainer();\n      const type = workInProgress.type;\n      if (current !== null && workInProgress.stateNode != null) {\n        updateHostComponent(\n          current,\n          workInProgress,\n          type,\n          newProps,\n          rootContainerInstance,\n        );\n\n        if (current.ref !== workInProgress.ref) {\n          markRef(workInProgress);\n        }\n      } else {\n        if (!newProps) {\n          invariant(\n            workInProgress.stateNode !== null,\n            'We must have new props for new mounts. This error is likely ' +\n              'caused by a bug in React. Please file an issue.',\n          );\n          // This can happen when we abort work.\n          bubbleProperties(workInProgress);\n          return null;\n        }\n\n        const currentHostContext = getHostContext();\n        // TODO: Move createInstance to beginWork and keep it on a context\n        // \"stack\" as the parent. Then append children as we go in beginWork\n        // or completeWork depending on whether we want to add them top->down or\n        // bottom->up. Top->down is faster in IE11.\n        const wasHydrated = popHydrationState(workInProgress);\n        if (wasHydrated) {\n          // TODO: Move this and createInstance step into the beginPhase\n          // to consolidate.\n          if (\n            prepareToHydrateHostInstance(\n              workInProgress,\n              rootContainerInstance,\n              currentHostContext,\n            )\n          ) {\n            // If changes to the hydrated node need to be applied at the\n            // commit-phase we mark this as such.\n            markUpdate(workInProgress);\n          }\n        } else {\n          const instance = createInstance(\n            type,\n            newProps,\n            rootContainerInstance,\n            currentHostContext,\n            workInProgress,\n          );\n\n          appendAllChildren(instance, workInProgress, false, false);\n\n          workInProgress.stateNode = instance;\n\n          // Certain renderers require commit-time effects for initial mount.\n          // (eg DOM renderer supports auto-focus for certain elements).\n          // Make sure such renderers get scheduled for later work.\n          if (\n            finalizeInitialChildren(\n              instance,\n              type,\n              newProps,\n              rootContainerInstance,\n              currentHostContext,\n            )\n          ) {\n            markUpdate(workInProgress);\n          }\n        }\n\n        if (workInProgress.ref !== null) {\n          // If there is a ref on a host node we need to schedule a callback\n          markRef(workInProgress);\n        }\n      }\n      bubbleProperties(workInProgress);\n      return null;\n    }\n    case HostText: {\n      const newText = newProps;\n      if (current && workInProgress.stateNode != null) {\n        const oldText = current.memoizedProps;\n        // If we have an alternate, that means this is an update and we need\n        // to schedule a side-effect to do the updates.\n        updateHostText(current, workInProgress, oldText, newText);\n      } else {\n        if (typeof newText !== 'string') {\n          invariant(\n            workInProgress.stateNode !== null,\n            'We must have new props for new mounts. This error is likely ' +\n              'caused by a bug in React. Please file an issue.',\n          );\n          // This can happen when we abort work.\n        }\n        const rootContainerInstance = getRootHostContainer();\n        const currentHostContext = getHostContext();\n        const wasHydrated = popHydrationState(workInProgress);\n        if (wasHydrated) {\n          if (prepareToHydrateHostTextInstance(workInProgress)) {\n            markUpdate(workInProgress);\n          }\n        } else {\n          workInProgress.stateNode = createTextInstance(\n            newText,\n            rootContainerInstance,\n            currentHostContext,\n            workInProgress,\n          );\n        }\n      }\n      bubbleProperties(workInProgress);\n      return null;\n    }\n    case SuspenseComponent: {\n      popSuspenseContext(workInProgress);\n      const nextState: null | SuspenseState = workInProgress.memoizedState;\n\n      if (enableSuspenseServerRenderer) {\n        if (nextState !== null && nextState.dehydrated !== null) {\n          if (current === null) {\n            const wasHydrated = popHydrationState(workInProgress);\n            invariant(\n              wasHydrated,\n              'A dehydrated suspense component was completed without a hydrated node. ' +\n                'This is probably a bug in React.',\n            );\n            prepareToHydrateHostSuspenseInstance(workInProgress);\n            bubbleProperties(workInProgress);\n            if (enableProfilerTimer) {\n              if ((workInProgress.mode & ProfileMode) !== NoMode) {\n                const isTimedOutSuspense = nextState !== null;\n                if (isTimedOutSuspense) {\n                  // Don't count time spent in a timed out Suspense subtree as part of the base duration.\n                  const primaryChildFragment = workInProgress.child;\n                  if (primaryChildFragment !== null) {\n                    // $FlowFixMe Flow doesn't support type casting in combination with the -= operator\n                    workInProgress.treeBaseDuration -= ((primaryChildFragment.treeBaseDuration: any): number);\n                  }\n                }\n              }\n            }\n            return null;\n          } else {\n            // We should never have been in a hydration state if we didn't have a current.\n            // However, in some of those paths, we might have reentered a hydration state\n            // and then we might be inside a hydration state. In that case, we'll need to exit out of it.\n            resetHydrationState();\n            if ((workInProgress.flags & DidCapture) === NoFlags) {\n              // This boundary did not suspend so it's now hydrated and unsuspended.\n              workInProgress.memoizedState = null;\n            }\n            // If nothing suspended, we need to schedule an effect to mark this boundary\n            // as having hydrated so events know that they're free to be invoked.\n            // It's also a signal to replay events and the suspense callback.\n            // If something suspended, schedule an effect to attach retry listeners.\n            // So we might as well always mark this.\n            workInProgress.flags |= Update;\n            bubbleProperties(workInProgress);\n            if (enableProfilerTimer) {\n              if ((workInProgress.mode & ProfileMode) !== NoMode) {\n                const isTimedOutSuspense = nextState !== null;\n                if (isTimedOutSuspense) {\n                  // Don't count time spent in a timed out Suspense subtree as part of the base duration.\n                  const primaryChildFragment = workInProgress.child;\n                  if (primaryChildFragment !== null) {\n                    // $FlowFixMe Flow doesn't support type casting in combination with the -= operator\n                    workInProgress.treeBaseDuration -= ((primaryChildFragment.treeBaseDuration: any): number);\n                  }\n                }\n              }\n            }\n            return null;\n          }\n        }\n      }\n\n      if ((workInProgress.flags & DidCapture) !== NoFlags) {\n        // Something suspended. Re-render with the fallback children.\n        workInProgress.lanes = renderLanes;\n        // Do not reset the effect list.\n        if (\n          enableProfilerTimer &&\n          (workInProgress.mode & ProfileMode) !== NoMode\n        ) {\n          transferActualDuration(workInProgress);\n        }\n        // Don't bubble properties in this case.\n        return workInProgress;\n      }\n\n      const nextDidTimeout = nextState !== null;\n      let prevDidTimeout = false;\n      if (current === null) {\n        popHydrationState(workInProgress);\n      } else {\n        const prevState: null | SuspenseState = current.memoizedState;\n        prevDidTimeout = prevState !== null;\n      }\n\n      // If the suspended state of the boundary changes, we need to schedule\n      // an effect to toggle the subtree's visibility. When we switch from\n      // fallback -> primary, the inner Offscreen fiber schedules this effect\n      // as part of its normal complete phase. But when we switch from\n      // primary -> fallback, the inner Offscreen fiber does not have a complete\n      // phase. So we need to schedule its effect here.\n      //\n      // We also use this flag to connect/disconnect the effects, but the same\n      // logic applies: when re-connecting, the Offscreen fiber's complete\n      // phase will handle scheduling the effect. It's only when the fallback\n      // is active that we have to do anything special.\n      if (nextDidTimeout && !prevDidTimeout) {\n        const offscreenFiber: Fiber = (workInProgress.child: any);\n        offscreenFiber.flags |= Visibility;\n\n        // TODO: This will still suspend a synchronous tree if anything\n        // in the concurrent tree already suspended during this render.\n        // This is a known bug.\n        if ((workInProgress.mode & ConcurrentMode) !== NoMode) {\n          // TODO: Move this back to throwException because this is too late\n          // if this is a large tree which is common for initial loads. We\n          // don't know if we should restart a render or not until we get\n          // this marker, and this is too late.\n          // If this render already had a ping or lower pri updates,\n          // and this is the first time we know we're going to suspend we\n          // should be able to immediately restart from within throwException.\n          const hasInvisibleChildContext =\n            current === null &&\n            workInProgress.memoizedProps.unstable_avoidThisFallback !== true;\n          if (\n            hasInvisibleChildContext ||\n            hasSuspenseContext(\n              suspenseStackCursor.current,\n              (InvisibleParentSuspenseContext: SuspenseContext),\n            )\n          ) {\n            // If this was in an invisible tree or a new render, then showing\n            // this boundary is ok.\n            renderDidSuspend();\n          } else {\n            // Otherwise, we're going to have to hide content so we should\n            // suspend for longer if possible.\n            renderDidSuspendDelayIfPossible();\n          }\n        }\n      }\n\n      const wakeables: Set<Wakeable> | null = (workInProgress.updateQueue: any);\n      if (wakeables !== null) {\n        // Schedule an effect to attach a retry listener to the promise.\n        // TODO: Move to passive phase\n        workInProgress.flags |= Update;\n      }\n\n      if (\n        enableSuspenseCallback &&\n        workInProgress.updateQueue !== null &&\n        workInProgress.memoizedProps.suspenseCallback != null\n      ) {\n        // Always notify the callback\n        // TODO: Move to passive phase\n        workInProgress.flags |= Update;\n      }\n      bubbleProperties(workInProgress);\n      if (enableProfilerTimer) {\n        if ((workInProgress.mode & ProfileMode) !== NoMode) {\n          if (nextDidTimeout) {\n            // Don't count time spent in a timed out Suspense subtree as part of the base duration.\n            const primaryChildFragment = workInProgress.child;\n            if (primaryChildFragment !== null) {\n              // $FlowFixMe Flow doesn't support type casting in combination with the -= operator\n              workInProgress.treeBaseDuration -= ((primaryChildFragment.treeBaseDuration: any): number);\n            }\n          }\n        }\n      }\n      return null;\n    }\n    case HostPortal:\n      popHostContainer(workInProgress);\n      updateHostContainer(current, workInProgress);\n      if (current === null) {\n        preparePortalMount(workInProgress.stateNode.containerInfo);\n      }\n      bubbleProperties(workInProgress);\n      return null;\n    case ContextProvider:\n      // Pop provider fiber\n      const context: ReactContext<any> = workInProgress.type._context;\n      popProvider(context, workInProgress);\n      bubbleProperties(workInProgress);\n      return null;\n    case IncompleteClassComponent: {\n      // Same as class component case. I put it down here so that the tags are\n      // sequential to ensure this switch is compiled to a jump table.\n      const Component = workInProgress.type;\n      if (isLegacyContextProvider(Component)) {\n        popLegacyContext(workInProgress);\n      }\n      bubbleProperties(workInProgress);\n      return null;\n    }\n    case SuspenseListComponent: {\n      popSuspenseContext(workInProgress);\n\n      const renderState: null | SuspenseListRenderState =\n        workInProgress.memoizedState;\n\n      if (renderState === null) {\n        // We're running in the default, \"independent\" mode.\n        // We don't do anything in this mode.\n        bubbleProperties(workInProgress);\n        return null;\n      }\n\n      let didSuspendAlready = (workInProgress.flags & DidCapture) !== NoFlags;\n\n      const renderedTail = renderState.rendering;\n      if (renderedTail === null) {\n        // We just rendered the head.\n        if (!didSuspendAlready) {\n          // This is the first pass. We need to figure out if anything is still\n          // suspended in the rendered set.\n\n          // If new content unsuspended, but there's still some content that\n          // didn't. Then we need to do a second pass that forces everything\n          // to keep showing their fallbacks.\n\n          // We might be suspended if something in this render pass suspended, or\n          // something in the previous committed pass suspended. Otherwise,\n          // there's no chance so we can skip the expensive call to\n          // findFirstSuspended.\n          const cannotBeSuspended =\n            renderHasNotSuspendedYet() &&\n            (current === null || (current.flags & DidCapture) === NoFlags);\n          if (!cannotBeSuspended) {\n            let row = workInProgress.child;\n            while (row !== null) {\n              const suspended = findFirstSuspended(row);\n              if (suspended !== null) {\n                didSuspendAlready = true;\n                workInProgress.flags |= DidCapture;\n                cutOffTailIfNeeded(renderState, false);\n\n                // If this is a newly suspended tree, it might not get committed as\n                // part of the second pass. In that case nothing will subscribe to\n                // its thenables. Instead, we'll transfer its thenables to the\n                // SuspenseList so that it can retry if they resolve.\n                // There might be multiple of these in the list but since we're\n                // going to wait for all of them anyway, it doesn't really matter\n                // which ones gets to ping. In theory we could get clever and keep\n                // track of how many dependencies remain but it gets tricky because\n                // in the meantime, we can add/remove/change items and dependencies.\n                // We might bail out of the loop before finding any but that\n                // doesn't matter since that means that the other boundaries that\n                // we did find already has their listeners attached.\n                const newThenables = suspended.updateQueue;\n                if (newThenables !== null) {\n                  workInProgress.updateQueue = newThenables;\n                  workInProgress.flags |= Update;\n                }\n\n                // Rerender the whole list, but this time, we'll force fallbacks\n                // to stay in place.\n                // Reset the effect flags before doing the second pass since that's now invalid.\n                // Reset the child fibers to their original state.\n                workInProgress.subtreeFlags = NoFlags;\n                resetChildFibers(workInProgress, renderLanes);\n\n                // Set up the Suspense Context to force suspense and immediately\n                // rerender the children.\n                pushSuspenseContext(\n                  workInProgress,\n                  setShallowSuspenseContext(\n                    suspenseStackCursor.current,\n                    ForceSuspenseFallback,\n                  ),\n                );\n                // Don't bubble properties in this case.\n                return workInProgress.child;\n              }\n              row = row.sibling;\n            }\n          }\n\n          if (renderState.tail !== null && now() > getRenderTargetTime()) {\n            // We have already passed our CPU deadline but we still have rows\n            // left in the tail. We'll just give up further attempts to render\n            // the main content and only render fallbacks.\n            workInProgress.flags |= DidCapture;\n            didSuspendAlready = true;\n\n            cutOffTailIfNeeded(renderState, false);\n\n            // Since nothing actually suspended, there will nothing to ping this\n            // to get it started back up to attempt the next item. While in terms\n            // of priority this work has the same priority as this current render,\n            // it's not part of the same transition once the transition has\n            // committed. If it's sync, we still want to yield so that it can be\n            // painted. Conceptually, this is really the same as pinging.\n            // We can use any RetryLane even if it's the one currently rendering\n            // since we're leaving it behind on this node.\n            workInProgress.lanes = SomeRetryLane;\n          }\n        } else {\n          cutOffTailIfNeeded(renderState, false);\n        }\n        // Next we're going to render the tail.\n      } else {\n        // Append the rendered row to the child list.\n        if (!didSuspendAlready) {\n          const suspended = findFirstSuspended(renderedTail);\n          if (suspended !== null) {\n            workInProgress.flags |= DidCapture;\n            didSuspendAlready = true;\n\n            // Ensure we transfer the update queue to the parent so that it doesn't\n            // get lost if this row ends up dropped during a second pass.\n            const newThenables = suspended.updateQueue;\n            if (newThenables !== null) {\n              workInProgress.updateQueue = newThenables;\n              workInProgress.flags |= Update;\n            }\n\n            cutOffTailIfNeeded(renderState, true);\n            // This might have been modified.\n            if (\n              renderState.tail === null &&\n              renderState.tailMode === 'hidden' &&\n              !renderedTail.alternate &&\n              !getIsHydrating() // We don't cut it if we're hydrating.\n            ) {\n              // We're done.\n              bubbleProperties(workInProgress);\n              return null;\n            }\n          } else if (\n            // The time it took to render last row is greater than the remaining\n            // time we have to render. So rendering one more row would likely\n            // exceed it.\n            now() * 2 - renderState.renderingStartTime >\n              getRenderTargetTime() &&\n            renderLanes !== OffscreenLane\n          ) {\n            // We have now passed our CPU deadline and we'll just give up further\n            // attempts to render the main content and only render fallbacks.\n            // The assumption is that this is usually faster.\n            workInProgress.flags |= DidCapture;\n            didSuspendAlready = true;\n\n            cutOffTailIfNeeded(renderState, false);\n\n            // Since nothing actually suspended, there will nothing to ping this\n            // to get it started back up to attempt the next item. While in terms\n            // of priority this work has the same priority as this current render,\n            // it's not part of the same transition once the transition has\n            // committed. If it's sync, we still want to yield so that it can be\n            // painted. Conceptually, this is really the same as pinging.\n            // We can use any RetryLane even if it's the one currently rendering\n            // since we're leaving it behind on this node.\n            workInProgress.lanes = SomeRetryLane;\n          }\n        }\n        if (renderState.isBackwards) {\n          // The effect list of the backwards tail will have been added\n          // to the end. This breaks the guarantee that life-cycles fire in\n          // sibling order but that isn't a strong guarantee promised by React.\n          // Especially since these might also just pop in during future commits.\n          // Append to the beginning of the list.\n          renderedTail.sibling = workInProgress.child;\n          workInProgress.child = renderedTail;\n        } else {\n          const previousSibling = renderState.last;\n          if (previousSibling !== null) {\n            previousSibling.sibling = renderedTail;\n          } else {\n            workInProgress.child = renderedTail;\n          }\n          renderState.last = renderedTail;\n        }\n      }\n\n      if (renderState.tail !== null) {\n        // We still have tail rows to render.\n        // Pop a row.\n        const next = renderState.tail;\n        renderState.rendering = next;\n        renderState.tail = next.sibling;\n        renderState.renderingStartTime = now();\n        next.sibling = null;\n\n        // Restore the context.\n        // TODO: We can probably just avoid popping it instead and only\n        // setting it the first time we go from not suspended to suspended.\n        let suspenseContext = suspenseStackCursor.current;\n        if (didSuspendAlready) {\n          suspenseContext = setShallowSuspenseContext(\n            suspenseContext,\n            ForceSuspenseFallback,\n          );\n        } else {\n          suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);\n        }\n        pushSuspenseContext(workInProgress, suspenseContext);\n        // Do a pass over the next row.\n        // Don't bubble properties in this case.\n        return next;\n      }\n      bubbleProperties(workInProgress);\n      return null;\n    }\n    case ScopeComponent: {\n      if (enableScopeAPI) {\n        if (current === null) {\n          const scopeInstance: ReactScopeInstance = createScopeInstance();\n          workInProgress.stateNode = scopeInstance;\n          prepareScopeUpdate(scopeInstance, workInProgress);\n          if (workInProgress.ref !== null) {\n            markRef(workInProgress);\n            markUpdate(workInProgress);\n          }\n        } else {\n          if (workInProgress.ref !== null) {\n            markUpdate(workInProgress);\n          }\n          if (current.ref !== workInProgress.ref) {\n            markRef(workInProgress);\n          }\n        }\n        bubbleProperties(workInProgress);\n        return null;\n      }\n      break;\n    }\n    case OffscreenComponent:\n    case LegacyHiddenComponent: {\n      popRenderLanes(workInProgress);\n      const nextState: OffscreenState | null = workInProgress.memoizedState;\n      const nextIsHidden = nextState !== null;\n\n      if (current !== null) {\n        const prevState: OffscreenState | null = current.memoizedState;\n        const prevIsHidden = prevState !== null;\n        if (\n          prevIsHidden !== nextIsHidden &&\n          newProps.mode !== 'unstable-defer-without-hiding' &&\n          // LegacyHidden doesn't do any hiding — it only pre-renders.\n          workInProgress.tag !== LegacyHiddenComponent\n        ) {\n          workInProgress.flags |= Visibility;\n        }\n      }\n\n      if (!nextIsHidden || (workInProgress.mode & ConcurrentMode) === NoMode) {\n        bubbleProperties(workInProgress);\n      } else {\n        // Don't bubble properties for hidden children unless we're rendering\n        // at offscreen priority.\n        if (includesSomeLane(subtreeRenderLanes, (OffscreenLane: Lane))) {\n          bubbleProperties(workInProgress);\n          if (supportsMutation) {\n            // Check if there was an insertion or update in the hidden subtree.\n            // If so, we need to hide those nodes in the commit phase, so\n            // schedule a visibility effect.\n            if (\n              workInProgress.tag !== LegacyHiddenComponent &&\n              workInProgress.subtreeFlags & (Placement | Update) &&\n              newProps.mode !== 'unstable-defer-without-hiding'\n            ) {\n              workInProgress.flags |= Visibility;\n            }\n          }\n        }\n      }\n\n      if (enableCache) {\n        const spawnedCachePool: SpawnedCachePool | null = (workInProgress.updateQueue: any);\n        if (spawnedCachePool !== null) {\n          popCachePool(workInProgress);\n        }\n      }\n\n      return null;\n    }\n    case CacheComponent: {\n      if (enableCache) {\n        const cache: Cache = workInProgress.memoizedState.cache;\n        popCacheProvider(workInProgress, cache);\n        bubbleProperties(workInProgress);\n        return null;\n      }\n    }\n  }\n  invariant(\n    false,\n    'Unknown unit of work tag (%s). This error is likely caused by a bug in ' +\n      'React. Please file an issue.',\n    workInProgress.tag,\n  );\n}\n\nexport {completeWork};\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {ReactProviderType, ReactContext} from 'shared/ReactTypes';\nimport type {LazyComponent as LazyComponentType} from 'react/src/ReactLazy';\nimport type {Fiber, FiberRoot} from './ReactInternalTypes';\nimport type {TypeOfMode} from './ReactTypeOfMode';\nimport type {Lanes, Lane} from './ReactFiberLane.old';\nimport type {MutableSource} from 'shared/ReactTypes';\nimport type {\n  SuspenseState,\n  SuspenseListRenderState,\n  SuspenseListTailMode,\n} from './ReactFiberSuspenseComponent.old';\nimport type {SuspenseContext} from './ReactFiberSuspenseContext.old';\nimport type {\n  OffscreenProps,\n  OffscreenState,\n} from './ReactFiberOffscreenComponent';\nimport type {\n  Cache,\n  CacheComponentState,\n  SpawnedCachePool,\n} from './ReactFiberCacheComponent.old';\nimport type {UpdateQueue} from './ReactUpdateQueue.old';\n\nimport checkPropTypes from 'shared/checkPropTypes';\nimport {\n  markComponentRenderStarted,\n  markComponentRenderStopped,\n} from './SchedulingProfiler';\nimport {\n  IndeterminateComponent,\n  FunctionComponent,\n  ClassComponent,\n  HostRoot,\n  HostComponent,\n  HostText,\n  HostPortal,\n  ForwardRef,\n  Fragment,\n  Mode,\n  ContextProvider,\n  ContextConsumer,\n  Profiler,\n  SuspenseComponent,\n  SuspenseListComponent,\n  MemoComponent,\n  SimpleMemoComponent,\n  LazyComponent,\n  IncompleteClassComponent,\n  ScopeComponent,\n  OffscreenComponent,\n  LegacyHiddenComponent,\n  CacheComponent,\n} from './ReactWorkTags';\nimport {\n  NoFlags,\n  PerformedWork,\n  Placement,\n  Hydrating,\n  ContentReset,\n  DidCapture,\n  Update,\n  Ref,\n  RefStatic,\n  ChildDeletion,\n  ForceUpdateForLegacySuspense,\n  StaticMask,\n  ShouldCapture,\n} from './ReactFiberFlags';\nimport ReactSharedInternals from 'shared/ReactSharedInternals';\nimport {\n  debugRenderPhaseSideEffectsForStrictMode,\n  disableLegacyContext,\n  disableModulePatternComponents,\n  enableProfilerCommitHooks,\n  enableProfilerTimer,\n  enableSuspenseServerRenderer,\n  warnAboutDefaultPropsOnFunctionComponents,\n  enableScopeAPI,\n  enableCache,\n  enableLazyContextPropagation,\n  enableSuspenseLayoutEffectSemantics,\n  enableSchedulingProfiler,\n  enablePersistentOffscreenHostContainer,\n} from 'shared/ReactFeatureFlags';\nimport invariant from 'shared/invariant';\nimport isArray from 'shared/isArray';\nimport shallowEqual from 'shared/shallowEqual';\nimport getComponentNameFromFiber from 'react-reconciler/src/getComponentNameFromFiber';\nimport getComponentNameFromType from 'shared/getComponentNameFromType';\nimport ReactStrictModeWarnings from './ReactStrictModeWarnings.old';\nimport {REACT_LAZY_TYPE, getIteratorFn} from 'shared/ReactSymbols';\nimport {\n  getCurrentFiberOwnerNameInDevOrNull,\n  setIsRendering,\n} from './ReactCurrentFiber';\nimport {\n  resolveFunctionForHotReloading,\n  resolveForwardRefForHotReloading,\n  resolveClassForHotReloading,\n} from './ReactFiberHotReloading.old';\n\nimport {\n  mountChildFibers,\n  reconcileChildFibers,\n  cloneChildFibers,\n} from './ReactChildFiber.old';\nimport {\n  processUpdateQueue,\n  cloneUpdateQueue,\n  initializeUpdateQueue,\n  enqueueCapturedUpdate,\n} from './ReactUpdateQueue.old';\nimport {\n  NoLane,\n  NoLanes,\n  SyncLane,\n  OffscreenLane,\n  DefaultHydrationLane,\n  SomeRetryLane,\n  NoTimestamp,\n  includesSomeLane,\n  laneToLanes,\n  removeLanes,\n  mergeLanes,\n  getBumpedLaneForHydration,\n  pickArbitraryLane,\n} from './ReactFiberLane.old';\nimport {\n  ConcurrentMode,\n  NoMode,\n  ProfileMode,\n  StrictLegacyMode,\n} from './ReactTypeOfMode';\nimport {\n  shouldSetTextContent,\n  isSuspenseInstancePending,\n  isSuspenseInstanceFallback,\n  registerSuspenseInstanceRetry,\n  supportsHydration,\n  isPrimaryRenderer,\n  supportsPersistence,\n  getOffscreenContainerProps,\n} from './ReactFiberHostConfig';\nimport type {SuspenseInstance} from './ReactFiberHostConfig';\nimport {\n  shouldError,\n  shouldSuspend,\n  setIsStrictModeForDevtools,\n} from './ReactFiberReconciler';\nimport {pushHostContext, pushHostContainer} from './ReactFiberHostContext.old';\nimport {\n  suspenseStackCursor,\n  pushSuspenseContext,\n  InvisibleParentSuspenseContext,\n  ForceSuspenseFallback,\n  hasSuspenseContext,\n  setDefaultShallowSuspenseContext,\n  addSubtreeSuspenseContext,\n  setShallowSuspenseContext,\n} from './ReactFiberSuspenseContext.old';\nimport {findFirstSuspended} from './ReactFiberSuspenseComponent.old';\nimport {\n  pushProvider,\n  propagateContextChange,\n  lazilyPropagateParentContextChanges,\n  propagateParentContextChangesToDeferredTree,\n  checkIfContextChanged,\n  readContext,\n  prepareToReadContext,\n  scheduleWorkOnParentPath,\n} from './ReactFiberNewContext.old';\nimport {renderWithHooks, bailoutHooks} from './ReactFiberHooks.old';\nimport {stopProfilerTimerIfRunning} from './ReactProfilerTimer.old';\nimport {\n  getMaskedContext,\n  getUnmaskedContext,\n  hasContextChanged as hasLegacyContextChanged,\n  pushContextProvider as pushLegacyContextProvider,\n  isContextProvider as isLegacyContextProvider,\n  pushTopLevelContextObject,\n  invalidateContextProvider,\n} from './ReactFiberContext.old';\nimport {\n  enterHydrationState,\n  reenterHydrationStateFromDehydratedSuspenseInstance,\n  resetHydrationState,\n  tryToClaimNextHydratableInstance,\n  warnIfHydrating,\n} from './ReactFiberHydrationContext.old';\nimport {\n  adoptClassInstance,\n  constructClassInstance,\n  mountClassInstance,\n  resumeMountClassInstance,\n  updateClassInstance,\n} from './ReactFiberClassComponent.old';\nimport {resolveDefaultProps} from './ReactFiberLazyComponent.old';\nimport {\n  resolveLazyComponentTag,\n  createFiberFromTypeAndProps,\n  createFiberFromFragment,\n  createFiberFromOffscreen,\n  createWorkInProgress,\n  createOffscreenHostContainerFiber,\n  isSimpleFunctionComponent,\n} from './ReactFiber.old';\nimport {\n  retryDehydratedSuspenseBoundary,\n  scheduleUpdateOnFiber,\n  renderDidSuspendDelayIfPossible,\n  markSkippedUpdateLanes,\n  getWorkInProgressRoot,\n  pushRenderLanes,\n  getExecutionContext,\n  RetryAfterError,\n  NoContext,\n} from './ReactFiberWorkLoop.old';\nimport {setWorkInProgressVersion} from './ReactMutableSource.old';\nimport {\n  requestCacheFromPool,\n  pushCacheProvider,\n  pushRootCachePool,\n  CacheContext,\n  getSuspendedCachePool,\n  restoreSpawnedCachePool,\n  getOffscreenDeferredCachePool,\n} from './ReactFiberCacheComponent.old';\nimport {createCapturedValue} from './ReactCapturedValue';\nimport {createClassErrorUpdate} from './ReactFiberThrow.old';\nimport {completeSuspendedOffscreenHostContainer} from './ReactFiberCompleteWork.old';\nimport is from 'shared/objectIs';\n\nconst ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;\n\nlet didReceiveUpdate: boolean = false;\n\nlet didWarnAboutBadClass;\nlet didWarnAboutModulePatternComponent;\nlet didWarnAboutContextTypeOnFunctionComponent;\nlet didWarnAboutGetDerivedStateOnFunctionComponent;\nlet didWarnAboutFunctionRefs;\nexport let didWarnAboutReassigningProps;\nlet didWarnAboutRevealOrder;\nlet didWarnAboutTailOptions;\nlet didWarnAboutDefaultPropsOnFunctionComponent;\n\nif (__DEV__) {\n  didWarnAboutBadClass = {};\n  didWarnAboutModulePatternComponent = {};\n  didWarnAboutContextTypeOnFunctionComponent = {};\n  didWarnAboutGetDerivedStateOnFunctionComponent = {};\n  didWarnAboutFunctionRefs = {};\n  didWarnAboutReassigningProps = false;\n  didWarnAboutRevealOrder = {};\n  didWarnAboutTailOptions = {};\n  didWarnAboutDefaultPropsOnFunctionComponent = {};\n}\n\nexport function reconcileChildren(\n  current: Fiber | null,\n  workInProgress: Fiber,\n  nextChildren: any,\n  renderLanes: Lanes,\n) {\n  if (current === null) {\n    // If this is a fresh new component that hasn't been rendered yet, we\n    // won't update its child set by applying minimal side-effects. Instead,\n    // we will add them all to the child before it gets rendered. That means\n    // we can optimize this reconciliation pass by not tracking side-effects.\n    workInProgress.child = mountChildFibers(\n      workInProgress,\n      null,\n      nextChildren,\n      renderLanes,\n    );\n  } else {\n    // If the current child is the same as the work in progress, it means that\n    // we haven't yet started any work on these children. Therefore, we use\n    // the clone algorithm to create a copy of all the current children.\n\n    // If we had any progressed work already, that is invalid at this point so\n    // let's throw it out.\n    workInProgress.child = reconcileChildFibers(\n      workInProgress,\n      current.child,\n      nextChildren,\n      renderLanes,\n    );\n  }\n}\n\nfunction forceUnmountCurrentAndReconcile(\n  current: Fiber,\n  workInProgress: Fiber,\n  nextChildren: any,\n  renderLanes: Lanes,\n) {\n  // This function is fork of reconcileChildren. It's used in cases where we\n  // want to reconcile without matching against the existing set. This has the\n  // effect of all current children being unmounted; even if the type and key\n  // are the same, the old child is unmounted and a new child is created.\n  //\n  // To do this, we're going to go through the reconcile algorithm twice. In\n  // the first pass, we schedule a deletion for all the current children by\n  // passing null.\n  workInProgress.child = reconcileChildFibers(\n    workInProgress,\n    current.child,\n    null,\n    renderLanes,\n  );\n  // In the second pass, we mount the new children. The trick here is that we\n  // pass null in place of where we usually pass the current child set. This has\n  // the effect of remounting all children regardless of whether their\n  // identities match.\n  workInProgress.child = reconcileChildFibers(\n    workInProgress,\n    null,\n    nextChildren,\n    renderLanes,\n  );\n}\n\nfunction updateForwardRef(\n  current: Fiber | null,\n  workInProgress: Fiber,\n  Component: any,\n  nextProps: any,\n  renderLanes: Lanes,\n) {\n  // TODO: current can be non-null here even if the component\n  // hasn't yet mounted. This happens after the first render suspends.\n  // We'll need to figure out if this is fine or can cause issues.\n\n  if (__DEV__) {\n    if (workInProgress.type !== workInProgress.elementType) {\n      // Lazy component props can't be validated in createElement\n      // because they're only guaranteed to be resolved here.\n      const innerPropTypes = Component.propTypes;\n      if (innerPropTypes) {\n        checkPropTypes(\n          innerPropTypes,\n          nextProps, // Resolved props\n          'prop',\n          getComponentNameFromType(Component),\n        );\n      }\n    }\n  }\n\n  const render = Component.render;\n  const ref = workInProgress.ref;\n\n  // The rest is a fork of updateFunctionComponent\n  let nextChildren;\n  prepareToReadContext(workInProgress, renderLanes);\n  if (enableSchedulingProfiler) {\n    markComponentRenderStarted(workInProgress);\n  }\n  if (__DEV__) {\n    ReactCurrentOwner.current = workInProgress;\n    setIsRendering(true);\n    nextChildren = renderWithHooks(\n      current,\n      workInProgress,\n      render,\n      nextProps,\n      ref,\n      renderLanes,\n    );\n    if (\n      debugRenderPhaseSideEffectsForStrictMode &&\n      workInProgress.mode & StrictLegacyMode\n    ) {\n      setIsStrictModeForDevtools(true);\n      try {\n        nextChildren = renderWithHooks(\n          current,\n          workInProgress,\n          render,\n          nextProps,\n          ref,\n          renderLanes,\n        );\n      } finally {\n        setIsStrictModeForDevtools(false);\n      }\n    }\n    setIsRendering(false);\n  } else {\n    nextChildren = renderWithHooks(\n      current,\n      workInProgress,\n      render,\n      nextProps,\n      ref,\n      renderLanes,\n    );\n  }\n  if (enableSchedulingProfiler) {\n    markComponentRenderStopped();\n  }\n\n  if (current !== null && !didReceiveUpdate) {\n    bailoutHooks(current, workInProgress, renderLanes);\n    return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);\n  }\n\n  // React DevTools reads this flag.\n  workInProgress.flags |= PerformedWork;\n  reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n  return workInProgress.child;\n}\n\nfunction updateMemoComponent(\n  current: Fiber | null,\n  workInProgress: Fiber,\n  Component: any,\n  nextProps: any,\n  renderLanes: Lanes,\n): null | Fiber {\n  if (current === null) {\n    const type = Component.type;\n    if (\n      isSimpleFunctionComponent(type) &&\n      Component.compare === null &&\n      // SimpleMemoComponent codepath doesn't resolve outer props either.\n      Component.defaultProps === undefined\n    ) {\n      let resolvedType = type;\n      if (__DEV__) {\n        resolvedType = resolveFunctionForHotReloading(type);\n      }\n      // If this is a plain function component without default props,\n      // and with only the default shallow comparison, we upgrade it\n      // to a SimpleMemoComponent to allow fast path updates.\n      workInProgress.tag = SimpleMemoComponent;\n      workInProgress.type = resolvedType;\n      if (__DEV__) {\n        validateFunctionComponentInDev(workInProgress, type);\n      }\n      return updateSimpleMemoComponent(\n        current,\n        workInProgress,\n        resolvedType,\n        nextProps,\n        renderLanes,\n      );\n    }\n    if (__DEV__) {\n      const innerPropTypes = type.propTypes;\n      if (innerPropTypes) {\n        // Inner memo component props aren't currently validated in createElement.\n        // We could move it there, but we'd still need this for lazy code path.\n        checkPropTypes(\n          innerPropTypes,\n          nextProps, // Resolved props\n          'prop',\n          getComponentNameFromType(type),\n        );\n      }\n    }\n    const child = createFiberFromTypeAndProps(\n      Component.type,\n      null,\n      nextProps,\n      workInProgress,\n      workInProgress.mode,\n      renderLanes,\n    );\n    child.ref = workInProgress.ref;\n    child.return = workInProgress;\n    workInProgress.child = child;\n    return child;\n  }\n  if (__DEV__) {\n    const type = Component.type;\n    const innerPropTypes = type.propTypes;\n    if (innerPropTypes) {\n      // Inner memo component props aren't currently validated in createElement.\n      // We could move it there, but we'd still need this for lazy code path.\n      checkPropTypes(\n        innerPropTypes,\n        nextProps, // Resolved props\n        'prop',\n        getComponentNameFromType(type),\n      );\n    }\n  }\n  const currentChild = ((current.child: any): Fiber); // This is always exactly one child\n  const hasScheduledUpdateOrContext = checkScheduledUpdateOrContext(\n    current,\n    renderLanes,\n  );\n  if (!hasScheduledUpdateOrContext) {\n    // This will be the props with resolved defaultProps,\n    // unlike current.memoizedProps which will be the unresolved ones.\n    const prevProps = currentChild.memoizedProps;\n    // Default to shallow comparison\n    let compare = Component.compare;\n    compare = compare !== null ? compare : shallowEqual;\n    if (compare(prevProps, nextProps) && current.ref === workInProgress.ref) {\n      return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);\n    }\n  }\n  // React DevTools reads this flag.\n  workInProgress.flags |= PerformedWork;\n  const newChild = createWorkInProgress(currentChild, nextProps);\n  newChild.ref = workInProgress.ref;\n  newChild.return = workInProgress;\n  workInProgress.child = newChild;\n  return newChild;\n}\n\nfunction updateSimpleMemoComponent(\n  current: Fiber | null,\n  workInProgress: Fiber,\n  Component: any,\n  nextProps: any,\n  renderLanes: Lanes,\n): null | Fiber {\n  // TODO: current can be non-null here even if the component\n  // hasn't yet mounted. This happens when the inner render suspends.\n  // We'll need to figure out if this is fine or can cause issues.\n\n  if (__DEV__) {\n    if (workInProgress.type !== workInProgress.elementType) {\n      // Lazy component props can't be validated in createElement\n      // because they're only guaranteed to be resolved here.\n      let outerMemoType = workInProgress.elementType;\n      if (outerMemoType.$$typeof === REACT_LAZY_TYPE) {\n        // We warn when you define propTypes on lazy()\n        // so let's just skip over it to find memo() outer wrapper.\n        // Inner props for memo are validated later.\n        const lazyComponent: LazyComponentType<any, any> = outerMemoType;\n        const payload = lazyComponent._payload;\n        const init = lazyComponent._init;\n        try {\n          outerMemoType = init(payload);\n        } catch (x) {\n          outerMemoType = null;\n        }\n        // Inner propTypes will be validated in the function component path.\n        const outerPropTypes = outerMemoType && (outerMemoType: any).propTypes;\n        if (outerPropTypes) {\n          checkPropTypes(\n            outerPropTypes,\n            nextProps, // Resolved (SimpleMemoComponent has no defaultProps)\n            'prop',\n            getComponentNameFromType(outerMemoType),\n          );\n        }\n      }\n    }\n  }\n  if (current !== null) {\n    const prevProps = current.memoizedProps;\n    if (\n      shallowEqual(prevProps, nextProps) &&\n      current.ref === workInProgress.ref &&\n      // Prevent bailout if the implementation changed due to hot reload.\n      (__DEV__ ? workInProgress.type === current.type : true)\n    ) {\n      didReceiveUpdate = false;\n      if (!checkScheduledUpdateOrContext(current, renderLanes)) {\n        // The pending lanes were cleared at the beginning of beginWork. We're\n        // about to bail out, but there might be other lanes that weren't\n        // included in the current render. Usually, the priority level of the\n        // remaining updates is accumulated during the evaluation of the\n        // component (i.e. when processing the update queue). But since since\n        // we're bailing out early *without* evaluating the component, we need\n        // to account for it here, too. Reset to the value of the current fiber.\n        // NOTE: This only applies to SimpleMemoComponent, not MemoComponent,\n        // because a MemoComponent fiber does not have hooks or an update queue;\n        // rather, it wraps around an inner component, which may or may not\n        // contains hooks.\n        // TODO: Move the reset at in beginWork out of the common path so that\n        // this is no longer necessary.\n        workInProgress.lanes = current.lanes;\n        return bailoutOnAlreadyFinishedWork(\n          current,\n          workInProgress,\n          renderLanes,\n        );\n      } else if ((current.flags & ForceUpdateForLegacySuspense) !== NoFlags) {\n        // This is a special case that only exists for legacy mode.\n        // See https://github.com/facebook/react/pull/19216.\n        didReceiveUpdate = true;\n      }\n    }\n  }\n  return updateFunctionComponent(\n    current,\n    workInProgress,\n    Component,\n    nextProps,\n    renderLanes,\n  );\n}\n\nfunction updateOffscreenComponent(\n  current: Fiber | null,\n  workInProgress: Fiber,\n  renderLanes: Lanes,\n) {\n  const nextProps: OffscreenProps = workInProgress.pendingProps;\n  const nextChildren = nextProps.children;\n\n  const prevState: OffscreenState | null =\n    current !== null ? current.memoizedState : null;\n\n  // If this is not null, this is a cache pool that was carried over from the\n  // previous render. We will push this to the cache pool context so that we can\n  // resume in-flight requests.\n  let spawnedCachePool: SpawnedCachePool | null = null;\n\n  if (\n    nextProps.mode === 'hidden' ||\n    nextProps.mode === 'unstable-defer-without-hiding'\n  ) {\n    // Rendering a hidden tree.\n    if ((workInProgress.mode & ConcurrentMode) === NoMode) {\n      // In legacy sync mode, don't defer the subtree. Render it now.\n      const nextState: OffscreenState = {\n        baseLanes: NoLanes,\n        cachePool: null,\n      };\n      workInProgress.memoizedState = nextState;\n      pushRenderLanes(workInProgress, renderLanes);\n    } else if (!includesSomeLane(renderLanes, (OffscreenLane: Lane))) {\n      // We're hidden, and we're not rendering at Offscreen. We will bail out\n      // and resume this tree later.\n      let nextBaseLanes;\n      if (prevState !== null) {\n        const prevBaseLanes = prevState.baseLanes;\n        nextBaseLanes = mergeLanes(prevBaseLanes, renderLanes);\n        if (enableCache) {\n          // Save the cache pool so we can resume later.\n          spawnedCachePool = getOffscreenDeferredCachePool();\n          // We don't need to push to the cache pool because we're about to\n          // bail out. There won't be a context mismatch because we only pop\n          // the cache pool if `updateQueue` is non-null.\n        }\n      } else {\n        nextBaseLanes = renderLanes;\n      }\n\n      // Schedule this fiber to re-render at offscreen priority. Then bailout.\n      workInProgress.lanes = workInProgress.childLanes = laneToLanes(\n        OffscreenLane,\n      );\n      const nextState: OffscreenState = {\n        baseLanes: nextBaseLanes,\n        cachePool: spawnedCachePool,\n      };\n      workInProgress.memoizedState = nextState;\n      workInProgress.updateQueue = null;\n      // We're about to bail out, but we need to push this to the stack anyway\n      // to avoid a push/pop misalignment.\n      pushRenderLanes(workInProgress, nextBaseLanes);\n\n      if (enableLazyContextPropagation && current !== null) {\n        // Since this tree will resume rendering in a separate render, we need\n        // to propagate parent contexts now so we don't lose track of which\n        // ones changed.\n        propagateParentContextChangesToDeferredTree(\n          current,\n          workInProgress,\n          renderLanes,\n        );\n      }\n\n      return null;\n    } else {\n      // This is the second render. The surrounding visible content has already\n      // committed. Now we resume rendering the hidden tree.\n\n      if (enableCache && prevState !== null) {\n        // If the render that spawned this one accessed the cache pool, resume\n        // using the same cache. Unless the parent changed, since that means\n        // there was a refresh.\n        const prevCachePool = prevState.cachePool;\n        if (prevCachePool !== null) {\n          spawnedCachePool = restoreSpawnedCachePool(\n            workInProgress,\n            prevCachePool,\n          );\n        }\n      }\n\n      // Rendering at offscreen, so we can clear the base lanes.\n      const nextState: OffscreenState = {\n        baseLanes: NoLanes,\n        cachePool: null,\n      };\n      workInProgress.memoizedState = nextState;\n      // Push the lanes that were skipped when we bailed out.\n      const subtreeRenderLanes =\n        prevState !== null ? prevState.baseLanes : renderLanes;\n      pushRenderLanes(workInProgress, subtreeRenderLanes);\n    }\n  } else {\n    // Rendering a visible tree.\n    let subtreeRenderLanes;\n    if (prevState !== null) {\n      // We're going from hidden -> visible.\n\n      subtreeRenderLanes = mergeLanes(prevState.baseLanes, renderLanes);\n\n      if (enableCache) {\n        // If the render that spawned this one accessed the cache pool, resume\n        // using the same cache. Unless the parent changed, since that means\n        // there was a refresh.\n        const prevCachePool = prevState.cachePool;\n        if (prevCachePool !== null) {\n          spawnedCachePool = restoreSpawnedCachePool(\n            workInProgress,\n            prevCachePool,\n          );\n        }\n      }\n\n      // Since we're not hidden anymore, reset the state\n      workInProgress.memoizedState = null;\n    } else {\n      // We weren't previously hidden, and we still aren't, so there's nothing\n      // special to do. Need to push to the stack regardless, though, to avoid\n      // a push/pop misalignment.\n      subtreeRenderLanes = renderLanes;\n    }\n    pushRenderLanes(workInProgress, subtreeRenderLanes);\n  }\n\n  if (enableCache) {\n    // If we have a cache pool from a previous render attempt, then this will be\n    // non-null. We use this to infer whether to push/pop the cache context.\n    workInProgress.updateQueue = spawnedCachePool;\n  }\n\n  if (enablePersistentOffscreenHostContainer && supportsPersistence) {\n    // In persistent mode, the offscreen children are wrapped in a host node.\n    // TODO: Optimize this to use the OffscreenComponent fiber instead of\n    // an extra HostComponent fiber. Need to make sure this doesn't break Fabric\n    // or some other infra that expects a HostComponent.\n    const isHidden =\n      nextProps.mode === 'hidden' &&\n      workInProgress.tag !== LegacyHiddenComponent;\n    const offscreenContainer = reconcileOffscreenHostContainer(\n      current,\n      workInProgress,\n      isHidden,\n      nextChildren,\n      renderLanes,\n    );\n    return offscreenContainer;\n  } else {\n    reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n    return workInProgress.child;\n  }\n}\n\nfunction reconcileOffscreenHostContainer(\n  currentOffscreen: Fiber | null,\n  offscreen: Fiber,\n  isHidden: boolean,\n  children: any,\n  renderLanes: Lanes,\n) {\n  const containerProps = getOffscreenContainerProps(\n    isHidden ? 'hidden' : 'visible',\n    children,\n  );\n  let hostContainer;\n  if (currentOffscreen === null) {\n    hostContainer = createOffscreenHostContainerFiber(\n      containerProps,\n      offscreen.mode,\n      renderLanes,\n      null,\n    );\n  } else {\n    const currentHostContainer = currentOffscreen.child;\n    if (currentHostContainer === null) {\n      hostContainer = createOffscreenHostContainerFiber(\n        containerProps,\n        offscreen.mode,\n        renderLanes,\n        null,\n      );\n      hostContainer.flags |= Placement;\n    } else {\n      hostContainer = createWorkInProgress(\n        currentHostContainer,\n        containerProps,\n      );\n    }\n  }\n  hostContainer.return = offscreen;\n  offscreen.child = hostContainer;\n  return hostContainer;\n}\n\n// Note: These happen to have identical begin phases, for now. We shouldn't hold\n// ourselves to this constraint, though. If the behavior diverges, we should\n// fork the function.\nconst updateLegacyHiddenComponent = updateOffscreenComponent;\n\nfunction updateCacheComponent(\n  current: Fiber | null,\n  workInProgress: Fiber,\n  renderLanes: Lanes,\n) {\n  if (!enableCache) {\n    return null;\n  }\n\n  prepareToReadContext(workInProgress, renderLanes);\n  const parentCache = readContext(CacheContext);\n\n  if (current === null) {\n    // Initial mount. Request a fresh cache from the pool.\n    const freshCache = requestCacheFromPool(renderLanes);\n    const initialState: CacheComponentState = {\n      parent: parentCache,\n      cache: freshCache,\n    };\n    workInProgress.memoizedState = initialState;\n    initializeUpdateQueue(workInProgress);\n    pushCacheProvider(workInProgress, freshCache);\n  } else {\n    // Check for updates\n    if (includesSomeLane(current.lanes, renderLanes)) {\n      cloneUpdateQueue(current, workInProgress);\n      processUpdateQueue(workInProgress, null, null, renderLanes);\n    }\n    const prevState: CacheComponentState = current.memoizedState;\n    const nextState: CacheComponentState = workInProgress.memoizedState;\n\n    // Compare the new parent cache to the previous to see detect there was\n    // a refresh.\n    if (prevState.parent !== parentCache) {\n      // Refresh in parent. Update the parent.\n      const derivedState: CacheComponentState = {\n        parent: parentCache,\n        cache: parentCache,\n      };\n\n      // Copied from getDerivedStateFromProps implementation. Once the update\n      // queue is empty, persist the derived state onto the base state.\n      workInProgress.memoizedState = derivedState;\n      if (workInProgress.lanes === NoLanes) {\n        const updateQueue: UpdateQueue<any> = (workInProgress.updateQueue: any);\n        workInProgress.memoizedState = updateQueue.baseState = derivedState;\n      }\n\n      pushCacheProvider(workInProgress, parentCache);\n      // No need to propagate a context change because the refreshed parent\n      // already did.\n    } else {\n      // The parent didn't refresh. Now check if this cache did.\n      const nextCache = nextState.cache;\n      pushCacheProvider(workInProgress, nextCache);\n      if (nextCache !== prevState.cache) {\n        // This cache refreshed. Propagate a context change.\n        propagateContextChange(workInProgress, CacheContext, renderLanes);\n      }\n    }\n  }\n\n  const nextChildren = workInProgress.pendingProps.children;\n  reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n  return workInProgress.child;\n}\n\nfunction updateFragment(\n  current: Fiber | null,\n  workInProgress: Fiber,\n  renderLanes: Lanes,\n) {\n  const nextChildren = workInProgress.pendingProps;\n  reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n  return workInProgress.child;\n}\n\nfunction updateMode(\n  current: Fiber | null,\n  workInProgress: Fiber,\n  renderLanes: Lanes,\n) {\n  const nextChildren = workInProgress.pendingProps.children;\n  reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n  return workInProgress.child;\n}\n\nfunction updateProfiler(\n  current: Fiber | null,\n  workInProgress: Fiber,\n  renderLanes: Lanes,\n) {\n  if (enableProfilerTimer) {\n    workInProgress.flags |= Update;\n\n    if (enableProfilerCommitHooks) {\n      // Reset effect durations for the next eventual effect phase.\n      // These are reset during render to allow the DevTools commit hook a chance to read them,\n      const stateNode = workInProgress.stateNode;\n      stateNode.effectDuration = 0;\n      stateNode.passiveEffectDuration = 0;\n    }\n  }\n  const nextProps = workInProgress.pendingProps;\n  const nextChildren = nextProps.children;\n  reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n  return workInProgress.child;\n}\n\nfunction markRef(current: Fiber | null, workInProgress: Fiber) {\n  const ref = workInProgress.ref;\n  if (\n    (current === null && ref !== null) ||\n    (current !== null && current.ref !== ref)\n  ) {\n    // Schedule a Ref effect\n    workInProgress.flags |= Ref;\n    if (enableSuspenseLayoutEffectSemantics) {\n      workInProgress.flags |= RefStatic;\n    }\n  }\n}\n\nfunction updateFunctionComponent(\n  current,\n  workInProgress,\n  Component,\n  nextProps: any,\n  renderLanes,\n) {\n  if (__DEV__) {\n    if (workInProgress.type !== workInProgress.elementType) {\n      // Lazy component props can't be validated in createElement\n      // because they're only guaranteed to be resolved here.\n      const innerPropTypes = Component.propTypes;\n      if (innerPropTypes) {\n        checkPropTypes(\n          innerPropTypes,\n          nextProps, // Resolved props\n          'prop',\n          getComponentNameFromType(Component),\n        );\n      }\n    }\n  }\n\n  let context;\n  if (!disableLegacyContext) {\n    const unmaskedContext = getUnmaskedContext(workInProgress, Component, true);\n    context = getMaskedContext(workInProgress, unmaskedContext);\n  }\n\n  let nextChildren;\n  prepareToReadContext(workInProgress, renderLanes);\n  if (enableSchedulingProfiler) {\n    markComponentRenderStarted(workInProgress);\n  }\n  if (__DEV__) {\n    ReactCurrentOwner.current = workInProgress;\n    setIsRendering(true);\n    nextChildren = renderWithHooks(\n      current,\n      workInProgress,\n      Component,\n      nextProps,\n      context,\n      renderLanes,\n    );\n    if (\n      debugRenderPhaseSideEffectsForStrictMode &&\n      workInProgress.mode & StrictLegacyMode\n    ) {\n      setIsStrictModeForDevtools(true);\n      try {\n        nextChildren = renderWithHooks(\n          current,\n          workInProgress,\n          Component,\n          nextProps,\n          context,\n          renderLanes,\n        );\n      } finally {\n        setIsStrictModeForDevtools(false);\n      }\n    }\n    setIsRendering(false);\n  } else {\n    nextChildren = renderWithHooks(\n      current,\n      workInProgress,\n      Component,\n      nextProps,\n      context,\n      renderLanes,\n    );\n  }\n  if (enableSchedulingProfiler) {\n    markComponentRenderStopped();\n  }\n\n  if (current !== null && !didReceiveUpdate) {\n    bailoutHooks(current, workInProgress, renderLanes);\n    return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);\n  }\n\n  // React DevTools reads this flag.\n  workInProgress.flags |= PerformedWork;\n  reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n  return workInProgress.child;\n}\n\nfunction updateClassComponent(\n  current: Fiber | null,\n  workInProgress: Fiber,\n  Component: any,\n  nextProps: any,\n  renderLanes: Lanes,\n) {\n  if (__DEV__) {\n    // This is used by DevTools to force a boundary to error.\n    switch (shouldError(workInProgress)) {\n      case false: {\n        const instance = workInProgress.stateNode;\n        const ctor = workInProgress.type;\n        // TODO This way of resetting the error boundary state is a hack.\n        // Is there a better way to do this?\n        const tempInstance = new ctor(\n          workInProgress.memoizedProps,\n          instance.context,\n        );\n        const state = tempInstance.state;\n        instance.updater.enqueueSetState(instance, state, null);\n        break;\n      }\n      case true: {\n        workInProgress.flags |= DidCapture;\n        workInProgress.flags |= ShouldCapture;\n        const error = new Error('Simulated error coming from DevTools');\n        const lane = pickArbitraryLane(renderLanes);\n        workInProgress.lanes = mergeLanes(workInProgress.lanes, lane);\n        // Schedule the error boundary to re-render using updated state\n        const update = createClassErrorUpdate(\n          workInProgress,\n          createCapturedValue(error, workInProgress),\n          lane,\n        );\n        enqueueCapturedUpdate(workInProgress, update);\n        break;\n      }\n    }\n\n    if (workInProgress.type !== workInProgress.elementType) {\n      // Lazy component props can't be validated in createElement\n      // because they're only guaranteed to be resolved here.\n      const innerPropTypes = Component.propTypes;\n      if (innerPropTypes) {\n        checkPropTypes(\n          innerPropTypes,\n          nextProps, // Resolved props\n          'prop',\n          getComponentNameFromType(Component),\n        );\n      }\n    }\n  }\n\n  // Push context providers early to prevent context stack mismatches.\n  // During mounting we don't know the child context yet as the instance doesn't exist.\n  // We will invalidate the child context in finishClassComponent() right after rendering.\n  let hasContext;\n  if (isLegacyContextProvider(Component)) {\n    hasContext = true;\n    pushLegacyContextProvider(workInProgress);\n  } else {\n    hasContext = false;\n  }\n  prepareToReadContext(workInProgress, renderLanes);\n\n  const instance = workInProgress.stateNode;\n  let shouldUpdate;\n  if (instance === null) {\n    if (current !== null) {\n      // A class component without an instance only mounts if it suspended\n      // inside a non-concurrent tree, in an inconsistent state. We want to\n      // treat it like a new mount, even though an empty version of it already\n      // committed. Disconnect the alternate pointers.\n      current.alternate = null;\n      workInProgress.alternate = null;\n      // Since this is conceptually a new fiber, schedule a Placement effect\n      workInProgress.flags |= Placement;\n    }\n    // In the initial pass we might need to construct the instance.\n    constructClassInstance(workInProgress, Component, nextProps);\n    mountClassInstance(workInProgress, Component, nextProps, renderLanes);\n    shouldUpdate = true;\n  } else if (current === null) {\n    // In a resume, we'll already have an instance we can reuse.\n    shouldUpdate = resumeMountClassInstance(\n      workInProgress,\n      Component,\n      nextProps,\n      renderLanes,\n    );\n  } else {\n    shouldUpdate = updateClassInstance(\n      current,\n      workInProgress,\n      Component,\n      nextProps,\n      renderLanes,\n    );\n  }\n  const nextUnitOfWork = finishClassComponent(\n    current,\n    workInProgress,\n    Component,\n    shouldUpdate,\n    hasContext,\n    renderLanes,\n  );\n  if (__DEV__) {\n    const inst = workInProgress.stateNode;\n    if (shouldUpdate && inst.props !== nextProps) {\n      if (!didWarnAboutReassigningProps) {\n        console.error(\n          'It looks like %s is reassigning its own `this.props` while rendering. ' +\n            'This is not supported and can lead to confusing bugs.',\n          getComponentNameFromFiber(workInProgress) || 'a component',\n        );\n      }\n      didWarnAboutReassigningProps = true;\n    }\n  }\n  return nextUnitOfWork;\n}\n\nfunction finishClassComponent(\n  current: Fiber | null,\n  workInProgress: Fiber,\n  Component: any,\n  shouldUpdate: boolean,\n  hasContext: boolean,\n  renderLanes: Lanes,\n) {\n  // Refs should update even if shouldComponentUpdate returns false\n  markRef(current, workInProgress);\n\n  const didCaptureError = (workInProgress.flags & DidCapture) !== NoFlags;\n\n  if (!shouldUpdate && !didCaptureError) {\n    // Context providers should defer to sCU for rendering\n    if (hasContext) {\n      invalidateContextProvider(workInProgress, Component, false);\n    }\n\n    return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);\n  }\n\n  const instance = workInProgress.stateNode;\n\n  // Rerender\n  ReactCurrentOwner.current = workInProgress;\n  let nextChildren;\n  if (\n    didCaptureError &&\n    typeof Component.getDerivedStateFromError !== 'function'\n  ) {\n    // If we captured an error, but getDerivedStateFromError is not defined,\n    // unmount all the children. componentDidCatch will schedule an update to\n    // re-render a fallback. This is temporary until we migrate everyone to\n    // the new API.\n    // TODO: Warn in a future release.\n    nextChildren = null;\n\n    if (enableProfilerTimer) {\n      stopProfilerTimerIfRunning(workInProgress);\n    }\n  } else {\n    if (enableSchedulingProfiler) {\n      markComponentRenderStarted(workInProgress);\n    }\n    if (__DEV__) {\n      setIsRendering(true);\n      nextChildren = instance.render();\n      if (\n        debugRenderPhaseSideEffectsForStrictMode &&\n        workInProgress.mode & StrictLegacyMode\n      ) {\n        setIsStrictModeForDevtools(true);\n        try {\n          instance.render();\n        } finally {\n          setIsStrictModeForDevtools(false);\n        }\n      }\n      setIsRendering(false);\n    } else {\n      nextChildren = instance.render();\n    }\n    if (enableSchedulingProfiler) {\n      markComponentRenderStopped();\n    }\n  }\n\n  // React DevTools reads this flag.\n  workInProgress.flags |= PerformedWork;\n  if (current !== null && didCaptureError) {\n    // If we're recovering from an error, reconcile without reusing any of\n    // the existing children. Conceptually, the normal children and the children\n    // that are shown on error are two different sets, so we shouldn't reuse\n    // normal children even if their identities match.\n    forceUnmountCurrentAndReconcile(\n      current,\n      workInProgress,\n      nextChildren,\n      renderLanes,\n    );\n  } else {\n    reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n  }\n\n  // Memoize state using the values we just used to render.\n  // TODO: Restructure so we never read values from the instance.\n  workInProgress.memoizedState = instance.state;\n\n  // The context might have changed so we need to recalculate it.\n  if (hasContext) {\n    invalidateContextProvider(workInProgress, Component, true);\n  }\n\n  return workInProgress.child;\n}\n\nfunction pushHostRootContext(workInProgress) {\n  const root = (workInProgress.stateNode: FiberRoot);\n  if (root.pendingContext) {\n    pushTopLevelContextObject(\n      workInProgress,\n      root.pendingContext,\n      root.pendingContext !== root.context,\n    );\n  } else if (root.context) {\n    // Should always be set\n    pushTopLevelContextObject(workInProgress, root.context, false);\n  }\n  pushHostContainer(workInProgress, root.containerInfo);\n}\n\nfunction updateHostRoot(current, workInProgress, renderLanes) {\n  pushHostRootContext(workInProgress);\n  const updateQueue = workInProgress.updateQueue;\n  invariant(\n    current !== null && updateQueue !== null,\n    'If the root does not have an updateQueue, we should have already ' +\n      'bailed out. This error is likely caused by a bug in React. Please ' +\n      'file an issue.',\n  );\n  const nextProps = workInProgress.pendingProps;\n  const prevState = workInProgress.memoizedState;\n  const prevChildren = prevState.element;\n  cloneUpdateQueue(current, workInProgress);\n  processUpdateQueue(workInProgress, nextProps, null, renderLanes);\n  const nextState = workInProgress.memoizedState;\n\n  const root: FiberRoot = workInProgress.stateNode;\n\n  if (enableCache) {\n    const nextCache: Cache = nextState.cache;\n    pushRootCachePool(root);\n    pushCacheProvider(workInProgress, nextCache);\n    if (nextCache !== prevState.cache) {\n      // The root cache refreshed.\n      propagateContextChange(workInProgress, CacheContext, renderLanes);\n    }\n  }\n\n  // Caution: React DevTools currently depends on this property\n  // being called \"element\".\n  const nextChildren = nextState.element;\n  if (nextChildren === prevChildren) {\n    resetHydrationState();\n    return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);\n  }\n  if (root.hydrate && enterHydrationState(workInProgress)) {\n    // If we don't have any current children this might be the first pass.\n    // We always try to hydrate. If this isn't a hydration pass there won't\n    // be any children to hydrate which is effectively the same thing as\n    // not hydrating.\n\n    if (supportsHydration) {\n      const mutableSourceEagerHydrationData =\n        root.mutableSourceEagerHydrationData;\n      if (mutableSourceEagerHydrationData != null) {\n        for (let i = 0; i < mutableSourceEagerHydrationData.length; i += 2) {\n          const mutableSource = ((mutableSourceEagerHydrationData[\n            i\n          ]: any): MutableSource<any>);\n          const version = mutableSourceEagerHydrationData[i + 1];\n          setWorkInProgressVersion(mutableSource, version);\n        }\n      }\n    }\n\n    const child = mountChildFibers(\n      workInProgress,\n      null,\n      nextChildren,\n      renderLanes,\n    );\n    workInProgress.child = child;\n\n    let node = child;\n    while (node) {\n      // Mark each child as hydrating. This is a fast path to know whether this\n      // tree is part of a hydrating tree. This is used to determine if a child\n      // node has fully mounted yet, and for scheduling event replaying.\n      // Conceptually this is similar to Placement in that a new subtree is\n      // inserted into the React tree here. It just happens to not need DOM\n      // mutations because it already exists.\n      node.flags = (node.flags & ~Placement) | Hydrating;\n      node = node.sibling;\n    }\n  } else {\n    // Otherwise reset hydration state in case we aborted and resumed another\n    // root.\n    reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n    resetHydrationState();\n  }\n  return workInProgress.child;\n}\n\nfunction updateHostComponent(\n  current: Fiber | null,\n  workInProgress: Fiber,\n  renderLanes: Lanes,\n) {\n  pushHostContext(workInProgress);\n\n  if (current === null) {\n    tryToClaimNextHydratableInstance(workInProgress);\n  }\n\n  const type = workInProgress.type;\n  const nextProps = workInProgress.pendingProps;\n  const prevProps = current !== null ? current.memoizedProps : null;\n\n  let nextChildren = nextProps.children;\n  const isDirectTextChild = shouldSetTextContent(type, nextProps);\n\n  if (isDirectTextChild) {\n    // We special case a direct text child of a host node. This is a common\n    // case. We won't handle it as a reified child. We will instead handle\n    // this in the host environment that also has access to this prop. That\n    // avoids allocating another HostText fiber and traversing it.\n    nextChildren = null;\n  } else if (prevProps !== null && shouldSetTextContent(type, prevProps)) {\n    // If we're switching from a direct text child to a normal child, or to\n    // empty, we need to schedule the text content to be reset.\n    workInProgress.flags |= ContentReset;\n  }\n\n  markRef(current, workInProgress);\n  reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n  return workInProgress.child;\n}\n\nfunction updateHostText(current, workInProgress) {\n  if (current === null) {\n    tryToClaimNextHydratableInstance(workInProgress);\n  }\n  // Nothing to do here. This is terminal. We'll do the completion step\n  // immediately after.\n  return null;\n}\n\nfunction mountLazyComponent(\n  _current,\n  workInProgress,\n  elementType,\n  renderLanes,\n) {\n  if (_current !== null) {\n    // A lazy component only mounts if it suspended inside a non-\n    // concurrent tree, in an inconsistent state. We want to treat it like\n    // a new mount, even though an empty version of it already committed.\n    // Disconnect the alternate pointers.\n    _current.alternate = null;\n    workInProgress.alternate = null;\n    // Since this is conceptually a new fiber, schedule a Placement effect\n    workInProgress.flags |= Placement;\n  }\n\n  const props = workInProgress.pendingProps;\n  const lazyComponent: LazyComponentType<any, any> = elementType;\n  const payload = lazyComponent._payload;\n  const init = lazyComponent._init;\n  let Component = init(payload);\n  // Store the unwrapped component in the type.\n  workInProgress.type = Component;\n  const resolvedTag = (workInProgress.tag = resolveLazyComponentTag(Component));\n  const resolvedProps = resolveDefaultProps(Component, props);\n  let child;\n  switch (resolvedTag) {\n    case FunctionComponent: {\n      if (__DEV__) {\n        validateFunctionComponentInDev(workInProgress, Component);\n        workInProgress.type = Component = resolveFunctionForHotReloading(\n          Component,\n        );\n      }\n      child = updateFunctionComponent(\n        null,\n        workInProgress,\n        Component,\n        resolvedProps,\n        renderLanes,\n      );\n      return child;\n    }\n    case ClassComponent: {\n      if (__DEV__) {\n        workInProgress.type = Component = resolveClassForHotReloading(\n          Component,\n        );\n      }\n      child = updateClassComponent(\n        null,\n        workInProgress,\n        Component,\n        resolvedProps,\n        renderLanes,\n      );\n      return child;\n    }\n    case ForwardRef: {\n      if (__DEV__) {\n        workInProgress.type = Component = resolveForwardRefForHotReloading(\n          Component,\n        );\n      }\n      child = updateForwardRef(\n        null,\n        workInProgress,\n        Component,\n        resolvedProps,\n        renderLanes,\n      );\n      return child;\n    }\n    case MemoComponent: {\n      if (__DEV__) {\n        if (workInProgress.type !== workInProgress.elementType) {\n          const outerPropTypes = Component.propTypes;\n          if (outerPropTypes) {\n            checkPropTypes(\n              outerPropTypes,\n              resolvedProps, // Resolved for outer only\n              'prop',\n              getComponentNameFromType(Component),\n            );\n          }\n        }\n      }\n      child = updateMemoComponent(\n        null,\n        workInProgress,\n        Component,\n        resolveDefaultProps(Component.type, resolvedProps), // The inner type can have defaults too\n        renderLanes,\n      );\n      return child;\n    }\n  }\n  let hint = '';\n  if (__DEV__) {\n    if (\n      Component !== null &&\n      typeof Component === 'object' &&\n      Component.$$typeof === REACT_LAZY_TYPE\n    ) {\n      hint = ' Did you wrap a component in React.lazy() more than once?';\n    }\n  }\n  // This message intentionally doesn't mention ForwardRef or MemoComponent\n  // because the fact that it's a separate type of work is an\n  // implementation detail.\n  invariant(\n    false,\n    'Element type is invalid. Received a promise that resolves to: %s. ' +\n      'Lazy element type must resolve to a class or function.%s',\n    Component,\n    hint,\n  );\n}\n\nfunction mountIncompleteClassComponent(\n  _current,\n  workInProgress,\n  Component,\n  nextProps,\n  renderLanes,\n) {\n  if (_current !== null) {\n    // An incomplete component only mounts if it suspended inside a non-\n    // concurrent tree, in an inconsistent state. We want to treat it like\n    // a new mount, even though an empty version of it already committed.\n    // Disconnect the alternate pointers.\n    _current.alternate = null;\n    workInProgress.alternate = null;\n    // Since this is conceptually a new fiber, schedule a Placement effect\n    workInProgress.flags |= Placement;\n  }\n\n  // Promote the fiber to a class and try rendering again.\n  workInProgress.tag = ClassComponent;\n\n  // The rest of this function is a fork of `updateClassComponent`\n\n  // Push context providers early to prevent context stack mismatches.\n  // During mounting we don't know the child context yet as the instance doesn't exist.\n  // We will invalidate the child context in finishClassComponent() right after rendering.\n  let hasContext;\n  if (isLegacyContextProvider(Component)) {\n    hasContext = true;\n    pushLegacyContextProvider(workInProgress);\n  } else {\n    hasContext = false;\n  }\n  prepareToReadContext(workInProgress, renderLanes);\n\n  constructClassInstance(workInProgress, Component, nextProps);\n  mountClassInstance(workInProgress, Component, nextProps, renderLanes);\n\n  return finishClassComponent(\n    null,\n    workInProgress,\n    Component,\n    true,\n    hasContext,\n    renderLanes,\n  );\n}\n\nfunction mountIndeterminateComponent(\n  _current,\n  workInProgress,\n  Component,\n  renderLanes,\n) {\n  if (_current !== null) {\n    // An indeterminate component only mounts if it suspended inside a non-\n    // concurrent tree, in an inconsistent state. We want to treat it like\n    // a new mount, even though an empty version of it already committed.\n    // Disconnect the alternate pointers.\n    _current.alternate = null;\n    workInProgress.alternate = null;\n    // Since this is conceptually a new fiber, schedule a Placement effect\n    workInProgress.flags |= Placement;\n  }\n\n  const props = workInProgress.pendingProps;\n  let context;\n  if (!disableLegacyContext) {\n    const unmaskedContext = getUnmaskedContext(\n      workInProgress,\n      Component,\n      false,\n    );\n    context = getMaskedContext(workInProgress, unmaskedContext);\n  }\n\n  prepareToReadContext(workInProgress, renderLanes);\n  let value;\n\n  if (enableSchedulingProfiler) {\n    markComponentRenderStarted(workInProgress);\n  }\n  if (__DEV__) {\n    if (\n      Component.prototype &&\n      typeof Component.prototype.render === 'function'\n    ) {\n      const componentName = getComponentNameFromType(Component) || 'Unknown';\n\n      if (!didWarnAboutBadClass[componentName]) {\n        console.error(\n          \"The <%s /> component appears to have a render method, but doesn't extend React.Component. \" +\n            'This is likely to cause errors. Change %s to extend React.Component instead.',\n          componentName,\n          componentName,\n        );\n        didWarnAboutBadClass[componentName] = true;\n      }\n    }\n\n    if (workInProgress.mode & StrictLegacyMode) {\n      ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress, null);\n    }\n\n    setIsRendering(true);\n    ReactCurrentOwner.current = workInProgress;\n    value = renderWithHooks(\n      null,\n      workInProgress,\n      Component,\n      props,\n      context,\n      renderLanes,\n    );\n    setIsRendering(false);\n  } else {\n    value = renderWithHooks(\n      null,\n      workInProgress,\n      Component,\n      props,\n      context,\n      renderLanes,\n    );\n  }\n  if (enableSchedulingProfiler) {\n    markComponentRenderStopped();\n  }\n\n  // React DevTools reads this flag.\n  workInProgress.flags |= PerformedWork;\n\n  if (__DEV__) {\n    // Support for module components is deprecated and is removed behind a flag.\n    // Whether or not it would crash later, we want to show a good message in DEV first.\n    if (\n      typeof value === 'object' &&\n      value !== null &&\n      typeof value.render === 'function' &&\n      value.$$typeof === undefined\n    ) {\n      const componentName = getComponentNameFromType(Component) || 'Unknown';\n      if (!didWarnAboutModulePatternComponent[componentName]) {\n        console.error(\n          'The <%s /> component appears to be a function component that returns a class instance. ' +\n            'Change %s to a class that extends React.Component instead. ' +\n            \"If you can't use a class try assigning the prototype on the function as a workaround. \" +\n            \"`%s.prototype = React.Component.prototype`. Don't use an arrow function since it \" +\n            'cannot be called with `new` by React.',\n          componentName,\n          componentName,\n          componentName,\n        );\n        didWarnAboutModulePatternComponent[componentName] = true;\n      }\n    }\n  }\n\n  if (\n    // Run these checks in production only if the flag is off.\n    // Eventually we'll delete this branch altogether.\n    !disableModulePatternComponents &&\n    typeof value === 'object' &&\n    value !== null &&\n    typeof value.render === 'function' &&\n    value.$$typeof === undefined\n  ) {\n    if (__DEV__) {\n      const componentName = getComponentNameFromType(Component) || 'Unknown';\n      if (!didWarnAboutModulePatternComponent[componentName]) {\n        console.error(\n          'The <%s /> component appears to be a function component that returns a class instance. ' +\n            'Change %s to a class that extends React.Component instead. ' +\n            \"If you can't use a class try assigning the prototype on the function as a workaround. \" +\n            \"`%s.prototype = React.Component.prototype`. Don't use an arrow function since it \" +\n            'cannot be called with `new` by React.',\n          componentName,\n          componentName,\n          componentName,\n        );\n        didWarnAboutModulePatternComponent[componentName] = true;\n      }\n    }\n\n    // Proceed under the assumption that this is a class instance\n    workInProgress.tag = ClassComponent;\n\n    // Throw out any hooks that were used.\n    workInProgress.memoizedState = null;\n    workInProgress.updateQueue = null;\n\n    // Push context providers early to prevent context stack mismatches.\n    // During mounting we don't know the child context yet as the instance doesn't exist.\n    // We will invalidate the child context in finishClassComponent() right after rendering.\n    let hasContext = false;\n    if (isLegacyContextProvider(Component)) {\n      hasContext = true;\n      pushLegacyContextProvider(workInProgress);\n    } else {\n      hasContext = false;\n    }\n\n    workInProgress.memoizedState =\n      value.state !== null && value.state !== undefined ? value.state : null;\n\n    initializeUpdateQueue(workInProgress);\n\n    adoptClassInstance(workInProgress, value);\n    mountClassInstance(workInProgress, Component, props, renderLanes);\n    return finishClassComponent(\n      null,\n      workInProgress,\n      Component,\n      true,\n      hasContext,\n      renderLanes,\n    );\n  } else {\n    // Proceed under the assumption that this is a function component\n    workInProgress.tag = FunctionComponent;\n    if (__DEV__) {\n      if (disableLegacyContext && Component.contextTypes) {\n        console.error(\n          '%s uses the legacy contextTypes API which is no longer supported. ' +\n            'Use React.createContext() with React.useContext() instead.',\n          getComponentNameFromType(Component) || 'Unknown',\n        );\n      }\n\n      if (\n        debugRenderPhaseSideEffectsForStrictMode &&\n        workInProgress.mode & StrictLegacyMode\n      ) {\n        setIsStrictModeForDevtools(true);\n        try {\n          value = renderWithHooks(\n            null,\n            workInProgress,\n            Component,\n            props,\n            context,\n            renderLanes,\n          );\n        } finally {\n          setIsStrictModeForDevtools(false);\n        }\n      }\n    }\n    reconcileChildren(null, workInProgress, value, renderLanes);\n    if (__DEV__) {\n      validateFunctionComponentInDev(workInProgress, Component);\n    }\n    return workInProgress.child;\n  }\n}\n\nfunction validateFunctionComponentInDev(workInProgress: Fiber, Component: any) {\n  if (__DEV__) {\n    if (Component) {\n      if (Component.childContextTypes) {\n        console.error(\n          '%s(...): childContextTypes cannot be defined on a function component.',\n          Component.displayName || Component.name || 'Component',\n        );\n      }\n    }\n    if (workInProgress.ref !== null) {\n      let info = '';\n      const ownerName = getCurrentFiberOwnerNameInDevOrNull();\n      if (ownerName) {\n        info += '\\n\\nCheck the render method of `' + ownerName + '`.';\n      }\n\n      let warningKey = ownerName || '';\n      const debugSource = workInProgress._debugSource;\n      if (debugSource) {\n        warningKey = debugSource.fileName + ':' + debugSource.lineNumber;\n      }\n      if (!didWarnAboutFunctionRefs[warningKey]) {\n        didWarnAboutFunctionRefs[warningKey] = true;\n        console.error(\n          'Function components cannot be given refs. ' +\n            'Attempts to access this ref will fail. ' +\n            'Did you mean to use React.forwardRef()?%s',\n          info,\n        );\n      }\n    }\n\n    if (\n      warnAboutDefaultPropsOnFunctionComponents &&\n      Component.defaultProps !== undefined\n    ) {\n      const componentName = getComponentNameFromType(Component) || 'Unknown';\n\n      if (!didWarnAboutDefaultPropsOnFunctionComponent[componentName]) {\n        console.error(\n          '%s: Support for defaultProps will be removed from function components ' +\n            'in a future major release. Use JavaScript default parameters instead.',\n          componentName,\n        );\n        didWarnAboutDefaultPropsOnFunctionComponent[componentName] = true;\n      }\n    }\n\n    if (typeof Component.getDerivedStateFromProps === 'function') {\n      const componentName = getComponentNameFromType(Component) || 'Unknown';\n\n      if (!didWarnAboutGetDerivedStateOnFunctionComponent[componentName]) {\n        console.error(\n          '%s: Function components do not support getDerivedStateFromProps.',\n          componentName,\n        );\n        didWarnAboutGetDerivedStateOnFunctionComponent[componentName] = true;\n      }\n    }\n\n    if (\n      typeof Component.contextType === 'object' &&\n      Component.contextType !== null\n    ) {\n      const componentName = getComponentNameFromType(Component) || 'Unknown';\n\n      if (!didWarnAboutContextTypeOnFunctionComponent[componentName]) {\n        console.error(\n          '%s: Function components do not support contextType.',\n          componentName,\n        );\n        didWarnAboutContextTypeOnFunctionComponent[componentName] = true;\n      }\n    }\n  }\n}\n\nconst SUSPENDED_MARKER: SuspenseState = {\n  dehydrated: null,\n  retryLane: NoLane,\n};\n\nfunction mountSuspenseOffscreenState(renderLanes: Lanes): OffscreenState {\n  return {\n    baseLanes: renderLanes,\n    cachePool: getSuspendedCachePool(),\n  };\n}\n\nfunction updateSuspenseOffscreenState(\n  prevOffscreenState: OffscreenState,\n  renderLanes: Lanes,\n): OffscreenState {\n  let cachePool: SpawnedCachePool | null = null;\n  if (enableCache) {\n    const prevCachePool: SpawnedCachePool | null = prevOffscreenState.cachePool;\n    if (prevCachePool !== null) {\n      const parentCache = isPrimaryRenderer\n        ? CacheContext._currentValue\n        : CacheContext._currentValue2;\n      if (prevCachePool.parent !== parentCache) {\n        // Detected a refresh in the parent. This overrides any previously\n        // suspended cache.\n        cachePool = {\n          parent: parentCache,\n          pool: parentCache,\n        };\n      } else {\n        // We can reuse the cache from last time. The only thing that would have\n        // overridden it is a parent refresh, which we checked for above.\n        cachePool = prevCachePool;\n      }\n    } else {\n      // If there's no previous cache pool, grab the current one.\n      cachePool = getSuspendedCachePool();\n    }\n  }\n  return {\n    baseLanes: mergeLanes(prevOffscreenState.baseLanes, renderLanes),\n    cachePool,\n  };\n}\n\n// TODO: Probably should inline this back\nfunction shouldRemainOnFallback(\n  suspenseContext: SuspenseContext,\n  current: null | Fiber,\n  workInProgress: Fiber,\n  renderLanes: Lanes,\n) {\n  // If we're already showing a fallback, there are cases where we need to\n  // remain on that fallback regardless of whether the content has resolved.\n  // For example, SuspenseList coordinates when nested content appears.\n  if (current !== null) {\n    const suspenseState: SuspenseState = current.memoizedState;\n    if (suspenseState === null) {\n      // Currently showing content. Don't hide it, even if ForceSuspenseFallback\n      // is true. More precise name might be \"ForceRemainSuspenseFallback\".\n      // Note: This is a factoring smell. Can't remain on a fallback if there's\n      // no fallback to remain on.\n      return false;\n    }\n  }\n\n  // Not currently showing content. Consult the Suspense context.\n  return hasSuspenseContext(\n    suspenseContext,\n    (ForceSuspenseFallback: SuspenseContext),\n  );\n}\n\nfunction getRemainingWorkInPrimaryTree(current: Fiber, renderLanes) {\n  // TODO: Should not remove render lanes that were pinged during this render\n  return removeLanes(current.childLanes, renderLanes);\n}\n\nfunction updateSuspenseComponent(current, workInProgress, renderLanes) {\n  const nextProps = workInProgress.pendingProps;\n\n  // This is used by DevTools to force a boundary to suspend.\n  if (__DEV__) {\n    if (shouldSuspend(workInProgress)) {\n      workInProgress.flags |= DidCapture;\n    }\n  }\n\n  let suspenseContext: SuspenseContext = suspenseStackCursor.current;\n\n  let showFallback = false;\n  const didSuspend = (workInProgress.flags & DidCapture) !== NoFlags;\n\n  if (\n    didSuspend ||\n    shouldRemainOnFallback(\n      suspenseContext,\n      current,\n      workInProgress,\n      renderLanes,\n    )\n  ) {\n    // Something in this boundary's subtree already suspended. Switch to\n    // rendering the fallback children.\n    showFallback = true;\n    workInProgress.flags &= ~DidCapture;\n  } else {\n    // Attempting the main content\n    if (\n      current === null ||\n      (current.memoizedState: null | SuspenseState) !== null\n    ) {\n      // This is a new mount or this boundary is already showing a fallback state.\n      // Mark this subtree context as having at least one invisible parent that could\n      // handle the fallback state.\n      // Avoided boundaries are not considered since they cannot handle preferred fallback states.\n      if (nextProps.unstable_avoidThisFallback !== true) {\n        suspenseContext = addSubtreeSuspenseContext(\n          suspenseContext,\n          InvisibleParentSuspenseContext,\n        );\n      }\n    }\n  }\n\n  suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);\n\n  pushSuspenseContext(workInProgress, suspenseContext);\n\n  // OK, the next part is confusing. We're about to reconcile the Suspense\n  // boundary's children. This involves some custom reconciliation logic. Two\n  // main reasons this is so complicated.\n  //\n  // First, Legacy Mode has different semantics for backwards compatibility. The\n  // primary tree will commit in an inconsistent state, so when we do the\n  // second pass to render the fallback, we do some exceedingly, uh, clever\n  // hacks to make that not totally break. Like transferring effects and\n  // deletions from hidden tree. In Concurrent Mode, it's much simpler,\n  // because we bailout on the primary tree completely and leave it in its old\n  // state, no effects. Same as what we do for Offscreen (except that\n  // Offscreen doesn't have the first render pass).\n  //\n  // Second is hydration. During hydration, the Suspense fiber has a slightly\n  // different layout, where the child points to a dehydrated fragment, which\n  // contains the DOM rendered by the server.\n  //\n  // Third, even if you set all that aside, Suspense is like error boundaries in\n  // that we first we try to render one tree, and if that fails, we render again\n  // and switch to a different tree. Like a try/catch block. So we have to track\n  // which branch we're currently rendering. Ideally we would model this using\n  // a stack.\n  if (current === null) {\n    // Initial mount\n    // If we're currently hydrating, try to hydrate this boundary.\n    tryToClaimNextHydratableInstance(workInProgress);\n    // This could've been a dehydrated suspense component.\n    if (enableSuspenseServerRenderer) {\n      const suspenseState: null | SuspenseState = workInProgress.memoizedState;\n      if (suspenseState !== null) {\n        const dehydrated = suspenseState.dehydrated;\n        if (dehydrated !== null) {\n          return mountDehydratedSuspenseComponent(\n            workInProgress,\n            dehydrated,\n            renderLanes,\n          );\n        }\n      }\n    }\n\n    const nextPrimaryChildren = nextProps.children;\n    const nextFallbackChildren = nextProps.fallback;\n    if (showFallback) {\n      const fallbackFragment = mountSuspenseFallbackChildren(\n        workInProgress,\n        nextPrimaryChildren,\n        nextFallbackChildren,\n        renderLanes,\n      );\n      const primaryChildFragment: Fiber = (workInProgress.child: any);\n      primaryChildFragment.memoizedState = mountSuspenseOffscreenState(\n        renderLanes,\n      );\n      workInProgress.memoizedState = SUSPENDED_MARKER;\n      return fallbackFragment;\n    } else if (typeof nextProps.unstable_expectedLoadTime === 'number') {\n      // This is a CPU-bound tree. Skip this tree and show a placeholder to\n      // unblock the surrounding content. Then immediately retry after the\n      // initial commit.\n      const fallbackFragment = mountSuspenseFallbackChildren(\n        workInProgress,\n        nextPrimaryChildren,\n        nextFallbackChildren,\n        renderLanes,\n      );\n      const primaryChildFragment: Fiber = (workInProgress.child: any);\n      primaryChildFragment.memoizedState = mountSuspenseOffscreenState(\n        renderLanes,\n      );\n      workInProgress.memoizedState = SUSPENDED_MARKER;\n\n      // Since nothing actually suspended, there will nothing to ping this to\n      // get it started back up to attempt the next item. While in terms of\n      // priority this work has the same priority as this current render, it's\n      // not part of the same transition once the transition has committed. If\n      // it's sync, we still want to yield so that it can be painted.\n      // Conceptually, this is really the same as pinging. We can use any\n      // RetryLane even if it's the one currently rendering since we're leaving\n      // it behind on this node.\n      workInProgress.lanes = SomeRetryLane;\n      return fallbackFragment;\n    } else {\n      return mountSuspensePrimaryChildren(\n        workInProgress,\n        nextPrimaryChildren,\n        renderLanes,\n      );\n    }\n  } else {\n    // This is an update.\n\n    // If the current fiber has a SuspenseState, that means it's already showing\n    // a fallback.\n    const prevState: null | SuspenseState = current.memoizedState;\n    if (prevState !== null) {\n      // The current tree is already showing a fallback\n\n      // Special path for hydration\n      if (enableSuspenseServerRenderer) {\n        const dehydrated = prevState.dehydrated;\n        if (dehydrated !== null) {\n          if (!didSuspend) {\n            return updateDehydratedSuspenseComponent(\n              current,\n              workInProgress,\n              dehydrated,\n              prevState,\n              renderLanes,\n            );\n          } else if (\n            (workInProgress.memoizedState: null | SuspenseState) !== null\n          ) {\n            // Something suspended and we should still be in dehydrated mode.\n            // Leave the existing child in place.\n            workInProgress.child = current.child;\n            // The dehydrated completion pass expects this flag to be there\n            // but the normal suspense pass doesn't.\n            workInProgress.flags |= DidCapture;\n            return null;\n          } else {\n            // Suspended but we should no longer be in dehydrated mode.\n            // Therefore we now have to render the fallback.\n            const nextPrimaryChildren = nextProps.children;\n            const nextFallbackChildren = nextProps.fallback;\n            const fallbackChildFragment = mountSuspenseFallbackAfterRetryWithoutHydrating(\n              current,\n              workInProgress,\n              nextPrimaryChildren,\n              nextFallbackChildren,\n              renderLanes,\n            );\n            const primaryChildFragment: Fiber = (workInProgress.child: any);\n            primaryChildFragment.memoizedState = mountSuspenseOffscreenState(\n              renderLanes,\n            );\n            workInProgress.memoizedState = SUSPENDED_MARKER;\n            return fallbackChildFragment;\n          }\n        }\n      }\n\n      if (showFallback) {\n        const nextFallbackChildren = nextProps.fallback;\n        const nextPrimaryChildren = nextProps.children;\n        const fallbackChildFragment = updateSuspenseFallbackChildren(\n          current,\n          workInProgress,\n          nextPrimaryChildren,\n          nextFallbackChildren,\n          renderLanes,\n        );\n        const primaryChildFragment: Fiber = (workInProgress.child: any);\n        const prevOffscreenState: OffscreenState | null = (current.child: any)\n          .memoizedState;\n        primaryChildFragment.memoizedState =\n          prevOffscreenState === null\n            ? mountSuspenseOffscreenState(renderLanes)\n            : updateSuspenseOffscreenState(prevOffscreenState, renderLanes);\n        primaryChildFragment.childLanes = getRemainingWorkInPrimaryTree(\n          current,\n          renderLanes,\n        );\n        workInProgress.memoizedState = SUSPENDED_MARKER;\n        return fallbackChildFragment;\n      } else {\n        const nextPrimaryChildren = nextProps.children;\n        const primaryChildFragment = updateSuspensePrimaryChildren(\n          current,\n          workInProgress,\n          nextPrimaryChildren,\n          renderLanes,\n        );\n        workInProgress.memoizedState = null;\n        return primaryChildFragment;\n      }\n    } else {\n      // The current tree is not already showing a fallback.\n      if (showFallback) {\n        // Timed out.\n        const nextFallbackChildren = nextProps.fallback;\n        const nextPrimaryChildren = nextProps.children;\n        const fallbackChildFragment = updateSuspenseFallbackChildren(\n          current,\n          workInProgress,\n          nextPrimaryChildren,\n          nextFallbackChildren,\n          renderLanes,\n        );\n        const primaryChildFragment: Fiber = (workInProgress.child: any);\n        const prevOffscreenState: OffscreenState | null = (current.child: any)\n          .memoizedState;\n        primaryChildFragment.memoizedState =\n          prevOffscreenState === null\n            ? mountSuspenseOffscreenState(renderLanes)\n            : updateSuspenseOffscreenState(prevOffscreenState, renderLanes);\n        primaryChildFragment.childLanes = getRemainingWorkInPrimaryTree(\n          current,\n          renderLanes,\n        );\n        // Skip the primary children, and continue working on the\n        // fallback children.\n        workInProgress.memoizedState = SUSPENDED_MARKER;\n        return fallbackChildFragment;\n      } else {\n        // Still haven't timed out. Continue rendering the children, like we\n        // normally do.\n        const nextPrimaryChildren = nextProps.children;\n        const primaryChildFragment = updateSuspensePrimaryChildren(\n          current,\n          workInProgress,\n          nextPrimaryChildren,\n          renderLanes,\n        );\n        workInProgress.memoizedState = null;\n        return primaryChildFragment;\n      }\n    }\n  }\n}\n\nfunction mountSuspensePrimaryChildren(\n  workInProgress,\n  primaryChildren,\n  renderLanes,\n) {\n  const mode = workInProgress.mode;\n  const primaryChildProps: OffscreenProps = {\n    mode: 'visible',\n    children: primaryChildren,\n  };\n  const primaryChildFragment = mountWorkInProgressOffscreenFiber(\n    primaryChildProps,\n    mode,\n    renderLanes,\n  );\n  primaryChildFragment.return = workInProgress;\n  workInProgress.child = primaryChildFragment;\n  return primaryChildFragment;\n}\n\nfunction mountSuspenseFallbackChildren(\n  workInProgress,\n  primaryChildren,\n  fallbackChildren,\n  renderLanes,\n) {\n  const mode = workInProgress.mode;\n  const progressedPrimaryFragment: Fiber | null = workInProgress.child;\n\n  const primaryChildProps: OffscreenProps = {\n    mode: 'hidden',\n    children: primaryChildren,\n  };\n\n  let primaryChildFragment;\n  let fallbackChildFragment;\n  if (\n    (mode & ConcurrentMode) === NoMode &&\n    progressedPrimaryFragment !== null\n  ) {\n    // In legacy mode, we commit the primary tree as if it successfully\n    // completed, even though it's in an inconsistent state.\n    primaryChildFragment = progressedPrimaryFragment;\n    primaryChildFragment.childLanes = NoLanes;\n    primaryChildFragment.pendingProps = primaryChildProps;\n\n    if (enableProfilerTimer && workInProgress.mode & ProfileMode) {\n      // Reset the durations from the first pass so they aren't included in the\n      // final amounts. This seems counterintuitive, since we're intentionally\n      // not measuring part of the render phase, but this makes it match what we\n      // do in Concurrent Mode.\n      primaryChildFragment.actualDuration = 0;\n      primaryChildFragment.actualStartTime = -1;\n      primaryChildFragment.selfBaseDuration = 0;\n      primaryChildFragment.treeBaseDuration = 0;\n    }\n\n    fallbackChildFragment = createFiberFromFragment(\n      fallbackChildren,\n      mode,\n      renderLanes,\n      null,\n    );\n  } else {\n    primaryChildFragment = mountWorkInProgressOffscreenFiber(\n      primaryChildProps,\n      mode,\n      NoLanes,\n    );\n    fallbackChildFragment = createFiberFromFragment(\n      fallbackChildren,\n      mode,\n      renderLanes,\n      null,\n    );\n  }\n\n  primaryChildFragment.return = workInProgress;\n  fallbackChildFragment.return = workInProgress;\n  primaryChildFragment.sibling = fallbackChildFragment;\n  workInProgress.child = primaryChildFragment;\n  return fallbackChildFragment;\n}\n\nfunction mountWorkInProgressOffscreenFiber(\n  offscreenProps: OffscreenProps,\n  mode: TypeOfMode,\n  renderLanes: Lanes,\n) {\n  // The props argument to `createFiberFromOffscreen` is `any` typed, so we use\n  // this wrapper function to constrain it.\n  return createFiberFromOffscreen(offscreenProps, mode, NoLanes, null);\n}\n\nfunction updateWorkInProgressOffscreenFiber(\n  current: Fiber,\n  offscreenProps: OffscreenProps,\n) {\n  // The props argument to `createWorkInProgress` is `any` typed, so we use this\n  // wrapper function to constrain it.\n  return createWorkInProgress(current, offscreenProps);\n}\n\nfunction updateSuspensePrimaryChildren(\n  current,\n  workInProgress,\n  primaryChildren,\n  renderLanes,\n) {\n  const currentPrimaryChildFragment: Fiber = (current.child: any);\n  const currentFallbackChildFragment: Fiber | null =\n    currentPrimaryChildFragment.sibling;\n\n  const primaryChildFragment = updateWorkInProgressOffscreenFiber(\n    currentPrimaryChildFragment,\n    {\n      mode: 'visible',\n      children: primaryChildren,\n    },\n  );\n  if ((workInProgress.mode & ConcurrentMode) === NoMode) {\n    primaryChildFragment.lanes = renderLanes;\n  }\n  primaryChildFragment.return = workInProgress;\n  primaryChildFragment.sibling = null;\n  if (currentFallbackChildFragment !== null) {\n    // Delete the fallback child fragment\n    const deletions = workInProgress.deletions;\n    if (deletions === null) {\n      workInProgress.deletions = [currentFallbackChildFragment];\n      workInProgress.flags |= ChildDeletion;\n    } else {\n      deletions.push(currentFallbackChildFragment);\n    }\n  }\n\n  workInProgress.child = primaryChildFragment;\n  return primaryChildFragment;\n}\n\nfunction updateSuspenseFallbackChildren(\n  current,\n  workInProgress,\n  primaryChildren,\n  fallbackChildren,\n  renderLanes,\n) {\n  const mode = workInProgress.mode;\n  const currentPrimaryChildFragment: Fiber = (current.child: any);\n  const currentFallbackChildFragment: Fiber | null =\n    currentPrimaryChildFragment.sibling;\n\n  const primaryChildProps: OffscreenProps = {\n    mode: 'hidden',\n    children: primaryChildren,\n  };\n\n  let primaryChildFragment;\n  if (\n    // In legacy mode, we commit the primary tree as if it successfully\n    // completed, even though it's in an inconsistent state.\n    (mode & ConcurrentMode) === NoMode &&\n    // Make sure we're on the second pass, i.e. the primary child fragment was\n    // already cloned. In legacy mode, the only case where this isn't true is\n    // when DevTools forces us to display a fallback; we skip the first render\n    // pass entirely and go straight to rendering the fallback. (In Concurrent\n    // Mode, SuspenseList can also trigger this scenario, but this is a legacy-\n    // only codepath.)\n    workInProgress.child !== currentPrimaryChildFragment\n  ) {\n    const progressedPrimaryFragment: Fiber = (workInProgress.child: any);\n    primaryChildFragment = progressedPrimaryFragment;\n    primaryChildFragment.childLanes = NoLanes;\n    primaryChildFragment.pendingProps = primaryChildProps;\n\n    if (enableProfilerTimer && workInProgress.mode & ProfileMode) {\n      // Reset the durations from the first pass so they aren't included in the\n      // final amounts. This seems counterintuitive, since we're intentionally\n      // not measuring part of the render phase, but this makes it match what we\n      // do in Concurrent Mode.\n      primaryChildFragment.actualDuration = 0;\n      primaryChildFragment.actualStartTime = -1;\n      primaryChildFragment.selfBaseDuration =\n        currentPrimaryChildFragment.selfBaseDuration;\n      primaryChildFragment.treeBaseDuration =\n        currentPrimaryChildFragment.treeBaseDuration;\n    }\n\n    if (enablePersistentOffscreenHostContainer && supportsPersistence) {\n      // In persistent mode, the offscreen children are wrapped in a host node.\n      // We need to complete it now, because we're going to skip over its normal\n      // complete phase and go straight to rendering the fallback.\n      const currentOffscreenContainer = currentPrimaryChildFragment.child;\n      const offscreenContainer: Fiber = (primaryChildFragment.child: any);\n      const containerProps = getOffscreenContainerProps(\n        'hidden',\n        primaryChildren,\n      );\n      offscreenContainer.pendingProps = containerProps;\n      offscreenContainer.memoizedProps = containerProps;\n      completeSuspendedOffscreenHostContainer(\n        currentOffscreenContainer,\n        offscreenContainer,\n      );\n    }\n\n    // The fallback fiber was added as a deletion during the first pass.\n    // However, since we're going to remain on the fallback, we no longer want\n    // to delete it.\n    workInProgress.deletions = null;\n  } else {\n    primaryChildFragment = updateWorkInProgressOffscreenFiber(\n      currentPrimaryChildFragment,\n      primaryChildProps,\n    );\n\n    if (enablePersistentOffscreenHostContainer && supportsPersistence) {\n      // In persistent mode, the offscreen children are wrapped in a host node.\n      // We need to complete it now, because we're going to skip over its normal\n      // complete phase and go straight to rendering the fallback.\n      const currentOffscreenContainer = currentPrimaryChildFragment.child;\n      if (currentOffscreenContainer !== null) {\n        const isHidden = true;\n        const offscreenContainer = reconcileOffscreenHostContainer(\n          currentPrimaryChildFragment,\n          primaryChildFragment,\n          isHidden,\n          primaryChildren,\n          renderLanes,\n        );\n        offscreenContainer.memoizedProps = offscreenContainer.pendingProps;\n        completeSuspendedOffscreenHostContainer(\n          currentOffscreenContainer,\n          offscreenContainer,\n        );\n      }\n    }\n\n    // Since we're reusing a current tree, we need to reuse the flags, too.\n    // (We don't do this in legacy mode, because in legacy mode we don't re-use\n    // the current tree; see previous branch.)\n    primaryChildFragment.subtreeFlags =\n      currentPrimaryChildFragment.subtreeFlags & StaticMask;\n  }\n  let fallbackChildFragment;\n  if (currentFallbackChildFragment !== null) {\n    fallbackChildFragment = createWorkInProgress(\n      currentFallbackChildFragment,\n      fallbackChildren,\n    );\n  } else {\n    fallbackChildFragment = createFiberFromFragment(\n      fallbackChildren,\n      mode,\n      renderLanes,\n      null,\n    );\n    // Needs a placement effect because the parent (the Suspense boundary) already\n    // mounted but this is a new fiber.\n    fallbackChildFragment.flags |= Placement;\n  }\n\n  fallbackChildFragment.return = workInProgress;\n  primaryChildFragment.return = workInProgress;\n  primaryChildFragment.sibling = fallbackChildFragment;\n  workInProgress.child = primaryChildFragment;\n\n  return fallbackChildFragment;\n}\n\nfunction retrySuspenseComponentWithoutHydrating(\n  current: Fiber,\n  workInProgress: Fiber,\n  renderLanes: Lanes,\n) {\n  // This will add the old fiber to the deletion list\n  reconcileChildFibers(workInProgress, current.child, null, renderLanes);\n\n  // We're now not suspended nor dehydrated.\n  const nextProps = workInProgress.pendingProps;\n  const primaryChildren = nextProps.children;\n  const primaryChildFragment = mountSuspensePrimaryChildren(\n    workInProgress,\n    primaryChildren,\n    renderLanes,\n  );\n  // Needs a placement effect because the parent (the Suspense boundary) already\n  // mounted but this is a new fiber.\n  primaryChildFragment.flags |= Placement;\n  workInProgress.memoizedState = null;\n\n  return primaryChildFragment;\n}\n\nfunction mountSuspenseFallbackAfterRetryWithoutHydrating(\n  current,\n  workInProgress,\n  primaryChildren,\n  fallbackChildren,\n  renderLanes,\n) {\n  const fiberMode = workInProgress.mode;\n  const primaryChildProps: OffscreenProps = {\n    mode: 'visible',\n    children: primaryChildren,\n  };\n  const primaryChildFragment = mountWorkInProgressOffscreenFiber(\n    primaryChildProps,\n    fiberMode,\n    NoLanes,\n  );\n  const fallbackChildFragment = createFiberFromFragment(\n    fallbackChildren,\n    fiberMode,\n    renderLanes,\n    null,\n  );\n  // Needs a placement effect because the parent (the Suspense\n  // boundary) already mounted but this is a new fiber.\n  fallbackChildFragment.flags |= Placement;\n\n  primaryChildFragment.return = workInProgress;\n  fallbackChildFragment.return = workInProgress;\n  primaryChildFragment.sibling = fallbackChildFragment;\n  workInProgress.child = primaryChildFragment;\n\n  if ((workInProgress.mode & ConcurrentMode) !== NoMode) {\n    // We will have dropped the effect list which contains the\n    // deletion. We need to reconcile to delete the current child.\n    reconcileChildFibers(workInProgress, current.child, null, renderLanes);\n  }\n\n  return fallbackChildFragment;\n}\n\nfunction mountDehydratedSuspenseComponent(\n  workInProgress: Fiber,\n  suspenseInstance: SuspenseInstance,\n  renderLanes: Lanes,\n): null | Fiber {\n  // During the first pass, we'll bail out and not drill into the children.\n  // Instead, we'll leave the content in place and try to hydrate it later.\n  if ((workInProgress.mode & ConcurrentMode) === NoMode) {\n    if (__DEV__) {\n      console.error(\n        'Cannot hydrate Suspense in legacy mode. Switch from ' +\n          'ReactDOM.hydrate(element, container) to ' +\n          'ReactDOM.createRoot(container, { hydrate: true })' +\n          '.render(element) or remove the Suspense components from ' +\n          'the server rendered components.',\n      );\n    }\n    workInProgress.lanes = laneToLanes(SyncLane);\n  } else if (isSuspenseInstanceFallback(suspenseInstance)) {\n    // This is a client-only boundary. Since we won't get any content from the server\n    // for this, we need to schedule that at a higher priority based on when it would\n    // have timed out. In theory we could render it in this pass but it would have the\n    // wrong priority associated with it and will prevent hydration of parent path.\n    // Instead, we'll leave work left on it to render it in a separate commit.\n\n    // TODO This time should be the time at which the server rendered response that is\n    // a parent to this boundary was displayed. However, since we currently don't have\n    // a protocol to transfer that time, we'll just estimate it by using the current\n    // time. This will mean that Suspense timeouts are slightly shifted to later than\n    // they should be.\n    // Schedule a normal pri update to render this content.\n    workInProgress.lanes = laneToLanes(DefaultHydrationLane);\n  } else {\n    // We'll continue hydrating the rest at offscreen priority since we'll already\n    // be showing the right content coming from the server, it is no rush.\n    workInProgress.lanes = laneToLanes(OffscreenLane);\n  }\n  return null;\n}\n\nfunction updateDehydratedSuspenseComponent(\n  current: Fiber,\n  workInProgress: Fiber,\n  suspenseInstance: SuspenseInstance,\n  suspenseState: SuspenseState,\n  renderLanes: Lanes,\n): null | Fiber {\n  // We should never be hydrating at this point because it is the first pass,\n  // but after we've already committed once.\n  warnIfHydrating();\n\n  if ((getExecutionContext() & RetryAfterError) !== NoContext) {\n    return retrySuspenseComponentWithoutHydrating(\n      current,\n      workInProgress,\n      renderLanes,\n    );\n  }\n\n  if ((workInProgress.mode & ConcurrentMode) === NoMode) {\n    return retrySuspenseComponentWithoutHydrating(\n      current,\n      workInProgress,\n      renderLanes,\n    );\n  }\n\n  if (isSuspenseInstanceFallback(suspenseInstance)) {\n    // This boundary is in a permanent fallback state. In this case, we'll never\n    // get an update and we'll never be able to hydrate the final content. Let's just try the\n    // client side render instead.\n    return retrySuspenseComponentWithoutHydrating(\n      current,\n      workInProgress,\n      renderLanes,\n    );\n  }\n\n  if (\n    enableLazyContextPropagation &&\n    // TODO: Factoring is a little weird, since we check this right below, too.\n    // But don't want to re-arrange the if-else chain until/unless this\n    // feature lands.\n    !didReceiveUpdate\n  ) {\n    // We need to check if any children have context before we decide to bail\n    // out, so propagate the changes now.\n    lazilyPropagateParentContextChanges(current, workInProgress, renderLanes);\n  }\n\n  // We use lanes to indicate that a child might depend on context, so if\n  // any context has changed, we need to treat is as if the input might have changed.\n  const hasContextChanged = includesSomeLane(renderLanes, current.childLanes);\n  if (didReceiveUpdate || hasContextChanged) {\n    // This boundary has changed since the first render. This means that we are now unable to\n    // hydrate it. We might still be able to hydrate it using a higher priority lane.\n    const root = getWorkInProgressRoot();\n    if (root !== null) {\n      const attemptHydrationAtLane = getBumpedLaneForHydration(\n        root,\n        renderLanes,\n      );\n      if (\n        attemptHydrationAtLane !== NoLane &&\n        attemptHydrationAtLane !== suspenseState.retryLane\n      ) {\n        // Intentionally mutating since this render will get interrupted. This\n        // is one of the very rare times where we mutate the current tree\n        // during the render phase.\n        suspenseState.retryLane = attemptHydrationAtLane;\n        // TODO: Ideally this would inherit the event time of the current render\n        const eventTime = NoTimestamp;\n        scheduleUpdateOnFiber(current, attemptHydrationAtLane, eventTime);\n      } else {\n        // We have already tried to ping at a higher priority than we're rendering with\n        // so if we got here, we must have failed to hydrate at those levels. We must\n        // now give up. Instead, we're going to delete the whole subtree and instead inject\n        // a new real Suspense boundary to take its place, which may render content\n        // or fallback. This might suspend for a while and if it does we might still have\n        // an opportunity to hydrate before this pass commits.\n      }\n    }\n\n    // If we have scheduled higher pri work above, this will probably just abort the render\n    // since we now have higher priority work, but in case it doesn't, we need to prepare to\n    // render something, if we time out. Even if that requires us to delete everything and\n    // skip hydration.\n    // Delay having to do this as long as the suspense timeout allows us.\n    renderDidSuspendDelayIfPossible();\n    return retrySuspenseComponentWithoutHydrating(\n      current,\n      workInProgress,\n      renderLanes,\n    );\n  } else if (isSuspenseInstancePending(suspenseInstance)) {\n    // This component is still pending more data from the server, so we can't hydrate its\n    // content. We treat it as if this component suspended itself. It might seem as if\n    // we could just try to render it client-side instead. However, this will perform a\n    // lot of unnecessary work and is unlikely to complete since it often will suspend\n    // on missing data anyway. Additionally, the server might be able to render more\n    // than we can on the client yet. In that case we'd end up with more fallback states\n    // on the client than if we just leave it alone. If the server times out or errors\n    // these should update this boundary to the permanent Fallback state instead.\n    // Mark it as having captured (i.e. suspended).\n    workInProgress.flags |= DidCapture;\n    // Leave the child in place. I.e. the dehydrated fragment.\n    workInProgress.child = current.child;\n    // Register a callback to retry this boundary once the server has sent the result.\n    const retry = retryDehydratedSuspenseBoundary.bind(null, current);\n    registerSuspenseInstanceRetry(suspenseInstance, retry);\n    return null;\n  } else {\n    // This is the first attempt.\n    reenterHydrationStateFromDehydratedSuspenseInstance(\n      workInProgress,\n      suspenseInstance,\n    );\n    const nextProps = workInProgress.pendingProps;\n    const primaryChildren = nextProps.children;\n    const primaryChildFragment = mountSuspensePrimaryChildren(\n      workInProgress,\n      primaryChildren,\n      renderLanes,\n    );\n    // Mark the children as hydrating. This is a fast path to know whether this\n    // tree is part of a hydrating tree. This is used to determine if a child\n    // node has fully mounted yet, and for scheduling event replaying.\n    // Conceptually this is similar to Placement in that a new subtree is\n    // inserted into the React tree here. It just happens to not need DOM\n    // mutations because it already exists.\n    primaryChildFragment.flags |= Hydrating;\n    return primaryChildFragment;\n  }\n}\n\nfunction scheduleWorkOnFiber(fiber: Fiber, renderLanes: Lanes) {\n  fiber.lanes = mergeLanes(fiber.lanes, renderLanes);\n  const alternate = fiber.alternate;\n  if (alternate !== null) {\n    alternate.lanes = mergeLanes(alternate.lanes, renderLanes);\n  }\n  scheduleWorkOnParentPath(fiber.return, renderLanes);\n}\n\nfunction propagateSuspenseContextChange(\n  workInProgress: Fiber,\n  firstChild: null | Fiber,\n  renderLanes: Lanes,\n): void {\n  // Mark any Suspense boundaries with fallbacks as having work to do.\n  // If they were previously forced into fallbacks, they may now be able\n  // to unblock.\n  let node = firstChild;\n  while (node !== null) {\n    if (node.tag === SuspenseComponent) {\n      const state: SuspenseState | null = node.memoizedState;\n      if (state !== null) {\n        scheduleWorkOnFiber(node, renderLanes);\n      }\n    } else if (node.tag === SuspenseListComponent) {\n      // If the tail is hidden there might not be an Suspense boundaries\n      // to schedule work on. In this case we have to schedule it on the\n      // list itself.\n      // We don't have to traverse to the children of the list since\n      // the list will propagate the change when it rerenders.\n      scheduleWorkOnFiber(node, renderLanes);\n    } else if (node.child !== null) {\n      node.child.return = node;\n      node = node.child;\n      continue;\n    }\n    if (node === workInProgress) {\n      return;\n    }\n    while (node.sibling === null) {\n      if (node.return === null || node.return === workInProgress) {\n        return;\n      }\n      node = node.return;\n    }\n    node.sibling.return = node.return;\n    node = node.sibling;\n  }\n}\n\nfunction findLastContentRow(firstChild: null | Fiber): null | Fiber {\n  // This is going to find the last row among these children that is already\n  // showing content on the screen, as opposed to being in fallback state or\n  // new. If a row has multiple Suspense boundaries, any of them being in the\n  // fallback state, counts as the whole row being in a fallback state.\n  // Note that the \"rows\" will be workInProgress, but any nested children\n  // will still be current since we haven't rendered them yet. The mounted\n  // order may not be the same as the new order. We use the new order.\n  let row = firstChild;\n  let lastContentRow: null | Fiber = null;\n  while (row !== null) {\n    const currentRow = row.alternate;\n    // New rows can't be content rows.\n    if (currentRow !== null && findFirstSuspended(currentRow) === null) {\n      lastContentRow = row;\n    }\n    row = row.sibling;\n  }\n  return lastContentRow;\n}\n\ntype SuspenseListRevealOrder = 'forwards' | 'backwards' | 'together' | void;\n\nfunction validateRevealOrder(revealOrder: SuspenseListRevealOrder) {\n  if (__DEV__) {\n    if (\n      revealOrder !== undefined &&\n      revealOrder !== 'forwards' &&\n      revealOrder !== 'backwards' &&\n      revealOrder !== 'together' &&\n      !didWarnAboutRevealOrder[revealOrder]\n    ) {\n      didWarnAboutRevealOrder[revealOrder] = true;\n      if (typeof revealOrder === 'string') {\n        switch (revealOrder.toLowerCase()) {\n          case 'together':\n          case 'forwards':\n          case 'backwards': {\n            console.error(\n              '\"%s\" is not a valid value for revealOrder on <SuspenseList />. ' +\n                'Use lowercase \"%s\" instead.',\n              revealOrder,\n              revealOrder.toLowerCase(),\n            );\n            break;\n          }\n          case 'forward':\n          case 'backward': {\n            console.error(\n              '\"%s\" is not a valid value for revealOrder on <SuspenseList />. ' +\n                'React uses the -s suffix in the spelling. Use \"%ss\" instead.',\n              revealOrder,\n              revealOrder.toLowerCase(),\n            );\n            break;\n          }\n          default:\n            console.error(\n              '\"%s\" is not a supported revealOrder on <SuspenseList />. ' +\n                'Did you mean \"together\", \"forwards\" or \"backwards\"?',\n              revealOrder,\n            );\n            break;\n        }\n      } else {\n        console.error(\n          '%s is not a supported value for revealOrder on <SuspenseList />. ' +\n            'Did you mean \"together\", \"forwards\" or \"backwards\"?',\n          revealOrder,\n        );\n      }\n    }\n  }\n}\n\nfunction validateTailOptions(\n  tailMode: SuspenseListTailMode,\n  revealOrder: SuspenseListRevealOrder,\n) {\n  if (__DEV__) {\n    if (tailMode !== undefined && !didWarnAboutTailOptions[tailMode]) {\n      if (tailMode !== 'collapsed' && tailMode !== 'hidden') {\n        didWarnAboutTailOptions[tailMode] = true;\n        console.error(\n          '\"%s\" is not a supported value for tail on <SuspenseList />. ' +\n            'Did you mean \"collapsed\" or \"hidden\"?',\n          tailMode,\n        );\n      } else if (revealOrder !== 'forwards' && revealOrder !== 'backwards') {\n        didWarnAboutTailOptions[tailMode] = true;\n        console.error(\n          '<SuspenseList tail=\"%s\" /> is only valid if revealOrder is ' +\n            '\"forwards\" or \"backwards\". ' +\n            'Did you mean to specify revealOrder=\"forwards\"?',\n          tailMode,\n        );\n      }\n    }\n  }\n}\n\nfunction validateSuspenseListNestedChild(childSlot: mixed, index: number) {\n  if (__DEV__) {\n    const isAnArray = isArray(childSlot);\n    const isIterable =\n      !isAnArray && typeof getIteratorFn(childSlot) === 'function';\n    if (isAnArray || isIterable) {\n      const type = isAnArray ? 'array' : 'iterable';\n      console.error(\n        'A nested %s was passed to row #%s in <SuspenseList />. Wrap it in ' +\n          'an additional SuspenseList to configure its revealOrder: ' +\n          '<SuspenseList revealOrder=...> ... ' +\n          '<SuspenseList revealOrder=...>{%s}</SuspenseList> ... ' +\n          '</SuspenseList>',\n        type,\n        index,\n        type,\n      );\n      return false;\n    }\n  }\n  return true;\n}\n\nfunction validateSuspenseListChildren(\n  children: mixed,\n  revealOrder: SuspenseListRevealOrder,\n) {\n  if (__DEV__) {\n    if (\n      (revealOrder === 'forwards' || revealOrder === 'backwards') &&\n      children !== undefined &&\n      children !== null &&\n      children !== false\n    ) {\n      if (isArray(children)) {\n        for (let i = 0; i < children.length; i++) {\n          if (!validateSuspenseListNestedChild(children[i], i)) {\n            return;\n          }\n        }\n      } else {\n        const iteratorFn = getIteratorFn(children);\n        if (typeof iteratorFn === 'function') {\n          const childrenIterator = iteratorFn.call(children);\n          if (childrenIterator) {\n            let step = childrenIterator.next();\n            let i = 0;\n            for (; !step.done; step = childrenIterator.next()) {\n              if (!validateSuspenseListNestedChild(step.value, i)) {\n                return;\n              }\n              i++;\n            }\n          }\n        } else {\n          console.error(\n            'A single row was passed to a <SuspenseList revealOrder=\"%s\" />. ' +\n              'This is not useful since it needs multiple rows. ' +\n              'Did you mean to pass multiple children or an array?',\n            revealOrder,\n          );\n        }\n      }\n    }\n  }\n}\n\nfunction initSuspenseListRenderState(\n  workInProgress: Fiber,\n  isBackwards: boolean,\n  tail: null | Fiber,\n  lastContentRow: null | Fiber,\n  tailMode: SuspenseListTailMode,\n): void {\n  const renderState: null | SuspenseListRenderState =\n    workInProgress.memoizedState;\n  if (renderState === null) {\n    workInProgress.memoizedState = ({\n      isBackwards: isBackwards,\n      rendering: null,\n      renderingStartTime: 0,\n      last: lastContentRow,\n      tail: tail,\n      tailMode: tailMode,\n    }: SuspenseListRenderState);\n  } else {\n    // We can reuse the existing object from previous renders.\n    renderState.isBackwards = isBackwards;\n    renderState.rendering = null;\n    renderState.renderingStartTime = 0;\n    renderState.last = lastContentRow;\n    renderState.tail = tail;\n    renderState.tailMode = tailMode;\n  }\n}\n\n// This can end up rendering this component multiple passes.\n// The first pass splits the children fibers into two sets. A head and tail.\n// We first render the head. If anything is in fallback state, we do another\n// pass through beginWork to rerender all children (including the tail) with\n// the force suspend context. If the first render didn't have anything in\n// in fallback state. Then we render each row in the tail one-by-one.\n// That happens in the completeWork phase without going back to beginWork.\nfunction updateSuspenseListComponent(\n  current: Fiber | null,\n  workInProgress: Fiber,\n  renderLanes: Lanes,\n) {\n  const nextProps = workInProgress.pendingProps;\n  const revealOrder: SuspenseListRevealOrder = nextProps.revealOrder;\n  const tailMode: SuspenseListTailMode = nextProps.tail;\n  const newChildren = nextProps.children;\n\n  validateRevealOrder(revealOrder);\n  validateTailOptions(tailMode, revealOrder);\n  validateSuspenseListChildren(newChildren, revealOrder);\n\n  reconcileChildren(current, workInProgress, newChildren, renderLanes);\n\n  let suspenseContext: SuspenseContext = suspenseStackCursor.current;\n\n  const shouldForceFallback = hasSuspenseContext(\n    suspenseContext,\n    (ForceSuspenseFallback: SuspenseContext),\n  );\n  if (shouldForceFallback) {\n    suspenseContext = setShallowSuspenseContext(\n      suspenseContext,\n      ForceSuspenseFallback,\n    );\n    workInProgress.flags |= DidCapture;\n  } else {\n    const didSuspendBefore =\n      current !== null && (current.flags & DidCapture) !== NoFlags;\n    if (didSuspendBefore) {\n      // If we previously forced a fallback, we need to schedule work\n      // on any nested boundaries to let them know to try to render\n      // again. This is the same as context updating.\n      propagateSuspenseContextChange(\n        workInProgress,\n        workInProgress.child,\n        renderLanes,\n      );\n    }\n    suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);\n  }\n  pushSuspenseContext(workInProgress, suspenseContext);\n\n  if ((workInProgress.mode & ConcurrentMode) === NoMode) {\n    // In legacy mode, SuspenseList doesn't work so we just\n    // use make it a noop by treating it as the default revealOrder.\n    workInProgress.memoizedState = null;\n  } else {\n    switch (revealOrder) {\n      case 'forwards': {\n        const lastContentRow = findLastContentRow(workInProgress.child);\n        let tail;\n        if (lastContentRow === null) {\n          // The whole list is part of the tail.\n          // TODO: We could fast path by just rendering the tail now.\n          tail = workInProgress.child;\n          workInProgress.child = null;\n        } else {\n          // Disconnect the tail rows after the content row.\n          // We're going to render them separately later.\n          tail = lastContentRow.sibling;\n          lastContentRow.sibling = null;\n        }\n        initSuspenseListRenderState(\n          workInProgress,\n          false, // isBackwards\n          tail,\n          lastContentRow,\n          tailMode,\n        );\n        break;\n      }\n      case 'backwards': {\n        // We're going to find the first row that has existing content.\n        // At the same time we're going to reverse the list of everything\n        // we pass in the meantime. That's going to be our tail in reverse\n        // order.\n        let tail = null;\n        let row = workInProgress.child;\n        workInProgress.child = null;\n        while (row !== null) {\n          const currentRow = row.alternate;\n          // New rows can't be content rows.\n          if (currentRow !== null && findFirstSuspended(currentRow) === null) {\n            // This is the beginning of the main content.\n            workInProgress.child = row;\n            break;\n          }\n          const nextRow = row.sibling;\n          row.sibling = tail;\n          tail = row;\n          row = nextRow;\n        }\n        // TODO: If workInProgress.child is null, we can continue on the tail immediately.\n        initSuspenseListRenderState(\n          workInProgress,\n          true, // isBackwards\n          tail,\n          null, // last\n          tailMode,\n        );\n        break;\n      }\n      case 'together': {\n        initSuspenseListRenderState(\n          workInProgress,\n          false, // isBackwards\n          null, // tail\n          null, // last\n          undefined,\n        );\n        break;\n      }\n      default: {\n        // The default reveal order is the same as not having\n        // a boundary.\n        workInProgress.memoizedState = null;\n      }\n    }\n  }\n  return workInProgress.child;\n}\n\nfunction updatePortalComponent(\n  current: Fiber | null,\n  workInProgress: Fiber,\n  renderLanes: Lanes,\n) {\n  pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);\n  const nextChildren = workInProgress.pendingProps;\n  if (current === null) {\n    // Portals are special because we don't append the children during mount\n    // but at commit. Therefore we need to track insertions which the normal\n    // flow doesn't do during mount. This doesn't happen at the root because\n    // the root always starts with a \"current\" with a null child.\n    // TODO: Consider unifying this with how the root works.\n    workInProgress.child = reconcileChildFibers(\n      workInProgress,\n      null,\n      nextChildren,\n      renderLanes,\n    );\n  } else {\n    reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n  }\n  return workInProgress.child;\n}\n\nlet hasWarnedAboutUsingNoValuePropOnContextProvider = false;\n\nfunction updateContextProvider(\n  current: Fiber | null,\n  workInProgress: Fiber,\n  renderLanes: Lanes,\n) {\n  const providerType: ReactProviderType<any> = workInProgress.type;\n  const context: ReactContext<any> = providerType._context;\n\n  const newProps = workInProgress.pendingProps;\n  const oldProps = workInProgress.memoizedProps;\n\n  const newValue = newProps.value;\n\n  if (__DEV__) {\n    if (!('value' in newProps)) {\n      if (!hasWarnedAboutUsingNoValuePropOnContextProvider) {\n        hasWarnedAboutUsingNoValuePropOnContextProvider = true;\n        console.error(\n          'The `value` prop is required for the `<Context.Provider>`. Did you misspell it or forget to pass it?',\n        );\n      }\n    }\n    const providerPropTypes = workInProgress.type.propTypes;\n\n    if (providerPropTypes) {\n      checkPropTypes(providerPropTypes, newProps, 'prop', 'Context.Provider');\n    }\n  }\n\n  pushProvider(workInProgress, context, newValue);\n\n  if (enableLazyContextPropagation) {\n    // In the lazy propagation implementation, we don't scan for matching\n    // consumers until something bails out, because until something bails out\n    // we're going to visit those nodes, anyway. The trade-off is that it shifts\n    // responsibility to the consumer to track whether something has changed.\n  } else {\n    if (oldProps !== null) {\n      const oldValue = oldProps.value;\n      if (is(oldValue, newValue)) {\n        // No change. Bailout early if children are the same.\n        if (\n          oldProps.children === newProps.children &&\n          !hasLegacyContextChanged()\n        ) {\n          return bailoutOnAlreadyFinishedWork(\n            current,\n            workInProgress,\n            renderLanes,\n          );\n        }\n      } else {\n        // The context value changed. Search for matching consumers and schedule\n        // them to update.\n        propagateContextChange(workInProgress, context, renderLanes);\n      }\n    }\n  }\n\n  const newChildren = newProps.children;\n  reconcileChildren(current, workInProgress, newChildren, renderLanes);\n  return workInProgress.child;\n}\n\nlet hasWarnedAboutUsingContextAsConsumer = false;\n\nfunction updateContextConsumer(\n  current: Fiber | null,\n  workInProgress: Fiber,\n  renderLanes: Lanes,\n) {\n  let context: ReactContext<any> = workInProgress.type;\n  // The logic below for Context differs depending on PROD or DEV mode. In\n  // DEV mode, we create a separate object for Context.Consumer that acts\n  // like a proxy to Context. This proxy object adds unnecessary code in PROD\n  // so we use the old behaviour (Context.Consumer references Context) to\n  // reduce size and overhead. The separate object references context via\n  // a property called \"_context\", which also gives us the ability to check\n  // in DEV mode if this property exists or not and warn if it does not.\n  if (__DEV__) {\n    if ((context: any)._context === undefined) {\n      // This may be because it's a Context (rather than a Consumer).\n      // Or it may be because it's older React where they're the same thing.\n      // We only want to warn if we're sure it's a new React.\n      if (context !== context.Consumer) {\n        if (!hasWarnedAboutUsingContextAsConsumer) {\n          hasWarnedAboutUsingContextAsConsumer = true;\n          console.error(\n            'Rendering <Context> directly is not supported and will be removed in ' +\n              'a future major release. Did you mean to render <Context.Consumer> instead?',\n          );\n        }\n      }\n    } else {\n      context = (context: any)._context;\n    }\n  }\n  const newProps = workInProgress.pendingProps;\n  const render = newProps.children;\n\n  if (__DEV__) {\n    if (typeof render !== 'function') {\n      console.error(\n        'A context consumer was rendered with multiple children, or a child ' +\n          \"that isn't a function. A context consumer expects a single child \" +\n          'that is a function. If you did pass a function, make sure there ' +\n          'is no trailing or leading whitespace around it.',\n      );\n    }\n  }\n\n  prepareToReadContext(workInProgress, renderLanes);\n  const newValue = readContext(context);\n  if (enableSchedulingProfiler) {\n    markComponentRenderStarted(workInProgress);\n  }\n  let newChildren;\n  if (__DEV__) {\n    ReactCurrentOwner.current = workInProgress;\n    setIsRendering(true);\n    newChildren = render(newValue);\n    setIsRendering(false);\n  } else {\n    newChildren = render(newValue);\n  }\n  if (enableSchedulingProfiler) {\n    markComponentRenderStopped();\n  }\n\n  // React DevTools reads this flag.\n  workInProgress.flags |= PerformedWork;\n  reconcileChildren(current, workInProgress, newChildren, renderLanes);\n  return workInProgress.child;\n}\n\nfunction updateScopeComponent(current, workInProgress, renderLanes) {\n  const nextProps = workInProgress.pendingProps;\n  const nextChildren = nextProps.children;\n\n  reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n  return workInProgress.child;\n}\n\nexport function markWorkInProgressReceivedUpdate() {\n  didReceiveUpdate = true;\n}\n\nexport function checkIfWorkInProgressReceivedUpdate() {\n  return didReceiveUpdate;\n}\n\nfunction bailoutOnAlreadyFinishedWork(\n  current: Fiber | null,\n  workInProgress: Fiber,\n  renderLanes: Lanes,\n): Fiber | null {\n  if (current !== null) {\n    // Reuse previous dependencies\n    workInProgress.dependencies = current.dependencies;\n  }\n\n  if (enableProfilerTimer) {\n    // Don't update \"base\" render times for bailouts.\n    stopProfilerTimerIfRunning(workInProgress);\n  }\n\n  markSkippedUpdateLanes(workInProgress.lanes);\n\n  // Check if the children have any pending work.\n  if (!includesSomeLane(renderLanes, workInProgress.childLanes)) {\n    // The children don't have any work either. We can skip them.\n    // TODO: Once we add back resuming, we should check if the children are\n    // a work-in-progress set. If so, we need to transfer their effects.\n\n    if (enableLazyContextPropagation && current !== null) {\n      // Before bailing out, check if there are any context changes in\n      // the children.\n      lazilyPropagateParentContextChanges(current, workInProgress, renderLanes);\n      if (!includesSomeLane(renderLanes, workInProgress.childLanes)) {\n        return null;\n      }\n    } else {\n      return null;\n    }\n  }\n\n  // This fiber doesn't have work, but its subtree does. Clone the child\n  // fibers and continue.\n  cloneChildFibers(current, workInProgress);\n  return workInProgress.child;\n}\n\nfunction remountFiber(\n  current: Fiber,\n  oldWorkInProgress: Fiber,\n  newWorkInProgress: Fiber,\n): Fiber | null {\n  if (__DEV__) {\n    const returnFiber = oldWorkInProgress.return;\n    if (returnFiber === null) {\n      throw new Error('Cannot swap the root fiber.');\n    }\n\n    // Disconnect from the old current.\n    // It will get deleted.\n    current.alternate = null;\n    oldWorkInProgress.alternate = null;\n\n    // Connect to the new tree.\n    newWorkInProgress.index = oldWorkInProgress.index;\n    newWorkInProgress.sibling = oldWorkInProgress.sibling;\n    newWorkInProgress.return = oldWorkInProgress.return;\n    newWorkInProgress.ref = oldWorkInProgress.ref;\n\n    // Replace the child/sibling pointers above it.\n    if (oldWorkInProgress === returnFiber.child) {\n      returnFiber.child = newWorkInProgress;\n    } else {\n      let prevSibling = returnFiber.child;\n      if (prevSibling === null) {\n        throw new Error('Expected parent to have a child.');\n      }\n      while (prevSibling.sibling !== oldWorkInProgress) {\n        prevSibling = prevSibling.sibling;\n        if (prevSibling === null) {\n          throw new Error('Expected to find the previous sibling.');\n        }\n      }\n      prevSibling.sibling = newWorkInProgress;\n    }\n\n    // Delete the old fiber and place the new one.\n    // Since the old fiber is disconnected, we have to schedule it manually.\n    const deletions = returnFiber.deletions;\n    if (deletions === null) {\n      returnFiber.deletions = [current];\n      returnFiber.flags |= ChildDeletion;\n    } else {\n      deletions.push(current);\n    }\n\n    newWorkInProgress.flags |= Placement;\n\n    // Restart work from the new fiber.\n    return newWorkInProgress;\n  } else {\n    throw new Error(\n      'Did not expect this call in production. ' +\n        'This is a bug in React. Please file an issue.',\n    );\n  }\n}\n\nfunction checkScheduledUpdateOrContext(\n  current: Fiber,\n  renderLanes: Lanes,\n): boolean {\n  // Before performing an early bailout, we must check if there are pending\n  // updates or context.\n  const updateLanes = current.lanes;\n  if (includesSomeLane(updateLanes, renderLanes)) {\n    return true;\n  }\n  // No pending update, but because context is propagated lazily, we need\n  // to check for a context change before we bail out.\n  if (enableLazyContextPropagation) {\n    const dependencies = current.dependencies;\n    if (dependencies !== null && checkIfContextChanged(dependencies)) {\n      return true;\n    }\n  }\n  return false;\n}\n\nfunction attemptEarlyBailoutIfNoScheduledUpdate(\n  current: Fiber,\n  workInProgress: Fiber,\n  renderLanes: Lanes,\n) {\n  // This fiber does not have any pending work. Bailout without entering\n  // the begin phase. There's still some bookkeeping we that needs to be done\n  // in this optimized path, mostly pushing stuff onto the stack.\n  switch (workInProgress.tag) {\n    case HostRoot:\n      pushHostRootContext(workInProgress);\n      if (enableCache) {\n        const root: FiberRoot = workInProgress.stateNode;\n        const cache: Cache = current.memoizedState.cache;\n        pushCacheProvider(workInProgress, cache);\n        pushRootCachePool(root);\n      }\n      resetHydrationState();\n      break;\n    case HostComponent:\n      pushHostContext(workInProgress);\n      break;\n    case ClassComponent: {\n      const Component = workInProgress.type;\n      if (isLegacyContextProvider(Component)) {\n        pushLegacyContextProvider(workInProgress);\n      }\n      break;\n    }\n    case HostPortal:\n      pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);\n      break;\n    case ContextProvider: {\n      const newValue = workInProgress.memoizedProps.value;\n      const context: ReactContext<any> = workInProgress.type._context;\n      pushProvider(workInProgress, context, newValue);\n      break;\n    }\n    case Profiler:\n      if (enableProfilerTimer) {\n        // Profiler should only call onRender when one of its descendants actually rendered.\n        const hasChildWork = includesSomeLane(\n          renderLanes,\n          workInProgress.childLanes,\n        );\n        if (hasChildWork) {\n          workInProgress.flags |= Update;\n        }\n\n        if (enableProfilerCommitHooks) {\n          // Reset effect durations for the next eventual effect phase.\n          // These are reset during render to allow the DevTools commit hook a chance to read them,\n          const stateNode = workInProgress.stateNode;\n          stateNode.effectDuration = 0;\n          stateNode.passiveEffectDuration = 0;\n        }\n      }\n      break;\n    case SuspenseComponent: {\n      const state: SuspenseState | null = workInProgress.memoizedState;\n      if (state !== null) {\n        if (enableSuspenseServerRenderer) {\n          if (state.dehydrated !== null) {\n            pushSuspenseContext(\n              workInProgress,\n              setDefaultShallowSuspenseContext(suspenseStackCursor.current),\n            );\n            // We know that this component will suspend again because if it has\n            // been unsuspended it has committed as a resolved Suspense component.\n            // If it needs to be retried, it should have work scheduled on it.\n            workInProgress.flags |= DidCapture;\n            // We should never render the children of a dehydrated boundary until we\n            // upgrade it. We return null instead of bailoutOnAlreadyFinishedWork.\n            return null;\n          }\n        }\n\n        // If this boundary is currently timed out, we need to decide\n        // whether to retry the primary children, or to skip over it and\n        // go straight to the fallback. Check the priority of the primary\n        // child fragment.\n        const primaryChildFragment: Fiber = (workInProgress.child: any);\n        const primaryChildLanes = primaryChildFragment.childLanes;\n        if (includesSomeLane(renderLanes, primaryChildLanes)) {\n          // The primary children have pending work. Use the normal path\n          // to attempt to render the primary children again.\n          return updateSuspenseComponent(current, workInProgress, renderLanes);\n        } else {\n          // The primary child fragment does not have pending work marked\n          // on it\n          pushSuspenseContext(\n            workInProgress,\n            setDefaultShallowSuspenseContext(suspenseStackCursor.current),\n          );\n          // The primary children do not have pending work with sufficient\n          // priority. Bailout.\n          const child = bailoutOnAlreadyFinishedWork(\n            current,\n            workInProgress,\n            renderLanes,\n          );\n          if (child !== null) {\n            // The fallback children have pending work. Skip over the\n            // primary children and work on the fallback.\n            return child.sibling;\n          } else {\n            // Note: We can return `null` here because we already checked\n            // whether there were nested context consumers, via the call to\n            // `bailoutOnAlreadyFinishedWork` above.\n            return null;\n          }\n        }\n      } else {\n        pushSuspenseContext(\n          workInProgress,\n          setDefaultShallowSuspenseContext(suspenseStackCursor.current),\n        );\n      }\n      break;\n    }\n    case SuspenseListComponent: {\n      const didSuspendBefore = (current.flags & DidCapture) !== NoFlags;\n\n      let hasChildWork = includesSomeLane(\n        renderLanes,\n        workInProgress.childLanes,\n      );\n\n      if (enableLazyContextPropagation && !hasChildWork) {\n        // Context changes may not have been propagated yet. We need to do\n        // that now, before we can decide whether to bail out.\n        // TODO: We use `childLanes` as a heuristic for whether there is\n        // remaining work in a few places, including\n        // `bailoutOnAlreadyFinishedWork` and\n        // `updateDehydratedSuspenseComponent`. We should maybe extract this\n        // into a dedicated function.\n        lazilyPropagateParentContextChanges(\n          current,\n          workInProgress,\n          renderLanes,\n        );\n        hasChildWork = includesSomeLane(renderLanes, workInProgress.childLanes);\n      }\n\n      if (didSuspendBefore) {\n        if (hasChildWork) {\n          // If something was in fallback state last time, and we have all the\n          // same children then we're still in progressive loading state.\n          // Something might get unblocked by state updates or retries in the\n          // tree which will affect the tail. So we need to use the normal\n          // path to compute the correct tail.\n          return updateSuspenseListComponent(\n            current,\n            workInProgress,\n            renderLanes,\n          );\n        }\n        // If none of the children had any work, that means that none of\n        // them got retried so they'll still be blocked in the same way\n        // as before. We can fast bail out.\n        workInProgress.flags |= DidCapture;\n      }\n\n      // If nothing suspended before and we're rendering the same children,\n      // then the tail doesn't matter. Anything new that suspends will work\n      // in the \"together\" mode, so we can continue from the state we had.\n      const renderState = workInProgress.memoizedState;\n      if (renderState !== null) {\n        // Reset to the \"together\" mode in case we've started a different\n        // update in the past but didn't complete it.\n        renderState.rendering = null;\n        renderState.tail = null;\n        renderState.lastEffect = null;\n      }\n      pushSuspenseContext(workInProgress, suspenseStackCursor.current);\n\n      if (hasChildWork) {\n        break;\n      } else {\n        // If none of the children had any work, that means that none of\n        // them got retried so they'll still be blocked in the same way\n        // as before. We can fast bail out.\n        return null;\n      }\n    }\n    case OffscreenComponent:\n    case LegacyHiddenComponent: {\n      // Need to check if the tree still needs to be deferred. This is\n      // almost identical to the logic used in the normal update path,\n      // so we'll just enter that. The only difference is we'll bail out\n      // at the next level instead of this one, because the child props\n      // have not changed. Which is fine.\n      // TODO: Probably should refactor `beginWork` to split the bailout\n      // path from the normal path. I'm tempted to do a labeled break here\n      // but I won't :)\n      workInProgress.lanes = NoLanes;\n      return updateOffscreenComponent(current, workInProgress, renderLanes);\n    }\n    case CacheComponent: {\n      if (enableCache) {\n        const cache: Cache = current.memoizedState.cache;\n        pushCacheProvider(workInProgress, cache);\n      }\n      break;\n    }\n  }\n  return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);\n}\n\nfunction beginWork(\n  current: Fiber | null,\n  workInProgress: Fiber,\n  renderLanes: Lanes,\n): Fiber | null {\n  if (__DEV__) {\n    if (workInProgress._debugNeedsRemount && current !== null) {\n      // This will restart the begin phase with a new fiber.\n      return remountFiber(\n        current,\n        workInProgress,\n        createFiberFromTypeAndProps(\n          workInProgress.type,\n          workInProgress.key,\n          workInProgress.pendingProps,\n          workInProgress._debugOwner || null,\n          workInProgress.mode,\n          workInProgress.lanes,\n        ),\n      );\n    }\n  }\n\n  if (current !== null) {\n    const oldProps = current.memoizedProps;\n    const newProps = workInProgress.pendingProps;\n\n    if (\n      oldProps !== newProps ||\n      hasLegacyContextChanged() ||\n      // Force a re-render if the implementation changed due to hot reload:\n      (__DEV__ ? workInProgress.type !== current.type : false)\n    ) {\n      // If props or context changed, mark the fiber as having performed work.\n      // This may be unset if the props are determined to be equal later (memo).\n      didReceiveUpdate = true;\n    } else {\n      // Neither props nor legacy context changes. Check if there's a pending\n      // update or context change.\n      const hasScheduledUpdateOrContext = checkScheduledUpdateOrContext(\n        current,\n        renderLanes,\n      );\n      if (\n        !hasScheduledUpdateOrContext &&\n        // If this is the second pass of an error or suspense boundary, there\n        // may not be work scheduled on `current`, so we check for this flag.\n        (workInProgress.flags & DidCapture) === NoFlags\n      ) {\n        // No pending updates or context. Bail out now.\n        didReceiveUpdate = false;\n        return attemptEarlyBailoutIfNoScheduledUpdate(\n          current,\n          workInProgress,\n          renderLanes,\n        );\n      }\n      if ((current.flags & ForceUpdateForLegacySuspense) !== NoFlags) {\n        // This is a special case that only exists for legacy mode.\n        // See https://github.com/facebook/react/pull/19216.\n        didReceiveUpdate = true;\n      } else {\n        // An update was scheduled on this fiber, but there are no new props\n        // nor legacy context. Set this to false. If an update queue or context\n        // consumer produces a changed value, it will set this to true. Otherwise,\n        // the component will assume the children have not changed and bail out.\n        didReceiveUpdate = false;\n      }\n    }\n  } else {\n    didReceiveUpdate = false;\n  }\n\n  // Before entering the begin phase, clear pending update priority.\n  // TODO: This assumes that we're about to evaluate the component and process\n  // the update queue. However, there's an exception: SimpleMemoComponent\n  // sometimes bails out later in the begin phase. This indicates that we should\n  // move this assignment out of the common path and into each branch.\n  workInProgress.lanes = NoLanes;\n\n  switch (workInProgress.tag) {\n    case IndeterminateComponent: {\n      return mountIndeterminateComponent(\n        current,\n        workInProgress,\n        workInProgress.type,\n        renderLanes,\n      );\n    }\n    case LazyComponent: {\n      const elementType = workInProgress.elementType;\n      return mountLazyComponent(\n        current,\n        workInProgress,\n        elementType,\n        renderLanes,\n      );\n    }\n    case FunctionComponent: {\n      const Component = workInProgress.type;\n      const unresolvedProps = workInProgress.pendingProps;\n      const resolvedProps =\n        workInProgress.elementType === Component\n          ? unresolvedProps\n          : resolveDefaultProps(Component, unresolvedProps);\n      return updateFunctionComponent(\n        current,\n        workInProgress,\n        Component,\n        resolvedProps,\n        renderLanes,\n      );\n    }\n    case ClassComponent: {\n      const Component = workInProgress.type;\n      const unresolvedProps = workInProgress.pendingProps;\n      const resolvedProps =\n        workInProgress.elementType === Component\n          ? unresolvedProps\n          : resolveDefaultProps(Component, unresolvedProps);\n      return updateClassComponent(\n        current,\n        workInProgress,\n        Component,\n        resolvedProps,\n        renderLanes,\n      );\n    }\n    case HostRoot:\n      return updateHostRoot(current, workInProgress, renderLanes);\n    case HostComponent:\n      return updateHostComponent(current, workInProgress, renderLanes);\n    case HostText:\n      return updateHostText(current, workInProgress);\n    case SuspenseComponent:\n      return updateSuspenseComponent(current, workInProgress, renderLanes);\n    case HostPortal:\n      return updatePortalComponent(current, workInProgress, renderLanes);\n    case ForwardRef: {\n      const type = workInProgress.type;\n      const unresolvedProps = workInProgress.pendingProps;\n      const resolvedProps =\n        workInProgress.elementType === type\n          ? unresolvedProps\n          : resolveDefaultProps(type, unresolvedProps);\n      return updateForwardRef(\n        current,\n        workInProgress,\n        type,\n        resolvedProps,\n        renderLanes,\n      );\n    }\n    case Fragment:\n      return updateFragment(current, workInProgress, renderLanes);\n    case Mode:\n      return updateMode(current, workInProgress, renderLanes);\n    case Profiler:\n      return updateProfiler(current, workInProgress, renderLanes);\n    case ContextProvider:\n      return updateContextProvider(current, workInProgress, renderLanes);\n    case ContextConsumer:\n      return updateContextConsumer(current, workInProgress, renderLanes);\n    case MemoComponent: {\n      const type = workInProgress.type;\n      const unresolvedProps = workInProgress.pendingProps;\n      // Resolve outer props first, then resolve inner props.\n      let resolvedProps = resolveDefaultProps(type, unresolvedProps);\n      if (__DEV__) {\n        if (workInProgress.type !== workInProgress.elementType) {\n          const outerPropTypes = type.propTypes;\n          if (outerPropTypes) {\n            checkPropTypes(\n              outerPropTypes,\n              resolvedProps, // Resolved for outer only\n              'prop',\n              getComponentNameFromType(type),\n            );\n          }\n        }\n      }\n      resolvedProps = resolveDefaultProps(type.type, resolvedProps);\n      return updateMemoComponent(\n        current,\n        workInProgress,\n        type,\n        resolvedProps,\n        renderLanes,\n      );\n    }\n    case SimpleMemoComponent: {\n      return updateSimpleMemoComponent(\n        current,\n        workInProgress,\n        workInProgress.type,\n        workInProgress.pendingProps,\n        renderLanes,\n      );\n    }\n    case IncompleteClassComponent: {\n      const Component = workInProgress.type;\n      const unresolvedProps = workInProgress.pendingProps;\n      const resolvedProps =\n        workInProgress.elementType === Component\n          ? unresolvedProps\n          : resolveDefaultProps(Component, unresolvedProps);\n      return mountIncompleteClassComponent(\n        current,\n        workInProgress,\n        Component,\n        resolvedProps,\n        renderLanes,\n      );\n    }\n    case SuspenseListComponent: {\n      return updateSuspenseListComponent(current, workInProgress, renderLanes);\n    }\n    case ScopeComponent: {\n      if (enableScopeAPI) {\n        return updateScopeComponent(current, workInProgress, renderLanes);\n      }\n      break;\n    }\n    case OffscreenComponent: {\n      return updateOffscreenComponent(current, workInProgress, renderLanes);\n    }\n    case LegacyHiddenComponent: {\n      return updateLegacyHiddenComponent(current, workInProgress, renderLanes);\n    }\n    case CacheComponent: {\n      if (enableCache) {\n        return updateCacheComponent(current, workInProgress, renderLanes);\n      }\n      break;\n    }\n  }\n  invariant(\n    false,\n    'Unknown unit of work tag (%s). This error is likely caused by a bug in ' +\n      'React. Please file an issue.',\n    workInProgress.tag,\n  );\n}\n\nexport {beginWork};\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {ReactContext} from 'shared/ReactTypes';\nimport type {Fiber, FiberRoot} from './ReactInternalTypes';\nimport type {Lanes} from './ReactFiberLane.old';\nimport type {SuspenseState} from './ReactFiberSuspenseComponent.old';\nimport type {Cache, SpawnedCachePool} from './ReactFiberCacheComponent.old';\n\nimport {resetWorkInProgressVersions as resetMutableSourceWorkInProgressVersions} from './ReactMutableSource.old';\nimport {\n  ClassComponent,\n  HostRoot,\n  HostComponent,\n  HostPortal,\n  ContextProvider,\n  SuspenseComponent,\n  SuspenseListComponent,\n  OffscreenComponent,\n  LegacyHiddenComponent,\n  CacheComponent,\n} from './ReactWorkTags';\nimport {DidCapture, NoFlags, ShouldCapture} from './ReactFiberFlags';\nimport {NoMode, ProfileMode} from './ReactTypeOfMode';\nimport {\n  enableSuspenseServerRenderer,\n  enableProfilerTimer,\n  enableCache,\n} from 'shared/ReactFeatureFlags';\n\nimport {popHostContainer, popHostContext} from './ReactFiberHostContext.old';\nimport {popSuspenseContext} from './ReactFiberSuspenseContext.old';\nimport {resetHydrationState} from './ReactFiberHydrationContext.old';\nimport {\n  isContextProvider as isLegacyContextProvider,\n  popContext as popLegacyContext,\n  popTopLevelContextObject as popTopLevelLegacyContextObject,\n} from './ReactFiberContext.old';\nimport {popProvider} from './ReactFiberNewContext.old';\nimport {popRenderLanes} from './ReactFiberWorkLoop.old';\nimport {\n  popCacheProvider,\n  popRootCachePool,\n  popCachePool,\n} from './ReactFiberCacheComponent.old';\nimport {transferActualDuration} from './ReactProfilerTimer.old';\n\nimport invariant from 'shared/invariant';\n\nfunction unwindWork(workInProgress: Fiber, renderLanes: Lanes) {\n  switch (workInProgress.tag) {\n    case ClassComponent: {\n      const Component = workInProgress.type;\n      if (isLegacyContextProvider(Component)) {\n        popLegacyContext(workInProgress);\n      }\n      const flags = workInProgress.flags;\n      if (flags & ShouldCapture) {\n        workInProgress.flags = (flags & ~ShouldCapture) | DidCapture;\n        if (\n          enableProfilerTimer &&\n          (workInProgress.mode & ProfileMode) !== NoMode\n        ) {\n          transferActualDuration(workInProgress);\n        }\n        return workInProgress;\n      }\n      return null;\n    }\n    case HostRoot: {\n      if (enableCache) {\n        const root: FiberRoot = workInProgress.stateNode;\n        popRootCachePool(root, renderLanes);\n\n        const cache: Cache = workInProgress.memoizedState.cache;\n        popCacheProvider(workInProgress, cache);\n      }\n      popHostContainer(workInProgress);\n      popTopLevelLegacyContextObject(workInProgress);\n      resetMutableSourceWorkInProgressVersions();\n      const flags = workInProgress.flags;\n      invariant(\n        (flags & DidCapture) === NoFlags,\n        'The root failed to unmount after an error. This is likely a bug in ' +\n          'React. Please file an issue.',\n      );\n      workInProgress.flags = (flags & ~ShouldCapture) | DidCapture;\n      return workInProgress;\n    }\n    case HostComponent: {\n      // TODO: popHydrationState\n      popHostContext(workInProgress);\n      return null;\n    }\n    case SuspenseComponent: {\n      popSuspenseContext(workInProgress);\n      if (enableSuspenseServerRenderer) {\n        const suspenseState: null | SuspenseState =\n          workInProgress.memoizedState;\n        if (suspenseState !== null && suspenseState.dehydrated !== null) {\n          invariant(\n            workInProgress.alternate !== null,\n            'Threw in newly mounted dehydrated component. This is likely a bug in ' +\n              'React. Please file an issue.',\n          );\n          resetHydrationState();\n        }\n      }\n      const flags = workInProgress.flags;\n      if (flags & ShouldCapture) {\n        workInProgress.flags = (flags & ~ShouldCapture) | DidCapture;\n        // Captured a suspense effect. Re-render the boundary.\n        if (\n          enableProfilerTimer &&\n          (workInProgress.mode & ProfileMode) !== NoMode\n        ) {\n          transferActualDuration(workInProgress);\n        }\n        return workInProgress;\n      }\n      return null;\n    }\n    case SuspenseListComponent: {\n      popSuspenseContext(workInProgress);\n      // SuspenseList doesn't actually catch anything. It should've been\n      // caught by a nested boundary. If not, it should bubble through.\n      return null;\n    }\n    case HostPortal:\n      popHostContainer(workInProgress);\n      return null;\n    case ContextProvider:\n      const context: ReactContext<any> = workInProgress.type._context;\n      popProvider(context, workInProgress);\n      return null;\n    case OffscreenComponent:\n    case LegacyHiddenComponent:\n      popRenderLanes(workInProgress);\n      if (enableCache) {\n        const spawnedCachePool: SpawnedCachePool | null = (workInProgress.updateQueue: any);\n        if (spawnedCachePool !== null) {\n          popCachePool(workInProgress);\n        }\n      }\n      return null;\n    case CacheComponent:\n      if (enableCache) {\n        const cache: Cache = workInProgress.memoizedState.cache;\n        popCacheProvider(workInProgress, cache);\n      }\n      return null;\n    default:\n      return null;\n  }\n}\n\nfunction unwindInterruptedWork(interruptedWork: Fiber, renderLanes: Lanes) {\n  switch (interruptedWork.tag) {\n    case ClassComponent: {\n      const childContextTypes = interruptedWork.type.childContextTypes;\n      if (childContextTypes !== null && childContextTypes !== undefined) {\n        popLegacyContext(interruptedWork);\n      }\n      break;\n    }\n    case HostRoot: {\n      if (enableCache) {\n        const root: FiberRoot = interruptedWork.stateNode;\n        popRootCachePool(root, renderLanes);\n\n        const cache: Cache = interruptedWork.memoizedState.cache;\n        popCacheProvider(interruptedWork, cache);\n      }\n      popHostContainer(interruptedWork);\n      popTopLevelLegacyContextObject(interruptedWork);\n      resetMutableSourceWorkInProgressVersions();\n      break;\n    }\n    case HostComponent: {\n      popHostContext(interruptedWork);\n      break;\n    }\n    case HostPortal:\n      popHostContainer(interruptedWork);\n      break;\n    case SuspenseComponent:\n      popSuspenseContext(interruptedWork);\n      break;\n    case SuspenseListComponent:\n      popSuspenseContext(interruptedWork);\n      break;\n    case ContextProvider:\n      const context: ReactContext<any> = interruptedWork.type._context;\n      popProvider(context, interruptedWork);\n      break;\n    case OffscreenComponent:\n    case LegacyHiddenComponent:\n      popRenderLanes(interruptedWork);\n      if (enableCache) {\n        const spawnedCachePool: SpawnedCachePool | null = (interruptedWork.updateQueue: any);\n        if (spawnedCachePool !== null) {\n          popCachePool(interruptedWork);\n        }\n      }\n\n      break;\n    case CacheComponent:\n      if (enableCache) {\n        const cache: Cache = interruptedWork.memoizedState.cache;\n        popCacheProvider(interruptedWork, cache);\n      }\n      break;\n    default:\n      break;\n  }\n}\n\nexport {unwindWork, unwindInterruptedWork};\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport invariant from 'shared/invariant';\n\nfunction invokeGuardedCallbackProd<A, B, C, D, E, F, Context>(\n  name: string | null,\n  func: (a: A, b: B, c: C, d: D, e: E, f: F) => mixed,\n  context: Context,\n  a: A,\n  b: B,\n  c: C,\n  d: D,\n  e: E,\n  f: F,\n) {\n  const funcArgs = Array.prototype.slice.call(arguments, 3);\n  try {\n    func.apply(context, funcArgs);\n  } catch (error) {\n    this.onError(error);\n  }\n}\n\nlet invokeGuardedCallbackImpl = invokeGuardedCallbackProd;\n\nif (__DEV__) {\n  // In DEV mode, we swap out invokeGuardedCallback for a special version\n  // that plays more nicely with the browser's DevTools. The idea is to preserve\n  // \"Pause on exceptions\" behavior. Because React wraps all user-provided\n  // functions in invokeGuardedCallback, and the production version of\n  // invokeGuardedCallback uses a try-catch, all user exceptions are treated\n  // like caught exceptions, and the DevTools won't pause unless the developer\n  // takes the extra step of enabling pause on caught exceptions. This is\n  // unintuitive, though, because even though React has caught the error, from\n  // the developer's perspective, the error is uncaught.\n  //\n  // To preserve the expected \"Pause on exceptions\" behavior, we don't use a\n  // try-catch in DEV. Instead, we synchronously dispatch a fake event to a fake\n  // DOM node, and call the user-provided callback from inside an event handler\n  // for that fake event. If the callback throws, the error is \"captured\" using\n  // a global event handler. But because the error happens in a different\n  // event loop context, it does not interrupt the normal program flow.\n  // Effectively, this gives us try-catch behavior without actually using\n  // try-catch. Neat!\n\n  // Check that the browser supports the APIs we need to implement our special\n  // DEV version of invokeGuardedCallback\n  if (\n    typeof window !== 'undefined' &&\n    typeof window.dispatchEvent === 'function' &&\n    typeof document !== 'undefined' &&\n    typeof document.createEvent === 'function'\n  ) {\n    const fakeNode = document.createElement('react');\n\n    invokeGuardedCallbackImpl = function invokeGuardedCallbackDev<\n      A,\n      B,\n      C,\n      D,\n      E,\n      F,\n      Context,\n    >(\n      name: string | null,\n      func: (a: A, b: B, c: C, d: D, e: E, f: F) => mixed,\n      context: Context,\n      a: A,\n      b: B,\n      c: C,\n      d: D,\n      e: E,\n      f: F,\n    ) {\n      // If document doesn't exist we know for sure we will crash in this method\n      // when we call document.createEvent(). However this can cause confusing\n      // errors: https://github.com/facebook/create-react-app/issues/3482\n      // So we preemptively throw with a better message instead.\n      invariant(\n        typeof document !== 'undefined',\n        'The `document` global was defined when React was initialized, but is not ' +\n          'defined anymore. This can happen in a test environment if a component ' +\n          'schedules an update from an asynchronous callback, but the test has already ' +\n          'finished running. To solve this, you can either unmount the component at ' +\n          'the end of your test (and ensure that any asynchronous operations get ' +\n          'canceled in `componentWillUnmount`), or you can change the test itself ' +\n          'to be asynchronous.',\n      );\n      const evt = document.createEvent('Event');\n\n      let didCall = false;\n      // Keeps track of whether the user-provided callback threw an error. We\n      // set this to true at the beginning, then set it to false right after\n      // calling the function. If the function errors, `didError` will never be\n      // set to false. This strategy works even if the browser is flaky and\n      // fails to call our global error handler, because it doesn't rely on\n      // the error event at all.\n      let didError = true;\n\n      // Keeps track of the value of window.event so that we can reset it\n      // during the callback to let user code access window.event in the\n      // browsers that support it.\n      const windowEvent = window.event;\n\n      // Keeps track of the descriptor of window.event to restore it after event\n      // dispatching: https://github.com/facebook/react/issues/13688\n      const windowEventDescriptor = Object.getOwnPropertyDescriptor(\n        window,\n        'event',\n      );\n\n      function restoreAfterDispatch() {\n        // We immediately remove the callback from event listeners so that\n        // nested `invokeGuardedCallback` calls do not clash. Otherwise, a\n        // nested call would trigger the fake event handlers of any call higher\n        // in the stack.\n        fakeNode.removeEventListener(evtType, callCallback, false);\n\n        // We check for window.hasOwnProperty('event') to prevent the\n        // window.event assignment in both IE <= 10 as they throw an error\n        // \"Member not found\" in strict mode, and in Firefox which does not\n        // support window.event.\n        if (\n          typeof window.event !== 'undefined' &&\n          window.hasOwnProperty('event')\n        ) {\n          window.event = windowEvent;\n        }\n      }\n\n      // Create an event handler for our fake event. We will synchronously\n      // dispatch our fake event using `dispatchEvent`. Inside the handler, we\n      // call the user-provided callback.\n      const funcArgs = Array.prototype.slice.call(arguments, 3);\n      function callCallback() {\n        didCall = true;\n        restoreAfterDispatch();\n        func.apply(context, funcArgs);\n        didError = false;\n      }\n\n      // Create a global error event handler. We use this to capture the value\n      // that was thrown. It's possible that this error handler will fire more\n      // than once; for example, if non-React code also calls `dispatchEvent`\n      // and a handler for that event throws. We should be resilient to most of\n      // those cases. Even if our error event handler fires more than once, the\n      // last error event is always used. If the callback actually does error,\n      // we know that the last error event is the correct one, because it's not\n      // possible for anything else to have happened in between our callback\n      // erroring and the code that follows the `dispatchEvent` call below. If\n      // the callback doesn't error, but the error event was fired, we know to\n      // ignore it because `didError` will be false, as described above.\n      let error;\n      // Use this to track whether the error event is ever called.\n      let didSetError = false;\n      let isCrossOriginError = false;\n\n      function handleWindowError(event) {\n        error = event.error;\n        didSetError = true;\n        if (error === null && event.colno === 0 && event.lineno === 0) {\n          isCrossOriginError = true;\n        }\n        if (event.defaultPrevented) {\n          // Some other error handler has prevented default.\n          // Browsers silence the error report if this happens.\n          // We'll remember this to later decide whether to log it or not.\n          if (error != null && typeof error === 'object') {\n            try {\n              error._suppressLogging = true;\n            } catch (inner) {\n              // Ignore.\n            }\n          }\n        }\n      }\n\n      // Create a fake event type.\n      const evtType = `react-${name ? name : 'invokeguardedcallback'}`;\n\n      // Attach our event handlers\n      window.addEventListener('error', handleWindowError);\n      fakeNode.addEventListener(evtType, callCallback, false);\n\n      // Synchronously dispatch our fake event. If the user-provided function\n      // errors, it will trigger our global error handler.\n      evt.initEvent(evtType, false, false);\n      fakeNode.dispatchEvent(evt);\n\n      if (windowEventDescriptor) {\n        Object.defineProperty(window, 'event', windowEventDescriptor);\n      }\n\n      if (didCall && didError) {\n        if (!didSetError) {\n          // The callback errored, but the error event never fired.\n          error = new Error(\n            'An error was thrown inside one of your components, but React ' +\n              \"doesn't know what it was. This is likely due to browser \" +\n              'flakiness. React does its best to preserve the \"Pause on ' +\n              'exceptions\" behavior of the DevTools, which requires some ' +\n              \"DEV-mode only tricks. It's possible that these don't work in \" +\n              'your browser. Try triggering the error in production mode, ' +\n              'or switching to a modern browser. If you suspect that this is ' +\n              'actually an issue with React, please file an issue.',\n          );\n        } else if (isCrossOriginError) {\n          error = new Error(\n            \"A cross-origin error was thrown. React doesn't have access to \" +\n              'the actual error object in development. ' +\n              'See https://reactjs.org/link/crossorigin-error for more information.',\n          );\n        }\n        this.onError(error);\n      }\n\n      // Remove our event listeners\n      window.removeEventListener('error', handleWindowError);\n\n      if (!didCall) {\n        // Something went really wrong, and our event was not dispatched.\n        // https://github.com/facebook/react/issues/16734\n        // https://github.com/facebook/react/issues/16585\n        // Fall back to the production implementation.\n        restoreAfterDispatch();\n        return invokeGuardedCallbackProd.apply(this, arguments);\n      }\n    };\n  }\n}\n\nexport default invokeGuardedCallbackImpl;\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport invariant from 'shared/invariant';\nimport invokeGuardedCallbackImpl from './invokeGuardedCallbackImpl';\n\n// Used by Fiber to simulate a try-catch.\nlet hasError: boolean = false;\nlet caughtError: mixed = null;\n\n// Used by event system to capture/rethrow the first error.\nlet hasRethrowError: boolean = false;\nlet rethrowError: mixed = null;\n\nconst reporter = {\n  onError(error: mixed) {\n    hasError = true;\n    caughtError = error;\n  },\n};\n\n/**\n * Call a function while guarding against errors that happens within it.\n * Returns an error if it throws, otherwise null.\n *\n * In production, this is implemented using a try-catch. The reason we don't\n * use a try-catch directly is so that we can swap out a different\n * implementation in DEV mode.\n *\n * @param {String} name of the guard to use for logging or debugging\n * @param {Function} func The function to invoke\n * @param {*} context The context to use when calling the function\n * @param {...*} args Arguments for function\n */\nexport function invokeGuardedCallback<A, B, C, D, E, F, Context>(\n  name: string | null,\n  func: (a: A, b: B, c: C, d: D, e: E, f: F) => mixed,\n  context: Context,\n  a: A,\n  b: B,\n  c: C,\n  d: D,\n  e: E,\n  f: F,\n): void {\n  hasError = false;\n  caughtError = null;\n  invokeGuardedCallbackImpl.apply(reporter, arguments);\n}\n\n/**\n * Same as invokeGuardedCallback, but instead of returning an error, it stores\n * it in a global so it can be rethrown by `rethrowCaughtError` later.\n * TODO: See if caughtError and rethrowError can be unified.\n *\n * @param {String} name of the guard to use for logging or debugging\n * @param {Function} func The function to invoke\n * @param {*} context The context to use when calling the function\n * @param {...*} args Arguments for function\n */\nexport function invokeGuardedCallbackAndCatchFirstError<\n  A,\n  B,\n  C,\n  D,\n  E,\n  F,\n  Context,\n>(\n  name: string | null,\n  func: (a: A, b: B, c: C, d: D, e: E, f: F) => void,\n  context: Context,\n  a: A,\n  b: B,\n  c: C,\n  d: D,\n  e: E,\n  f: F,\n): void {\n  invokeGuardedCallback.apply(this, arguments);\n  if (hasError) {\n    const error = clearCaughtError();\n    if (!hasRethrowError) {\n      hasRethrowError = true;\n      rethrowError = error;\n    }\n  }\n}\n\n/**\n * During execution of guarded functions we will capture the first error which\n * we will rethrow to be handled by the top level error handler.\n */\nexport function rethrowCaughtError() {\n  if (hasRethrowError) {\n    const error = rethrowError;\n    hasRethrowError = false;\n    rethrowError = null;\n    throw error;\n  }\n}\n\nexport function hasCaughtError() {\n  return hasError;\n}\n\nexport function clearCaughtError() {\n  if (hasError) {\n    const error = caughtError;\n    hasError = false;\n    caughtError = null;\n    return error;\n  } else {\n    invariant(\n      false,\n      'clearCaughtError was called but no error was captured. This error ' +\n        'is likely caused by a bug in React. Please file an issue.',\n    );\n  }\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {\n  Instance,\n  TextInstance,\n  SuspenseInstance,\n  Container,\n  ChildSet,\n  UpdatePayload,\n} from './ReactFiberHostConfig';\nimport type {Fiber} from './ReactInternalTypes';\nimport type {FiberRoot} from './ReactInternalTypes';\nimport type {Lanes} from './ReactFiberLane.old';\nimport type {SuspenseState} from './ReactFiberSuspenseComponent.old';\nimport type {UpdateQueue} from './ReactUpdateQueue.old';\nimport type {FunctionComponentUpdateQueue} from './ReactFiberHooks.old';\nimport type {Wakeable} from 'shared/ReactTypes';\nimport type {OffscreenState} from './ReactFiberOffscreenComponent';\nimport type {HookFlags} from './ReactHookEffectTags';\n\nimport {\n  enableCreateEventHandleAPI,\n  enableProfilerTimer,\n  enableProfilerCommitHooks,\n  enableProfilerNestedUpdatePhase,\n  enableSuspenseServerRenderer,\n  enableSuspenseCallback,\n  enableScopeAPI,\n  enableStrictEffects,\n  deletedTreeCleanUpLevel,\n  enableSuspenseLayoutEffectSemantics,\n  enableUpdaterTracking,\n} from 'shared/ReactFeatureFlags';\nimport {\n  FunctionComponent,\n  ForwardRef,\n  ClassComponent,\n  HostRoot,\n  HostComponent,\n  HostText,\n  HostPortal,\n  Profiler,\n  SuspenseComponent,\n  DehydratedFragment,\n  IncompleteClassComponent,\n  MemoComponent,\n  SimpleMemoComponent,\n  SuspenseListComponent,\n  ScopeComponent,\n  OffscreenComponent,\n  LegacyHiddenComponent,\n} from './ReactWorkTags';\nimport {detachDeletedInstance} from './ReactFiberHostConfig';\nimport {\n  NoFlags,\n  ContentReset,\n  Placement,\n  PlacementAndUpdate,\n  ChildDeletion,\n  Snapshot,\n  Update,\n  Ref,\n  Hydrating,\n  HydratingAndUpdate,\n  Passive,\n  BeforeMutationMask,\n  MutationMask,\n  LayoutMask,\n  PassiveMask,\n  Visibility,\n} from './ReactFiberFlags';\nimport getComponentNameFromFiber from 'react-reconciler/src/getComponentNameFromFiber';\nimport invariant from 'shared/invariant';\nimport {\n  resetCurrentFiber as resetCurrentDebugFiberInDEV,\n  setCurrentFiber as setCurrentDebugFiberInDEV,\n} from './ReactCurrentFiber';\nimport {isDevToolsPresent} from './ReactFiberDevToolsHook.old';\nimport {onCommitUnmount} from './ReactFiberDevToolsHook.old';\nimport {resolveDefaultProps} from './ReactFiberLazyComponent.old';\nimport {\n  isCurrentUpdateNested,\n  getCommitTime,\n  recordLayoutEffectDuration,\n  startLayoutEffectTimer,\n  recordPassiveEffectDuration,\n  startPassiveEffectTimer,\n} from './ReactProfilerTimer.old';\nimport {ConcurrentMode, NoMode, ProfileMode} from './ReactTypeOfMode';\nimport {commitUpdateQueue} from './ReactUpdateQueue.old';\nimport {\n  getPublicInstance,\n  supportsMutation,\n  supportsPersistence,\n  supportsHydration,\n  commitMount,\n  commitUpdate,\n  resetTextContent,\n  commitTextUpdate,\n  appendChild,\n  appendChildToContainer,\n  insertBefore,\n  insertInContainerBefore,\n  removeChild,\n  removeChildFromContainer,\n  clearSuspenseBoundary,\n  clearSuspenseBoundaryFromContainer,\n  replaceContainerChildren,\n  createContainerChildSet,\n  hideInstance,\n  hideTextInstance,\n  unhideInstance,\n  unhideTextInstance,\n  commitHydratedContainer,\n  commitHydratedSuspenseInstance,\n  clearContainer,\n  prepareScopeUpdate,\n  prepareForCommit,\n  beforeActiveInstanceBlur,\n} from './ReactFiberHostConfig';\nimport {\n  captureCommitPhaseError,\n  resolveRetryWakeable,\n  markCommitTimeOfFallback,\n  enqueuePendingPassiveProfilerEffect,\n  restorePendingUpdaters,\n} from './ReactFiberWorkLoop.old';\nimport {\n  NoFlags as NoHookEffect,\n  HasEffect as HookHasEffect,\n  Layout as HookLayout,\n  Passive as HookPassive,\n} from './ReactHookEffectTags';\nimport {didWarnAboutReassigningProps} from './ReactFiberBeginWork.old';\nimport {doesFiberContain} from './ReactFiberTreeReflection';\nimport {invokeGuardedCallback, clearCaughtError} from 'shared/ReactErrorUtils';\n\nlet didWarnAboutUndefinedSnapshotBeforeUpdate: Set<mixed> | null = null;\nif (__DEV__) {\n  didWarnAboutUndefinedSnapshotBeforeUpdate = new Set();\n}\n\n// Used during the commit phase to track the state of the Offscreen component stack.\n// Allows us to avoid traversing the return path to find the nearest Offscreen ancestor.\n// Only used when enableSuspenseLayoutEffectSemantics is enabled.\nlet offscreenSubtreeIsHidden: boolean = false;\nlet offscreenSubtreeWasHidden: boolean = false;\n\nconst PossiblyWeakSet = typeof WeakSet === 'function' ? WeakSet : Set;\n\nlet nextEffect: Fiber | null = null;\n\n// Used for Profiling builds to track updaters.\nlet inProgressLanes: Lanes | null = null;\nlet inProgressRoot: FiberRoot | null = null;\n\nfunction reportUncaughtErrorInDEV(error) {\n  // Wrapping each small part of the commit phase into a guarded\n  // callback is a bit too slow (https://github.com/facebook/react/pull/21666).\n  // But we rely on it to surface errors to DEV tools like overlays\n  // (https://github.com/facebook/react/issues/21712).\n  // As a compromise, rethrow only caught errors in a guard.\n  if (__DEV__) {\n    invokeGuardedCallback(null, () => {\n      throw error;\n    });\n    clearCaughtError();\n  }\n}\n\nconst callComponentWillUnmountWithTimer = function(current, instance) {\n  instance.props = current.memoizedProps;\n  instance.state = current.memoizedState;\n  if (\n    enableProfilerTimer &&\n    enableProfilerCommitHooks &&\n    current.mode & ProfileMode\n  ) {\n    try {\n      startLayoutEffectTimer();\n      instance.componentWillUnmount();\n    } finally {\n      recordLayoutEffectDuration(current);\n    }\n  } else {\n    instance.componentWillUnmount();\n  }\n};\n\n// Capture errors so they don't interrupt mounting.\nfunction safelyCallCommitHookLayoutEffectListMount(\n  current: Fiber,\n  nearestMountedAncestor: Fiber | null,\n) {\n  try {\n    commitHookEffectListMount(HookLayout, current);\n  } catch (error) {\n    reportUncaughtErrorInDEV(error);\n    captureCommitPhaseError(current, nearestMountedAncestor, error);\n  }\n}\n\n// Capture errors so they don't interrupt unmounting.\nfunction safelyCallComponentWillUnmount(\n  current: Fiber,\n  nearestMountedAncestor: Fiber | null,\n  instance: any,\n) {\n  try {\n    callComponentWillUnmountWithTimer(current, instance);\n  } catch (error) {\n    reportUncaughtErrorInDEV(error);\n    captureCommitPhaseError(current, nearestMountedAncestor, error);\n  }\n}\n\n// Capture errors so they don't interrupt mounting.\nfunction safelyCallComponentDidMount(\n  current: Fiber,\n  nearestMountedAncestor: Fiber | null,\n  instance: any,\n) {\n  try {\n    instance.componentDidMount();\n  } catch (error) {\n    reportUncaughtErrorInDEV(error);\n    captureCommitPhaseError(current, nearestMountedAncestor, error);\n  }\n}\n\n// Capture errors so they don't interrupt mounting.\nfunction safelyAttachRef(current: Fiber, nearestMountedAncestor: Fiber | null) {\n  try {\n    commitAttachRef(current);\n  } catch (error) {\n    reportUncaughtErrorInDEV(error);\n    captureCommitPhaseError(current, nearestMountedAncestor, error);\n  }\n}\n\nfunction safelyDetachRef(current: Fiber, nearestMountedAncestor: Fiber | null) {\n  const ref = current.ref;\n  if (ref !== null) {\n    if (typeof ref === 'function') {\n      try {\n        if (\n          enableProfilerTimer &&\n          enableProfilerCommitHooks &&\n          current.mode & ProfileMode\n        ) {\n          try {\n            startLayoutEffectTimer();\n            ref(null);\n          } finally {\n            recordLayoutEffectDuration(current);\n          }\n        } else {\n          ref(null);\n        }\n      } catch (error) {\n        reportUncaughtErrorInDEV(error);\n        captureCommitPhaseError(current, nearestMountedAncestor, error);\n      }\n    } else {\n      ref.current = null;\n    }\n  }\n}\n\nfunction safelyCallDestroy(\n  current: Fiber,\n  nearestMountedAncestor: Fiber | null,\n  destroy: () => void,\n) {\n  try {\n    destroy();\n  } catch (error) {\n    reportUncaughtErrorInDEV(error);\n    captureCommitPhaseError(current, nearestMountedAncestor, error);\n  }\n}\n\nlet focusedInstanceHandle: null | Fiber = null;\nlet shouldFireAfterActiveInstanceBlur: boolean = false;\n\nexport function commitBeforeMutationEffects(\n  root: FiberRoot,\n  firstChild: Fiber,\n) {\n  focusedInstanceHandle = prepareForCommit(root.containerInfo);\n\n  nextEffect = firstChild;\n  commitBeforeMutationEffects_begin();\n\n  // We no longer need to track the active instance fiber\n  const shouldFire = shouldFireAfterActiveInstanceBlur;\n  shouldFireAfterActiveInstanceBlur = false;\n  focusedInstanceHandle = null;\n\n  return shouldFire;\n}\n\nfunction commitBeforeMutationEffects_begin() {\n  while (nextEffect !== null) {\n    const fiber = nextEffect;\n\n    // This phase is only used for beforeActiveInstanceBlur.\n    // Let's skip the whole loop if it's off.\n    if (enableCreateEventHandleAPI) {\n      // TODO: Should wrap this in flags check, too, as optimization\n      const deletions = fiber.deletions;\n      if (deletions !== null) {\n        for (let i = 0; i < deletions.length; i++) {\n          const deletion = deletions[i];\n          commitBeforeMutationEffectsDeletion(deletion);\n        }\n      }\n    }\n\n    const child = fiber.child;\n    if (\n      (fiber.subtreeFlags & BeforeMutationMask) !== NoFlags &&\n      child !== null\n    ) {\n      ensureCorrectReturnPointer(child, fiber);\n      nextEffect = child;\n    } else {\n      commitBeforeMutationEffects_complete();\n    }\n  }\n}\n\nfunction commitBeforeMutationEffects_complete() {\n  while (nextEffect !== null) {\n    const fiber = nextEffect;\n    setCurrentDebugFiberInDEV(fiber);\n    try {\n      commitBeforeMutationEffectsOnFiber(fiber);\n    } catch (error) {\n      reportUncaughtErrorInDEV(error);\n      captureCommitPhaseError(fiber, fiber.return, error);\n    }\n    resetCurrentDebugFiberInDEV();\n\n    const sibling = fiber.sibling;\n    if (sibling !== null) {\n      ensureCorrectReturnPointer(sibling, fiber.return);\n      nextEffect = sibling;\n      return;\n    }\n\n    nextEffect = fiber.return;\n  }\n}\n\nfunction commitBeforeMutationEffectsOnFiber(finishedWork: Fiber) {\n  const current = finishedWork.alternate;\n  const flags = finishedWork.flags;\n\n  if (enableCreateEventHandleAPI) {\n    if (!shouldFireAfterActiveInstanceBlur && focusedInstanceHandle !== null) {\n      // Check to see if the focused element was inside of a hidden (Suspense) subtree.\n      // TODO: Move this out of the hot path using a dedicated effect tag.\n      if (\n        finishedWork.tag === SuspenseComponent &&\n        isSuspenseBoundaryBeingHidden(current, finishedWork) &&\n        doesFiberContain(finishedWork, focusedInstanceHandle)\n      ) {\n        shouldFireAfterActiveInstanceBlur = true;\n        beforeActiveInstanceBlur(finishedWork);\n      }\n    }\n  }\n\n  if ((flags & Snapshot) !== NoFlags) {\n    setCurrentDebugFiberInDEV(finishedWork);\n\n    switch (finishedWork.tag) {\n      case FunctionComponent:\n      case ForwardRef:\n      case SimpleMemoComponent: {\n        break;\n      }\n      case ClassComponent: {\n        if (current !== null) {\n          const prevProps = current.memoizedProps;\n          const prevState = current.memoizedState;\n          const instance = finishedWork.stateNode;\n          // We could update instance props and state here,\n          // but instead we rely on them being set during last render.\n          // TODO: revisit this when we implement resuming.\n          if (__DEV__) {\n            if (\n              finishedWork.type === finishedWork.elementType &&\n              !didWarnAboutReassigningProps\n            ) {\n              if (instance.props !== finishedWork.memoizedProps) {\n                console.error(\n                  'Expected %s props to match memoized props before ' +\n                    'getSnapshotBeforeUpdate. ' +\n                    'This might either be because of a bug in React, or because ' +\n                    'a component reassigns its own `this.props`. ' +\n                    'Please file an issue.',\n                  getComponentNameFromFiber(finishedWork) || 'instance',\n                );\n              }\n              if (instance.state !== finishedWork.memoizedState) {\n                console.error(\n                  'Expected %s state to match memoized state before ' +\n                    'getSnapshotBeforeUpdate. ' +\n                    'This might either be because of a bug in React, or because ' +\n                    'a component reassigns its own `this.state`. ' +\n                    'Please file an issue.',\n                  getComponentNameFromFiber(finishedWork) || 'instance',\n                );\n              }\n            }\n          }\n          const snapshot = instance.getSnapshotBeforeUpdate(\n            finishedWork.elementType === finishedWork.type\n              ? prevProps\n              : resolveDefaultProps(finishedWork.type, prevProps),\n            prevState,\n          );\n          if (__DEV__) {\n            const didWarnSet = ((didWarnAboutUndefinedSnapshotBeforeUpdate: any): Set<mixed>);\n            if (snapshot === undefined && !didWarnSet.has(finishedWork.type)) {\n              didWarnSet.add(finishedWork.type);\n              console.error(\n                '%s.getSnapshotBeforeUpdate(): A snapshot value (or null) ' +\n                  'must be returned. You have returned undefined.',\n                getComponentNameFromFiber(finishedWork),\n              );\n            }\n          }\n          instance.__reactInternalSnapshotBeforeUpdate = snapshot;\n        }\n        break;\n      }\n      case HostRoot: {\n        if (supportsMutation) {\n          const root = finishedWork.stateNode;\n          clearContainer(root.containerInfo);\n        }\n        break;\n      }\n      case HostComponent:\n      case HostText:\n      case HostPortal:\n      case IncompleteClassComponent:\n        // Nothing to do for these component types\n        break;\n      default: {\n        invariant(\n          false,\n          'This unit of work tag should not have side-effects. This error is ' +\n            'likely caused by a bug in React. Please file an issue.',\n        );\n      }\n    }\n\n    resetCurrentDebugFiberInDEV();\n  }\n}\n\nfunction commitBeforeMutationEffectsDeletion(deletion: Fiber) {\n  if (enableCreateEventHandleAPI) {\n    // TODO (effects) It would be nice to avoid calling doesFiberContain()\n    // Maybe we can repurpose one of the subtreeFlags positions for this instead?\n    // Use it to store which part of the tree the focused instance is in?\n    // This assumes we can safely determine that instance during the \"render\" phase.\n    if (doesFiberContain(deletion, ((focusedInstanceHandle: any): Fiber))) {\n      shouldFireAfterActiveInstanceBlur = true;\n      beforeActiveInstanceBlur(deletion);\n    }\n  }\n}\n\nfunction commitHookEffectListUnmount(\n  flags: HookFlags,\n  finishedWork: Fiber,\n  nearestMountedAncestor: Fiber | null,\n) {\n  const updateQueue: FunctionComponentUpdateQueue | null = (finishedWork.updateQueue: any);\n  const lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;\n  if (lastEffect !== null) {\n    const firstEffect = lastEffect.next;\n    let effect = firstEffect;\n    do {\n      if ((effect.tag & flags) === flags) {\n        // Unmount\n        const destroy = effect.destroy;\n        effect.destroy = undefined;\n        if (destroy !== undefined) {\n          safelyCallDestroy(finishedWork, nearestMountedAncestor, destroy);\n        }\n      }\n      effect = effect.next;\n    } while (effect !== firstEffect);\n  }\n}\n\nfunction commitHookEffectListMount(tag: number, finishedWork: Fiber) {\n  const updateQueue: FunctionComponentUpdateQueue | null = (finishedWork.updateQueue: any);\n  const lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;\n  if (lastEffect !== null) {\n    const firstEffect = lastEffect.next;\n    let effect = firstEffect;\n    do {\n      if ((effect.tag & tag) === tag) {\n        // Mount\n        const create = effect.create;\n        effect.destroy = create();\n\n        if (__DEV__) {\n          const destroy = effect.destroy;\n          if (destroy !== undefined && typeof destroy !== 'function') {\n            let addendum;\n            if (destroy === null) {\n              addendum =\n                ' You returned null. If your effect does not require clean ' +\n                'up, return undefined (or nothing).';\n            } else if (typeof destroy.then === 'function') {\n              addendum =\n                '\\n\\nIt looks like you wrote useEffect(async () => ...) or returned a Promise. ' +\n                'Instead, write the async function inside your effect ' +\n                'and call it immediately:\\n\\n' +\n                'useEffect(() => {\\n' +\n                '  async function fetchData() {\\n' +\n                '    // You can await here\\n' +\n                '    const response = await MyAPI.getData(someId);\\n' +\n                '    // ...\\n' +\n                '  }\\n' +\n                '  fetchData();\\n' +\n                `}, [someId]); // Or [] if effect doesn't need props or state\\n\\n` +\n                'Learn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching';\n            } else {\n              addendum = ' You returned: ' + destroy;\n            }\n            console.error(\n              'An effect function must not return anything besides a function, ' +\n                'which is used for clean-up.%s',\n              addendum,\n            );\n          }\n        }\n      }\n      effect = effect.next;\n    } while (effect !== firstEffect);\n  }\n}\n\nexport function commitPassiveEffectDurations(\n  finishedRoot: FiberRoot,\n  finishedWork: Fiber,\n): void {\n  if (enableProfilerTimer && enableProfilerCommitHooks) {\n    // Only Profilers with work in their subtree will have an Update effect scheduled.\n    if ((finishedWork.flags & Update) !== NoFlags) {\n      switch (finishedWork.tag) {\n        case Profiler: {\n          const {passiveEffectDuration} = finishedWork.stateNode;\n          const {id, onPostCommit} = finishedWork.memoizedProps;\n\n          // This value will still reflect the previous commit phase.\n          // It does not get reset until the start of the next commit phase.\n          const commitTime = getCommitTime();\n\n          let phase = finishedWork.alternate === null ? 'mount' : 'update';\n          if (enableProfilerNestedUpdatePhase) {\n            if (isCurrentUpdateNested()) {\n              phase = 'nested-update';\n            }\n          }\n\n          if (typeof onPostCommit === 'function') {\n            onPostCommit(id, phase, passiveEffectDuration, commitTime);\n          }\n\n          // Bubble times to the next nearest ancestor Profiler.\n          // After we process that Profiler, we'll bubble further up.\n          let parentFiber = finishedWork.return;\n          outer: while (parentFiber !== null) {\n            switch (parentFiber.tag) {\n              case HostRoot:\n                const root = parentFiber.stateNode;\n                root.passiveEffectDuration += passiveEffectDuration;\n                break outer;\n              case Profiler:\n                const parentStateNode = parentFiber.stateNode;\n                parentStateNode.passiveEffectDuration += passiveEffectDuration;\n                break outer;\n            }\n            parentFiber = parentFiber.return;\n          }\n          break;\n        }\n        default:\n          break;\n      }\n    }\n  }\n}\n\nfunction commitLayoutEffectOnFiber(\n  finishedRoot: FiberRoot,\n  current: Fiber | null,\n  finishedWork: Fiber,\n  committedLanes: Lanes,\n): void {\n  if ((finishedWork.flags & LayoutMask) !== NoFlags) {\n    switch (finishedWork.tag) {\n      case FunctionComponent:\n      case ForwardRef:\n      case SimpleMemoComponent: {\n        if (\n          !enableSuspenseLayoutEffectSemantics ||\n          !offscreenSubtreeWasHidden\n        ) {\n          // At this point layout effects have already been destroyed (during mutation phase).\n          // This is done to prevent sibling component effects from interfering with each other,\n          // e.g. a destroy function in one component should never override a ref set\n          // by a create function in another component during the same commit.\n          if (\n            enableProfilerTimer &&\n            enableProfilerCommitHooks &&\n            finishedWork.mode & ProfileMode\n          ) {\n            try {\n              startLayoutEffectTimer();\n              commitHookEffectListMount(\n                HookLayout | HookHasEffect,\n                finishedWork,\n              );\n            } finally {\n              recordLayoutEffectDuration(finishedWork);\n            }\n          } else {\n            commitHookEffectListMount(HookLayout | HookHasEffect, finishedWork);\n          }\n        }\n        break;\n      }\n      case ClassComponent: {\n        const instance = finishedWork.stateNode;\n        if (finishedWork.flags & Update) {\n          if (!offscreenSubtreeWasHidden) {\n            if (current === null) {\n              // We could update instance props and state here,\n              // but instead we rely on them being set during last render.\n              // TODO: revisit this when we implement resuming.\n              if (__DEV__) {\n                if (\n                  finishedWork.type === finishedWork.elementType &&\n                  !didWarnAboutReassigningProps\n                ) {\n                  if (instance.props !== finishedWork.memoizedProps) {\n                    console.error(\n                      'Expected %s props to match memoized props before ' +\n                        'componentDidMount. ' +\n                        'This might either be because of a bug in React, or because ' +\n                        'a component reassigns its own `this.props`. ' +\n                        'Please file an issue.',\n                      getComponentNameFromFiber(finishedWork) || 'instance',\n                    );\n                  }\n                  if (instance.state !== finishedWork.memoizedState) {\n                    console.error(\n                      'Expected %s state to match memoized state before ' +\n                        'componentDidMount. ' +\n                        'This might either be because of a bug in React, or because ' +\n                        'a component reassigns its own `this.state`. ' +\n                        'Please file an issue.',\n                      getComponentNameFromFiber(finishedWork) || 'instance',\n                    );\n                  }\n                }\n              }\n              if (\n                enableProfilerTimer &&\n                enableProfilerCommitHooks &&\n                finishedWork.mode & ProfileMode\n              ) {\n                try {\n                  startLayoutEffectTimer();\n                  instance.componentDidMount();\n                } finally {\n                  recordLayoutEffectDuration(finishedWork);\n                }\n              } else {\n                instance.componentDidMount();\n              }\n            } else {\n              const prevProps =\n                finishedWork.elementType === finishedWork.type\n                  ? current.memoizedProps\n                  : resolveDefaultProps(\n                      finishedWork.type,\n                      current.memoizedProps,\n                    );\n              const prevState = current.memoizedState;\n              // We could update instance props and state here,\n              // but instead we rely on them being set during last render.\n              // TODO: revisit this when we implement resuming.\n              if (__DEV__) {\n                if (\n                  finishedWork.type === finishedWork.elementType &&\n                  !didWarnAboutReassigningProps\n                ) {\n                  if (instance.props !== finishedWork.memoizedProps) {\n                    console.error(\n                      'Expected %s props to match memoized props before ' +\n                        'componentDidUpdate. ' +\n                        'This might either be because of a bug in React, or because ' +\n                        'a component reassigns its own `this.props`. ' +\n                        'Please file an issue.',\n                      getComponentNameFromFiber(finishedWork) || 'instance',\n                    );\n                  }\n                  if (instance.state !== finishedWork.memoizedState) {\n                    console.error(\n                      'Expected %s state to match memoized state before ' +\n                        'componentDidUpdate. ' +\n                        'This might either be because of a bug in React, or because ' +\n                        'a component reassigns its own `this.state`. ' +\n                        'Please file an issue.',\n                      getComponentNameFromFiber(finishedWork) || 'instance',\n                    );\n                  }\n                }\n              }\n              if (\n                enableProfilerTimer &&\n                enableProfilerCommitHooks &&\n                finishedWork.mode & ProfileMode\n              ) {\n                try {\n                  startLayoutEffectTimer();\n                  instance.componentDidUpdate(\n                    prevProps,\n                    prevState,\n                    instance.__reactInternalSnapshotBeforeUpdate,\n                  );\n                } finally {\n                  recordLayoutEffectDuration(finishedWork);\n                }\n              } else {\n                instance.componentDidUpdate(\n                  prevProps,\n                  prevState,\n                  instance.__reactInternalSnapshotBeforeUpdate,\n                );\n              }\n            }\n          }\n        }\n\n        // TODO: I think this is now always non-null by the time it reaches the\n        // commit phase. Consider removing the type check.\n        const updateQueue: UpdateQueue<\n          *,\n        > | null = (finishedWork.updateQueue: any);\n        if (updateQueue !== null) {\n          if (__DEV__) {\n            if (\n              finishedWork.type === finishedWork.elementType &&\n              !didWarnAboutReassigningProps\n            ) {\n              if (instance.props !== finishedWork.memoizedProps) {\n                console.error(\n                  'Expected %s props to match memoized props before ' +\n                    'processing the update queue. ' +\n                    'This might either be because of a bug in React, or because ' +\n                    'a component reassigns its own `this.props`. ' +\n                    'Please file an issue.',\n                  getComponentNameFromFiber(finishedWork) || 'instance',\n                );\n              }\n              if (instance.state !== finishedWork.memoizedState) {\n                console.error(\n                  'Expected %s state to match memoized state before ' +\n                    'processing the update queue. ' +\n                    'This might either be because of a bug in React, or because ' +\n                    'a component reassigns its own `this.state`. ' +\n                    'Please file an issue.',\n                  getComponentNameFromFiber(finishedWork) || 'instance',\n                );\n              }\n            }\n          }\n          // We could update instance props and state here,\n          // but instead we rely on them being set during last render.\n          // TODO: revisit this when we implement resuming.\n          commitUpdateQueue(finishedWork, updateQueue, instance);\n        }\n        break;\n      }\n      case HostRoot: {\n        // TODO: I think this is now always non-null by the time it reaches the\n        // commit phase. Consider removing the type check.\n        const updateQueue: UpdateQueue<\n          *,\n        > | null = (finishedWork.updateQueue: any);\n        if (updateQueue !== null) {\n          let instance = null;\n          if (finishedWork.child !== null) {\n            switch (finishedWork.child.tag) {\n              case HostComponent:\n                instance = getPublicInstance(finishedWork.child.stateNode);\n                break;\n              case ClassComponent:\n                instance = finishedWork.child.stateNode;\n                break;\n            }\n          }\n          commitUpdateQueue(finishedWork, updateQueue, instance);\n        }\n        break;\n      }\n      case HostComponent: {\n        const instance: Instance = finishedWork.stateNode;\n\n        // Renderers may schedule work to be done after host components are mounted\n        // (eg DOM renderer may schedule auto-focus for inputs and form controls).\n        // These effects should only be committed when components are first mounted,\n        // aka when there is no current/alternate.\n        if (current === null && finishedWork.flags & Update) {\n          const type = finishedWork.type;\n          const props = finishedWork.memoizedProps;\n          commitMount(instance, type, props, finishedWork);\n        }\n\n        break;\n      }\n      case HostText: {\n        // We have no life-cycles associated with text.\n        break;\n      }\n      case HostPortal: {\n        // We have no life-cycles associated with portals.\n        break;\n      }\n      case Profiler: {\n        if (enableProfilerTimer) {\n          const {onCommit, onRender} = finishedWork.memoizedProps;\n          const {effectDuration} = finishedWork.stateNode;\n\n          const commitTime = getCommitTime();\n\n          let phase = current === null ? 'mount' : 'update';\n          if (enableProfilerNestedUpdatePhase) {\n            if (isCurrentUpdateNested()) {\n              phase = 'nested-update';\n            }\n          }\n\n          if (typeof onRender === 'function') {\n            onRender(\n              finishedWork.memoizedProps.id,\n              phase,\n              finishedWork.actualDuration,\n              finishedWork.treeBaseDuration,\n              finishedWork.actualStartTime,\n              commitTime,\n            );\n          }\n\n          if (enableProfilerCommitHooks) {\n            if (typeof onCommit === 'function') {\n              onCommit(\n                finishedWork.memoizedProps.id,\n                phase,\n                effectDuration,\n                commitTime,\n              );\n            }\n\n            // Schedule a passive effect for this Profiler to call onPostCommit hooks.\n            // This effect should be scheduled even if there is no onPostCommit callback for this Profiler,\n            // because the effect is also where times bubble to parent Profilers.\n            enqueuePendingPassiveProfilerEffect(finishedWork);\n\n            // Propagate layout effect durations to the next nearest Profiler ancestor.\n            // Do not reset these values until the next render so DevTools has a chance to read them first.\n            let parentFiber = finishedWork.return;\n            outer: while (parentFiber !== null) {\n              switch (parentFiber.tag) {\n                case HostRoot:\n                  const root = parentFiber.stateNode;\n                  root.effectDuration += effectDuration;\n                  break outer;\n                case Profiler:\n                  const parentStateNode = parentFiber.stateNode;\n                  parentStateNode.effectDuration += effectDuration;\n                  break outer;\n              }\n              parentFiber = parentFiber.return;\n            }\n          }\n        }\n        break;\n      }\n      case SuspenseComponent: {\n        commitSuspenseHydrationCallbacks(finishedRoot, finishedWork);\n        break;\n      }\n      case SuspenseListComponent:\n      case IncompleteClassComponent:\n      case ScopeComponent:\n      case OffscreenComponent:\n      case LegacyHiddenComponent:\n        break;\n      default:\n        invariant(\n          false,\n          'This unit of work tag should not have side-effects. This error is ' +\n            'likely caused by a bug in React. Please file an issue.',\n        );\n    }\n  }\n\n  if (!enableSuspenseLayoutEffectSemantics || !offscreenSubtreeWasHidden) {\n    if (enableScopeAPI) {\n      // TODO: This is a temporary solution that allowed us to transition away\n      // from React Flare on www.\n      if (finishedWork.flags & Ref && finishedWork.tag !== ScopeComponent) {\n        commitAttachRef(finishedWork);\n      }\n    } else {\n      if (finishedWork.flags & Ref) {\n        commitAttachRef(finishedWork);\n      }\n    }\n  }\n}\n\nfunction reappearLayoutEffectsOnFiber(node: Fiber) {\n  // Turn on layout effects in a tree that previously disappeared.\n  // TODO (Offscreen) Check: flags & LayoutStatic\n  switch (node.tag) {\n    case FunctionComponent:\n    case ForwardRef:\n    case SimpleMemoComponent: {\n      if (\n        enableProfilerTimer &&\n        enableProfilerCommitHooks &&\n        node.mode & ProfileMode\n      ) {\n        try {\n          startLayoutEffectTimer();\n          safelyCallCommitHookLayoutEffectListMount(node, node.return);\n        } finally {\n          recordLayoutEffectDuration(node);\n        }\n      } else {\n        safelyCallCommitHookLayoutEffectListMount(node, node.return);\n      }\n      break;\n    }\n    case ClassComponent: {\n      const instance = node.stateNode;\n      if (typeof instance.componentDidMount === 'function') {\n        safelyCallComponentDidMount(node, node.return, instance);\n      }\n      safelyAttachRef(node, node.return);\n      break;\n    }\n    case HostComponent: {\n      safelyAttachRef(node, node.return);\n      break;\n    }\n  }\n}\n\nfunction hideOrUnhideAllChildren(finishedWork, isHidden) {\n  // Only hide or unhide the top-most host nodes.\n  let hostSubtreeRoot = null;\n\n  if (supportsMutation) {\n    // We only have the top Fiber that was inserted but we need to recurse down its\n    // children to find all the terminal nodes.\n    let node: Fiber = finishedWork;\n    while (true) {\n      if (node.tag === HostComponent) {\n        if (hostSubtreeRoot === null) {\n          hostSubtreeRoot = node;\n\n          const instance = node.stateNode;\n          if (isHidden) {\n            hideInstance(instance);\n          } else {\n            unhideInstance(node.stateNode, node.memoizedProps);\n          }\n        }\n      } else if (node.tag === HostText) {\n        if (hostSubtreeRoot === null) {\n          const instance = node.stateNode;\n          if (isHidden) {\n            hideTextInstance(instance);\n          } else {\n            unhideTextInstance(instance, node.memoizedProps);\n          }\n        }\n      } else if (\n        (node.tag === OffscreenComponent ||\n          node.tag === LegacyHiddenComponent) &&\n        (node.memoizedState: OffscreenState) !== null &&\n        node !== finishedWork\n      ) {\n        // Found a nested Offscreen component that is hidden.\n        // Don't search any deeper. This tree should remain hidden.\n      } else if (node.child !== null) {\n        node.child.return = node;\n        node = node.child;\n        continue;\n      }\n\n      if (node === finishedWork) {\n        return;\n      }\n      while (node.sibling === null) {\n        if (node.return === null || node.return === finishedWork) {\n          return;\n        }\n\n        if (hostSubtreeRoot === node) {\n          hostSubtreeRoot = null;\n        }\n\n        node = node.return;\n      }\n\n      if (hostSubtreeRoot === node) {\n        hostSubtreeRoot = null;\n      }\n\n      node.sibling.return = node.return;\n      node = node.sibling;\n    }\n  }\n}\n\nfunction commitAttachRef(finishedWork: Fiber) {\n  const ref = finishedWork.ref;\n  if (ref !== null) {\n    const instance = finishedWork.stateNode;\n    let instanceToUse;\n    switch (finishedWork.tag) {\n      case HostComponent:\n        instanceToUse = getPublicInstance(instance);\n        break;\n      default:\n        instanceToUse = instance;\n    }\n    // Moved outside to ensure DCE works with this flag\n    if (enableScopeAPI && finishedWork.tag === ScopeComponent) {\n      instanceToUse = instance;\n    }\n    if (typeof ref === 'function') {\n      if (\n        enableProfilerTimer &&\n        enableProfilerCommitHooks &&\n        finishedWork.mode & ProfileMode\n      ) {\n        try {\n          startLayoutEffectTimer();\n          ref(instanceToUse);\n        } finally {\n          recordLayoutEffectDuration(finishedWork);\n        }\n      } else {\n        ref(instanceToUse);\n      }\n    } else {\n      if (__DEV__) {\n        if (!ref.hasOwnProperty('current')) {\n          console.error(\n            'Unexpected ref object provided for %s. ' +\n              'Use either a ref-setter function or React.createRef().',\n            getComponentNameFromFiber(finishedWork),\n          );\n        }\n      }\n\n      ref.current = instanceToUse;\n    }\n  }\n}\n\nfunction commitDetachRef(current: Fiber) {\n  const currentRef = current.ref;\n  if (currentRef !== null) {\n    if (typeof currentRef === 'function') {\n      if (\n        enableProfilerTimer &&\n        enableProfilerCommitHooks &&\n        current.mode & ProfileMode\n      ) {\n        try {\n          startLayoutEffectTimer();\n          currentRef(null);\n        } finally {\n          recordLayoutEffectDuration(current);\n        }\n      } else {\n        currentRef(null);\n      }\n    } else {\n      currentRef.current = null;\n    }\n  }\n}\n\n// User-originating errors (lifecycles and refs) should not interrupt\n// deletion, so don't let them throw. Host-originating errors should\n// interrupt deletion, so it's okay\nfunction commitUnmount(\n  finishedRoot: FiberRoot,\n  current: Fiber,\n  nearestMountedAncestor: Fiber,\n): void {\n  onCommitUnmount(current);\n\n  switch (current.tag) {\n    case FunctionComponent:\n    case ForwardRef:\n    case MemoComponent:\n    case SimpleMemoComponent: {\n      const updateQueue: FunctionComponentUpdateQueue | null = (current.updateQueue: any);\n      if (updateQueue !== null) {\n        const lastEffect = updateQueue.lastEffect;\n        if (lastEffect !== null) {\n          const firstEffect = lastEffect.next;\n\n          let effect = firstEffect;\n          do {\n            const {destroy, tag} = effect;\n            if (destroy !== undefined) {\n              if ((tag & HookLayout) !== NoHookEffect) {\n                if (\n                  enableProfilerTimer &&\n                  enableProfilerCommitHooks &&\n                  current.mode & ProfileMode\n                ) {\n                  startLayoutEffectTimer();\n                  safelyCallDestroy(current, nearestMountedAncestor, destroy);\n                  recordLayoutEffectDuration(current);\n                } else {\n                  safelyCallDestroy(current, nearestMountedAncestor, destroy);\n                }\n              }\n            }\n            effect = effect.next;\n          } while (effect !== firstEffect);\n        }\n      }\n      return;\n    }\n    case ClassComponent: {\n      safelyDetachRef(current, nearestMountedAncestor);\n      const instance = current.stateNode;\n      if (typeof instance.componentWillUnmount === 'function') {\n        safelyCallComponentWillUnmount(\n          current,\n          nearestMountedAncestor,\n          instance,\n        );\n      }\n      return;\n    }\n    case HostComponent: {\n      safelyDetachRef(current, nearestMountedAncestor);\n      return;\n    }\n    case HostPortal: {\n      // TODO: this is recursive.\n      // We are also not using this parent because\n      // the portal will get pushed immediately.\n      if (supportsMutation) {\n        unmountHostComponents(finishedRoot, current, nearestMountedAncestor);\n      } else if (supportsPersistence) {\n        emptyPortalContainer(current);\n      }\n      return;\n    }\n    case DehydratedFragment: {\n      if (enableSuspenseCallback) {\n        const hydrationCallbacks = finishedRoot.hydrationCallbacks;\n        if (hydrationCallbacks !== null) {\n          const onDeleted = hydrationCallbacks.onDeleted;\n          if (onDeleted) {\n            onDeleted((current.stateNode: SuspenseInstance));\n          }\n        }\n      }\n      return;\n    }\n    case ScopeComponent: {\n      if (enableScopeAPI) {\n        safelyDetachRef(current, nearestMountedAncestor);\n      }\n      return;\n    }\n  }\n}\n\nfunction commitNestedUnmounts(\n  finishedRoot: FiberRoot,\n  root: Fiber,\n  nearestMountedAncestor: Fiber,\n): void {\n  // While we're inside a removed host node we don't want to call\n  // removeChild on the inner nodes because they're removed by the top\n  // call anyway. We also want to call componentWillUnmount on all\n  // composites before this host node is removed from the tree. Therefore\n  // we do an inner loop while we're still inside the host node.\n  let node: Fiber = root;\n  while (true) {\n    commitUnmount(finishedRoot, node, nearestMountedAncestor);\n    // Visit children because they may contain more composite or host nodes.\n    // Skip portals because commitUnmount() currently visits them recursively.\n    if (\n      node.child !== null &&\n      // If we use mutation we drill down into portals using commitUnmount above.\n      // If we don't use mutation we drill down into portals here instead.\n      (!supportsMutation || node.tag !== HostPortal)\n    ) {\n      node.child.return = node;\n      node = node.child;\n      continue;\n    }\n    if (node === root) {\n      return;\n    }\n    while (node.sibling === null) {\n      if (node.return === null || node.return === root) {\n        return;\n      }\n      node = node.return;\n    }\n    node.sibling.return = node.return;\n    node = node.sibling;\n  }\n}\n\nfunction detachFiberMutation(fiber: Fiber) {\n  // Cut off the return pointer to disconnect it from the tree.\n  // This enables us to detect and warn against state updates on an unmounted component.\n  // It also prevents events from bubbling from within disconnected components.\n  //\n  // Ideally, we should also clear the child pointer of the parent alternate to let this\n  // get GC:ed but we don't know which for sure which parent is the current\n  // one so we'll settle for GC:ing the subtree of this child.\n  // This child itself will be GC:ed when the parent updates the next time.\n  //\n  // Note that we can't clear child or sibling pointers yet.\n  // They're needed for passive effects and for findDOMNode.\n  // We defer those fields, and all other cleanup, to the passive phase (see detachFiberAfterEffects).\n  //\n  // Don't reset the alternate yet, either. We need that so we can detach the\n  // alternate's fields in the passive phase. Clearing the return pointer is\n  // sufficient for findDOMNode semantics.\n  const alternate = fiber.alternate;\n  if (alternate !== null) {\n    alternate.return = null;\n  }\n  fiber.return = null;\n}\n\nfunction detachFiberAfterEffects(fiber: Fiber) {\n  const alternate = fiber.alternate;\n  if (alternate !== null) {\n    fiber.alternate = null;\n    detachFiberAfterEffects(alternate);\n  }\n\n  // Note: Defensively using negation instead of < in case\n  // `deletedTreeCleanUpLevel` is undefined.\n  if (!(deletedTreeCleanUpLevel >= 2)) {\n    // This is the default branch (level 0).\n    fiber.child = null;\n    fiber.deletions = null;\n    fiber.dependencies = null;\n    fiber.memoizedProps = null;\n    fiber.memoizedState = null;\n    fiber.pendingProps = null;\n    fiber.sibling = null;\n    fiber.stateNode = null;\n    fiber.updateQueue = null;\n\n    if (__DEV__) {\n      fiber._debugOwner = null;\n    }\n  } else {\n    // Clear cyclical Fiber fields. This level alone is designed to roughly\n    // approximate the planned Fiber refactor. In that world, `setState` will be\n    // bound to a special \"instance\" object instead of a Fiber. The Instance\n    // object will not have any of these fields. It will only be connected to\n    // the fiber tree via a single link at the root. So if this level alone is\n    // sufficient to fix memory issues, that bodes well for our plans.\n    fiber.child = null;\n    fiber.deletions = null;\n    fiber.sibling = null;\n\n    // The `stateNode` is cyclical because on host nodes it points to the host\n    // tree, which has its own pointers to children, parents, and siblings.\n    // The other host nodes also point back to fibers, so we should detach that\n    // one, too.\n    if (fiber.tag === HostComponent) {\n      const hostInstance: Instance = fiber.stateNode;\n      if (hostInstance !== null) {\n        detachDeletedInstance(hostInstance);\n      }\n    }\n    fiber.stateNode = null;\n\n    // I'm intentionally not clearing the `return` field in this level. We\n    // already disconnect the `return` pointer at the root of the deleted\n    // subtree (in `detachFiberMutation`). Besides, `return` by itself is not\n    // cyclical — it's only cyclical when combined with `child`, `sibling`, and\n    // `alternate`. But we'll clear it in the next level anyway, just in case.\n\n    if (__DEV__) {\n      fiber._debugOwner = null;\n    }\n\n    if (deletedTreeCleanUpLevel >= 3) {\n      // Theoretically, nothing in here should be necessary, because we already\n      // disconnected the fiber from the tree. So even if something leaks this\n      // particular fiber, it won't leak anything else\n      //\n      // The purpose of this branch is to be super aggressive so we can measure\n      // if there's any difference in memory impact. If there is, that could\n      // indicate a React leak we don't know about.\n      fiber.return = null;\n      fiber.dependencies = null;\n      fiber.memoizedProps = null;\n      fiber.memoizedState = null;\n      fiber.pendingProps = null;\n      fiber.stateNode = null;\n      // TODO: Move to `commitPassiveUnmountInsideDeletedTreeOnFiber` instead.\n      fiber.updateQueue = null;\n    }\n  }\n}\n\nfunction emptyPortalContainer(current: Fiber) {\n  if (!supportsPersistence) {\n    return;\n  }\n\n  const portal: {\n    containerInfo: Container,\n    pendingChildren: ChildSet,\n    ...\n  } = current.stateNode;\n  const {containerInfo} = portal;\n  const emptyChildSet = createContainerChildSet(containerInfo);\n  replaceContainerChildren(containerInfo, emptyChildSet);\n}\n\nfunction commitContainer(finishedWork: Fiber) {\n  if (!supportsPersistence) {\n    return;\n  }\n\n  switch (finishedWork.tag) {\n    case ClassComponent:\n    case HostComponent:\n    case HostText: {\n      return;\n    }\n    case HostRoot:\n    case HostPortal: {\n      const portalOrRoot: {\n        containerInfo: Container,\n        pendingChildren: ChildSet,\n        ...\n      } = finishedWork.stateNode;\n      const {containerInfo, pendingChildren} = portalOrRoot;\n      replaceContainerChildren(containerInfo, pendingChildren);\n      return;\n    }\n  }\n  invariant(\n    false,\n    'This unit of work tag should not have side-effects. This error is ' +\n      'likely caused by a bug in React. Please file an issue.',\n  );\n}\n\nfunction getHostParentFiber(fiber: Fiber): Fiber {\n  let parent = fiber.return;\n  while (parent !== null) {\n    if (isHostParent(parent)) {\n      return parent;\n    }\n    parent = parent.return;\n  }\n  invariant(\n    false,\n    'Expected to find a host parent. This error is likely caused by a bug ' +\n      'in React. Please file an issue.',\n  );\n}\n\nfunction isHostParent(fiber: Fiber): boolean {\n  return (\n    fiber.tag === HostComponent ||\n    fiber.tag === HostRoot ||\n    fiber.tag === HostPortal\n  );\n}\n\nfunction getHostSibling(fiber: Fiber): ?Instance {\n  // We're going to search forward into the tree until we find a sibling host\n  // node. Unfortunately, if multiple insertions are done in a row we have to\n  // search past them. This leads to exponential search for the next sibling.\n  // TODO: Find a more efficient way to do this.\n  let node: Fiber = fiber;\n  siblings: while (true) {\n    // If we didn't find anything, let's try the next sibling.\n    while (node.sibling === null) {\n      if (node.return === null || isHostParent(node.return)) {\n        // If we pop out of the root or hit the parent the fiber we are the\n        // last sibling.\n        return null;\n      }\n      node = node.return;\n    }\n    node.sibling.return = node.return;\n    node = node.sibling;\n    while (\n      node.tag !== HostComponent &&\n      node.tag !== HostText &&\n      node.tag !== DehydratedFragment\n    ) {\n      // If it is not host node and, we might have a host node inside it.\n      // Try to search down until we find one.\n      if (node.flags & Placement) {\n        // If we don't have a child, try the siblings instead.\n        continue siblings;\n      }\n      // If we don't have a child, try the siblings instead.\n      // We also skip portals because they are not part of this host tree.\n      if (node.child === null || node.tag === HostPortal) {\n        continue siblings;\n      } else {\n        node.child.return = node;\n        node = node.child;\n      }\n    }\n    // Check if this host node is stable or about to be placed.\n    if (!(node.flags & Placement)) {\n      // Found it!\n      return node.stateNode;\n    }\n  }\n}\n\nfunction commitPlacement(finishedWork: Fiber): void {\n  if (!supportsMutation) {\n    return;\n  }\n\n  // Recursively insert all host nodes into the parent.\n  const parentFiber = getHostParentFiber(finishedWork);\n\n  // Note: these two variables *must* always be updated together.\n  let parent;\n  let isContainer;\n  const parentStateNode = parentFiber.stateNode;\n  switch (parentFiber.tag) {\n    case HostComponent:\n      parent = parentStateNode;\n      isContainer = false;\n      break;\n    case HostRoot:\n      parent = parentStateNode.containerInfo;\n      isContainer = true;\n      break;\n    case HostPortal:\n      parent = parentStateNode.containerInfo;\n      isContainer = true;\n      break;\n    // eslint-disable-next-line-no-fallthrough\n    default:\n      invariant(\n        false,\n        'Invalid host parent fiber. This error is likely caused by a bug ' +\n          'in React. Please file an issue.',\n      );\n  }\n  if (parentFiber.flags & ContentReset) {\n    // Reset the text content of the parent before doing any insertions\n    resetTextContent(parent);\n    // Clear ContentReset from the effect tag\n    parentFiber.flags &= ~ContentReset;\n  }\n\n  const before = getHostSibling(finishedWork);\n  // We only have the top Fiber that was inserted but we need to recurse down its\n  // children to find all the terminal nodes.\n  if (isContainer) {\n    insertOrAppendPlacementNodeIntoContainer(finishedWork, before, parent);\n  } else {\n    insertOrAppendPlacementNode(finishedWork, before, parent);\n  }\n}\n\nfunction insertOrAppendPlacementNodeIntoContainer(\n  node: Fiber,\n  before: ?Instance,\n  parent: Container,\n): void {\n  const {tag} = node;\n  const isHost = tag === HostComponent || tag === HostText;\n  if (isHost) {\n    const stateNode = node.stateNode;\n    if (before) {\n      insertInContainerBefore(parent, stateNode, before);\n    } else {\n      appendChildToContainer(parent, stateNode);\n    }\n  } else if (tag === HostPortal) {\n    // If the insertion itself is a portal, then we don't want to traverse\n    // down its children. Instead, we'll get insertions from each child in\n    // the portal directly.\n  } else {\n    const child = node.child;\n    if (child !== null) {\n      insertOrAppendPlacementNodeIntoContainer(child, before, parent);\n      let sibling = child.sibling;\n      while (sibling !== null) {\n        insertOrAppendPlacementNodeIntoContainer(sibling, before, parent);\n        sibling = sibling.sibling;\n      }\n    }\n  }\n}\n\nfunction insertOrAppendPlacementNode(\n  node: Fiber,\n  before: ?Instance,\n  parent: Instance,\n): void {\n  const {tag} = node;\n  const isHost = tag === HostComponent || tag === HostText;\n  if (isHost) {\n    const stateNode = node.stateNode;\n    if (before) {\n      insertBefore(parent, stateNode, before);\n    } else {\n      appendChild(parent, stateNode);\n    }\n  } else if (tag === HostPortal) {\n    // If the insertion itself is a portal, then we don't want to traverse\n    // down its children. Instead, we'll get insertions from each child in\n    // the portal directly.\n  } else {\n    const child = node.child;\n    if (child !== null) {\n      insertOrAppendPlacementNode(child, before, parent);\n      let sibling = child.sibling;\n      while (sibling !== null) {\n        insertOrAppendPlacementNode(sibling, before, parent);\n        sibling = sibling.sibling;\n      }\n    }\n  }\n}\n\nfunction unmountHostComponents(\n  finishedRoot: FiberRoot,\n  current: Fiber,\n  nearestMountedAncestor: Fiber,\n): void {\n  // We only have the top Fiber that was deleted but we need to recurse down its\n  // children to find all the terminal nodes.\n  let node: Fiber = current;\n\n  // Each iteration, currentParent is populated with node's host parent if not\n  // currentParentIsValid.\n  let currentParentIsValid = false;\n\n  // Note: these two variables *must* always be updated together.\n  let currentParent;\n  let currentParentIsContainer;\n\n  while (true) {\n    if (!currentParentIsValid) {\n      let parent = node.return;\n      findParent: while (true) {\n        invariant(\n          parent !== null,\n          'Expected to find a host parent. This error is likely caused by ' +\n            'a bug in React. Please file an issue.',\n        );\n        const parentStateNode = parent.stateNode;\n        switch (parent.tag) {\n          case HostComponent:\n            currentParent = parentStateNode;\n            currentParentIsContainer = false;\n            break findParent;\n          case HostRoot:\n            currentParent = parentStateNode.containerInfo;\n            currentParentIsContainer = true;\n            break findParent;\n          case HostPortal:\n            currentParent = parentStateNode.containerInfo;\n            currentParentIsContainer = true;\n            break findParent;\n        }\n        parent = parent.return;\n      }\n      currentParentIsValid = true;\n    }\n\n    if (node.tag === HostComponent || node.tag === HostText) {\n      commitNestedUnmounts(finishedRoot, node, nearestMountedAncestor);\n      // After all the children have unmounted, it is now safe to remove the\n      // node from the tree.\n      if (currentParentIsContainer) {\n        removeChildFromContainer(\n          ((currentParent: any): Container),\n          (node.stateNode: Instance | TextInstance),\n        );\n      } else {\n        removeChild(\n          ((currentParent: any): Instance),\n          (node.stateNode: Instance | TextInstance),\n        );\n      }\n      // Don't visit children because we already visited them.\n    } else if (\n      enableSuspenseServerRenderer &&\n      node.tag === DehydratedFragment\n    ) {\n      if (enableSuspenseCallback) {\n        const hydrationCallbacks = finishedRoot.hydrationCallbacks;\n        if (hydrationCallbacks !== null) {\n          const onDeleted = hydrationCallbacks.onDeleted;\n          if (onDeleted) {\n            onDeleted((node.stateNode: SuspenseInstance));\n          }\n        }\n      }\n\n      // Delete the dehydrated suspense boundary and all of its content.\n      if (currentParentIsContainer) {\n        clearSuspenseBoundaryFromContainer(\n          ((currentParent: any): Container),\n          (node.stateNode: SuspenseInstance),\n        );\n      } else {\n        clearSuspenseBoundary(\n          ((currentParent: any): Instance),\n          (node.stateNode: SuspenseInstance),\n        );\n      }\n    } else if (node.tag === HostPortal) {\n      if (node.child !== null) {\n        // When we go into a portal, it becomes the parent to remove from.\n        // We will reassign it back when we pop the portal on the way up.\n        currentParent = node.stateNode.containerInfo;\n        currentParentIsContainer = true;\n        // Visit children because portals might contain host components.\n        node.child.return = node;\n        node = node.child;\n        continue;\n      }\n    } else {\n      commitUnmount(finishedRoot, node, nearestMountedAncestor);\n      // Visit children because we may find more host components below.\n      if (node.child !== null) {\n        node.child.return = node;\n        node = node.child;\n        continue;\n      }\n    }\n    if (node === current) {\n      return;\n    }\n    while (node.sibling === null) {\n      if (node.return === null || node.return === current) {\n        return;\n      }\n      node = node.return;\n      if (node.tag === HostPortal) {\n        // When we go out of the portal, we need to restore the parent.\n        // Since we don't keep a stack of them, we will search for it.\n        currentParentIsValid = false;\n      }\n    }\n    node.sibling.return = node.return;\n    node = node.sibling;\n  }\n}\n\nfunction commitDeletion(\n  finishedRoot: FiberRoot,\n  current: Fiber,\n  nearestMountedAncestor: Fiber,\n): void {\n  if (supportsMutation) {\n    // Recursively delete all host nodes from the parent.\n    // Detach refs and call componentWillUnmount() on the whole subtree.\n    unmountHostComponents(finishedRoot, current, nearestMountedAncestor);\n  } else {\n    // Detach refs and call componentWillUnmount() on the whole subtree.\n    commitNestedUnmounts(finishedRoot, current, nearestMountedAncestor);\n  }\n\n  detachFiberMutation(current);\n}\n\nfunction commitWork(current: Fiber | null, finishedWork: Fiber): void {\n  if (!supportsMutation) {\n    switch (finishedWork.tag) {\n      case FunctionComponent:\n      case ForwardRef:\n      case MemoComponent:\n      case SimpleMemoComponent: {\n        // Layout effects are destroyed during the mutation phase so that all\n        // destroy functions for all fibers are called before any create functions.\n        // This prevents sibling component effects from interfering with each other,\n        // e.g. a destroy function in one component should never override a ref set\n        // by a create function in another component during the same commit.\n        // TODO: Check if we're inside an Offscreen subtree that disappeared\n        // during this commit. If so, we would have already unmounted its\n        // layout hooks. (However, since we null out the `destroy` function\n        // right before calling it, the behavior is already correct, so this\n        // would mostly be for modeling purposes.)\n        if (\n          enableProfilerTimer &&\n          enableProfilerCommitHooks &&\n          finishedWork.mode & ProfileMode\n        ) {\n          try {\n            startLayoutEffectTimer();\n            commitHookEffectListUnmount(\n              HookLayout | HookHasEffect,\n              finishedWork,\n              finishedWork.return,\n            );\n          } finally {\n            recordLayoutEffectDuration(finishedWork);\n          }\n        } else {\n          commitHookEffectListUnmount(\n            HookLayout | HookHasEffect,\n            finishedWork,\n            finishedWork.return,\n          );\n        }\n        return;\n      }\n      case Profiler: {\n        return;\n      }\n      case SuspenseComponent: {\n        commitSuspenseCallback(finishedWork);\n        attachSuspenseRetryListeners(finishedWork);\n        return;\n      }\n      case SuspenseListComponent: {\n        attachSuspenseRetryListeners(finishedWork);\n        return;\n      }\n      case HostRoot: {\n        if (supportsHydration) {\n          const root: FiberRoot = finishedWork.stateNode;\n          if (root.hydrate) {\n            // We've just hydrated. No need to hydrate again.\n            root.hydrate = false;\n            commitHydratedContainer(root.containerInfo);\n          }\n        }\n        break;\n      }\n      case OffscreenComponent:\n      case LegacyHiddenComponent: {\n        return;\n      }\n    }\n\n    commitContainer(finishedWork);\n    return;\n  }\n\n  switch (finishedWork.tag) {\n    case FunctionComponent:\n    case ForwardRef:\n    case MemoComponent:\n    case SimpleMemoComponent: {\n      // Layout effects are destroyed during the mutation phase so that all\n      // destroy functions for all fibers are called before any create functions.\n      // This prevents sibling component effects from interfering with each other,\n      // e.g. a destroy function in one component should never override a ref set\n      // by a create function in another component during the same commit.\n      if (\n        enableProfilerTimer &&\n        enableProfilerCommitHooks &&\n        finishedWork.mode & ProfileMode\n      ) {\n        try {\n          startLayoutEffectTimer();\n          commitHookEffectListUnmount(\n            HookLayout | HookHasEffect,\n            finishedWork,\n            finishedWork.return,\n          );\n        } finally {\n          recordLayoutEffectDuration(finishedWork);\n        }\n      } else {\n        commitHookEffectListUnmount(\n          HookLayout | HookHasEffect,\n          finishedWork,\n          finishedWork.return,\n        );\n      }\n      return;\n    }\n    case ClassComponent: {\n      return;\n    }\n    case HostComponent: {\n      const instance: Instance = finishedWork.stateNode;\n      if (instance != null) {\n        // Commit the work prepared earlier.\n        const newProps = finishedWork.memoizedProps;\n        // For hydration we reuse the update path but we treat the oldProps\n        // as the newProps. The updatePayload will contain the real change in\n        // this case.\n        const oldProps = current !== null ? current.memoizedProps : newProps;\n        const type = finishedWork.type;\n        // TODO: Type the updateQueue to be specific to host components.\n        const updatePayload: null | UpdatePayload = (finishedWork.updateQueue: any);\n        finishedWork.updateQueue = null;\n        if (updatePayload !== null) {\n          commitUpdate(\n            instance,\n            updatePayload,\n            type,\n            oldProps,\n            newProps,\n            finishedWork,\n          );\n        }\n      }\n      return;\n    }\n    case HostText: {\n      invariant(\n        finishedWork.stateNode !== null,\n        'This should have a text node initialized. This error is likely ' +\n          'caused by a bug in React. Please file an issue.',\n      );\n      const textInstance: TextInstance = finishedWork.stateNode;\n      const newText: string = finishedWork.memoizedProps;\n      // For hydration we reuse the update path but we treat the oldProps\n      // as the newProps. The updatePayload will contain the real change in\n      // this case.\n      const oldText: string =\n        current !== null ? current.memoizedProps : newText;\n      commitTextUpdate(textInstance, oldText, newText);\n      return;\n    }\n    case HostRoot: {\n      if (supportsHydration) {\n        const root: FiberRoot = finishedWork.stateNode;\n        if (root.hydrate) {\n          // We've just hydrated. No need to hydrate again.\n          root.hydrate = false;\n          commitHydratedContainer(root.containerInfo);\n        }\n      }\n      return;\n    }\n    case Profiler: {\n      return;\n    }\n    case SuspenseComponent: {\n      commitSuspenseCallback(finishedWork);\n      attachSuspenseRetryListeners(finishedWork);\n      return;\n    }\n    case SuspenseListComponent: {\n      attachSuspenseRetryListeners(finishedWork);\n      return;\n    }\n    case IncompleteClassComponent: {\n      return;\n    }\n    case ScopeComponent: {\n      if (enableScopeAPI) {\n        const scopeInstance = finishedWork.stateNode;\n        prepareScopeUpdate(scopeInstance, finishedWork);\n        return;\n      }\n      break;\n    }\n  }\n  invariant(\n    false,\n    'This unit of work tag should not have side-effects. This error is ' +\n      'likely caused by a bug in React. Please file an issue.',\n  );\n}\n\nfunction commitSuspenseCallback(finishedWork: Fiber) {\n  // TODO: Move this to passive phase\n  const newState: SuspenseState | null = finishedWork.memoizedState;\n  if (enableSuspenseCallback && newState !== null) {\n    const suspenseCallback = finishedWork.memoizedProps.suspenseCallback;\n    if (typeof suspenseCallback === 'function') {\n      const wakeables: Set<Wakeable> | null = (finishedWork.updateQueue: any);\n      if (wakeables !== null) {\n        suspenseCallback(new Set(wakeables));\n      }\n    } else if (__DEV__) {\n      if (suspenseCallback !== undefined) {\n        console.error('Unexpected type for suspenseCallback.');\n      }\n    }\n  }\n}\n\nfunction commitSuspenseHydrationCallbacks(\n  finishedRoot: FiberRoot,\n  finishedWork: Fiber,\n) {\n  if (!supportsHydration) {\n    return;\n  }\n  const newState: SuspenseState | null = finishedWork.memoizedState;\n  if (newState === null) {\n    const current = finishedWork.alternate;\n    if (current !== null) {\n      const prevState: SuspenseState | null = current.memoizedState;\n      if (prevState !== null) {\n        const suspenseInstance = prevState.dehydrated;\n        if (suspenseInstance !== null) {\n          commitHydratedSuspenseInstance(suspenseInstance);\n          if (enableSuspenseCallback) {\n            const hydrationCallbacks = finishedRoot.hydrationCallbacks;\n            if (hydrationCallbacks !== null) {\n              const onHydrated = hydrationCallbacks.onHydrated;\n              if (onHydrated) {\n                onHydrated(suspenseInstance);\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n\nfunction attachSuspenseRetryListeners(finishedWork: Fiber) {\n  // If this boundary just timed out, then it will have a set of wakeables.\n  // For each wakeable, attach a listener so that when it resolves, React\n  // attempts to re-render the boundary in the primary (pre-timeout) state.\n  const wakeables: Set<Wakeable> | null = (finishedWork.updateQueue: any);\n  if (wakeables !== null) {\n    finishedWork.updateQueue = null;\n    let retryCache = finishedWork.stateNode;\n    if (retryCache === null) {\n      retryCache = finishedWork.stateNode = new PossiblyWeakSet();\n    }\n    wakeables.forEach(wakeable => {\n      // Memoize using the boundary fiber to prevent redundant listeners.\n      const retry = resolveRetryWakeable.bind(null, finishedWork, wakeable);\n      if (!retryCache.has(wakeable)) {\n        retryCache.add(wakeable);\n\n        if (enableUpdaterTracking) {\n          if (isDevToolsPresent) {\n            if (inProgressLanes !== null && inProgressRoot !== null) {\n              // If we have pending work still, associate the original updaters with it.\n              restorePendingUpdaters(inProgressRoot, inProgressLanes);\n            } else {\n              throw Error(\n                'Expected finished root and lanes to be set. This is a bug in React.',\n              );\n            }\n          }\n        }\n\n        wakeable.then(retry, retry);\n      }\n    });\n  }\n}\n\n// This function detects when a Suspense boundary goes from visible to hidden.\n// It returns false if the boundary is already hidden.\n// TODO: Use an effect tag.\nexport function isSuspenseBoundaryBeingHidden(\n  current: Fiber | null,\n  finishedWork: Fiber,\n): boolean {\n  if (current !== null) {\n    const oldState: SuspenseState | null = current.memoizedState;\n    if (oldState === null || oldState.dehydrated !== null) {\n      const newState: SuspenseState | null = finishedWork.memoizedState;\n      return newState !== null && newState.dehydrated === null;\n    }\n  }\n  return false;\n}\n\nfunction commitResetTextContent(current: Fiber) {\n  if (!supportsMutation) {\n    return;\n  }\n  resetTextContent(current.stateNode);\n}\n\nexport function commitMutationEffects(\n  root: FiberRoot,\n  firstChild: Fiber,\n  committedLanes: Lanes,\n) {\n  inProgressLanes = committedLanes;\n  inProgressRoot = root;\n  nextEffect = firstChild;\n\n  commitMutationEffects_begin(root);\n\n  inProgressLanes = null;\n  inProgressRoot = null;\n}\n\nfunction commitMutationEffects_begin(root: FiberRoot) {\n  while (nextEffect !== null) {\n    const fiber = nextEffect;\n\n    // TODO: Should wrap this in flags check, too, as optimization\n    const deletions = fiber.deletions;\n    if (deletions !== null) {\n      for (let i = 0; i < deletions.length; i++) {\n        const childToDelete = deletions[i];\n        try {\n          commitDeletion(root, childToDelete, fiber);\n        } catch (error) {\n          reportUncaughtErrorInDEV(error);\n          captureCommitPhaseError(childToDelete, fiber, error);\n        }\n      }\n    }\n\n    const child = fiber.child;\n    if ((fiber.subtreeFlags & MutationMask) !== NoFlags && child !== null) {\n      ensureCorrectReturnPointer(child, fiber);\n      nextEffect = child;\n    } else {\n      commitMutationEffects_complete(root);\n    }\n  }\n}\n\nfunction commitMutationEffects_complete(root: FiberRoot) {\n  while (nextEffect !== null) {\n    const fiber = nextEffect;\n    setCurrentDebugFiberInDEV(fiber);\n    try {\n      commitMutationEffectsOnFiber(fiber, root);\n    } catch (error) {\n      reportUncaughtErrorInDEV(error);\n      captureCommitPhaseError(fiber, fiber.return, error);\n    }\n    resetCurrentDebugFiberInDEV();\n\n    const sibling = fiber.sibling;\n    if (sibling !== null) {\n      ensureCorrectReturnPointer(sibling, fiber.return);\n      nextEffect = sibling;\n      return;\n    }\n\n    nextEffect = fiber.return;\n  }\n}\n\nfunction commitMutationEffectsOnFiber(finishedWork: Fiber, root: FiberRoot) {\n  // TODO: The factoring of this phase could probably be improved. Consider\n  // switching on the type of work before checking the flags. That's what\n  // we do in all the other phases. I think this one is only different\n  // because of the shared reconciliation logic below.\n  const flags = finishedWork.flags;\n\n  if (flags & ContentReset) {\n    commitResetTextContent(finishedWork);\n  }\n\n  if (flags & Ref) {\n    const current = finishedWork.alternate;\n    if (current !== null) {\n      commitDetachRef(current);\n    }\n    if (enableScopeAPI) {\n      // TODO: This is a temporary solution that allowed us to transition away\n      // from React Flare on www.\n      if (finishedWork.tag === ScopeComponent) {\n        commitAttachRef(finishedWork);\n      }\n    }\n  }\n\n  if (flags & Visibility) {\n    switch (finishedWork.tag) {\n      case SuspenseComponent: {\n        const newState: OffscreenState | null = finishedWork.memoizedState;\n        const isHidden = newState !== null;\n        if (isHidden) {\n          const current = finishedWork.alternate;\n          const wasHidden = current !== null && current.memoizedState !== null;\n          if (!wasHidden) {\n            // TODO: Move to passive phase\n            markCommitTimeOfFallback();\n          }\n        }\n        break;\n      }\n      case OffscreenComponent: {\n        const newState: OffscreenState | null = finishedWork.memoizedState;\n        const isHidden = newState !== null;\n        const current = finishedWork.alternate;\n        const wasHidden = current !== null && current.memoizedState !== null;\n        const offscreenBoundary: Fiber = finishedWork;\n\n        if (supportsMutation) {\n          // TODO: This needs to run whenever there's an insertion or update\n          // inside a hidden Offscreen tree.\n          hideOrUnhideAllChildren(offscreenBoundary, isHidden);\n        }\n\n        if (enableSuspenseLayoutEffectSemantics) {\n          if (isHidden) {\n            if (!wasHidden) {\n              if ((offscreenBoundary.mode & ConcurrentMode) !== NoMode) {\n                nextEffect = offscreenBoundary;\n                let offscreenChild = offscreenBoundary.child;\n                while (offscreenChild !== null) {\n                  nextEffect = offscreenChild;\n                  disappearLayoutEffects_begin(offscreenChild);\n                  offscreenChild = offscreenChild.sibling;\n                }\n              }\n            }\n          } else {\n            if (wasHidden) {\n              // TODO: Move re-appear call here for symmetry?\n            }\n          }\n          break;\n        }\n      }\n    }\n  }\n\n  // The following switch statement is only concerned about placement,\n  // updates, and deletions. To avoid needing to add a case for every possible\n  // bitmap value, we remove the secondary effects from the effect tag and\n  // switch on that value.\n  const primaryFlags = flags & (Placement | Update | Hydrating);\n  outer: switch (primaryFlags) {\n    case Placement: {\n      commitPlacement(finishedWork);\n      // Clear the \"placement\" from effect tag so that we know that this is\n      // inserted, before any life-cycles like componentDidMount gets called.\n      // TODO: findDOMNode doesn't rely on this any more but isMounted does\n      // and isMounted is deprecated anyway so we should be able to kill this.\n      finishedWork.flags &= ~Placement;\n      break;\n    }\n    case PlacementAndUpdate: {\n      // Placement\n      commitPlacement(finishedWork);\n      // Clear the \"placement\" from effect tag so that we know that this is\n      // inserted, before any life-cycles like componentDidMount gets called.\n      finishedWork.flags &= ~Placement;\n\n      // Update\n      const current = finishedWork.alternate;\n      commitWork(current, finishedWork);\n      break;\n    }\n    case Hydrating: {\n      finishedWork.flags &= ~Hydrating;\n      break;\n    }\n    case HydratingAndUpdate: {\n      finishedWork.flags &= ~Hydrating;\n\n      // Update\n      const current = finishedWork.alternate;\n      commitWork(current, finishedWork);\n      break;\n    }\n    case Update: {\n      const current = finishedWork.alternate;\n      commitWork(current, finishedWork);\n      break;\n    }\n  }\n}\n\nexport function commitLayoutEffects(\n  finishedWork: Fiber,\n  root: FiberRoot,\n  committedLanes: Lanes,\n): void {\n  inProgressLanes = committedLanes;\n  inProgressRoot = root;\n  nextEffect = finishedWork;\n\n  commitLayoutEffects_begin(finishedWork, root, committedLanes);\n\n  inProgressLanes = null;\n  inProgressRoot = null;\n}\n\nfunction commitLayoutEffects_begin(\n  subtreeRoot: Fiber,\n  root: FiberRoot,\n  committedLanes: Lanes,\n) {\n  // Suspense layout effects semantics don't change for legacy roots.\n  const isModernRoot = (subtreeRoot.mode & ConcurrentMode) !== NoMode;\n\n  while (nextEffect !== null) {\n    const fiber = nextEffect;\n    const firstChild = fiber.child;\n\n    if (\n      enableSuspenseLayoutEffectSemantics &&\n      fiber.tag === OffscreenComponent &&\n      isModernRoot\n    ) {\n      // Keep track of the current Offscreen stack's state.\n      const isHidden = fiber.memoizedState !== null;\n      const newOffscreenSubtreeIsHidden = isHidden || offscreenSubtreeIsHidden;\n      if (newOffscreenSubtreeIsHidden) {\n        // The Offscreen tree is hidden. Skip over its layout effects.\n        commitLayoutMountEffects_complete(subtreeRoot, root, committedLanes);\n        continue;\n      } else {\n        // TODO (Offscreen) Also check: subtreeFlags & LayoutMask\n        const current = fiber.alternate;\n        const wasHidden = current !== null && current.memoizedState !== null;\n        const newOffscreenSubtreeWasHidden =\n          wasHidden || offscreenSubtreeWasHidden;\n        const prevOffscreenSubtreeIsHidden = offscreenSubtreeIsHidden;\n        const prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;\n\n        // Traverse the Offscreen subtree with the current Offscreen as the root.\n        offscreenSubtreeIsHidden = newOffscreenSubtreeIsHidden;\n        offscreenSubtreeWasHidden = newOffscreenSubtreeWasHidden;\n\n        if (offscreenSubtreeWasHidden && !prevOffscreenSubtreeWasHidden) {\n          // This is the root of a reappearing boundary. Turn its layout effects\n          // back on.\n          nextEffect = fiber;\n          reappearLayoutEffects_begin(fiber);\n        }\n\n        let child = firstChild;\n        while (child !== null) {\n          nextEffect = child;\n          commitLayoutEffects_begin(\n            child, // New root; bubble back up to here and stop.\n            root,\n            committedLanes,\n          );\n          child = child.sibling;\n        }\n\n        // Restore Offscreen state and resume in our-progress traversal.\n        nextEffect = fiber;\n        offscreenSubtreeIsHidden = prevOffscreenSubtreeIsHidden;\n        offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;\n        commitLayoutMountEffects_complete(subtreeRoot, root, committedLanes);\n\n        continue;\n      }\n    }\n\n    if ((fiber.subtreeFlags & LayoutMask) !== NoFlags && firstChild !== null) {\n      ensureCorrectReturnPointer(firstChild, fiber);\n      nextEffect = firstChild;\n    } else {\n      commitLayoutMountEffects_complete(subtreeRoot, root, committedLanes);\n    }\n  }\n}\n\nfunction commitLayoutMountEffects_complete(\n  subtreeRoot: Fiber,\n  root: FiberRoot,\n  committedLanes: Lanes,\n) {\n  while (nextEffect !== null) {\n    const fiber = nextEffect;\n    if ((fiber.flags & LayoutMask) !== NoFlags) {\n      const current = fiber.alternate;\n      setCurrentDebugFiberInDEV(fiber);\n      try {\n        commitLayoutEffectOnFiber(root, current, fiber, committedLanes);\n      } catch (error) {\n        reportUncaughtErrorInDEV(error);\n        captureCommitPhaseError(fiber, fiber.return, error);\n      }\n      resetCurrentDebugFiberInDEV();\n    }\n\n    if (fiber === subtreeRoot) {\n      nextEffect = null;\n      return;\n    }\n\n    const sibling = fiber.sibling;\n    if (sibling !== null) {\n      ensureCorrectReturnPointer(sibling, fiber.return);\n      nextEffect = sibling;\n      return;\n    }\n\n    nextEffect = fiber.return;\n  }\n}\n\nfunction disappearLayoutEffects_begin(subtreeRoot: Fiber) {\n  while (nextEffect !== null) {\n    const fiber = nextEffect;\n    const firstChild = fiber.child;\n\n    // TODO (Offscreen) Check: flags & (RefStatic | LayoutStatic)\n    switch (fiber.tag) {\n      case FunctionComponent:\n      case ForwardRef:\n      case MemoComponent:\n      case SimpleMemoComponent: {\n        if (\n          enableProfilerTimer &&\n          enableProfilerCommitHooks &&\n          fiber.mode & ProfileMode\n        ) {\n          try {\n            startLayoutEffectTimer();\n            commitHookEffectListUnmount(HookLayout, fiber, fiber.return);\n          } finally {\n            recordLayoutEffectDuration(fiber);\n          }\n        } else {\n          commitHookEffectListUnmount(HookLayout, fiber, fiber.return);\n        }\n        break;\n      }\n      case ClassComponent: {\n        // TODO (Offscreen) Check: flags & RefStatic\n        safelyDetachRef(fiber, fiber.return);\n\n        const instance = fiber.stateNode;\n        if (typeof instance.componentWillUnmount === 'function') {\n          safelyCallComponentWillUnmount(fiber, fiber.return, instance);\n        }\n        break;\n      }\n      case HostComponent: {\n        safelyDetachRef(fiber, fiber.return);\n        break;\n      }\n      case OffscreenComponent: {\n        // Check if this is a\n        const isHidden = fiber.memoizedState !== null;\n        if (isHidden) {\n          // Nested Offscreen tree is already hidden. Don't disappear\n          // its effects.\n          disappearLayoutEffects_complete(subtreeRoot);\n          continue;\n        }\n        break;\n      }\n    }\n\n    // TODO (Offscreen) Check: subtreeFlags & LayoutStatic\n    if (firstChild !== null) {\n      firstChild.return = fiber;\n      nextEffect = firstChild;\n    } else {\n      disappearLayoutEffects_complete(subtreeRoot);\n    }\n  }\n}\n\nfunction disappearLayoutEffects_complete(subtreeRoot: Fiber) {\n  while (nextEffect !== null) {\n    const fiber = nextEffect;\n\n    if (fiber === subtreeRoot) {\n      nextEffect = null;\n      return;\n    }\n\n    const sibling = fiber.sibling;\n    if (sibling !== null) {\n      sibling.return = fiber.return;\n      nextEffect = sibling;\n      return;\n    }\n\n    nextEffect = fiber.return;\n  }\n}\n\nfunction reappearLayoutEffects_begin(subtreeRoot: Fiber) {\n  while (nextEffect !== null) {\n    const fiber = nextEffect;\n    const firstChild = fiber.child;\n\n    if (fiber.tag === OffscreenComponent) {\n      const isHidden = fiber.memoizedState !== null;\n      if (isHidden) {\n        // Nested Offscreen tree is still hidden. Don't re-appear its effects.\n        reappearLayoutEffects_complete(subtreeRoot);\n        continue;\n      }\n    }\n\n    // TODO (Offscreen) Check: subtreeFlags & LayoutStatic\n    if (firstChild !== null) {\n      // This node may have been reused from a previous render, so we can't\n      // assume its return pointer is correct.\n      firstChild.return = fiber;\n      nextEffect = firstChild;\n    } else {\n      reappearLayoutEffects_complete(subtreeRoot);\n    }\n  }\n}\n\nfunction reappearLayoutEffects_complete(subtreeRoot: Fiber) {\n  while (nextEffect !== null) {\n    const fiber = nextEffect;\n\n    // TODO (Offscreen) Check: flags & LayoutStatic\n    setCurrentDebugFiberInDEV(fiber);\n    try {\n      reappearLayoutEffectsOnFiber(fiber);\n    } catch (error) {\n      reportUncaughtErrorInDEV(error);\n      captureCommitPhaseError(fiber, fiber.return, error);\n    }\n    resetCurrentDebugFiberInDEV();\n\n    if (fiber === subtreeRoot) {\n      nextEffect = null;\n      return;\n    }\n\n    const sibling = fiber.sibling;\n    if (sibling !== null) {\n      // This node may have been reused from a previous render, so we can't\n      // assume its return pointer is correct.\n      sibling.return = fiber.return;\n      nextEffect = sibling;\n      return;\n    }\n\n    nextEffect = fiber.return;\n  }\n}\n\nexport function commitPassiveMountEffects(\n  root: FiberRoot,\n  finishedWork: Fiber,\n): void {\n  nextEffect = finishedWork;\n  commitPassiveMountEffects_begin(finishedWork, root);\n}\n\nfunction commitPassiveMountEffects_begin(subtreeRoot: Fiber, root: FiberRoot) {\n  while (nextEffect !== null) {\n    const fiber = nextEffect;\n    const firstChild = fiber.child;\n    if ((fiber.subtreeFlags & PassiveMask) !== NoFlags && firstChild !== null) {\n      ensureCorrectReturnPointer(firstChild, fiber);\n      nextEffect = firstChild;\n    } else {\n      commitPassiveMountEffects_complete(subtreeRoot, root);\n    }\n  }\n}\n\nfunction commitPassiveMountEffects_complete(\n  subtreeRoot: Fiber,\n  root: FiberRoot,\n) {\n  while (nextEffect !== null) {\n    const fiber = nextEffect;\n    if ((fiber.flags & Passive) !== NoFlags) {\n      setCurrentDebugFiberInDEV(fiber);\n      try {\n        commitPassiveMountOnFiber(root, fiber);\n      } catch (error) {\n        reportUncaughtErrorInDEV(error);\n        captureCommitPhaseError(fiber, fiber.return, error);\n      }\n      resetCurrentDebugFiberInDEV();\n    }\n\n    if (fiber === subtreeRoot) {\n      nextEffect = null;\n      return;\n    }\n\n    const sibling = fiber.sibling;\n    if (sibling !== null) {\n      ensureCorrectReturnPointer(sibling, fiber.return);\n      nextEffect = sibling;\n      return;\n    }\n\n    nextEffect = fiber.return;\n  }\n}\n\nfunction commitPassiveMountOnFiber(\n  finishedRoot: FiberRoot,\n  finishedWork: Fiber,\n): void {\n  switch (finishedWork.tag) {\n    case FunctionComponent:\n    case ForwardRef:\n    case SimpleMemoComponent: {\n      if (\n        enableProfilerTimer &&\n        enableProfilerCommitHooks &&\n        finishedWork.mode & ProfileMode\n      ) {\n        startPassiveEffectTimer();\n        try {\n          commitHookEffectListMount(HookPassive | HookHasEffect, finishedWork);\n        } finally {\n          recordPassiveEffectDuration(finishedWork);\n        }\n      } else {\n        commitHookEffectListMount(HookPassive | HookHasEffect, finishedWork);\n      }\n      break;\n    }\n  }\n}\n\nexport function commitPassiveUnmountEffects(firstChild: Fiber): void {\n  nextEffect = firstChild;\n  commitPassiveUnmountEffects_begin();\n}\n\nfunction commitPassiveUnmountEffects_begin() {\n  while (nextEffect !== null) {\n    const fiber = nextEffect;\n    const child = fiber.child;\n\n    if ((nextEffect.flags & ChildDeletion) !== NoFlags) {\n      const deletions = fiber.deletions;\n      if (deletions !== null) {\n        for (let i = 0; i < deletions.length; i++) {\n          const fiberToDelete = deletions[i];\n          nextEffect = fiberToDelete;\n          commitPassiveUnmountEffectsInsideOfDeletedTree_begin(\n            fiberToDelete,\n            fiber,\n          );\n        }\n\n        if (deletedTreeCleanUpLevel >= 1) {\n          // A fiber was deleted from this parent fiber, but it's still part of\n          // the previous (alternate) parent fiber's list of children. Because\n          // children are a linked list, an earlier sibling that's still alive\n          // will be connected to the deleted fiber via its `alternate`:\n          //\n          //   live fiber\n          //   --alternate--> previous live fiber\n          //   --sibling--> deleted fiber\n          //\n          // We can't disconnect `alternate` on nodes that haven't been deleted\n          // yet, but we can disconnect the `sibling` and `child` pointers.\n          const previousFiber = fiber.alternate;\n          if (previousFiber !== null) {\n            let detachedChild = previousFiber.child;\n            if (detachedChild !== null) {\n              previousFiber.child = null;\n              do {\n                const detachedSibling = detachedChild.sibling;\n                detachedChild.sibling = null;\n                detachedChild = detachedSibling;\n              } while (detachedChild !== null);\n            }\n          }\n        }\n\n        nextEffect = fiber;\n      }\n    }\n\n    if ((fiber.subtreeFlags & PassiveMask) !== NoFlags && child !== null) {\n      ensureCorrectReturnPointer(child, fiber);\n      nextEffect = child;\n    } else {\n      commitPassiveUnmountEffects_complete();\n    }\n  }\n}\n\nfunction commitPassiveUnmountEffects_complete() {\n  while (nextEffect !== null) {\n    const fiber = nextEffect;\n    if ((fiber.flags & Passive) !== NoFlags) {\n      setCurrentDebugFiberInDEV(fiber);\n      commitPassiveUnmountOnFiber(fiber);\n      resetCurrentDebugFiberInDEV();\n    }\n\n    const sibling = fiber.sibling;\n    if (sibling !== null) {\n      ensureCorrectReturnPointer(sibling, fiber.return);\n      nextEffect = sibling;\n      return;\n    }\n\n    nextEffect = fiber.return;\n  }\n}\n\nfunction commitPassiveUnmountOnFiber(finishedWork: Fiber): void {\n  switch (finishedWork.tag) {\n    case FunctionComponent:\n    case ForwardRef:\n    case SimpleMemoComponent: {\n      if (\n        enableProfilerTimer &&\n        enableProfilerCommitHooks &&\n        finishedWork.mode & ProfileMode\n      ) {\n        startPassiveEffectTimer();\n        commitHookEffectListUnmount(\n          HookPassive | HookHasEffect,\n          finishedWork,\n          finishedWork.return,\n        );\n        recordPassiveEffectDuration(finishedWork);\n      } else {\n        commitHookEffectListUnmount(\n          HookPassive | HookHasEffect,\n          finishedWork,\n          finishedWork.return,\n        );\n      }\n      break;\n    }\n  }\n}\n\nfunction commitPassiveUnmountEffectsInsideOfDeletedTree_begin(\n  deletedSubtreeRoot: Fiber,\n  nearestMountedAncestor: Fiber | null,\n) {\n  while (nextEffect !== null) {\n    const fiber = nextEffect;\n\n    // Deletion effects fire in parent -> child order\n    // TODO: Check if fiber has a PassiveStatic flag\n    setCurrentDebugFiberInDEV(fiber);\n    commitPassiveUnmountInsideDeletedTreeOnFiber(fiber, nearestMountedAncestor);\n    resetCurrentDebugFiberInDEV();\n\n    const child = fiber.child;\n    // TODO: Only traverse subtree if it has a PassiveStatic flag. (But, if we\n    // do this, still need to handle `deletedTreeCleanUpLevel` correctly.)\n    if (child !== null) {\n      ensureCorrectReturnPointer(child, fiber);\n      nextEffect = child;\n    } else {\n      commitPassiveUnmountEffectsInsideOfDeletedTree_complete(\n        deletedSubtreeRoot,\n      );\n    }\n  }\n}\n\nfunction commitPassiveUnmountEffectsInsideOfDeletedTree_complete(\n  deletedSubtreeRoot: Fiber,\n) {\n  while (nextEffect !== null) {\n    const fiber = nextEffect;\n    const sibling = fiber.sibling;\n    const returnFiber = fiber.return;\n\n    if (deletedTreeCleanUpLevel >= 2) {\n      // Recursively traverse the entire deleted tree and clean up fiber fields.\n      // This is more aggressive than ideal, and the long term goal is to only\n      // have to detach the deleted tree at the root.\n      detachFiberAfterEffects(fiber);\n      if (fiber === deletedSubtreeRoot) {\n        nextEffect = null;\n        return;\n      }\n    } else {\n      // This is the default branch (level 0). We do not recursively clear all\n      // the fiber fields. Only the root of the deleted subtree.\n      if (fiber === deletedSubtreeRoot) {\n        detachFiberAfterEffects(fiber);\n        nextEffect = null;\n        return;\n      }\n    }\n\n    if (sibling !== null) {\n      ensureCorrectReturnPointer(sibling, returnFiber);\n      nextEffect = sibling;\n      return;\n    }\n\n    nextEffect = returnFiber;\n  }\n}\n\nfunction commitPassiveUnmountInsideDeletedTreeOnFiber(\n  current: Fiber,\n  nearestMountedAncestor: Fiber | null,\n): void {\n  switch (current.tag) {\n    case FunctionComponent:\n    case ForwardRef:\n    case SimpleMemoComponent: {\n      if (\n        enableProfilerTimer &&\n        enableProfilerCommitHooks &&\n        current.mode & ProfileMode\n      ) {\n        startPassiveEffectTimer();\n        commitHookEffectListUnmount(\n          HookPassive,\n          current,\n          nearestMountedAncestor,\n        );\n        recordPassiveEffectDuration(current);\n      } else {\n        commitHookEffectListUnmount(\n          HookPassive,\n          current,\n          nearestMountedAncestor,\n        );\n      }\n      break;\n    }\n  }\n}\n\nlet didWarnWrongReturnPointer = false;\nfunction ensureCorrectReturnPointer(fiber, expectedReturnFiber) {\n  if (__DEV__) {\n    if (!didWarnWrongReturnPointer && fiber.return !== expectedReturnFiber) {\n      didWarnWrongReturnPointer = true;\n      console.error(\n        'Internal React error: Return pointer is inconsistent ' +\n          'with parent.',\n      );\n    }\n  }\n\n  // TODO: Remove this assignment once we're confident that it won't break\n  // anything, by checking the warning logs for the above invariant\n  fiber.return = expectedReturnFiber;\n}\n\n// TODO: Reuse reappearLayoutEffects traversal here?\nfunction invokeLayoutEffectMountInDEV(fiber: Fiber): void {\n  if (__DEV__ && enableStrictEffects) {\n    // We don't need to re-check StrictEffectsMode here.\n    // This function is only called if that check has already passed.\n    switch (fiber.tag) {\n      case FunctionComponent:\n      case ForwardRef:\n      case SimpleMemoComponent: {\n        try {\n          commitHookEffectListMount(HookLayout | HookHasEffect, fiber);\n        } catch (error) {\n          reportUncaughtErrorInDEV(error);\n          captureCommitPhaseError(fiber, fiber.return, error);\n        }\n        break;\n      }\n      case ClassComponent: {\n        const instance = fiber.stateNode;\n        try {\n          instance.componentDidMount();\n        } catch (error) {\n          reportUncaughtErrorInDEV(error);\n          captureCommitPhaseError(fiber, fiber.return, error);\n        }\n        break;\n      }\n    }\n  }\n}\n\nfunction invokePassiveEffectMountInDEV(fiber: Fiber): void {\n  if (__DEV__ && enableStrictEffects) {\n    // We don't need to re-check StrictEffectsMode here.\n    // This function is only called if that check has already passed.\n    switch (fiber.tag) {\n      case FunctionComponent:\n      case ForwardRef:\n      case SimpleMemoComponent: {\n        try {\n          commitHookEffectListMount(HookPassive | HookHasEffect, fiber);\n        } catch (error) {\n          reportUncaughtErrorInDEV(error);\n          captureCommitPhaseError(fiber, fiber.return, error);\n        }\n        break;\n      }\n    }\n  }\n}\n\nfunction invokeLayoutEffectUnmountInDEV(fiber: Fiber): void {\n  if (__DEV__ && enableStrictEffects) {\n    // We don't need to re-check StrictEffectsMode here.\n    // This function is only called if that check has already passed.\n    switch (fiber.tag) {\n      case FunctionComponent:\n      case ForwardRef:\n      case SimpleMemoComponent: {\n        try {\n          commitHookEffectListUnmount(\n            HookLayout | HookHasEffect,\n            fiber,\n            fiber.return,\n          );\n        } catch (error) {\n          reportUncaughtErrorInDEV(error);\n          captureCommitPhaseError(fiber, fiber.return, error);\n        }\n        break;\n      }\n      case ClassComponent: {\n        const instance = fiber.stateNode;\n        if (typeof instance.componentWillUnmount === 'function') {\n          safelyCallComponentWillUnmount(fiber, fiber.return, instance);\n        }\n        break;\n      }\n    }\n  }\n}\n\nfunction invokePassiveEffectUnmountInDEV(fiber: Fiber): void {\n  if (__DEV__ && enableStrictEffects) {\n    // We don't need to re-check StrictEffectsMode here.\n    // This function is only called if that check has already passed.\n    switch (fiber.tag) {\n      case FunctionComponent:\n      case ForwardRef:\n      case SimpleMemoComponent: {\n        try {\n          commitHookEffectListUnmount(\n            HookPassive | HookHasEffect,\n            fiber,\n            fiber.return,\n          );\n        } catch (error) {\n          reportUncaughtErrorInDEV(error);\n          captureCommitPhaseError(fiber, fiber.return, error);\n        }\n      }\n    }\n  }\n}\n\nexport {\n  commitResetTextContent,\n  commitPlacement,\n  commitDeletion,\n  commitWork,\n  commitAttachRef,\n  commitDetachRef,\n  invokeLayoutEffectMountInDEV,\n  invokeLayoutEffectUnmountInDEV,\n  invokePassiveEffectMountInDEV,\n  invokePassiveEffectUnmountInDEV,\n};\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Fiber} from 'react-reconciler/src/ReactInternalTypes';\nimport type {Instance} from './ReactFiberHostConfig';\n\nimport invariant from 'shared/invariant';\nimport {HostComponent, HostText} from 'react-reconciler/src/ReactWorkTags';\nimport getComponentNameFromType from 'shared/getComponentNameFromType';\nimport {\n  findFiberRoot,\n  getBoundingRect,\n  getInstanceFromNode,\n  getTextContent,\n  isHiddenSubtree,\n  matchAccessibilityRole,\n  setFocusIfFocusable,\n  setupIntersectionObserver,\n  supportsTestSelectors,\n} from './ReactFiberHostConfig';\n\nlet COMPONENT_TYPE = 0b000;\nlet HAS_PSEUDO_CLASS_TYPE = 0b001;\nlet ROLE_TYPE = 0b010;\nlet TEST_NAME_TYPE = 0b011;\nlet TEXT_TYPE = 0b100;\n\nif (typeof Symbol === 'function' && Symbol.for) {\n  const symbolFor = Symbol.for;\n  COMPONENT_TYPE = symbolFor('selector.component');\n  HAS_PSEUDO_CLASS_TYPE = symbolFor('selector.has_pseudo_class');\n  ROLE_TYPE = symbolFor('selector.role');\n  TEST_NAME_TYPE = symbolFor('selector.test_id');\n  TEXT_TYPE = symbolFor('selector.text');\n}\n\ntype Type = Symbol | number;\n\ntype ComponentSelector = {|\n  $$typeof: Type,\n  value: React$AbstractComponent<empty, mixed>,\n|};\n\ntype HasPseudoClassSelector = {|\n  $$typeof: Type,\n  value: Array<Selector>,\n|};\n\ntype RoleSelector = {|\n  $$typeof: Type,\n  value: string,\n|};\n\ntype TextSelector = {|\n  $$typeof: Type,\n  value: string,\n|};\n\ntype TestNameSelector = {|\n  $$typeof: Type,\n  value: string,\n|};\n\ntype Selector =\n  | ComponentSelector\n  | HasPseudoClassSelector\n  | RoleSelector\n  | TextSelector\n  | TestNameSelector;\n\nexport function createComponentSelector(\n  component: React$AbstractComponent<empty, mixed>,\n): ComponentSelector {\n  return {\n    $$typeof: COMPONENT_TYPE,\n    value: component,\n  };\n}\n\nexport function createHasPseudoClassSelector(\n  selectors: Array<Selector>,\n): HasPseudoClassSelector {\n  return {\n    $$typeof: HAS_PSEUDO_CLASS_TYPE,\n    value: selectors,\n  };\n}\n\nexport function createRoleSelector(role: string): RoleSelector {\n  return {\n    $$typeof: ROLE_TYPE,\n    value: role,\n  };\n}\n\nexport function createTextSelector(text: string): TextSelector {\n  return {\n    $$typeof: TEXT_TYPE,\n    value: text,\n  };\n}\n\nexport function createTestNameSelector(id: string): TestNameSelector {\n  return {\n    $$typeof: TEST_NAME_TYPE,\n    value: id,\n  };\n}\n\nfunction findFiberRootForHostRoot(hostRoot: Instance): Fiber {\n  const maybeFiber = getInstanceFromNode((hostRoot: any));\n  if (maybeFiber != null) {\n    invariant(\n      typeof maybeFiber.memoizedProps['data-testname'] === 'string',\n      'Invalid host root specified. Should be either a React container or a node with a testname attribute.',\n    );\n    return ((maybeFiber: any): Fiber);\n  } else {\n    const fiberRoot = findFiberRoot(hostRoot);\n    invariant(\n      fiberRoot !== null,\n      'Could not find React container within specified host subtree.',\n    );\n    // The Flow type for FiberRoot is a little funky.\n    // createFiberRoot() cheats this by treating the root as :any and adding stateNode lazily.\n    return ((fiberRoot: any).stateNode.current: Fiber);\n  }\n}\n\nfunction matchSelector(fiber: Fiber, selector: Selector): boolean {\n  switch (selector.$$typeof) {\n    case COMPONENT_TYPE:\n      if (fiber.type === selector.value) {\n        return true;\n      }\n      break;\n    case HAS_PSEUDO_CLASS_TYPE:\n      return hasMatchingPaths(\n        fiber,\n        ((selector: any): HasPseudoClassSelector).value,\n      );\n    case ROLE_TYPE:\n      if (fiber.tag === HostComponent) {\n        const node = fiber.stateNode;\n        if (\n          matchAccessibilityRole(node, ((selector: any): RoleSelector).value)\n        ) {\n          return true;\n        }\n      }\n      break;\n    case TEXT_TYPE:\n      if (fiber.tag === HostComponent || fiber.tag === HostText) {\n        const textContent = getTextContent(fiber);\n        if (\n          textContent !== null &&\n          textContent.indexOf(((selector: any): TextSelector).value) >= 0\n        ) {\n          return true;\n        }\n      }\n      break;\n    case TEST_NAME_TYPE:\n      if (fiber.tag === HostComponent) {\n        const dataTestID = fiber.memoizedProps['data-testname'];\n        if (\n          typeof dataTestID === 'string' &&\n          dataTestID.toLowerCase() ===\n            ((selector: any): TestNameSelector).value.toLowerCase()\n        ) {\n          return true;\n        }\n      }\n      break;\n    default:\n      invariant(null, 'Invalid selector type %s specified.', selector);\n      break;\n  }\n\n  return false;\n}\n\nfunction selectorToString(selector: Selector): string | null {\n  switch (selector.$$typeof) {\n    case COMPONENT_TYPE:\n      const displayName = getComponentNameFromType(selector.value) || 'Unknown';\n      return `<${displayName}>`;\n    case HAS_PSEUDO_CLASS_TYPE:\n      return `:has(${selectorToString(selector) || ''})`;\n    case ROLE_TYPE:\n      return `[role=\"${((selector: any): RoleSelector).value}\"]`;\n    case TEXT_TYPE:\n      return `\"${((selector: any): TextSelector).value}\"`;\n    case TEST_NAME_TYPE:\n      return `[data-testname=\"${((selector: any): TestNameSelector).value}\"]`;\n    default:\n      invariant(null, 'Invalid selector type %s specified.', selector);\n      break;\n  }\n\n  return null;\n}\n\nfunction findPaths(root: Fiber, selectors: Array<Selector>): Array<Fiber> {\n  const matchingFibers: Array<Fiber> = [];\n\n  const stack = [root, 0];\n  let index = 0;\n  while (index < stack.length) {\n    const fiber = ((stack[index++]: any): Fiber);\n    let selectorIndex = ((stack[index++]: any): number);\n    let selector = selectors[selectorIndex];\n\n    if (fiber.tag === HostComponent && isHiddenSubtree(fiber)) {\n      continue;\n    } else {\n      while (selector != null && matchSelector(fiber, selector)) {\n        selectorIndex++;\n        selector = selectors[selectorIndex];\n      }\n    }\n\n    if (selectorIndex === selectors.length) {\n      matchingFibers.push(fiber);\n    } else {\n      let child = fiber.child;\n      while (child !== null) {\n        stack.push(child, selectorIndex);\n        child = child.sibling;\n      }\n    }\n  }\n\n  return matchingFibers;\n}\n\n// Same as findPaths but with eager bailout on first match\nfunction hasMatchingPaths(root: Fiber, selectors: Array<Selector>): boolean {\n  const stack = [root, 0];\n  let index = 0;\n  while (index < stack.length) {\n    const fiber = ((stack[index++]: any): Fiber);\n    let selectorIndex = ((stack[index++]: any): number);\n    let selector = selectors[selectorIndex];\n\n    if (fiber.tag === HostComponent && isHiddenSubtree(fiber)) {\n      continue;\n    } else {\n      while (selector != null && matchSelector(fiber, selector)) {\n        selectorIndex++;\n        selector = selectors[selectorIndex];\n      }\n    }\n\n    if (selectorIndex === selectors.length) {\n      return true;\n    } else {\n      let child = fiber.child;\n      while (child !== null) {\n        stack.push(child, selectorIndex);\n        child = child.sibling;\n      }\n    }\n  }\n\n  return false;\n}\n\nexport function findAllNodes(\n  hostRoot: Instance,\n  selectors: Array<Selector>,\n): Array<Instance> {\n  if (!supportsTestSelectors) {\n    invariant(false, 'Test selector API is not supported by this renderer.');\n  }\n\n  const root = findFiberRootForHostRoot(hostRoot);\n  const matchingFibers = findPaths(root, selectors);\n\n  const instanceRoots: Array<Instance> = [];\n\n  const stack = Array.from(matchingFibers);\n  let index = 0;\n  while (index < stack.length) {\n    const node = ((stack[index++]: any): Fiber);\n    if (node.tag === HostComponent) {\n      if (isHiddenSubtree(node)) {\n        continue;\n      }\n      instanceRoots.push(node.stateNode);\n    } else {\n      let child = node.child;\n      while (child !== null) {\n        stack.push(child);\n        child = child.sibling;\n      }\n    }\n  }\n\n  return instanceRoots;\n}\n\nexport function getFindAllNodesFailureDescription(\n  hostRoot: Instance,\n  selectors: Array<Selector>,\n): string | null {\n  if (!supportsTestSelectors) {\n    invariant(false, 'Test selector API is not supported by this renderer.');\n  }\n\n  const root = findFiberRootForHostRoot(hostRoot);\n\n  let maxSelectorIndex: number = 0;\n  const matchedNames = [];\n\n  // The logic of this loop should be kept in sync with findPaths()\n  const stack = [root, 0];\n  let index = 0;\n  while (index < stack.length) {\n    const fiber = ((stack[index++]: any): Fiber);\n    let selectorIndex = ((stack[index++]: any): number);\n    const selector = selectors[selectorIndex];\n\n    if (fiber.tag === HostComponent && isHiddenSubtree(fiber)) {\n      continue;\n    } else if (matchSelector(fiber, selector)) {\n      matchedNames.push(selectorToString(selector));\n      selectorIndex++;\n\n      if (selectorIndex > maxSelectorIndex) {\n        maxSelectorIndex = selectorIndex;\n      }\n    }\n\n    if (selectorIndex < selectors.length) {\n      let child = fiber.child;\n      while (child !== null) {\n        stack.push(child, selectorIndex);\n        child = child.sibling;\n      }\n    }\n  }\n\n  if (maxSelectorIndex < selectors.length) {\n    const unmatchedNames = [];\n    for (let i = maxSelectorIndex; i < selectors.length; i++) {\n      unmatchedNames.push(selectorToString(selectors[i]));\n    }\n\n    return (\n      'findAllNodes was able to match part of the selector:\\n' +\n      `  ${matchedNames.join(' > ')}\\n\\n` +\n      'No matching component was found for:\\n' +\n      `  ${unmatchedNames.join(' > ')}`\n    );\n  }\n\n  return null;\n}\n\nexport type BoundingRect = {|\n  x: number,\n  y: number,\n  width: number,\n  height: number,\n|};\n\nexport function findBoundingRects(\n  hostRoot: Instance,\n  selectors: Array<Selector>,\n): Array<BoundingRect> {\n  if (!supportsTestSelectors) {\n    invariant(false, 'Test selector API is not supported by this renderer.');\n  }\n\n  const instanceRoots = findAllNodes(hostRoot, selectors);\n\n  const boundingRects: Array<BoundingRect> = [];\n  for (let i = 0; i < instanceRoots.length; i++) {\n    boundingRects.push(getBoundingRect(instanceRoots[i]));\n  }\n\n  for (let i = boundingRects.length - 1; i > 0; i--) {\n    const targetRect = boundingRects[i];\n    const targetLeft = targetRect.x;\n    const targetRight = targetLeft + targetRect.width;\n    const targetTop = targetRect.y;\n    const targetBottom = targetTop + targetRect.height;\n\n    for (let j = i - 1; j >= 0; j--) {\n      if (i !== j) {\n        const otherRect = boundingRects[j];\n        const otherLeft = otherRect.x;\n        const otherRight = otherLeft + otherRect.width;\n        const otherTop = otherRect.y;\n        const otherBottom = otherTop + otherRect.height;\n\n        // Merging all rects to the minimums set would be complicated,\n        // but we can handle the most common cases:\n        // 1. completely overlapping rects\n        // 2. adjacent rects that are the same width or height (e.g. items in a list)\n        //\n        // Even given the above constraints,\n        // we still won't end up with the fewest possible rects without doing multiple passes,\n        // but it's good enough for this purpose.\n\n        if (\n          targetLeft >= otherLeft &&\n          targetTop >= otherTop &&\n          targetRight <= otherRight &&\n          targetBottom <= otherBottom\n        ) {\n          // Complete overlapping rects; remove the inner one.\n          boundingRects.splice(i, 1);\n          break;\n        } else if (\n          targetLeft === otherLeft &&\n          targetRect.width === otherRect.width &&\n          !(otherBottom < targetTop) &&\n          !(otherTop > targetBottom)\n        ) {\n          // Adjacent vertical rects; merge them.\n          if (otherTop > targetTop) {\n            otherRect.height += otherTop - targetTop;\n            otherRect.y = targetTop;\n          }\n          if (otherBottom < targetBottom) {\n            otherRect.height = targetBottom - otherTop;\n          }\n\n          boundingRects.splice(i, 1);\n          break;\n        } else if (\n          targetTop === otherTop &&\n          targetRect.height === otherRect.height &&\n          !(otherRight < targetLeft) &&\n          !(otherLeft > targetRight)\n        ) {\n          // Adjacent horizontal rects; merge them.\n          if (otherLeft > targetLeft) {\n            otherRect.width += otherLeft - targetLeft;\n            otherRect.x = targetLeft;\n          }\n          if (otherRight < targetRight) {\n            otherRect.width = targetRight - otherLeft;\n          }\n\n          boundingRects.splice(i, 1);\n          break;\n        }\n      }\n    }\n  }\n\n  return boundingRects;\n}\n\nexport function focusWithin(\n  hostRoot: Instance,\n  selectors: Array<Selector>,\n): boolean {\n  if (!supportsTestSelectors) {\n    invariant(false, 'Test selector API is not supported by this renderer.');\n  }\n\n  const root = findFiberRootForHostRoot(hostRoot);\n  const matchingFibers = findPaths(root, selectors);\n\n  const stack = Array.from(matchingFibers);\n  let index = 0;\n  while (index < stack.length) {\n    const fiber = ((stack[index++]: any): Fiber);\n    if (isHiddenSubtree(fiber)) {\n      continue;\n    }\n    if (fiber.tag === HostComponent) {\n      const node = fiber.stateNode;\n      if (setFocusIfFocusable(node)) {\n        return true;\n      }\n    }\n    let child = fiber.child;\n    while (child !== null) {\n      stack.push(child);\n      child = child.sibling;\n    }\n  }\n\n  return false;\n}\n\nconst commitHooks: Array<Function> = [];\n\nexport function onCommitRoot(): void {\n  if (supportsTestSelectors) {\n    commitHooks.forEach(commitHook => commitHook());\n  }\n}\n\nexport type IntersectionObserverOptions = Object;\n\nexport type ObserveVisibleRectsCallback = (\n  intersections: Array<{ratio: number, rect: BoundingRect}>,\n) => void;\n\nexport function observeVisibleRects(\n  hostRoot: Instance,\n  selectors: Array<Selector>,\n  callback: (intersections: Array<{ratio: number, rect: BoundingRect}>) => void,\n  options?: IntersectionObserverOptions,\n): {|disconnect: () => void|} {\n  if (!supportsTestSelectors) {\n    invariant(false, 'Test selector API is not supported by this renderer.');\n  }\n\n  const instanceRoots = findAllNodes(hostRoot, selectors);\n\n  const {disconnect, observe, unobserve} = setupIntersectionObserver(\n    instanceRoots,\n    callback,\n    options,\n  );\n\n  // When React mutates the host environment, we may need to change what we're listening to.\n  const commitHook = () => {\n    const nextInstanceRoots = findAllNodes(hostRoot, selectors);\n\n    instanceRoots.forEach(target => {\n      if (nextInstanceRoots.indexOf(target) < 0) {\n        unobserve(target);\n      }\n    });\n\n    nextInstanceRoots.forEach(target => {\n      if (instanceRoots.indexOf(target) < 0) {\n        observe(target);\n      }\n    });\n  };\n\n  commitHooks.push(commitHook);\n\n  return {\n    disconnect: () => {\n      // Stop listening for React mutations:\n      const index = commitHooks.indexOf(commitHook);\n      if (index >= 0) {\n        commitHooks.splice(index, 1);\n      }\n\n      // Disconnect the host observer:\n      disconnect();\n    },\n  };\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Wakeable} from 'shared/ReactTypes';\nimport type {Fiber, FiberRoot} from './ReactInternalTypes';\nimport type {Lanes, Lane} from './ReactFiberLane.old';\nimport type {SuspenseState} from './ReactFiberSuspenseComponent.old';\nimport type {StackCursor} from './ReactFiberStack.old';\nimport type {Flags} from './ReactFiberFlags';\n\nimport {\n  warnAboutDeprecatedLifecycles,\n  enableSuspenseServerRenderer,\n  replayFailedUnitOfWorkWithInvokeGuardedCallback,\n  enableCreateEventHandleAPI,\n  enableProfilerTimer,\n  enableProfilerCommitHooks,\n  enableProfilerNestedUpdatePhase,\n  enableProfilerNestedUpdateScheduledHook,\n  deferRenderPhaseUpdateToNextBatch,\n  enableDebugTracing,\n  enableSchedulingProfiler,\n  disableSchedulerTimeoutInWorkLoop,\n  enableStrictEffects,\n  skipUnmountedBoundaries,\n  enableUpdaterTracking,\n  warnOnSubscriptionInsideStartTransition,\n} from 'shared/ReactFeatureFlags';\nimport ReactSharedInternals from 'shared/ReactSharedInternals';\nimport invariant from 'shared/invariant';\n\nimport {\n  // Aliased because `act` will override and push to an internal queue\n  scheduleCallback as Scheduler_scheduleCallback,\n  cancelCallback as Scheduler_cancelCallback,\n  shouldYield,\n  requestPaint,\n  now,\n  ImmediatePriority as ImmediateSchedulerPriority,\n  UserBlockingPriority as UserBlockingSchedulerPriority,\n  NormalPriority as NormalSchedulerPriority,\n  IdlePriority as IdleSchedulerPriority,\n} from './Scheduler';\nimport {\n  flushSyncCallbacks,\n  flushSyncCallbacksOnlyInLegacyMode,\n  scheduleSyncCallback,\n  scheduleLegacySyncCallback,\n} from './ReactFiberSyncTaskQueue.old';\nimport {\n  logCommitStarted,\n  logCommitStopped,\n  logLayoutEffectsStarted,\n  logLayoutEffectsStopped,\n  logPassiveEffectsStarted,\n  logPassiveEffectsStopped,\n  logRenderStarted,\n  logRenderStopped,\n} from './DebugTracing';\nimport {\n  markCommitStarted,\n  markCommitStopped,\n  markLayoutEffectsStarted,\n  markLayoutEffectsStopped,\n  markPassiveEffectsStarted,\n  markPassiveEffectsStopped,\n  markRenderStarted,\n  markRenderYielded,\n  markRenderStopped,\n} from './SchedulingProfiler';\n\nimport {\n  resetAfterCommit,\n  scheduleTimeout,\n  cancelTimeout,\n  noTimeout,\n  warnsIfNotActing,\n  afterActiveInstanceBlur,\n  clearContainer,\n  getCurrentEventPriority,\n  supportsMicrotasks,\n  errorHydratingContainer,\n  scheduleMicrotask,\n} from './ReactFiberHostConfig';\n\nimport {\n  createWorkInProgress,\n  assignFiberPropertiesInDEV,\n} from './ReactFiber.old';\nimport {\n  NoMode,\n  StrictLegacyMode,\n  ProfileMode,\n  ConcurrentMode,\n} from './ReactTypeOfMode';\nimport {\n  HostRoot,\n  IndeterminateComponent,\n  ClassComponent,\n  SuspenseComponent,\n  SuspenseListComponent,\n  FunctionComponent,\n  ForwardRef,\n  MemoComponent,\n  SimpleMemoComponent,\n  Profiler,\n} from './ReactWorkTags';\nimport {LegacyRoot} from './ReactRootTags';\nimport {\n  NoFlags,\n  Placement,\n  Incomplete,\n  HostEffectMask,\n  Hydrating,\n  BeforeMutationMask,\n  MutationMask,\n  LayoutMask,\n  PassiveMask,\n  MountPassiveDev,\n  MountLayoutDev,\n} from './ReactFiberFlags';\nimport {\n  NoLanes,\n  NoLane,\n  SyncLane,\n  NoTimestamp,\n  claimNextTransitionLane,\n  claimNextRetryLane,\n  includesSomeLane,\n  isSubsetOfLanes,\n  mergeLanes,\n  removeLanes,\n  pickArbitraryLane,\n  includesNonIdleWork,\n  includesOnlyRetries,\n  includesOnlyTransitions,\n  shouldTimeSlice,\n  getNextLanes,\n  markStarvedLanesAsExpired,\n  getLanesToRetrySynchronouslyOnError,\n  getMostRecentEventTime,\n  markRootUpdated,\n  markRootSuspended as markRootSuspended_dontCallThisOneDirectly,\n  markRootPinged,\n  markRootEntangled,\n  markRootFinished,\n  getHighestPriorityLane,\n  addFiberToLanesMap,\n  movePendingFibersToMemoized,\n} from './ReactFiberLane.old';\nimport {\n  DiscreteEventPriority,\n  ContinuousEventPriority,\n  DefaultEventPriority,\n  IdleEventPriority,\n  getCurrentUpdatePriority,\n  setCurrentUpdatePriority,\n  lowerEventPriority,\n  lanesToEventPriority,\n} from './ReactEventPriorities.old';\nimport {requestCurrentTransition, NoTransition} from './ReactFiberTransition';\nimport {beginWork as originalBeginWork} from './ReactFiberBeginWork.old';\nimport {completeWork} from './ReactFiberCompleteWork.old';\nimport {unwindWork, unwindInterruptedWork} from './ReactFiberUnwindWork.old';\nimport {\n  throwException,\n  createRootErrorUpdate,\n  createClassErrorUpdate,\n} from './ReactFiberThrow.old';\nimport {\n  commitBeforeMutationEffects,\n  commitLayoutEffects,\n  commitMutationEffects,\n  commitPassiveEffectDurations,\n  commitPassiveMountEffects,\n  commitPassiveUnmountEffects,\n  invokeLayoutEffectMountInDEV,\n  invokePassiveEffectMountInDEV,\n  invokeLayoutEffectUnmountInDEV,\n  invokePassiveEffectUnmountInDEV,\n} from './ReactFiberCommitWork.old';\nimport {enqueueUpdate} from './ReactUpdateQueue.old';\nimport {resetContextDependencies} from './ReactFiberNewContext.old';\nimport {\n  resetHooksAfterThrow,\n  ContextOnlyDispatcher,\n  getIsUpdatingOpaqueValueInRenderPhaseInDEV,\n} from './ReactFiberHooks.old';\nimport {createCapturedValue} from './ReactCapturedValue';\nimport {\n  push as pushToStack,\n  pop as popFromStack,\n  createCursor,\n} from './ReactFiberStack.old';\nimport {enqueueInterleavedUpdates} from './ReactFiberInterleavedUpdates.old';\n\nimport {\n  markNestedUpdateScheduled,\n  recordCommitTime,\n  resetNestedUpdateFlag,\n  startProfilerTimer,\n  stopProfilerTimerIfRunningAndRecordDelta,\n  syncNestedUpdateFlag,\n} from './ReactProfilerTimer.old';\n\n// DEV stuff\nimport getComponentNameFromFiber from 'react-reconciler/src/getComponentNameFromFiber';\nimport ReactStrictModeWarnings from './ReactStrictModeWarnings.old';\nimport {\n  isRendering as ReactCurrentDebugFiberIsRenderingInDEV,\n  current as ReactCurrentFiberCurrent,\n  resetCurrentFiber as resetCurrentDebugFiberInDEV,\n  setCurrentFiber as setCurrentDebugFiberInDEV,\n} from './ReactCurrentFiber';\nimport {\n  invokeGuardedCallback,\n  hasCaughtError,\n  clearCaughtError,\n} from 'shared/ReactErrorUtils';\nimport {\n  onCommitRoot as onCommitRootDevTools,\n  onPostCommitRoot as onPostCommitRootDevTools,\n  isDevToolsPresent,\n} from './ReactFiberDevToolsHook.old';\nimport {onCommitRoot as onCommitRootTestSelector} from './ReactTestSelectors';\n\nconst ceil = Math.ceil;\n\nconst {\n  ReactCurrentDispatcher,\n  ReactCurrentOwner,\n  ReactCurrentBatchConfig,\n  ReactCurrentActQueue,\n} = ReactSharedInternals;\n\ntype ExecutionContext = number;\n\nexport const NoContext = /*             */ 0b0000;\nconst BatchedContext = /*               */ 0b0001;\nconst RenderContext = /*                */ 0b0010;\nconst CommitContext = /*                */ 0b0100;\nexport const RetryAfterError = /*       */ 0b1000;\n\ntype RootExitStatus = 0 | 1 | 2 | 3 | 4 | 5;\nconst RootIncomplete = 0;\nconst RootFatalErrored = 1;\nconst RootErrored = 2;\nconst RootSuspended = 3;\nconst RootSuspendedWithDelay = 4;\nconst RootCompleted = 5;\n\n// Describes where we are in the React execution stack\nlet executionContext: ExecutionContext = NoContext;\n// The root we're working on\nlet workInProgressRoot: FiberRoot | null = null;\n// The fiber we're working on\nlet workInProgress: Fiber | null = null;\n// The lanes we're rendering\nlet workInProgressRootRenderLanes: Lanes = NoLanes;\n\n// Stack that allows components to change the render lanes for its subtree\n// This is a superset of the lanes we started working on at the root. The only\n// case where it's different from `workInProgressRootRenderLanes` is when we\n// enter a subtree that is hidden and needs to be unhidden: Suspense and\n// Offscreen component.\n//\n// Most things in the work loop should deal with workInProgressRootRenderLanes.\n// Most things in begin/complete phases should deal with subtreeRenderLanes.\nexport let subtreeRenderLanes: Lanes = NoLanes;\nconst subtreeRenderLanesCursor: StackCursor<Lanes> = createCursor(NoLanes);\n\n// Whether to root completed, errored, suspended, etc.\nlet workInProgressRootExitStatus: RootExitStatus = RootIncomplete;\n// A fatal error, if one is thrown\nlet workInProgressRootFatalError: mixed = null;\n// \"Included\" lanes refer to lanes that were worked on during this render. It's\n// slightly different than `renderLanes` because `renderLanes` can change as you\n// enter and exit an Offscreen tree. This value is the combination of all render\n// lanes for the entire render phase.\nlet workInProgressRootIncludedLanes: Lanes = NoLanes;\n// The work left over by components that were visited during this render. Only\n// includes unprocessed updates, not work in bailed out children.\nlet workInProgressRootSkippedLanes: Lanes = NoLanes;\n// Lanes that were updated (in an interleaved event) during this render.\nlet workInProgressRootUpdatedLanes: Lanes = NoLanes;\n// Lanes that were pinged (in an interleaved event) during this render.\nlet workInProgressRootPingedLanes: Lanes = NoLanes;\n\n// The most recent time we committed a fallback. This lets us ensure a train\n// model where we don't commit new loading states in too quick succession.\nlet globalMostRecentFallbackTime: number = 0;\nconst FALLBACK_THROTTLE_MS: number = 500;\n\n// The absolute time for when we should start giving up on rendering\n// more and prefer CPU suspense heuristics instead.\nlet workInProgressRootRenderTargetTime: number = Infinity;\n// How long a render is supposed to take before we start following CPU\n// suspense heuristics and opt out of rendering more content.\nconst RENDER_TIMEOUT_MS = 500;\n\nfunction resetRenderTimer() {\n  workInProgressRootRenderTargetTime = now() + RENDER_TIMEOUT_MS;\n}\n\nexport function getRenderTargetTime(): number {\n  return workInProgressRootRenderTargetTime;\n}\n\nlet hasUncaughtError = false;\nlet firstUncaughtError = null;\nlet legacyErrorBoundariesThatAlreadyFailed: Set<mixed> | null = null;\n\n// Only used when enableProfilerNestedUpdateScheduledHook is true;\n// to track which root is currently committing layout effects.\nlet rootCommittingMutationOrLayoutEffects: FiberRoot | null = null;\n\nlet rootDoesHavePassiveEffects: boolean = false;\nlet rootWithPendingPassiveEffects: FiberRoot | null = null;\nlet pendingPassiveEffectsLanes: Lanes = NoLanes;\nlet pendingPassiveProfilerEffects: Array<Fiber> = [];\n\n// Use these to prevent an infinite loop of nested updates\nconst NESTED_UPDATE_LIMIT = 50;\nlet nestedUpdateCount: number = 0;\nlet rootWithNestedUpdates: FiberRoot | null = null;\n\nconst NESTED_PASSIVE_UPDATE_LIMIT = 50;\nlet nestedPassiveUpdateCount: number = 0;\n\n// If two updates are scheduled within the same event, we should treat their\n// event times as simultaneous, even if the actual clock time has advanced\n// between the first and second call.\nlet currentEventTime: number = NoTimestamp;\nlet currentEventTransitionLane: Lanes = NoLanes;\n\nexport function getWorkInProgressRoot(): FiberRoot | null {\n  return workInProgressRoot;\n}\n\nexport function requestEventTime() {\n  if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {\n    // We're inside React, so it's fine to read the actual time.\n    return now();\n  }\n  // We're not inside React, so we may be in the middle of a browser event.\n  if (currentEventTime !== NoTimestamp) {\n    // Use the same start time for all updates until we enter React again.\n    return currentEventTime;\n  }\n  // This is the first update since React yielded. Compute a new start time.\n  currentEventTime = now();\n  return currentEventTime;\n}\n\nexport function getCurrentTime() {\n  return now();\n}\n\nexport function requestUpdateLane(fiber: Fiber): Lane {\n  // Special cases\n  const mode = fiber.mode;\n  if ((mode & ConcurrentMode) === NoMode) {\n    return (SyncLane: Lane);\n  } else if (\n    !deferRenderPhaseUpdateToNextBatch &&\n    (executionContext & RenderContext) !== NoContext &&\n    workInProgressRootRenderLanes !== NoLanes\n  ) {\n    // This is a render phase update. These are not officially supported. The\n    // old behavior is to give this the same \"thread\" (lanes) as\n    // whatever is currently rendering. So if you call `setState` on a component\n    // that happens later in the same render, it will flush. Ideally, we want to\n    // remove the special case and treat them as if they came from an\n    // interleaved event. Regardless, this pattern is not officially supported.\n    // This behavior is only a fallback. The flag only exists until we can roll\n    // out the setState warning, since existing code might accidentally rely on\n    // the current behavior.\n    return pickArbitraryLane(workInProgressRootRenderLanes);\n  }\n\n  const isTransition = requestCurrentTransition() !== NoTransition;\n  if (isTransition) {\n    if (\n      __DEV__ &&\n      warnOnSubscriptionInsideStartTransition &&\n      ReactCurrentBatchConfig._updatedFibers\n    ) {\n      ReactCurrentBatchConfig._updatedFibers.add(fiber);\n    }\n    // The algorithm for assigning an update to a lane should be stable for all\n    // updates at the same priority within the same event. To do this, the\n    // inputs to the algorithm must be the same.\n    //\n    // The trick we use is to cache the first of each of these inputs within an\n    // event. Then reset the cached values once we can be sure the event is\n    // over. Our heuristic for that is whenever we enter a concurrent work loop.\n    if (currentEventTransitionLane === NoLane) {\n      // All transitions within the same event are assigned the same lane.\n      currentEventTransitionLane = claimNextTransitionLane();\n    }\n    return currentEventTransitionLane;\n  }\n\n  // Updates originating inside certain React methods, like flushSync, have\n  // their priority set by tracking it with a context variable.\n  //\n  // The opaque type returned by the host config is internally a lane, so we can\n  // use that directly.\n  // TODO: Move this type conversion to the event priority module.\n  const updateLane: Lane = (getCurrentUpdatePriority(): any);\n  if (updateLane !== NoLane) {\n    return updateLane;\n  }\n\n  // This update originated outside React. Ask the host environment for an\n  // appropriate priority, based on the type of event.\n  //\n  // The opaque type returned by the host config is internally a lane, so we can\n  // use that directly.\n  // TODO: Move this type conversion to the event priority module.\n  const eventLane: Lane = (getCurrentEventPriority(): any);\n  return eventLane;\n}\n\nfunction requestRetryLane(fiber: Fiber) {\n  // This is a fork of `requestUpdateLane` designed specifically for Suspense\n  // \"retries\" — a special update that attempts to flip a Suspense boundary\n  // from its placeholder state to its primary/resolved state.\n\n  // Special cases\n  const mode = fiber.mode;\n  if ((mode & ConcurrentMode) === NoMode) {\n    return (SyncLane: Lane);\n  }\n\n  return claimNextRetryLane();\n}\n\nexport function scheduleUpdateOnFiber(\n  fiber: Fiber,\n  lane: Lane,\n  eventTime: number,\n): FiberRoot | null {\n  checkForNestedUpdates();\n  warnAboutRenderPhaseUpdatesInDEV(fiber);\n\n  const root = markUpdateLaneFromFiberToRoot(fiber, lane);\n  if (root === null) {\n    return null;\n  }\n\n  if (enableUpdaterTracking) {\n    if (isDevToolsPresent) {\n      addFiberToLanesMap(root, fiber, lane);\n    }\n  }\n\n  // Mark that the root has a pending update.\n  markRootUpdated(root, lane, eventTime);\n\n  if (enableProfilerTimer && enableProfilerNestedUpdateScheduledHook) {\n    if (\n      (executionContext & CommitContext) !== NoContext &&\n      root === rootCommittingMutationOrLayoutEffects\n    ) {\n      if (fiber.mode & ProfileMode) {\n        let current = fiber;\n        while (current !== null) {\n          if (current.tag === Profiler) {\n            const {id, onNestedUpdateScheduled} = current.memoizedProps;\n            if (typeof onNestedUpdateScheduled === 'function') {\n              onNestedUpdateScheduled(id);\n            }\n          }\n          current = current.return;\n        }\n      }\n    }\n  }\n\n  // TODO: Consolidate with `isInterleavedUpdate` check\n  if (root === workInProgressRoot) {\n    // Received an update to a tree that's in the middle of rendering. Mark\n    // that there was an interleaved update work on this root. Unless the\n    // `deferRenderPhaseUpdateToNextBatch` flag is off and this is a render\n    // phase update. In that case, we don't treat render phase updates as if\n    // they were interleaved, for backwards compat reasons.\n    if (\n      deferRenderPhaseUpdateToNextBatch ||\n      (executionContext & RenderContext) === NoContext\n    ) {\n      workInProgressRootUpdatedLanes = mergeLanes(\n        workInProgressRootUpdatedLanes,\n        lane,\n      );\n    }\n    if (workInProgressRootExitStatus === RootSuspendedWithDelay) {\n      // The root already suspended with a delay, which means this render\n      // definitely won't finish. Since we have a new update, let's mark it as\n      // suspended now, right before marking the incoming update. This has the\n      // effect of interrupting the current render and switching to the update.\n      // TODO: Make sure this doesn't override pings that happen while we've\n      // already started rendering.\n      markRootSuspended(root, workInProgressRootRenderLanes);\n    }\n  }\n\n  ensureRootIsScheduled(root, eventTime);\n  if (\n    lane === SyncLane &&\n    executionContext === NoContext &&\n    (fiber.mode & ConcurrentMode) === NoMode &&\n    // Treat `act` as if it's inside `batchedUpdates`, even in legacy mode.\n    !(__DEV__ && ReactCurrentActQueue.isBatchingLegacy)\n  ) {\n    // Flush the synchronous work now, unless we're already working or inside\n    // a batch. This is intentionally inside scheduleUpdateOnFiber instead of\n    // scheduleCallbackForFiber to preserve the ability to schedule a callback\n    // without immediately flushing it. We only do this for user-initiated\n    // updates, to preserve historical behavior of legacy mode.\n    resetRenderTimer();\n    flushSyncCallbacksOnlyInLegacyMode();\n  }\n\n  return root;\n}\n\n// This is split into a separate function so we can mark a fiber with pending\n// work without treating it as a typical update that originates from an event;\n// e.g. retrying a Suspense boundary isn't an update, but it does schedule work\n// on a fiber.\nfunction markUpdateLaneFromFiberToRoot(\n  sourceFiber: Fiber,\n  lane: Lane,\n): FiberRoot | null {\n  // Update the source fiber's lanes\n  sourceFiber.lanes = mergeLanes(sourceFiber.lanes, lane);\n  let alternate = sourceFiber.alternate;\n  if (alternate !== null) {\n    alternate.lanes = mergeLanes(alternate.lanes, lane);\n  }\n  if (__DEV__) {\n    if (\n      alternate === null &&\n      (sourceFiber.flags & (Placement | Hydrating)) !== NoFlags\n    ) {\n      warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);\n    }\n  }\n  // Walk the parent path to the root and update the child lanes.\n  let node = sourceFiber;\n  let parent = sourceFiber.return;\n  while (parent !== null) {\n    parent.childLanes = mergeLanes(parent.childLanes, lane);\n    alternate = parent.alternate;\n    if (alternate !== null) {\n      alternate.childLanes = mergeLanes(alternate.childLanes, lane);\n    } else {\n      if (__DEV__) {\n        if ((parent.flags & (Placement | Hydrating)) !== NoFlags) {\n          warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);\n        }\n      }\n    }\n    node = parent;\n    parent = parent.return;\n  }\n  if (node.tag === HostRoot) {\n    const root: FiberRoot = node.stateNode;\n    return root;\n  } else {\n    return null;\n  }\n}\n\nexport function isInterleavedUpdate(fiber: Fiber, lane: Lane) {\n  return (\n    // TODO: Optimize slightly by comparing to root that fiber belongs to.\n    // Requires some refactoring. Not a big deal though since it's rare for\n    // concurrent apps to have more than a single root.\n    workInProgressRoot !== null &&\n    (fiber.mode & ConcurrentMode) !== NoMode &&\n    // If this is a render phase update (i.e. UNSAFE_componentWillReceiveProps),\n    // then don't treat this as an interleaved update. This pattern is\n    // accompanied by a warning but we haven't fully deprecated it yet. We can\n    // remove once the deferRenderPhaseUpdateToNextBatch flag is enabled.\n    (deferRenderPhaseUpdateToNextBatch ||\n      (executionContext & RenderContext) === NoContext)\n  );\n}\n\n// Use this function to schedule a task for a root. There's only one task per\n// root; if a task was already scheduled, we'll check to make sure the priority\n// of the existing task is the same as the priority of the next level that the\n// root has work on. This function is called on every update, and right before\n// exiting a task.\nfunction ensureRootIsScheduled(root: FiberRoot, currentTime: number) {\n  const existingCallbackNode = root.callbackNode;\n\n  // Check if any lanes are being starved by other work. If so, mark them as\n  // expired so we know to work on those next.\n  markStarvedLanesAsExpired(root, currentTime);\n\n  // Determine the next lanes to work on, and their priority.\n  const nextLanes = getNextLanes(\n    root,\n    root === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes,\n  );\n\n  if (nextLanes === NoLanes) {\n    // Special case: There's nothing to work on.\n    if (existingCallbackNode !== null) {\n      cancelCallback(existingCallbackNode);\n    }\n    root.callbackNode = null;\n    root.callbackPriority = NoLane;\n    return;\n  }\n\n  // We use the highest priority lane to represent the priority of the callback.\n  const newCallbackPriority = getHighestPriorityLane(nextLanes);\n\n  // Check if there's an existing task. We may be able to reuse it.\n  const existingCallbackPriority = root.callbackPriority;\n  if (\n    existingCallbackPriority === newCallbackPriority &&\n    // Special case related to `act`. If the currently scheduled task is a\n    // Scheduler task, rather than an `act` task, cancel it and re-scheduled\n    // on the `act` queue.\n    !(\n      __DEV__ &&\n      ReactCurrentActQueue.current !== null &&\n      existingCallbackNode !== fakeActCallbackNode\n    )\n  ) {\n    if (__DEV__) {\n      // If we're going to re-use an existing task, it needs to exist.\n      // Assume that discrete update microtasks are non-cancellable and null.\n      // TODO: Temporary until we confirm this warning is not fired.\n      if (\n        existingCallbackNode == null &&\n        existingCallbackPriority !== SyncLane\n      ) {\n        console.error(\n          'Expected scheduled callback to exist. This error is likely caused by a bug in React. Please file an issue.',\n        );\n      }\n    }\n    // The priority hasn't changed. We can reuse the existing task. Exit.\n    return;\n  }\n\n  if (existingCallbackNode != null) {\n    // Cancel the existing callback. We'll schedule a new one below.\n    cancelCallback(existingCallbackNode);\n  }\n\n  // Schedule a new callback.\n  let newCallbackNode;\n  if (newCallbackPriority === SyncLane) {\n    // Special case: Sync React callbacks are scheduled on a special\n    // internal queue\n    if (root.tag === LegacyRoot) {\n      if (__DEV__ && ReactCurrentActQueue.isBatchingLegacy !== null) {\n        ReactCurrentActQueue.didScheduleLegacyUpdate = true;\n      }\n      scheduleLegacySyncCallback(performSyncWorkOnRoot.bind(null, root));\n    } else {\n      scheduleSyncCallback(performSyncWorkOnRoot.bind(null, root));\n    }\n    if (supportsMicrotasks) {\n      // Flush the queue in a microtask.\n      if (__DEV__ && ReactCurrentActQueue.current !== null) {\n        // Inside `act`, use our internal `act` queue so that these get flushed\n        // at the end of the current scope even when using the sync version\n        // of `act`.\n        ReactCurrentActQueue.current.push(flushSyncCallbacks);\n      } else {\n        scheduleMicrotask(flushSyncCallbacks);\n      }\n    } else {\n      // Flush the queue in an Immediate task.\n      scheduleCallback(ImmediateSchedulerPriority, flushSyncCallbacks);\n    }\n    newCallbackNode = null;\n  } else {\n    let schedulerPriorityLevel;\n    switch (lanesToEventPriority(nextLanes)) {\n      case DiscreteEventPriority:\n        schedulerPriorityLevel = ImmediateSchedulerPriority;\n        break;\n      case ContinuousEventPriority:\n        schedulerPriorityLevel = UserBlockingSchedulerPriority;\n        break;\n      case DefaultEventPriority:\n        schedulerPriorityLevel = NormalSchedulerPriority;\n        break;\n      case IdleEventPriority:\n        schedulerPriorityLevel = IdleSchedulerPriority;\n        break;\n      default:\n        schedulerPriorityLevel = NormalSchedulerPriority;\n        break;\n    }\n    newCallbackNode = scheduleCallback(\n      schedulerPriorityLevel,\n      performConcurrentWorkOnRoot.bind(null, root),\n    );\n  }\n\n  root.callbackPriority = newCallbackPriority;\n  root.callbackNode = newCallbackNode;\n}\n\n// This is the entry point for every concurrent task, i.e. anything that\n// goes through Scheduler.\nfunction performConcurrentWorkOnRoot(root, didTimeout) {\n  if (enableProfilerTimer && enableProfilerNestedUpdatePhase) {\n    resetNestedUpdateFlag();\n  }\n\n  // Since we know we're in a React event, we can clear the current\n  // event time. The next update will compute a new event time.\n  currentEventTime = NoTimestamp;\n  currentEventTransitionLane = NoLanes;\n\n  invariant(\n    (executionContext & (RenderContext | CommitContext)) === NoContext,\n    'Should not already be working.',\n  );\n\n  // Flush any pending passive effects before deciding which lanes to work on,\n  // in case they schedule additional work.\n  const originalCallbackNode = root.callbackNode;\n  const didFlushPassiveEffects = flushPassiveEffects();\n  if (didFlushPassiveEffects) {\n    // Something in the passive effect phase may have canceled the current task.\n    // Check if the task node for this root was changed.\n    if (root.callbackNode !== originalCallbackNode) {\n      // The current task was canceled. Exit. We don't need to call\n      // `ensureRootIsScheduled` because the check above implies either that\n      // there's a new task, or that there's no remaining work on this root.\n      return null;\n    } else {\n      // Current task was not canceled. Continue.\n    }\n  }\n\n  // Determine the next lanes to work on, using the fields stored\n  // on the root.\n  let lanes = getNextLanes(\n    root,\n    root === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes,\n  );\n  if (lanes === NoLanes) {\n    // Defensive coding. This is never expected to happen.\n    return null;\n  }\n\n  // We disable time-slicing in some cases: if the work has been CPU-bound\n  // for too long (\"expired\" work, to prevent starvation), or we're in\n  // sync-updates-by-default mode.\n  // TODO: We only check `didTimeout` defensively, to account for a Scheduler\n  // bug we're still investigating. Once the bug in Scheduler is fixed,\n  // we can remove this, since we track expiration ourselves.\n  let exitStatus =\n    shouldTimeSlice(root, lanes) &&\n    (disableSchedulerTimeoutInWorkLoop || !didTimeout)\n      ? renderRootConcurrent(root, lanes)\n      : renderRootSync(root, lanes);\n  if (exitStatus !== RootIncomplete) {\n    if (exitStatus === RootErrored) {\n      const prevExecutionContext = executionContext;\n      executionContext |= RetryAfterError;\n\n      // If an error occurred during hydration,\n      // discard server response and fall back to client side render.\n      if (root.hydrate) {\n        root.hydrate = false;\n        if (__DEV__) {\n          errorHydratingContainer(root.containerInfo);\n        }\n        clearContainer(root.containerInfo);\n      }\n\n      // If something threw an error, try rendering one more time. We'll render\n      // synchronously to block concurrent data mutations, and we'll includes\n      // all pending updates are included. If it still fails after the second\n      // attempt, we'll give up and commit the resulting tree.\n      const errorRetryLanes = getLanesToRetrySynchronouslyOnError(root);\n      if (errorRetryLanes !== NoLanes) {\n        lanes = errorRetryLanes;\n        exitStatus = renderRootSync(root, errorRetryLanes);\n      }\n\n      executionContext = prevExecutionContext;\n    }\n\n    if (exitStatus === RootFatalErrored) {\n      const fatalError = workInProgressRootFatalError;\n      prepareFreshStack(root, NoLanes);\n      markRootSuspended(root, lanes);\n      ensureRootIsScheduled(root, now());\n      throw fatalError;\n    }\n\n    // We now have a consistent tree. The next step is either to commit it,\n    // or, if something suspended, wait to commit it after a timeout.\n    const finishedWork: Fiber = (root.current.alternate: any);\n    root.finishedWork = finishedWork;\n    root.finishedLanes = lanes;\n    finishConcurrentRender(root, exitStatus, lanes);\n  }\n\n  ensureRootIsScheduled(root, now());\n  if (root.callbackNode === originalCallbackNode) {\n    // The task node scheduled for this root is the same one that's\n    // currently executed. Need to return a continuation.\n    return performConcurrentWorkOnRoot.bind(null, root);\n  }\n  return null;\n}\n\nfunction finishConcurrentRender(root, exitStatus, lanes) {\n  switch (exitStatus) {\n    case RootIncomplete:\n    case RootFatalErrored: {\n      invariant(false, 'Root did not complete. This is a bug in React.');\n    }\n    // Flow knows about invariant, so it complains if I add a break\n    // statement, but eslint doesn't know about invariant, so it complains\n    // if I do. eslint-disable-next-line no-fallthrough\n    case RootErrored: {\n      // We should have already attempted to retry this tree. If we reached\n      // this point, it errored again. Commit it.\n      commitRoot(root);\n      break;\n    }\n    case RootSuspended: {\n      markRootSuspended(root, lanes);\n\n      // We have an acceptable loading state. We need to figure out if we\n      // should immediately commit it or wait a bit.\n\n      if (\n        includesOnlyRetries(lanes) &&\n        // do not delay if we're inside an act() scope\n        !shouldForceFlushFallbacksInDEV()\n      ) {\n        // This render only included retries, no updates. Throttle committing\n        // retries so that we don't show too many loading states too quickly.\n        const msUntilTimeout =\n          globalMostRecentFallbackTime + FALLBACK_THROTTLE_MS - now();\n        // Don't bother with a very short suspense time.\n        if (msUntilTimeout > 10) {\n          const nextLanes = getNextLanes(root, NoLanes);\n          if (nextLanes !== NoLanes) {\n            // There's additional work on this root.\n            break;\n          }\n          const suspendedLanes = root.suspendedLanes;\n          if (!isSubsetOfLanes(suspendedLanes, lanes)) {\n            // We should prefer to render the fallback of at the last\n            // suspended level. Ping the last suspended level to try\n            // rendering it again.\n            // FIXME: What if the suspended lanes are Idle? Should not restart.\n            const eventTime = requestEventTime();\n            markRootPinged(root, suspendedLanes, eventTime);\n            break;\n          }\n\n          // The render is suspended, it hasn't timed out, and there's no\n          // lower priority work to do. Instead of committing the fallback\n          // immediately, wait for more data to arrive.\n          root.timeoutHandle = scheduleTimeout(\n            commitRoot.bind(null, root),\n            msUntilTimeout,\n          );\n          break;\n        }\n      }\n      // The work expired. Commit immediately.\n      commitRoot(root);\n      break;\n    }\n    case RootSuspendedWithDelay: {\n      markRootSuspended(root, lanes);\n\n      if (includesOnlyTransitions(lanes)) {\n        // This is a transition, so we should exit without committing a\n        // placeholder and without scheduling a timeout. Delay indefinitely\n        // until we receive more data.\n        break;\n      }\n\n      if (!shouldForceFlushFallbacksInDEV()) {\n        // This is not a transition, but we did trigger an avoided state.\n        // Schedule a placeholder to display after a short delay, using the Just\n        // Noticeable Difference.\n        // TODO: Is the JND optimization worth the added complexity? If this is\n        // the only reason we track the event time, then probably not.\n        // Consider removing.\n\n        const mostRecentEventTime = getMostRecentEventTime(root, lanes);\n        const eventTimeMs = mostRecentEventTime;\n        const timeElapsedMs = now() - eventTimeMs;\n        const msUntilTimeout = jnd(timeElapsedMs) - timeElapsedMs;\n\n        // Don't bother with a very short suspense time.\n        if (msUntilTimeout > 10) {\n          // Instead of committing the fallback immediately, wait for more data\n          // to arrive.\n          root.timeoutHandle = scheduleTimeout(\n            commitRoot.bind(null, root),\n            msUntilTimeout,\n          );\n          break;\n        }\n      }\n\n      // Commit the placeholder.\n      commitRoot(root);\n      break;\n    }\n    case RootCompleted: {\n      // The work completed. Ready to commit.\n      commitRoot(root);\n      break;\n    }\n    default: {\n      invariant(false, 'Unknown root exit status.');\n    }\n  }\n}\n\nfunction markRootSuspended(root, suspendedLanes) {\n  // When suspending, we should always exclude lanes that were pinged or (more\n  // rarely, since we try to avoid it) updated during the render phase.\n  // TODO: Lol maybe there's a better way to factor this besides this\n  // obnoxiously named function :)\n  suspendedLanes = removeLanes(suspendedLanes, workInProgressRootPingedLanes);\n  suspendedLanes = removeLanes(suspendedLanes, workInProgressRootUpdatedLanes);\n  markRootSuspended_dontCallThisOneDirectly(root, suspendedLanes);\n}\n\n// This is the entry point for synchronous tasks that don't go\n// through Scheduler\nfunction performSyncWorkOnRoot(root) {\n  if (enableProfilerTimer && enableProfilerNestedUpdatePhase) {\n    syncNestedUpdateFlag();\n  }\n\n  invariant(\n    (executionContext & (RenderContext | CommitContext)) === NoContext,\n    'Should not already be working.',\n  );\n\n  flushPassiveEffects();\n\n  let lanes = getNextLanes(root, NoLanes);\n  if (!includesSomeLane(lanes, SyncLane)) {\n    // There's no remaining sync work left.\n    ensureRootIsScheduled(root, now());\n    return null;\n  }\n\n  let exitStatus = renderRootSync(root, lanes);\n  if (root.tag !== LegacyRoot && exitStatus === RootErrored) {\n    const prevExecutionContext = executionContext;\n    executionContext |= RetryAfterError;\n\n    // If an error occurred during hydration,\n    // discard server response and fall back to client side render.\n    if (root.hydrate) {\n      root.hydrate = false;\n      if (__DEV__) {\n        errorHydratingContainer(root.containerInfo);\n      }\n      clearContainer(root.containerInfo);\n    }\n\n    // If something threw an error, try rendering one more time. We'll render\n    // synchronously to block concurrent data mutations, and we'll includes\n    // all pending updates are included. If it still fails after the second\n    // attempt, we'll give up and commit the resulting tree.\n    const errorRetryLanes = getLanesToRetrySynchronouslyOnError(root);\n    if (errorRetryLanes !== NoLanes) {\n      lanes = errorRetryLanes;\n      exitStatus = renderRootSync(root, lanes);\n    }\n\n    executionContext = prevExecutionContext;\n  }\n\n  if (exitStatus === RootFatalErrored) {\n    const fatalError = workInProgressRootFatalError;\n    prepareFreshStack(root, NoLanes);\n    markRootSuspended(root, lanes);\n    ensureRootIsScheduled(root, now());\n    throw fatalError;\n  }\n\n  // We now have a consistent tree. Because this is a sync render, we\n  // will commit it even if something suspended.\n  const finishedWork: Fiber = (root.current.alternate: any);\n  root.finishedWork = finishedWork;\n  root.finishedLanes = lanes;\n  commitRoot(root);\n\n  // Before exiting, make sure there's a callback scheduled for the next\n  // pending level.\n  ensureRootIsScheduled(root, now());\n\n  return null;\n}\n\nexport function flushRoot(root: FiberRoot, lanes: Lanes) {\n  if (lanes !== NoLanes) {\n    markRootEntangled(root, mergeLanes(lanes, SyncLane));\n    ensureRootIsScheduled(root, now());\n    if ((executionContext & (RenderContext | CommitContext)) === NoContext) {\n      resetRenderTimer();\n      flushSyncCallbacks();\n    }\n  }\n}\n\nexport function getExecutionContext(): ExecutionContext {\n  return executionContext;\n}\n\nexport function deferredUpdates<A>(fn: () => A): A {\n  const previousPriority = getCurrentUpdatePriority();\n  const prevTransition = ReactCurrentBatchConfig.transition;\n  try {\n    ReactCurrentBatchConfig.transition = 0;\n    setCurrentUpdatePriority(DefaultEventPriority);\n    return fn();\n  } finally {\n    setCurrentUpdatePriority(previousPriority);\n    ReactCurrentBatchConfig.transition = prevTransition;\n  }\n}\n\nexport function batchedUpdates<A, R>(fn: A => R, a: A): R {\n  const prevExecutionContext = executionContext;\n  executionContext |= BatchedContext;\n  try {\n    return fn(a);\n  } finally {\n    executionContext = prevExecutionContext;\n    // If there were legacy sync updates, flush them at the end of the outer\n    // most batchedUpdates-like method.\n    if (\n      executionContext === NoContext &&\n      // Treat `act` as if it's inside `batchedUpdates`, even in legacy mode.\n      !(__DEV__ && ReactCurrentActQueue.isBatchingLegacy)\n    ) {\n      resetRenderTimer();\n      flushSyncCallbacksOnlyInLegacyMode();\n    }\n  }\n}\n\nexport function discreteUpdates<A, B, C, D, R>(\n  fn: (A, B, C, D) => R,\n  a: A,\n  b: B,\n  c: C,\n  d: D,\n): R {\n  const previousPriority = getCurrentUpdatePriority();\n  const prevTransition = ReactCurrentBatchConfig.transition;\n  try {\n    ReactCurrentBatchConfig.transition = 0;\n    setCurrentUpdatePriority(DiscreteEventPriority);\n    return fn(a, b, c, d);\n  } finally {\n    setCurrentUpdatePriority(previousPriority);\n    ReactCurrentBatchConfig.transition = prevTransition;\n    if (executionContext === NoContext) {\n      resetRenderTimer();\n    }\n  }\n}\n\n// Overload the definition to the two valid signatures.\n// Warning, this opts-out of checking the function body.\ndeclare function flushSyncWithoutWarningIfAlreadyRendering<R>(fn: () => R): R;\n// eslint-disable-next-line no-redeclare\ndeclare function flushSyncWithoutWarningIfAlreadyRendering(): void;\n// eslint-disable-next-line no-redeclare\nexport function flushSyncWithoutWarningIfAlreadyRendering(fn) {\n  // In legacy mode, we flush pending passive effects at the beginning of the\n  // next event, not at the end of the previous one.\n  if (\n    rootWithPendingPassiveEffects !== null &&\n    rootWithPendingPassiveEffects.tag === LegacyRoot &&\n    (executionContext & (RenderContext | CommitContext)) === NoContext\n  ) {\n    flushPassiveEffects();\n  }\n\n  const prevExecutionContext = executionContext;\n  executionContext |= BatchedContext;\n\n  const prevTransition = ReactCurrentBatchConfig.transition;\n  const previousPriority = getCurrentUpdatePriority();\n  try {\n    ReactCurrentBatchConfig.transition = 0;\n    setCurrentUpdatePriority(DiscreteEventPriority);\n    if (fn) {\n      return fn();\n    } else {\n      return undefined;\n    }\n  } finally {\n    setCurrentUpdatePriority(previousPriority);\n    ReactCurrentBatchConfig.transition = prevTransition;\n    executionContext = prevExecutionContext;\n    // Flush the immediate callbacks that were scheduled during this batch.\n    // Note that this will happen even if batchedUpdates is higher up\n    // the stack.\n    if ((executionContext & (RenderContext | CommitContext)) === NoContext) {\n      flushSyncCallbacks();\n    }\n  }\n}\n\n// Overload the definition to the two valid signatures.\n// Warning, this opts-out of checking the function body.\ndeclare function flushSync<R>(fn: () => R): R;\n// eslint-disable-next-line no-redeclare\ndeclare function flushSync(): void;\n// eslint-disable-next-line no-redeclare\nexport function flushSync(fn) {\n  if (__DEV__) {\n    if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {\n      console.error(\n        'flushSync was called from inside a lifecycle method. React cannot ' +\n          'flush when React is already rendering. Consider moving this call to ' +\n          'a scheduler task or micro task.',\n      );\n    }\n  }\n  return flushSyncWithoutWarningIfAlreadyRendering(fn);\n}\n\nexport function flushControlled(fn: () => mixed): void {\n  const prevExecutionContext = executionContext;\n  executionContext |= BatchedContext;\n  const prevTransition = ReactCurrentBatchConfig.transition;\n  const previousPriority = getCurrentUpdatePriority();\n  try {\n    ReactCurrentBatchConfig.transition = 0;\n    setCurrentUpdatePriority(DiscreteEventPriority);\n    fn();\n  } finally {\n    setCurrentUpdatePriority(previousPriority);\n    ReactCurrentBatchConfig.transition = prevTransition;\n\n    executionContext = prevExecutionContext;\n    if (executionContext === NoContext) {\n      // Flush the immediate callbacks that were scheduled during this batch\n      resetRenderTimer();\n      flushSyncCallbacks();\n    }\n  }\n}\n\nexport function pushRenderLanes(fiber: Fiber, lanes: Lanes) {\n  pushToStack(subtreeRenderLanesCursor, subtreeRenderLanes, fiber);\n  subtreeRenderLanes = mergeLanes(subtreeRenderLanes, lanes);\n  workInProgressRootIncludedLanes = mergeLanes(\n    workInProgressRootIncludedLanes,\n    lanes,\n  );\n}\n\nexport function popRenderLanes(fiber: Fiber) {\n  subtreeRenderLanes = subtreeRenderLanesCursor.current;\n  popFromStack(subtreeRenderLanesCursor, fiber);\n}\n\nfunction prepareFreshStack(root: FiberRoot, lanes: Lanes) {\n  root.finishedWork = null;\n  root.finishedLanes = NoLanes;\n\n  const timeoutHandle = root.timeoutHandle;\n  if (timeoutHandle !== noTimeout) {\n    // The root previous suspended and scheduled a timeout to commit a fallback\n    // state. Now that we have additional work, cancel the timeout.\n    root.timeoutHandle = noTimeout;\n    // $FlowFixMe Complains noTimeout is not a TimeoutID, despite the check above\n    cancelTimeout(timeoutHandle);\n  }\n\n  if (workInProgress !== null) {\n    let interruptedWork = workInProgress.return;\n    while (interruptedWork !== null) {\n      unwindInterruptedWork(interruptedWork, workInProgressRootRenderLanes);\n      interruptedWork = interruptedWork.return;\n    }\n  }\n  workInProgressRoot = root;\n  workInProgress = createWorkInProgress(root.current, null);\n  workInProgressRootRenderLanes = subtreeRenderLanes = workInProgressRootIncludedLanes = lanes;\n  workInProgressRootExitStatus = RootIncomplete;\n  workInProgressRootFatalError = null;\n  workInProgressRootSkippedLanes = NoLanes;\n  workInProgressRootUpdatedLanes = NoLanes;\n  workInProgressRootPingedLanes = NoLanes;\n\n  enqueueInterleavedUpdates();\n\n  if (__DEV__) {\n    ReactStrictModeWarnings.discardPendingWarnings();\n  }\n}\n\nfunction handleError(root, thrownValue): void {\n  do {\n    let erroredWork = workInProgress;\n    try {\n      // Reset module-level state that was set during the render phase.\n      resetContextDependencies();\n      resetHooksAfterThrow();\n      resetCurrentDebugFiberInDEV();\n      // TODO: I found and added this missing line while investigating a\n      // separate issue. Write a regression test using string refs.\n      ReactCurrentOwner.current = null;\n\n      if (erroredWork === null || erroredWork.return === null) {\n        // Expected to be working on a non-root fiber. This is a fatal error\n        // because there's no ancestor that can handle it; the root is\n        // supposed to capture all errors that weren't caught by an error\n        // boundary.\n        workInProgressRootExitStatus = RootFatalErrored;\n        workInProgressRootFatalError = thrownValue;\n        // Set `workInProgress` to null. This represents advancing to the next\n        // sibling, or the parent if there are no siblings. But since the root\n        // has no siblings nor a parent, we set it to null. Usually this is\n        // handled by `completeUnitOfWork` or `unwindWork`, but since we're\n        // intentionally not calling those, we need set it here.\n        // TODO: Consider calling `unwindWork` to pop the contexts.\n        workInProgress = null;\n        return;\n      }\n\n      if (enableProfilerTimer && erroredWork.mode & ProfileMode) {\n        // Record the time spent rendering before an error was thrown. This\n        // avoids inaccurate Profiler durations in the case of a\n        // suspended render.\n        stopProfilerTimerIfRunningAndRecordDelta(erroredWork, true);\n      }\n\n      throwException(\n        root,\n        erroredWork.return,\n        erroredWork,\n        thrownValue,\n        workInProgressRootRenderLanes,\n      );\n      completeUnitOfWork(erroredWork);\n    } catch (yetAnotherThrownValue) {\n      // Something in the return path also threw.\n      thrownValue = yetAnotherThrownValue;\n      if (workInProgress === erroredWork && erroredWork !== null) {\n        // If this boundary has already errored, then we had trouble processing\n        // the error. Bubble it to the next boundary.\n        erroredWork = erroredWork.return;\n        workInProgress = erroredWork;\n      } else {\n        erroredWork = workInProgress;\n      }\n      continue;\n    }\n    // Return to the normal work loop.\n    return;\n  } while (true);\n}\n\nfunction pushDispatcher() {\n  const prevDispatcher = ReactCurrentDispatcher.current;\n  ReactCurrentDispatcher.current = ContextOnlyDispatcher;\n  if (prevDispatcher === null) {\n    // The React isomorphic package does not include a default dispatcher.\n    // Instead the first renderer will lazily attach one, in order to give\n    // nicer error messages.\n    return ContextOnlyDispatcher;\n  } else {\n    return prevDispatcher;\n  }\n}\n\nfunction popDispatcher(prevDispatcher) {\n  ReactCurrentDispatcher.current = prevDispatcher;\n}\n\nexport function markCommitTimeOfFallback() {\n  globalMostRecentFallbackTime = now();\n}\n\nexport function markSkippedUpdateLanes(lane: Lane | Lanes): void {\n  workInProgressRootSkippedLanes = mergeLanes(\n    lane,\n    workInProgressRootSkippedLanes,\n  );\n}\n\nexport function renderDidSuspend(): void {\n  if (workInProgressRootExitStatus === RootIncomplete) {\n    workInProgressRootExitStatus = RootSuspended;\n  }\n}\n\nexport function renderDidSuspendDelayIfPossible(): void {\n  if (\n    workInProgressRootExitStatus === RootIncomplete ||\n    workInProgressRootExitStatus === RootSuspended\n  ) {\n    workInProgressRootExitStatus = RootSuspendedWithDelay;\n  }\n\n  // Check if there are updates that we skipped tree that might have unblocked\n  // this render.\n  if (\n    workInProgressRoot !== null &&\n    (includesNonIdleWork(workInProgressRootSkippedLanes) ||\n      includesNonIdleWork(workInProgressRootUpdatedLanes))\n  ) {\n    // Mark the current render as suspended so that we switch to working on\n    // the updates that were skipped. Usually we only suspend at the end of\n    // the render phase.\n    // TODO: We should probably always mark the root as suspended immediately\n    // (inside this function), since by suspending at the end of the render\n    // phase introduces a potential mistake where we suspend lanes that were\n    // pinged or updated while we were rendering.\n    markRootSuspended(workInProgressRoot, workInProgressRootRenderLanes);\n  }\n}\n\nexport function renderDidError() {\n  if (workInProgressRootExitStatus !== RootCompleted) {\n    workInProgressRootExitStatus = RootErrored;\n  }\n}\n\n// Called during render to determine if anything has suspended.\n// Returns false if we're not sure.\nexport function renderHasNotSuspendedYet(): boolean {\n  // If something errored or completed, we can't really be sure,\n  // so those are false.\n  return workInProgressRootExitStatus === RootIncomplete;\n}\n\nfunction renderRootSync(root: FiberRoot, lanes: Lanes) {\n  const prevExecutionContext = executionContext;\n  executionContext |= RenderContext;\n  const prevDispatcher = pushDispatcher();\n\n  // If the root or lanes have changed, throw out the existing stack\n  // and prepare a fresh one. Otherwise we'll continue where we left off.\n  if (workInProgressRoot !== root || workInProgressRootRenderLanes !== lanes) {\n    if (enableUpdaterTracking) {\n      if (isDevToolsPresent) {\n        const memoizedUpdaters = root.memoizedUpdaters;\n        if (memoizedUpdaters.size > 0) {\n          restorePendingUpdaters(root, workInProgressRootRenderLanes);\n          memoizedUpdaters.clear();\n        }\n\n        // At this point, move Fibers that scheduled the upcoming work from the Map to the Set.\n        // If we bailout on this work, we'll move them back (like above).\n        // It's important to move them now in case the work spawns more work at the same priority with different updaters.\n        // That way we can keep the current update and future updates separate.\n        movePendingFibersToMemoized(root, lanes);\n      }\n    }\n\n    prepareFreshStack(root, lanes);\n  }\n\n  if (__DEV__) {\n    if (enableDebugTracing) {\n      logRenderStarted(lanes);\n    }\n  }\n\n  if (enableSchedulingProfiler) {\n    markRenderStarted(lanes);\n  }\n\n  do {\n    try {\n      workLoopSync();\n      break;\n    } catch (thrownValue) {\n      handleError(root, thrownValue);\n    }\n  } while (true);\n  resetContextDependencies();\n\n  executionContext = prevExecutionContext;\n  popDispatcher(prevDispatcher);\n\n  if (workInProgress !== null) {\n    // This is a sync render, so we should have finished the whole tree.\n    invariant(\n      false,\n      'Cannot commit an incomplete root. This error is likely caused by a ' +\n        'bug in React. Please file an issue.',\n    );\n  }\n\n  if (__DEV__) {\n    if (enableDebugTracing) {\n      logRenderStopped();\n    }\n  }\n\n  if (enableSchedulingProfiler) {\n    markRenderStopped();\n  }\n\n  // Set this to null to indicate there's no in-progress render.\n  workInProgressRoot = null;\n  workInProgressRootRenderLanes = NoLanes;\n\n  return workInProgressRootExitStatus;\n}\n\n// The work loop is an extremely hot path. Tell Closure not to inline it.\n/** @noinline */\nfunction workLoopSync() {\n  // Already timed out, so perform work without checking if we need to yield.\n  while (workInProgress !== null) {\n    performUnitOfWork(workInProgress);\n  }\n}\n\nfunction renderRootConcurrent(root: FiberRoot, lanes: Lanes) {\n  const prevExecutionContext = executionContext;\n  executionContext |= RenderContext;\n  const prevDispatcher = pushDispatcher();\n\n  // If the root or lanes have changed, throw out the existing stack\n  // and prepare a fresh one. Otherwise we'll continue where we left off.\n  if (workInProgressRoot !== root || workInProgressRootRenderLanes !== lanes) {\n    if (enableUpdaterTracking) {\n      if (isDevToolsPresent) {\n        const memoizedUpdaters = root.memoizedUpdaters;\n        if (memoizedUpdaters.size > 0) {\n          restorePendingUpdaters(root, workInProgressRootRenderLanes);\n          memoizedUpdaters.clear();\n        }\n\n        // At this point, move Fibers that scheduled the upcoming work from the Map to the Set.\n        // If we bailout on this work, we'll move them back (like above).\n        // It's important to move them now in case the work spawns more work at the same priority with different updaters.\n        // That way we can keep the current update and future updates separate.\n        movePendingFibersToMemoized(root, lanes);\n      }\n    }\n\n    resetRenderTimer();\n    prepareFreshStack(root, lanes);\n  }\n\n  if (__DEV__) {\n    if (enableDebugTracing) {\n      logRenderStarted(lanes);\n    }\n  }\n\n  if (enableSchedulingProfiler) {\n    markRenderStarted(lanes);\n  }\n\n  do {\n    try {\n      workLoopConcurrent();\n      break;\n    } catch (thrownValue) {\n      handleError(root, thrownValue);\n    }\n  } while (true);\n  resetContextDependencies();\n\n  popDispatcher(prevDispatcher);\n  executionContext = prevExecutionContext;\n\n  if (__DEV__) {\n    if (enableDebugTracing) {\n      logRenderStopped();\n    }\n  }\n\n  // Check if the tree has completed.\n  if (workInProgress !== null) {\n    // Still work remaining.\n    if (enableSchedulingProfiler) {\n      markRenderYielded();\n    }\n    return RootIncomplete;\n  } else {\n    // Completed the tree.\n    if (enableSchedulingProfiler) {\n      markRenderStopped();\n    }\n\n    // Set this to null to indicate there's no in-progress render.\n    workInProgressRoot = null;\n    workInProgressRootRenderLanes = NoLanes;\n\n    // Return the final exit status.\n    return workInProgressRootExitStatus;\n  }\n}\n\n/** @noinline */\nfunction workLoopConcurrent() {\n  // Perform work until Scheduler asks us to yield\n  while (workInProgress !== null && !shouldYield()) {\n    performUnitOfWork(workInProgress);\n  }\n}\n\nfunction performUnitOfWork(unitOfWork: Fiber): void {\n  // The current, flushed, state of this fiber is the alternate. Ideally\n  // nothing should rely on this, but relying on it here means that we don't\n  // need an additional field on the work in progress.\n  const current = unitOfWork.alternate;\n  setCurrentDebugFiberInDEV(unitOfWork);\n\n  let next;\n  if (enableProfilerTimer && (unitOfWork.mode & ProfileMode) !== NoMode) {\n    startProfilerTimer(unitOfWork);\n    next = beginWork(current, unitOfWork, subtreeRenderLanes);\n    stopProfilerTimerIfRunningAndRecordDelta(unitOfWork, true);\n  } else {\n    next = beginWork(current, unitOfWork, subtreeRenderLanes);\n  }\n\n  resetCurrentDebugFiberInDEV();\n  unitOfWork.memoizedProps = unitOfWork.pendingProps;\n  if (next === null) {\n    // If this doesn't spawn new work, complete the current work.\n    completeUnitOfWork(unitOfWork);\n  } else {\n    workInProgress = next;\n  }\n\n  ReactCurrentOwner.current = null;\n}\n\nfunction completeUnitOfWork(unitOfWork: Fiber): void {\n  // Attempt to complete the current unit of work, then move to the next\n  // sibling. If there are no more siblings, return to the parent fiber.\n  let completedWork = unitOfWork;\n  do {\n    // The current, flushed, state of this fiber is the alternate. Ideally\n    // nothing should rely on this, but relying on it here means that we don't\n    // need an additional field on the work in progress.\n    const current = completedWork.alternate;\n    const returnFiber = completedWork.return;\n\n    // Check if the work completed or if something threw.\n    if ((completedWork.flags & Incomplete) === NoFlags) {\n      setCurrentDebugFiberInDEV(completedWork);\n      let next;\n      if (\n        !enableProfilerTimer ||\n        (completedWork.mode & ProfileMode) === NoMode\n      ) {\n        next = completeWork(current, completedWork, subtreeRenderLanes);\n      } else {\n        startProfilerTimer(completedWork);\n        next = completeWork(current, completedWork, subtreeRenderLanes);\n        // Update render duration assuming we didn't error.\n        stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);\n      }\n      resetCurrentDebugFiberInDEV();\n\n      if (next !== null) {\n        // Completing this fiber spawned new work. Work on that next.\n        workInProgress = next;\n        return;\n      }\n    } else {\n      // This fiber did not complete because something threw. Pop values off\n      // the stack without entering the complete phase. If this is a boundary,\n      // capture values if possible.\n      const next = unwindWork(completedWork, subtreeRenderLanes);\n\n      // Because this fiber did not complete, don't reset its lanes.\n\n      if (next !== null) {\n        // If completing this work spawned new work, do that next. We'll come\n        // back here again.\n        // Since we're restarting, remove anything that is not a host effect\n        // from the effect tag.\n        next.flags &= HostEffectMask;\n        workInProgress = next;\n        return;\n      }\n\n      if (\n        enableProfilerTimer &&\n        (completedWork.mode & ProfileMode) !== NoMode\n      ) {\n        // Record the render duration for the fiber that errored.\n        stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);\n\n        // Include the time spent working on failed children before continuing.\n        let actualDuration = completedWork.actualDuration;\n        let child = completedWork.child;\n        while (child !== null) {\n          actualDuration += child.actualDuration;\n          child = child.sibling;\n        }\n        completedWork.actualDuration = actualDuration;\n      }\n\n      if (returnFiber !== null) {\n        // Mark the parent fiber as incomplete and clear its subtree flags.\n        returnFiber.flags |= Incomplete;\n        returnFiber.subtreeFlags = NoFlags;\n        returnFiber.deletions = null;\n      }\n    }\n\n    const siblingFiber = completedWork.sibling;\n    if (siblingFiber !== null) {\n      // If there is more work to do in this returnFiber, do that next.\n      workInProgress = siblingFiber;\n      return;\n    }\n    // Otherwise, return to the parent\n    completedWork = returnFiber;\n    // Update the next thing we're working on in case something throws.\n    workInProgress = completedWork;\n  } while (completedWork !== null);\n\n  // We've reached the root.\n  if (workInProgressRootExitStatus === RootIncomplete) {\n    workInProgressRootExitStatus = RootCompleted;\n  }\n}\n\nfunction commitRoot(root) {\n  // TODO: This no longer makes any sense. We already wrap the mutation and\n  // layout phases. Should be able to remove.\n  const previousUpdateLanePriority = getCurrentUpdatePriority();\n  const prevTransition = ReactCurrentBatchConfig.transition;\n  try {\n    ReactCurrentBatchConfig.transition = 0;\n    setCurrentUpdatePriority(DiscreteEventPriority);\n    commitRootImpl(root, previousUpdateLanePriority);\n  } finally {\n    ReactCurrentBatchConfig.transition = prevTransition;\n    setCurrentUpdatePriority(previousUpdateLanePriority);\n  }\n\n  return null;\n}\n\nfunction commitRootImpl(root, renderPriorityLevel) {\n  do {\n    // `flushPassiveEffects` will call `flushSyncUpdateQueue` at the end, which\n    // means `flushPassiveEffects` will sometimes result in additional\n    // passive effects. So we need to keep flushing in a loop until there are\n    // no more pending effects.\n    // TODO: Might be better if `flushPassiveEffects` did not automatically\n    // flush synchronous work at the end, to avoid factoring hazards like this.\n    flushPassiveEffects();\n  } while (rootWithPendingPassiveEffects !== null);\n  flushRenderPhaseStrictModeWarningsInDEV();\n\n  invariant(\n    (executionContext & (RenderContext | CommitContext)) === NoContext,\n    'Should not already be working.',\n  );\n\n  const finishedWork = root.finishedWork;\n  const lanes = root.finishedLanes;\n\n  if (__DEV__) {\n    if (enableDebugTracing) {\n      logCommitStarted(lanes);\n    }\n  }\n\n  if (enableSchedulingProfiler) {\n    markCommitStarted(lanes);\n  }\n\n  if (finishedWork === null) {\n    if (__DEV__) {\n      if (enableDebugTracing) {\n        logCommitStopped();\n      }\n    }\n\n    if (enableSchedulingProfiler) {\n      markCommitStopped();\n    }\n\n    return null;\n  } else {\n    if (__DEV__) {\n      if (lanes === NoLanes) {\n        console.error(\n          'root.finishedLanes should not be empty during a commit. This is a ' +\n            'bug in React.',\n        );\n      }\n    }\n  }\n  root.finishedWork = null;\n  root.finishedLanes = NoLanes;\n\n  invariant(\n    finishedWork !== root.current,\n    'Cannot commit the same tree as before. This error is likely caused by ' +\n      'a bug in React. Please file an issue.',\n  );\n\n  // commitRoot never returns a continuation; it always finishes synchronously.\n  // So we can clear these now to allow a new callback to be scheduled.\n  root.callbackNode = null;\n  root.callbackPriority = NoLane;\n\n  // Update the first and last pending times on this root. The new first\n  // pending time is whatever is left on the root fiber.\n  let remainingLanes = mergeLanes(finishedWork.lanes, finishedWork.childLanes);\n  markRootFinished(root, remainingLanes);\n\n  if (root === workInProgressRoot) {\n    // We can reset these now that they are finished.\n    workInProgressRoot = null;\n    workInProgress = null;\n    workInProgressRootRenderLanes = NoLanes;\n  } else {\n    // This indicates that the last root we worked on is not the same one that\n    // we're committing now. This most commonly happens when a suspended root\n    // times out.\n  }\n\n  // If there are pending passive effects, schedule a callback to process them.\n  // Do this as early as possible, so it is queued before anything else that\n  // might get scheduled in the commit phase. (See #16714.)\n  // TODO: Delete all other places that schedule the passive effect callback\n  // They're redundant.\n  if (\n    (finishedWork.subtreeFlags & PassiveMask) !== NoFlags ||\n    (finishedWork.flags & PassiveMask) !== NoFlags\n  ) {\n    if (!rootDoesHavePassiveEffects) {\n      rootDoesHavePassiveEffects = true;\n      scheduleCallback(NormalSchedulerPriority, () => {\n        flushPassiveEffects();\n        return null;\n      });\n    }\n  }\n\n  // Check if there are any effects in the whole tree.\n  // TODO: This is left over from the effect list implementation, where we had\n  // to check for the existence of `firstEffect` to satisfy Flow. I think the\n  // only other reason this optimization exists is because it affects profiling.\n  // Reconsider whether this is necessary.\n  const subtreeHasEffects =\n    (finishedWork.subtreeFlags &\n      (BeforeMutationMask | MutationMask | LayoutMask | PassiveMask)) !==\n    NoFlags;\n  const rootHasEffect =\n    (finishedWork.flags &\n      (BeforeMutationMask | MutationMask | LayoutMask | PassiveMask)) !==\n    NoFlags;\n\n  if (subtreeHasEffects || rootHasEffect) {\n    const prevTransition = ReactCurrentBatchConfig.transition;\n    ReactCurrentBatchConfig.transition = 0;\n    const previousPriority = getCurrentUpdatePriority();\n    setCurrentUpdatePriority(DiscreteEventPriority);\n\n    const prevExecutionContext = executionContext;\n    executionContext |= CommitContext;\n\n    // Reset this to null before calling lifecycles\n    ReactCurrentOwner.current = null;\n\n    // The commit phase is broken into several sub-phases. We do a separate pass\n    // of the effect list for each phase: all mutation effects come before all\n    // layout effects, and so on.\n\n    // The first phase a \"before mutation\" phase. We use this phase to read the\n    // state of the host tree right before we mutate it. This is where\n    // getSnapshotBeforeUpdate is called.\n    const shouldFireAfterActiveInstanceBlur = commitBeforeMutationEffects(\n      root,\n      finishedWork,\n    );\n\n    if (enableProfilerTimer) {\n      // Mark the current commit time to be shared by all Profilers in this\n      // batch. This enables them to be grouped later.\n      recordCommitTime();\n    }\n\n    if (enableProfilerTimer && enableProfilerNestedUpdateScheduledHook) {\n      // Track the root here, rather than in commitLayoutEffects(), because of ref setters.\n      // Updates scheduled during ref detachment should also be flagged.\n      rootCommittingMutationOrLayoutEffects = root;\n    }\n\n    // The next phase is the mutation phase, where we mutate the host tree.\n    commitMutationEffects(root, finishedWork, lanes);\n\n    if (enableCreateEventHandleAPI) {\n      if (shouldFireAfterActiveInstanceBlur) {\n        afterActiveInstanceBlur();\n      }\n    }\n    resetAfterCommit(root.containerInfo);\n\n    // The work-in-progress tree is now the current tree. This must come after\n    // the mutation phase, so that the previous tree is still current during\n    // componentWillUnmount, but before the layout phase, so that the finished\n    // work is current during componentDidMount/Update.\n    root.current = finishedWork;\n\n    // The next phase is the layout phase, where we call effects that read\n    // the host tree after it's been mutated. The idiomatic use case for this is\n    // layout, but class component lifecycles also fire here for legacy reasons.\n    if (__DEV__) {\n      if (enableDebugTracing) {\n        logLayoutEffectsStarted(lanes);\n      }\n    }\n    if (enableSchedulingProfiler) {\n      markLayoutEffectsStarted(lanes);\n    }\n    commitLayoutEffects(finishedWork, root, lanes);\n    if (__DEV__) {\n      if (enableDebugTracing) {\n        logLayoutEffectsStopped();\n      }\n    }\n\n    if (enableSchedulingProfiler) {\n      markLayoutEffectsStopped();\n    }\n\n    if (enableProfilerTimer && enableProfilerNestedUpdateScheduledHook) {\n      rootCommittingMutationOrLayoutEffects = null;\n    }\n\n    // Tell Scheduler to yield at the end of the frame, so the browser has an\n    // opportunity to paint.\n    requestPaint();\n\n    executionContext = prevExecutionContext;\n\n    // Reset the priority to the previous non-sync value.\n    setCurrentUpdatePriority(previousPriority);\n    ReactCurrentBatchConfig.transition = prevTransition;\n  } else {\n    // No effects.\n    root.current = finishedWork;\n    // Measure these anyway so the flamegraph explicitly shows that there were\n    // no effects.\n    // TODO: Maybe there's a better way to report this.\n    if (enableProfilerTimer) {\n      recordCommitTime();\n    }\n  }\n\n  const rootDidHavePassiveEffects = rootDoesHavePassiveEffects;\n\n  if (rootDoesHavePassiveEffects) {\n    // This commit has passive effects. Stash a reference to them. But don't\n    // schedule a callback until after flushing layout work.\n    rootDoesHavePassiveEffects = false;\n    rootWithPendingPassiveEffects = root;\n    pendingPassiveEffectsLanes = lanes;\n  }\n\n  // Read this again, since an effect might have updated it\n  remainingLanes = root.pendingLanes;\n\n  // Check if there's remaining work on this root\n  // TODO: This is part of the `componentDidCatch` implementation. Its purpose\n  // is to detect whether something might have called setState inside\n  // `componentDidCatch`. The mechanism is known to be flawed because `setState`\n  // inside `componentDidCatch` is itself flawed — that's why we recommend\n  // `getDerivedStateFromError` instead. However, it could be improved by\n  // checking if remainingLanes includes Sync work, instead of whether there's\n  // any work remaining at all (which would also include stuff like Suspense\n  // retries or transitions). It's been like this for a while, though, so fixing\n  // it probably isn't that urgent.\n  if (remainingLanes === NoLanes) {\n    // If there's no remaining work, we can clear the set of already failed\n    // error boundaries.\n    legacyErrorBoundariesThatAlreadyFailed = null;\n  }\n\n  if (__DEV__ && enableStrictEffects) {\n    if (!rootDidHavePassiveEffects) {\n      commitDoubleInvokeEffectsInDEV(root.current, false);\n    }\n  }\n\n  onCommitRootDevTools(finishedWork.stateNode, renderPriorityLevel);\n\n  if (enableUpdaterTracking) {\n    if (isDevToolsPresent) {\n      root.memoizedUpdaters.clear();\n    }\n  }\n\n  if (__DEV__) {\n    onCommitRootTestSelector();\n  }\n\n  // Always call this before exiting `commitRoot`, to ensure that any\n  // additional work on this root is scheduled.\n  ensureRootIsScheduled(root, now());\n\n  if (hasUncaughtError) {\n    hasUncaughtError = false;\n    const error = firstUncaughtError;\n    firstUncaughtError = null;\n    throw error;\n  }\n\n  // If the passive effects are the result of a discrete render, flush them\n  // synchronously at the end of the current task so that the result is\n  // immediately observable. Otherwise, we assume that they are not\n  // order-dependent and do not need to be observed by external systems, so we\n  // can wait until after paint.\n  // TODO: We can optimize this by not scheduling the callback earlier. Since we\n  // currently schedule the callback in multiple places, will wait until those\n  // are consolidated.\n  if (\n    includesSomeLane(pendingPassiveEffectsLanes, SyncLane) &&\n    root.tag !== LegacyRoot\n  ) {\n    flushPassiveEffects();\n  }\n\n  // Read this again, since a passive effect might have updated it\n  remainingLanes = root.pendingLanes;\n  if (includesSomeLane(remainingLanes, (SyncLane: Lane))) {\n    if (enableProfilerTimer && enableProfilerNestedUpdatePhase) {\n      markNestedUpdateScheduled();\n    }\n\n    // Count the number of times the root synchronously re-renders without\n    // finishing. If there are too many, it indicates an infinite update loop.\n    if (root === rootWithNestedUpdates) {\n      nestedUpdateCount++;\n    } else {\n      nestedUpdateCount = 0;\n      rootWithNestedUpdates = root;\n    }\n  } else {\n    nestedUpdateCount = 0;\n  }\n\n  // If layout work was scheduled, flush it now.\n  flushSyncCallbacks();\n\n  if (__DEV__) {\n    if (enableDebugTracing) {\n      logCommitStopped();\n    }\n  }\n\n  if (enableSchedulingProfiler) {\n    markCommitStopped();\n  }\n\n  return null;\n}\n\nexport function flushPassiveEffects(): boolean {\n  // Returns whether passive effects were flushed.\n  // TODO: Combine this check with the one in flushPassiveEFfectsImpl. We should\n  // probably just combine the two functions. I believe they were only separate\n  // in the first place because we used to wrap it with\n  // `Scheduler.runWithPriority`, which accepts a function. But now we track the\n  // priority within React itself, so we can mutate the variable directly.\n  if (rootWithPendingPassiveEffects !== null) {\n    const renderPriority = lanesToEventPriority(pendingPassiveEffectsLanes);\n    const priority = lowerEventPriority(DefaultEventPriority, renderPriority);\n    const prevTransition = ReactCurrentBatchConfig.transition;\n    const previousPriority = getCurrentUpdatePriority();\n    try {\n      ReactCurrentBatchConfig.transition = 0;\n      setCurrentUpdatePriority(priority);\n      return flushPassiveEffectsImpl();\n    } finally {\n      setCurrentUpdatePriority(previousPriority);\n      ReactCurrentBatchConfig.transition = prevTransition;\n    }\n  }\n  return false;\n}\n\nexport function enqueuePendingPassiveProfilerEffect(fiber: Fiber): void {\n  if (enableProfilerTimer && enableProfilerCommitHooks) {\n    pendingPassiveProfilerEffects.push(fiber);\n    if (!rootDoesHavePassiveEffects) {\n      rootDoesHavePassiveEffects = true;\n      scheduleCallback(NormalSchedulerPriority, () => {\n        flushPassiveEffects();\n        return null;\n      });\n    }\n  }\n}\n\nfunction flushPassiveEffectsImpl() {\n  if (rootWithPendingPassiveEffects === null) {\n    return false;\n  }\n\n  const root = rootWithPendingPassiveEffects;\n  const lanes = pendingPassiveEffectsLanes;\n  rootWithPendingPassiveEffects = null;\n  // TODO: This is sometimes out of sync with rootWithPendingPassiveEffects.\n  // Figure out why and fix it. It's not causing any known issues (probably\n  // because it's only used for profiling), but it's a refactor hazard.\n  pendingPassiveEffectsLanes = NoLanes;\n\n  invariant(\n    (executionContext & (RenderContext | CommitContext)) === NoContext,\n    'Cannot flush passive effects while already rendering.',\n  );\n\n  if (__DEV__) {\n    if (enableDebugTracing) {\n      logPassiveEffectsStarted(lanes);\n    }\n  }\n\n  if (enableSchedulingProfiler) {\n    markPassiveEffectsStarted(lanes);\n  }\n\n  const prevExecutionContext = executionContext;\n  executionContext |= CommitContext;\n\n  commitPassiveUnmountEffects(root.current);\n  commitPassiveMountEffects(root, root.current);\n\n  // TODO: Move to commitPassiveMountEffects\n  if (enableProfilerTimer && enableProfilerCommitHooks) {\n    const profilerEffects = pendingPassiveProfilerEffects;\n    pendingPassiveProfilerEffects = [];\n    for (let i = 0; i < profilerEffects.length; i++) {\n      const fiber = ((profilerEffects[i]: any): Fiber);\n      commitPassiveEffectDurations(root, fiber);\n    }\n  }\n\n  if (__DEV__) {\n    if (enableDebugTracing) {\n      logPassiveEffectsStopped();\n    }\n  }\n\n  if (enableSchedulingProfiler) {\n    markPassiveEffectsStopped();\n  }\n\n  if (__DEV__ && enableStrictEffects) {\n    commitDoubleInvokeEffectsInDEV(root.current, true);\n  }\n\n  executionContext = prevExecutionContext;\n\n  flushSyncCallbacks();\n\n  // If additional passive effects were scheduled, increment a counter. If this\n  // exceeds the limit, we'll fire a warning.\n  nestedPassiveUpdateCount =\n    rootWithPendingPassiveEffects === null ? 0 : nestedPassiveUpdateCount + 1;\n\n  // TODO: Move to commitPassiveMountEffects\n  onPostCommitRootDevTools(root);\n  if (enableProfilerTimer && enableProfilerCommitHooks) {\n    const stateNode = root.current.stateNode;\n    stateNode.effectDuration = 0;\n    stateNode.passiveEffectDuration = 0;\n  }\n\n  return true;\n}\n\nexport function isAlreadyFailedLegacyErrorBoundary(instance: mixed): boolean {\n  return (\n    legacyErrorBoundariesThatAlreadyFailed !== null &&\n    legacyErrorBoundariesThatAlreadyFailed.has(instance)\n  );\n}\n\nexport function markLegacyErrorBoundaryAsFailed(instance: mixed) {\n  if (legacyErrorBoundariesThatAlreadyFailed === null) {\n    legacyErrorBoundariesThatAlreadyFailed = new Set([instance]);\n  } else {\n    legacyErrorBoundariesThatAlreadyFailed.add(instance);\n  }\n}\n\nfunction prepareToThrowUncaughtError(error: mixed) {\n  if (!hasUncaughtError) {\n    hasUncaughtError = true;\n    firstUncaughtError = error;\n  }\n}\nexport const onUncaughtError = prepareToThrowUncaughtError;\n\nfunction captureCommitPhaseErrorOnRoot(\n  rootFiber: Fiber,\n  sourceFiber: Fiber,\n  error: mixed,\n) {\n  const errorInfo = createCapturedValue(error, sourceFiber);\n  const update = createRootErrorUpdate(rootFiber, errorInfo, (SyncLane: Lane));\n  enqueueUpdate(rootFiber, update, (SyncLane: Lane));\n  const eventTime = requestEventTime();\n  const root = markUpdateLaneFromFiberToRoot(rootFiber, (SyncLane: Lane));\n  if (root !== null) {\n    markRootUpdated(root, SyncLane, eventTime);\n    ensureRootIsScheduled(root, eventTime);\n  }\n}\n\nexport function captureCommitPhaseError(\n  sourceFiber: Fiber,\n  nearestMountedAncestor: Fiber | null,\n  error: mixed,\n) {\n  if (sourceFiber.tag === HostRoot) {\n    // Error was thrown at the root. There is no parent, so the root\n    // itself should capture it.\n    captureCommitPhaseErrorOnRoot(sourceFiber, sourceFiber, error);\n    return;\n  }\n\n  let fiber = null;\n  if (skipUnmountedBoundaries) {\n    fiber = nearestMountedAncestor;\n  } else {\n    fiber = sourceFiber.return;\n  }\n\n  while (fiber !== null) {\n    if (fiber.tag === HostRoot) {\n      captureCommitPhaseErrorOnRoot(fiber, sourceFiber, error);\n      return;\n    } else if (fiber.tag === ClassComponent) {\n      const ctor = fiber.type;\n      const instance = fiber.stateNode;\n      if (\n        typeof ctor.getDerivedStateFromError === 'function' ||\n        (typeof instance.componentDidCatch === 'function' &&\n          !isAlreadyFailedLegacyErrorBoundary(instance))\n      ) {\n        const errorInfo = createCapturedValue(error, sourceFiber);\n        const update = createClassErrorUpdate(\n          fiber,\n          errorInfo,\n          (SyncLane: Lane),\n        );\n        enqueueUpdate(fiber, update, (SyncLane: Lane));\n        const eventTime = requestEventTime();\n        const root = markUpdateLaneFromFiberToRoot(fiber, (SyncLane: Lane));\n        if (root !== null) {\n          markRootUpdated(root, SyncLane, eventTime);\n          ensureRootIsScheduled(root, eventTime);\n        }\n        return;\n      }\n    }\n    fiber = fiber.return;\n  }\n\n  if (__DEV__) {\n    // TODO: Until we re-land skipUnmountedBoundaries (see #20147), this warning\n    // will fire for errors that are thrown by destroy functions inside deleted\n    // trees. What it should instead do is propagate the error to the parent of\n    // the deleted tree. In the meantime, do not add this warning to the\n    // allowlist; this is only for our internal use.\n    console.error(\n      'Internal React error: Attempted to capture a commit phase error ' +\n        'inside a detached tree. This indicates a bug in React. Likely ' +\n        'causes include deleting the same fiber more than once, committing an ' +\n        'already-finished tree, or an inconsistent return pointer.\\n\\n' +\n        'Error message:\\n\\n%s',\n      error,\n    );\n  }\n}\n\nexport function pingSuspendedRoot(\n  root: FiberRoot,\n  wakeable: Wakeable,\n  pingedLanes: Lanes,\n) {\n  const pingCache = root.pingCache;\n  if (pingCache !== null) {\n    // The wakeable resolved, so we no longer need to memoize, because it will\n    // never be thrown again.\n    pingCache.delete(wakeable);\n  }\n\n  const eventTime = requestEventTime();\n  markRootPinged(root, pingedLanes, eventTime);\n\n  if (\n    workInProgressRoot === root &&\n    isSubsetOfLanes(workInProgressRootRenderLanes, pingedLanes)\n  ) {\n    // Received a ping at the same priority level at which we're currently\n    // rendering. We might want to restart this render. This should mirror\n    // the logic of whether or not a root suspends once it completes.\n\n    // TODO: If we're rendering sync either due to Sync, Batched or expired,\n    // we should probably never restart.\n\n    // If we're suspended with delay, or if it's a retry, we'll always suspend\n    // so we can always restart.\n    if (\n      workInProgressRootExitStatus === RootSuspendedWithDelay ||\n      (workInProgressRootExitStatus === RootSuspended &&\n        includesOnlyRetries(workInProgressRootRenderLanes) &&\n        now() - globalMostRecentFallbackTime < FALLBACK_THROTTLE_MS)\n    ) {\n      // Restart from the root.\n      prepareFreshStack(root, NoLanes);\n    } else {\n      // Even though we can't restart right now, we might get an\n      // opportunity later. So we mark this render as having a ping.\n      workInProgressRootPingedLanes = mergeLanes(\n        workInProgressRootPingedLanes,\n        pingedLanes,\n      );\n    }\n  }\n\n  ensureRootIsScheduled(root, eventTime);\n}\n\nfunction retryTimedOutBoundary(boundaryFiber: Fiber, retryLane: Lane) {\n  // The boundary fiber (a Suspense component or SuspenseList component)\n  // previously was rendered in its fallback state. One of the promises that\n  // suspended it has resolved, which means at least part of the tree was\n  // likely unblocked. Try rendering again, at a new lanes.\n  if (retryLane === NoLane) {\n    // TODO: Assign this to `suspenseState.retryLane`? to avoid\n    // unnecessary entanglement?\n    retryLane = requestRetryLane(boundaryFiber);\n  }\n  // TODO: Special case idle priority?\n  const eventTime = requestEventTime();\n  const root = markUpdateLaneFromFiberToRoot(boundaryFiber, retryLane);\n  if (root !== null) {\n    markRootUpdated(root, retryLane, eventTime);\n    ensureRootIsScheduled(root, eventTime);\n  }\n}\n\nexport function retryDehydratedSuspenseBoundary(boundaryFiber: Fiber) {\n  const suspenseState: null | SuspenseState = boundaryFiber.memoizedState;\n  let retryLane = NoLane;\n  if (suspenseState !== null) {\n    retryLane = suspenseState.retryLane;\n  }\n  retryTimedOutBoundary(boundaryFiber, retryLane);\n}\n\nexport function resolveRetryWakeable(boundaryFiber: Fiber, wakeable: Wakeable) {\n  let retryLane = NoLane; // Default\n  let retryCache: WeakSet<Wakeable> | Set<Wakeable> | null;\n  if (enableSuspenseServerRenderer) {\n    switch (boundaryFiber.tag) {\n      case SuspenseComponent:\n        retryCache = boundaryFiber.stateNode;\n        const suspenseState: null | SuspenseState = boundaryFiber.memoizedState;\n        if (suspenseState !== null) {\n          retryLane = suspenseState.retryLane;\n        }\n        break;\n      case SuspenseListComponent:\n        retryCache = boundaryFiber.stateNode;\n        break;\n      default:\n        invariant(\n          false,\n          'Pinged unknown suspense boundary type. ' +\n            'This is probably a bug in React.',\n        );\n    }\n  } else {\n    retryCache = boundaryFiber.stateNode;\n  }\n\n  if (retryCache !== null) {\n    // The wakeable resolved, so we no longer need to memoize, because it will\n    // never be thrown again.\n    retryCache.delete(wakeable);\n  }\n\n  retryTimedOutBoundary(boundaryFiber, retryLane);\n}\n\n// Computes the next Just Noticeable Difference (JND) boundary.\n// The theory is that a person can't tell the difference between small differences in time.\n// Therefore, if we wait a bit longer than necessary that won't translate to a noticeable\n// difference in the experience. However, waiting for longer might mean that we can avoid\n// showing an intermediate loading state. The longer we have already waited, the harder it\n// is to tell small differences in time. Therefore, the longer we've already waited,\n// the longer we can wait additionally. At some point we have to give up though.\n// We pick a train model where the next boundary commits at a consistent schedule.\n// These particular numbers are vague estimates. We expect to adjust them based on research.\nfunction jnd(timeElapsed: number) {\n  return timeElapsed < 120\n    ? 120\n    : timeElapsed < 480\n    ? 480\n    : timeElapsed < 1080\n    ? 1080\n    : timeElapsed < 1920\n    ? 1920\n    : timeElapsed < 3000\n    ? 3000\n    : timeElapsed < 4320\n    ? 4320\n    : ceil(timeElapsed / 1960) * 1960;\n}\n\nfunction checkForNestedUpdates() {\n  if (nestedUpdateCount > NESTED_UPDATE_LIMIT) {\n    nestedUpdateCount = 0;\n    rootWithNestedUpdates = null;\n    invariant(\n      false,\n      'Maximum update depth exceeded. This can happen when a component ' +\n        'repeatedly calls setState inside componentWillUpdate or ' +\n        'componentDidUpdate. React limits the number of nested updates to ' +\n        'prevent infinite loops.',\n    );\n  }\n\n  if (__DEV__) {\n    if (nestedPassiveUpdateCount > NESTED_PASSIVE_UPDATE_LIMIT) {\n      nestedPassiveUpdateCount = 0;\n      console.error(\n        'Maximum update depth exceeded. This can happen when a component ' +\n          \"calls setState inside useEffect, but useEffect either doesn't \" +\n          'have a dependency array, or one of the dependencies changes on ' +\n          'every render.',\n      );\n    }\n  }\n}\n\nfunction flushRenderPhaseStrictModeWarningsInDEV() {\n  if (__DEV__) {\n    ReactStrictModeWarnings.flushLegacyContextWarning();\n\n    if (warnAboutDeprecatedLifecycles) {\n      ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings();\n    }\n  }\n}\n\nfunction commitDoubleInvokeEffectsInDEV(\n  fiber: Fiber,\n  hasPassiveEffects: boolean,\n) {\n  if (__DEV__ && enableStrictEffects) {\n    // TODO (StrictEffects) Should we set a marker on the root if it contains strict effects\n    // so we don't traverse unnecessarily? similar to subtreeFlags but just at the root level.\n    // Maybe not a big deal since this is DEV only behavior.\n\n    setCurrentDebugFiberInDEV(fiber);\n    invokeEffectsInDev(fiber, MountLayoutDev, invokeLayoutEffectUnmountInDEV);\n    if (hasPassiveEffects) {\n      invokeEffectsInDev(\n        fiber,\n        MountPassiveDev,\n        invokePassiveEffectUnmountInDEV,\n      );\n    }\n\n    invokeEffectsInDev(fiber, MountLayoutDev, invokeLayoutEffectMountInDEV);\n    if (hasPassiveEffects) {\n      invokeEffectsInDev(fiber, MountPassiveDev, invokePassiveEffectMountInDEV);\n    }\n    resetCurrentDebugFiberInDEV();\n  }\n}\n\nfunction invokeEffectsInDev(\n  firstChild: Fiber,\n  fiberFlags: Flags,\n  invokeEffectFn: (fiber: Fiber) => void,\n): void {\n  if (__DEV__ && enableStrictEffects) {\n    // We don't need to re-check StrictEffectsMode here.\n    // This function is only called if that check has already passed.\n\n    let current = firstChild;\n    let subtreeRoot = null;\n    while (current !== null) {\n      const primarySubtreeFlag = current.subtreeFlags & fiberFlags;\n      if (\n        current !== subtreeRoot &&\n        current.child !== null &&\n        primarySubtreeFlag !== NoFlags\n      ) {\n        current = current.child;\n      } else {\n        if ((current.flags & fiberFlags) !== NoFlags) {\n          invokeEffectFn(current);\n        }\n\n        if (current.sibling !== null) {\n          current = current.sibling;\n        } else {\n          current = subtreeRoot = current.return;\n        }\n      }\n    }\n  }\n}\n\nlet didWarnStateUpdateForNotYetMountedComponent: Set<string> | null = null;\nfunction warnAboutUpdateOnNotYetMountedFiberInDEV(fiber) {\n  if (__DEV__) {\n    if ((executionContext & RenderContext) !== NoContext) {\n      // We let the other warning about render phase updates deal with this one.\n      return;\n    }\n\n    if (!(fiber.mode & ConcurrentMode)) {\n      return;\n    }\n\n    const tag = fiber.tag;\n    if (\n      tag !== IndeterminateComponent &&\n      tag !== HostRoot &&\n      tag !== ClassComponent &&\n      tag !== FunctionComponent &&\n      tag !== ForwardRef &&\n      tag !== MemoComponent &&\n      tag !== SimpleMemoComponent\n    ) {\n      // Only warn for user-defined components, not internal ones like Suspense.\n      return;\n    }\n\n    // We show the whole stack but dedupe on the top component's name because\n    // the problematic code almost always lies inside that component.\n    const componentName = getComponentNameFromFiber(fiber) || 'ReactComponent';\n    if (didWarnStateUpdateForNotYetMountedComponent !== null) {\n      if (didWarnStateUpdateForNotYetMountedComponent.has(componentName)) {\n        return;\n      }\n      didWarnStateUpdateForNotYetMountedComponent.add(componentName);\n    } else {\n      didWarnStateUpdateForNotYetMountedComponent = new Set([componentName]);\n    }\n\n    const previousFiber = ReactCurrentFiberCurrent;\n    try {\n      setCurrentDebugFiberInDEV(fiber);\n      console.error(\n        \"Can't perform a React state update on a component that hasn't mounted yet. \" +\n          'This indicates that you have a side-effect in your render function that ' +\n          'asynchronously later calls tries to update the component. Move this work to ' +\n          'useEffect instead.',\n      );\n    } finally {\n      if (previousFiber) {\n        setCurrentDebugFiberInDEV(fiber);\n      } else {\n        resetCurrentDebugFiberInDEV();\n      }\n    }\n  }\n}\n\nlet beginWork;\nif (__DEV__ && replayFailedUnitOfWorkWithInvokeGuardedCallback) {\n  const dummyFiber = null;\n  beginWork = (current, unitOfWork, lanes) => {\n    // If a component throws an error, we replay it again in a synchronously\n    // dispatched event, so that the debugger will treat it as an uncaught\n    // error See ReactErrorUtils for more information.\n\n    // Before entering the begin phase, copy the work-in-progress onto a dummy\n    // fiber. If beginWork throws, we'll use this to reset the state.\n    const originalWorkInProgressCopy = assignFiberPropertiesInDEV(\n      dummyFiber,\n      unitOfWork,\n    );\n    try {\n      return originalBeginWork(current, unitOfWork, lanes);\n    } catch (originalError) {\n      if (\n        originalError !== null &&\n        typeof originalError === 'object' &&\n        typeof originalError.then === 'function'\n      ) {\n        // Don't replay promises. Treat everything else like an error.\n        throw originalError;\n      }\n\n      // Keep this code in sync with handleError; any changes here must have\n      // corresponding changes there.\n      resetContextDependencies();\n      resetHooksAfterThrow();\n      // Don't reset current debug fiber, since we're about to work on the\n      // same fiber again.\n\n      // Unwind the failed stack frame\n      unwindInterruptedWork(unitOfWork, workInProgressRootRenderLanes);\n\n      // Restore the original properties of the fiber.\n      assignFiberPropertiesInDEV(unitOfWork, originalWorkInProgressCopy);\n\n      if (enableProfilerTimer && unitOfWork.mode & ProfileMode) {\n        // Reset the profiler timer.\n        startProfilerTimer(unitOfWork);\n      }\n\n      // Run beginWork again.\n      invokeGuardedCallback(\n        null,\n        originalBeginWork,\n        null,\n        current,\n        unitOfWork,\n        lanes,\n      );\n\n      if (hasCaughtError()) {\n        const replayError = clearCaughtError();\n        if (\n          typeof replayError === 'object' &&\n          replayError !== null &&\n          replayError._suppressLogging &&\n          typeof originalError === 'object' &&\n          originalError !== null &&\n          !originalError._suppressLogging\n        ) {\n          // If suppressed, let the flag carry over to the original error which is the one we'll rethrow.\n          originalError._suppressLogging = true;\n        }\n      }\n      // We always throw the original error in case the second render pass is not idempotent.\n      // This can happen if a memoized function or CommonJS module doesn't throw after first invokation.\n      throw originalError;\n    }\n  };\n} else {\n  beginWork = originalBeginWork;\n}\n\nlet didWarnAboutUpdateInRender = false;\nlet didWarnAboutUpdateInRenderForAnotherComponent;\nif (__DEV__) {\n  didWarnAboutUpdateInRenderForAnotherComponent = new Set();\n}\n\nfunction warnAboutRenderPhaseUpdatesInDEV(fiber) {\n  if (__DEV__) {\n    if (\n      ReactCurrentDebugFiberIsRenderingInDEV &&\n      (executionContext & RenderContext) !== NoContext &&\n      !getIsUpdatingOpaqueValueInRenderPhaseInDEV()\n    ) {\n      switch (fiber.tag) {\n        case FunctionComponent:\n        case ForwardRef:\n        case SimpleMemoComponent: {\n          const renderingComponentName =\n            (workInProgress && getComponentNameFromFiber(workInProgress)) ||\n            'Unknown';\n          // Dedupe by the rendering component because it's the one that needs to be fixed.\n          const dedupeKey = renderingComponentName;\n          if (!didWarnAboutUpdateInRenderForAnotherComponent.has(dedupeKey)) {\n            didWarnAboutUpdateInRenderForAnotherComponent.add(dedupeKey);\n            const setStateComponentName =\n              getComponentNameFromFiber(fiber) || 'Unknown';\n            console.error(\n              'Cannot update a component (`%s`) while rendering a ' +\n                'different component (`%s`). To locate the bad setState() call inside `%s`, ' +\n                'follow the stack trace as described in https://reactjs.org/link/setstate-in-render',\n              setStateComponentName,\n              renderingComponentName,\n              renderingComponentName,\n            );\n          }\n          break;\n        }\n        case ClassComponent: {\n          if (!didWarnAboutUpdateInRender) {\n            console.error(\n              'Cannot update during an existing state transition (such as ' +\n                'within `render`). Render methods should be a pure ' +\n                'function of props and state.',\n            );\n            didWarnAboutUpdateInRender = true;\n          }\n          break;\n        }\n      }\n    }\n  }\n}\n\nexport function restorePendingUpdaters(root: FiberRoot, lanes: Lanes): void {\n  if (enableUpdaterTracking) {\n    if (isDevToolsPresent) {\n      const memoizedUpdaters = root.memoizedUpdaters;\n      memoizedUpdaters.forEach(schedulingFiber => {\n        addFiberToLanesMap(root, schedulingFiber, lanes);\n      });\n\n      // This function intentionally does not clear memoized updaters.\n      // Those may still be relevant to the current commit\n      // and a future one (e.g. Suspense).\n    }\n  }\n}\n\nconst fakeActCallbackNode = {};\nfunction scheduleCallback(priorityLevel, callback) {\n  if (__DEV__) {\n    // If we're currently inside an `act` scope, bypass Scheduler and push to\n    // the `act` queue instead.\n    const actQueue = ReactCurrentActQueue.current;\n    if (actQueue !== null) {\n      actQueue.push(callback);\n      return fakeActCallbackNode;\n    } else {\n      return Scheduler_scheduleCallback(priorityLevel, callback);\n    }\n  } else {\n    // In production, always call Scheduler. This function will be stripped out.\n    return Scheduler_scheduleCallback(priorityLevel, callback);\n  }\n}\n\nfunction cancelCallback(callbackNode) {\n  if (__DEV__ && callbackNode === fakeActCallbackNode) {\n    return;\n  }\n  // In production, always call Scheduler. This function will be stripped out.\n  return Scheduler_cancelCallback(callbackNode);\n}\n\nfunction shouldForceFlushFallbacksInDEV() {\n  // Never force flush in production. This function should get stripped out.\n  return __DEV__ && ReactCurrentActQueue.current !== null;\n}\n\nexport function warnIfNotCurrentlyActingEffectsInDEV(fiber: Fiber): void {\n  if (__DEV__) {\n    if (\n      warnsIfNotActing === true &&\n      (fiber.mode & StrictLegacyMode) !== NoMode &&\n      ReactCurrentActQueue.current === null &&\n      // Our internal tests use a custom implementation of `act` that works by\n      // mocking the Scheduler package. Disable the `act` warning.\n      // TODO: Maybe the warning should be disabled by default, and then turned\n      // on at the testing frameworks layer? Instead of what we do now, which\n      // is check if a `jest` global is defined.\n      ReactCurrentActQueue.disableActWarning === false\n    ) {\n      console.error(\n        'An update to %s ran an effect, but was not wrapped in act(...).\\n\\n' +\n          'When testing, code that causes React state updates should be ' +\n          'wrapped into act(...):\\n\\n' +\n          'act(() => {\\n' +\n          '  /* fire events that update state */\\n' +\n          '});\\n' +\n          '/* assert on the output */\\n\\n' +\n          \"This ensures that you're testing the behavior the user would see \" +\n          'in the browser.' +\n          ' Learn more at https://reactjs.org/link/wrap-tests-with-act',\n        getComponentNameFromFiber(fiber),\n      );\n    }\n  }\n}\n\nfunction warnIfNotCurrentlyActingUpdatesInDEV(fiber: Fiber): void {\n  if (__DEV__) {\n    if (\n      warnsIfNotActing === true &&\n      executionContext === NoContext &&\n      ReactCurrentActQueue.current === null &&\n      // Our internal tests use a custom implementation of `act` that works by\n      // mocking the Scheduler package. Disable the `act` warning.\n      // TODO: Maybe the warning should be disabled by default, and then turned\n      // on at the testing frameworks layer? Instead of what we do now, which\n      // is check if a `jest` global is defined.\n      ReactCurrentActQueue.disableActWarning === false\n    ) {\n      const previousFiber = ReactCurrentFiberCurrent;\n      try {\n        setCurrentDebugFiberInDEV(fiber);\n        console.error(\n          'An update to %s inside a test was not wrapped in act(...).\\n\\n' +\n            'When testing, code that causes React state updates should be ' +\n            'wrapped into act(...):\\n\\n' +\n            'act(() => {\\n' +\n            '  /* fire events that update state */\\n' +\n            '});\\n' +\n            '/* assert on the output */\\n\\n' +\n            \"This ensures that you're testing the behavior the user would see \" +\n            'in the browser.' +\n            ' Learn more at https://reactjs.org/link/wrap-tests-with-act',\n          getComponentNameFromFiber(fiber),\n        );\n      } finally {\n        if (previousFiber) {\n          setCurrentDebugFiberInDEV(fiber);\n        } else {\n          resetCurrentDebugFiberInDEV();\n        }\n      }\n    }\n  }\n}\n\nexport const warnIfNotCurrentlyActingUpdatesInDev = warnIfNotCurrentlyActingUpdatesInDEV;\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {ReactElement} from 'shared/ReactElementType';\nimport type {Fiber} from './ReactInternalTypes';\nimport type {FiberRoot} from './ReactInternalTypes';\nimport type {Instance} from './ReactFiberHostConfig';\nimport type {ReactNodeList} from 'shared/ReactTypes';\n\nimport {\n  flushSync,\n  scheduleUpdateOnFiber,\n  flushPassiveEffects,\n} from './ReactFiberWorkLoop.old';\nimport {updateContainer} from './ReactFiberReconciler.old';\nimport {emptyContextObject} from './ReactFiberContext.old';\nimport {SyncLane, NoTimestamp} from './ReactFiberLane.old';\nimport {\n  ClassComponent,\n  FunctionComponent,\n  ForwardRef,\n  HostComponent,\n  HostPortal,\n  HostRoot,\n  MemoComponent,\n  SimpleMemoComponent,\n} from './ReactWorkTags';\nimport {\n  REACT_FORWARD_REF_TYPE,\n  REACT_MEMO_TYPE,\n  REACT_LAZY_TYPE,\n} from 'shared/ReactSymbols';\n\nexport type Family = {|\n  current: any,\n|};\n\nexport type RefreshUpdate = {|\n  staleFamilies: Set<Family>,\n  updatedFamilies: Set<Family>,\n|};\n\n// Resolves type to a family.\ntype RefreshHandler = any => Family | void;\n\n// Used by React Refresh runtime through DevTools Global Hook.\nexport type SetRefreshHandler = (handler: RefreshHandler | null) => void;\nexport type ScheduleRefresh = (root: FiberRoot, update: RefreshUpdate) => void;\nexport type ScheduleRoot = (root: FiberRoot, element: ReactNodeList) => void;\nexport type FindHostInstancesForRefresh = (\n  root: FiberRoot,\n  families: Array<Family>,\n) => Set<Instance>;\n\nlet resolveFamily: RefreshHandler | null = null;\n// $FlowFixMe Flow gets confused by a WeakSet feature check below.\nlet failedBoundaries: WeakSet<Fiber> | null = null;\n\nexport const setRefreshHandler = (handler: RefreshHandler | null): void => {\n  if (__DEV__) {\n    resolveFamily = handler;\n  }\n};\n\nexport function resolveFunctionForHotReloading(type: any): any {\n  if (__DEV__) {\n    if (resolveFamily === null) {\n      // Hot reloading is disabled.\n      return type;\n    }\n    const family = resolveFamily(type);\n    if (family === undefined) {\n      return type;\n    }\n    // Use the latest known implementation.\n    return family.current;\n  } else {\n    return type;\n  }\n}\n\nexport function resolveClassForHotReloading(type: any): any {\n  // No implementation differences.\n  return resolveFunctionForHotReloading(type);\n}\n\nexport function resolveForwardRefForHotReloading(type: any): any {\n  if (__DEV__) {\n    if (resolveFamily === null) {\n      // Hot reloading is disabled.\n      return type;\n    }\n    const family = resolveFamily(type);\n    if (family === undefined) {\n      // Check if we're dealing with a real forwardRef. Don't want to crash early.\n      if (\n        type !== null &&\n        type !== undefined &&\n        typeof type.render === 'function'\n      ) {\n        // ForwardRef is special because its resolved .type is an object,\n        // but it's possible that we only have its inner render function in the map.\n        // If that inner render function is different, we'll build a new forwardRef type.\n        const currentRender = resolveFunctionForHotReloading(type.render);\n        if (type.render !== currentRender) {\n          const syntheticType = {\n            $$typeof: REACT_FORWARD_REF_TYPE,\n            render: currentRender,\n          };\n          if (type.displayName !== undefined) {\n            (syntheticType: any).displayName = type.displayName;\n          }\n          return syntheticType;\n        }\n      }\n      return type;\n    }\n    // Use the latest known implementation.\n    return family.current;\n  } else {\n    return type;\n  }\n}\n\nexport function isCompatibleFamilyForHotReloading(\n  fiber: Fiber,\n  element: ReactElement,\n): boolean {\n  if (__DEV__) {\n    if (resolveFamily === null) {\n      // Hot reloading is disabled.\n      return false;\n    }\n\n    const prevType = fiber.elementType;\n    const nextType = element.type;\n\n    // If we got here, we know types aren't === equal.\n    let needsCompareFamilies = false;\n\n    const $$typeofNextType =\n      typeof nextType === 'object' && nextType !== null\n        ? nextType.$$typeof\n        : null;\n\n    switch (fiber.tag) {\n      case ClassComponent: {\n        if (typeof nextType === 'function') {\n          needsCompareFamilies = true;\n        }\n        break;\n      }\n      case FunctionComponent: {\n        if (typeof nextType === 'function') {\n          needsCompareFamilies = true;\n        } else if ($$typeofNextType === REACT_LAZY_TYPE) {\n          // We don't know the inner type yet.\n          // We're going to assume that the lazy inner type is stable,\n          // and so it is sufficient to avoid reconciling it away.\n          // We're not going to unwrap or actually use the new lazy type.\n          needsCompareFamilies = true;\n        }\n        break;\n      }\n      case ForwardRef: {\n        if ($$typeofNextType === REACT_FORWARD_REF_TYPE) {\n          needsCompareFamilies = true;\n        } else if ($$typeofNextType === REACT_LAZY_TYPE) {\n          needsCompareFamilies = true;\n        }\n        break;\n      }\n      case MemoComponent:\n      case SimpleMemoComponent: {\n        if ($$typeofNextType === REACT_MEMO_TYPE) {\n          // TODO: if it was but can no longer be simple,\n          // we shouldn't set this.\n          needsCompareFamilies = true;\n        } else if ($$typeofNextType === REACT_LAZY_TYPE) {\n          needsCompareFamilies = true;\n        }\n        break;\n      }\n      default:\n        return false;\n    }\n\n    // Check if both types have a family and it's the same one.\n    if (needsCompareFamilies) {\n      // Note: memo() and forwardRef() we'll compare outer rather than inner type.\n      // This means both of them need to be registered to preserve state.\n      // If we unwrapped and compared the inner types for wrappers instead,\n      // then we would risk falsely saying two separate memo(Foo)\n      // calls are equivalent because they wrap the same Foo function.\n      const prevFamily = resolveFamily(prevType);\n      if (prevFamily !== undefined && prevFamily === resolveFamily(nextType)) {\n        return true;\n      }\n    }\n    return false;\n  } else {\n    return false;\n  }\n}\n\nexport function markFailedErrorBoundaryForHotReloading(fiber: Fiber) {\n  if (__DEV__) {\n    if (resolveFamily === null) {\n      // Hot reloading is disabled.\n      return;\n    }\n    if (typeof WeakSet !== 'function') {\n      return;\n    }\n    if (failedBoundaries === null) {\n      failedBoundaries = new WeakSet();\n    }\n    failedBoundaries.add(fiber);\n  }\n}\n\nexport const scheduleRefresh: ScheduleRefresh = (\n  root: FiberRoot,\n  update: RefreshUpdate,\n): void => {\n  if (__DEV__) {\n    if (resolveFamily === null) {\n      // Hot reloading is disabled.\n      return;\n    }\n    const {staleFamilies, updatedFamilies} = update;\n    flushPassiveEffects();\n    flushSync(() => {\n      scheduleFibersWithFamiliesRecursively(\n        root.current,\n        updatedFamilies,\n        staleFamilies,\n      );\n    });\n  }\n};\n\nexport const scheduleRoot: ScheduleRoot = (\n  root: FiberRoot,\n  element: ReactNodeList,\n): void => {\n  if (__DEV__) {\n    if (root.context !== emptyContextObject) {\n      // Super edge case: root has a legacy _renderSubtree context\n      // but we don't know the parentComponent so we can't pass it.\n      // Just ignore. We'll delete this with _renderSubtree code path later.\n      return;\n    }\n    flushPassiveEffects();\n    flushSync(() => {\n      updateContainer(element, root, null, null);\n    });\n  }\n};\n\nfunction scheduleFibersWithFamiliesRecursively(\n  fiber: Fiber,\n  updatedFamilies: Set<Family>,\n  staleFamilies: Set<Family>,\n) {\n  if (__DEV__) {\n    const {alternate, child, sibling, tag, type} = fiber;\n\n    let candidateType = null;\n    switch (tag) {\n      case FunctionComponent:\n      case SimpleMemoComponent:\n      case ClassComponent:\n        candidateType = type;\n        break;\n      case ForwardRef:\n        candidateType = type.render;\n        break;\n      default:\n        break;\n    }\n\n    if (resolveFamily === null) {\n      throw new Error('Expected resolveFamily to be set during hot reload.');\n    }\n\n    let needsRender = false;\n    let needsRemount = false;\n    if (candidateType !== null) {\n      const family = resolveFamily(candidateType);\n      if (family !== undefined) {\n        if (staleFamilies.has(family)) {\n          needsRemount = true;\n        } else if (updatedFamilies.has(family)) {\n          if (tag === ClassComponent) {\n            needsRemount = true;\n          } else {\n            needsRender = true;\n          }\n        }\n      }\n    }\n    if (failedBoundaries !== null) {\n      if (\n        failedBoundaries.has(fiber) ||\n        (alternate !== null && failedBoundaries.has(alternate))\n      ) {\n        needsRemount = true;\n      }\n    }\n\n    if (needsRemount) {\n      fiber._debugNeedsRemount = true;\n    }\n    if (needsRemount || needsRender) {\n      scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);\n    }\n    if (child !== null && !needsRemount) {\n      scheduleFibersWithFamiliesRecursively(\n        child,\n        updatedFamilies,\n        staleFamilies,\n      );\n    }\n    if (sibling !== null) {\n      scheduleFibersWithFamiliesRecursively(\n        sibling,\n        updatedFamilies,\n        staleFamilies,\n      );\n    }\n  }\n}\n\nexport const findHostInstancesForRefresh: FindHostInstancesForRefresh = (\n  root: FiberRoot,\n  families: Array<Family>,\n): Set<Instance> => {\n  if (__DEV__) {\n    const hostInstances = new Set();\n    const types = new Set(families.map(family => family.current));\n    findHostInstancesForMatchingFibersRecursively(\n      root.current,\n      types,\n      hostInstances,\n    );\n    return hostInstances;\n  } else {\n    throw new Error(\n      'Did not expect findHostInstancesForRefresh to be called in production.',\n    );\n  }\n};\n\nfunction findHostInstancesForMatchingFibersRecursively(\n  fiber: Fiber,\n  types: Set<any>,\n  hostInstances: Set<Instance>,\n) {\n  if (__DEV__) {\n    const {child, sibling, tag, type} = fiber;\n\n    let candidateType = null;\n    switch (tag) {\n      case FunctionComponent:\n      case SimpleMemoComponent:\n      case ClassComponent:\n        candidateType = type;\n        break;\n      case ForwardRef:\n        candidateType = type.render;\n        break;\n      default:\n        break;\n    }\n\n    let didMatch = false;\n    if (candidateType !== null) {\n      if (types.has(candidateType)) {\n        didMatch = true;\n      }\n    }\n\n    if (didMatch) {\n      // We have a match. This only drills down to the closest host components.\n      // There's no need to search deeper because for the purpose of giving\n      // visual feedback, \"flashing\" outermost parent rectangles is sufficient.\n      findHostInstancesForFiberShallowly(fiber, hostInstances);\n    } else {\n      // If there's no match, maybe there will be one further down in the child tree.\n      if (child !== null) {\n        findHostInstancesForMatchingFibersRecursively(\n          child,\n          types,\n          hostInstances,\n        );\n      }\n    }\n\n    if (sibling !== null) {\n      findHostInstancesForMatchingFibersRecursively(\n        sibling,\n        types,\n        hostInstances,\n      );\n    }\n  }\n}\n\nfunction findHostInstancesForFiberShallowly(\n  fiber: Fiber,\n  hostInstances: Set<Instance>,\n): void {\n  if (__DEV__) {\n    const foundHostInstances = findChildHostInstancesForFiberShallowly(\n      fiber,\n      hostInstances,\n    );\n    if (foundHostInstances) {\n      return;\n    }\n    // If we didn't find any host children, fallback to closest host parent.\n    let node = fiber;\n    while (true) {\n      switch (node.tag) {\n        case HostComponent:\n          hostInstances.add(node.stateNode);\n          return;\n        case HostPortal:\n          hostInstances.add(node.stateNode.containerInfo);\n          return;\n        case HostRoot:\n          hostInstances.add(node.stateNode.containerInfo);\n          return;\n      }\n      if (node.return === null) {\n        throw new Error('Expected to reach root first.');\n      }\n      node = node.return;\n    }\n  }\n}\n\nfunction findChildHostInstancesForFiberShallowly(\n  fiber: Fiber,\n  hostInstances: Set<Instance>,\n): boolean {\n  if (__DEV__) {\n    let node: Fiber = fiber;\n    let foundHostInstances = false;\n    while (true) {\n      if (node.tag === HostComponent) {\n        // We got a match.\n        foundHostInstances = true;\n        hostInstances.add(node.stateNode);\n        // There may still be more, so keep searching.\n      } else if (node.child !== null) {\n        node.child.return = node;\n        node = node.child;\n        continue;\n      }\n      if (node === fiber) {\n        return foundHostInstances;\n      }\n      while (node.sibling === null) {\n        if (node.return === null || node.return === fiber) {\n          return foundHostInstances;\n        }\n        node = node.return;\n      }\n      node.sibling.return = node.return;\n      node = node.sibling;\n    }\n  }\n  return false;\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {ReactElement} from 'shared/ReactElementType';\nimport type {ReactFragment, ReactPortal, ReactScope} from 'shared/ReactTypes';\nimport type {Fiber} from './ReactInternalTypes';\nimport type {RootTag} from './ReactRootTags';\nimport type {WorkTag} from './ReactWorkTags';\nimport type {TypeOfMode} from './ReactTypeOfMode';\nimport type {Lanes} from './ReactFiberLane.old';\nimport type {SuspenseInstance, Props} from './ReactFiberHostConfig';\nimport type {OffscreenProps} from './ReactFiberOffscreenComponent';\n\nimport invariant from 'shared/invariant';\nimport {\n  createRootStrictEffectsByDefault,\n  enableCache,\n  enableStrictEffects,\n  enableProfilerTimer,\n  enableScopeAPI,\n  enableSyncDefaultUpdates,\n  allowConcurrentByDefault,\n} from 'shared/ReactFeatureFlags';\nimport {\n  supportsPersistence,\n  getOffscreenContainerType,\n} from './ReactFiberHostConfig';\nimport {NoFlags, Placement, StaticMask} from './ReactFiberFlags';\nimport {ConcurrentRoot} from './ReactRootTags';\nimport {\n  IndeterminateComponent,\n  ClassComponent,\n  HostRoot,\n  HostComponent,\n  HostText,\n  HostPortal,\n  ForwardRef,\n  Fragment,\n  Mode,\n  ContextProvider,\n  ContextConsumer,\n  Profiler,\n  SuspenseComponent,\n  SuspenseListComponent,\n  DehydratedFragment,\n  FunctionComponent,\n  MemoComponent,\n  SimpleMemoComponent,\n  LazyComponent,\n  ScopeComponent,\n  OffscreenComponent,\n  LegacyHiddenComponent,\n  CacheComponent,\n} from './ReactWorkTags';\nimport getComponentNameFromFiber from 'react-reconciler/src/getComponentNameFromFiber';\n\nimport {isDevToolsPresent} from './ReactFiberDevToolsHook.old';\nimport {\n  resolveClassForHotReloading,\n  resolveFunctionForHotReloading,\n  resolveForwardRefForHotReloading,\n} from './ReactFiberHotReloading.old';\nimport {NoLanes} from './ReactFiberLane.old';\nimport {\n  NoMode,\n  ConcurrentMode,\n  DebugTracingMode,\n  ProfileMode,\n  StrictLegacyMode,\n  StrictEffectsMode,\n  ConcurrentUpdatesByDefaultMode,\n} from './ReactTypeOfMode';\nimport {\n  REACT_FORWARD_REF_TYPE,\n  REACT_FRAGMENT_TYPE,\n  REACT_DEBUG_TRACING_MODE_TYPE,\n  REACT_STRICT_MODE_TYPE,\n  REACT_PROFILER_TYPE,\n  REACT_PROVIDER_TYPE,\n  REACT_CONTEXT_TYPE,\n  REACT_SUSPENSE_TYPE,\n  REACT_SUSPENSE_LIST_TYPE,\n  REACT_MEMO_TYPE,\n  REACT_LAZY_TYPE,\n  REACT_SCOPE_TYPE,\n  REACT_OFFSCREEN_TYPE,\n  REACT_LEGACY_HIDDEN_TYPE,\n  REACT_CACHE_TYPE,\n} from 'shared/ReactSymbols';\n\nexport type {Fiber};\n\nlet hasBadMapPolyfill;\n\nif (__DEV__) {\n  hasBadMapPolyfill = false;\n  try {\n    const nonExtensibleObject = Object.preventExtensions({});\n    /* eslint-disable no-new */\n    new Map([[nonExtensibleObject, null]]);\n    new Set([nonExtensibleObject]);\n    /* eslint-enable no-new */\n  } catch (e) {\n    // TODO: Consider warning about bad polyfills\n    hasBadMapPolyfill = true;\n  }\n}\n\nfunction FiberNode(\n  tag: WorkTag,\n  pendingProps: mixed,\n  key: null | string,\n  mode: TypeOfMode,\n) {\n  // Instance\n  this.tag = tag;\n  this.key = key;\n  this.elementType = null;\n  this.type = null;\n  this.stateNode = null;\n\n  // Fiber\n  this.return = null;\n  this.child = null;\n  this.sibling = null;\n  this.index = 0;\n\n  this.ref = null;\n\n  this.pendingProps = pendingProps;\n  this.memoizedProps = null;\n  this.updateQueue = null;\n  this.memoizedState = null;\n  this.dependencies = null;\n\n  this.mode = mode;\n\n  // Effects\n  this.flags = NoFlags;\n  this.subtreeFlags = NoFlags;\n  this.deletions = null;\n\n  this.lanes = NoLanes;\n  this.childLanes = NoLanes;\n\n  this.alternate = null;\n\n  if (enableProfilerTimer) {\n    // Note: The following is done to avoid a v8 performance cliff.\n    //\n    // Initializing the fields below to smis and later updating them with\n    // double values will cause Fibers to end up having separate shapes.\n    // This behavior/bug has something to do with Object.preventExtension().\n    // Fortunately this only impacts DEV builds.\n    // Unfortunately it makes React unusably slow for some applications.\n    // To work around this, initialize the fields below with doubles.\n    //\n    // Learn more about this here:\n    // https://github.com/facebook/react/issues/14365\n    // https://bugs.chromium.org/p/v8/issues/detail?id=8538\n    this.actualDuration = Number.NaN;\n    this.actualStartTime = Number.NaN;\n    this.selfBaseDuration = Number.NaN;\n    this.treeBaseDuration = Number.NaN;\n\n    // It's okay to replace the initial doubles with smis after initialization.\n    // This won't trigger the performance cliff mentioned above,\n    // and it simplifies other profiler code (including DevTools).\n    this.actualDuration = 0;\n    this.actualStartTime = -1;\n    this.selfBaseDuration = 0;\n    this.treeBaseDuration = 0;\n  }\n\n  if (__DEV__) {\n    // This isn't directly used but is handy for debugging internals:\n\n    this._debugSource = null;\n    this._debugOwner = null;\n    this._debugNeedsRemount = false;\n    this._debugHookTypes = null;\n    if (!hasBadMapPolyfill && typeof Object.preventExtensions === 'function') {\n      Object.preventExtensions(this);\n    }\n  }\n}\n\n// This is a constructor function, rather than a POJO constructor, still\n// please ensure we do the following:\n// 1) Nobody should add any instance methods on this. Instance methods can be\n//    more difficult to predict when they get optimized and they are almost\n//    never inlined properly in static compilers.\n// 2) Nobody should rely on `instanceof Fiber` for type testing. We should\n//    always know when it is a fiber.\n// 3) We might want to experiment with using numeric keys since they are easier\n//    to optimize in a non-JIT environment.\n// 4) We can easily go from a constructor to a createFiber object literal if that\n//    is faster.\n// 5) It should be easy to port this to a C struct and keep a C implementation\n//    compatible.\nconst createFiber = function(\n  tag: WorkTag,\n  pendingProps: mixed,\n  key: null | string,\n  mode: TypeOfMode,\n): Fiber {\n  // $FlowFixMe: the shapes are exact here but Flow doesn't like constructors\n  return new FiberNode(tag, pendingProps, key, mode);\n};\n\nfunction shouldConstruct(Component: Function) {\n  const prototype = Component.prototype;\n  return !!(prototype && prototype.isReactComponent);\n}\n\nexport function isSimpleFunctionComponent(type: any) {\n  return (\n    typeof type === 'function' &&\n    !shouldConstruct(type) &&\n    type.defaultProps === undefined\n  );\n}\n\nexport function resolveLazyComponentTag(Component: Function): WorkTag {\n  if (typeof Component === 'function') {\n    return shouldConstruct(Component) ? ClassComponent : FunctionComponent;\n  } else if (Component !== undefined && Component !== null) {\n    const $$typeof = Component.$$typeof;\n    if ($$typeof === REACT_FORWARD_REF_TYPE) {\n      return ForwardRef;\n    }\n    if ($$typeof === REACT_MEMO_TYPE) {\n      return MemoComponent;\n    }\n  }\n  return IndeterminateComponent;\n}\n\n// This is used to create an alternate fiber to do work on.\nexport function createWorkInProgress(current: Fiber, pendingProps: any): Fiber {\n  let workInProgress = current.alternate;\n  if (workInProgress === null) {\n    // We use a double buffering pooling technique because we know that we'll\n    // only ever need at most two versions of a tree. We pool the \"other\" unused\n    // node that we're free to reuse. This is lazily created to avoid allocating\n    // extra objects for things that are never updated. It also allow us to\n    // reclaim the extra memory if needed.\n    workInProgress = createFiber(\n      current.tag,\n      pendingProps,\n      current.key,\n      current.mode,\n    );\n    workInProgress.elementType = current.elementType;\n    workInProgress.type = current.type;\n    workInProgress.stateNode = current.stateNode;\n\n    if (__DEV__) {\n      // DEV-only fields\n\n      workInProgress._debugSource = current._debugSource;\n      workInProgress._debugOwner = current._debugOwner;\n      workInProgress._debugHookTypes = current._debugHookTypes;\n    }\n\n    workInProgress.alternate = current;\n    current.alternate = workInProgress;\n  } else {\n    workInProgress.pendingProps = pendingProps;\n    // Needed because Blocks store data on type.\n    workInProgress.type = current.type;\n\n    // We already have an alternate.\n    // Reset the effect tag.\n    workInProgress.flags = NoFlags;\n\n    // The effects are no longer valid.\n    workInProgress.subtreeFlags = NoFlags;\n    workInProgress.deletions = null;\n\n    if (enableProfilerTimer) {\n      // We intentionally reset, rather than copy, actualDuration & actualStartTime.\n      // This prevents time from endlessly accumulating in new commits.\n      // This has the downside of resetting values for different priority renders,\n      // But works for yielding (the common case) and should support resuming.\n      workInProgress.actualDuration = 0;\n      workInProgress.actualStartTime = -1;\n    }\n  }\n\n  // Reset all effects except static ones.\n  // Static effects are not specific to a render.\n  workInProgress.flags = current.flags & StaticMask;\n  workInProgress.childLanes = current.childLanes;\n  workInProgress.lanes = current.lanes;\n\n  workInProgress.child = current.child;\n  workInProgress.memoizedProps = current.memoizedProps;\n  workInProgress.memoizedState = current.memoizedState;\n  workInProgress.updateQueue = current.updateQueue;\n\n  // Clone the dependencies object. This is mutated during the render phase, so\n  // it cannot be shared with the current fiber.\n  const currentDependencies = current.dependencies;\n  workInProgress.dependencies =\n    currentDependencies === null\n      ? null\n      : {\n          lanes: currentDependencies.lanes,\n          firstContext: currentDependencies.firstContext,\n        };\n\n  // These will be overridden during the parent's reconciliation\n  workInProgress.sibling = current.sibling;\n  workInProgress.index = current.index;\n  workInProgress.ref = current.ref;\n\n  if (enableProfilerTimer) {\n    workInProgress.selfBaseDuration = current.selfBaseDuration;\n    workInProgress.treeBaseDuration = current.treeBaseDuration;\n  }\n\n  if (__DEV__) {\n    workInProgress._debugNeedsRemount = current._debugNeedsRemount;\n    switch (workInProgress.tag) {\n      case IndeterminateComponent:\n      case FunctionComponent:\n      case SimpleMemoComponent:\n        workInProgress.type = resolveFunctionForHotReloading(current.type);\n        break;\n      case ClassComponent:\n        workInProgress.type = resolveClassForHotReloading(current.type);\n        break;\n      case ForwardRef:\n        workInProgress.type = resolveForwardRefForHotReloading(current.type);\n        break;\n      default:\n        break;\n    }\n  }\n\n  return workInProgress;\n}\n\n// Used to reuse a Fiber for a second pass.\nexport function resetWorkInProgress(workInProgress: Fiber, renderLanes: Lanes) {\n  // This resets the Fiber to what createFiber or createWorkInProgress would\n  // have set the values to before during the first pass. Ideally this wouldn't\n  // be necessary but unfortunately many code paths reads from the workInProgress\n  // when they should be reading from current and writing to workInProgress.\n\n  // We assume pendingProps, index, key, ref, return are still untouched to\n  // avoid doing another reconciliation.\n\n  // Reset the effect flags but keep any Placement tags, since that's something\n  // that child fiber is setting, not the reconciliation.\n  workInProgress.flags &= StaticMask | Placement;\n\n  // The effects are no longer valid.\n\n  const current = workInProgress.alternate;\n  if (current === null) {\n    // Reset to createFiber's initial values.\n    workInProgress.childLanes = NoLanes;\n    workInProgress.lanes = renderLanes;\n\n    workInProgress.child = null;\n    workInProgress.subtreeFlags = NoFlags;\n    workInProgress.memoizedProps = null;\n    workInProgress.memoizedState = null;\n    workInProgress.updateQueue = null;\n\n    workInProgress.dependencies = null;\n\n    workInProgress.stateNode = null;\n\n    if (enableProfilerTimer) {\n      // Note: We don't reset the actualTime counts. It's useful to accumulate\n      // actual time across multiple render passes.\n      workInProgress.selfBaseDuration = 0;\n      workInProgress.treeBaseDuration = 0;\n    }\n  } else {\n    // Reset to the cloned values that createWorkInProgress would've.\n    workInProgress.childLanes = current.childLanes;\n    workInProgress.lanes = current.lanes;\n\n    workInProgress.child = current.child;\n    workInProgress.subtreeFlags = NoFlags;\n    workInProgress.deletions = null;\n    workInProgress.memoizedProps = current.memoizedProps;\n    workInProgress.memoizedState = current.memoizedState;\n    workInProgress.updateQueue = current.updateQueue;\n    // Needed because Blocks store data on type.\n    workInProgress.type = current.type;\n\n    // Clone the dependencies object. This is mutated during the render phase, so\n    // it cannot be shared with the current fiber.\n    const currentDependencies = current.dependencies;\n    workInProgress.dependencies =\n      currentDependencies === null\n        ? null\n        : {\n            lanes: currentDependencies.lanes,\n            firstContext: currentDependencies.firstContext,\n          };\n\n    if (enableProfilerTimer) {\n      // Note: We don't reset the actualTime counts. It's useful to accumulate\n      // actual time across multiple render passes.\n      workInProgress.selfBaseDuration = current.selfBaseDuration;\n      workInProgress.treeBaseDuration = current.treeBaseDuration;\n    }\n  }\n\n  return workInProgress;\n}\n\nexport function createHostRootFiber(\n  tag: RootTag,\n  isStrictMode: boolean,\n  concurrentUpdatesByDefaultOverride: null | boolean,\n): Fiber {\n  let mode;\n  if (tag === ConcurrentRoot) {\n    mode = ConcurrentMode;\n    if (isStrictMode === true) {\n      mode |= StrictLegacyMode;\n\n      if (enableStrictEffects) {\n        mode |= StrictEffectsMode;\n      }\n    } else if (enableStrictEffects && createRootStrictEffectsByDefault) {\n      mode |= StrictLegacyMode | StrictEffectsMode;\n    }\n    if (\n      // We only use this flag for our repo tests to check both behaviors.\n      // TODO: Flip this flag and rename it something like \"forceConcurrentByDefaultForTesting\"\n      !enableSyncDefaultUpdates ||\n      // Only for internal experiments.\n      (allowConcurrentByDefault && concurrentUpdatesByDefaultOverride)\n    ) {\n      mode |= ConcurrentUpdatesByDefaultMode;\n    }\n  } else {\n    mode = NoMode;\n  }\n\n  if (enableProfilerTimer && isDevToolsPresent) {\n    // Always collect profile timings when DevTools are present.\n    // This enables DevTools to start capturing timing at any point–\n    // Without some nodes in the tree having empty base times.\n    mode |= ProfileMode;\n  }\n\n  return createFiber(HostRoot, null, null, mode);\n}\n\nexport function createFiberFromTypeAndProps(\n  type: any, // React$ElementType\n  key: null | string,\n  pendingProps: any,\n  owner: null | Fiber,\n  mode: TypeOfMode,\n  lanes: Lanes,\n): Fiber {\n  let fiberTag = IndeterminateComponent;\n  // The resolved type is set if we know what the final type will be. I.e. it's not lazy.\n  let resolvedType = type;\n  if (typeof type === 'function') {\n    if (shouldConstruct(type)) {\n      fiberTag = ClassComponent;\n      if (__DEV__) {\n        resolvedType = resolveClassForHotReloading(resolvedType);\n      }\n    } else {\n      if (__DEV__) {\n        resolvedType = resolveFunctionForHotReloading(resolvedType);\n      }\n    }\n  } else if (typeof type === 'string') {\n    fiberTag = HostComponent;\n  } else {\n    getTag: switch (type) {\n      case REACT_FRAGMENT_TYPE:\n        return createFiberFromFragment(pendingProps.children, mode, lanes, key);\n      case REACT_DEBUG_TRACING_MODE_TYPE:\n        fiberTag = Mode;\n        mode |= DebugTracingMode;\n        break;\n      case REACT_STRICT_MODE_TYPE:\n        fiberTag = Mode;\n        mode |= StrictLegacyMode;\n        if (enableStrictEffects && (mode & ConcurrentMode) !== NoMode) {\n          // Strict effects should never run on legacy roots\n          mode |= StrictEffectsMode;\n        }\n        break;\n      case REACT_PROFILER_TYPE:\n        return createFiberFromProfiler(pendingProps, mode, lanes, key);\n      case REACT_SUSPENSE_TYPE:\n        return createFiberFromSuspense(pendingProps, mode, lanes, key);\n      case REACT_SUSPENSE_LIST_TYPE:\n        return createFiberFromSuspenseList(pendingProps, mode, lanes, key);\n      case REACT_OFFSCREEN_TYPE:\n        return createFiberFromOffscreen(pendingProps, mode, lanes, key);\n      case REACT_LEGACY_HIDDEN_TYPE:\n        return createFiberFromLegacyHidden(pendingProps, mode, lanes, key);\n      case REACT_SCOPE_TYPE:\n        if (enableScopeAPI) {\n          return createFiberFromScope(type, pendingProps, mode, lanes, key);\n        }\n      // eslint-disable-next-line no-fallthrough\n      case REACT_CACHE_TYPE:\n        if (enableCache) {\n          return createFiberFromCache(pendingProps, mode, lanes, key);\n        }\n      // eslint-disable-next-line no-fallthrough\n      default: {\n        if (typeof type === 'object' && type !== null) {\n          switch (type.$$typeof) {\n            case REACT_PROVIDER_TYPE:\n              fiberTag = ContextProvider;\n              break getTag;\n            case REACT_CONTEXT_TYPE:\n              // This is a consumer\n              fiberTag = ContextConsumer;\n              break getTag;\n            case REACT_FORWARD_REF_TYPE:\n              fiberTag = ForwardRef;\n              if (__DEV__) {\n                resolvedType = resolveForwardRefForHotReloading(resolvedType);\n              }\n              break getTag;\n            case REACT_MEMO_TYPE:\n              fiberTag = MemoComponent;\n              break getTag;\n            case REACT_LAZY_TYPE:\n              fiberTag = LazyComponent;\n              resolvedType = null;\n              break getTag;\n          }\n        }\n        let info = '';\n        if (__DEV__) {\n          if (\n            type === undefined ||\n            (typeof type === 'object' &&\n              type !== null &&\n              Object.keys(type).length === 0)\n          ) {\n            info +=\n              ' You likely forgot to export your component from the file ' +\n              \"it's defined in, or you might have mixed up default and \" +\n              'named imports.';\n          }\n          const ownerName = owner ? getComponentNameFromFiber(owner) : null;\n          if (ownerName) {\n            info += '\\n\\nCheck the render method of `' + ownerName + '`.';\n          }\n        }\n        invariant(\n          false,\n          'Element type is invalid: expected a string (for built-in ' +\n            'components) or a class/function (for composite components) ' +\n            'but got: %s.%s',\n          type == null ? type : typeof type,\n          info,\n        );\n      }\n    }\n  }\n\n  const fiber = createFiber(fiberTag, pendingProps, key, mode);\n  fiber.elementType = type;\n  fiber.type = resolvedType;\n  fiber.lanes = lanes;\n\n  if (__DEV__) {\n    fiber._debugOwner = owner;\n  }\n\n  return fiber;\n}\n\nexport function createOffscreenHostContainerFiber(\n  props: Props,\n  fiberMode: TypeOfMode,\n  lanes: Lanes,\n  key: null | string,\n): Fiber {\n  if (supportsPersistence) {\n    const type = getOffscreenContainerType();\n    const fiber = createFiber(HostComponent, props, key, fiberMode);\n    fiber.elementType = type;\n    fiber.type = type;\n    fiber.lanes = lanes;\n    return fiber;\n  } else {\n    // Only implemented in persistent mode\n    invariant(false, 'Not implemented.');\n  }\n}\n\nexport function createFiberFromElement(\n  element: ReactElement,\n  mode: TypeOfMode,\n  lanes: Lanes,\n): Fiber {\n  let owner = null;\n  if (__DEV__) {\n    owner = element._owner;\n  }\n  const type = element.type;\n  const key = element.key;\n  const pendingProps = element.props;\n  const fiber = createFiberFromTypeAndProps(\n    type,\n    key,\n    pendingProps,\n    owner,\n    mode,\n    lanes,\n  );\n  if (__DEV__) {\n    fiber._debugSource = element._source;\n    fiber._debugOwner = element._owner;\n  }\n  return fiber;\n}\n\nexport function createFiberFromFragment(\n  elements: ReactFragment,\n  mode: TypeOfMode,\n  lanes: Lanes,\n  key: null | string,\n): Fiber {\n  const fiber = createFiber(Fragment, elements, key, mode);\n  fiber.lanes = lanes;\n  return fiber;\n}\n\nfunction createFiberFromScope(\n  scope: ReactScope,\n  pendingProps: any,\n  mode: TypeOfMode,\n  lanes: Lanes,\n  key: null | string,\n) {\n  const fiber = createFiber(ScopeComponent, pendingProps, key, mode);\n  fiber.type = scope;\n  fiber.elementType = scope;\n  fiber.lanes = lanes;\n  return fiber;\n}\n\nfunction createFiberFromProfiler(\n  pendingProps: any,\n  mode: TypeOfMode,\n  lanes: Lanes,\n  key: null | string,\n): Fiber {\n  if (__DEV__) {\n    if (typeof pendingProps.id !== 'string') {\n      console.error(\n        'Profiler must specify an \"id\" of type `string` as a prop. Received the type `%s` instead.',\n        typeof pendingProps.id,\n      );\n    }\n  }\n\n  const fiber = createFiber(Profiler, pendingProps, key, mode | ProfileMode);\n  fiber.elementType = REACT_PROFILER_TYPE;\n  fiber.lanes = lanes;\n\n  if (enableProfilerTimer) {\n    fiber.stateNode = {\n      effectDuration: 0,\n      passiveEffectDuration: 0,\n    };\n  }\n\n  return fiber;\n}\n\nexport function createFiberFromSuspense(\n  pendingProps: any,\n  mode: TypeOfMode,\n  lanes: Lanes,\n  key: null | string,\n) {\n  const fiber = createFiber(SuspenseComponent, pendingProps, key, mode);\n  fiber.elementType = REACT_SUSPENSE_TYPE;\n  fiber.lanes = lanes;\n  return fiber;\n}\n\nexport function createFiberFromSuspenseList(\n  pendingProps: any,\n  mode: TypeOfMode,\n  lanes: Lanes,\n  key: null | string,\n) {\n  const fiber = createFiber(SuspenseListComponent, pendingProps, key, mode);\n  fiber.elementType = REACT_SUSPENSE_LIST_TYPE;\n  fiber.lanes = lanes;\n  return fiber;\n}\n\nexport function createFiberFromOffscreen(\n  pendingProps: OffscreenProps,\n  mode: TypeOfMode,\n  lanes: Lanes,\n  key: null | string,\n) {\n  const fiber = createFiber(OffscreenComponent, pendingProps, key, mode);\n  fiber.elementType = REACT_OFFSCREEN_TYPE;\n  fiber.lanes = lanes;\n  return fiber;\n}\n\nexport function createFiberFromLegacyHidden(\n  pendingProps: OffscreenProps,\n  mode: TypeOfMode,\n  lanes: Lanes,\n  key: null | string,\n) {\n  const fiber = createFiber(LegacyHiddenComponent, pendingProps, key, mode);\n  fiber.elementType = REACT_LEGACY_HIDDEN_TYPE;\n  fiber.lanes = lanes;\n  return fiber;\n}\n\nexport function createFiberFromCache(\n  pendingProps: any,\n  mode: TypeOfMode,\n  lanes: Lanes,\n  key: null | string,\n) {\n  const fiber = createFiber(CacheComponent, pendingProps, key, mode);\n  fiber.elementType = REACT_CACHE_TYPE;\n  fiber.lanes = lanes;\n  return fiber;\n}\n\nexport function createFiberFromText(\n  content: string,\n  mode: TypeOfMode,\n  lanes: Lanes,\n): Fiber {\n  const fiber = createFiber(HostText, content, null, mode);\n  fiber.lanes = lanes;\n  return fiber;\n}\n\nexport function createFiberFromHostInstanceForDeletion(): Fiber {\n  const fiber = createFiber(HostComponent, null, null, NoMode);\n  fiber.elementType = 'DELETED';\n  return fiber;\n}\n\nexport function createFiberFromDehydratedFragment(\n  dehydratedNode: SuspenseInstance,\n): Fiber {\n  const fiber = createFiber(DehydratedFragment, null, null, NoMode);\n  fiber.stateNode = dehydratedNode;\n  return fiber;\n}\n\nexport function createFiberFromPortal(\n  portal: ReactPortal,\n  mode: TypeOfMode,\n  lanes: Lanes,\n): Fiber {\n  const pendingProps = portal.children !== null ? portal.children : [];\n  const fiber = createFiber(HostPortal, pendingProps, portal.key, mode);\n  fiber.lanes = lanes;\n  fiber.stateNode = {\n    containerInfo: portal.containerInfo,\n    pendingChildren: null, // Used by persistent updates\n    implementation: portal.implementation,\n  };\n  return fiber;\n}\n\n// Used for stashing WIP properties to replay failed work in DEV.\nexport function assignFiberPropertiesInDEV(\n  target: Fiber | null,\n  source: Fiber,\n): Fiber {\n  if (target === null) {\n    // This Fiber's initial properties will always be overwritten.\n    // We only use a Fiber to ensure the same hidden class so DEV isn't slow.\n    target = createFiber(IndeterminateComponent, null, null, NoMode);\n  }\n\n  // This is intentionally written as a list of all properties.\n  // We tried to use Object.assign() instead but this is called in\n  // the hottest path, and Object.assign() was too slow:\n  // https://github.com/facebook/react/issues/12502\n  // This code is DEV-only so size is not a concern.\n\n  target.tag = source.tag;\n  target.key = source.key;\n  target.elementType = source.elementType;\n  target.type = source.type;\n  target.stateNode = source.stateNode;\n  target.return = source.return;\n  target.child = source.child;\n  target.sibling = source.sibling;\n  target.index = source.index;\n  target.ref = source.ref;\n  target.pendingProps = source.pendingProps;\n  target.memoizedProps = source.memoizedProps;\n  target.updateQueue = source.updateQueue;\n  target.memoizedState = source.memoizedState;\n  target.dependencies = source.dependencies;\n  target.mode = source.mode;\n  target.flags = source.flags;\n  target.subtreeFlags = source.subtreeFlags;\n  target.deletions = source.deletions;\n  target.lanes = source.lanes;\n  target.childLanes = source.childLanes;\n  target.alternate = source.alternate;\n  if (enableProfilerTimer) {\n    target.actualDuration = source.actualDuration;\n    target.actualStartTime = source.actualStartTime;\n    target.selfBaseDuration = source.selfBaseDuration;\n    target.treeBaseDuration = source.treeBaseDuration;\n  }\n\n  target._debugSource = source._debugSource;\n  target._debugOwner = source._debugOwner;\n  target._debugNeedsRemount = source._debugNeedsRemount;\n  target._debugHookTypes = source._debugHookTypes;\n  return target;\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {FiberRoot, SuspenseHydrationCallbacks} from './ReactInternalTypes';\nimport type {RootTag} from './ReactRootTags';\n\nimport {noTimeout, supportsHydration} from './ReactFiberHostConfig';\nimport {createHostRootFiber} from './ReactFiber.old';\nimport {\n  NoLane,\n  NoLanes,\n  NoTimestamp,\n  TotalLanes,\n  createLaneMap,\n} from './ReactFiberLane.old';\nimport {\n  enableSuspenseCallback,\n  enableCache,\n  enableProfilerCommitHooks,\n  enableProfilerTimer,\n  enableUpdaterTracking,\n} from 'shared/ReactFeatureFlags';\nimport {initializeUpdateQueue} from './ReactUpdateQueue.old';\nimport {LegacyRoot, ConcurrentRoot} from './ReactRootTags';\n\nfunction FiberRootNode(containerInfo, tag, hydrate) {\n  this.tag = tag;\n  this.containerInfo = containerInfo;\n  this.pendingChildren = null;\n  this.current = null;\n  this.pingCache = null;\n  this.finishedWork = null;\n  this.timeoutHandle = noTimeout;\n  this.context = null;\n  this.pendingContext = null;\n  this.hydrate = hydrate;\n  this.callbackNode = null;\n  this.callbackPriority = NoLane;\n  this.eventTimes = createLaneMap(NoLanes);\n  this.expirationTimes = createLaneMap(NoTimestamp);\n\n  this.pendingLanes = NoLanes;\n  this.suspendedLanes = NoLanes;\n  this.pingedLanes = NoLanes;\n  this.expiredLanes = NoLanes;\n  this.mutableReadLanes = NoLanes;\n  this.finishedLanes = NoLanes;\n\n  this.entangledLanes = NoLanes;\n  this.entanglements = createLaneMap(NoLanes);\n\n  if (enableCache) {\n    this.pooledCache = null;\n    this.pooledCacheLanes = NoLanes;\n  }\n\n  if (supportsHydration) {\n    this.mutableSourceEagerHydrationData = null;\n  }\n\n  if (enableSuspenseCallback) {\n    this.hydrationCallbacks = null;\n  }\n\n  if (enableProfilerTimer && enableProfilerCommitHooks) {\n    this.effectDuration = 0;\n    this.passiveEffectDuration = 0;\n  }\n\n  if (enableUpdaterTracking) {\n    this.memoizedUpdaters = new Set();\n    const pendingUpdatersLaneMap = (this.pendingUpdatersLaneMap = []);\n    for (let i = 0; i < TotalLanes; i++) {\n      pendingUpdatersLaneMap.push(new Set());\n    }\n  }\n\n  if (__DEV__) {\n    switch (tag) {\n      case ConcurrentRoot:\n        this._debugRootType = 'createRoot()';\n        break;\n      case LegacyRoot:\n        this._debugRootType = 'createLegacyRoot()';\n        break;\n    }\n  }\n}\n\nexport function createFiberRoot(\n  containerInfo: any,\n  tag: RootTag,\n  hydrate: boolean,\n  hydrationCallbacks: null | SuspenseHydrationCallbacks,\n  isStrictMode: boolean,\n  concurrentUpdatesByDefaultOverride: null | boolean,\n): FiberRoot {\n  const root: FiberRoot = (new FiberRootNode(containerInfo, tag, hydrate): any);\n  if (enableSuspenseCallback) {\n    root.hydrationCallbacks = hydrationCallbacks;\n  }\n\n  // Cyclic construction. This cheats the type system right now because\n  // stateNode is any.\n  const uninitializedFiber = createHostRootFiber(\n    tag,\n    isStrictMode,\n    concurrentUpdatesByDefaultOverride,\n  );\n  root.current = uninitializedFiber;\n  uninitializedFiber.stateNode = root;\n\n  if (enableCache) {\n    const initialCache = new Map();\n    root.pooledCache = initialCache;\n    const initialState = {\n      element: null,\n      cache: initialCache,\n    };\n    uninitializedFiber.memoizedState = initialState;\n  } else {\n    const initialState = {\n      element: null,\n    };\n    uninitializedFiber.memoizedState = initialState;\n  }\n\n  initializeUpdateQueue(uninitializedFiber);\n\n  return root;\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Fiber, SuspenseHydrationCallbacks} from './ReactInternalTypes';\nimport type {FiberRoot} from './ReactInternalTypes';\nimport type {RootTag} from './ReactRootTags';\nimport type {\n  Instance,\n  TextInstance,\n  Container,\n  PublicInstance,\n} from './ReactFiberHostConfig';\nimport type {RendererInspectionConfig} from './ReactFiberHostConfig';\nimport type {ReactNodeList} from 'shared/ReactTypes';\nimport type {Lane} from './ReactFiberLane.old';\nimport type {SuspenseState} from './ReactFiberSuspenseComponent.old';\n\nimport {\n  findCurrentHostFiber,\n  findCurrentHostFiberWithNoPortals,\n} from './ReactFiberTreeReflection';\nimport {get as getInstance} from 'shared/ReactInstanceMap';\nimport {\n  HostComponent,\n  ClassComponent,\n  HostRoot,\n  SuspenseComponent,\n} from './ReactWorkTags';\nimport getComponentNameFromFiber from 'react-reconciler/src/getComponentNameFromFiber';\nimport invariant from 'shared/invariant';\nimport isArray from 'shared/isArray';\nimport {\n  enableSchedulingProfiler,\n  consoleManagedByDevToolsDuringStrictMode,\n} from 'shared/ReactFeatureFlags';\nimport ReactSharedInternals from 'shared/ReactSharedInternals';\nimport {getPublicInstance} from './ReactFiberHostConfig';\nimport {\n  findCurrentUnmaskedContext,\n  processChildContext,\n  emptyContextObject,\n  isContextProvider as isLegacyContextProvider,\n} from './ReactFiberContext.old';\nimport {createFiberRoot} from './ReactFiberRoot.old';\nimport {injectInternals, onScheduleRoot} from './ReactFiberDevToolsHook.old';\nimport {\n  requestEventTime,\n  requestUpdateLane,\n  scheduleUpdateOnFiber,\n  flushRoot,\n  batchedUpdates,\n  flushSync,\n  flushControlled,\n  deferredUpdates,\n  discreteUpdates,\n  flushSyncWithoutWarningIfAlreadyRendering,\n  flushPassiveEffects,\n} from './ReactFiberWorkLoop.old';\nimport {\n  createUpdate,\n  enqueueUpdate,\n  entangleTransitions,\n} from './ReactUpdateQueue.old';\nimport {\n  isRendering as ReactCurrentFiberIsRendering,\n  current as ReactCurrentFiberCurrent,\n  resetCurrentFiber as resetCurrentDebugFiberInDEV,\n  setCurrentFiber as setCurrentDebugFiberInDEV,\n} from './ReactCurrentFiber';\nimport {StrictLegacyMode} from './ReactTypeOfMode';\nimport {\n  SyncLane,\n  SelectiveHydrationLane,\n  NoTimestamp,\n  getHighestPriorityPendingLanes,\n  higherPriorityLane,\n} from './ReactFiberLane.old';\nimport {\n  getCurrentUpdatePriority,\n  runWithPriority,\n} from './ReactEventPriorities.old';\nimport {\n  scheduleRefresh,\n  scheduleRoot,\n  setRefreshHandler,\n  findHostInstancesForRefresh,\n} from './ReactFiberHotReloading.old';\nimport {markRenderScheduled} from './SchedulingProfiler';\nimport ReactVersion from 'shared/ReactVersion';\nexport {registerMutableSourceForHydration} from './ReactMutableSource.old';\nexport {createPortal} from './ReactPortal';\nexport {\n  createComponentSelector,\n  createHasPseudoClassSelector,\n  createRoleSelector,\n  createTestNameSelector,\n  createTextSelector,\n  getFindAllNodesFailureDescription,\n  findAllNodes,\n  findBoundingRects,\n  focusWithin,\n  observeVisibleRects,\n} from './ReactTestSelectors';\n\nimport * as Scheduler from './Scheduler';\nimport {setSuppressWarning} from 'shared/consoleWithStackDev';\nimport {disableLogs, reenableLogs} from 'shared/ConsolePatchingDev';\n\ntype OpaqueRoot = FiberRoot;\n\n// 0 is PROD, 1 is DEV.\n// Might add PROFILE later.\ntype BundleType = 0 | 1;\n\ntype DevToolsConfig = {|\n  bundleType: BundleType,\n  version: string,\n  rendererPackageName: string,\n  // Note: this actually *does* depend on Fiber internal fields.\n  // Used by \"inspect clicked DOM element\" in React DevTools.\n  findFiberByHostInstance?: (instance: Instance | TextInstance) => Fiber | null,\n  rendererConfig?: RendererInspectionConfig,\n|};\n\nlet didWarnAboutNestedUpdates;\nlet didWarnAboutFindNodeInStrictMode;\n\nif (__DEV__) {\n  didWarnAboutNestedUpdates = false;\n  didWarnAboutFindNodeInStrictMode = {};\n}\n\nfunction getContextForSubtree(\n  parentComponent: ?React$Component<any, any>,\n): Object {\n  if (!parentComponent) {\n    return emptyContextObject;\n  }\n\n  const fiber = getInstance(parentComponent);\n  const parentContext = findCurrentUnmaskedContext(fiber);\n\n  if (fiber.tag === ClassComponent) {\n    const Component = fiber.type;\n    if (isLegacyContextProvider(Component)) {\n      return processChildContext(fiber, Component, parentContext);\n    }\n  }\n\n  return parentContext;\n}\n\nfunction findHostInstance(component: Object): PublicInstance | null {\n  const fiber = getInstance(component);\n  if (fiber === undefined) {\n    if (typeof component.render === 'function') {\n      invariant(false, 'Unable to find node on an unmounted component.');\n    } else {\n      invariant(\n        false,\n        'Argument appears to not be a ReactComponent. Keys: %s',\n        Object.keys(component),\n      );\n    }\n  }\n  const hostFiber = findCurrentHostFiber(fiber);\n  if (hostFiber === null) {\n    return null;\n  }\n  return hostFiber.stateNode;\n}\n\nfunction findHostInstanceWithWarning(\n  component: Object,\n  methodName: string,\n): PublicInstance | null {\n  if (__DEV__) {\n    const fiber = getInstance(component);\n    if (fiber === undefined) {\n      if (typeof component.render === 'function') {\n        invariant(false, 'Unable to find node on an unmounted component.');\n      } else {\n        invariant(\n          false,\n          'Argument appears to not be a ReactComponent. Keys: %s',\n          Object.keys(component),\n        );\n      }\n    }\n    const hostFiber = findCurrentHostFiber(fiber);\n    if (hostFiber === null) {\n      return null;\n    }\n    if (hostFiber.mode & StrictLegacyMode) {\n      const componentName = getComponentNameFromFiber(fiber) || 'Component';\n      if (!didWarnAboutFindNodeInStrictMode[componentName]) {\n        didWarnAboutFindNodeInStrictMode[componentName] = true;\n\n        const previousFiber = ReactCurrentFiberCurrent;\n        try {\n          setCurrentDebugFiberInDEV(hostFiber);\n          if (fiber.mode & StrictLegacyMode) {\n            console.error(\n              '%s is deprecated in StrictMode. ' +\n                '%s was passed an instance of %s which is inside StrictMode. ' +\n                'Instead, add a ref directly to the element you want to reference. ' +\n                'Learn more about using refs safely here: ' +\n                'https://reactjs.org/link/strict-mode-find-node',\n              methodName,\n              methodName,\n              componentName,\n            );\n          } else {\n            console.error(\n              '%s is deprecated in StrictMode. ' +\n                '%s was passed an instance of %s which renders StrictMode children. ' +\n                'Instead, add a ref directly to the element you want to reference. ' +\n                'Learn more about using refs safely here: ' +\n                'https://reactjs.org/link/strict-mode-find-node',\n              methodName,\n              methodName,\n              componentName,\n            );\n          }\n        } finally {\n          // Ideally this should reset to previous but this shouldn't be called in\n          // render and there's another warning for that anyway.\n          if (previousFiber) {\n            setCurrentDebugFiberInDEV(previousFiber);\n          } else {\n            resetCurrentDebugFiberInDEV();\n          }\n        }\n      }\n    }\n    return hostFiber.stateNode;\n  }\n  return findHostInstance(component);\n}\n\nexport function createContainer(\n  containerInfo: Container,\n  tag: RootTag,\n  hydrate: boolean,\n  hydrationCallbacks: null | SuspenseHydrationCallbacks,\n  isStrictMode: boolean,\n  concurrentUpdatesByDefaultOverride: null | boolean,\n): OpaqueRoot {\n  return createFiberRoot(\n    containerInfo,\n    tag,\n    hydrate,\n    hydrationCallbacks,\n    isStrictMode,\n    concurrentUpdatesByDefaultOverride,\n  );\n}\n\nexport function updateContainer(\n  element: ReactNodeList,\n  container: OpaqueRoot,\n  parentComponent: ?React$Component<any, any>,\n  callback: ?Function,\n): Lane {\n  if (__DEV__) {\n    onScheduleRoot(container, element);\n  }\n  const current = container.current;\n  const eventTime = requestEventTime();\n  const lane = requestUpdateLane(current);\n\n  if (enableSchedulingProfiler) {\n    markRenderScheduled(lane);\n  }\n\n  const context = getContextForSubtree(parentComponent);\n  if (container.context === null) {\n    container.context = context;\n  } else {\n    container.pendingContext = context;\n  }\n\n  if (__DEV__) {\n    if (\n      ReactCurrentFiberIsRendering &&\n      ReactCurrentFiberCurrent !== null &&\n      !didWarnAboutNestedUpdates\n    ) {\n      didWarnAboutNestedUpdates = true;\n      console.error(\n        'Render methods should be a pure function of props and state; ' +\n          'triggering nested component updates from render is not allowed. ' +\n          'If necessary, trigger nested updates in componentDidUpdate.\\n\\n' +\n          'Check the render method of %s.',\n        getComponentNameFromFiber(ReactCurrentFiberCurrent) || 'Unknown',\n      );\n    }\n  }\n\n  const update = createUpdate(eventTime, lane);\n  // Caution: React DevTools currently depends on this property\n  // being called \"element\".\n  update.payload = {element};\n\n  callback = callback === undefined ? null : callback;\n  if (callback !== null) {\n    if (__DEV__) {\n      if (typeof callback !== 'function') {\n        console.error(\n          'render(...): Expected the last optional `callback` argument to be a ' +\n            'function. Instead received: %s.',\n          callback,\n        );\n      }\n    }\n    update.callback = callback;\n  }\n\n  enqueueUpdate(current, update, lane);\n  const root = scheduleUpdateOnFiber(current, lane, eventTime);\n  if (root !== null) {\n    entangleTransitions(root, current, lane);\n  }\n\n  return lane;\n}\n\nexport {\n  batchedUpdates,\n  deferredUpdates,\n  discreteUpdates,\n  flushControlled,\n  flushSync,\n  flushSyncWithoutWarningIfAlreadyRendering,\n  flushPassiveEffects,\n};\n\nexport function getPublicRootInstance(\n  container: OpaqueRoot,\n): React$Component<any, any> | PublicInstance | null {\n  const containerFiber = container.current;\n  if (!containerFiber.child) {\n    return null;\n  }\n  switch (containerFiber.child.tag) {\n    case HostComponent:\n      return getPublicInstance(containerFiber.child.stateNode);\n    default:\n      return containerFiber.child.stateNode;\n  }\n}\n\nexport function attemptSynchronousHydration(fiber: Fiber): void {\n  switch (fiber.tag) {\n    case HostRoot:\n      const root: FiberRoot = fiber.stateNode;\n      if (root.hydrate) {\n        // Flush the first scheduled \"update\".\n        const lanes = getHighestPriorityPendingLanes(root);\n        flushRoot(root, lanes);\n      }\n      break;\n    case SuspenseComponent:\n      const eventTime = requestEventTime();\n      flushSync(() => scheduleUpdateOnFiber(fiber, SyncLane, eventTime));\n      // If we're still blocked after this, we need to increase\n      // the priority of any promises resolving within this\n      // boundary so that they next attempt also has higher pri.\n      const retryLane = SyncLane;\n      markRetryLaneIfNotHydrated(fiber, retryLane);\n      break;\n  }\n}\n\nfunction markRetryLaneImpl(fiber: Fiber, retryLane: Lane) {\n  const suspenseState: null | SuspenseState = fiber.memoizedState;\n  if (suspenseState !== null && suspenseState.dehydrated !== null) {\n    suspenseState.retryLane = higherPriorityLane(\n      suspenseState.retryLane,\n      retryLane,\n    );\n  }\n}\n\n// Increases the priority of thenables when they resolve within this boundary.\nfunction markRetryLaneIfNotHydrated(fiber: Fiber, retryLane: Lane) {\n  markRetryLaneImpl(fiber, retryLane);\n  const alternate = fiber.alternate;\n  if (alternate) {\n    markRetryLaneImpl(alternate, retryLane);\n  }\n}\n\nexport function attemptDiscreteHydration(fiber: Fiber): void {\n  if (fiber.tag !== SuspenseComponent) {\n    // We ignore HostRoots here because we can't increase\n    // their priority and they should not suspend on I/O,\n    // since you have to wrap anything that might suspend in\n    // Suspense.\n    return;\n  }\n  const eventTime = requestEventTime();\n  const lane = SyncLane;\n  scheduleUpdateOnFiber(fiber, lane, eventTime);\n  markRetryLaneIfNotHydrated(fiber, lane);\n}\n\nexport function attemptContinuousHydration(fiber: Fiber): void {\n  if (fiber.tag !== SuspenseComponent) {\n    // We ignore HostRoots here because we can't increase\n    // their priority and they should not suspend on I/O,\n    // since you have to wrap anything that might suspend in\n    // Suspense.\n    return;\n  }\n  const eventTime = requestEventTime();\n  const lane = SelectiveHydrationLane;\n  scheduleUpdateOnFiber(fiber, lane, eventTime);\n  markRetryLaneIfNotHydrated(fiber, lane);\n}\n\nexport function attemptHydrationAtCurrentPriority(fiber: Fiber): void {\n  if (fiber.tag !== SuspenseComponent) {\n    // We ignore HostRoots here because we can't increase\n    // their priority other than synchronously flush it.\n    return;\n  }\n  const eventTime = requestEventTime();\n  const lane = requestUpdateLane(fiber);\n  scheduleUpdateOnFiber(fiber, lane, eventTime);\n  markRetryLaneIfNotHydrated(fiber, lane);\n}\n\nexport {getCurrentUpdatePriority, runWithPriority};\n\nexport {findHostInstance};\n\nexport {findHostInstanceWithWarning};\n\nexport function findHostInstanceWithNoPortals(\n  fiber: Fiber,\n): PublicInstance | null {\n  const hostFiber = findCurrentHostFiberWithNoPortals(fiber);\n  if (hostFiber === null) {\n    return null;\n  }\n  return hostFiber.stateNode;\n}\n\nlet shouldErrorImpl = fiber => null;\n\nexport function shouldError(fiber: Fiber): ?boolean {\n  return shouldErrorImpl(fiber);\n}\n\nlet shouldSuspendImpl = fiber => false;\n\nexport function shouldSuspend(fiber: Fiber): boolean {\n  return shouldSuspendImpl(fiber);\n}\n\nlet isStrictMode = false;\n\nlet overrideHookState = null;\nlet overrideHookStateDeletePath = null;\nlet overrideHookStateRenamePath = null;\nlet overrideProps = null;\nlet overridePropsDeletePath = null;\nlet overridePropsRenamePath = null;\nlet scheduleUpdate = null;\nlet setErrorHandler = null;\nlet setSuspenseHandler = null;\n\nif (__DEV__) {\n  const copyWithDeleteImpl = (\n    obj: Object | Array<any>,\n    path: Array<string | number>,\n    index: number,\n  ) => {\n    const key = path[index];\n    const updated = isArray(obj) ? obj.slice() : {...obj};\n    if (index + 1 === path.length) {\n      if (isArray(updated)) {\n        updated.splice(((key: any): number), 1);\n      } else {\n        delete updated[key];\n      }\n      return updated;\n    }\n    // $FlowFixMe number or string is fine here\n    updated[key] = copyWithDeleteImpl(obj[key], path, index + 1);\n    return updated;\n  };\n\n  const copyWithDelete = (\n    obj: Object | Array<any>,\n    path: Array<string | number>,\n  ): Object | Array<any> => {\n    return copyWithDeleteImpl(obj, path, 0);\n  };\n\n  const copyWithRenameImpl = (\n    obj: Object | Array<any>,\n    oldPath: Array<string | number>,\n    newPath: Array<string | number>,\n    index: number,\n  ) => {\n    const oldKey = oldPath[index];\n    const updated = isArray(obj) ? obj.slice() : {...obj};\n    if (index + 1 === oldPath.length) {\n      const newKey = newPath[index];\n      // $FlowFixMe number or string is fine here\n      updated[newKey] = updated[oldKey];\n      if (isArray(updated)) {\n        updated.splice(((oldKey: any): number), 1);\n      } else {\n        delete updated[oldKey];\n      }\n    } else {\n      // $FlowFixMe number or string is fine here\n      updated[oldKey] = copyWithRenameImpl(\n        // $FlowFixMe number or string is fine here\n        obj[oldKey],\n        oldPath,\n        newPath,\n        index + 1,\n      );\n    }\n    return updated;\n  };\n\n  const copyWithRename = (\n    obj: Object | Array<any>,\n    oldPath: Array<string | number>,\n    newPath: Array<string | number>,\n  ): Object | Array<any> => {\n    if (oldPath.length !== newPath.length) {\n      console.warn('copyWithRename() expects paths of the same length');\n      return;\n    } else {\n      for (let i = 0; i < newPath.length - 1; i++) {\n        if (oldPath[i] !== newPath[i]) {\n          console.warn(\n            'copyWithRename() expects paths to be the same except for the deepest key',\n          );\n          return;\n        }\n      }\n    }\n    return copyWithRenameImpl(obj, oldPath, newPath, 0);\n  };\n\n  const copyWithSetImpl = (\n    obj: Object | Array<any>,\n    path: Array<string | number>,\n    index: number,\n    value: any,\n  ) => {\n    if (index >= path.length) {\n      return value;\n    }\n    const key = path[index];\n    const updated = isArray(obj) ? obj.slice() : {...obj};\n    // $FlowFixMe number or string is fine here\n    updated[key] = copyWithSetImpl(obj[key], path, index + 1, value);\n    return updated;\n  };\n\n  const copyWithSet = (\n    obj: Object | Array<any>,\n    path: Array<string | number>,\n    value: any,\n  ): Object | Array<any> => {\n    return copyWithSetImpl(obj, path, 0, value);\n  };\n\n  const findHook = (fiber: Fiber, id: number) => {\n    // For now, the \"id\" of stateful hooks is just the stateful hook index.\n    // This may change in the future with e.g. nested hooks.\n    let currentHook = fiber.memoizedState;\n    while (currentHook !== null && id > 0) {\n      currentHook = currentHook.next;\n      id--;\n    }\n    return currentHook;\n  };\n\n  // Support DevTools editable values for useState and useReducer.\n  overrideHookState = (\n    fiber: Fiber,\n    id: number,\n    path: Array<string | number>,\n    value: any,\n  ) => {\n    const hook = findHook(fiber, id);\n    if (hook !== null) {\n      const newState = copyWithSet(hook.memoizedState, path, value);\n      hook.memoizedState = newState;\n      hook.baseState = newState;\n\n      // We aren't actually adding an update to the queue,\n      // because there is no update we can add for useReducer hooks that won't trigger an error.\n      // (There's no appropriate action type for DevTools overrides.)\n      // As a result though, React will see the scheduled update as a noop and bailout.\n      // Shallow cloning props works as a workaround for now to bypass the bailout check.\n      fiber.memoizedProps = {...fiber.memoizedProps};\n\n      scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);\n    }\n  };\n  overrideHookStateDeletePath = (\n    fiber: Fiber,\n    id: number,\n    path: Array<string | number>,\n  ) => {\n    const hook = findHook(fiber, id);\n    if (hook !== null) {\n      const newState = copyWithDelete(hook.memoizedState, path);\n      hook.memoizedState = newState;\n      hook.baseState = newState;\n\n      // We aren't actually adding an update to the queue,\n      // because there is no update we can add for useReducer hooks that won't trigger an error.\n      // (There's no appropriate action type for DevTools overrides.)\n      // As a result though, React will see the scheduled update as a noop and bailout.\n      // Shallow cloning props works as a workaround for now to bypass the bailout check.\n      fiber.memoizedProps = {...fiber.memoizedProps};\n\n      scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);\n    }\n  };\n  overrideHookStateRenamePath = (\n    fiber: Fiber,\n    id: number,\n    oldPath: Array<string | number>,\n    newPath: Array<string | number>,\n  ) => {\n    const hook = findHook(fiber, id);\n    if (hook !== null) {\n      const newState = copyWithRename(hook.memoizedState, oldPath, newPath);\n      hook.memoizedState = newState;\n      hook.baseState = newState;\n\n      // We aren't actually adding an update to the queue,\n      // because there is no update we can add for useReducer hooks that won't trigger an error.\n      // (There's no appropriate action type for DevTools overrides.)\n      // As a result though, React will see the scheduled update as a noop and bailout.\n      // Shallow cloning props works as a workaround for now to bypass the bailout check.\n      fiber.memoizedProps = {...fiber.memoizedProps};\n\n      scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);\n    }\n  };\n\n  // Support DevTools props for function components, forwardRef, memo, host components, etc.\n  overrideProps = (fiber: Fiber, path: Array<string | number>, value: any) => {\n    fiber.pendingProps = copyWithSet(fiber.memoizedProps, path, value);\n    if (fiber.alternate) {\n      fiber.alternate.pendingProps = fiber.pendingProps;\n    }\n    scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);\n  };\n  overridePropsDeletePath = (fiber: Fiber, path: Array<string | number>) => {\n    fiber.pendingProps = copyWithDelete(fiber.memoizedProps, path);\n    if (fiber.alternate) {\n      fiber.alternate.pendingProps = fiber.pendingProps;\n    }\n    scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);\n  };\n  overridePropsRenamePath = (\n    fiber: Fiber,\n    oldPath: Array<string | number>,\n    newPath: Array<string | number>,\n  ) => {\n    fiber.pendingProps = copyWithRename(fiber.memoizedProps, oldPath, newPath);\n    if (fiber.alternate) {\n      fiber.alternate.pendingProps = fiber.pendingProps;\n    }\n    scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);\n  };\n\n  scheduleUpdate = (fiber: Fiber) => {\n    scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);\n  };\n\n  setErrorHandler = (newShouldErrorImpl: Fiber => ?boolean) => {\n    shouldErrorImpl = newShouldErrorImpl;\n  };\n\n  setSuspenseHandler = (newShouldSuspendImpl: Fiber => boolean) => {\n    shouldSuspendImpl = newShouldSuspendImpl;\n  };\n}\n\nfunction findHostInstanceByFiber(fiber: Fiber): Instance | TextInstance | null {\n  const hostFiber = findCurrentHostFiber(fiber);\n  if (hostFiber === null) {\n    return null;\n  }\n  return hostFiber.stateNode;\n}\n\nfunction emptyFindFiberByHostInstance(\n  instance: Instance | TextInstance,\n): Fiber | null {\n  return null;\n}\n\nfunction getCurrentFiberForDevTools() {\n  return ReactCurrentFiberCurrent;\n}\n\nexport function getIsStrictModeForDevtools() {\n  return isStrictMode;\n}\n\nexport function setIsStrictModeForDevtools(newIsStrictMode: boolean) {\n  isStrictMode = newIsStrictMode;\n\n  if (consoleManagedByDevToolsDuringStrictMode) {\n    // We're in a test because Scheduler.unstable_yieldValue only exists\n    // in SchedulerMock. To reduce the noise in strict mode tests,\n    // suppress warnings and disable scheduler yielding during the double render\n    if (typeof Scheduler.unstable_yieldValue === 'function') {\n      Scheduler.unstable_setDisableYieldValue(newIsStrictMode);\n      setSuppressWarning(newIsStrictMode);\n    }\n  } else {\n    if (newIsStrictMode) {\n      disableLogs();\n    } else {\n      reenableLogs();\n    }\n  }\n}\n\nexport function injectIntoDevTools(devToolsConfig: DevToolsConfig): boolean {\n  const {findFiberByHostInstance} = devToolsConfig;\n  const {ReactCurrentDispatcher} = ReactSharedInternals;\n\n  return injectInternals({\n    bundleType: devToolsConfig.bundleType,\n    version: devToolsConfig.version,\n    rendererPackageName: devToolsConfig.rendererPackageName,\n    rendererConfig: devToolsConfig.rendererConfig,\n    overrideHookState,\n    overrideHookStateDeletePath,\n    overrideHookStateRenamePath,\n    overrideProps,\n    overridePropsDeletePath,\n    overridePropsRenamePath,\n    setErrorHandler,\n    setSuspenseHandler,\n    scheduleUpdate,\n    currentDispatcherRef: ReactCurrentDispatcher,\n    findHostInstanceByFiber,\n    findFiberByHostInstance:\n      findFiberByHostInstance || emptyFindFiberByHostInstance,\n    // React Refresh\n    findHostInstancesForRefresh: __DEV__ ? findHostInstancesForRefresh : null,\n    scheduleRefresh: __DEV__ ? scheduleRefresh : null,\n    scheduleRoot: __DEV__ ? scheduleRoot : null,\n    setRefreshHandler: __DEV__ ? setRefreshHandler : null,\n    // Enables DevTools to append owner stacks to error messages in DEV mode.\n    getCurrentFiber: __DEV__ ? getCurrentFiberForDevTools : null,\n    getIsStrictMode: __DEV__ ? getIsStrictModeForDevtools : null,\n    // Enables DevTools to detect reconciler version rather than renderer version\n    // which may not match for third party renderers.\n    reconcilerVersion: ReactVersion,\n  });\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Fiber} from 'react-reconciler/src/ReactInternalTypes';\nimport type {FiberRoot} from 'react-reconciler/src/ReactInternalTypes';\nimport type {Instance, TextInstance} from './ReactTestHostConfig';\n\nimport * as React from 'react';\nimport * as Scheduler from 'scheduler/unstable_mock';\nimport {\n  getPublicRootInstance,\n  createContainer,\n  updateContainer,\n  flushSync,\n  injectIntoDevTools,\n  batchedUpdates,\n} from 'react-reconciler/src/ReactFiberReconciler';\nimport {findCurrentFiberUsingSlowPath} from 'react-reconciler/src/ReactFiberTreeReflection';\nimport {\n  Fragment,\n  FunctionComponent,\n  ClassComponent,\n  HostComponent,\n  HostPortal,\n  HostText,\n  HostRoot,\n  ContextConsumer,\n  ContextProvider,\n  Mode,\n  ForwardRef,\n  Profiler,\n  MemoComponent,\n  SimpleMemoComponent,\n  IncompleteClassComponent,\n  ScopeComponent,\n} from 'react-reconciler/src/ReactWorkTags';\nimport invariant from 'shared/invariant';\nimport isArray from 'shared/isArray';\nimport getComponentNameFromType from 'shared/getComponentNameFromType';\nimport ReactVersion from 'shared/ReactVersion';\n\nimport {getPublicInstance} from './ReactTestHostConfig';\nimport {ConcurrentRoot, LegacyRoot} from 'react-reconciler/src/ReactRootTags';\nimport {allowConcurrentByDefault} from 'shared/ReactFeatureFlags';\n\nconst act = React.unstable_act;\n\n// TODO: Remove from public bundle\n\ntype TestRendererOptions = {\n  createNodeMock: (element: React$Element<any>) => any,\n  unstable_isConcurrent: boolean,\n  unstable_strictMode: boolean,\n  unstable_concurrentUpdatesByDefault: boolean,\n  ...\n};\n\ntype ReactTestRendererJSON = {|\n  type: string,\n  props: {[propName: string]: any, ...},\n  children: null | Array<ReactTestRendererNode>,\n  $$typeof?: Symbol, // Optional because we add it with defineProperty().\n|};\ntype ReactTestRendererNode = ReactTestRendererJSON | string;\n\ntype FindOptions = $Shape<{\n  // performs a \"greedy\" search: if a matching node is found, will continue\n  // to search within the matching node's children. (default: true)\n  deep: boolean,\n  ...\n}>;\n\nexport type Predicate = (node: ReactTestInstance) => ?boolean;\n\nconst defaultTestOptions = {\n  createNodeMock: function() {\n    return null;\n  },\n};\n\nfunction toJSON(inst: Instance | TextInstance): ReactTestRendererNode | null {\n  if (inst.isHidden) {\n    // Omit timed out children from output entirely. This seems like the least\n    // surprising behavior. We could perhaps add a separate API that includes\n    // them, if it turns out people need it.\n    return null;\n  }\n  switch (inst.tag) {\n    case 'TEXT':\n      return inst.text;\n    case 'INSTANCE': {\n      /* eslint-disable no-unused-vars */\n      // We don't include the `children` prop in JSON.\n      // Instead, we will include the actual rendered children.\n      const {children, ...props} = inst.props;\n      /* eslint-enable */\n      let renderedChildren = null;\n      if (inst.children && inst.children.length) {\n        for (let i = 0; i < inst.children.length; i++) {\n          const renderedChild = toJSON(inst.children[i]);\n          if (renderedChild !== null) {\n            if (renderedChildren === null) {\n              renderedChildren = [renderedChild];\n            } else {\n              renderedChildren.push(renderedChild);\n            }\n          }\n        }\n      }\n      const json: ReactTestRendererJSON = {\n        type: inst.type,\n        props: props,\n        children: renderedChildren,\n      };\n      Object.defineProperty(json, '$$typeof', {\n        value: Symbol.for('react.test.json'),\n      });\n      return json;\n    }\n    default:\n      throw new Error(`Unexpected node type in toJSON: ${inst.tag}`);\n  }\n}\n\nfunction childrenToTree(node) {\n  if (!node) {\n    return null;\n  }\n  const children = nodeAndSiblingsArray(node);\n  if (children.length === 0) {\n    return null;\n  } else if (children.length === 1) {\n    return toTree(children[0]);\n  }\n  return flatten(children.map(toTree));\n}\n\nfunction nodeAndSiblingsArray(nodeWithSibling) {\n  const array = [];\n  let node = nodeWithSibling;\n  while (node != null) {\n    array.push(node);\n    node = node.sibling;\n  }\n  return array;\n}\n\nfunction flatten(arr) {\n  const result = [];\n  const stack = [{i: 0, array: arr}];\n  while (stack.length) {\n    const n = stack.pop();\n    while (n.i < n.array.length) {\n      const el = n.array[n.i];\n      n.i += 1;\n      if (isArray(el)) {\n        stack.push(n);\n        stack.push({i: 0, array: el});\n        break;\n      }\n      result.push(el);\n    }\n  }\n  return result;\n}\n\nfunction toTree(node: ?Fiber) {\n  if (node == null) {\n    return null;\n  }\n  switch (node.tag) {\n    case HostRoot:\n      return childrenToTree(node.child);\n    case HostPortal:\n      return childrenToTree(node.child);\n    case ClassComponent:\n      return {\n        nodeType: 'component',\n        type: node.type,\n        props: {...node.memoizedProps},\n        instance: node.stateNode,\n        rendered: childrenToTree(node.child),\n      };\n    case FunctionComponent:\n    case SimpleMemoComponent:\n      return {\n        nodeType: 'component',\n        type: node.type,\n        props: {...node.memoizedProps},\n        instance: null,\n        rendered: childrenToTree(node.child),\n      };\n    case HostComponent: {\n      return {\n        nodeType: 'host',\n        type: node.type,\n        props: {...node.memoizedProps},\n        instance: null, // TODO: use createNodeMock here somehow?\n        rendered: flatten(nodeAndSiblingsArray(node.child).map(toTree)),\n      };\n    }\n    case HostText:\n      return node.stateNode.text;\n    case Fragment:\n    case ContextProvider:\n    case ContextConsumer:\n    case Mode:\n    case Profiler:\n    case ForwardRef:\n    case MemoComponent:\n    case IncompleteClassComponent:\n    case ScopeComponent:\n      return childrenToTree(node.child);\n    default:\n      invariant(\n        false,\n        'toTree() does not yet know how to handle nodes with tag=%s',\n        node.tag,\n      );\n  }\n}\n\nconst validWrapperTypes = new Set([\n  FunctionComponent,\n  ClassComponent,\n  HostComponent,\n  ForwardRef,\n  MemoComponent,\n  SimpleMemoComponent,\n  // Normally skipped, but used when there's more than one root child.\n  HostRoot,\n]);\n\nfunction getChildren(parent: Fiber) {\n  const children = [];\n  const startingNode = parent;\n  let node: Fiber = startingNode;\n  if (node.child === null) {\n    return children;\n  }\n  node.child.return = node;\n  node = node.child;\n  outer: while (true) {\n    let descend = false;\n    if (validWrapperTypes.has(node.tag)) {\n      children.push(wrapFiber(node));\n    } else if (node.tag === HostText) {\n      children.push('' + node.memoizedProps);\n    } else {\n      descend = true;\n    }\n    if (descend && node.child !== null) {\n      node.child.return = node;\n      node = node.child;\n      continue;\n    }\n    while (node.sibling === null) {\n      if (node.return === startingNode) {\n        break outer;\n      }\n      node = (node.return: any);\n    }\n    (node.sibling: any).return = node.return;\n    node = (node.sibling: any);\n  }\n  return children;\n}\n\nclass ReactTestInstance {\n  _fiber: Fiber;\n\n  _currentFiber(): Fiber {\n    // Throws if this component has been unmounted.\n    const fiber = findCurrentFiberUsingSlowPath(this._fiber);\n    invariant(\n      fiber !== null,\n      \"Can't read from currently-mounting component. This error is likely \" +\n        'caused by a bug in React. Please file an issue.',\n    );\n    return fiber;\n  }\n\n  constructor(fiber: Fiber) {\n    invariant(\n      validWrapperTypes.has(fiber.tag),\n      'Unexpected object passed to ReactTestInstance constructor (tag: %s). ' +\n        'This is probably a bug in React.',\n      fiber.tag,\n    );\n    this._fiber = fiber;\n  }\n\n  get instance() {\n    if (this._fiber.tag === HostComponent) {\n      return getPublicInstance(this._fiber.stateNode);\n    } else {\n      return this._fiber.stateNode;\n    }\n  }\n\n  get type() {\n    return this._fiber.type;\n  }\n\n  get props(): Object {\n    return this._currentFiber().memoizedProps;\n  }\n\n  get parent(): ?ReactTestInstance {\n    let parent = this._fiber.return;\n    while (parent !== null) {\n      if (validWrapperTypes.has(parent.tag)) {\n        if (parent.tag === HostRoot) {\n          // Special case: we only \"materialize\" instances for roots\n          // if they have more than a single child. So we'll check that now.\n          if (getChildren(parent).length < 2) {\n            return null;\n          }\n        }\n        return wrapFiber(parent);\n      }\n      parent = parent.return;\n    }\n    return null;\n  }\n\n  get children(): Array<ReactTestInstance | string> {\n    return getChildren(this._currentFiber());\n  }\n\n  // Custom search functions\n  find(predicate: Predicate): ReactTestInstance {\n    return expectOne(\n      this.findAll(predicate, {deep: false}),\n      `matching custom predicate: ${predicate.toString()}`,\n    );\n  }\n\n  findByType(type: any): ReactTestInstance {\n    return expectOne(\n      this.findAllByType(type, {deep: false}),\n      `with node type: \"${getComponentNameFromType(type) || 'Unknown'}\"`,\n    );\n  }\n\n  findByProps(props: Object): ReactTestInstance {\n    return expectOne(\n      this.findAllByProps(props, {deep: false}),\n      `with props: ${JSON.stringify(props)}`,\n    );\n  }\n\n  findAll(\n    predicate: Predicate,\n    options: ?FindOptions = null,\n  ): Array<ReactTestInstance> {\n    return findAll(this, predicate, options);\n  }\n\n  findAllByType(\n    type: any,\n    options: ?FindOptions = null,\n  ): Array<ReactTestInstance> {\n    return findAll(this, node => node.type === type, options);\n  }\n\n  findAllByProps(\n    props: Object,\n    options: ?FindOptions = null,\n  ): Array<ReactTestInstance> {\n    return findAll(\n      this,\n      node => node.props && propsMatch(node.props, props),\n      options,\n    );\n  }\n}\n\nfunction findAll(\n  root: ReactTestInstance,\n  predicate: Predicate,\n  options: ?FindOptions,\n): Array<ReactTestInstance> {\n  const deep = options ? options.deep : true;\n  const results = [];\n\n  if (predicate(root)) {\n    results.push(root);\n    if (!deep) {\n      return results;\n    }\n  }\n\n  root.children.forEach(child => {\n    if (typeof child === 'string') {\n      return;\n    }\n    results.push(...findAll(child, predicate, options));\n  });\n\n  return results;\n}\n\nfunction expectOne(\n  all: Array<ReactTestInstance>,\n  message: string,\n): ReactTestInstance {\n  if (all.length === 1) {\n    return all[0];\n  }\n\n  const prefix =\n    all.length === 0\n      ? 'No instances found '\n      : `Expected 1 but found ${all.length} instances `;\n\n  throw new Error(prefix + message);\n}\n\nfunction propsMatch(props: Object, filter: Object): boolean {\n  for (const key in filter) {\n    if (props[key] !== filter[key]) {\n      return false;\n    }\n  }\n  return true;\n}\n\nfunction create(element: React$Element<any>, options: TestRendererOptions) {\n  let createNodeMock = defaultTestOptions.createNodeMock;\n  let isConcurrent = false;\n  let isStrictMode = false;\n  let concurrentUpdatesByDefault = null;\n  if (typeof options === 'object' && options !== null) {\n    if (typeof options.createNodeMock === 'function') {\n      createNodeMock = options.createNodeMock;\n    }\n    if (options.unstable_isConcurrent === true) {\n      isConcurrent = true;\n    }\n    if (options.unstable_strictMode === true) {\n      isStrictMode = true;\n    }\n    if (allowConcurrentByDefault) {\n      if (options.unstable_concurrentUpdatesByDefault !== undefined) {\n        concurrentUpdatesByDefault =\n          options.unstable_concurrentUpdatesByDefault;\n      }\n    }\n  }\n  let container = {\n    children: [],\n    createNodeMock,\n    tag: 'CONTAINER',\n  };\n  let root: FiberRoot | null = createContainer(\n    container,\n    isConcurrent ? ConcurrentRoot : LegacyRoot,\n    false,\n    null,\n    isStrictMode,\n    concurrentUpdatesByDefault,\n  );\n  invariant(root != null, 'something went wrong');\n  updateContainer(element, root, null, null);\n\n  const entry = {\n    _Scheduler: Scheduler,\n\n    root: undefined, // makes flow happy\n    // we define a 'getter' for 'root' below using 'Object.defineProperty'\n    toJSON(): Array<ReactTestRendererNode> | ReactTestRendererNode | null {\n      if (root == null || root.current == null || container == null) {\n        return null;\n      }\n      if (container.children.length === 0) {\n        return null;\n      }\n      if (container.children.length === 1) {\n        return toJSON(container.children[0]);\n      }\n      if (\n        container.children.length === 2 &&\n        container.children[0].isHidden === true &&\n        container.children[1].isHidden === false\n      ) {\n        // Omit timed out children from output entirely, including the fact that we\n        // temporarily wrap fallback and timed out children in an array.\n        return toJSON(container.children[1]);\n      }\n      let renderedChildren = null;\n      if (container.children && container.children.length) {\n        for (let i = 0; i < container.children.length; i++) {\n          const renderedChild = toJSON(container.children[i]);\n          if (renderedChild !== null) {\n            if (renderedChildren === null) {\n              renderedChildren = [renderedChild];\n            } else {\n              renderedChildren.push(renderedChild);\n            }\n          }\n        }\n      }\n      return renderedChildren;\n    },\n    toTree() {\n      if (root == null || root.current == null) {\n        return null;\n      }\n      return toTree(root.current);\n    },\n    update(newElement: React$Element<any>) {\n      if (root == null || root.current == null) {\n        return;\n      }\n      updateContainer(newElement, root, null, null);\n    },\n    unmount() {\n      if (root == null || root.current == null) {\n        return;\n      }\n      updateContainer(null, root, null, null);\n      container = null;\n      root = null;\n    },\n    getInstance() {\n      if (root == null || root.current == null) {\n        return null;\n      }\n      return getPublicRootInstance(root);\n    },\n\n    unstable_flushSync: flushSync,\n  };\n\n  Object.defineProperty(\n    entry,\n    'root',\n    ({\n      configurable: true,\n      enumerable: true,\n      get: function() {\n        if (root === null) {\n          throw new Error(\"Can't access .root on unmounted test renderer\");\n        }\n        const children = getChildren(root.current);\n        if (children.length === 0) {\n          throw new Error(\"Can't access .root on unmounted test renderer\");\n        } else if (children.length === 1) {\n          // Normally, we skip the root and just give you the child.\n          return children[0];\n        } else {\n          // However, we give you the root if there's more than one root child.\n          // We could make this the behavior for all cases but it would be a breaking change.\n          return wrapFiber(root.current);\n        }\n      },\n    }: Object),\n  );\n\n  return entry;\n}\n\nconst fiberToWrapper = new WeakMap();\nfunction wrapFiber(fiber: Fiber): ReactTestInstance {\n  let wrapper = fiberToWrapper.get(fiber);\n  if (wrapper === undefined && fiber.alternate !== null) {\n    wrapper = fiberToWrapper.get(fiber.alternate);\n  }\n  if (wrapper === undefined) {\n    wrapper = new ReactTestInstance(fiber);\n    fiberToWrapper.set(fiber, wrapper);\n  }\n  return wrapper;\n}\n\n// Enable ReactTestRenderer to be used to test DevTools integration.\ninjectIntoDevTools({\n  findFiberByHostInstance: (() => {\n    throw new Error('TestRenderer does not support findFiberByHostInstance()');\n  }: any),\n  bundleType: __DEV__ ? 1 : 0,\n  version: ReactVersion,\n  rendererPackageName: 'react-test-renderer',\n});\n\nexport {\n  Scheduler as _Scheduler,\n  create,\n  /* eslint-disable-next-line camelcase */\n  batchedUpdates as unstable_batchedUpdates,\n  act,\n};\n"],"names":["ReactSharedInternals","React","warn","format","args","printWarning","error","level","ReactDebugCurrentFrame","stack","getStackAddendum","concat","argsWithFormat","map","item","unshift","Function","prototype","apply","call","console","get","key","_reactInternals","set","value","FunctionComponent","ClassComponent","IndeterminateComponent","HostRoot","HostPortal","HostComponent","HostText","Fragment","Mode","ContextConsumer","ContextProvider","ForwardRef","Profiler","SuspenseComponent","MemoComponent","SimpleMemoComponent","LazyComponent","IncompleteClassComponent","DehydratedFragment","SuspenseListComponent","ScopeComponent","OffscreenComponent","LegacyHiddenComponent","CacheComponent","REACT_ELEMENT_TYPE","REACT_PORTAL_TYPE","REACT_FRAGMENT_TYPE","REACT_STRICT_MODE_TYPE","REACT_PROFILER_TYPE","REACT_PROVIDER_TYPE","REACT_CONTEXT_TYPE","REACT_FORWARD_REF_TYPE","REACT_SUSPENSE_TYPE","REACT_SUSPENSE_LIST_TYPE","REACT_MEMO_TYPE","REACT_LAZY_TYPE","REACT_SCOPE_TYPE","REACT_OPAQUE_ID_TYPE","REACT_DEBUG_TRACING_MODE_TYPE","REACT_OFFSCREEN_TYPE","REACT_LEGACY_HIDDEN_TYPE","REACT_CACHE_TYPE","Symbol","for","symbolFor","MAYBE_ITERATOR_SYMBOL","iterator","FAUX_ITERATOR_SYMBOL","getIteratorFn","maybeIterable","maybeIterator","getWrappedName","outerType","innerType","wrapperName","displayName","functionName","name","getContextName","type","getComponentNameFromType","tag","$$typeof","context","provider","_context","render","outerName","lazyComponent","payload","_payload","init","_init","x","getComponentNameFromFiber","fiber","enableProfilerTimer","__PROFILE__","enableProfilerCommitHooks","enableLazyElements","warnAboutStringRefs","enableNewReconciler","warnOnSubscriptionInsideStartTransition","enableLazyContextPropagation","NoFlags","PerformedWork","Placement","Update","PlacementAndUpdate","ChildDeletion","ContentReset","Callback","DidCapture","Ref","Snapshot","Passive","Hydrating","HydratingAndUpdate","Visibility","LifecycleEffectMask","HostEffectMask","Incomplete","ShouldCapture","ForceUpdateForLegacySuspense","RefStatic","LayoutStatic","PassiveStatic","BeforeMutationMask","enableCreateEventHandleAPI","MutationMask","LayoutMask","PassiveMask","StaticMask","ReactCurrentOwner","getNearestMountedFiber","node","nearestMounted","alternate","nextNode","flags","return","isFiberMounted","isMounted","component","owner","current","ownerFiber","instance","stateNode","_warnedAboutRefsInRender","getInstance","assertIsMounted","findCurrentFiberUsingSlowPath","a","b","parentA","parentB","nextParent","child","sibling","didFindChild","findCurrentHostFiber","parent","currentParent","findCurrentHostFiberImpl","match","isArrayImpl","Array","isArray","scheduleCallback","Scheduler","cancelCallback","shouldYield","requestPaint","now","ImmediatePriority","UserBlockingPriority","NormalPriority","IdlePriority","rendererID","injectedHook","hasLoggedError","isDevToolsPresent","__REACT_DEVTOOLS_GLOBAL_HOOK__","injectInternals","internals","hook","isDisabled","supportsFiber","inject","err","checkDCE","onScheduleRoot","root","children","onScheduleFiberRoot","__DEV__","onCommitRoot","eventPriority","onCommitFiberRoot","didError","schedulerPriority","DiscreteEventPriority","ImmediateSchedulerPriority","ContinuousEventPriority","UserBlockingSchedulerPriority","DefaultEventPriority","NormalSchedulerPriority","IdleEventPriority","IdleSchedulerPriority","undefined","onPostCommitRoot","onPostCommitFiberRoot","onCommitUnmount","onCommitFiberUnmount","NoMode","ConcurrentMode","ProfileMode","DebugTracingMode","StrictLegacyMode","ConcurrentUpdatesByDefaultMode","TotalLanes","NoLanes","NoLane","SyncLane","InputContinuousHydrationLane","InputContinuousLane","DefaultHydrationLane","DefaultLane","TransitionHydrationLane","TransitionLanes","TransitionLane1","TransitionLane2","TransitionLane3","TransitionLane4","TransitionLane5","TransitionLane6","TransitionLane7","TransitionLane8","TransitionLane9","TransitionLane10","TransitionLane11","TransitionLane12","TransitionLane13","TransitionLane14","TransitionLane15","TransitionLane16","RetryLanes","RetryLane1","RetryLane2","RetryLane3","RetryLane4","RetryLane5","SomeRetryLane","SelectiveHydrationLane","NonIdleLanes","IdleHydrationLane","IdleLane","OffscreenLane","NoTimestamp","nextTransitionLane","nextRetryLane","getHighestPriorityLanes","lanes","getHighestPriorityLane","getNextLanes","wipLanes","pendingLanes","nextLanes","suspendedLanes","pingedLanes","nonIdlePendingLanes","nonIdleUnblockedLanes","nonIdlePingedLanes","unblockedLanes","nextLane","wipLane","allowConcurrentByDefault","mode","entangledLanes","entanglements","index","pickArbitraryLaneIndex","lane","getMostRecentEventTime","eventTimes","mostRecentEventTime","eventTime","computeExpirationTime","currentTime","markStarvedLanesAsExpired","expirationTimes","expirationTime","expiredLanes","getLanesToRetrySynchronouslyOnError","everythingButOffscreen","includesNonIdleWork","includesOnlyRetries","includesOnlyTransitions","shouldTimeSlice","SyncDefaultLanes","isTransitionLane","claimNextTransitionLane","claimNextRetryLane","pickArbitraryLane","clz32","laneToIndex","includesSomeLane","isSubsetOfLanes","subset","mergeLanes","removeLanes","intersectLanes","laneToLanes","createLaneMap","initial","laneMap","i","push","markRootUpdated","updateLane","markRootSuspended","markRootPinged","markRootMutableRead","mutableReadLanes","markRootFinished","remainingLanes","noLongerPendingLanes","markRootEntangled","rootEntangledLanes","Math","clz32Fallback","log","LN2","currentUpdatePriority","getCurrentUpdatePriority","setCurrentUpdatePriority","newPriority","higherEventPriority","lowerEventPriority","isHigherEventPriority","lanesToEventPriority","shim","isSuspenseInstancePending","isSuspenseInstanceFallback","hydrateTextInstance","errorHydratingContainer","NO_CONTEXT","UPDATE_SIGNAL","nodeToInstanceMap","WeakMap","Object","freeze","getPublicInstance","inst","createNodeMock","rootContainerInstance","mockNode","props","appendChild","parentInstance","indexOf","splice","insertBefore","beforeChild","beforeIndex","removeChild","clearContainer","container","getRootHostContext","getChildHostContext","parentHostContext","prepareForCommit","containerInfo","resetAfterCommit","createInstance","hostContext","internalInstanceHandle","isHidden","appendInitialChild","prepareUpdate","testElement","oldProps","newProps","shouldSetTextContent","createTextInstance","text","getCurrentEventPriority","scheduleTimeout","setTimeout","cancelTimeout","clearTimeout","noTimeout","commitUpdate","updatePayload","commitTextUpdate","textInstance","oldText","newText","resetTextContent","appendChildToContainer","insertInContainerBefore","removeChildFromContainer","hideInstance","hideTextInstance","unhideInstance","unhideTextInstance","clientId","makeClientIdInDEV","warnOnAccessInDEV","id","toString","valueOf","preparePortalMount","portalInstance","ReactCurrentDispatcher","describeBuiltInComponentFrame","source","ownerFn","ownerName","describeComponentFrame","componentFrameCache","PossiblyWeakMap","Map","BEFORE_SLASH_RE","sourceInfo","path","fileName","replace","test","pathBeforeSlash","folderName","lineNumber","describeClassComponentFrame","ctor","describeFunctionComponentFrame","fn","describeUnknownElementTypeFrameInDEV","hasOwnProperty","loggedTypeFailures","setCurrentlyValidatingElement","element","_owner","_source","setExtraStackFrame","checkPropTypes","typeSpecs","values","location","componentName","has","bind","typeSpecName","Error","ex","message","valueStack","fiberStack","createCursor","defaultValue","pop","cursor","warnedAboutMissingGetChildContext","emptyContextObject","contextStackCursor","didPerformWorkStackCursor","previousContext","getUnmaskedContext","workInProgress","Component","didPushOwnContextIfProvider","isContextProvider","cacheContext","unmaskedContext","maskedContext","__reactInternalMemoizedUnmaskedChildContext","__reactInternalMemoizedMaskedChildContext","getMaskedContext","contextTypes","hasContextChanged","childContextTypes","popContext","popTopLevelContextObject","pushTopLevelContextObject","didChange","processChildContext","parentContext","getChildContext","childContext","contextKey","pushContextProvider","memoizedMergedChildContext","__reactInternalMemoizedMergedChildContext","invalidateContextProvider","mergedContext","findCurrentUnmaskedContext","LegacyRoot","ConcurrentRoot","syncQueue","includesLegacySyncCallbacks","isFlushingSyncQueue","scheduleSyncCallback","callback","scheduleLegacySyncCallback","flushSyncCallbacksOnlyInLegacyMode","flushSyncCallbacks","previousUpdatePriority","isSync","queue","length","slice","ReactCurrentBatchConfig","NoTransition","requestCurrentTransition","transition","is","y","objectIs","shallowEqual","objA","objB","keysA","keys","keysB","describeFiber","_debugOwner","_debugSource","getStackByFiberInDevAndProd","info","isRendering","getCurrentFiberOwnerNameInDevOrNull","getCurrentFiberStackInDev","resetCurrentFiber","getCurrentStack","setCurrentFiber","setIsRendering","rendering","getIsRendering","ReactStrictModeWarnings","recordUnsafeLifecycleWarnings","flushPendingUnsafeLifecycleWarnings","recordLegacyContextWarning","flushLegacyContextWarning","discardPendingWarnings","findStrictRoot","maybeStrictRoot","setToSortedString","array","forEach","sort","join","pendingComponentWillMountWarnings","pendingUNSAFE_ComponentWillMountWarnings","pendingComponentWillReceivePropsWarnings","pendingUNSAFE_ComponentWillReceivePropsWarnings","pendingComponentWillUpdateWarnings","pendingUNSAFE_ComponentWillUpdateWarnings","didWarnAboutUnsafeLifecycles","Set","componentWillMount","__suppressDeprecationWarning","UNSAFE_componentWillMount","componentWillReceiveProps","UNSAFE_componentWillReceiveProps","componentWillUpdate","UNSAFE_componentWillUpdate","componentWillMountUniqueNames","add","UNSAFE_componentWillMountUniqueNames","componentWillReceivePropsUniqueNames","UNSAFE_componentWillReceivePropsUniqueNames","componentWillUpdateUniqueNames","UNSAFE_componentWillUpdateUniqueNames","size","sortedNames","pendingLegacyContextWarning","didWarnAboutLegacyContext","strictRoot","warningsForRoot","fiberArray","firstFiber","uniqueNames","setCurrentDebugFiberInDEV","resetCurrentDebugFiberInDEV","resolveDefaultProps","baseProps","defaultProps","assign","propName","valueCursor","rendererSigil","currentlyRenderingFiber","lastContextDependency","lastFullyObservedContext","isDisallowedContextReadInDEV","resetContextDependencies","enterDisallowedContextReadInDEV","exitDisallowedContextReadInDEV","pushProvider","providerFiber","nextValue","_currentValue2","_currentRenderer2","popProvider","currentValue","scheduleWorkOnParentPath","renderLanes","childLanes","propagateContextChange","propagateContextChange_eager","nextFiber","list","dependencies","dependency","firstContext","update","createUpdate","ForceUpdate","updateQueue","sharedQueue","shared","pending","next","prepareToReadContext","markWorkInProgressReceivedUpdate","readContext","isPrimaryRenderer","contextItem","memoizedValue","interleavedQueues","pushInterleavedQueue","enqueueInterleavedUpdates","lastInterleavedUpdate","interleaved","firstInterleavedUpdate","lastPendingUpdate","firstPendingUpdate","UpdateState","ReplaceState","CaptureUpdate","hasForceUpdate","didWarnUpdateInsideUpdate","currentlyProcessingQueue","initializeUpdateQueue","baseState","memoizedState","firstBaseUpdate","lastBaseUpdate","effects","cloneUpdateQueue","currentQueue","clone","enqueueUpdate","isInterleavedUpdate","entangleTransitions","queueLanes","newQueueLanes","enqueueCapturedUpdate","capturedUpdate","newFirst","newLast","getStateFromUpdate","prevState","nextProps","nextState","partialState","processUpdateQueue","pendingQueue","currentLastBaseUpdate","newState","newLanes","newBaseState","newFirstBaseUpdate","newLastBaseUpdate","updateEventTime","lastInterleaved","markSkippedUpdateLanes","callCallback","resetHasForceUpdateBeforeProcessing","checkHasForceUpdateAfterProcessing","commitUpdateQueue","finishedWork","finishedQueue","effect","fakeInternalInstance","emptyRefsObject","refs","didWarnAboutStateAssignmentForComponent","didWarnAboutUninitializedState","didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate","didWarnAboutLegacyLifecyclesAndDerivedState","didWarnAboutUndefinedDerivedState","warnOnUndefinedDerivedState","warnOnInvalidCallback","didWarnAboutDirectlyAssigningPropsToState","didWarnAboutContextTypeAndContextTypes","didWarnAboutInvalidateContextType","didWarnOnInvalidCallback","callerName","defineProperty","enumerable","applyDerivedStateFromProps","getDerivedStateFromProps","classComponentUpdater","enqueueSetState","requestEventTime","requestUpdateLane","scheduleUpdateOnFiber","enqueueReplaceState","enqueueForceUpdate","checkShouldComponentUpdate","oldState","nextContext","shouldComponentUpdate","shouldUpdate","isPureReactComponent","checkClassInstance","renderPresent","getInitialState","isReactClassApproved","state","getDefaultProps","propTypes","contextType","componentShouldUpdate","componentDidUnmount","componentDidReceiveProps","componentWillRecieveProps","UNSAFE_componentWillRecieveProps","hasMutatedProps","getSnapshotBeforeUpdate","componentDidUpdate","getDerivedStateFromError","adoptClassInstance","updater","setInstance","_reactInternalInstance","constructClassInstance","isLegacyContextConsumer","isValid","addendum","foundWillMountName","foundWillReceivePropsName","foundWillUpdateName","newApiName","callComponentWillMount","callComponentWillReceiveProps","mountClassInstance","componentDidMount","fiberFlags","resumeMountClassInstance","memoizedProps","oldContext","nextLegacyUnmaskedContext","hasNewLifecycles","updateClassInstance","unresolvedOldProps","elementType","unresolvedNewProps","pendingProps","nextUnmaskedContext","didWarnAboutMaps","didWarnAboutGenerators","didWarnAboutStringRefs","ownerHasKeyUseWarning","ownerHasFunctionTypeWarning","warnForMissingKey","returnFiber","_store","validated","coerceRef","mixedRef","ref","_self","stringRef","_stringRef","throwOnInvalidObjectType","newChild","childString","warnOnFunctionType","ChildReconciler","shouldTrackSideEffects","deleteChild","childToDelete","deletions","deleteRemainingChildren","currentFirstChild","mapRemainingChildren","existingChildren","existingChild","useFiber","createWorkInProgress","placeChild","newFiber","lastPlacedIndex","newIndex","oldIndex","placeSingleChild","updateTextNode","textContent","created","createFiberFromText","existing","updateElement","updateFragment","isCompatibleFamilyForHotReloading","createFiberFromElement","updatePortal","portal","implementation","createFiberFromPortal","fragment","createFiberFromFragment","createChild","updateSlot","oldFiber","updateFromMap","newIdx","matchedFiber","warnOnInvalidKey","knownKeys","reconcileChildrenArray","newChildren","resultingFirstChild","previousNewFiber","nextOldFiber","delete","reconcileChildrenIterator","newChildrenIterable","iteratorFn","toStringTag","entries","step","done","reconcileSingleTextNode","reconcileSingleElement","reconcileSinglePortal","reconcileChildFibers","isUnkeyedTopLevelFragment","mountChildFibers","cloneChildFibers","currentChild","resetChildFibers","resetWorkInProgress","contextFiberStackCursor","rootInstanceStackCursor","requiredContext","c","getRootHostContainer","rootInstance","pushHostContainer","nextRootInstance","nextRootContext","popHostContainer","getHostContext","pushHostContext","popHostContext","DefaultSuspenseContext","SubtreeSuspenseContextMask","InvisibleParentSuspenseContext","ForceSuspenseFallback","suspenseStackCursor","hasSuspenseContext","flag","setDefaultShallowSuspenseContext","setShallowSuspenseContext","shallowContext","addSubtreeSuspenseContext","subtreeContext","pushSuspenseContext","newContext","popSuspenseContext","shouldCaptureSuspense","hasInvisibleParent","dehydrated","unstable_avoidThisFallback","findFirstSuspended","row","revealOrder","didSuspend","HasEffect","Layout","isHydrating","enterHydrationState","prepareToHydrateHostInstance","prepareToHydrateHostTextInstance","popHydrationState","getIsHydrating","workInProgressSources","markSourceAsDirty","mutableSource","resetWorkInProgressVersions","_workInProgressVersionSecondary","getWorkInProgressVersion","setWorkInProgressVersion","version","warnAboutMultipleRenderersDEV","_currentSecondaryRenderer","getSuspendedCachePool","didWarnAboutMismatchedHooksForComponent","didWarnAboutUseOpaqueIdentifier","didWarnUncachedGetSnapshot","currentHook","workInProgressHook","didScheduleRenderPhaseUpdate","didScheduleRenderPhaseUpdateDuringThisPass","RE_RENDER_LIMIT","currentHookNameInDev","hookTypesDev","hookTypesUpdateIndexDev","ignorePreviousDependencies","mountHookTypesDev","hookName","updateHookTypesDev","warnOnHookMismatchInDev","checkDepsAreArrayDev","deps","currentHookName","table","secondColumnStart","oldHookName","newHookName","throwInvalidHookError","areHookInputsEqual","nextDeps","prevDeps","renderWithHooks","secondArg","nextRenderLanes","_debugHookTypes","HooksDispatcherOnUpdateInDEV","HooksDispatcherOnMountWithHookTypesInDEV","HooksDispatcherOnMountInDEV","numberOfReRenders","HooksDispatcherOnRerenderInDEV","ContextOnlyDispatcher","didRenderTooFewHooks","StaticMaskEffect","bailoutHooks","PassiveEffect","UpdateEffect","resetHooksAfterThrow","isUpdatingOpaqueValueInRenderPhase","mountWorkInProgressHook","baseQueue","updateWorkInProgressHook","nextCurrentHook","nextWorkInProgressHook","newHook","createFunctionComponentUpdateQueue","lastEffect","basicStateReducer","action","mountReducer","reducer","initialArg","initialState","dispatch","lastRenderedReducer","lastRenderedState","dispatchAction","updateReducer","baseFirst","pendingFirst","first","newBaseQueueFirst","newBaseQueueLast","eagerReducer","eagerState","interleavedLane","rerenderReducer","lastRenderPhaseUpdate","firstRenderPhaseUpdate","readFromUnsubscribedMutableSource","getSnapshot","getVersion","_getVersion","isSafeToReadFromSource","currentRenderVersion","snapshot","useMutableSource","subscribe","getWorkInProgressRoot","dispatcher","useState","currentSnapshot","setSnapshot","stateHook","prevGetSnapshot","prevSource","prevSubscribe","useEffect","maybeNewVersion","maybeNewSnapshot","handleChange","latestGetSnapshot","latestSetSnapshot","unsubscribe","newQueue","mountMutableSource","updateMutableSource","mountSyncExternalStore","nextSnapshot","useSyncExternalStore","updateSyncExternalStore","prevSnapshot","useLayoutEffect","checkIfSnapshotChanged","forceStoreRerender","handleStoreChange","prevValue","mountState","updateState","rerenderState","pushEffect","create","destroy","componentUpdateQueue","firstEffect","mountRef","initialValue","updateRef","mountEffectImpl","hookFlags","HookHasEffect","updateEffectImpl","prevEffect","mountEffect","jest","warnIfNotCurrentlyActingEffectsInDEV","PassiveStaticEffect","HookPassive","updateEffect","mountLayoutEffect","HookLayout","updateLayoutEffect","imperativeHandleEffect","refCallback","refObject","mountImperativeHandle","effectDeps","updateImperativeHandle","mountDebugValue","formatterFn","updateDebugValue","mountCallback","updateCallback","mountMemo","nextCreate","updateMemo","mountDeferredValue","setValue","prevTransition","updateDeferredValue","rerenderDeferredValue","startTransition","setPending","previousPriority","_updatedFibers","updatedFibersCount","clear","mountTransition","isPending","start","updateTransition","rerenderTransition","getIsUpdatingOpaqueValueInRenderPhaseInDEV","warnOnOpaqueIdentifierAccessInDEV","mountOpaqueIdentifier","makeId","updateOpaqueIdentifier","rerenderOpaqueIdentifier","arguments","prevDispatcher","InvalidNestedHooksDispatcherOnUpdateInDEV","currentState","warnIfNotCurrentlyActingUpdatesInDev","useCallback","useContext","useImperativeHandle","useMemo","useReducer","useRef","useDebugValue","useDeferredValue","useTransition","useOpaqueIdentifier","unstable_isNewReconciler","InvalidNestedHooksDispatcherOnMountInDEV","InvalidNestedHooksDispatcherOnRerenderInDEV","warnInvalidContextAccess","warnInvalidHookAccess","commitTime","layoutEffectStartTime","profilerStartTime","passiveEffectStartTime","currentUpdateIsNested","nestedUpdateScheduled","isCurrentUpdateNested","markNestedUpdateScheduled","resetNestedUpdateFlag","syncNestedUpdateFlag","getCommitTime","recordCommitTime","startProfilerTimer","actualStartTime","stopProfilerTimerIfRunning","stopProfilerTimerIfRunningAndRecordDelta","overrideBaseTime","elapsedTime","actualDuration","selfBaseDuration","recordLayoutEffectDuration","parentFiber","effectDuration","parentStateNode","recordPassiveEffectDuration","passiveEffectDuration","startLayoutEffectTimer","startPassiveEffectTimer","transferActualDuration","createCapturedValue","showErrorDialog","boundary","errorInfo","logCapturedError","logError","componentStack","_suppressLogging","componentNameMessage","errorBoundaryMessage","errorBoundaryName","combinedMessage","e","createRootErrorUpdate","onUncaughtError","createClassErrorUpdate","markFailedErrorBoundaryForHotReloading","componentDidCatch","markLegacyErrorBoundaryAsFailed","attachPingListener","wakeable","pingCache","threadIDs","ping","pingSuspendedRoot","then","throwException","sourceFiber","rootRenderLanes","currentSource","hasInvisibleParentBoundary","wakeables","currentSourceFiber","renderDidError","isAlreadyFailedLegacyErrorBoundary","markUpdate","markRef","appendAllChildren","updateHostContainer","updateHostComponent","updateHostText","needsVisibilityToggle","currentHostContext","cutOffTailIfNeeded","renderState","hasRenderedATailFallback","tailMode","tailNode","tail","lastTailNode","bubbleProperties","completedWork","didBailout","newChildLanes","subtreeFlags","treeBaseDuration","completeWork","isLegacyContextProvider","popLegacyContext","fiberRoot","popTopLevelLegacyContextObject","resetMutableSourceWorkInProgressVersions","pendingContext","wasHydrated","hydrate","nextDidTimeout","prevDidTimeout","offscreenFiber","hasInvisibleChildContext","renderDidSuspend","renderDidSuspendDelayIfPossible","primaryChildFragment","didSuspendAlready","renderedTail","cannotBeSuspended","renderHasNotSuspendedYet","suspended","newThenables","getRenderTargetTime","renderingStartTime","isBackwards","previousSibling","last","suspenseContext","popRenderLanes","nextIsHidden","prevIsHidden","subtreeRenderLanes","didReceiveUpdate","didWarnAboutBadClass","didWarnAboutModulePatternComponent","didWarnAboutContextTypeOnFunctionComponent","didWarnAboutGetDerivedStateOnFunctionComponent","didWarnAboutFunctionRefs","didWarnAboutReassigningProps","didWarnAboutRevealOrder","didWarnAboutTailOptions","didWarnAboutDefaultPropsOnFunctionComponent","reconcileChildren","nextChildren","forceUnmountCurrentAndReconcile","updateForwardRef","innerPropTypes","bailoutOnAlreadyFinishedWork","updateMemoComponent","isSimpleFunctionComponent","compare","resolvedType","resolveFunctionForHotReloading","validateFunctionComponentInDev","updateSimpleMemoComponent","createFiberFromTypeAndProps","hasScheduledUpdateOrContext","checkScheduledUpdateOrContext","prevProps","outerMemoType","outerPropTypes","updateFunctionComponent","updateOffscreenComponent","spawnedCachePool","baseLanes","cachePool","pushRenderLanes","nextBaseLanes","prevBaseLanes","updateLegacyHiddenComponent","updateMode","updateProfiler","updateClassComponent","shouldError","tempInstance","hasContext","pushLegacyContextProvider","nextUnitOfWork","finishClassComponent","didCaptureError","pushHostRootContext","updateHostRoot","prevChildren","resetHydrationState","mountLazyComponent","_current","resolvedTag","resolveLazyComponentTag","resolvedProps","resolveClassForHotReloading","resolveForwardRefForHotReloading","hint","mountIncompleteClassComponent","mountIndeterminateComponent","warningKey","debugSource","SUSPENDED_MARKER","retryLane","mountSuspenseOffscreenState","updateSuspenseOffscreenState","prevOffscreenState","shouldRemainOnFallback","suspenseState","getRemainingWorkInPrimaryTree","updateSuspenseComponent","shouldSuspend","showFallback","nextPrimaryChildren","nextFallbackChildren","fallback","fallbackFragment","mountSuspenseFallbackChildren","unstable_expectedLoadTime","mountSuspensePrimaryChildren","fallbackChildFragment","updateSuspenseFallbackChildren","updateSuspensePrimaryChildren","primaryChildren","primaryChildProps","mountWorkInProgressOffscreenFiber","fallbackChildren","progressedPrimaryFragment","offscreenProps","createFiberFromOffscreen","updateWorkInProgressOffscreenFiber","currentPrimaryChildFragment","currentFallbackChildFragment","scheduleWorkOnFiber","propagateSuspenseContextChange","firstChild","findLastContentRow","lastContentRow","currentRow","validateRevealOrder","toLowerCase","validateTailOptions","validateSuspenseListNestedChild","childSlot","isAnArray","isIterable","validateSuspenseListChildren","childrenIterator","initSuspenseListRenderState","updateSuspenseListComponent","shouldForceFallback","didSuspendBefore","nextRow","updatePortalComponent","hasWarnedAboutUsingNoValuePropOnContextProvider","updateContextProvider","providerType","newValue","providerPropTypes","oldValue","hasLegacyContextChanged","hasWarnedAboutUsingContextAsConsumer","updateContextConsumer","Consumer","remountFiber","oldWorkInProgress","newWorkInProgress","prevSibling","updateLanes","attemptEarlyBailoutIfNoScheduledUpdate","hasChildWork","primaryChildLanes","beginWork","_debugNeedsRemount","unresolvedProps","unwindWork","unwindInterruptedWork","interruptedWork","invokeGuardedCallbackProd","func","d","f","funcArgs","onError","invokeGuardedCallbackImpl","window","dispatchEvent","document","createEvent","fakeNode","createElement","invokeGuardedCallbackDev","evt","didCall","windowEvent","event","windowEventDescriptor","getOwnPropertyDescriptor","restoreAfterDispatch","removeEventListener","evtType","didSetError","isCrossOriginError","handleWindowError","colno","lineno","defaultPrevented","inner","addEventListener","initEvent","hasError","caughtError","reporter","invokeGuardedCallback","clearCaughtError","didWarnAboutUndefinedSnapshotBeforeUpdate","PossiblyWeakSet","WeakSet","nextEffect","reportUncaughtErrorInDEV","callComponentWillUnmountWithTimer","componentWillUnmount","safelyCallComponentWillUnmount","nearestMountedAncestor","captureCommitPhaseError","safelyDetachRef","safelyCallDestroy","focusedInstanceHandle","shouldFireAfterActiveInstanceBlur","commitBeforeMutationEffects","commitBeforeMutationEffects_begin","shouldFire","ensureCorrectReturnPointer","commitBeforeMutationEffects_complete","commitBeforeMutationEffectsOnFiber","didWarnSet","__reactInternalSnapshotBeforeUpdate","commitHookEffectListUnmount","commitHookEffectListMount","commitPassiveEffectDurations","finishedRoot","onPostCommit","phase","outer","commitLayoutEffectOnFiber","committedLanes","commitMount","onCommit","onRender","enqueuePendingPassiveProfilerEffect","commitSuspenseHydrationCallbacks","commitAttachRef","hideOrUnhideAllChildren","hostSubtreeRoot","instanceToUse","commitDetachRef","currentRef","commitUnmount","NoHookEffect","unmountHostComponents","commitNestedUnmounts","detachFiberMutation","detachFiberAfterEffects","hostInstance","getHostParentFiber","isHostParent","getHostSibling","siblings","commitPlacement","isContainer","before","insertOrAppendPlacementNodeIntoContainer","insertOrAppendPlacementNode","isHost","currentParentIsValid","currentParentIsContainer","findParent","commitDeletion","commitWork","commitSuspenseCallback","attachSuspenseRetryListeners","retryCache","retry","resolveRetryWakeable","commitResetTextContent","commitMutationEffects","inProgressLanes","commitMutationEffects_begin","commitMutationEffects_complete","commitMutationEffectsOnFiber","wasHidden","markCommitTimeOfFallback","offscreenBoundary","primaryFlags","commitLayoutEffects","commitLayoutEffects_begin","subtreeRoot","isModernRoot","commitLayoutMountEffects_complete","commitPassiveMountEffects","commitPassiveMountEffects_begin","commitPassiveMountEffects_complete","commitPassiveMountOnFiber","commitPassiveUnmountEffects","commitPassiveUnmountEffects_begin","fiberToDelete","commitPassiveUnmountEffectsInsideOfDeletedTree_begin","previousFiber","detachedChild","detachedSibling","commitPassiveUnmountEffects_complete","commitPassiveUnmountOnFiber","deletedSubtreeRoot","commitPassiveUnmountInsideDeletedTreeOnFiber","commitPassiveUnmountEffectsInsideOfDeletedTree_complete","didWarnWrongReturnPointer","expectedReturnFiber","COMPONENT_TYPE","HAS_PSEUDO_CLASS_TYPE","ROLE_TYPE","TEST_NAME_TYPE","TEXT_TYPE","ceil","ReactCurrentActQueue","NoContext","BatchedContext","RenderContext","CommitContext","RetryAfterError","RootIncomplete","RootFatalErrored","RootErrored","RootSuspended","RootSuspendedWithDelay","RootCompleted","executionContext","workInProgressRoot","workInProgressRootRenderLanes","subtreeRenderLanesCursor","workInProgressRootExitStatus","workInProgressRootFatalError","workInProgressRootIncludedLanes","workInProgressRootSkippedLanes","workInProgressRootUpdatedLanes","workInProgressRootPingedLanes","globalMostRecentFallbackTime","FALLBACK_THROTTLE_MS","workInProgressRootRenderTargetTime","Infinity","RENDER_TIMEOUT_MS","resetRenderTimer","hasUncaughtError","firstUncaughtError","legacyErrorBoundariesThatAlreadyFailed","rootDoesHavePassiveEffects","rootWithPendingPassiveEffects","pendingPassiveEffectsLanes","pendingPassiveProfilerEffects","NESTED_UPDATE_LIMIT","nestedUpdateCount","rootWithNestedUpdates","NESTED_PASSIVE_UPDATE_LIMIT","nestedPassiveUpdateCount","currentEventTime","currentEventTransitionLane","isTransition","eventLane","requestRetryLane","checkForNestedUpdates","warnAboutRenderPhaseUpdatesInDEV","markUpdateLaneFromFiberToRoot","deferRenderPhaseUpdateToNextBatch","ensureRootIsScheduled","isBatchingLegacy","warnAboutUpdateOnNotYetMountedFiberInDEV","existingCallbackNode","callbackNode","callbackPriority","newCallbackPriority","existingCallbackPriority","fakeActCallbackNode","newCallbackNode","didScheduleLegacyUpdate","performSyncWorkOnRoot","schedulerPriorityLevel","performConcurrentWorkOnRoot","didTimeout","originalCallbackNode","didFlushPassiveEffects","flushPassiveEffects","exitStatus","disableSchedulerTimeoutInWorkLoop","renderRootConcurrent","renderRootSync","prevExecutionContext","errorRetryLanes","fatalError","prepareFreshStack","finishedLanes","finishConcurrentRender","commitRoot","shouldForceFlushFallbacksInDEV","msUntilTimeout","timeoutHandle","eventTimeMs","timeElapsedMs","jnd","markRootSuspended_dontCallThisOneDirectly","batchedUpdates","flushSyncWithoutWarningIfAlreadyRendering","flushSync","pushToStack","popFromStack","handleError","thrownValue","erroredWork","completeUnitOfWork","yetAnotherThrownValue","pushDispatcher","popDispatcher","workLoopSync","performUnitOfWork","workLoopConcurrent","unitOfWork","siblingFiber","previousUpdateLanePriority","commitRootImpl","renderPriorityLevel","flushRenderPhaseStrictModeWarningsInDEV","subtreeHasEffects","rootHasEffect","onCommitRootDevTools","renderPriority","priority","flushPassiveEffectsImpl","profilerEffects","onPostCommitRootDevTools","prepareToThrowUncaughtError","captureCommitPhaseErrorOnRoot","rootFiber","retryTimedOutBoundary","boundaryFiber","timeElapsed","didWarnStateUpdateForNotYetMountedComponent","ReactCurrentFiberCurrent","originalBeginWork","didWarnAboutUpdateInRender","didWarnAboutUpdateInRenderForAnotherComponent","ReactCurrentDebugFiberIsRenderingInDEV","renderingComponentName","dedupeKey","setStateComponentName","priorityLevel","actQueue","Scheduler_scheduleCallback","Scheduler_cancelCallback","warnsIfNotActing","disableActWarning","warnIfNotCurrentlyActingUpdatesInDEV","resolveFamily","failedBoundaries","setRefreshHandler","handler","family","currentRender","syntheticType","prevType","nextType","needsCompareFamilies","$$typeofNextType","prevFamily","scheduleRefresh","staleFamilies","updatedFamilies","scheduleFibersWithFamiliesRecursively","scheduleRoot","updateContainer","candidateType","needsRender","needsRemount","findHostInstancesForRefresh","families","hostInstances","types","findHostInstancesForMatchingFibersRecursively","didMatch","findHostInstancesForFiberShallowly","foundHostInstances","findChildHostInstancesForFiberShallowly","hasBadMapPolyfill","nonExtensibleObject","preventExtensions","FiberNode","Number","NaN","createFiber","shouldConstruct","isReactComponent","currentDependencies","createHostRootFiber","isStrictMode","concurrentUpdatesByDefaultOverride","fiberTag","getTag","createFiberFromProfiler","createFiberFromSuspense","createFiberFromSuspenseList","createFiberFromLegacyHidden","elements","content","pendingChildren","FiberRootNode","_debugRootType","createFiberRoot","hydrationCallbacks","uninitializedFiber","didWarnAboutNestedUpdates","didWarnAboutFindNodeInStrictMode","getContextForSubtree","parentComponent","createContainer","ReactCurrentFiberIsRendering","getPublicRootInstance","containerFiber","shouldErrorImpl","shouldSuspendImpl","overrideHookState","overrideHookStateDeletePath","overrideHookStateRenamePath","overrideProps","overridePropsDeletePath","overridePropsRenamePath","scheduleUpdate","setErrorHandler","setSuspenseHandler","copyWithDeleteImpl","obj","updated","copyWithDelete","copyWithRenameImpl","oldPath","newPath","oldKey","newKey","copyWithRename","copyWithSetImpl","copyWithSet","findHook","newShouldErrorImpl","newShouldSuspendImpl","findHostInstanceByFiber","hostFiber","emptyFindFiberByHostInstance","getCurrentFiberForDevTools","getIsStrictModeForDevtools","injectIntoDevTools","devToolsConfig","findFiberByHostInstance","bundleType","rendererPackageName","rendererConfig","currentDispatcherRef","getCurrentFiber","getIsStrictMode","reconcilerVersion","ReactVersion","act","defaultTestOptions","toJSON","renderedChildren","renderedChild","json","childrenToTree","nodeAndSiblingsArray","toTree","flatten","nodeWithSibling","arr","result","n","el","nodeType","rendered","validWrapperTypes","getChildren","startingNode","descend","wrapFiber","ReactTestInstance","_currentFiber","_fiber","find","predicate","expectOne","findAll","deep","findByType","findAllByType","findByProps","findAllByProps","JSON","stringify","options","propsMatch","results","all","prefix","filter","isConcurrent","concurrentUpdatesByDefault","unstable_isConcurrent","unstable_strictMode","unstable_concurrentUpdatesByDefault","entry","_Scheduler","newElement","unmount","unstable_flushSync","configurable","fiberToWrapper","wrapper"],"mappings":"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"}